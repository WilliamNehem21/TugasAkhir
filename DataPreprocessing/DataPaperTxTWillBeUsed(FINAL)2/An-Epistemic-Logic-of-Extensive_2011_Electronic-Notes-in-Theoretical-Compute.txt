Available online at www.sciencedirect.com



Electronic Notes in Theoretical Computer Science 278 (2011) 245–260
www.elsevier.com/locate/entcs
An Epistemic Logic of Extensive Games
Emiliano Lorini and Fr´ed´eric Moisan
Universit´e de Toulouse, CNRS,
Institut de Recherche en Informatique de Toulouse (IRIT)


Abstract
The aim of this work is to propose a logical framework for representing interacting agents in the context of extensive form games. Because of the importance of the temporal dimension provided by such games, we create a modal epistemic logic that allows to quantify over both strategies and vertices within the game tree. The first part of the article is devoted to the logic itself with the definition of its language and its semantics. In order to illustrate the use of this logic, we define, in the following part, the concept of rationality in the case of extensive form games and the backward induction concept, as they are defined by Robert Aumann. Based on these definitions, we then provide a syntactic proof of Aumann’s theorem that states the following: “for any non degenerate game of perfect information, common knowledge of rationality implies the backward induction solution”. We finally propose an in-depth formal analysis of the hypotheses that are needed to prove such a theorem.
Keywords: epistemic logic, extensive form games, rationality, backward induction, Aumann’s theorem

Introduction
The aim of this article is to propose a modal logic framework that allows to reason about epistemic games in extensive form. In this kind of games, players decide what to do according to some general principles of rationality while being uncertain about several aspects of the interaction such as other agents’ choices, other agents’ preferences, etc.
While epistemic games have been extensively studied in economics (in the so- called interactive epistemology area, see e.g. [3,2,8,5,9,11]) and while there have been few modal logic analyses of epistemic games both in strategic form and in extensive form (see, e.g., [22,10,8,18,26,14,23,24,4]), there exists no logic with a corresponding formal semantics for extensive form games which has been showed to be sufficiently general:
to express in the object language solution concepts like backward induction,
to derive syntactically the epistemic and rationality conditions on which such solution concepts are based.

1571-0661 © 2011 Elsevier B.V. Open access under CC BY-NC-ND license.
doi:10.1016/j.entcs.2011.10.019

While it is shown in [23] and [24] that reasoning about actions only is sufficient to compute solution concepts like the backward induction, such game logics can not express the notion of substantive rationality as in Aumann’s definition, which fully considers the temporal aspect of the concept of strategy. Indeed, unlike for strategic games where a strategy can be simply reduced to a set of actions (see [14]), a strategy in an extensive form game expresses not only the sequence of actions that will occur next, but also the actions that would occur in every vertex of the game.In
[10] a logic which enables to reason about the epistemic aspects of extensive games is presented. This logic deals with several game-theoretic concepts like the concepts of knowledge, rationality and backward induction. Nevertheless, all these notions are atomic propositions of the logic managed by an ad hoc axiomatization. Moreover, the logical approach to extensive form games proposed in [10] is purely syntactic: no model-theoretic analysis of extensive form games is proposed.
In this article, we try to fill this gap by proposing both a semantic and a syn- tactic analysis of extensive form games in modal logic. In particular, we introduce a multi-modal logic interpreted on a Kripke-style semantics which integrates the concepts of action, strategy, knowledge and preference and which allows to reason about the properties of extensive form games. In order to illustrate the expres- sive power of the logic, we define in its object language the well known concepts of rationality and backward induction, as they are defined according to economic theory. Based on these definitions, we then provide a syntactic proof of Aumann’s theorem that states the following: “for any non degenerate game of perfect infor- mation, common knowledge of rationality implies the backward induction solution” [1]. While there exist other logics that formalize similar theorems, none of these is expressive enough to provide syntactic proofs that would emphasize the various requirements assumed for the theorems. For example, while [4] presents a logic that can correctly define the statement of Aumann’s theorem, no syntactic proof of it is provided, and its language does not allow to verify whether the theorem holds when the epistemic conditions are weakened. Indeed, if one realistically only considers common knowledge to be bounded to some finite level, then the maximal depth of the game represents an important variable to the proof of the theorem. By considering the temporal dimension of such extensive games, we demonstrate its relevance to the proof of some weaker version of the theorem.
Our intention, throughout this paper, is not to show that a syntactic derivation of Aumann’s theorem is interesting in itself. Instead, we wish to demonstrate that this kind of analysis is useful to identify specific assumptions about the relationship between players’ knowledge and the game structure that are needed in order to prove the theorem.
The rest of the article is organized as follows. Section 2 is devoted to presenting our logic of action, strategy, knowledge and preference with the definition of its language and its semantics. Then, in Section 3, we define the concept of rationality in the case of extensive form games and the backward induction concept, as they are defined by Robert Aumann. Section 4 provides a syntactic proof of Aumann’s well-known theorem as well as a systematic analysis of the hypotheses that are

needed to prove it. Finally, in section 5, we propose some possible revisions to our logic, which lead to a more realistic interpretation of Aumann’s theorem. Related works on the logic of extensive games are discussed in Section 6.
A sketch of the syntactic proof of Aumann’s theorem is given in the Appendix at the end of the article (see [13] for the fully detailed proof).

A modal logic of actions, strategies, knowledge and preferences
We present in this section the modal logic ELEG (Epistemic Logic of Extensive Games) integrating the concepts of action, strategy, knowledge and preference. This logic supports reasoning about games in extensive form in which an agent might be uncertain about the current choices of the other agents.

Syntax
The syntactic primitives of the logic ELEG are the finite set of agents Agt , the set of atomic propositions Atm, a nonempty finite set of atomic action names Act =
{α1, α2,..., α|Act |}, a non-empty finite set of n integers I = {0,..., n}. The language L of the logic ELEG is given by the following BNF:
χ ::= p | α | turni | end | ki

ϕ ::= χ | ¬ϕ | ϕ ∨ ϕ |  ϕ | AXϕ | [Ki]ϕ | Xϕ
where p ranges over Atm, i ranges over Agt , α ranges over Act , and k ranges over
I. Formulas χ are called atomic formulas. The classical Boolean connectives ⊥, T,
∧, → and ↔ are defined from ∨ and ¬ in the usual manner.
The formula α has to be read “the action α is performed”, while turni and ki are read respectively “it is agent i’s turn to play”, and “the current strategy will ensure a payoff k to agent i”. Finally, end is meant to stand for “the current vertex of the game is an end vertex”.
The operator  is used to quantify over strategies of the current game.  ϕ has to be read “ϕ holds for all strategies of the current extensive game”. The operator AX is used to quantify over next vertices of the current extensive game. AXϕ has to be read “ϕ is true at every possible next vertex along the current strategy”.
The formula [Ki]ϕ is read as usual “agent i knows that ϕ is true”. X is the standard temporal operator of next. The formula Xϕ has to be read “ϕ will be true next”.
Moreover, the following abbreviations are given:


3ϕ	d=ef
EXϕ	d=ef
¬ ¬ϕ
¬AX¬ϕ
AX0ϕ	d=ef
AXn+1ϕ	d=ef
ϕ
AX(AXnϕ)

⟨Ki⟩ϕ	d=ef
αi	d=ef
X0ϕ	d=ef
Xn+1ϕ	d=ef
¬[Ki]¬ϕ α ∧ turni ϕ
XXnϕ
AX≤nϕ	d=ef
EXnϕ	d=ef
EX≤nϕ	d=ef
V0≤m≤n AXmϕ
¬AXn¬ϕ
¬AX≤n¬ϕ

3ϕ has to be read “ϕ holds for at least one strategy of the current extensive game”, whereas EXϕ has to read “ϕ is true in at least one possible next vertex along the current strategy”. ⟨Ki⟩ϕ has to be read “agent i thinks that ϕ is possible”, whereas αi has to be read “agent i performs the action α”. Xn has to be read “ϕ will be true n steps from now”. Operators AXnϕ and AX≤nϕ respectively read “ϕ is true in every vertex that can be reached in exactly n step(s) from now, along the current strategy” and “ϕ is true in every vertex that can be reached within n step(s) from now, along the current strategy”. Finally the corresponding dual operators EXnϕ and EX≤nϕ can be interpreted as “ϕ is true in at least one vertex that can be reached in exactly n step(s) from now, along the current strategy” and “ϕ is true in at least one vertex that can be reached within n step(s) from now, along the current strategy”.
As common in Propositional Dynamic Logic (PDL), we introduce an operator of sequential composition “;”. We define the set Seq of action sequences as the smallest set such that: α ∈ Seq for any α ∈ Act , and if ϵ1, ϵ2 ∈ Seq then ϵ1;ϵ2 ∈ Seq . Moreover, we consider Seqn ⊆ Seq to be the set of action sequences of length n. The fact that a given action sequence will occur and ϕ will be true afterwards can be defined in the object language by means of the following definition:

⟨α0; ... ; αn⟩ϕ d=ef
 

0≤l≤n
Xlαl ∧ Xnϕ

We use [EKC ]ϕ as an abbreviation of Vi∈C [Ki]ϕ, i.e. every agent in C knows ϕ
(if C = ∅ then [EKC ]ϕ is equivalent to T). Then we define by induction [EKk ]ϕ for

every natural number k ∈ N:

and for all k ≥ 1,
[EK0 ]ϕ d=ef ϕ

[EKk ]ϕ d=ef [EK
]([EKk−1]ϕ)

Similarly, we define for all natural numbers n ∈ N:
[CK0 ]ϕ d=ef ϕ


and for all n ≥ 1,
[CKn ]ϕ d=ef
 

1≤k≤n

[EKk ]ϕ

[CKn ]ϕ expresses C’s mutual knowledge that ϕ up to n iterations, i.e. everyone in C knows ϕ, everyone in C knows that everyone in C knows ϕ, and so on until level n.

Semantics
A strategic structure includes a set of vertices, a set of strategies, a successor func- tion associating vertices and strategies to vertices, a turn-taking function assigning agents to vertices. The set of vertices includes end vertices.
Definition 2.1 [Strategic structure] A strategic structure is a tuple T  =
⟨V , Q, S, next, EndV ⟩ where:
V is a non-empty set of vertices;
Q is total function Q : V −→ Agt mapping vertices to agents;
S is a nonempty set of strategies on V , and every strategy s ∈ S is a total function
s : V −→ Act mapping vertices to actions;
next is a partial function next : V × S −→ V mapping vertices and strategies to vertices such that:
C1 if s(w)= sj(w) then next (w, s)= next (w, sj);
EndV ⊆ V is the set of end vertices such that:
C2 w ∈ EndV if and only if, next (w, s) is undefined for every s.
Q(w)= i means that at vertex w it is agent i’s turn to play, and next (w, s)= wj means that wj is the next vertex of w with respect to the strategy s. We call index a pair (w, s) with w ∈ V and s ∈ S. We define H = V × S the set of all indices.
Note that the particular concept of a strategy in Definition 2.1 considers every vertex of the game and is not restricted to a single player’s moves as usually done in game theory. However, for every s ∈ S, a single player i’s strategy si can be defined as the restriction of s to the vertices in which it is agent i’s turn to play.
According to the Constraint C1, two strategies selecting the same action at a given vertex lead to the same next vertex. According to the constraint C2, an end vertex is a vertex which does not have a next vertex.
Definition 2.2 [Successor] R is a relation on vertices such that:
for every w, v ∈ V , wRv if and only if there is s ∈ S such that next (w, s)= v.
wRv means that vertex v is a successor of vertex w.
An extensive game model is nothing but a strategic structure supplemented with accessibility relations for agents’ knowledge over strategies, agents’ preferences and a valuation of atomic propositions.
Definition 2.3 [Extensive game model] An extensive game model is a tuple
M = ⟨T, {Ei | i ∈ Agt }, {Pi | i ∈ Agt }, π⟩ where:
T is a strategic structure;
Every Ei is an equivalence relation on S such that:
C3 if sEisj and Q(w)= i, then s(w)= sj(w);
every Pi is a total function Pi : H −→ I mapping every index to an integer such that:
C4 if next (w, s)= wj, then Pi(w, s)= k if and only if Pi(wj, s)= k;

C5 if w ∈ EndV and s(w)= sj(w) then Pi(w, s)= Pi(w, sj).
π : Atm −→ 2H is a valuation function on indices.
sEisj means that agent i cannot distinguish the strategy s from the strategy sj. Pi(w, s)= k means that the strategy s played at the vertex w will ensure a payoff k to agent i.
Constraint C3 is the assumption that every agent knows his choice when it is his turn to play [1,5]. Constraint C4 correctly expresses the fact that in an extensive form game, preferences are built over histories, where a history is nothing but a sequence of indices (w0, s),..., (wn, s),... such that next (wi, s) = wi+1 for every 0 ≤ i. According to the Constraint C5, two strategies selecting the same action at an end vertex lead to the same payoff for an agent. In other words, at an end vertex the payoff of an action is uniquely determined.
Definition 2.4 [Truth conditions] Truth of a formula in a model M at a given index (w, s) is defined as follows:
M, w, s |= p	iff	(w, s) ∈ π(p);
M, w, s |= ¬ϕ	iff	M, w, s |= ϕ;
M, w, s |= ϕ ∨ ψ	iff	M, w, s |= ϕ or M, w, s |= ψ;
M, w, s |= α	iff	s(w)= α;
M, w, s |= turni	iff	Q(w)= i;
M, w, s |= end	iff	w ∈ EndV ;
M, w, s |= ki	iff	Pi(w, s)= k;
M, w, s |= Xϕ	iff	if next (w, s) is defined then M, next (w, s),s |= ϕ;
M, w, s |=  ϕ	iff	M, w, sj |= ϕ for all sj ∈ S;
M, w, s |= AXϕ	iff	M, wj,s |= ϕ for all wj ∈ V such that wRwj;
M, w, s |= [Ki]ϕ	iff	M, w, sj |= ϕ for all sj such that sEisj.
A formula ϕ is true in an extensive game model M iff M, w, s |= ϕ for every vertex w in V and every strategy s in S. ϕ is ELEG-valid (noted |= ϕ) iff ϕ is true in all extensive game models. ϕ is ELEG-satisﬁable iff ¬ϕ is not ELEG-valid.
Some validities
Table 1 provides an exhaustive list of ELEG validities that will be sufficient to provide in Section 4 a syntactic proof of Aumann’s theorem.
Let us prove the validity Perm[Ki],AX as an example. Assume M, w, s |= [Ki]AXϕ for an arbitrary ELEG model M . This is equivalent to say that M, w, sj |= AXϕ for all sj such that sEisj which, in turn, is equivalent to say that M, wj, sj |= ϕ for all (wj, sj) such that sEisj and wRwj. The latter is equivalent to say that M, wj,s |= [Ki]ϕ for all wj such that wRwj which, in turn, is equivalent to say that M, w, s |= AX[Ki]ϕ.
In the sequel, we will write ▶ELEG ϕ to mean that ϕ can be derived by means



(CPL)
(S5 ) (S5[Ki ]) (KX)
(KAX)
(DetX) (EndVert) (PerfectInfo) (Perm ,AX) (NxtVert) (Perm[Ki ],AX) (TurnStr) (TimeVert) (Aware)
(CompletePref )
(SinglePref )
All principles of classical propositional logic All S5 principles for 
All S5 principles for every [Ki] All K principles for X
All K principles for AX
Xϕ V Xчϕ
end x  X⊥
 ϕ → [Ki]ϕ
 AXϕ x AX ϕ
 X ϕ x AX ϕ [Ki]AXϕ x AX[Ki]ϕ turni → turni
AXϕ → Xϕ
turni → (α → [Ki]α)
_ ki
k∈I
ki → чhi if k /= h

(OneAct)
_ α
α∈Act

(SingleAct)	α → чβ if α /= β

(TurnTaking)
_

i∈Agt
turni

(SingleTurn) (TimePref ) (EndAct) (StrAct)
turni → чturnj if i /= j
чend → (ki x Xki)
(end Λ α Λ ki) → (α → ki) (α Λ X ϕ) → (α → Xϕ)



Table 1
Some validities of ELEG

of the list of principles given in Table 1. The study of a complete axiomatization of the logic ELEG is postponed to future work.
Backward induction and rationality
We here define two fundamental concepts in Aumann’s epistemic analysis of exten- sive form games: the concept of backward induction and the concept of rationality. As a matter of simplicity to later prove Aumann’s Theorem, we only provide in this section simplified formal definitions that only apply to games of uniform depth.
One should note however that more general definitions of both backward induction and rationality can easily be expressed in ELEG.

Backward induction
The notion of backward induction represents the process of reasoning backwards in time, starting from each end vertex of the game in order to determine a sequence of optimal actions. This method is generally used to compute the subgame perfect Nash equilibria in sequential games. The backward induction (BI) solution in a

game of depth n (i.e. where at most n steps are necessary to reach an end vertex of the game) can be computed by iterating the process n times, as the BI solution at one state relies on the BI solution at every possible successive state. Therefore, the first step BI solution (n = 0) corresponds to the maximization of preferences for the last player to play at each possible end vertex of the game. The BI solution after n (n > 0) steps corresponds to the maximization of the current player’s preferences, considering only those that satisfy the BI solution after n − 1 steps at any possible next state.
The recursive formal definition in ELEG of the BI solution after n steps is as follows.
For the case n = 0 we define:

BI0 d=ef end ∧	 
i∈Agt ,k∈I
(turni ∧ ki ∧  ( 
h∈I:h≤k
hi))



For every n > 0 we define:
BIn d=ef ¬end ∧	 
i∈Agt ,k∈I


(turni ∧ ki ∧ AX(BIn−1 ∧	 
h∈I:h≤k

hi))

Therefore: M, w, s |= BIn if and only if the current strategy s, when starting from vertex w, corresponds to a backward induction solution that can be computed in n steps.

Epistemic rationality
The following ELEG definition characterizes a notion of rationality that is supposed in Aumann’s epistemic analysis of extensive form games:

Ratend d=ef (end ∧ turni) →  (ki ∧ ( 

hi))

k∈I	h∈I:h≤k
Ratend means that an agent i is rational at an end vertex (i.e. at some end vertex of the game) if and only if i chooses an action that maximizes his individual payoff. Note that in this case, rationality does not rely on any epistemic component.

Ratчend d=ef (¬end ∧ turni) →  ⟨Ki⟩(ki ∧ AX( 

⟨Ki⟩hi))

k∈I	h∈I:h≤k
Ratчend means that an agent i is rational at any intermediate vertex (any node that is not an end vertex of the game) if and only if i chooses an action in such a way that what he considers possible to happen afterwards is not strictly dominated by some alternative future he would consider, had he chosen any other action. In other words, as every possible next vertex corresponds to one of i’s possible actions, i is rational if and only if each of these vertices is not strictly dominated, according to i’s uncertainty, by the next actual vertex (corresponding to the actual action

chosen by i).

Rati d=ef Ratend ∧ Ratчend

i	i
Note that introspection on rationality is expressed by the following valid formula of ELEG:
Rati ↔ [Ki]Rati

A syntactic proof of Aumann’s theorem
As already stated in the previous section, a fundamental assumption of Aumann’s theorem is that the game is in “general position”, i.e. every history of the game is associated to a unique preference value for every agent. This important notion can be defined in the logic ELEG in the following way:
GenPosn d=ef	AX≤n ((ki ∧ ⟨ϵ⟩end) →  (⟨ϵ⟩end ↔ ki))
0≤h≤n k∈I,i∈Agt ,є∈Seqh

In our syntactic proof of Aumann’s theorem we only consider game structures with uniform depth, that is, games whose end vertices have the same distance from a given vertex.
The following construction Depthn means that “the current game has a uniform depth of degree n from the current vertex”. In other words, no matter what actions will be chosen in the future, an end vertex will be reached in exactly n steps. This concept is thus captured by the following ELEG formula:
Depthn d=ef ( X)nend
This assumption, which is not stated in Aumann’s original theorem, is used here only to simplify the formal proof. One should note however that any extensive game can be represented by an extensive game with uniform depth (i.e. by adding additional non informative actions and preferences).
According to Aumann’s theorem, the following constraints must be satisfied in order for the current strategy to be a backward induction solution:
the game is finite;
the game has a uniform depth of degree n from the current vertex;
the game is in the general position;
there is common knowledge up to level at least n that at every future vertex (up to depth n) all agents are rational.
Theorem 4.1 For every n, m ∈ N such that n ≤ m, we have:


▶ELEG ([CKm

]AX≤n( 
i∈Agt
Rati) ∧ Depthn ∧ GenPosn) → BIn

Note that the proof of Theorem 4.1 only requires to prove the case where m = n
because of Axiom T for every [Ki] modal operator.
The proof of theorem 4.1 in the Appendix indicates several points that need to be discussed. A strong assumption made in the theorem is about the type of ratio- nality that is used. In fact, Aumann’s theorem considers substantive rationality in the hypothesis, which means that in every vertex of the game, the players will be rational. Such a definition is criticizable because it requires players to be even ratio- nal in vertices that will never be reached given some expected strategy. According to Stalnaker [19] 1 , a more realistic concept of rationality should be considered only on the vertices that are actually reached. However, the latter definition does not guarantee the backward induction solution. Our proof of the theorem suggests that this definition of substantive rationality is indeed important to the derivation of the equilibrium solution. To be even more precise, the use of Axiom Perm[Ki],AX in the proof of Theorem 4.1 indicates that common knowledge of substantive ra- tionality must be true not only now but in every future vertex. Obviously Axiom Perm[Ki],AX is very strong as it assumes that players know at the beginning of the game what they will do at any reachable state in the future where they have to play. This simply means that players can not learn anything through the game play.

A more convenient characterization of knowledge
Following the previous analysis of the syntactic proof of Aumann’s theorem, we propose to revise our logic by providing a more realistic interpretation of Aumann’s theorem.
First, one can note from the syntactic proof in the Appendix that Aumann’s theorem can be weakened through a reinterpretation of the epistemic operator. Indeed, every proof step from Theorem 4.1 using Axiom T for the S5 knowledge operator [Ki] can still be proved using KD45 principles for the belief modal operator. Such an observation implies that a simple notion of belief (which is not necessarily truthful) is sufficient to prove Aumann’s theorem. The detailed proof of Theorem
4.1 in the Appendix shows that such a weakening of the epistemic operator is made possible mainly by Axiom Aware that requires agents to have introspection on their own performing action.In other words, agents always believe without a doubt what they’ll actually perform.
Moreover, the epistemic operator still remains unrealistic as it restricts agents to only consider static uncertainty over strategies (i.e. agents have the same un- certainty regarding strategies no matter which vertex they are in) and therefore prevents them to learn through the game. Hence in order to be more realistic, we here interpret the epistemic modal operator by means of an equivalence epistemic relation Ew on strategies for every agent i ∈ Agt and vertex w ∈ W . In this case, agents’ uncertainty over strategies can change through time.
Given this change on the epistemic relation, the truth condition of the knowledge

1 See also [12] for a discussion.

operator then becomes:
M, w, s |= [Ki]ϕ	iff	M, w, sj |= ϕ for all sj such that sEwsj.
Considering this new epistemic relation Ew, the previous constraint C3 has to
be reformulated as follows:
C3∗	if sEwsj and Q(w)= i, then s(w)= s(w)j
Moreover, the following constraints need to be introduced in order to keep Axiom
Perm[Ki],AX as in Table 1:
C6	if sEvsj and wRv then sEwsj
i	i
C7	if sEwsj and wRv then sEvsj
i	i
According to constraint C6, agents will never forget their current uncertainty over strategies in every reachable vertex. In other words, C6 simply means that agents will always have a perfect recall of their past uncertainty throughout the game. According to constraint C7, agents are always aware of their future uncer- tainty over strategies in every reachable vertex. In other words, C7 means that agents will never be able to discard strategies and therefore learn as they advance through time.
Let us provide the axiom corresponding to constraint C6:


[Ki],AX)
[Ki]AXϕ → AX[Ki]ϕ



Note that Axiom Perm∗
i
is simply a weaker version of the initial Axiom

Perm[Ki],AX from Table 1. It is clearly showed in the Appendix that constraint C6

along with its corresponding Axiom Perm∗
i
are sufficient to the syntactic proof

of Theorem 4.1. Such an observation simply implies that Aumann’s theorem holds
even though agents are learning through the game (i.e. constraint C7, which is not necessary, can be removed). However, this analysis also indicates that Aumann’s theorem requires agents to have perfect recall through the game. In other words, for the theorem to be correct, players should never forget anything as they advance in time.

Related works
We are not the first to provide a logical analysis of extensive games. Several logical systems have been proposed which support reasoning about this class of games. We here discuss some of these systems and compare them with our logic ELEG.
In [21], van Benthem analyzes extensive games using different modal languages such as propositional dynamic logic (PDL), PDL with converse, and a modal forcing language which allows to express what a player can bring about in a given extensive game, no matter what the other players do. Moreover, he also studies a variety of notions of game equivalence based on the notion of bisimulation. Although van Benthem shows how PDL extended with epistemic operators can represent extensive

games with imperfect information, he does not consider the concept of rationality which is a fundamental element of Aumann’s epistemic analysis of extensive games. It is worth noting that, differently from our logic ELEG, standard PDL would fail to define such a concept, because it can neither identify the current strategy that is going to be played nor express what will be true at every possible next vertex along the current strategy (which is done through the operator AX in ELEG). Moreover, our logic ELEG shows that defining strategies explicitly in the object language — as done in PDL — is not necessary to express interesting game-theoretic concepts such as rationality and backward induction.
Related to van Benthem’s work is Ramanujan & Simon’s work [17,16] who have recently proposed an elegant approach to extensive games based on dynamic logic. However, Ramanujan & Simon do not deal with epistemic aspects of extensive games, as their logic does not have operators for representing epistemic states of players. The game logic presented in [15] also lacks epistemic operators, therefore preventing a formalization of the concept of epistemic rationality and a logical analysis of Aumann’s theorem. Bonanno’s logical account of extensive games [7,6] has the same limitation. He proposes a variant of dynamic logic extended with temporal operators for (branching) future and (linear) past and shows how his logic can be used to characterize the solution concept of backward induction. 2 But, like Ramanujan & Simon’s logic, Bonanno’s logic does not have epistemic operators which are required to represent Aumann’s notion of rationality and the statement of Aumann’s theorem. The same remark also applies to some recent work [20], which presents a similar logical approach to extensive games without considering the epistemic aspects.
ATL-based approaches to extensive games presented in [28] and [25] come closer to our current approach. For instance, in [28] a variant of ATL (Alternating-time temporal logic) with explicit strategies called ATEL (Alternating-time logic with explicit strategies) is proposed which allows to define solution concepts such as backward induction. The interesting aspect of ATEL, compared to ATL, is that one can explicitly reason about strategies in the object language. However, like Ramanujan & Simon and Bonanno, ATEL misses epistemic operators necessary to define Aumann’s notion of rationality. Another important difference between ATEL and our logic ELEG is that in ATEL formulas are interpreted with respect to states, whereas in ELEG they are interpreted with respect to state/strategy pairs (in this sense, ELEG semantics is bidimensional). The latter is an advantage because, differently from ATEL, it is possible in ELEG to reason about what will be true at every possible next vertex along the current strategy. We have shown that this is fundamental for expressing in the object language Aumann’s notion of rationality and the statement of Aumann’s theorem.
In [27], the authors propose an alternative way of proving Aumann’s theorem by using a purely proof-theoretic approach based on type theory. Differently from

2 Bonanno’s logic has four kinds of operators for past and future describing: (1) what is going to be the case at every future vertex of the game tree, (2) what has always been the case at every past vertex, (3) what is going to be the case at every predicted future vertex of the game tree, and (4) what has always been the case at every past vertex at which today was predicted.

Vestergaard et al.’s approach, our approach based on modal logic has the advantage of combining a proof-theoretic analysis of extensive games — which is what we have done in Section 4 — with a model-theoretic semantics.
Conclusion
In this paper, we have introduced a logical framework that provides an alternative way of representing extensive form games as compared to their usual specification in economics.
We showed that our logic is sufficiently general for our purpose to reason about dynamic epistemic games, as illustrated by the well known concepts of rationality and backward induction. Although these concepts have been extensively studied in economics, very few logical analyses have been proposed up to now. While several related works discuss and present some logical approaches to epistemic reasoning in such extensive games, none of these define a logic expressive enough to represent syntactically both the epistemic concepts and the equilibrium solutions. By the for- mal syntactic proof of Aumann’s theorem, we demonstrate that our logic is capable to fill this gap and provide further interesting information about them.
In addition to providing a complete axiomatization of our logic, we intend in future work to investigate some extensions of the logic ELEG. While the language of the logic presented here is restricted to reason about the future only, the current semantics can be extended to reason also about the past and every possible counter- factual situation. This represents another research direction that we also consider to study further.

References
R. J. Aumann. Backward induction and common knowledge of rationality. Games and Economic Behavior, 8:6–19, 1995.
R. J. Aumann. Interactive epistemology I: Knowledge. International Journal of Game Theory, 28(3):263–300, 1999.
R. J. Aumann and A. Brandenburger. Epistemic conditions for Nash equilibrium. Econometrica, 63:1161–1180, 1995.
A. Baltag, S. Smets, and J. A. Zvesper. Keep ‘hoping’ for rationality: a solution to the backward induction paradox. Synthese, 169(2):705–737, 2009.
P. Battigalli and G. Bonanno. Recent results on belief, knowledge and the epistemic foundations of game theory. Research in Economics, 53:149–225, 1999.
G. Bonanno. Branching time, perfect information games, and backward induction. Games and Economic Behavior, 36(1):57–73, 2001.
G. Bonanno. Modal logic and game theory: two alternative approaches. Risk Decision and Policy, 7(3):309–324, 2002.
G. Bonanno. A syntactic approach to rationality in games with ordinal payoffs. In Proc. of LOFT 2008, pages 59–86. Amsterdam University Press, 2008.
A. Brandenburger. Knowledge and equilibrium in games. Journal of Economic Perspectives, 6:83–101, 1992.
B. de Bruin. Explaining games: on the logic of game theoretic explanations. PhD thesis, University of Amsterdam, The Netherlands, 2004.


H. Gintis. The Bounds of Reason: Game Theory and the Unification of the Behavioral Sciences. Princeton University Press, 2009.
J.Y. Halpern. Substantive rationality and backward induction. Games and Economic Behavior, 37(2):425–435, 2001.

E. Lorini and F. Moisan. An Epistemic Logic of Extensive Games. Rapport de recherche IRIT/RT– 2011-4–FR, IRIT, Universit´e Paul Sabatier, Toulouse, 2011. Available at ftp://ftp.irit.fr/IRIT/ LILAC/Reports/epistemic_logic_extensive_games.pdf.
E. Lorini and F. Schwarzentruber. A modal logic of epistemic games. Games, 4(1):478–526, 2010.
R. Parikh. The logic of games and its applications. Annals of discrete mathematics, 24:111–140, 1985.

R. Ramanujam and S. Simon. A logical structure for strategies. In Proc. of LOFT 7, pages 151–176. Amsterdam University Press, 2008.
R. Ramanujam and S. E. Simon. Dynamic logic on games with structured strategies. In Proc. of KR 2008, pages 49–58. AAAI Press, 2008.
O. Roy. Thinking before acting: intentions, logic, rational choice. PhD thesis, University of Amsterdam, The Netherlands, 2008.
R. Stalnaker. Belief revision in games: forward and backward induction1. Mathematical Social Sciences, 36(1):31–56, 1998.
D. Surowik. Temporal logic approach to extensive games. Studies in Logic, Grammar and Rhetoric, 7(20):69–84, 2004.
J. van Benthem. Extensive games as process models. Journal of Logic, Language and Information, 11(3):289–313, 2002.
J. van Benthem. Rational dynamics and epistemic logic in games. International Game Theory Review, 9(1):13–45, 2007.
J. van Benthem, E. Pacuit, and O. Roy. Toward a theory of play: A logical perspective on games and interaction. Games, 2(1):52–86, 2011.

J. van Benthem, S. van Otterloo, and O. Roy. Preference logic, conditionals, and solution concepts in games. In H. Lagerlund, S. Lindstr¨om, and R. Sliwinski, editors, Modality Matters, pages 61–76. University of Uppsala, 2006.
W. van Der Hoek, W. Jamroga, and M. Wooldridge. A logic for strategic reasoning. In Proc. of AAMAS’05, pages 157–164. ACM, 2005.
W. van der Hoek and M. Pauly. Modal logic for games and information. In P. Blackburn, J. van Benthem, and F. Wolter, editors, Handbook of Modal Logic (3). Elsevier, Amsterdam, 2006.

R. Vestergaard, P. Lescanne, and H. Ono. The inductive and modal proof theory of aumann’s theorem on rationality. Technical Report IS-RR-2006-009, Japan Advanced Institute of Science and Technology, 2006.
D. Walther, W. van der Hoek, and M. Wooldridge. Alternating-time temporal logic with explicit strategies. In Proc. of TARK’07, pages 269–278. ACM, 2007.

Appendix
Because of space restrictions, we only provide a sketch of the proof of Aumann’s Theorem.
Here are the Lemmas needed to prove Theorem 4.1:


▶ELEG [CKn+1]AXnAllRat → [CKn
]AXnAllRat

Agt	Agt

▶ELEG (Depthn Λ GenPosn Λ ki Λ BIn) →  (BIn → ki)
Moreover, to make the proof of Theorem 4.1 more readable, we use the following abbreviation:

AllRat def 

i∈Agt
Rati

Syntactic proof of theorem 4.1
It is straightforward to show that Aumann’s theorem can be reformulated as follows:


▶ELEG ( 
0≤m≤n

[CKm ]AXmAllRat Λ Depthn Λ GenPosn) → BIn


We therefore prove this theorem inductively:

Basic case n=0:
Here, we prove ▶ELEG AllRat Λ end Λ GenPos0 → BI0.
▶EL EG (AllRat Λ end Λ G enPos0)

by the definitions of Rati and Ratend, and Axiom TurnTaking;

▶ELEG (AllRat Λ end Λ GenPos0) → BI0
by i and the definition of BI0;

Inductive case:
Let n ∈ N and let us prove that if the theorem is true for all k ≤ n, then it is true for n + 1.

▶ELEG ( 


0≤m≤n+1
[CKm ]AXmAllRat Λ Depthn+1 Λ GenPosn+1)

→ AX( 0≤m≤n
[CKm ]AXmAllRat Λ Depthn Λ GenPosn)

by the definitions of Depthn+1 and GenPosn+1, Lemma i, and Axiom Perm[K ],AX (or Perm∗	);


▶ELEG ( 



0≤m≤n+1
i

[CKm ]AXmAllRat Λ Depthn+1 Λ GenPosn+1)
[Ki ],AX

→ [EK1
]AX( 

0≤m≤n
[CKm ]AXmAllRat Λ Depthn Λ GenPosn)

by the definitions of Depthn+1 and GenPosn+1, and Axiom Perm[K ],AX (or Perm∗	);


▶ELEG ( 



0≤m≤n
i

[CKm ]AXmAllRat Λ Depthn Λ GenPosn) → BIn
[Ki ],AX

by induction;

▶ELEG ( 0≤m≤n+1


[CKm ]AXmAllRat Λ Depthn+1 Λ GenPosn+1)

→ AXBIn Λ [EK1 ]AXBIn

by i, ii and iii;

▶ELEG ( 0≤m≤n+1


[CKm ]AXmAllRat Λ Depthn+1 Λ GenPosn+1)

→ AX( k∈I ki ΛBIn Λ[Kj ]BIn ΛDepthn ΛGenPosn)Λ[Kj ]AX( k∈I ki ΛBIn Λ[Kj ]BIn ΛDepthn ΛGenPosn) by iv, the definitions of Depthn+1 and GenPosn+1, Axioms CompletePref and Perm[K ],AX (or

Perm∗
[Ki ],AX

▶ELEG ( 
), and Axiom 4 for [Ki];

[CKm ]AXmAllRat Λ Depthn+1 Λ GenPosn+1)

	
→ i∈Agt ,α∈Act turni Λ αi Λ [Ki]αi Λ X k∈I  (BIn → ki)
by v, Lemma ii, and Axioms TurnTaking, TimeVert, OneAct, and Aware;


▶ELEG ( 


0≤m≤n+1
[CKm ]AXmAllRat Λ Depthn+1 Λ GenPosn+1)


→ i∈Agt ,α∈Act turni Λ αi Λ [Ki]αi Λ k∈I (αi → X(BIn → ki)) by vi and Axiom StrAct;


▶ELEG ( 


0≤m≤n+1

[CKm ]AXmAllRat Λ Depthn+1 Λ GenPosn+1)


→  i∈Agt turni Λ XBIn Λ [Ki]XBIn Λ  k∈I X(BIn → ki) Λ [Ki]X(BIn → ki)
by vii and iv, Axioms PerfectInfo and TimeVert, Axiom T for  , Axiom K for [Ki], and boolean principles;

▶ELEG ( 


0≤m≤n+1
[CKm ]AXmAllRat Λ Depthn+1 Λ GenPosn+1)


→ i∈Agt ,k∈I turni Λ Xki Λ [Ki]Xki by viii and Axiom K for [Ki] and X;


▶ELEG ( 


0≤m≤n+1

[CKm ]AXmAllRat Λ Depthn+1 Λ GenPosn+1)


→ i∈Agt ,k∈I turni Λ ki Λ [Ki]ki by ix and Axiom TimePref ;


▶ELEG ( 


0≤m≤n+1

[CKm ]AXmAllRat Λ Depthn+1 Λ GenPosn+1)


→ [Kj ]AX([Kj ]BIn Λ k∈I ki Λ (BIn → ki)) by v and Lemma ii;


▶ELEG ( 


0≤m≤n+1

[CKm ]AXmAllRat Λ Depthn+1 Λ GenPosn+1)


→ [Kj ]AX( k∈I ki Λ [Kj ]ki)
by xi, Axiom PerfectInfo, and Axiom K for [Kj ];


▶ELEG ( 


0≤m≤n+1

[CKm ]AXmAllRat Λ Depthn+1 Λ GenPosn+1)


→  i∈Agt (turni Λ  k∈I⟨Ki⟩(ki Λ AX  h∈I:h≤k⟨Ki⟩hi) Λ [Ki]AX  h∈I (hi Λ [Ki]hi))
by xii, the definitions of Rati and Rat¬end, Axiom TurnTaking, and boolean principles;


▶ELEG ( 


0≤m≤n+1

[CKm ]AXmAllRat Λ Depthn+1 Λ GenPosn+1)


→  i∈Agt (turni Λ  k∈I⟨Ki⟩(ki Λ AX  h∈I:h≤k hi))
by xiii, Axiom SinglePref , and Axiom T for [Ki] (or Axiom D if [Ki] is KD45 modal operator);


▶ELEG ( 


0≤m≤n+1

[CKm ]AXmAllRat Λ Depthn+1 Λ GenPosn+1)


→ i∈Agt (turni Λ k∈I⟨Ki⟩(ki Λ AX (BIn →  h∈I:h≤k hi)))
by xiv and v, Lemma ii, and Axiom T for [Ki] (or Axiom D if [Ki] is KD45 modal operator);


▶ELEG ( 


0≤m≤n+1

[CKm ]AXmAllRat Λ Depthn+1 Λ GenPosn+1)


→ i∈Agt (turni Λ k∈I⟨Ki⟩ki Λ AX(BIn →  h∈I:h≤k hi))
by xv, Axioms Perm ,AX and PerfectInfo, and Axioms T and 5 for  ;


▶ELEG ( 


0≤m≤n+1

[CKm ]AXmAllRat Λ Depthn+1 Λ GenPosn+1)


→ i∈Agt (turni Λ k∈I⟨Ki⟩ki Λ AX(BIn Λ h∈I:h≤k hi)) by xvi and iv, and Axiom K for AX;


▶ELEG ( 


0≤m≤n+1

[CKm ]AXmAllRat Λ Depthn+1 Λ GenPosn+1)


→ чend Λ i∈Agt (turni Λ  k∈I ki Λ AX( h∈I:h≤k hi Λ BIn))
by xvii and x, the definition of Depthn+1, and boolean principles;


▶ELEG ( 
→ BIn+1


0≤m≤n+1

[CKm ]AXmAllRat Λ Depthn+1 Λ GenPosn+1)

by xviii and the definition of BIn+1;
