Available online at www.sciencedirect.com


Electronic Notes in Theoretical Computer Science 303 (2014) 37–57
www.elsevier.com/locate/entcs

Exploring Users’ Preferences in a Fuzzy Setting
Cynthia Vera Glodeanu1,2
Institute of Algebra Technische Universit¨at Dresden
Dresden, Germany

Abstract
We propose a new method for modelling users’ preferences on attributes that contain more than one trait. Starting with a data set the users have to enter a sort of order on the attributes in form of formulas corresponding to their preferences. Based on this order they only receive the relevant formal concepts, i.e., “object-attribute clusters”, where relevant corresponds to the users’ point of view. The preference modelling is done within the framework of Formal Fuzzy Concept Analysis. This has numerous advantages. First, the relevant information is contained in a complete lattice, the concept lattice, that allows the users to browse among their preferences. This lattice may be used for further data analysis by applying different methods from Formal Concept Analysis. Second, we can investigate the computation of non-redundant bases for the entered formulas. Since the users are allowed to enter the formulas, these may be redundant. The base offers a better overview of the preferences and thus the formulas can be altered more easily.
Keywords: Formal Concept Analysis, fuzzy data, data reduction, L∗-closure operators.


Introduction
Formal Concept Analysis [16] is an instrument for data analysis based on lattice theory. Starting with a set of formal objects, a set of formal attributes and an incidence relation indicating which object has which attribute, one obtains a formal context combining these three components. The context, in turn, allows for the computation of the formal concepts. These concepts are understood as units with a conceptual extent and a conceptual intent, an idea that can be found already in the Logic of Port Royal [11]. The extent of a concept contains all the objects shared by the attributes from its intent. Dually, the intent of a formal concept contains all the attributes that the objects from its extent have in common. The order on the concepts is given by the subconcept-superconcept relation. Together with this

1 Supported by Grant No. IE120596, “Universal Algebra and its dual: monads and comonads, Lawvere theories and what?” of The Royal Society
2 Email: Cynthia-Vera.Glodeanu@tu-dresden.de

http://dx.doi.org/10.1016/j.entcs.2014.02.003
1571-0661/© 2014 Elsevier B.V. All rights reserved.

relation the set of all concepts forms a complete lattice, the concept lattice, which represents the basis for further data analysis.
Since its early years, Formal Concept Analysis has developed into a research field in its own right with a thriving theoretical community and a rapidly expanding range of applications: analysis of domestic violence [29,30], genetics and biology [20,13,1,12], cancer studies [24], the management of Web 2.0 data [19], rough sets [15], non-metric factor analysis [10,14,7] and data mining [32,33], to name a few.
We will work with a fuzzy variant of Formal Concept Analysis [31,4,9] where the incidence relation is replaced by a fuzzy relation encoding the vagueness of the statements. All the above notions can be defined in such a setting. This generalisation of Formal Concept Analysis has been fruitful for the handling of real- world data. It found applications within a few years after its introduction in fields like social networks [22], the management of incomplete and inconsistent data sets [23,25], non-metric factor analysis [2], etc.
The advantage of concept lattices is that they contain all the information of the data set encoded by concepts. However, the lattice may become too big and may be hard to read. To overcome this problem, the fuzzy concept lattice constrained by hedges [9] was developed. However, this data reduction approach is of a different nature than ours as it does not take into account the users’ preferences. In this paper we propose a method for reducing the size of the fuzzy concept lattice based on the preferences of users. Through this method users have stronger control over the information omitted from the data. We develop users’ preference formulas for compound attributes, i.e., for qualities which include more than one trait. For in- stance, the notion “wealth” might be considered as a compound attribute consisting of “investment” and “fluency”. A person who is wealthy has to have high values on both investment and fluency. The users have to enter formulas reflecting their preferences. Based on these preferences the users only obtain the concepts relevant for them. We will briefly discuss formulas for non-compound attributes as well. The formulas are entered by the users and thus they may be redundant. Having a set of non-redundant formulas facilitates their further investigation and alter- ation. Therefore, we will investigate the computation of such sets of non-redundant formulas.
This article is an extended version of [17]. The new results give further insight into the connection between special kinds of formulas and closure operators and into the computation of non-redundant formula sets. Further, we illustrate the method on a real-world data set.
There is related work to ours from crisp Formal Concept Analysis. Attribute dependency formulas were introduced in [8]. These formulas impose constraints on the concepts as well, but were not designed for compound attributes. In this paper we will briefly discuss their fuzzification and see that they are not appropriate for our framework. A somehow different approach of modelling users’ preferences within the framework of crisp Formal Concept Analysis was presented in [28]. Starting with the users’ preferences on objects, one obtains a preference relation on concepts and afterwards on the attributes. The method embeds preference logic into the

tools of Formal Concept Analysis. Hence, the method is of a different nature to ours.
In Section 2 we recall some fundamental notions from fuzzy sets and fuzzy logics. The basics of Formal Fuzzy Concept Analysis are introduced in Section 3. There we also get familiar with a real-world data set that will serve as our running example. The main work starts in Section 4, beginning with the development of our fuzzy users’ preference formulas followed by the investigation of some properties of these formulas. In Section 5 we turn our attention to the computation of non-redundant bases for these formulas. At the end of the section we will briefly discuss formulas for non-compound attributes. Concluding remarks and future work are presented in Section 6.
Fuzzy Sets and Fuzzy Logics
In this section we present some basics about fuzzy sets and fuzzy logic. The inter- ested reader may find more detail for instance in [18,4].
The underlying ideas of fuzzy sets and fuzzy logics were born in 1965, when Zadeh published [34]. There, he noted that the descriptions used by humans are neither black nor white and that there is a gradual transition from black to white. He pointed out that classical mathematics is not able to grasp these unsharp notions. Contradicting the principle of bivalence, Zadeh stated that there are different cases of belonging to a fuzzy set besides “fully belonging” and “fully not belonging”. Hence, being a member of a fuzzy set is a graded matter.
Thus, instead of having just “yes” and “no”, or 1 and 0, we have a potentially infinite set of truth values. This set is denoted by L and one usually takes for it subsets of the real unit interval [0, 1] with the natural ordering, where 0 denotes (full) falsity and 1 (full) truth. Now we are looking for operations on L which model the logical connectives. Since fuzzy theory is a generalisation of classical mathematics, these operations should coincide with the classical ones if we restrict them to the truth values 0 and 1, i.e., L = {0, 1}. The algebraic structures that satisfy the desired properties (see [18]) are called residuated lattices that are recalled in Definition 2.1.
Important works of Zadeh include [35] on linguistic variables (for instance, age with possible values “young”, “medium”, “old”), [36] on fuzzy logic, and [37] pre- senting the generalised version of modus ponens and compositional rule of inference. In these works the useful distinction between the two different meanings of fuzzy logic was always shown. Let us cite from [27]:
In a narrow sense, fuzzy logic, FLn, [...] is an extension of multivalued logic. However, the agenda of FLn is quite different from that of traditional multi- valued logic. In particular, such key concepts in FLn as the concept of a lin- guistic variable, canonical form, fuzzy if-then-rule, quantiﬁcation and defuzzi- ﬁcation, the compositional rule of inference, [. . . ] are not addressed in tradi- tional systems. [. . . ] In a wide sense, fuzzy logic, FLw, is fuzzily synonymous with fuzzy set theory, which is the theory of classes with unsharp boundaries.

Marks II
Fuzzy theory was successfully used in both theoretical and real-world applications. Considering the latter, its main breakthrough came with the development of a fuzzy controller by Mamdani and Assilian in [26]. We do not list here the various applications of fuzzy theory, extensive references can be found, for instance, in [21].
Definition 2.1 A complete residuated lattice with (truth-stressing) hedge L := (L, V, W, ⊗, →,∗ , 0, 1) is given by the following:
(L, V, W, 0, 1) is a complete lattice,
(L, ⊗, 1) is a commutative monoid,
the adjointness property, i.e., a ⊗ b ≤ c ⇔ a ≤ b → c holds for all a, b, c ∈ L. The hedge (−)∗ is a unary operation on L satisfying the following conditions:
a∗ ≤ a,
(a → b)∗ ≤ a∗ → b∗,
a∗∗ = a∗,
1∗ = 1,
for every a, b ∈ L. Elements of L are called truth degrees or truth values, (⊗, →) are the adjoint pair.
The hedge (−)∗ is a (truth function of) logical connective “very true”, see [9]. The properties (i)-(iv) have natural interpretations, i.e., (i) can be read as “if a is very true, then a is true”, (ii) can be read as “if a → b is very true and if a is very true, then b is very true”, etc. Typical examples for the hedge are the identity, i.e., a∗ := a for all a ∈ L, and the globalisation, i.e., a∗ := 0 for all a ∈ L \ {1} and a∗ := 1 if and only if a = 1.
A common choice of L has L = [0, 1],  and  as minimum and maximum, and (⊗, →) as one of the three most important pairs of adjoint operations on [0, 1]:
L~ ukasiewicz: a ⊗ b := max(0,a + b − 1), so a → b = min(1, 1 − a + b),
G¨odel: a ⊗ b := min(a, b), so a → b = ⎧⎨ 1, a ≤ b,
⎧	⎩ b, a ; b,
Product: a ⊗ b := ab, so a → b = ⎨ 1,	a ≤ b,
⎩ b/a, a ; b.
Definition 2.2 Let L be a residuated lattice. An L-set A on a set U is a mapping
A : U → L.
In an L-set A, A(u) is interpreted as “the degree to which u belongs to A”. We denote by u ∈ A the fact that A(u)= 1. If U = {u1,..., un}, then A can be denoted by A = {l1/u1,..., ln/un} meaning that A(ui) equals li for each i ∈ {1,..., n}. In particular, if u1 ∈ A and A(u2) = 0 we simply write A = {u1, l3/u3,..., ln/un}

instead of A = {1/u1, 0/u2,..., ln/un}.
Let LU denote the collection of all L-sets on U . The arbitrary/binary inter- section and arbitrary/binary unions of L-sets are defined component-wise. For instance, the binary intersection of L-sets A, B ∈ LU is the L-set A ∩ B in U given by (A ∩ B)(u) := A(u) ∧ B(u) for each u ∈ U , etc.
Another operation on L-sets that we use in this paper is the L-subsethood degree that is defined as follows:
Definition 2.3 The L-subsethood degree of two L-sets A, B ∈ LU is defined as S(A, B) := Vu∈U (A(u) → B(u)).
Thus, S(A, B) represents the degree to which A is a subset of B. In particular, we write A ⊆ B if and only if S(A, B)= 1.
Definition 2.4 A binary L-relation R between the sets X and Y is an L-set
R : X × Y → L.
Definition 2.5 [3,6] Given a set U , an L∗-closure operator is a mapping C: LU → LU satisfying
A ⊆ C(A),	(1)
S(A1, A2)∗ ≤ S(C(A1), C(A2)),	(2) C(A) = C(C(A)),	(3)
for every A, A1, A2 ∈ LU . Further, S := {Aj ∈ LU | j ∈ J} is called an L∗-closure system if for each A ∈ LU it holds that
  (S(A, Aj)∗ → Aj) ∈ S,	(4)
j∈J

where  j∈J (S(A, Aj)∗ → Aj) is an L-set given by
   S(A, Aj)∗ → Aj (u) :=  (S(A, Aj)∗ → Aj(u))
j∈J	j∈J
for every u ∈ U .
If we choose for the hedge the globalisation (see the paragraph below Defini- tion 2.1), then (2) and (4), respectively, become

A1 ⊆ A2 =⇒ C(A1) ⊆ C(A2)	and	  (S(A, Aj)∗ → Aj)=	 

Aj.

j∈J	j∈J,A⊆Aj
Theorem 2.6 [3,6] A system S := {Aj ∈ LU | j ∈ J} which is closed under arbitrary intersections is an L∗-closure system if and only if for each l ∈ L and A ∈ S it holds that l∗ → A ∈ S, where l∗ → A denotes the L-set deﬁned by (l∗ → A)(u) := l∗ → A(u) for every u ∈ U.

Formal Fuzzy Concept Analysis
In the following we give a brief introduction to Formal Fuzzy Concept Analysis [31,4,9].
Definition 3.1 Let L be a residuated lattice. A triple (G, M, IL) is called an L-context if IL : G × M → L is a binary L-relation between the sets G and M . Elements from G and M are called objects and attributes, respectively.
The L-relation IL assigns to each g ∈ G and each m ∈ M the truth degree IL(g, m) ∈ L to which object g has attribute m. The verbal meaning of IL(g, m)= l is “object g has attribute m with the truth degree l”. Sometimes we use the abbreviation K for (G, M, IL) if it is clear which context we mean.
L-contexts can be represented as tables, see Figure 1. Thereby, the rows are
named after the objects, the columns after the attributes and an entry l in the cell corresponding to row g and column m means IL(g, m)= l.
Definition 3.2 Given an L-context (G, M, IL) the derivation operators (−)↑ : LG → LM and (−)↓ : LM → LG for L-sets A ∈ LG and B ∈ LM are de- fined by
A↑(m) :=   (A(g)∗ → I(g, m)),
g∈G
B↓(g) :=    (B(m)∗ → I(g, m))
m∈M

where g ∈ G and m ∈ M , and (−)∗ is the hedge of L.
Then, A↑(m) ∈ L is the truth degree of the statement “m is shared by all objects from A”, and B↓(g) ∈ L is the truth degree of “g has all attributes from B”.
Definition 3.3 An L-concept of an L-context (G, M, IL) is a tuple (A, B) with A ∈ LG,B ∈ LM such that A↑ = B and B↓ = A. Then, A is called the extent and B the intent of (A, B). We denote the set of all L-concepts of a given context (G, M, IL) by B(G, M, IL).
Of special interest for the labelling of the concept lattice are the object and at- tribute concepts. For an object g ∈ G anda truth value l ∈ L we call ({l/g}↑↓, {l/g}↑) the object concept of g for the value l. Analogously, ({l/m}↓, {l/m}↓↑) is the attribute concept of m for the value l for an attribute m ∈ M and a truth value l ∈ L.
Concepts serve for classification. Consequently, the subconcept-superconcept relation plays an important role.
Definition 3.4 Let (A1, B1), (A2, B2) be two L-concepts of (G, M, IL).  The L-concept (A1, B1) is called a subconcept of (A2, B2), written (A1, B1) ≤ (A2, B2), if and only if A1 ⊆ A2 (or, equivalently, B1 ⊇ B2). Then, we call (A2, B2) the su- perconcept of (A1, B1).

The set of all L-concepts of (G, M, IL) ordered by this concept order forms a complete lattice, the L-concept lattice, which is denoted by B(G, M, IL) := (B(G, M, IL), ≤). In case the hedge of L is the identity we have the following structure of the L-concept lattice:
Theorem 3.5 [31,4] Let (G, M, IL) be an L-context. Then, B(G, M, IL) is a com- plete lattice in which inﬁma and suprema are given by
  (At, Bt)=   At, (  Bt)↓↑ ,	(5)

t∈T
t∈T
t∈T

  (At, Bt)= (  At)↑↓,  Bt .	(6)

t∈T
t∈T
t∈T

Further, every complete lattice is isomorphic to some L-concept lattice.
If we replace the identity hedge with arbitrary hedges, then, as shown in [9], the expressions (5) and (6) become
  (At, Bt)= (  At)↑↓, (  B∗)↓↑  and

t∈T
t∈T
t∈T

  (At, Bt)= (  A∗)↑↓, (  Bt)↓↑ ,

t∈T
t∈T
t∈T

respectively.
Example 3.6 Consider the real world data set displayed in Figure 1. It is a part of the city ranking from 2012. Each quality, i.e., job market, demography etc., is evaluated based on various attributes. In the initial data set the attribute values ranged from 0 to 100. Here we have mapped them to a 5 element chain (0-20 to 0, 21-40 to 0.25 etc.), where 0 stands for very bad, 0.25 for bad, 0.5 for good, 0.75 for very good and 1 for excellent. Thus, the higher the value of a city for an attribute is, the better it has been evaluated wrt. that attribute. The data can be regarded as an L-context as described before Definition 3.2.
Although the attributes are largely self-explanatory, let us briefly describe them and their interpretations.
highly qualified: The ratio of highly qualified is an indicator for high produc- tivity, income and innovation.
employ increase: Is measured in comparison with the previous years.
employ rate: Is a ratio over all employees and inhabitants of the city.
ratio minor: A high value for this attribute reflects a young population and is an indicator for family-friendliness. It can also be viewed as an estimator for future economic development.
population growth: Is an indicator of the attractiveness of the city.
value/head: Mirrors the leftover of the loan after the payment obligations.
BIP vs. prior year: Is the German gross domestic product (GDP).

Fig. 1. The data has been taken from https://www.dekabank.de. It is a part of the city ranking from 2012.

airport passengers: Reflects the significance of an airport and how easy the arrival to the city can be.
freeway, ICE access: Are crucial measures of mobility and therefore these attributes are important indicators for the attractiveness of the city.
cultural facilities: Their number is used as a proxy for the expenses the city spends on places of cultural interest.
crime rate: Is determined based on police statistics. A high value for the at- tribute “crime rate” represents a city with low criminality.
education: The degree of education is evaluated by the ratio of school leavers with general qualification for university entrance.
buy, rent price: These attributes play an important role in the attractiveness of the city besides the other qualitative and quantitative factors listed so-far.
For instance, Berlin was rated as excellent regarding cultural facilities, very good in education, good regarding highly qualified, ratio minor, etc., bad in employ increase and BIP, and very bad in employ rate, value/head and crime rate.
We will use for the objects the abbreviations of the city names and for the attributes the abbreviations given in the fourth row of the table. Evidently the truth values of the data are {0, 0.25, 0.5, 0.75, 1}. Using the L- ukasiewicz adjoint pair we obtain 288 L-concepts. For instance

({0.25/BN, 0.25/HH, 0.25/KA, 0.25/KI, 0.5/MZ, 0.25/M , 0.25/MS, 0.5/S, 0.25/U L, 0.25/WI},
{hq, 0.75/ei, er, rm, 0.75/pg, 0.75/vb, 0.75/BIP, 0.5/ap, 0.5/fa, 0.75/ICE, 0.75/cf, e, br, rp})

is an L-concept. Its intent describes a set of cities, i.e., the cities that were evaluated as excellent regarding hq, er, rm, e, br, rp, very good regarding ei, pg, BIP, ICE, cf , etc. Thus, the intent mainly characterises cities with excellent job market and cheap apartments. This description fits the cities MZ and S partially, and the other cities from the extent correspond to this description just a little.
Attribute implications in a fuzzy setting were mainly developed and studied in a series of papers by Bˇelohl´avek and Vychodil, for instance in [5]. Let L be a residuated lattice and (G, M, IL) an L-context. A fuzzy attribute implication over LM is a tuple (A, B), where A, B ∈ LM . For such tuples we have the following interpretation in mind: “if it is (very) true that an object has all attributes from A, then it also has all attributes from B”. The notions “being very true”, “to have an attribute”, and the logical connective “if-then” are determined by the chosen residuated lattice L. To symbolise the interpretation of fuzzy attribute implications we write A ⇒ B instead of (A, B).
Let A ⇒ B be a fuzzy attribute implication over LM . For an L-set N ∈ LM , the degree ||A ⇒ B||N ∈ L to which A ⇒ B holds in N is defined by ||A ⇒ B||N :=
S(A, N )∗ → S(B, N ). For N ⊆ LM , the degree ||A ⇒ B||N ∈ L to which the implication A ⇒ B holds in N is defined by ||A ⇒ B||N := VN∈N ||A ⇒ B||N . Denote by K the L-context (G, M, IL). The degree ||A ⇒ B||K ∈ L to which A ⇒ B

holds in K is defined by
||A ⇒ B||K := ||A ⇒ B||N ,
where N := {Ig | g ∈ G} and Ig ∈ LM is the row labelled by g in K.
L	L
Let T be a set of fuzzy attribute implications over LM . An L-set N ∈ LM is
called a model of T if ||A ⇒ B||N = 1 for each A ⇒ B ∈ T . For an L-context one may compute a set of non-redundant implications from which all the implications of the context follow. We refer the interested reader to [5].
Example 3.7 We have already discussed in the previous example that the data from Figure 1 can be regarded as an L-context, and we choose the L- ukasiewicz adjoint pairs of operations. We have the fuzzy implication ||ei ⇒ hq|| = 0.5, if we use the identity as the hedge. If we use the globalisation then we obtain
||ei ⇒ hq|| = 1.
Users’ preference formulas
In this section, we first introduce our formulas and illustrate their usefulness on an example. After we have investigated some of their basic properties, we develop two methods to eliminate redundancies from them. Such techniques are important for the facile handling of formulas. The first method acts in a straightforward way and the second one is based on a connection between the formulas and fuzzy attribute implications.
Definition 4.1 Let M be a set and L a residuated lattice. A users’ preference formula (UP formula) over LM is a pair (A, B), where A, B ∈ LM .
For an UP formula (A, B) we have the following interpretation in mind: “the el- ements from A are considered less important than the elements of B”. To symbolise this interpretation we write A ≤ B instead of (A, B).
Definition 4.2 The UP formula A ≤ B over LM is true in an L-set N ∈ LM for α, β ∈ L \ {0} and α ≤ β, written N |=α,β A ≤ B, if the following condition is satisfied:
if S(A, N ) ≥ α, then S(B, N ) ≥ β.	(7) For an UP formula or a set T of UP formulas, the values α and β are called the
thresholds of A ≤ B or T . An L-concept (C, D) ∈ B(G, M, I) satisfies A ≤ B if
D |=α,β A ≤ B.
The UP formulas permit a two-sided modelling of the extracted L-concepts. On the one hand, α and β provide the thresholds to which an intent has to contain all elements of A and B. On the other hand, the truth degrees of the elements contained in A and B fix the thresholds to which we want the attributes to be contained in the intent of a concept satisfying the UP formula. Such formulas give

us much leeway. Although the thresholds are fixed for all formulas, we may control the importance of the attributes by the L-sets A and B. We will illustrate this fact in the forthcoming example.
For notational simplicity we will sometimes omit α and β from |=α,β provided they are clear from the framework.
In applications it is particularly useful to associate to the truth values of a residuated lattice L some verbal description. This allows the user to have a better understanding of the truth values. For instance, let L = {0, 0.25, 0.5, 0.75, 1} be the support set of some residuated lattice. Its associated verbal description could be L = {not important, less important, important, very important, most important}, i.e, 0 =not important, 0.25 =less important, etc.
Example 4.3 Consider the set of attributes of the L-context displayed in Figure 1. A person may have the preference that demography is less important than job market and expresses this by the UP formula {rm, pg} ≤ {0.5/hq, ei, er} meaning that ratio minor (rm) and population growth (pg) are less important than highly qualified (hq), employ increase (ei) and employ rate (er). In this formula the person considers within the more important attributes highly qualified less important than the others.
Definition 4.4 The set of all L-concepts from B(G, M, IL) that satisfy a given set
T of UP formulas over LM with thresholds α, β is denoted by BT (G, M, IL), i.e.,
BT (G, M, IL) := {(C, D) ∈ B(G, M, IL) | D |=α,β A ≤ B for every A ≤ B ∈ T}.
We call BT (G, M, IL) together with the restricted concept order the L-concept lattice of (G, M, IL) constrained by T and denote it by BT (G, M, IL).
In the following theorem we will show that after selecting the relevant formal concepts for the users we still have a complete lattice. This is important, because after applying users’ preferences we can use the lattice for further analysis of the data. For instance, the users can browse between the formal concepts, going from the more general concepts to the more concrete ones.
Theorem 4.5 Let T be a set of UP formulas over LM with thresholds α and β
and let (G, M, IL) be an L-context. Then, BT (G, M, IL) is a complete lattice, a
-sublattice of B(G, M, IL).
Proof. Clearly, BT (G, M, IL) ⊆ B(G, M, IL) and BT (G, M, IL) with the restricted concept order is a partially ordered subset of B(G, M, IL). Further, note that BT (G, M, IL) is bounded from below because the least L-concept of B(G, M, IL), (M↓,M ), satisfies every UP formula. Now, we have to show that BT (G, M, IL) is closed under arbitrary suprema in B(G, M, IL). Therefor, we use Theorem 3.5. To this end let (Aj, Bj) ∈ BT (G, M, IL) (j ∈ J) be L-concepts. As the thresholds α and β are fixed, we omit them in the sequel. For any UP formula A ≤ B ∈ T we have Bj |= A ≤ B for every j ∈ J. Now, if there exists j ∈ J such that Bj(a) < α for some a ∈ M with A(a) > 0, then ∩j∈J Bj(a) < α and we are done because

then ∩j∈J Bj |= A ≤ B. If we have Bj(a) ≥ α for all j ∈ J and all a ∈ M such that A(a) > 0, then ∩j∈J Bj(a) ≥ α for all a ∈ M satisfying A(a) > 0. Since Bj |= A ≤ B holds for all j ∈ J, we then also have that Bj(b) ≥ β for all j ∈ J and b ∈ M such that B(b) > 0. So ∩j∈J Bj(b) ≥ β for all b ∈ M such that B(b) > 0 and so it follows that ∩j∈J Bj |= A ≤ B, showing that BT (G, M, IL) is closed under arbitrary suprema.	2
Remark 4.6 Note that in general BT (G, M, IL) is not closed under arbitrary in- fima in B(G, M, IL). To provide a counterexample one may use Theorem 3.5.
Example 4.7 Suppose a person wants to find out which city suits him the most and considers the data from Figure 1. He has the following preference order on the attributes:
{job market}≤ {quality of life},	{centrality}≤ {job market, quality of life},
{apartments}≤ {centrality},	{demography}≤ {job market, wealth}.

He expresses these preferences through the following UP formulas with α = 0.75 and β = 1:

Here we can see the two-sided modelling of UP formulas. For instance, take the first formula. Although the person considers that demography is less important than job market and wealth, he distinguishes between the traits of the compound attributes. For example, within job market, he considers hq very important, ei important and er less important. Recall that the L-concept lattice of the data from Figure 1 has 288 L-concepts. Applying the formulas from above to the data, the user obtains only 22 L-concepts that are shown in the L-concept lattice in Figure 2. We will explain in a minute how to read such diagrams. Thus, out of 288 there are only 22 concepts that satisfy the preferences of the user, and it is sufficient for him to investigate only those. Further, the user may easily alter the formulas and would obtain a different set of concepts.
For the legibility of the concept lattice it is practical to use reduced labelling [16] instead of writing next to each concept its extent and intent, which would overload the diagram. We can find the extent and intent of any concept in the following way: the extent is formed by collecting all objects located at the node of that concept and can be reached by descending line paths from the concept. Due to the fact that we are in a fuzzy setting, the same object may appear with different truth values in an extent. We then have to take the maximum value of these truth degrees. The intent consists of all attributes with their highest value located at the concept’s node and along ascending line paths. In a concept lattice it is sufficient to label the object


.25/br, .25/pr, .25/rm



.25/cf, .25/pg
D, .75/HB
.5/fa


DU, .75/DO




H,MS, S,U L
BO,M,MA MG, N,
.75/DU
B, BN, F, HH K, KI, .75/D



KA, W,W I, .75/BO,
.75/KR, .5/MG, .5/DO, .5/HB



fa, .25/hq E, .75/KI,
.5/DU, .25/DO
e, .25/er,
.25/hq


cr, .25/er, .25/hq
.75/H, .75/M , .75/UL, .75/W

MZ, .75/HH, .75/MS,
.5/D, .5/S, .25/HB


.75/BN, .5/B, .5/F
.5/HH, .5/K, .5/KI

.75/KA, .5/H,
.5/MS, .5/UL



.75/W I, .5/BO, .5/M
.5/MA, .5/MG, .5/N , .25/DU


BIP, br, cf, ei, hq,ICE,




BIP, br, cf, ei, hq,
pg, pr, rm, vh,

SB, .5/E, .5/KA, .5/MZ
.5/W , .5/W I, .25/KI
.25/KR, .25/MG, .25/MS

pg, pr, rm, .75/ap,
.75/cr, .75/er, .75/vh
.25/B, .25/D,
.25/F, .25/K


er
.75/ap, .75/er, .75/ICE


.25/BN
.25/S


er




BIP, br, cf, ei, hq,
ICE, pg, pr, rm, vh,
.75/ap, .75/er, .75/fa


.25/BO, .25/E,
.25/H



.25/HH, .25/KA, .25/MZ,
.25/M , .25/UL
Fig. 2. L-concept lattice of the context from Figure 1 constrained by the UP formulas from Example 4.7.
concepts with the corresponding objects (see Section 3), and the attribute concepts with the respective attributes. However, since our lattice is a -sublattice of the initial concept lattice we had to use some attribute labels more than once. Never- theless, finding the extent and intent of a concept works the same way as explained above. For instance take the L-concept whose node is coloured black. Its extent is
{.75/KA,.5/H, .5/MS, .5/UL, SB, .5/E, .5/MZ, .5/W, .5/WI, .25/KI, .25/KR, .25/MG,
.25/BO, .25/BN} and its intent is {cr, .25/er, .25/hq, e, .5/fa, .25/cf, .25/pg, .25/br, .25/pr,
.25/rm}.
Proposition 4.9 shows further properties of the UP formulas. On the one hand, it allows us to reduce the number of formulas in a simple way. On the other hand, it permits the testing of semantic entailment on simpler formulas. Before presenting this proposition, we need to introduce some further notions.

Definition 4.8 Let T be a set of UP formulas over LM and α, β its thresholds. An L-set N ∈ LM is a model of T if N |=α,β A ≤ B holds for each A ≤ B ∈ T . Let Mod(T ) denote the set of all models of T , i.e.,
Mod(T ) := {N ∈ LM | N |=α,β A ≤ B for each A ≤ B ∈ T}.

An UP formula A ≤ B follows semantically from T , written T |=α,β A ≤ B, if for each N ∈ Mod(T ), we have N |=α,β A ≤ B.
Proposition 4.9 i) Let N ∈ LM . Then, N |=α,β A ≤ {l1/m1,..., ln/mn} if and only if N |=α,β A ≤ {li/mi} for all i ∈ {1,..., n}.
ii) Let T be a set of UP formulas over LM and ϕ an UP formula. Then, T |=α,β ϕ
if and only if [T♩ |=α,β ϕ, where [T♩ := {A ≤ {l/m}| A ≤ B ∈ T and B(m)= l}.
Proof. i) If N trivially satisfies the formula, S(A, N ) < α, then we are done. Now suppose it satisfies the formula in a non-trivial way. Then, we have S(A, N ) ≥ α and S({l1/m1,..., ln/mn},N ) ≥ β. By the definition of S, the latter holds if and only if we have S({li/mi},N ) ≥ β for all i ∈ {1,..., n}. Thus, N |=α,β A ≤ {li/mi} for all i ∈ {1,..., n}.
ii) We have to show Mod(T ) = Mod([T♩). For the first inclusion suppose that
Mod(T ) ¢ Mod([T♩). Then, there must be a model N ∈ Mod(T ) such that N ∈/
Mod([T♩). Let A ≤ B ∈ T be an UP formula.  Since N is a model of T , we
have N |=α,β A ≤ B. By i), for any m ∈ M with B(m) = l, it holds that M |=α,β A ≤ {l/b}, a contradiction. Therefore, S(Mod(T ), Mod([T♩)) = 1. Using the converse implication from i) one can show S(Mod([T♩), Mod(T )) = 1, yielding that Mod([T♩)= Mod(T ).	2

Non-redundant bases for UP formulas
Typically, formulas entered by a user are redundant. However, a set of non- redundant formulas is easier to follow and to modify. Therefore, in the following we will develop methods for removing redundancies. In order to do so, we first study the connection between the models of UP formulas and L∗-closure systems (Definition 4) in a series of propositions. It will turn out that any L∗-closure system can be described by a set of UP formulas.
Proposition 5.1 Let T be a set of UP formulas. Then, Mod(T ) is an L∗-closure system with (−)∗ being the globalisation.
Proof. Let T be a set of UP formulas over LM with thresholds α, β and Mod(T ) :=
{Nj | j ∈ J}. According to Theorem 2.6, Mod(T ) is an L∗-closure system if and only if it is closed under arbitrary intersections and l∗ → N is a model of T for any N ∈ Mod(T ) and any l ∈ L.
First we show that Mod(T ) is closed under arbitrary intersection, i.e., j∈J Nj is a model of T . This part of the proof is similar to the proof of Theorem 4.5 and will be omitted.

Now we show the second condition from Theorem 2.6. However, this condition only holds if (−)∗ is the globalisation. Then, we have
S(A, l∗ → N )= l∗ → S(A, N )= ⎧⎨ 1,	l ∈ [0, 1),
⎩ S(A, N ), l = 1,
i.e., l∗ → N trivially satisfies any UP formula if l ∈ [0, 1) or we do not gain anything new to N in the case that l = 1.	2
In order to use general hedges but still have the result of Proposition 5.1, we have to impose some restrictions on the thresholds.
Corollary 5.2 Let T be a set of UP formulas over LM with thresholds α = β = 1. Then, Mod(T ) is an L∗-closure system.
Proof. The first part from the proof of Proposition 5.1 still holds. For the second part we still have to show that l∗ → N is a model of T for any N ∈ Mod(T ) and any l ∈ L. Let A ≤ B ∈ T . Then, we have S(A, l∗ → N )= l∗ → S(A, N ) and
1,	(l∗ = 0) or (l = 1 and S(A, N )= 1),
l∗ → S(A, N )= 
⎩ S(A, N ), otherwise.

Due to the fact that we chose α = β = 1, we have S(A, N ) = 1 or S(A, N ) = 0. Since the same applies to S(B, l∗ → N ), we are done.	2
Based on the previous two results we have the following:
Proposition 5.3 Let S be an L∗-closure system on M. The following hold:
There is a set T of UP formulas over LM with thresholds α = β =1 such that
S = Mod(T ).
There is a set T of UP formulas over LM such that S = Mod(T ) provided that
(−)∗ is the globalisation.
Proof. i) Define a set T of UP formulas by T := {A ≤ CS (A) | A ∈ LM }, where CS (A) is the closure of A given by an L∗-closure operator CS . Since α and β are fixed, we will omit their subscription at |=. Let N ∈ S, i.e., N = CS (N ). We have to show that N is a model of T . Thus, let N |= A ≤ CS (A) for every A ≤ CS (A) ∈ T . If S(A, N ) < 1, then N |= A ≤ CS (A) and we are done. Now take S(A, N ) ≥ 1, meaning that A ⊆ N . Since CS is a closure operator we have CS (A) ⊆ CS (N )= N , hence S(CS (A),N ) ≥ 1, i.e., N |= A ≤ CS (A). Thus, N is a model of T and we have the first inclusion, namely S ⊆ Mod(T ).
For the converse, let N ∈ Mod(T ). Since S(N, N ) ≥ 1 obviously holds, we must also have S(CS (N ),N ) ≥ 1, yielding that N = CS (N ), i.e., N ∈ S and hence Mod(T ) ⊆ S.
ii) Follows directly by the definition of UP formulas and the extensivity (Equa- tion (1)) of the L∗-closure operators.	2

By Proposition 5.1, Mod(T ) is an L∗-closure system, so there must exist an L∗-closure operator CMod(T ) : LM → LM such that N = CMod(T )(N ) if and only if N ∈ Mod(T ). Hence, by definition, CMod(T )(N ) is the least model in Mod(T ) which contains N . This definition of the L∗-closure operator does not provide a useful method for computing the closure of a given N . First, because one has to iterate over all models in Mod(T ), and second, such an iteration may be impossible if L is infinite, because then Mod(T ) is infinite.
In order to overcome these problems we will adopt another approach and pro- ceed similarly as in the case of (fuzzy) attribute implications. After defining an appropriate closure operator we will show that this indeed has the desired prop- erties. Afterwards, we present an algorithm for the computation of an L-set with respect to a set of UP formulas.
For any set T of UP formulas LM with thresholds α, β and for any L-set N ∈ LM , we define the L-set NT ∈ LM of attributes as follows:
NT := N ∪   {β ⊗ B | A ≤ B ∈ T, S(A, N ) ≥ α}.	(8)

Further, by NTn we denote the L-set obtained by the n-th iteration of (−)T , i.e., (... ((NT )T )T .. .)T . Define an operator clT : LM → LM by

clT(N ) :=   NTn .	(9)
n=0
Lemma 5.4 For each N ∈ Mod(T ) we have clT(N )= N.
Proof. Let T be a set of UP formulas over LM with thresholds α, β and let N ∈ Mod(T ). By definition N ⊆ NT holds. Conversely, for any A ≤ B ∈ T and any N ∈ Mod(T ) we have N |=α,β A ≤ B. If S(A, N ) < α for all A ≤ B ∈ T , then NT = N . If S(A, N ) ≥ α, then S(B, N ) ≥ β must hold since N ∈ Mod(T ). From S(B, N ) ≥ β we get β ⊗ B ⊆ N by the adjointness property and hence NT = N∪{β⊗B} = N . The definitions of NTn and clT yield N = NT0 = NT1 = ... 
for every N ∈ Mod(T ). Thus, N =  ∞  NTn = clT(N ).	2
The next lemma shows that the L∗-closure operator defined on the models of T
coincides with the clT-operator defined in (9).
Theorem 5.5 Let T be a set of UP formulas over LM . Further let both M and L be ﬁnite. Then, clT is an L∗-closure operator such that CMod(T )(N )= clT(N ) for each N ∈ LM .
Proof. CMod(T ) is an L∗-closure operator, therefore it suffices to check that CMod(T ) and clT coincide. To this end let N ∈ LM be an L-set of attributes. By the definition of clT we have N ⊆ clT(N ). We still have to show that clT(N ) belongs to Mod(T ) and that clT(N ) is the least model containing N . First of all note that the finiteness of L and M imply that LM is finite and that there exists a non-negative integer k such that clT(N )= NTk . Hence there can be only finitely many proper inclusions

in NT0 ⊆ NT1 ⊆ ... ⊆ NTk ⊆ .. .. Thus, there always exists some k satisfying clT(N )= NTk and NTk = NTk+1 = .. ..
It remains to show that clT(N ) ∈ Mod(T ), i.e., for any UP formula A ≤ B ∈ T with thresholds α, β we have that clT(N ) |=α,β A ≤ B. If S(A, clT(N )) < α, we are done. Now suppose that we have S(A, clT(N )) ≥ α for all A ≤ B ∈ T . Then, it follows that clT(N )= N ∪ {β ⊗ B}. Obviously, S(B, N ∪ {β ⊗ B}) ≥ β, proving that clT(N ) is a model of T which contains N . For any X ∈ Mod(T ) such that N ⊆ X we have to show that clT(N ) ⊆ X. This easily follows by the properties of closure operators and by Lemma 5.4. In fact, we have clT(N ) ⊆ clT(X)= X.   2
Based on the previous result we present Algorithm 1 for the computation of the closure CMod(T )(N ) of an L-set N ∈ LM of attributes with respect to a set T of UP formulas provided that L and M are finite.
Algorithm 1 Closure(N, T, α, β)
repeat
take A ≤ B ∈ T such that S(A, N ) ≥ α and S(B, N ) < β;
set N to N ∪ {β ⊗ B}
until forall A ≤ B ∈ T, (S(A, N ) < α) or (S(A, N ) ≥ α and S(B, N ) ≥ β);
return N
Definition 5.6 Two sets T1 and T2 of UP formulas over LM with thresholds α, β are called equivalent, written T1 ≡ T2, if for each ϕ1 ∈ T1 we have T2 |=α,β ϕ1, and the dual.
The following statement is evident.
Proposition 5.7 Let T1 and T2 be sets of UP formulas over LM with thresholds
α, β. The following are equivalent:
Mod(T1)= Mod(T2);
for any UP formula ϕ we have T1 |=α,β ϕ ⇐⇒ T2 |= ϕ;
T1 ≡ T2.
Now we can introduce non-redundant bases.
Definition 5.8 A set T1 of UP formulas is called a non-redundant base of T if T ≡ T1 and there is no T2 ; T1 with T2 ≡ T . A set T1 of UP formulas is called a minimal base of T if T ≡ T1 and for each T2 with T ≡ T2, we have |T1|≤ |T2|.
Obviously, if T1 is a minimal base of T , then T1 is a non-redundant base of T . The converse is clearly not true in general.
The question remains how to compute a non-redundant base for a given set T of UP formulas with thresholds α, β. One could take the following naive approach, provided T is finite: notice that we have T ≡ T1 whenever T1 := T \ {A ≤ B} and T1 |=α,β A ≤ B. We may then remove UP formulas A ≤ B from T step-by-step until there is no T1 ; T such that T1 ≡ T . The computation of a non-redundant base with this method is quite laborious. In what follows we present another connection

between fuzzy attribute implications and UP formulas that considerably simplifies this, provided that (−)∗ is the globalisation.
For a set T of UP formulas we use the following notation
Imp(T∗) := {α ⊗ A ⇒ β ⊗ B | ∀A ≤ B ∈ T, α, β thresholds of T}.	(10)
Theorem 5.9 Let T be a set of UP formulas. We have
Mod(T ) = Mod(Imp(T∗)),
where Imp(T∗) is given by (10) and the truth values of the implications from this set are computed using the globalisation.
Proof. Let T be a set of UP formulas over LM with thresholds α, β. Further, let
N ∈ Mod(T ) and A ≤ B ∈ T . There are two cases:
S(A, N ) ≥ α and S(B, N ) ≥ β both hold. Then, for every attribute m ∈ M , we have A(m) → N (m) ≥ α. This yields α ⊗ A(m) ≤ N (m) by the adjointness property and therefore S(α ⊗ A, N ) = 1. Thus, S(β ⊗ B, N ) = 1. Hence, we have
||α ⊗ A ⇒ β ⊗ B||N = S(α ⊗ A, N )∗ → S(β ⊗ B, N )= 1∗ → 1= 1.
We have S(A, N ) < α, which is equivalent to S(α ⊗ A, N ) < 1. Therefore,
||α ⊗ B ⇒ β ⊗ B||N = S(α ⊗ A, N )∗ → S(β ⊗ B, N )=0 → S(β ⊗ B, N )= 1.
Cases 1) and 2) show that N is a model of Imp(T∗).
For the converse let N ∈ Mod(Imp(T∗)). Then, we have
||α ⊗ A ⇒ β ⊗ B||N = S(α ⊗ A, N )∗ → S(β ⊗ B, N ) = 1	(11)
for any fuzzy attribute implication A ⇒ B ∈ Imp(T∗). Equation (11) holds if and only if one of the following cases apply:
(S(α ⊗ A, N )∗ =1 ∧ S(β ⊗ B, N )= 1) ⇐⇒ (S(A, N ) ≥ α ∧ S(B, N ) ≥ β),
S(α ⊗ A, N )∗ =0 ⇐⇒ S(α ⊗ A, N ) < 1 ⇐⇒ S(A, N ) < α.
In both cases, it follows that N |=α,β A ≤ B.	2
Thus, for an L-set N ∈ LM we have
N |=α,β A ≤ B ⇐⇒ (||α ⊗ A ⇒ β ⊗ B||N =1 where (−)∗ is the globalisation).
With this link between UP formulas and fuzzy attribute implications we may easily compute a minimal base for any set T of UP formulas. First we build the set Imp(T∗) associated with T as given by (10). Afterwards, we compute a minimal base of attribute implications BT ∗ for T . Finally, from BT ∗ we obtain a minimal base of UP formulas for T by
BT := {A◆ ≤ B◆ \ A◆ | A ⇒ B ∈ BT ∗ },

where
A◆ :=  {C ∈ LM | α ⊗ C = α ⊗ A},	(12)
B◆ :=  {D ∈ LM | β ⊗ D = β ⊗ B}.	(13)

Example 5.10 Let L be a residuated lattice with L = {0, 0.5, 1} and the G¨odel ad- joint pair. Further, let (G, M, IL) be an L-context with M = {a, b, ..., h}. Suppose that the user enters the following UP formulas:
{a, b}≤ {0.5/c, 0.5/d},	{a, b}≤ {e, f},	{e, f}≤ {c, d},
{e, f}≤ {0.5/g, 0.5/h},	{g, h}≤ {c, d},
with thresholds α = 0.5 and β = 1. We may now use (10) to transform these formulas into attribute implications in a fuzzy setting. Afterwards, we may compute a stem base for these implications that are displayed on the left side in Figure 3. Using (12) and (13) we obtain the minimal non-redundant base of UP formulas shown on the right side in Figure 3.

{0.5/e, 0.5/f}⇒ {c, d, 0.5/g, 0.5/h},	{e, f}≤ {c, d, 0.5/g, 0.5/h},
{0.5/a, 0.5/b} ⇒ {c, d, e, f, 0.5/g, 0.5/h},	{a, b} ≤ {c, d, e, f, 0.5/g, 0.5/h},
{0.5/g, 0.5/h}⇒ {c, d}.	{g, h}≤ {c, d}.
Fig. 3. Stem base of the implications (left side) and the corresponding minimal non-redundant base for the UP formulas (right side).



The possibility of computing a non-redundant base allows the users to review their choices and alter them conveniently.
As we already mentioned in the introductory section, there is closely related work in [8], where attribute dependency formulas for the setting of crisp Formal Concept Analysis were developed. However, their approach was not designed for compound attributes.
In its fuzzified version [17] an L-set N ∈ LM is a model of the UP formula A ≤ B
if the following is satisfied

if A ∩ N /= ∅, then B ∩ N /= ∅.

In this case the set of all models forms an L∗-kernel operator (see [3]) provided that the hedge is the globalisation. Seemingly, for such formulas the requirement that Mod(T ) should form an L∗-closure or L∗-kernel system [3] with hedges different from the globalisation are too strong. Further, there is not yet a clear way of computing non-redundant bases for such formulas.

Conclusion and Future Work
We have presented a new method of modelling users’ preferences in a fuzzy setting. The preferences are expressed by the users in the form of formulas on compound attributes. These allow the users to express their preferences on groups of attributes, i.e., on features that contain more than just one trait. Based on these preferences the users obtain only the formal fuzzy concepts that are relevant for them. As we have seen in an illustrative example, the proposed method can considerably reduce the number of concepts. However, this reduction highly depends on the preferences entered by the user. The remaining concepts form again a complete lattice. This is an important aspect because we can use the lattice as a basis for further data analysis by applying different concept analytical tools.
After investigating some properties of these formulas, we turned our attention to the computation of non-redundant bases. Such methods are useful as the users enter the formulas and it is therefore likely that these are redundant. Having a set of non-redundant formulas makes it possible for the user to handle them more easily and alter them conveniently.
Future work will focus on applying the method on various real-world data and evaluating the outcomes by experts. Another research topic is the exploration of UP formulas, where the user may alter the choices made without starting from scratch each time.

References
Bartel, H.-G. and M. Nofz, Exploration of NMR data of glasses by means of formal concept analysis., Chemom. Intell. Lab. Syst. 36 (1997), pp. 53–63.
Bartl, E., R. Bˇelohlavek and J. Konecny, Optimal decompositions of matrices with grades into binary and graded matrices, Annals of Mathematics and artificial intelligence 59 (2010), pp. 151–167.
Bˇelohl´avek, R., Fuzzy closure operators, Journal of Mathematical Analysis and Appl. 262 (2001),
pp. 473–489.
Bˇelohl´avek, R., “Fuzzy Relational Systems: Foundations and Principles,” Systems Science and Engineering, Kluwer Academic/Plenum Press, 2002.
Bˇelohl´avek, R., M. Chlupov´a and V. Vychodil, Implications from data with fuzzy attributes, in: AISTA 2004 in Cooperation with the IEEE Computer Society Proceedings, 2004.
Bˇelohl´avek, R., T. Funiokov´a and V. Vychodil, Fuzzy closure operators with truth stressers, Logic Journal of the IGPL 13 (2005), pp. 503–513.
Bˇelohl´avek, R., C. Glodeanu and V. Vychodil, Optimal factorization of three-way binary data using triadic concepts, Order 30 (2013), pp. 437–454.
Bˇelohl´avek, R. and V. Sklen´aˇr, Formal Concept Analysis constrained by attribute-dependency formulas, in: B. Ganter and R. Godin, editors, International Conference on Formal Concept Analysis, Lecture Notes in Computer Science (2005), pp. 176–191.
Bˇelohl´avek, R. and V. Vychodil, Fuzzy concept lattices constrained by hedges, JACIII 11 (2007),
pp. 536–545.
Bˇelohl´avek, R. and V. Vychodil, Discovery of optimal factors in binary data via a novel method of matrix decomposition, J. Comput. Syst. Sci. 76 (2010), pp. 3–20.
Duquenne, V., Contextual implications between attributes and some representation properties for finite lattices, in: B. Ganter, R. Wille and K. Wolff, editors, Beitrage zur Begriffsanalyse, BI Wissenschaftsverlag, 1987 pp. 213–239.

Ferr´e, S. and R. D. King, Finding motifs in protein secondary structure for use in function prediction, Journal of Computational Biology 13 (2006), pp. 719–731.
Galitsky, B., S. O. Kuznetsov and D. V. Vinogradov, Applying hybrid reasoning to mine for associative features in biological data, Journal of Biomedical Informatics 40 (2007), pp. 203–220.
Ganter, B. and C. Glodeanu, Ordinal Factor Analysis, in: F. Domenach, D. Ignatov and J. Poelmans, editors, ICFCA, Lecture Notes in Computer Science 7278 (2012), pp. 128–139.
Ganter, B. and C. Meschke, A formal concept analysis approach to rough data tables, T. Rough Sets
14 (2011), pp. 37–61.
Ganter, B. and R. Wille, “Formale Begriffsanalyse: Mathematische Grundlagen,” Springer, Berlin, Heidelberg, 1996.
Glodeanu, C., Attribute dependencies in a fuzzy setting, in: U. Priss and L. Szathmary, editors, Concept Lattices and Their Applications, CLA Conference Series (2012), pp. 127–138.
H´ajek, P., “The Metamathematics of Fuzzy Logic,” Kluwer, 1998.
J¨aschke, R., A. Hotho, C. Schmitz, B. Ganter and G. Stumme, Discovering shared conceptualizations in folksonomies, J. Web Sem. 6 (2008), pp. 38–53.
Kaytoue, M., S. O. Kuznetsov, A. Napoli and S. Duplessis, Mining gene expression data with pattern structures in formal concept analysis, Inf. Sci. 181 (2011), pp. 1989–2001.
Klir, G. and B. Yuan, “Fuzzy sets and fuzzy logic - theory and applications,” Prentice Hall P T R, Upper Saddle River, New Jersey 07458, 1995.
Krajci, S. and J. Krajciova, Social network and one-sided fuzzy concept lattices, in: FUZZ-IEEE (2007),
pp. 1–6.
Krupka, M. and J. Lastovicka, Concept lattices of incomplete data, in: F. Domenach, D. I. Ignatov and
J. Poelmans, editors, ICFCA, Lecture Notes in Computer Science 7278 (2012), pp. 180–194.
Lieber, J., M. d’Aquin, F. Badra and A. Napoli, Modeling adaptation of breast cancer treatment decision protocols in the kasimir project, Appl. Intell. 28 (2008), pp. 261–274.
Madrid, N. and M. Ojeda-Aciego, Measuring inconsistency in fuzzy answer set semantics, IEEE T. Fuzzy Systems 19 (2011), pp. 605–622.
Mamdani, E. and S. Assilian, An experiment in linguistic synthesis with a fuzzy logic controller, International Journal of Man-Machine Studies 7 (1975), pp. 1–13.
Marks II, R., Fuzzy logic technology and applications, in: IEEE, 1994, Institute of Electrical and Electronics Engineers. Technical Activities Board, 1994 .
Obiedkov, S., Modeling preferences over attribute sets in Formal Concept Analysis, in: F. Domenach,
D. Ignatov and J. Poelmans, editors, International Conference on Formal Concept Analysis, Lecture Notes in Computer Science 7278 (2012), pp. 227–243.
Poelmans, J., P. Elzinga, S. Viaene and G. Dedene, Formally analysing the concepts of domestic violence, Expert Syst. Appl. 38 (2011), pp. 3116–3130.
Poelmans, J., M. M. V. Hulle, S. Viaene, P. Elzinga and G. Dedene, Text mining with emergent self organizing maps and multi-dimensional scaling: A comparative study on domestic violence, Appl. Soft Comput. 11 (2011), pp. 3870–3876.
Pollandt, S., “Fuzzy Begriffe,” Springer Verlag, Berlin Heidelberg New York, 1997.
Stumme, G., Efficient data mining based on formal concept analysis, in: In: A. Hameurlain, R. Cicchetti and R. Traunmller (Eds.), Proc. DEXA (2002), pp. 534–546.
Valtchev, P., R. Missaoui and R. Godin, Formal concept analysis for knowledge discovery and data mining: The new challenges, in: P. Eklund, editor, Concept Lattices, Lecture Notes in Computer Science 2961, Springer, Berlin/Heidelberg, 2004 pp. 352–371.
URL  http://dx.doi.org/10.1007/978-3-540-24651-0_30
Zadeh, L., Fuzzy sets, Information and Control 8 (1965), pp. 338–353.
Zadeh, L., The concept of a linguistic variable and its application to approximate reasoning, Information Sciences 8 (1975), pp. 199–245,301–357.
Zadeh, L., Fuzzy logic and approximate reasoning, Synthese 30 (1975), pp. 407–428.
Zadeh, L., Fuzzy sets, fuzzy logic, and fuzzy systems, World Scientific Publishing, River Edge, NJ, USA, 1996 pp. 195–209.
