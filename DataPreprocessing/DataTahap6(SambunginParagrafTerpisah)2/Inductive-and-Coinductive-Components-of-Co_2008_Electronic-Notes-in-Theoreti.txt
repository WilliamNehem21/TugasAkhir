The proof assistant Coq [44] is an implementation of the Calculus of Inductive Con- structions [23] extended with inductive [40] and coinductive [31] types. Implementa- tions of coinductive types were first suggested by Coquand in [22] and implemented in Coq by Gimenez [31]. Coq has proved to be an effective tool for working with dif- ferent kinds of final coalgebras, such as the final coalgebra of streams [12], the final coalgebra of infinite binary trees [12], and some others. For instance, the machinery of Coq was used to define algebraic structures on real numbers [28,38,11].

The specification language of Coq makes it possible to model the types and programs of typed programming languages. Typed programming languages usually provide a few basic types and a mechanism that allows the definition of inductive data types. When defining an inductive data type, we need to introduce constructors to generate the elements of the new type. A very well-known inductive data type is the type of natural numbers, defined using two constructors: 0 and S.

In Coq, one can define coinductive types in the same fashion as inductive types, using a few basic constructors that are also related to destructors through the pattern-matching construct. One can also use destructors when he wants to em- phasise the duality relative to inductive constructors. We will illustrate this in Section 2.

which an object being defined refers to itself. Functions defined over inductive types are recursive by nature. E.g., most of the functions defined on natural numbers need to be defined recursively. In Section 2, we will discuss in more detail the syntax of such functions in Coq.

recursive definition is such that every recursive call is performed on a structurally smaller argument. This guarantees that the recursion terminates. Constructive Type Theory in general, and Coq in particular, impose the structurally recursive condition on every defined recursive function. And thus, all functions are guaranteed to terminate in Coq, as we further explain in Sections 3 and 4.

Already in the case of inductive types, there exists a difference between the class of functions satisfying the semantic condition of termination, and the class of functions satisfying the syntactic condition of structural recursion. It is significant that, when working with coinductive types in Coq, we find the notions of produc- tivity [24,43] and guardedness [22,31] dual to those of termination and structural recursion. This is analysed in Sections 3 and 4. Similarly to the inductive case, the guardedness condition bans Coq formalisations for many useful productive func- tions. This problem was tackled (e.g.) in [1,9,29,30] for type theory and in [36] for HOL.

In Sections 5 and 6, we give a general method of separating the inductive and coinductive components of productive coinductive values in Coq. In particular, Section 5 is devoted to the inductive component and gives general characterisation of the method of building ad-hoc predicates for formalising productive values in Coq. In Section 6, we characterise the coinductive component.

In this section, we will give a short exposition of how inductive and coinductive types are defined and used in Coq. We will introduce several running examples. The related work of developing the theory of corecursive definitions was done in HOL and mechanised using Isabelle [41]. For a more detailed introduction to Coq, see [12].

Infinite streams are not the only kind of data that is handled by coinductive machinery of Coq. We can work with different types of infinite data types, such as infinite binary trees or infinite expression trees, see also [3]. Expression trees are trees in which every node has one or two children. The nodes of these trees are labelled with elements of sets A and B, and we will call them A-nodes and B-nodes, respectively. We will denote expression trees by E(A, B). The expression trees were extensively used in formalising real number arithmetic, see [38,25].

The notion of productivity was first defined in [24,43], in terms of domain theory. For a very careful domain theoretic characterisation of productivity of streams and trees, see [37]. However, we will omit the domain theoretic definitions here, and describe productivity from a computational point of view. Namely, we use recursive functions in order to define classes of productive functions in Coq. We hope that this section will give the reader the opportunity to capture the spirit of a functional approach to productivity. For more on productivity of infinite data structures, see,

We call a function productive at the input value i, if it outputs a productive value at i. This understanding of productivity of functions differs slightly from the approach of [43,37,38], where a function is said to be productive if it takes productive values as an input and outputs productive values. Let us explain this on the following examples.

We have discussed the reasons why termination and productivity are important for our theory, and also we showed how they relate to each other. We introduced important examples of partially productive functions. In the next section, we will discuss the way how terminative and productive functions are syntactically defined in Coq.

Guardedness is a sufficient condition for productivity. It is described in two steps. The first step defines pre-guarded positions. A position is pre-guarded if it occurs as the root of the function body, or if it is a direct sub-term of a pattern-

In Coq, the method was implemented in [33,4], see also [12]. The method of using accessibility predicates was improved by Bove in her thesis [15] and series of papers [14,17,16,18]. The core of the improvement proposed by Bove was to separate computational and logical parts of the definitions of general recursive algorithms. That is, the method amounts to defining an inductive special-purpose accessibility (ad-hoc) predicate that characterises the inputs on which the algorithm terminates. Proving that a certain function is total amounts to proving that the corresponding accessibility predicate is satisfied on every input.

The recursive call here is made under the constructor SConc, but it also appears on the argument place of the function map. The latter fact violates the guardedness condition **, and hence the function will be rejected by Coq. Despite of this, the value nats is known to be productive.

The conventional definitions of eventually and infinite as formalised, (e.g.) in [12], express whether a given stream s satisfies some given property P at least once or infinitely many times. We modify these predicates in order to characterise the conditions for a corecursive function to perform a guarded corecursive step. In this section, we consider eventually and its role in defining a recursive function which characterises the inductive component of a given corecursive function.

Using the inductive definition of eventually predicates, we can describe the first component of the function we want to compute. This component is a recursive function that performs all the computations and tests that lead to the first guarded corecursive call. For lack of a better name, we will call this function the inductive component of the corecursive function being defined. Separating this inductive component from the rest of the function behaviour is interesting: it will hide all the non-guarded corecursive calls and make it possible to go directly from one guarded call to the next one.

The data produced by the inductive component is organised in two parts: the first part contains the observable data that is included in the head constructor of the output. Such a head constructor is necessarily present, because the eventually predicate holds and this means that there is a guarded corecursive call. The second part contains the argument for the next recursive call of the initial corecursive function.

In this section we characterise the coinductive part of corecursive functions. Core- cursive computations are introduced by repeating computations performed by the inductive component defined in the previous section. Now, because the induc- tive component finds guarded corecursive call, guarded co-recursion can take place. However, this can only happen if recursive calls satisfy the eventually predicate repeatedly. We need an extra predicate to express this.

The infinite predicate describes exactly those arguments to the function for which the function is guaranteed to be productive. Thus, we will reproduce the scheme already followed in recursion with respect to an ad-hoc predicate: the recur- sive function will be modelled in Coq by a function that receives an extra argument, a proof that the initial argument satisfies the infinite predicate. Computation will be performed by repeatedly calling the inductive component of the function. Since the inductive component function can only compute on arguments that satisfy the eventually predicate, we need a lemma stating that the infinite predicate im- plies the eventually predicate. This lemma is always obtained using a very simple proof by pattern matching.

In this Section, we have given a systematic characterisation of the coinductive components of productive functions. We employed the predicate infinite to obtain the guarded formalisation of productive functions in Coq. It remains to provide tools to reason on the functions we modelled.

The inductive component and coinductive component for each corecursive func- tion are modelled by Coq functions which take both a regular argument (named x in the function dyn and t in the function e filter) and a proof about this argument (named h in both dyn and e filter). Of course, we expect the result to depend on the regular argument, but we do not expect the computation to depend on the value of the proof. We only expect the computation to depend on the existence of this proof. In other words, when receiving a given argument x and two different proofs e1 and e2 that x satisfies the infinite dyn predicate, we expect the result- ing values dyn x e1 and dyn x e2 to be the same. This needs to be expressed in

The proofs of these lemmas are given in [13]. Also, in [13] we formulate and prove the similar proof irrelevance lemmas for filters on streams and expression trees. A similar proof irrelevance lemma was used in [38]; a very good study of applications of the Principle of Proof Irrelevance in type theory can be found in [8].

We prove the similar step-lemmas for filters on expression trees and streams in [13]. They are all formulated uniformly with the step-lemmas above. For expression trees, for example, we need four step lemmas, to give an account both for the cases when P x is true or false, and for the two constructors used to define expression trees. Conceptually, all these lemmas can be formulated in a uniform way.

In this paper, we revisited the technique developed in [10] to model filter functions on streams in a type-theory with coinductive types and guarded corecursion. We showed that the same technique could be applied to a wide class of functions: firstly, we showed that it could be applied even if the output data-type was not a stream type, and secondly, we showed that the input data does not have to be of coinductive type. In the process, we delineated the various steps of the description and we showed that the technique can lead to the main theorem stating that the model exhibits the expected behaviour.

Many of the steps in the technique we describe here can easily be automated, others are very tricky to formulate. In future work, we wish to give a precise description of the class of functions for which the technique works, and a precise description of each step that is taken in producing the eventually predicate, the first recursive component using recursion on the ad-hoc predicate eventually, etc. In the end, all the steps could be implemented as a program that takes as input the syntax tree describing the function one wants to model and produces both the Coq model and the main lemmas about this model.

