For programs running on general-purpose operating systems on PC-class hardware, threads are the most important abstraction supporting concurrent programming. On the other hand, interrupts are the dominant method for expressing concurrency in low-end embedded systems, such as those based on microcontroller units (MCUs). All major MCU architectures support interrupts, and a large number of these chips are deployed in embedded systems: according to a Gartner report, 3.5 billion 8- bit MCUs and a billion 16-bit MCUs were shipped in 2003. The correctness of interrupt-driven software is important: a substantial number of these 4.5 billion MCUs were deployed in safety-critical applications such as vehicle control and med- ical automation. For example, some of the extremely serious Therac-25 bugs [17, App. A] were directly caused by race conditions involving interrupt handlers.

Verifying the absence of race conditions in interrupt-driven systems is important, but the technology for this is primitive. We must understand interrupts and their semantics in order to understand where thread verifiers can, and cannot, be applied to interrupt-driven systems. In particular, we want to identify a minimal set of extensions to verifiers for thread-based programs that permit them to also check interrupt-based programs. A secondary goal is to exploit the semantics of interrupts to make checking faster and more precise.

Of course, threads come in many flavors. In this paper we assume the common case of POSIX-style thread semantics [5]: preemptively scheduled blocking threads, scheduled either in the kernel or at user level. However, the source code examples in this paper use a simplified syntax rather than using the verbose POSIX calls.

that are scheduled using fixed priorities, since even a high-priority thread can be- come blocked voluntarily, due to making a blocking kernel or library call, or invol- untarily, due to a page fault. In contrast, asymmetrical preemption relations are the norm for interrupts. First, all interrupts can preempt non-interrupt code, whereas non-interrupt code can never preempt any interrupt. Second, interrupts are of- ten scheduled using fixed priorities, resulting in asymmetrical preemption relations among interrupt handlers.

Some hardware platforms, such as the programmable interrupt controller on a PC, enforce priority scheduling of interrupts. On other systems, prioritized inter- rupt scheduling must be implemented in software. For example, the Atmel AT- mega128 [2], a popular MCU that is the basis for Mica2 sensor network nodes [7], performs priority scheduling only among interrupts that are concurrently pending. Once an interrupt begins to execute on an ATmega128, it can be preempted by an interrupt of any priority, if interrupts are enabled. To implement priority-based preemptive scheduling on this platform, software must manipulate the individual enable bits associated with various interrupts.

A thread lock uses blocking to prevent a thread from passing a given program point until the lock resource becomes available. Since interrupts cannot be blocked once they begin to execute, concurrency control consists of preventing an interrupt from starting to execute in the first place. This is accomplished either by disabling all interrupts, or by selectively disabling only interrupts that might interfere with a particular computation. The former is cheaper while the latter avoids incidentally delaying unrelated code.

interrupt handler in the AvrX system [4] is reentrant in order to avoid missing ticks. Reentrance has two unavoidable costs. First, later parts of the handler will have their average latency increased, rather than decreased, since total latency in a work-conserving system is a zero-sum game. Second, in practice it is difficult to

In practice these functions are written in such a way that they operate properly when used recursively. Recursive locks are those that can be safely acquired multiple times. We ignore the issue of recursive locks here; their semantics are the same in threaded and interrupt-based code.

We wrote a plugin for CIL [19] that converts a TinyOS application [13] intoa POSIX threads program that we then check for race conditions using Locksmith [20]. The nesC compiler [10] for TinyOS applications includes a race condition detector, but it is unsound due to not following pointers. The transformation closely follows the one outlined in Section 3. The transformation tool was not difficult to implement, taking one of the authors about five hours.

Many systems support not only interrupts and threads, but also deferred calls, such as DPCs in Windows and tasklets in Linux, with their own semantics. Typically, various kinds of locks are available, each protecting against some subset of these concurrency abstractions. In large code bases such as the Windows or Linux kernels, the diversity of concurrency and synchronization abstractions becomes a barrier to creating correct code. A principled way to reason about heterogeneous concurrency models is needed. Our previous work includes TSL [22], an initial step in this direction.

Interrupts lend themselves to many kinds of bugs other than race conditions. These include stack overflows, livelock, blocking in interrupt context, erroneous use of non-reentrant functions, and erroneous reentrant interrupt handlers. Unfortunately, there is no obvious way to check for most of these types of bugs via translation to threaded code and use of an existing thread checking tool.

