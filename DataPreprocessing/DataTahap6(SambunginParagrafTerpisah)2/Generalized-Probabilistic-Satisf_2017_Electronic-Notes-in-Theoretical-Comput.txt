Boole [3] and later by Nilsson [18]. This problem consists in deciding the satis- fiability of a set of assignments of probabilities to propositional formulas. There has been a great effort on the analysis of the probabilistic satisfiability problem and on the development of efficient tools for the automated treatment of this prob- lem [11,14,6,1,12].

As observed in many NP-complete problems [7], GenPSAT also presents a phase transition behaviour. By solving batches of parametrized random GenPSAT prob- lems, we observe the existence of a threshold splitting a phase where almost every GenPSAT problem is satisfiable, and a phase where almost every GenPSAT problem is not satisfiable. During such transition, the problems become much harder to solve [7].

Let us begin by fixing a set of propositional variables  x1,..., xn . A literal is either a propositional variable or its negation. A clause is a non-empty disjunction of one or more literals. A propositional formula is any Boolean combination of propositional variables.

Proof. We begin by showing that GenPSAT is in NP by providing a polynomial sized certificate. Notice that Lemma 3.3 can be extended to rational coefficients simply by normalizing with the greatest denominator. Applying this result to the system (3) we conclude that there isa k  m  1  k  m  1 matrix W , composed of columns of V , whose system has a solution iff the original system (3) has a solution. Furthermore, the obtained solutions from (4) can be mapped to solutions of (3) by inserting zeros in the appropriate positions. Since the obtained solution from the latter system has k m 1 elements, it constitutes the NP-certificate for the GenPSAT problem.

In this section we explore the close relation between satisfaction of propositional formulas and feasability of a set of linear constraints over binary variables (see [4]). With this, we present a reduction of GenPSAT to Mixed-Integer Programming (MIP), similarly to what was done for PSAT [6] and GPSAT [1]. A MIP problem con- sists in optimizing a linear objective function subject to a set of linear constraints over real and integer variables. MIP was shown to be NP-complete, see [19]. Observe that this translation to MIP also serves as a proof that GenPSAT is in NP.

this, we measure the proportion of satisfiable instances as well as the average time the solver spent to solve them. The software was written in Java, and we used Gurobi [15], version 6.5.0, to solve the MIP problem. The machine used for the tests was a Mac Pro at 3,33 GHz 6-Core Intel Xeon with 6 GB of memory. Our implementation is available in [8].

In what concerns our generalized version of probabilistic satisfiability GenPSAT, notice that a randomly sampled probabilistic formula can easily be inconsistent by itself, e.g., when it implies one of the probabilities is greater than 1. Because of this, the sampling of the coefficients was performed in such a way that this case does not occur.

Throughout this work we explored a generalized version of probabilistic satisfiability, GenPSAT. Capitalizing on its NP-completeness, we presented a polynomial reduction from GenPSAT to MIP, which was proved to be correct. Since the translated MIP problem only suffers a quadratic growth, we were able to solve reasonably sized instances for different values of the parameters: number of variables, clauses and probabilistic formulas. Seeing that an instance can be parametrized by different combinations of these parameters, we are able to make a rich analysis of the phase transition, by analyzing the behaviour for different ratios. As future work, we leave open the study of the phase transition taking into account also the size of the linear combination in the probabilistic formulas, as well as a 4th-dimensional analysis on the variation of the parameters.

