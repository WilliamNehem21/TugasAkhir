When defining the abstract operators, the main problem we need to face is that many concrete operations are not closed with respect to parallelotopes. Moreover, in many cases there is no unique best parallelotope which approximates the result of the concrete operation. Therefore, we need to carefully choose, even resorting to ap- propriate heuristics, an approximating parallelotope which brings a good precision in the overall analysis.

If ci /= 0, then assign(i, c, b) is invertible and, most importantly, maps a parallelotope to a parallelotope. In this special case, it is possible to implement the abstract operator along the line of [7]. Intuitively, the operation assign(i, c, b) corresponds to the assignment xj = cT x + b, where xj is the value of xi after the assignment. From

Therefore, we need to make explicit the constraints hidden in P which do not contain the variable xi we want to forget. The problem is that, in general, there are more entailed constraints than we can represent with a parallelotope. We need a way to choose between competing constraints.

In order to overcome the above problems, we propose the following operator. First note that we may ignore the rows in P which are unbounded (i.e. with infinite lower and upper bounds) or whose i-th entry is zero: the first remain unbounded, while the second are not affected by the assignment. Thus, in the following, we will focus on the remaining rows only, whose indexes are in J = {j | aji /= 0, lj /=

We now propose a more complex variant of abstract union, inspired by the recently developed inversion join operator [11]. The main idea of the algorithm is to generate a bunch of candidate linear forms. The corresponding constraints are obtained from the candidate linear forms by computing the lowest and upper bounds on PA and PB. We then assign to each constraint a priority.

union. Obvious candidates are the rows of the matrices A and B. Moreover, we also generate new linear forms using (a part of) the inversion join algorithm. Given two constraints in PA and/or PB, the inversion join computes a new linear form obtained as a linear combination of the two constraints, under the condition that they form an inversion. The complete procedure is illustrated in Algorithm 5.

