However, in this paper we illustrate that the standard justification for CC makes an implicit assumption about computation, one that underlies much of the discourse of constructivism. That assumption is that the computation used to construct an object (in order to show it exists) is deterministic. Indeed, the computational systems underlying every major proof assistant are all deterministic. While some systems such as Coq rely on canonicalization to achieve decidable type-checking, even undecidable extensional systems like Nuprl have coincidentally all made their computational systems deterministic. That is, while there is significant research in constructively modeling and reasoning about non-deterministic computation, non- deterministic computation has not itself been directly incorporated into the compu- tational systems underlying proof assistants.

can be used to restore CC even in the presence of non-determinism. This is because state can be used to memoize [29] computations. Thus CC can be implemented by memoizing the computation contained in the proof of totality. This suggests that constructive systems wanting to directly support (rather than just model) probabilistic or non-deterministically parallel algorithms should also support some form of state as well in order to be consistent with CC and the unification of the reals.

While our discussion will be focused on constructive type theory, we want our find- ings to be relevant to set theory as well, and so we must discuss type theories with appropriate expressivenes. Since we will be building multiple such type theories to evaluate the various impacts of effects, to focus on the computational aspects of these theories we rely on known tools to generate the boilerplate. To this end we provide background on topos theory and tripos theory corresponding to models of type/set theory and higher-order logic.

1 A tripos is actually a model of higher-order dependent predicate logic whose dependent type theory is modeled by sets and functions, but the additional dependent structure is irrelevant for our purposes. We use triposes solely in order to construct toposes, and the process for doing so applies to any model of higher-order (simple) logic over any (simple) type theory [20, Corollary 6.1.7].

Notice that the fact that application is deterministic is critical to the proof that realizability models exhibit CC. However, as we show next, determinism is entirely irrelevant to the realizability interpretation of higher-order logic. Rather, determin- ism is simply a historical artifact imposing an artificial constraint, and realizability can actually be similarly formulated on the basis of non-deterministic, i.e. relational, combinatory algebras. Thus, in this section we develop relational combinatory al- gebras, illustrate how they naturally still form a model of higher-order logic, and demonstrate that this natural generalization has dramatic effect on constructivism, with something as simple as a coin flip changing CC from being necessarily true to being necessarily false.

There is a subtlety to address though. Because PCAs are deterministic, if an application results in some code then that application always terminates. However, with RCAs, an application can successfully result in a code on one execution yet fail to terminate on another execution. Thus RCAs need a termination predicate in addition to an application relation.

the existence of a realizer of CC onto N for Flip-RCA leads to a contradiction. By Lemma 4.5, we can do so by showing there is no code that can convert realizers of totality for relations R on N into realizers of totality for some metatheoretically- determined subrelation of R.

The contributions of this paper have all been mechanically verified. This appendix is intended to let the reader know what exactly has been mechanically verified. In particular, it provides all the relevant formal definitions and formal statements of the lemmas and theorems. It does not, however, walk through the proofs in detail. For that, we refer the interested reader to directly interact with the Coq proofs themselves [13].

