The graphical calculus of string diagrams is an important ingredient in many ab- stract approaches to quantum mechanics and quantum informatics, as well exem- plified in this volume. The objects of a category are pictured as strings, and the arrows as dots. An arrow is thought of as an operation, and in a plain category each operation has precisely one input (source) and one output (target). Arrows can be such that s is injective and i is a fixpoint-free involution. For the present purposes we also need to impose a connectedness condition. The set V is the set of vertices. The set H is the set of half-edges or flags: these are pairs consisting of a vertex together with the germ of an emanating edge. Finally the set E is the set of oriented edges. The involution i reverses the orientation. The map t forgets the emanating edge. The map s returns the emanating edge in the direction pointing away from the

vertex. A port is by definition an (oriented) edge in the complement of the image of s. The set of ports of a graph is called its interface. An inner edge is an i-orbit both of whose elements are in the image of s.

This definition is essentially just the coloured version of the definition of Getzler and Kapranov [6]. A formal argument why this endofunctor has a monad structure can be found in [6]. Exploiting the third characterisation we can give a heuristic argument (which can be made into a formal proof): F [n] is the set of isomorphism classed of n-F -graphs: it is the set of ways to decorate n-graphs by the graphical species F . Now F [n] is the set of n-graphs decorated by F -graphs: this means that each vertex is decorated by a graph with matching interface. We can draw each vertex as a circle with the decorating F -graph inside, and the monad structure then consists in erasing these circles, turning a graph with vertices decorated by F -graphs into a single F -graph.

The proof follows the ideas and techniques of [1], [20] and [11]. The main point is to prove that a certain left Kan extension is preserved by the monad, which in turn relies on the generic/free factorisation. The details will soon be made available [9].

