A logic program in Twelf corresponds to a partial function from inputs to outputs as specified by the mode declaration. Since only total functions correspond to valid inductive proofs we must ensure that the defined function terminates on all inputs and covers all possible cases. Both properties cannot be shown within the framework, e. g., we cannot give a proof that subst_red is terminating. Instead, totality of a function needs external reasoning and can be ensured by built-in tactics.

The %reduces declaration states that the type expression C is a subexpres- sion of A. Twelf checks that this invariant is preserved in all possibilities of introducing subst_x A D C E F. In case subst_x_x it holds because C is in- stantiated to A. In case subst_x_app it follows from the ind. hyp. which states that already B => C is a subexpression of A.

It expresses that the four type families are mutually recursive and terminate w. r. t. the lexicographic order on pairs (A, E) of types A and typing derivations E. This corresponds on a main induction on A and a side induction on E. To verify termina- tion, Twelf makes use of the %reduces declaration. Using the world block wne_var, the code also coverage-checks, hence, the lemma is completely machine-verified.

