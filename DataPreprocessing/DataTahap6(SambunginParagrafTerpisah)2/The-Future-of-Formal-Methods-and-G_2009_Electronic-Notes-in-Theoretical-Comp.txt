From the perspective of the last 20 years it is hard to believe that asynchronous design methodologies were once a common computer design and architecture ap- proach. The last two decades have been a golden era of clocked architectures and circuit design. However, history often repeats itself; often forgotten methods prove useful as technology evolves. Looking forward there appears to be substantial po- tential for asynchronous circuit and design technologies to emerge once again. This paper explores the current state of asynchronous design and how it might return to become a common design methodology in the semiconductor industry.

This possible asynchronous revival is supported by the authors of the semi- conductor technology road-map. This document predicts that a full 20% of designs will be driven by handshake clocking in 2012, rising to 40% by 2020 [31]. Handshake clocking is a politically correct way of saying that designs will be asynchronous. Such a steep penetration of this technology would be truly amazing and disruptive. This paper covers a potential evolutionary flow that will result in nearly half the designs being asynchronous by 2020.

clocked system. This is because the propagation of the acknowledgment signal from receiver to sender takes just as long as the data to propagate from the sender to receiver. This overhead is even worse for four-cycle protocols where the return-to- zero phase further degrades throughput. If wire delays are negligible, such as in the IP cores themselves, this overhead can be reduced to a negligible value.

Note that these protocols can easily be interchanged in a design and between modular asynchronous block. Various interfacing protocols have been applied to memories, both on and off die. A dual-rail protocol with sense amplifiers is typi- cally applied internally to SRAM arrays. Externally source synchronous protocol is commonly applied between the memory array and the clocked module, and now between IP cores [20].

The remainder of the paper consists of bold speculative predictions of what impact asynchronous and GALS design will have on the semiconductor industry by the year 2020. These predictions are based on the past, current technology and their particular merits and demerits, and assumes the continued presence of silicon and MOS transistors as the primary technology used to implement digital electronics. Making predictions is always a risky endeavor. Technology will evolve significantly between now and then, and may invalidate many of the assumptions. For example, when novel transistors that are not based on MOS technology evolve many of the predictions in this work will either become enhanced or obsolete based on the nature of the new disruptive technology.

The first prediction is that formal verification (FV) will move from a niche technol- ogy to one that is fundamental to the design flow. While humans have an innate ability to invent and create, they do a poor job of evaluating all possible corner conditions into which concurrent systems can evolve. Such a domain, with its reachability analysis, is the realm of formal verification tools that can prove con- formance between an implementation and a specification or prove conditions on a design such as liveness and safety. Such a change to FV-based design will be painful and costly to the design industry, but will also greatly improve productivity and product costs as fewer product recalls will occur.

The second driver for formal verification into the design flow is the increasingly modular nature of our designs. The focus in this domain is upon formal proto- col verification. The increased modularity of our designs have resulted in formal protocols used to efficiently implement and verify communication between blocks [40]. Asynchronous logic and SoC interface specifications are formal protocols. Any module that conforms to the specific protocol can be directly interconnected. The protocols range from simple to the complex. For instance, handshake communica- tion protocols between pipeline stages can be expressed in a few lines of process logic or as a petri net. On the other hand, the OCP protocol specification is 340 pages long [26].

Modeling the timing of events in a protocol are becoming imperative as systems become more complex and optimizations show more value. Initially proving cor- rectness will be to focus as there is significant difficulty in predicting the timing of events in a large system. This will evolve into timing optimization of large modular systems.

Temporal logics have been used for years to verify behavior and timing. However, these systems are very rigid in their ability to address timing. Relative timing is another approach that has more flexibility in timing [38,32]. Some combination of these approaches or new methods will be developed to prove system level correctness of designs.

ing of two race paths. A unique formal verification engine which supports relative timing employs bisimulation semantics between specification and implementation [36]. Each component in this system uses semi-modular specifications [23,14], and are modeled in CCS process language which supports nondeterminism. A relative timing constraint is applied to the system to be verified in order to remove circuit hazards by pruning the reachability of hazard states. An automatic relative timing identifier based on signal traces, called ARTIST, has been designed, implemented and then embedded into formal verification engine to release the designers from the heavy duty on hand-generated constraints.

The increased focus on formal verification will result in several positive effects in the industry. This step will help ensure the correctness of all complicated modular systems. It will simplify the transition to asynchronous design and handshake clock- ing. Hopefully there will also be an improvement in the specifications themselves. The industry can not continue to live with ambiguous English based specifications. The Intel instruction set architecture may be an exception and continue to survive as a text based specification; but here there is a large body of experience that leads to specific well known interpretations of that document. OCP and other protocols will need to be recast in a formal specification language. Unfortunately, herein lies the challenge, as consensus on the correct representation will likely be contentious. There are many options. We particularly like process logics as a formal specification.

Like most disruptive technologies, adoption will likely start at the low perfor- mance end of the spectrum and eventually become adopted all the way up the product line. This seems to be the case with asynchronous design, as startups that appear to have highest likelihood of success are in the low end of the product line. One good example of this is Handshake Solutions which started targeting smart cards, and is moving up the product road-map.

Memory arrays such as SRAM are large asynchronous blocks that have been seam- lessly integrated into clocked design. These asynchronous blocks are so completely accepted by most designers that they no longer realize that these arrays use a sub- stantially different clocking methodology. One could also argue that traditional register arrays are also a form of asynchronous design where the clocks become gated on data validity based on the operation and data values.

Delay insensitive design is based on the theory that if the handshake protocol is extended into the data path, then design correctness becomes a completely inde- pendent issue from design performance and timing. As noted earlier, design correct- ness is such a key issue we predict that formal verification will become a standard part of the design flow. If design correctness can be decoupled from performance, then the flow can be partitioned into two orthogonal steps: one creating the de- sign and methodology, and another optimizing performance and power. Thus every current commercial asynchronous company currently employs a delay insensitive design methodology, or started out using such a flow. This is also the case with GALS research [3,4].

Such huge overheads may make sense, but not if better solutions are available. The biggest problem is one of solving the timing driven synthesis and validation of asynchronous designs. At least two solutions have been found, including one using relative timing, which allow fully asynchronous designs to be timing optimized using traditional clocked CAD flows [39]. Another unpublished solution has been implemented by the successful asynchronous startup Handshake Solutions.

Another significant predicted change will occur in the design of the IP cores as explicit data validity information is introduced into the clocked pipelines. This information was removed early in the architecture of clocked designs as part of the mapping to clocked function units. Synchronization became explicit through cycle counting. However, as complexity of designs increase, this loss of information is becoming a serious impediment to system level design and the overhead of this choice is becoming apparent in many aspects of design.

design to a whole family of transformations and optimizations that were never possible beforehand. Probably the first optimization will be to revolutionize how clock gating occurs. Once data validity information from the data path is employed, the efficiency of clock gating in synchronous designs can begin to rival that of asynchronous systems. This will result in substantial reductions in the power of clocked design.

Initial interface designs started with very complex protocols in an attempt to shield and protect the clocked assumptions as sacrosanct. This included stoppable clock wrappers of GALS design, and the shells of latency insensitive protocols [19,7]. The next migration was to complex bus and network interfaces such as OCP. As clock designers realize that data valid handshake protocols can relatively easily be integrated into their designs, and that this creates a seamless interface to the rest of the system, these complex wrappers, shells, and interface designs no longer be designed for new IP. This transformation will be like no other because automated algorithms will be implemented to translate clocked design into elastic design. Even legacy designs can be rapidly converted without much non-recurring engineering costs.

There have been two impediments to the commercialization of asynchronous design. First, the diversity of the designs has been staggering, with little attempt to unify methodology or terminology. This lack of unity has led to many interesting research results, but insufficient collaboration to gel momentum around standard design styles and CAD. The second roadblock has been the need to develop custom CAD for the flow from top to bottom, largely in competition with the clocked CAD.

Just as clocked design is evolving to employ the advantageous aspects of asyn- chronous design, asynchronous design is likewise evolving to integrate the advan- tageous aspects of clocked design. DI design will disappear, and bundled data asynchronous designs will become the defacto standard. The data path of such designs will utilize the best synthesis engines, which will come from commercial clocked CAD.

The primary impediment in this domain is related to system timing. However, it is interesting to note that (i) the timing of a bundled data asynchronous design and a clocked design is not fundamentally very different, and (ii) the timing assumptions of the clocked design have been directly integrated into the CAD tools. Thus, the commercial CAD vendors will slowly begin to improve support for asynchronous CAD in their products.

We feel that this will evolve by the asynchronous community first generating sets of constraints in the sdc format sufficient to synthesize and optimize designs. Currently this process is only partially supported in the tools, as commands such as set data check do a poor job of timing driven synthesis and optimization. The algorithms of these commands are also very different for each vendor, and at times differ between the tools of a single vendor.

The advent of asynchronous design presents some interesting shifts in the efficiency of programming our logic. We expect the design flow to be somewhat modified. First, there will be an additional part of the flow added to design, verify, and char- acterize asynchronous templates that will implement the asynchronous handshaking protocols. These will be integrated with latches or registers into the design. The data path will then look much like a traditional clocked data path.

Such a flow places a heavier burden on the designer for specifying communication channels between asynchronous templates. This can become very burdensome and error prone in current languages such as Verilog. However, this challenge presents a golden opportunity. The necessity to optimize the communication network is becoming increasingly problematic. This has been predicted to be so fundamental to future design that future designers will focus on the communication structure of the design with little attention to the functional aspect of the design [5]. This evolution to communication centric design should create a shift in chip programming to support such flows. We expect there first to be communication channel based languages, perhaps similar to System-C [18]. Next, we expect a language that will more directly support the optimization of communication [2].

MacWilliams, P. D., W. S. Wu, D. K. Sampath and B. A. Prasad, Method and apparatus for transferring data in source-synchronous protocol and transferring signals in common clock protocol in multiple agent processing system (2002), US Patent No. 6336159, Assignee is Intel Corporation.

