We prove in this paper that policy iteration can be generally defined in finite domain of templates using La- grange duality without any assumption on the templates. Such policy iteration algorithm always converges to a fixed point under a very simple technical condition. This fixed point furnishes a safe over-approximation of the set of reachable values taken by the variables of a program. The paper also discusses the choice of good templates and links these good templates to invariant algebraic relations. When templates are well chosen, the policy iteration algorithm developed in this paper can be easily initialised for one single loop programs.

In [1,2], we introduced a complete lattice consisting of sub-level sets of (possibly non-convex) functions, which we use as an abstract domain in the sense of abstract interpretation [5] for computing numerical program invariants. This abstract do- main is parameterised by a basis of functions, akin to the approach put forward by Manna, Sankaranarayanan, and Sipma (the linear template abstract domain [17]), except that the basis functions or templates which we used need not be lin- ear. In [1,2], we also developed a policy iteration scheme using Shor relaxation and semi-definite programming in the case of affine arithmetics and quadratic con- straints. We only proved that this latter policy iteration converged to a postfixpoint of the relaxed semantics. Moreover, in [1,2], the quadratic templates were provided by the user or more precisely an automatician. Indeed, the set of quadratic tem- plates used in examples of [1,2] contains a Lyapunov function of the affine systems induced by the (affine) arithmetics programs. The usage of Lyapunov functions as quadratic templates was fully automatised by Roux et al in [13].

Contribution of the paper. In this paper, we present a policy iteration algo- rithm in finite templates domain using Lagrange duality without any restriction on the arithmetics of the program or the algebraic structure of templates. We also prove that such policy iteration algorithm converges to a fixed point of the relaxed semantics functional.

The paper also deals with the generation of good templates in the simple case of one-loop programs and we link the notion of good templates with Lyapunov functions. Indeed, templates can be thought as invariant algebraic relations which help to prove correctness of the programs. We show that a good choice of templates leads a natural initial policy.

Organisation of the paper. The paper is organised as follows. Section 2 recalls the abstract domain based on non-linear templates and abstract semantics functional. Section 3 details the general construction of the relaxed semantics function using Lagrange duality. Section 4 recalls both Kleene iteration and policy iteration in templates domain and gives convergence proofs. Section 5 proposes a discussion on what the good templates are and how we can initialise policy iteration easily in case on one-loop programs. Section 6 consists in applications. Finally Section 7 concludes.

First, we quickly recall the concept of Lagrange duality. Then, we construct the relaxed semantics on the assignments, tests and joins. Finally, we present the properties of the relaxed semantics that will be used to prove convergence of policy iteration algorithm to a fixed point of relaxed semantics.

P. Nevertheless, during the fixed point iteration (as in Section 4) the functions vl1 and vl2 are not necessarily P-convex. Moreover, if we take the abstract semantics F (v), we do not have an infimum of linear forms (or at least a maximum of linear forms) on the abstract values vl1 and vl2 , a formulation that we need. Finally, we relaxed the abstract semantics F (v) by the supremum itself and:

Kleene iteration has the inconvenience that the values vk which are obtained at a given iteration k (before convergence) do not provide a safe invariant. We shall see that policy iteration does not have this inconvenient: even if it is stopped at an intermediate step, it does provide a safe invariant. Moreover, the convergence of the Kleene iteration can be very slow, so it needs to be coupled with an acceleration technique which provides over-approximations. In [1,2], after a given number of iterations, and during a few iterations, we round bounds outwards with a decreasing precision (akin to the widening used in [9]).

In [1,2], we have proved that policy iteration on quadratic templates converges to a postfixpoint of our relaxed functional (Theorem 4.2 here). Actually, the re- sult holds independently of the restriction on quadratic templates. Combined with Theorem 3.1, this postfixpoint is also a postfixpoint of abstract semantics.

The choice of the initial policies is a crucial point for the quality of the fixed point found by policy iteration. For example, if we know that the values of the variables are bounded an unbounded first invariant can be a fixed point and policy iteration stops. The choice depends on the template design algorithm.

We define policy iteration algorithm in a general setting using a finite domain of templates and prove that the algorithm converges to a fixed point of the relaxed semantics. This latter result allows us to use characterisation tools [3] to check whether the solution found is the smallest one. We also define the problem of com- puting good templates and prove that initialisation of policy iteration is provided from this choice of invariant relations. Future works should include an automatic method to compute the invariant algebraic relations and automatic way to initialise policy iteration from the relations generated.

