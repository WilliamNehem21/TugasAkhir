Priced timed (game) automata extend timed (game) automata with costs on both locations and transitions. The problem of synthesizing an optimal winning strategy for a priced timed game under some hypotheses has been shown decidable in [6]. In this paper, we present an algorithm for computing the optimal cost and for synthesizing an optimal strategy in case there exists one. We also describe the implementation of this algorithm with the tool HyTech and present an example.

In recent years the application of model-checking techniques to scheduling problems has become an established line of research. Static scheduling prob- lems with timing constraints may often be formulated as reachability problems on timed automata, viz. as the possibility of reaching a given goal state. Real- time model checking tools such as Kronos and Uppaal have been applied on a number of industrial and benchmark scheduling problems [1,7,9,12,14,17].

A few years ago, the ability to consider quite general performance mea- sures has been given. Priced extensions of timed automata have been intro- duced [5,3] where a cost c is associated with each location l giving the cost of a unit of time spent in l. Within this framework, it is possible to measure performance of runs and to give optimality criteria for reaching a given set of states.

the variable Cost of H). Thus if we synthetize a realizable winning state-based strategy f for H, we obtain a strategy that depends on the cost value. In case there is a winning strategy for H (see section 3.1) we can synthetize realizable state-based winning strategies for J (see [6], Corollary 2). This result is already satisfying but we would like to build strategies that are independent of the cost value i.e. in which there is no need for extra information to play the strategy on the original RPTGA J (this means we want to build a state- based strategy for the original RPTGA J.) To this extent we introduce the notion of cost-independent strategies.

Note that under the previous conditions we build a strategy f which is uniformly optimal i.e. optimal for all states of WG. A syntactical criterion to enforce the condition of theorem 4.3 is that the constraints (guards) on controllable actions are non-strict and constraints on uncontrollable actions are strict. We now give an algorithm to extract such an optimal, state-based, realizable and winning strategy for a RPTGA J.

Our future work consists in extending the class of systems for which the algorithm we provided terminates. The synthesis of sub-optimal strategies (when no optimal strategy exists) is currently being investigated. We would also like to extend this work to more general winning conditions (like safety conditions) and with other performance criteria (as for example the price per unit of time along infinite schedules).

