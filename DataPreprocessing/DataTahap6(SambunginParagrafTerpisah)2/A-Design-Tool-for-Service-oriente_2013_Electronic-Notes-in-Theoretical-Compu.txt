In this paper we present a modeling and analysis tool for service-oriented systems. The tool enables graphical modeling of service-based systems, within the resource-aware timed behavioral language Remes, as well as a textual system description. We have developed a graphical environment where services can be composed as desired by the user, together with a textual service composition interface in which compositions can also be checked for correctness. We also provide automated traceability between the two design interfaces, which results in a tool that enhances the potential of system design by intuitive service manipulation. The paper presents the design principles, infrastructure, and the user interface of our tool.

The recently introduced paradigm of Service-oriented Systems (SOS) provides the basis for dealing with software integration and composition, by exploiting loosely coupled and autonomous abstract modeling entities called services [4]. The nature of services calls for methods and automated support to design the system, as well as to ensure the quality of service (QoS) of the result. To address such needs, an extension of Remes, an already existing resource-aware timed behavioral modeling language, has been proposed [5]. This extension has enriched Remes with service- oriented features, i.e., service interface description such as type, capacity, time-to- serve, status, pre-, and postcondition, a Hierarchical Language for Dynamic Service Composition (HDCL), as well as with means to check service compositions. All these

In this paper, we present a tool for designing SOS in Remes. The tool consists of a graphical environment for behavioral modeling of services, a service composi- tion view integrated as a textual interface, and a correctness condition generator for service compositions. The distinguishing features of our tool reside in the possibility of tracking changes between the graphical and textual views, automatically, as well as in the automated generation of corresponding verification conditions for the com- posed services [5]. Last but not least, connecting to a prover and/or model-checker, from the tool, to discharge the verification conditions, is one-step away.

The rest of the paper is organized as follows: Section 2 presents the overall approach together with the tool workflow (Subsection 2.1), the user interface (Sub- section 2.2), the model traceability and verification condition generator (Subsec- tion 2.3), whereas Section 3 concludes the paper and gives some hints of the future work.

The tool is divided into two functional units: Diagram Editor View (DEV) and Con- sole View (COV). DEV is the top level unit in charge for opening a new diagram editor, creation of services, and for displaying a service composition. It uses the Net- Beans Visual Library API to render the created diagram and contains a large visual modeling interface. COV supports the textual description of the system, including service declarations, lists of services, and their composition; in this console-like in- terface, the correctness verification conditions for services can be generated, once a composition is created.

Our tool enables system composition by using services as basic units. A ser- vice repository is available to service users, and consists of services modeled using the Remes extended interface and the behavioral language. These registered ser- vices can be invoked and composed in different ways, based on the preferences of the service user.

services in new services, by using serial, parallel operators, and list constructors. Services are connected via edges on control points. Remes models and conditional connectors can be nested inside a composite service. A Remes model is described in terms of the Remes hierarchical language [5].

The user can compose services, either graphically or textually, and the tool of- fers him/her the possibility to visualize the transformations from one interface to another. It is important to note that this feature enables consistency checks, infor- mation exchange, and traceability links. The idea is to perform a round-trip between views. The service repository is passed to both views, which in turn allows the user to compose services with that selection. Through the process of defining traceabil- ity links we have defined each link with a root class representing a created service. Moreover, a link contains a number of traceability link attributes, all of which are associated with service attributes of different types. Apart from the references that represent link ends, each traceability link typically stores some additional primitive information too. This information either applies to a service composition or to some particular list of services. In addition, establishing a traceability between the tool views extends beyond construction the service syntax and also involves specifying the service composition and the derived correctness conditions.

In this paper, we have presented a tool for specification, modeling, and analysis of SOS, which provides interfaces to graphically and textually design the system, but it can be also used to detect errors. The tool adopts the language Remes as the service model, and uses a hierarchical language for composing existing services into new ones, depending on user needs. Through a palette and a repository, the tool makes it easy to specify both functional, as well as extra-functional behavior of services i.e., timing, resource usage etc., whereas the console lets one to rapidly modify an already existing composition, by adding textual information, which is then automatically reflected into the graphical representation. The correctness verification of services is done via strongest postcondition calculus, and reduces to discharging boolean formulae automatically generated by the tool, from the graphical view. However, the tool still awaits integration with model-checkers like Uppaal 5 , since Remes semantics is given in terms of Priced Timed Automata (PTA) [2], as well as with a prover for automatically verifying the generated correctness conditions.

