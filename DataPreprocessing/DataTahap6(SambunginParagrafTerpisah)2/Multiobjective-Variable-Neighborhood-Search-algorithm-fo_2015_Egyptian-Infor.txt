Grid computing is a form of distributed computing that involves coordinating and sharing computing, application, data and storage or network resources across dynamic and geographically dispersed organization [1]. Users can share grid resources by submitting computing tasks to grid system. Resources can be computers, storage space, instruments, soft- ware applications, and data, all connected through the Internet and a middleware layer that provides basic services for secu- rity, monitoring, resource management and so forth.

Variable Neighborhood Search is a simple and effective meta-heuristic method developed to efficiently deal with the hard optimization problem. VNS is a framework for building heuristics, based upon systematic changes of neighborhoods both in descent phase, to find a local minimum, and in pertur- bation phase to emerge from the corresponding valley. VNS has also demonstrated good performance on industrial appli- cations such as the design of an offshore pipeline network [7] and the pooling problem [8]. It has also been applied to real- world optimization problems, including optimization of a power plant cable layout [9], optical routing [10] and online

Few works have considered the optimization of makespan and flowtime objectives for the scheduling problem [25,29]. Jacob et al. [30] studied the optimization of four objectives, namely makespan, resource utilization, time and cost of appli- cation for solving the HCSP. Xu et al. [31] experimented the Chemical Reaction Optimization (CRO) algorithm based grid job scheduling problem by considering makespan, flowtime and tardiness of the solution.

this line of research. The performance of VNS algorithm depends on the performance of its neighborhood. Working in that line, the performance of VNS algorithm had been enriched by framing new problem specific neighborhoods, in order to solve the large scale heterogeneous computing scheduling problem instances. The multiobjective version of the scheduling problem studied in this work considers the opti- mization of an aggregation function that sums the makespan and flowtime of the solutions.

A computational grid is a hardware and software infrastruc- ture that provides dependable, consistent, pervasive and inex- pensive access to high end computational capabilities [1]. A Grid Scheduler (GS) receives applications from grid users, selects feasible nodes for these applications according to the acquired information from the Grid Information Service (GIS) module, and finally generates application-to-node map- pings, based on certain objective functions and predicted node performance. Scheduling algorithms are used in the GS for mapping tasks to resources in order to simultaneously opti- mize both systems-related (e.g. makespan) and user-related objectives (e.g. flowtime).

The role of the Grid information service is to provide infor- mation about the status of available nodes to Grid schedulers. GIS is responsible for collecting and predicting the node state information, such as CPU capacities, memory size, network bandwidth, software availabilities and load of a site in a partic- ular period. GIS can answer queries for node information or push information to subscribers.

This neighborhood assigns the Light node to the randomly selected job in the job list of Heavy node. Light and Heavy nodes are the nodes with minimum and maximum local make- span respectively, where the local makespan of individual node gives the completion time of its latest job. Maximum local makespan is the makespan of the solution.

an initial solution x, finding a direction of descent from x within a neighborhood N(x), and moving to the minimum of f(x) within N(x) in the same direction. If there is no direction of descent, the heuristic stops; otherwise, it is iterated. After the local search, a change in the neighborhood structure is per- formed. Function NeighborhoodChange compares the value

When facing the heterogeneous computing scheduling prob- lem, researchers have often used the test instances proposed by Braun et al. [16], following the ETC performance estima- tion model by Ali et al. [45]. ETC takes into account three key properties: machine heterogeneity, task heterogeneity, and consistency. Machine heterogeneity evaluates the varia- tion of execution times for a given task across the heteroge- neous computing nodes, while task heterogeneity represents the variation of the tasks execution times for a given machine. Regarding the consistency property, in a consistent scenario, whenever a given node Gj executes any task Ji faster than other machine Gk, and then node Gj executes all tasks faster than machine Gk. In an inconsistent scenario, a given machine Gj may be faster than machine Gk when executing some tasks and slower for others. Finally, a semiconsistent scenario models those inconsistent systems that include a consistent subsystem.

