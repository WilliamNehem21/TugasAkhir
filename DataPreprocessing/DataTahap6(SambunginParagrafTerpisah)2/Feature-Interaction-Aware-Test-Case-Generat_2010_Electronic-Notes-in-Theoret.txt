Hence, f1 and f2 might modify v concurrently either affecting an internal control value, or the behavior of an actuator. Again, such interactions are often introduced by design and are synchronized properly, e.g. via control flags like cls status in the sample door system. Nevertheless, such patterns must be exhaustively validated to rule out unintended behavior. If both features become activated simultaneously, i.e. orthogonal Stateflow (sub-) automata realizing different features that change the same value, contradicting forces can be injected to an actuator. A special case arises for two distinct actuators affected by different features that have contradict- ing effects on the environment. To detect such constellations, further knowledge concerning the environment may be necessary. In the door system example, both kinds of feature interactions are present as will be examined in the following section.

Transformation into a flow graph: Test case generation algorithms, e.g. for path coverage are primarily based on test models constituting basic data/control flow graphs. Therefore, Statechart-like formalisms leading to behavioral specifica- tions in terms of hierarchical automata are to be transformed (flattened ) first to be applicable as test models [5,11]: influence each other via f2. Therefore, a corresponding test model is to be built by composing those of f1, f2, and f3. This can be generalized by not only intersecting pairs of FI, but rather all possible combinations, which will naturally lead to the test model for the complete system integrating all features. To what extent this process shall be performed can depend on decision criteria such as the safety level of features involved, the degree of coupling, i.e. the number of shared values, etc.

