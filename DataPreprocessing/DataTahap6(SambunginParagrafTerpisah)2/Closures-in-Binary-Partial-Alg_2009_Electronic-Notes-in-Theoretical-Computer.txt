Two procedures for computing closures in binary partial algebras (BPA) are introduced: a Fibonacci-style procedure for closures in associative BPAs, and a multistage procedure for clo- sures in associative, commutative and idempotent BPAs. Ramifications in areas such as resolution theorem proving, graph-theoretic algorithms, formal languages and formal concept analysis are dis- cussed. In particular, the multistage procedure, when applied to formal concept analysis, results in a new algorithm outperforming leading algorithms for computing concept sets.

We also note that multistage is a surprisingly intuitive, but non-trivial procedure. As the name suggests, the procedure computes closure in non- cumulative steps, resulting in a partition of the closure in the end. Each stage generates elements whose ranks lie within a specific range. This reduces a potentially large number of redundant operations using a trivial brute-force approach suggested by the definition. When applied to formal concept anal- ysis [8], the multistage approach resulted in a new algorithm which outper- formed all leading algorithms for computing formal concept sets [17,21]. The correctness of the multistage approach rests in the assumption of three prop- erties of the underlying BPA: associativity, commutativity and idempotency. Without commutativity and idempotentncy, a Fibonacci-style approach pro- vides a general approach for computing closures in associative BPAs. Neither the Fibonacci-style approach nor the multistage approach is applicable to the resolution procedure, however. This is because the BPA arising from resolu- tion is not associative (see Section 5), a property worth being highlighted as a key reason for its computational complexity.

The rest of the paper is organized as follows. In Section 2 we review the notion of binary partial algebra, and present the notions of rank, closure and the interplay between the two. Elements in the closure are precisely those with finite ranks with respect to the starting set. In finite associative BPAs, the value of finite ranks are bounded by the size of the carrier set. In Sec- tion 3 we formulate, as samplers, problems in resolution theorem proving, graph-theoretic algorithms, formal languages and formal concept analysis in BPAs. In Section 4 we introduce two basic approaches for computing closures in BPAs. A Fibonacci-style approach is introduced for computing closures in associative BPAs. A multistage approach is introduced for computing closures of associative, commutative and idempotent BPAs. We show that not only can these approaches be translated directly to algorithms, the algorithms can be more efficient than known ones. We then instantiate the multistage algo- rithm for formal concept analysis. In Section 5 we briefly revisit the topic of resolution using BPA. Concluding remarks are given at the end of the paper.

In universal algebra [10,13], an algebra is defined as a set with a collection of operators. The operators can be of any arity, but they must be total. In binary partial algebra, as the name suggests, the operators can be partial [3,4], in the sense that the values for some arguments can be undefined.

We recall some basic terminologies for binary partial algebras: associativ- ity, commutativity, idempotency, closure. We also treat the syntactic part of an algebra by employing the associated formal language. These will be used for the development in the rest of the paper.

We follow the notation of [8] in this subsection. Readers are referred to [8] and [24] for further details. For any set A, let P(A) denote the powerset of A. A subset C of the powerset P(A) is called a closure system if C is closed under

As illustrated in the precious section, closures in BPAs are of particular in- terest since they are intimately related to algorithmic and decision-theoreic topics. In this section we provide two basic algorithms for computing closures in BPAs that are improvements from the brute-force one. The first algorithm is of Fibonacci-style (to be explained later), and the second, more efficient one is called a multistage algorithm which improves upon the Fibonacci-style algorithm but is applicable only to commutative, associative and idempotent BPAs.

Since the BPA arising from formal concept analysis (see Section 3.4) is commutative, associative and idempotent, the multistage algorithm is appli- cable for computing concept sets. This results in a new algorithm whose ef- ficiency has outperformed all other leading algorithms for computing concept sets, based on an experimental study [21].

Remark 1. The above proof using induction goes through without using rank; it can be based on syntactic form, i.e., the length of an expression. Also, induction based on rank will be needed for the next corollary, the idea of which is explained in the second remark.

We have made a case for using binary partial algebras as a possible unify- ing framework for studying a group of algorithmic problems from computer science. We have illustrated how the notions of rank and closure interact with each other, and introduced two algorithms for computing closures in bi- nary partial algebras. The multistage procedure is a more efficient method for computing closures, with the algebraic properties of the underlying BPA supporting its algorithmic validity.

Further developments in BPA could take two broad flavors. One is the development of properties for BPA, including those for computing closures, so they can be applied to specific topics such as graph algorithms. Second and in return, algorithms underlying many existing efficient procedures known in special cases such as resolution theorem provers may be seen under BPA in a new light, making it possible to reapply the ideas to a different setting.

M. Goldstein, V. Kudryavtsev, I. Rosenberg (eds.). Structural Theory of Automata, Semigroups, and Universal Algebra: Proc. NATO Advanced Study Institute on Structural Theory of Automata, Semigroups and Universal Algebra (NATO Science Series II: Mathematics, Physics and Chemistry, Vol. 207). Springer, 2005.

