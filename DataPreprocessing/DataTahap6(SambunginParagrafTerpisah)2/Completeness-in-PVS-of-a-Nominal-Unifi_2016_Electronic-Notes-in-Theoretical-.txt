This paper is accompanied with the whole PVS development for nominal uni- fication, which includes specifications of all notions and definitions as well as for- malisations of the proofs of all lemmas and theorems given in this paper. The development is available for download in the PVS theory for term rewriting sys- tems trs.cic.unb.br.

The nominal unification algorithm given in Isabelle/HOL in [19] is essentially specified as the transformation rule system presented in [18]. These rules transform unification problems with their associated freshness contexts into simpler ones. This approach is very elegant and allows a higher level of abstraction that simplifies the analysis of computational properties such as termination and uniqueness of solu- tions, but it is not so useful in implementations due to its inherent non-determinism (regarding the application of the transformation rules).

In PVS, permutations are specified as lists of pairs of atoms. The function act applies a permutation to an atom by the recursive action of the swappings that represent the permutation. On the other hand, the function ext extends the action of permutations to terms homomorphically, i.e., it applies act to atoms and accumulates permutations in suspensions.

In this work, a nominal unification algorithm that only takes terms as parameters was presented. Unlike other approaches, which use transformation rules and take the corresponding freshness problems as part of the unification problem, here we have designed a function that can compute the freshness contexts separately. Our nominal unification algorithm is more straightforward and closer to the ones that implement first-order unification.

