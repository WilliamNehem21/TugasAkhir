In our paper we deal with the expressing of recursion and corecursion in functional programming. We discuss about the morphisms which express the recursion or corecursion, respectively. Here we consider especially the catamorphisms, anamorphisms and their composition called the hylomorphisms. The main essence of this work is to describe a new method of programming the function for calculating the factorial by using hylomorphism. We show that using of hylomorphism is an alternative method for the computation of factorial to recursive methods programmed classically. Our new method we describe in action semantics which is a new formal method for the program description.

The F -coalgebras and the homomorphisms between them form a category. The category Coalg(F ) is the category whose objects are the F -coalgebras and mor- phisms are the homomorphisms between them. Composition and identities are inherited from the definition of category. An F -coalgebra is said to be a terminal

The concept of the recursive coalgebra, i.e. a coalgebra which has a unique coalgebra-to-algebra morphism into every algebra is important for the formulation of the relation between coalgebras and algebras in the same category. In particular, in functional programming one often uses the universal property of an initial algebra to provide a semantics of a recursive program. Recursive coalgebras ex- tend that universal property beyond the initial algebra considered as coalgebra [2,6].

In this section we apply the theory described in previous sections and we present them in one example. We use the hylomorphism as a composition of anamorphism and catamorphism, that is exactly the same as recursive coalgebras, which are based on the coalgebra morphisms called coalgebra-to-algebra morphism. Coalgebra is expressed as an anamorphism and algebra as a catamorphism.

Argument of this function is an element of the type int. The function returns the list of elements from n to 1 as an output. Such a generated list we need for the calculation of the factorial of n. The concrete type signature of this function is:

The data entities consist of mathematical values, such as integers, Boolean val- ues, and abstract cells representing memory locations, that embody particles of information. Sorts of data used by action semantics are defined by algebraic spec- ifications. Yielders encompass unevaluated pieces of data whose values depend on the current information incorporating the state of the computation. Yielders are occurring in actions and may access, but they are not allowed to change the current information.

In functional paradigm we use only two main actions: evaluate and elaborate. Action execute is not important in functional paradigm. Typical for functional programs is that they do not deal with storage. Therefore we will not use actions of imperative facet for allocating memory locations, storing values and getting values from cells in memory in our action semantics descriptions of functional programs.

names (identifiers). These associations are called bindings. A binding can be global, when declared at the top level of the source code, or local, when declared in a let or letrec expressions that contain it. The difference between let and letrec expressions is that in the latter mutual recursion is allowed. We provide this description of evaluation of simple expression:

In this paper we have focused on the analysis of recursion and corecursion. We de- scribed the recursion by initial algebras and catamorphisms. Then we described the corecursion as a dual method of recursion by terminal coalgebras and anamorphisms. To define the relationship between recursion and corecursion we used algebras and coalgebras which are dual structures. The exact relation between algebra and coal- gebra we defined by the recursive coalgebras which is based on unique coalgebra- to-algebra morphism. This morphism is otherwise known as hylomorphism. In the last chapters we showed an unusual example for calculating the factorial of number n with our new method using anamorphism, catamorphism and hylomorphism; the description of this method we presented in action semantics. We presented an al- ternative method of how to make a computation of recursive functions by special mathematical structures - the algebras and coalgebras with the relation between them expressed by recursive coalgebras. Our future research will be the exact ca- tegorical formulation of those principles by using the structures for the contrustion of the algebras and coalgebras: monads and comonads.

