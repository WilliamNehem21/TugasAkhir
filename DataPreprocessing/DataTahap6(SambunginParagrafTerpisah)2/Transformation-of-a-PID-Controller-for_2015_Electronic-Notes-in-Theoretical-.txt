Numerical programs performing floating-point computations are very sensitive to the way formulas are written. Several techniques have been proposed concerning the transformation of expressions in order to improve their accuracy and now we aim at going a step further by automatically transforming larger pieces of code containing several assignments and control structures. This article presents a case study in this direction. We consider a PID controller and we transform its code in order to improve its accuracy. The experimental data obtained when we compare the different versions of the code (which are mathematically

Numerical programs performing floating-point computations are very sensitive to the way formulas are written. Indeed, small syntactic changes in the arithmetic expressions which do not modify their mathematical meaning may lead to significant changes in the result of their evaluation. This sensitivity to the way expressions are written is due to the particularities of the floating-point arithmetic in which, for example, addition is not associative or multiplication is not invertible [1,11,12]. In addition, it is very difficult to guess which writing of a formula gives the best accuracy when evaluated with floating-point numbers. These last years, abstract interpretation techniques [3,5] have been developed to infer safe approximations of the round-off error on the result of a computation [2,6,7].

The rest of this article is organized as follows. Section 2 introduces the original controller PID1. The transformations are done in Sections 3 and 4, yielding PID2 and PID3. The experimental results are presented in Section 5 and Section 6 concludes.

We also observe that the differences between PID1 and PID2 are negligible. Con- cerning PID1 and PID3, we can remark that a small syntactic change in the code indeed yields an important difference in term of accuracy. For example, let us take the following expression r of PID1 and let us just inline the three terms p, i and d and factorize e in it. Initially, r = p + i + d and we obtain after factorizing:

In this article, our attention focused on the transformation of a standard PID Con- troller. We believe that it is possible to obtain automatically the entire transforma- tion going from PID1 to PID2 and to PID3 (see sections 3 and 4) by using systematic and general rules independent of the sample program used in this case study. These rules include the inlining of expressions, partial evaluation and loop unfolding. The results obtained when running the three codes show that these transformations impact significantly the accuracy of the results (several percents).

