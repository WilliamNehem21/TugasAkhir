catamorphisms. These transformations are specified relative to a source and a tar- get language which are defined via context-free grammars (CFGs). Catamorphisms have previously been studied and proven sufficiently expressive as a means for ex- tending a large variety of programming languages via transformation [5,6,7]. Hence, the main focus of this paper lies not so much in addressing the expressiveness and which transformations can be achieved as on showing how algebraic combination of languages and transformations results in highly modular and incremental language extension. Incremental and modular means that any previously defined languages or transformations may be composed algebraically to form new languages and transfor- mations. Safety means that the tool statically guarantees that the transformations always terminate and only map syntactically legal input terms into syntactically legal output terms; Efficiency means that any transformation is guaranteed to run in linear time (in the size of input and generated output).

The tool may be used for many different transformation purposes, such as transformation between different languages (e.g., for translating Java programs into HTML documentation in the style of JavaDoc or for prototyping lightweight domain-specific language compilers), transforming a given language (e.g., the CPS transformation), format conversion (e.g., converting BibTex to BibTeXML). How- ever, in this paper we will focus on language extension for which we have the follow- ing usage scenarios in mind: 1) Programmers may extend existing languages with their own macros; 2) Developers may embed domain-specific languages (DSLs) in host languages; 3) Compiler writers may implement only a small core and specify the rest externally; and 4) Developers or teachers may define languages incremen- tally by stacking abstractions on top of each other. We will substantiate these usage claims in Section 6.

A catamorphism (aka., banana [16]) is a generalization of the list folding higher- order function known from functional programming languages which processes a list and builds up a return value. However, instead of working on lists, it works on any inductively defined datatype. Catamorphisms have a strong category theoretical foundation [16] which we will not explore in this paper. A catamorphism associates with each constructor of the datatype a replacement evaluation function which is used in a transformation. Given an input term of the datatype, a catamorphism then performs a recursive descent on the input structure, effectively deconstruct- ing it, and applies the replacement evaluation functions in a bottom-up fashion recombining intermediate results to obtain the final output result.

A key issue in building the tool was the choice of whether to work with abstract or concrete syntax. Everything we have presented so far has been working exclusively on the abstract syntactic level. For practical usability of the tool, however, it turns out to be more convenient to work on the concrete syntax. Note that because of the addition operators of the algebra, it is important that particular choice of parsing algorithm be closed under union.

Systems based on attribute grammars (e.g., Eli, JastAdd, and Silver) may be used to indirectly express source-to-target transformations. This can be achieved through Turing Complete computation on the AST of the source language which compute terms of the target language in a downward or upward fashion (through synthesized and inherited attributes), or combinations thereof. In contrast, cata- morphisms are restricted to upward inductive recombination of target ASTs. Our transformations could easily be generalized to also construct target AST down- wards, by simply allowing catamorphisms to take target typed AST arguments (as detailed in [7], p. 17). This corresponds to a notion of anamorphisms and hylo- morphisms, but would compromise compile-time elimination of composition (since anamorphisms and catamorphisms in general cannot be fusioned into one transfor- mation, without an intermediate step).

In order to issue strong safety guarantees, in particular termination, we clearly sacrifice expressibility in that the catamorphisms are not able to perform Turing Complete transformations. However, previous work using constructive catamor- phisms for syntactic transformations (e.g., Metafront [7] and XSugar [5]) indicate that they are sufficiently expressive and useful for a wide range of applications.

