The WHILE statement of (11) is not a syntactically accepted WHILE statement in the B notation, because its loop body does not use implementation substitutions, but the semantics and rules of the WHILE statement are valid for any substitution, so we can use them to generate proof obligations. We can prove (11) using law 5.5 of [14], provided that we discharge the following proof obligations.

We have added as assertions the proof obligations that we manually generated from (5), (7), (10), and (11). They are provided in the Library specification of Appendix A in the ASSERTIONS clause. These assertions generate 14 PO; 10 are automatically proved and 4 are easily proved with the interactive prover.

significantly more POs: for our case study, it generates 28 POs, with 14 remaining to prove interactively. These turned out to be hard to prove. We added extra vari- ables to help in the proof of the WHILE loop, which brought the number of POs to 88, out of which 30 had to be proved interactively. This is significantly higher than our approach based on assertions and substitution refinement, which gener- ates 14 POs, of which only 4 had to be proved interactively. Stepwise substitution refinement allows the specifier to work directly with abstract variables and manage the size of proof obligations by properly decomposing the proof into several small steps. Moreover, by applying refinement laws, we avoid some POs that the machine refinement approach has to generate. This is somehow similar to the BART tool [9], which proposes automatic refinement laws.

