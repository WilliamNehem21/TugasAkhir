Lock-free algorithms have been developed to avoid various problems associated with using locks to control access to shared data structures. Instead of preventing interference between processes using mutual exclusion, lock-free algorithms must ensure correct behaviour in the presence of interference. While this avoids the problems with locks, the resulting algorithms are typically more intricate than lock-based algorithms, and allow more complex interactions between processes. The result is that even when the basic idea is easy to understand, the code implementing lock-free algorithms is typically very subtle, hard to understand, and hard to get right.

We consider a system consisting of a finite set of concurrent processes which access a shared queue with elements of some type T . Each process occasionally performs an operation on the queue, and otherwise performs actions which do not involve the queue. To model such a system, we abstract away from its other behaviour and just consider its queue operations.

Head , Tail , value and next are assumed to be encapsulated within a mod- ule, so they can be seen by all processes performing queue operations, but from nowhere else. Queue nodes (i.e. elements of value and next) can only be accessed via location values returned by newNode().

not commute with other actions that access these variables. We would not ex- pect Append to move, since it determines the new value of the abstract queue, and is thus the linearisation point for enqueue. And moving an Advance left over another Advance would affect whether Tail is updated, and thus alter the behaviour of the execution as seen by other processes. So let us consider more carefully how Append and Advance actions interact.

We now consider how to implement tryAppend . As indicated above, we need to test whether next(Tail ) is null , and if not (attempt to) update Tail before we (attempt to) append the new node. But if we do advance Tail , another process may perform an Append before this process gets to append its node, so we need to do the test again. This can happen any number of times, so we serve that nextl = next0(tail ) implies that next(Tail ) has not changed since it was read in the assignment to nextl . This follows from the fact that, under the assumption that heap locations are not reused, for any location l , next(l ) is only assigned twice: once (to null ) when it is allocated, and once (to a non-null value) when it is the last node in the list when a new node is ap- pended. So next(Tail ) cannot change from one value to another and back to the previous value again.

