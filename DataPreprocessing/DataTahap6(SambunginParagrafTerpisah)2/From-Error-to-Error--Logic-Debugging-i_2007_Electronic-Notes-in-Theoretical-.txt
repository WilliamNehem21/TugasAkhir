The careful reader will appreciate the importance of automated formal debug- ging algorithms for additional reasons, other than the fact that they stand to make the logic debugging process less time consuming and less frustrating. In addition to fixing implementation errors, these techniques are also of paramount importance in the process of design revision due to specification changes. A specification change is performed when an error in the high-level specification is found during the design validation process. In practice, as many of us have experienced over the years, a specification error is found late in the design cycle when the logic synthesis or even placement-and-route has been completed. In order to re-use the spent engineering effort, a designer tends to patch the old implementation and make it conform to the new specification, instead of re-synthesizing from scratch. This process known as ECO [1] calls for methodologies that enable very efficient design revisions. Both ECO and error debugging can clearly be formulated as rectification problems in the logic domain.

Structural Techniques: These include utilizing gate dominators [2], various schemes of cut-point generation algorithms and other circuit structural infor- mation to identify and visualize similarities between the spec and the imp. They also include cone intersection whereby a signal that is not in the intersection of the incorrect outputs fan-in cones cannot be solely responsible for the error and, thus, cannot be the error site. In addition, back-propagation [12] techniques at- tempt to identify the root cause of an erroneous output by tracing signal paths that are regulated by gates whose inputs are set to the controlling values.

Analytical Techniques: These [6,7] employ SAT solvers and the recent advances that have been implemented in the field. In the ideal debugging algorithm archi- tecture we should have a strategy whereby we attempt to identify which gates in the circuit must be changed in order to correct the wrong values we observe at the circuits outputs for set of counterexamples, the size of which is user defined. The intuition behind this approach is that gates which when changed can correct the output of the circuit for a large number of counterexamples, are probably the actual root cause of the design error.

