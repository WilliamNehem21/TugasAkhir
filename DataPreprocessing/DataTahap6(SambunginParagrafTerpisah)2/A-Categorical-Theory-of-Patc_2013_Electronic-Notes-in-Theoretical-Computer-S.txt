two users u1 and u2. Suppose that u1 modifies file A into B by committing a patch f , which is then imported by u2, and then u1 and u2 concurrently modify the file B into C (resp. D) by committing a patch g (resp. h). The evolution of the file is depicted on the left and the partial ordering of patches in the middle:

However, as expected, not every pair of coinitial morphisms have a pushout in the category L: this reflects the fact that two patches can be conflicting (for instance if two users modify the same line of a file). Representing and handling such conflicts in a coherent way is one of the most difficult part of implementing a vcs (as witnessed for instance by the various proposals for Darcs: mergers, conflictors, graphictors, etc. [10]). In order to be able to have a representation for all conflicting files, we investigate the free completion of the category L under all pushouts, this category being denoted P, which corresponds to adding all conflicting files to the category, in the most general way as possible. This category can easily be shown to exist for general abstract reasons, and one of the main contributions of this work is to provide an explicit description by applying the theory of presheaves. This approach paves the way towards the implementation of a vcs whose correctness is deduced from universal categorical properties.

tion 2. Then, in Section 3, we abstractly define the category P of conflicting files obtained by free finite cocompletion. Section 4 provides a concrete description of the construction in the simpler case where patches can only insert lines. We give some concrete examples in Section 5 and adapt the framework to the general case in Section 6. We conclude in Section 7.

In order to increase readability, we shall consider the particular case where L is reduced to a single element. In this unlabeled case, the objects of L can be identified with integers (the labeling function is trivial), and Proposition 2.2 can be adapted to achieve the following description of the category, see also [6].

In order to represent the state of files after applying two conflicting patches, we investigate the definition of a category P which is obtained by completing the category L under all pushouts. Since, this completion should also contain an initial object (i.e. the empty file), we are actually defining the category P as the free completion of L under finite colimits: recall that a category is finitely cocomplete (has all finite colimits) if and only if it has an initial object and is closed under which would intuitively model the pushout of the diagram (3) if it existed, indi- cating that the user has to choose between c and d for the second line. Notice the similarities with the corresponding textual notation in git on the right. The name of the category L reflects the facts that its objects are files whose lines are linearly ordered, whereas the objects of P can be thought as files whose lines are only partially ordered. More formally, the category is defined as follows.

is preserved by presheaves in P (which corresponds to adding an edge between vertices at the source and target of a non-empty path), it is enough to show that presheaves in P preserve diagrams generated by graphs Gn. This follows again by Proposition 4.3, see (6).	2

In this paper, we have detailed how we could derive from universal constructions a category which suitably models files resulting from conflicting modifications. It is finitely cocomplete, thus the merging of any modifications of the file is well-defined. We believe that the interest of our methodology lies in the fact that it adapts easily to other more complicated base categories L than the two investigated here: in future works, we should explain how to extend the model in order to cope with multiple files (which can be moved, deleted, etc.), different file types (containing text, or more structured data such as xml trees). Also, the structure of repositories (partially ordered sets of patches) is naturally modeled by event structures labeled by morphisms in P, which will be detailed in future works, as well as how to that the right adjoint is full and faithful if and only if the counit is an isomor- phism, which is a classical theorem [6, Theorem IV.3.1]. The construction can be adapted to the general case where D is not necessarily cocomplete by considering

