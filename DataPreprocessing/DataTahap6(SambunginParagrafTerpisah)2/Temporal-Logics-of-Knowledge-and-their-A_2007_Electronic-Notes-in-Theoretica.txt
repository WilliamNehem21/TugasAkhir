Temporal logics of knowledge are useful for reasoning about situations where the knowledge of an agent or component is important, and where change in this knowledge may occur over time. Here we investigate the application of temporal logics of knowledge to the specification and verification of security protocols. We show how typical assumptions relating to authentication protocols can be specified. We consider verification methods for these logics, in particular, focusing on proofs using clausal resolution. Finally we present experiences from using a resolution based theorem prover applied to security protocols specified in temporal logics of knowledge.

As more and more information is transferred electronically, and as the sensitivity of this data increases, there is an increasing need to provide mechanisms for ensur- ing the security of information transfer between computers. In addition, with the advent of grid and ubiquitous computing, security and trust are key issues that are integral to the success of these technologies. This need for security has led to the de- velopment of cryptographic protocols, in which authentication of the individuals and messages concerned (typically through encryption) occurs. Given the importance of the area, it is vital that techniques be used which provide automatic analysis of such protocols prior to deployment.

The application of logical tools to the analysis of security protocols was pio- neered by Burrows, Abadi and Needham (BAN logics) [3]. These are purpose built belief logics especially designed for dealing with authentication issues. Whilst these logics were influential, they suffered from a number of drawbacks such as a lack of semantics, the inability to express time explicitly, the need to capture additional features, etc. This led to the development of extensions, or logics of a similar style aimed at a larger class of systems such as [21,50]. In this paper we describe how to use a combination of standard, well-known modal and temporal logics, rather than developing special purpose logics, to specify security protocols.

t. Modal logics have been used to capture notions such as knowledge, belief, desire, intention (see for example [15,44]) etc. In particular, the modal logic S5 has been used to reason about knowledge [15]. As we are interested in knowledge, we use the

The structure of this paper is as follows. In Section 2 we describe a particular authentication protocol, namely the Needham-Schroeder protocol. In Section 3 we provide a syntax and semantics for the temporal logic of knowledge used in this paper, KL(n), while in Section 4, we discuss how protocols such as the Needham- Schroeder protocol can be specified using this logic. In Section 5 we give an overview to a resolution based proof method for temporal logics of knowledge. In Section 6 we provide results having carried out proofs by hand and with an automatic theorem prover for a related logic. In Section 7 we mention related work and in Section 8 we provide concluding remarks.

In this section, we will give an overview on how to use KL(n) to specify the Needham- Schroeder protocol. In order to do this we use the following syntactic conventions. Let M , M1 and M2 be variables over messages, W be a variable over keys, N be a variable over nonces, V be a variable over values for keys and nonces, and X, Y,... be variables over agents. Moreover, for every agent, X, we assume there are keys pub key(X) and priv key(X), while in this protocol A and B are constants representing two specific agents. We identify the following predicates:

Using this approach, we have translated the specification of the NSP and the properties we wish to prove into FOTL and have run TeMP on the output. We have been able to prove the above properties provided we utilise the axiomatic translation [46] which is amenable to automatic theorem proving. In the axiomatic translation, the transitivity axiom is dealt with in a non-standard way to avoid termination problems which may occur with the standard translation. Full details of this approach, timings, the number of clauses generated, etc, can be found in [16].

Whilst BAN was very influential it suffered from a number of drawbacks. Firstly BAN had no formal semantics. Although a modal logic semantics was given to a BAN-like logic in [1], this is complex. Also, when using BAN logics the protocol idealisation step, i.e. transforming the informal description of the protocol to one using BAN primitives, is far from easy. Further, BAN originally had no explicit

Whilst some of the verification tools mentioned above are general purpose tools that have been used for the formal verification of security protocols, there are other tools developed specifically for the analysis of security protocols. It is worth men- tioning the NRL Protocol Analyzer [35] (where NRL stands for Naval Research Laboratory where this tool was developed). This analyzer has been successful in finding unpublished vulnerabilities.

Regarding verification for other types of protocol, standard epistemic logics [15,37] have been applied successfully to reason about communication protocols, for example the derivation of the alternating bit protocol in [22] or, more recently, the analysis of TCP [48]). In such an analysis, an epistemic language is useful in order to express that some receiver indeed knows some message at a specific state of the protocol, or that a sender knows that the receiver knows the message. In this setting, contrary to the security framework of BAN, the implicit assumption is always that the network is not hostile.

