The rest of the paper is organized as follows. In Section 2 we discuss the concept and concept map language constructs. In Section 3 we describe the concept map modularization problem to be addressed in the paper. Section 4 discusses our solution for the problem, and the preprocessor implementing our approach.  In

The logging part of this concept map contains several redundant lines of code. On one hand this leads to long function bodies in the concept map. On the other hand the actual original function calls (c.f() and c.g()) will be lost in the long code. It may be useful to trigger a separate helper function call at these points, however, there is no well situated place to put these functions. It is possible to put the helper functions into the global namespace, but if they are related only to the concept map this solution will be confusing and makes our code harder to understand.

The only compiler currently implementing concepts for C++ is Concept- GCC [13]. We are not intending to create a new concept compiler, rather to write a preprocessor transforming our code into valid ConceptC++ code and still keeping our new structural advantages. The idea is to put the private and protected parts of the concept map to a unique namespace and put the namespace scope before the function calls in the public part. We have implemented a precompiler- like program to carry out this transformation. After the transformation we get the following code:

As seen in example 9 the concept map itself can be template. In this case the template argument may appear inside the helper functions. Transforming this kind of concept maps is not so simple as it was in the previous example. When the helper function definition is moved from the body of the concept map to the unique namespace, the template arguments of the concept map became unknown types. Thus it is necessary to transform these helper functions to template functions with the same template arguments as the concept map. It is necessary to instantiate these helper functions explicitly in the public part of the concept map, because the template arguments may not be part of the function parameter list. In the following example we create a new concept map (which contains helper functions) to concept Stack defined in example 9.

the concept map is not a template the helper function can be defined in a separate file. It is necessary to put the outside definition into the same namespace as the concept map. In the following example we implement the logger functions outside the concept map.

