As software systems become increasingly massive, the advantages of automated transformation tools are clearly evident. These tools allow the machine to both reason about and manipulate high-level source code. They enable off-loading of mundane and laborious programming tasks from human developer to machine, thereby reducing cost and development timeframes.

Although many transformation tools can retain commenting [4, 10], they often cannot be replaced in their original position (e.g. they may appear on different lines). Comments that have not been accurately replaced can, in certain circumstances (e.g. protocol field identification), be hazardous to any later maintenance activities.

A key challenge in forming the LL-AST is ensuring that the representation is semantically correct. The use of conditional directives (i.e. #ifdef, #if, #elif, #else, #endif) is particularly pertinent to this issue. For example, consider the following fragment of code where conditional directives are used to form parallel branches:

Given a transformation objective of ensuring that values returned from function f() are assigned to variables of type T1, whilst values returned from function g() are of type T2, one cannot correctly transform the above example without associating the appropriate declaration of variable x to each of the assignments. For this reason, maintaining parallel branches in the LL-AST significantly increases the complexity of the transformation logic. We there- fore argue that conditionals should not be integrated into the AST grammar directly.

Y. Furthermore, the symbol X can be used in an arbitrary position and yet still be valid. Effectively, this means that any input symbol can be replaced by any other symbol, resulting in a language that cannot be captured as a context-free grammar. Consider the following excerpt which is perfectly valid to the preprocessor, but does not conform to the C++ grammar (due to the statement X(10)Z), and therefore cannot be parsed into an AST.

rect AST. For example, macros may be used in a form that can be parsed by the C/C++ grammar and expressed as part of the AST (macros used for pre- defined constants or as function calls fit in this category). However, incorpo- ration of macro usage into the grammar will likely result in mis-representation in the AST. For example in the previous excerpt, X(10) is not a function call, but rather a for loop.

Although Proteus expands macros, it still permits transformations on their uses. Proteus uses annotations on the LL-AST to indicate that a piece of program text is the result of an expansion (see Section 2.2.1). If a given transformation alters an instance of a macro body beyond simple parameter alteration, then the macro will not be replaced in the reconstruction process (one could of course define a new macro for the modified version). The meta- data tag information also includes the original parameters. This helps in cases where defined parameters are not used in the macro body. In addition, a special form of meta-data tag is used for macros that are defined as null; these are left in comment form and not converted to annotations.

Include directives present an additional problem similar to that of macro usage in that they can also be viewed as a form of symbolic replacement. For example, the following excerpt is perfectly valid C code. Although this form of program is valid, in our experience it is very rarely seen. In the 6 million lines of code that we tested Proteus on, this construct did not occur. As a result, we made the decision not to address this phenomena.

With respect to the C and C++ grammars, Proteus uses its own imple- mentations based on the language standards [1] [2]. The grammars are written in SDF (Syntax Definition Formalism) and used as input to the SGLR parser. Modifications have been made to the SDF tools so that signatures, that allow one to manipulate a tree of the given grammar, can be generated with the literal and layout terms included.

As discussed previously in section 2.1.3, comment-based meta-data tags are used to record macro expansions on the code. Tags in the LL-AST are parsed as layout and hence embedded in layout nodes. This form is particularly susceptible to disruption during the transformation process for instance when layout is being intelligently manipulated by the system (refer to section 3.3). Loss of integrity in SME,EME tag pairing can lead to problems in later stages of macro replacement.

By applying annotations across all of the expanded macro text the anno- tations become more resilient to disruption. For example, if a given transfor- mation changes only part of an expanded macro tree, lets say a parameter, then the macro can be still be replaced (see Section 4.2).

The LL-AST is the basic subject of transformation; tools that are built using Proteus perform transformations directly upon them. The complexity of the LL-AST is hidden from the developer by a transformation language that we developed called YATL (Yet Another Transformation Language), which pro- vides abstractions known as super-types. Unfortunately extensive discussion of YATL is outside the scope of this paper.

The following example illustrates the use of the FunctionCall super-type. The objective is to replace calls to function boo with calls to a function foo. The replacement of the identifier is made in-place, leaving the surrounding terms, including the parameters and layout unchanged.

The current implementation supports the use of free-text for statement and expression construction (the intention is to also extend its use to allow construction of trees for matching). To assist in formatting the text, YATL allows the programmer to mark the left hand edge with a colon. This defines the left hand margin for relative indentation.

Free-text LL-ASTs are generated by the system building a dummy pro- gram from the specified text. The dummy program is parsed externally with the SGLR parser, either by the YATL compiler at compile time (when the fragment is static) or by the transformation tool at run-time (when YATL variables are used in the fragment). Compiling the free-text statically leads to better run-time performance. The LL-AST sub-tree corresponding to the fragment is extracted from the larger LL-AST.

Proteus tries to leave existing layout whenever possible. Otherwise, layout consistent with surrounding context is used. This is significantly different from traditional pretty printing where existing layout is completely ignored. In comparison, Proteus embeds the original layout information in the tree and uses it as a reference point for laying out newly inserted code.

However, the normal Proteus behaviour is to only delete layout that is directly associated with the statement that is being deleted, i.e. those on the same line. Therefore the deletion of the data field will only lead to the removal of layout on line 5. Hence, the /* optional fields */ comment will be left in tact, only the /* data */ comment will be removed; of course Proteus provides means to retain this comment should it be necessary.

In certain situations it is useful to transform preprocessor directives that have been embedded in layout (refer to section 2.1.1). A prime example is the inser- tion of new #include statements into a program - this is particularly useful for software migration applications. One could pattern match on the embedded strings and manipulate them as necessary. However, this can quickly become very complicated.

the second-level tree is reconstructed. Second-level parsing is performed at tranformation time. As transformation on preprocessor directives is not par- ticularly common, it is more beneficial to perform it on demand rather than on all pre-processing directives at LL-AST construction time.

The next step is to replace preprocessor macros and unmask conditional di- rectives in the re-constructed program text. We have developed the recond tool for this purpose. Macro replacement is performed through the use of re- verse regular expression pattern matching on meta-data tag pairs. The regular expressions for the reverse match are constructed from the macro definitions previously extracted by the decond tool. As mentioned earlier, the current macro expansion meta-data does not necessarily map to a single instance of a macro definition. Instead, all definitions of a macro are tried until one reverse-matches. To allow macro replacement when macro parameters have changed, the regular expression includes wildcard expressions in parameter use positions. Unused parameters are replaced with the parameter identifier itself.

If macro replacement fails, the expanded text is left in place without the tags and an optional comment is inserted to indicate that replacement was not possible. Partial replacements can also occur when some nested macros can be replaced but one or more outer macros cannot. Finally, the recond tool is also responsible for removing any masks introduced during the slicing process (refer to section 2.1.1) and replacing line continuation characters.

The last stage of the re-construction process is to use the Proteus merge tool to combine transformed slices into a single unified version. Differences in all slices of the same source file were included in the merged version and surrounded with appropriate pre-processing conditionals. If the merged file is branch-sliced again, we will obtain transformed code for that specific slice. The merge process only introduces new changes where code has indeed been modified. Otherwise, the original program remains intact.

Upon investigating the file differences, we found out most (about 90%) of the changes were due to spacing changes in function like macro invocations (e.g. M(a, b) being reconstructed to M(a,b)). Other differences between the source and transformed files result from the use of macros that concatenate parameters (A ## B) in their definition. Doing so results in the inability to define partitioning of the expanded form, and hence reconstructing the original form is not possible. We are cuurently working on an enhancements to Proteus to address these problems.

The basic idea of using source text markup to retain important aspects of transformed program code was also proposed by Dean et al. in their sys- tem for COBOL language transformation [10]. Although the basic principles can be transferred to other programming languages, their solution does not readily address the complexities of C and C++. In comparison to our own so- lution, their solution generates multiple parallel versions (known as factors) of the source text with appropriate markup annotations. The individual factors (including one that contains commentary text) are then combined in a post- transformation stage. This post-transformation phase relies on performing matches across the original and transformed versions (essentially formulat- ing a mapping), a process which is inherently error prone in more complex multi-line transformations.

Work carried out by Cox et al. [8] has also looked at using a markup language to record modifications on original code caused by preprocessing. Their solution uses XML as the markup language. The focus of their solution is on cross-referencing program elements from parser-based analyzers back to the original source code.

Another body of work relevant to that presented in this paper, is the work done by Baxter et al. of Semantic Designs. Although their solution, DMS [4], is clearly related to our own, their design focus has been different. For example, their solution is aimed at supporting multiple target programming languages as well as cross-language transformations. They do not place any importance on high-fidelity transformation capabilites and make little com- ment on how they deal with code versioning system problems that typically arise from pretty printing. Problems relating to preprocessing have not yet

In this paper we have discussed how the Proteus C/C++ transformation system is able to perform high-fidelity transformation. We have shown how careful construction of a specialised form of AST, the LL-AST, allows use- ful lexical detail to co-exist with higher-level abstractions. Furthermore, we have illustrated how Proteus is able to attain semantically correct programs through recorded macro expansion coupled with slicing and merging of parallel conditional branches.

The solution presented in this paper has already been successfully applied to over 6 million lines of commericial source code in a version managed envi- ronment. We believe that addressing the problems of practicality is absolutely vital to the progression of automated transformation technology. Now we can look to the exciting opportunities that this unveiling field of software engi- neering has to offer.

