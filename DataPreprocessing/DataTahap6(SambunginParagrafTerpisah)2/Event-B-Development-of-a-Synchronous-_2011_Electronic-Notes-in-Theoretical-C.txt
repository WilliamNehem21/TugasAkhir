This paper presents the modelisation of the semantics of a subset of the architecture description language AADL using Event-B. Elements of the semantics of the considered subset are gradually introduced in order to make possible the traceability of the formal text against the informal specification. Starting from a very general computational model, we incrementally add elements of AADL by constraining or instantiating it and finally introduce a family of schedulers. The Rodin platform is used to prove the correctness of this development.

The goal of the proposed Event-B development is to establish that the scheduler obtained at the last refinement level satisfies the properties introduced as invari- ants in the successive refinements. To reformulate it differently, we prove that the scheduler is compatible with the semantics of the subset of AADL we have consid- ered. A complementary goal of this development is to introduce elements of AADL semantics incrementally, each element constraining or instantiating the previously defined computational model.

1. Context machines (flow *) describe the static structure of the model and are refined to introduce details such as immediate and delayed connections. Behavioral machines (fexec *) introduce variables defining the contents of node ports and how they evolve when an event is managed. Refinements are introduced to take into account refined static information and implementation details.

A system is a set of nodes, each having several input ports and one output port. Connections between input ports and the unique output of a node are represented by a function from input ports to nodes, which implies that an input port receives data from only one node, as for an AADL input data port. To each node is attached a function (comp) that computes a value given the value of its input ports. The function comp being partial and of higher order, two axioms are rather complex and need some explanations: axm5 says that the function comp only depends on the value of the input ports of the node on which it is applied; axm6 says that, given a node n, comp(n) can be applied to a valuation of ports if it associates a value to all the ports of n.

The dynamic state of the system is described by data contained in the input ports (variable entries) and data previously computed by nodes (variable value). Op- erations describe how data evolves. A node of which some ports have no value must wait before performing its computation. Initially, input ports have no value.

The dispatch event is introduced as a renaming of initCNodes. A set of nodes is dispatched synchronously. It is delayed until ports connected through delayed links have been freshened. At dispatch, ports connected via immediate links are emptied while the value of ports connected via delayed links are read from the associated buffer.

valued. Events are redefined to test the state variable of other threads and update the state of the threads they manage. For example, the following dispatch event defines the synchronous dispatch of the set of nodes nds: if they are all idle and source nodes of delayed connections are not in the intermediate state terminated, they read their incoming data and go to the waiting state.

The scheduler introduced in the last refinement step is defined axiomatically. In fact these axioms are satisfied by several actual scheduling algorithms. Thus, the study could be pursued further by considering specific scheduling algorithms. Other refinement steps could consider optimized memory management avoiding useless memory transfers through the use of shared variables, then add time to model the periodicity of tasks. The last refinement level makes a non deterministic choice of the set of nodes to be synchronously dispatched. This set should be determined by considering a global date and the periods of the AADL threads. This instantiation is not trivial because the considered nodes should be idle, which means their previous activation has been completed in time. So, a necessary condition to establish the refinement is that the system can be scheduled. This hypothesis can be satisfied by considering the synchronous hypothesis: computations take zero time.

This paper describes a refinement-based approach to describe the semantics of a real-time execution model, illustrated by a subset of AADL. Contrary to existing translation-based semantics, it allows the incremental introduction of semantics in- formation. Incremental invariant preserving proofs guarantee the correctness of the abstract views defined by the first levels of the development and at last the compati- bility of the axiomatized family of schedulers with AADL execution model. Thanks to the Rodin platform, all the generated proof obligations have been discharged, either automatically or through user control. This work should be refined by in- troducing timing information, and then by the encoding of either the synchronous model or a real-time scheduling algorithms under a schedulability hypothesis. An- other perspective concerns the study of data structures which make proofs easier to discharge either automatically or manually.

