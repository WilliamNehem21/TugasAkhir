Several tools have been developed independently to assist in the process of writing parallel programs. However, some tools are unknown by the scientific community or are not considered, given their difficulty of use. Existing parallel programming environments have been developed with a particular purpose in mind. Therefore, we have identified a lack of tools capable of integrating diverse parallel approaches

To tackle the integration problem, we follow a virtualization approach via con- tainers, a.k.a. operating-system-level-virtualization. Containers allow the deploy- ment of self-contained computational environments. In this work, three containers were deployed. One deploys a parallel programming skeleton tool, the second one a parallelizing compiler and the last one deploys an on-line code editor to be supported for the aforementioned tools.

The outline of this paper is as follows: Section 2 is dedicated to introducing concepts relevant to this paper, such as containers, microservices and cellular au- tomata. Section 3 describes similar studies to the work presented in this paper. Section 4 presents the proposed service-oriented architecture for developing parallel programs. Section 5 presents how the Game of Life is modeled with the proposed framework. Section 6, presents the microservice approach evaluation. Lastly, Sec- tion 7 describes conclusions and future work.

ParCel-6 is a computing library implemented in C for multiprocessor computer, clusters and grids. It can be linked with C and C++ programs. The software is also able to perform the automatic parallelization of the source code for multiprocessor machines [20, p. 364].

analysis and parallelization with compiler directives (OpenMP and OpenACC) in a monolithic fashion. Unlike Parallware Trainer, we supply these functionalities as microservices. Each microservice represents an independent developed functional- ity attached to a central service. In particular, attached microservices support the parallel programming process in CA models.

We provide the user with a stencil template (a CA model in C99 programming language) by means of the Parallel Templates (PT) service. This template is then completed by the user through the Code Editor (CE) service and parallelized with the Pragcc (PC) service. The whole application or proposed prototype is then called Coder. Services details are described below as well as the operation of the complete application.

The experiment considers different sizes for the cellular space: 2502, 5002, 7502, 10002, 12502, 15002. The above values serve to observe the quality of the optimiza- tions suggested by the tool as the size of the cellular space increases. For each grid size, 100 generations of the CA are simulated. In order to reduce the number of outliers (generations which took above the average time to calculate), the process- ing time for each size of the cellular space is calculated 10 times. The total time to calculate 100 generations is measured in seconds. The hardware and software used in the experiment are described below.

