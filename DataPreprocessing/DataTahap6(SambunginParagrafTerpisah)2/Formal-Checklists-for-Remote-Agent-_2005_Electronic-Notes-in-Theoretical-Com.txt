For several years now, NASA has been flying robotic deep space missions that rely on software to perform mission functions. Deep space missions involve a tight integration of physical and software systems. These systems are complex and expensive to design, build, and deploy. The Mission Data System (MDS) framework [1] has been developed to address this problem. MDS provides an architecture, tools, and libraries of reusable components to be used in the de- sign and implementation of space mission systems, principally for robotic deep

The remainder of this paper is organized as follows. Section 2 is a very brief review of relevant aspects of Maude syntax and tools. Section 3 discuss the notion of a goal and model based system design, gives an overview of the MDS framework and describes our specification of the MDS framework. Section 4 describes our specification of the SCRover adaptation. Section 5 presents initial checklist ideas and shows their application to the SCRover specification. Section 6 concludes and discusses future work. The Maude code and a more detailed technical report can be found at http://www.csl.sri.com/users/denker/remoteAgents/.

state-based approach to system design and (2) a goal-oriented approach to operation. The system state is the basis on which decisions about mission op- erations are based. System state includes device operating and failure modes, device health, resource levels, and information about dynamics such as vehi- cle position and attitude, angles, and wheel rotation. Mission goals describe the desired outcome of a mission operation so that the overall mission will be successfully completed. Mathematically, a goal is a prioritized constraint on the value of a state variable during a time interval.

State values are computed by estimators, communicated in messages, tested for constraint satisfaction by controllers, and used by goal-elaborators. The module STATE-VALUE declares a sort for state values, a subsort for unknown state values, and a constant uk to represent the fact that the value of a state vari- able may be unknown. Here and elsewhere the sort and class hierarchy of the Maude model mirrors the class hierarchy of the MDS framework, to facilitate relating the model to the implementation.

be achieved or not. In case of failure, it will deliver a reason. The module CONSTRAINT declares a sort Constraint, for constraints, together with a constant noCstr of sort Constraint that stands for the constraint that is always satisfied, analogous to the boolean value true. The module REASON declares a sort Reason, for reasons. The following module specifies the messages for the interface between state variables and the environment as follows.

Note that the state variable rules use a class identifier variable svcid of sort SVCid rather than a specific constant of this sort. This is so that the rule will apply to specific state variables with class identifier whose sort is a subsort of SVCid. This is a standard technique for modeling subclassing in Maude.

the current state value satisfies the constraint using an operation satisfy. If the current state value already satisfies the constraint, it replies to the state variable with a successful endCstr message. If the current state does not satisfy the constraint, the controller determines the course of action by calling its coa function, issues the first command and stores the rest of the command list.

If the controller is in the process of satisfying a constraint and it receives a message with a new value, newVal(v), it first determines if the constraint is satisfied by the new value. If so, an endCstr message is sent to the state variable indicating success. If the constraint is not satisfied and the controller has no more commands to issue, an endCstr message is sent to the state-variable with the reason COANoSuccess indicating that the course of action determined by the controller was not successful. In both of the above cases the controller sets its waitAfter attribute to noMsg to allow new constraints to be processed. Otherwise the controller issues the next command in its stored command list and remains in the processing constraint state.

The rover can receive a drive command from its actuator. If the rover is not heading in either north, east, south, or west direction, it will not be able to move along the grid. It will also be unable to move if there is an obstacle occupying the target grid position. In this case, the rover will simply report to the sensor its current position and heading. The rover can also receive a turn command from its actuator. In this case it executes the command and then reports its current position and heading to its sensor.

In the rover adaptation, the controller-actuator, device-actuator, device- sensor, and estimator-sensor interfaces must be further refined to specify the data to be communicated between components. Two commands drive and turn are added to the controller-actuator interface. These are also added to the actuator-device interface as message bodies, using overloading. A constructor

As discussed above, an important part of designing an MDS remote agent system is identifying the state variables and determining how they are to be measured and controlled. Goals of the rover system include moving to a certain location on the grid and facing in a given direction. Thus, we define a class for position and heading state variables in the module POSANDHEAD-STATE-VARIABLE.

First the x-position of the final location is achieved. This is done by determining in which direction (east or west) along the x-axis the rover has to drive and whether the rover needs to turn to reach its initial position. Then the number of steps is computed that the rover needs to proceed along the x-axis. An appropriate list of turn and drive commands is generated.

The specifications for the position and heading actuator, sensor and esti- mator classes are very simple. Thus, the actuator takes a command from the controller and transforms it into the correct format for execution in the device. Because we have chosen the same names for commands and actuator-rover messages this is just a sort conversion. The operations converting sensor values into measurements (executeCmd) and measurements into values (verifyState) are also defined to be sort conversions, simply returning their arguments viewed as elements of a different sort.

To partially automate checking outcomes we defined parameterized success and failure patterns and used the model-checker to look for the expected pattern. This could also be done using search. The advantage to model- checking in the current setting is that when the question is formulated so that a positive result from the model-checker is a counter-example, a rule trace can be extracted as a simple trace of the execution.

We have presented a simplified version of the MDS architecture to test our understanding of the structure and constraints. In order to make further elaboration and adaptation easier, some effort was made to take a system- atic specification approach to the control structures for controller, actuator, sensor, estimator, and state variable interactions with each other and with the framework scheduler. We also studied how mission specific devices, their models, controllers and estimators can be modeled, and specified a simple ver- sion of the SCRover. Simple execution unearthed several small problems in the control flow. In multiple goal scenarios, search of the state space yielded unexpected outcomes. Examination of the search graph provided the needed information to determine the problems. In the process of developing these first models, we have also discovered gaps in the informal documentation (filled by discussion with the experts).

