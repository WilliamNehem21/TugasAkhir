defects; and (c) explain these causes in natural language helping modelers to correct found defects. We represent our approach with a feature model taken from literature. A preliminary empirical evaluation of our approach over 31 FMs shows that our proposal is effective, accurate and scalable to 150 features.

A Software Product Line (SPL) is a family of related software systems with common and variable functions whose first objective is reusability [5]. Extensive research and industrial experience have widely proven the significant benefits of Software Product Line Engineering (SPLE) practices. Among them are: reduced time to market, increased asset reuse and increased software quality [6]. SPLE usually uses Feature Models (FMs) to represent the correct combination of features that software products can have. In particular, FMs describe the features and their

However, creating feature models that correctly represent the domain it is in- tended to represent is not trivial [3]. In fact, when a FM is constructed, defects may be unintentionally introduced. Dead and false optional features are two types of defects directly related to the semantics of FMs. A feature is dead if it cannot appear in any product of the product line [13]. A feature is false optional if it is declared as optional, but it appears in all products of the product line [42]. Due to the ability of FMs to derive a potentially large number of products, any defect in a FM will inevitably affect many products of the product line [19].

Numerous researches focus on identifying dead and false optional features in FMs [13,42,8,28,40,34]. Others approaches focus on identifying dead and false optional features, and identifying the causes that produce these defects [38,35]. Some others works propose even using ontologies to represent FMs [9,30,14] and others propose using ontologies for identifying defects in FMs [1,23,41]. However, few researchers have addressed the problem of identifying the causes that produce these defects and explain them in a human understandable language. This means that once defects are found it is necessary to manually inspect models to look for why the defects occurred. Once engineers know why defects occurred, they can try to fix them. Our observation is that this is a cumbersome task. Indeed, looking for the causes of defects is about as complicated as looking for defects themselves even when the defect is already known. Therefore, we believe that it is of paramount importance to solve this key problem if we really want FMs verification methods to be effective in an industry context.

Our general goal is to find a generic technique that will point out the cause of various kinds of defects on product line models specified with different notations. In this paper, we propose a first step to achieve this goal. In particular, we propose an ontological rule-based approach to analyze dead and false optional features in FMs; that is: identify features of a FM that are dead or false optional, identify the causes of these defects, and explain each cause in natural language. We hope this information helps product line engineers to avoid same mistakes in future work, and to understand why dead and false optional features occur [35,33].

We construct the Feature Model Ontology and we formalize, using first-order logic, six rules for identifying dead features and three rules for identifying false optional features. Each rule defines a case in which a feature is dead or false optional. In that way, we know the causes that origin each defect, and we build the corresponding explanation. We defined these rules based on our experience

The remainder of the paper is structured as follows. Section 2 gives a brief overview of the necessary concepts for understanding the framework presented in Section 3. Section 4 presents the implementation details. Section 5 presents the evaluation of the precision and scalability of our approach. Section 6 presents related research. Finally, Section 7 presents the conclusions and suggests future research directions.

In order to illustrate our approach, we intentionally introduced eight dead features (cf., AF2, AF7, AF11, AF12, AF13, AF14, AF15, and Connected) and three false optional features (cf., AF1, AF9, AF10) into the original model. We used 15 artificial features and 25 dependencies to produce these defects. All fea- tures and dependencies have a name for easier identification. We identified artificial features with a capital AF, and artificial dependencies with a capital AD. In addi- tion, we identified original features of the model with their names, and we used a capital OD to build the name of original dependencies.

We present our approach through two Sub-sections. The first one presents how we construct the Feature Model Ontology, which is an ontology that represents concepts of a meta-model of FMs. The second one presents the Defect analyzer framework : our approach that uses the Feature Model Ontology for identifying dead and false optional features in FMs, identifying its causes and explaining in natural language why these defects occur.

The Feature Model Ontology represents the FMs concepts in the form of an ontology. This representation allows us to exploit the semantic relationships among the concepts involved in FMs. For instance, we can ask for features that have the same father, or features that are related by mandatory and exclude dependencies at the same time.

Since we use ontology classes and properties to represent the FM meta-model, if an individual violates the conditions defined for the classes or properties during the population process, the ontology becomes inconsistent (this issue is beyond the scope of this paper. However, Mazo et al. [19] and Noorian et al. [23] provide further details about this topic).

The use of ontologies to represent FMs is not new; in fact, there are several works that use ontologies to represent FMs, because ontologies increase the expressiveness level provided by FMs [9,30]. Other authors are motivated by the fact that the ontological representation of FMs makes possible to verify consistency between the feature model and its meta-model [23]. Even others are motivated by the fact that the ontological representation allows inferring interesting information regarding the FMs; for instance, obtain sibling features [1].

First, the Transformer receives as input the Feature Model Ontology explained in Sub-section 3.1, and the FM for which we want to identify dead and false op- tional features, their causes, and their explanations. With this information, the Transformer generates as output a new Feature Model Ontology with the elements of the FM to analyze (see Sub-section 3.2.1).

All features of the FM are individuals by inheritance of the Feature class. More- over, the FM root is an individual of the RootFeature ontology class, and all other features are individuals of the NotRootFeature ontology class. For instance, in our running example, GPL is an individual of the RootFeature ontology class, and Search is an individual of the NoRootFeature ontology class.

Transformer fills the properties of each individual that it created using informa- tion obtained from the input. For instance, according to our Feature Model Ontol- ogy, individuals of ontology class Dependency (e.g., R3 in our running example) have the properties hasDependencySource (GPL) and hasDependencyDestination (Search).

The use of rules to detect dead and false optional features is not new. For in- stance, Van der Massen and Lichter [40] define six rules to identify defects in FODA models (using a feature notation with group cardinalities, as we do, these six rules become two because boolean dependencies can be represented using group cardi- nalities). However, the approach presented in this paper considers these two rules and seven more that we identified through our academic and industrial experience working with FMs [29,2,10,22,18].

This part uses a library available in the SPLOT website, for reading FMs in the Simple XML Feature Model (SXFM) format. Then, this component uses Jena 4 to manipulate the ontology inside Java for creating individuals in the Feature Model Ontology with the information of the analyzed FM. When the Transformer ends of populating the ontology, it creates a new OWL 5 file with the Feature Model Ontology populated with information of the analyzed FM. The OWL file of our Feature Model Ontology populated with the running example is available online 6 .

Once the false optional or dead features are identified by the rules presented in the Sub-section 4.2, the Explainer executes a new SQWRL query to get dependencies and other features related to the defect at hand, and fill the explanation template of the corresponding rule. For instance, the following SQWRL obtains the dependency and the features related to each false optional feature obtained from rule FO1.

We manually tested our approach in three stages. First, we verified that it did not generate false positives. Second, we verified that the proposed solution identified the 100% of dead and false optional features considered in our collection of rules. Finally, if the FMs had dead or false optional features, we verified that the cause agreed to the case that produce the defect, and that the filled spaces in the explanation templates corresponded to real situation for each model.

In the first stage, we manually compared the dead and false optional features with the results obtained from FaMa [37] and VariaMos [21]. We found that our proposal identified the 100% of the dead and false optional features that satisfied our rules, with 0% false positive. For the second and third stage, we made a man- ual inspection of correctness over the running example and two models (randomly selected) of each cluster.

Trinidad et al. [35] present an automated method for identifying and explain- ing defects, such as dead features or false optional features in FMs. The authors transform FMs into a diagnostic problem and then into a constraint satisfaction problem. They automated their approach in FaMa [37], an Eclipse Plug-in for au- tomatic analysis of FMs. Their proposal identifies dead features and false optional features, and the set of dependencies that entail in a FM the fewest changes to fix these defects. However, their approach works like a black box, hard-coded in FaMa, where user cannot create new rules to interrogate the FM. Besides, explanations generated by FaMa are not in natural language; but they are rather a list of de- pendencies that modeler should modify to remove the defect. In contrast to our approach, FaMa gives the dependencies participating in the defect, but it does not explain the defect itself.

It is worth noting that FaMa finds and explains other dead and false optional features that our approach does not identify. It is explained by the fact that we have not implemented all the cases producing dead or false optional features. However, our rule-based approach is extensible, it allows us to explain in natural language why defects occur, and it allows us to analyze dead and false optional features when FMs are void [13], three aspects that FaMa does not support.

In this paper, we proposed an ontological rule-based approach to analyze dead and false optional features. Our defect analysis is identifying dead and false optional features in FMs, identifying certain causes of these defects, and explaining these causes in natural language. To operationalize our proposal, we propose an OWL ontology for representing FM and we propose nine rules representing certain causes that produce dead or false optional features and have associate an explanation in natural language. These rules were formalized in first-order logic and implemented in SQWRL and Java. We validated our proposal with a well-known case study [16] and with 30 random features models with until 150 features.

The approach developed in this paper represents an innovative alternative to the ones found in literature [13,42,8,28,40,34,38,35,1,23,41], because we not only identify dead and false optional features, but we also identify their causes and build explanations in a human compressible language. We believe that this information could avoid modelers take the same mistakes in others FMs. However, there are other cases outside of the scope of this proposal; e.g., identifying dead features when they are produced for mandatory features whose predecessor is an optional feature. Indeed, it is necessary to continue extending our solution to identify, by means of other rules, dead and false optional features.

