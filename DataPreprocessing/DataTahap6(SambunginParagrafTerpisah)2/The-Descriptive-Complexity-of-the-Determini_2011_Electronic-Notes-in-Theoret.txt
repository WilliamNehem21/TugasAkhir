In Descriptive Complexity, we investigate the use of logics to characterize computational complexity classes. Since 1974, when Fagin proved that the class NP is captured by existential second-order logic, considered the first result in this area, other relations between logics and complexity classes have been established. Well-known results usually involve first-order logic and its extensions, and complexity classes in polynomial time or space. Some examples are that the first-order logic extended by the least fixed-point operator captures the class P and the second-order logic extended by the transitive closure operator captures

In Computational Complexity, the measure of the efficiency of an algorithm is usu- ally based on the amount of time and space consumed in its execution. The investi- gation about the efficiency of an algorithm allows us to define a hierarchy of classes of problems. When this hierarchy is based on time and space, we identify important classes as the class P that contains all problems which have a polynomial determin- istic Turing machine that solves them, and the class NP that contains all problems which have a polynomial nondeterministic Turing machine that solves them.

By the fact that FO=LH, we can notice that the expressive power of FO is too weak. There are several ways to extend FO in order to get stronger logics. For instance, we can increase the order of the variables of the logic obtaining higher- order logics, we can add operators not expressible in FO as the transitive closure and the fixed-point ones, and we can allow formulas of infinite size obtaining infinitary logics.

In this paper, we are interested in investigating the combined use of the least fixed-point operator with higher-order logics. In section 2, we will present the definition of higher-order logics and some expressiveness results already established in the literature. In section 3, we will introduce the least fixed-point operator and we will show how it increases the expressive power of FO. In section 4, we will prove our main result: the characterization of the complexity classes captured by each higher-order logic extended with the least fixed-point operator. Some corollaries about the expressive power of these logics are also presented. We will end with the Conclusion section. Throughout the text, the basics of Computational Complexity are from [12].

In [9] and [10] a characterization of HO is presented. Some criticisms about this characterization are presented in [3]. We follow the late characterization. Be- fore presenting this result, we need the definition of the function exp and of the nondeterministic exponential time hierarchy, NEXPH.

Another possibility of extending FO and increasing its expressive power is with an operator. In this section, we will add the least fixed-point operator to FO which allows one to define new relations by induction. This is the Least Fixed-Point logic, FO(LFP). We will close this section by also analysing its expressive power.

There are other fixed-points as the inflationary (IFP) and partial (PFP) ones. In [13], the authors added inflationary and partial fixed-points to higher-order logics and they showed that, for every order, it is sufficient to increase the order of the given logic by one to capture inflationary fixed-points, and by two to capture partial fixed-points. We get similar results as straightforward corollaries of Theorem 4.4, although a similar result to Theorem 4.4 is not proved in [13].

In attempt to prove the theorem above, we analyze a more general result. Instead of investigating only the first level of the hierarchy of higher-order logics with the least fixed-point, we obtained a proof that deals with all the hierarchy. In fact, we prove that each level of this hierarchy is captured by a level of the deterministic exponential time hierarchy, as we will see below.

relation between the addition of the least fixed-point operator and the exponential gain in time. For example, FO captures the logarithmic hierarchy and, when we add the operator to obtain FO(LFP), the new logic captures the class P, i.e., an exponential gain in time with respect to LH. This gain also occurs when we add the least fixed-point operator to higher-order logics. Below, see some reasonable corollaries that follow from our main result.

