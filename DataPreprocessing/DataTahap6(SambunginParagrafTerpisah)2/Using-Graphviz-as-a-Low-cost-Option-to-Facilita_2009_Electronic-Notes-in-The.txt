We have developed a function library with names analogous to the original Posix calls (myfork, myexec, mywait, myexit ). These functions maintain the functionality of the original system call (myfork does fork, myexec does exec, etc.), but they also generate one or more lines in graphviz dot format to graphically represent the system call.

To generate the graphical representation of the dynamic behaviour of a real pro- gram, the original system calls are replaced with the instrumented library functions mentioned before. A simple program or script does this. The original functionality is preserved and we get its graphical representation.

The global dot file is divided into as many files as lines are in it. The first one has the first line of the original file, the second one the first two lines, and so on. That is, the i th file has the behaviour of the first i calls (each call has a line in the global dot file).

The priority is to improve the process of creating and publishing the graphics. Currently each step (creating the original file, dividing it into iterative files, gener- ating the graphics, publishing graphics into web pages) is done independently and semi-manually. So, the first thing to do will be the packaging of the independent steps into one program that automatically generates and publishes graphics in one step from the data of the execution of a process.

Apart from the technical aspect, we have the intention to apply similar ideas to other parts of the subject that could benefit from this kind of support for the explanations. File management is a good candidate. In this case we would visualize the evolution of the data structures involved in performing each system service. We are also studying how to apply this to other topics such as concurrent programming or input/output management, although it is not that obvious.

