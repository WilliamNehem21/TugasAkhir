Mobility has become a new factor of complexity in the construction and evolution of software systems. In this paper, we show how architectural description techniques can be enriched to support the incremental and compositional construction of location-aware systems. In our approach, the process of integrating and managing mobility in architectural models of distributed systems is not intrusive on the options that are made at the level of the other two dimensions - computation and coordination. This means that a true separation of concerns between computation, coordination and distribution can be enforced at the level of architectural models.

architectural connectors [2] in externalising the interactions among compo- nents. In this setting, we show that location-transparent architectural models can be made location-aware through the superposition of distribution connec- tors over components and connectors. In this way, it becomes possible, for instance, to regulate the dependency of components and connectors on prop- erties of locations and the network infrastructure that connects them, without interfering with the computation and coordination aspects that account for location-independent properties.

Hoare. When R(g) is such that the primed channels are fully determined, we obtain a conditional multiple assignment, in which case we use the no- tation that is normally found in programming languages. When the write frame D(g) is empty, R(g) is tautological, which we denote by skip.

of the partners of the interaction being specified. The instantiation of a role with a component is possible if and only if the component fulfills the obliga- tions the role determines. In CommUnity, instantiation of roles is also defined over a category of designs but using a different notion of morphism that cap- tures behavioural refinement. This notion of refinement permits exchanging components and even connectors but not change the overall structure of the system. Details on these refinement morphisms between designs and between connectors can be found in [6] and [8], respectively.

Each local channel x is associated with a location l. We make this assign- ment explicit by simply writing x@l in the declaration of x. The intuition is that the value of l indicates the current position of the space where the values of x are made available. A modification in the value of l entails the movement of x as well as of the other channels and actions located at l.

The extensions that we have used for the sender and the receiver can be obtained through the superposition of one or more such connectors. These location connectors are standard solutions that can be used across different components. From a methodological point of view, they should be made avail- able, together with distribution connectors, in libraries that assist designers in the process of making a system architectural model location-aware. We are now working on extending the algebra of connectors that we started defin- ing in [14] for systematising this process of publishing, finding, and reusing connectors.

