This is modeled by the Mobility Offer Allocation Problem (MOAP). The corresponding optimization model and solution techniques are pre- sented in this paper. The objective is to determine an integrated alloca- tion that fulfills all mobility demands and respects the vehicle fleet size while minimizing expenses and emissions.

The Mobility Offer Allocation Problem was put into practice as part of an applied research project in Austria1. This paper focuses on mod- eling and solving the Mobility Offer Allocation Problem. The research project addressed the corporate mobility concept in a broader way. The concept aims at improving costs and environmental impacts by shrink- ing the fleet size due to improved utilization, and by electrifying the fleet due to increased flexibility (e.g., small electric cars for city trips, large combustion engine cars for holiday trips). To fully exploit those benefits, corporate mobility should be available for all employees and for business as well as for private trips. The following five main compo- nents were addressed in the implementation of this corporate mobility concept:

Integration of alternative mobility offers: The concept of mobility as a service should not be limited to fleet vehicles (Goodall et al., 2017). Alternative modes of transportation such as public trans- portation, bicycle and car sharing systems, or taxis should be con- sidered as well. The system should automatically determine pos- sible alternative mobility offers. A seamless integration of such offers could advance the use of low-emission transport modes.

Key-less access: A key-less solution eases access to cars. This means each user of the system should have a digital device to access and drive company cars. This could be an RFID chip card or an application on a mobile phone.

including charging scheduling, is tackled in Sassi and Oulamara (2017). They propose a mixed integer linear programming model and a heuris- tic approach. For the exact approach, the authors report computational times of one hour for instances with about 120 demands (called tours in their paper). Their ILP model avoids overlapping vehicle assignments by including one constraint for each possible vehicle assignment. We use a stronger formulation based on cliques in a conflict graph. Though not explicitly considering the charging process of vehicles (and thus being less general regarding this aspect), the problem considered in our paper is more general with regard to mobility options. In particular, vehicle dependent journey intervals (possibly mode of transport dependent) and alternative journey intervals (e.g., modeling appointment alternatives) are considered, whereas the approaches from the literature mentioned before assume identical journey intervals for each vehicle. Also, our ap- proach can include different vehicle admissibility for each demand.

In this paper, the problem is modeled as a generalized operational fixed interval scheduling problem. Consider Kolen et al. (2007) for a sur- vey on interval scheduling and Kovalyov et al. (2007) for fixed interval scheduling. Kovalyov et al. (2007) define the fixed interval scheduling weight and a set of fixed intervals in which it can be processed at a specific machine. Now, the aim of the tactical fixed interval scheduling problem is to minimize the number of needed machines given that all jobs have to be scheduled (Kroon et al., 1997). The goal of the opera- tional fixed interval scheduling problem is to maximize the weight of the jobs that can be scheduled on a given set of machines (Ng et al., 2014). In our application, machines correspond to vehicles, jobs to mo- bility demands, and the possible assignments of a job to a machine at a specific interval to mobility offers. Ng et al. (2014) present heuristics for a special case of the operational fixed interval scheduling problem, to which we compare our developed algorithms in Section 6.

its restriction to interval graphs. Another related problem is the interval scheduling problem with a resource constraint (Angelelli et al., 2014) which is, in contrast to the MOAP, not a variant of a multiple-interval scheduling problem. Many problems, like independent set, dominating set, and clique, are shown to be NP-hard for multiple-interval graphs whereas they are not for 1-interval graphs (Butman et al., 2010). Similar models are also used in course timetabling, consider, e.g., the overview provided in Burke et al. (2010). Related are also variants of graph col- oring problems (Marx, 2004).

problem and discusses the modeling. Section 3 defines conflict graphs as a foundation for the solution approaches proposed in Section 4. Then, Section 5 discusses how symmetries can be exploited by grouping ve- hicles into disjoint classes. A description of benchmark instances along with a computational study is presented in Section 6, followed by con- clusions and an outlook in Section 7.

include travel times, but also service times, waiting times, or even visits of multiple customers with additional travel times in between. Different offers belonging to the same demand may feature differing journey in- tervals. In particular, it is possible to include multiple offers per vehicle with different journey intervals for modeling alternative dates for the same appointment. Demands can also be used to model maintenance tasks for the vehicles of the fleet, with corresponding offers defining possible maintenance dates.

A core assumption is that each vehicle is assigned to a fixed location where all trips start and end. Yet, different vehicles can be located at different places. This assumption holds in many corporate contexts and also in related use-cases such as, e.g., car sharing systems where each vehicle is bound to one fixed location. Beside the administrative rea- sons observable in practice (e.g., maintenance responsibilities), station based systems have some inherent advantages: First, there is no need to consider vehicle relocations due to the imbalance of travel demand. Sec- ond, station based systems are robust against canceled trips. Canceling sociated offer. ISDU is shown to be NP-hard in Ng et al. (2014) by stating that it is a generalization of interval scheduling on dedicated identical parallel machines (ISDI), which is shown to be NP-hard by Arkin and Sil- verberg (1987). Throughout this paper we use the notation introduced

Proof. We show that the MOAP is NP-hard to approximate within any factor by a polynomial-time reduction from the Interval Scheduling with Machine Availabilities (ISMA) problem which has been shown to be NP-complete in Kolen et al. (2007). An instance of the ISMA problem

Theorem 2 shows that there are only two types of maximum cliques in the mobility offer conflict graph. Next, we describe the construc- tion of the conflict graph by enumerating the cliques identified above. The first type of cliques (offers belonging to the same demand) can be derived directly from the problem instance. The second type of cliques (offers belonging to the same vehicle with overlapping time in- tervals) can be computed independently for each vehicle. As proposed in Gupta et al. (1982), this can be done by adapting the algorithm of Gupta et al. (1979) for finding a minimum coloring of an interval graph. The following algorithm describes that adaption.

instances in Section 6. For solving the ILP, the mixed integer linear pro- gramming solver IBM ILOG CPLEX Optimizer, version 12.6.2, is used. For larger instances, this exact approach is not successful anymore which is why we also propose heuristic solution algorithms. All proposed meth- ods make use of the conflict graphs introduced in Section 3.

mand conflict graphs are related to multiple-interval graphs as described in Butman et al. (2010). The perspective of demand conflict graphs also allows to see the MOAP as a weighted variant of the known list col- oring problem described in Marx (2004), with colors corresponding to vehicles.

Demand Conflict Graph Destroy The idea of this operator is to re- move offers from those demands which potentially affect each other. For this purpose, the demand conflict graph described in Section 3.3 is used. For choosing the nodes to be deselected, a start node is chosen uniformly at random. From this start node, a breadth-first search is started until the number of visited nodes

All algorithms presented in Section 4 are implemented in Java 1.8. The general purpose mixed integer linear programming solver IBM ILOG CPLEX Optimizer, version 12.6.2, is used for solving the ILP model. All numerical experiments were conducted using one core of an Intel Xeon 2643 machine with 3.3 GHz and 16 GB RAM each running Linux CentOS 6.5.

multiple, non-overlapping time windows for mobility demands so that multiple offers for same vehicles may have different journey intervals. This enables modeling alternative dates for one demand. Instance set RW, on the other hand, does not allow alternative dates but the journey intervals of the mobility offers are considered more realistically based on spatial, demographic, and economic data from Vienna, Austria. The start and end time of the mobility offers consider the overall difference in the demand over the time of the day and also differentiate between weekdays and weekends.

The data for both instance sets and the source code of the instance generators are made publicly available (https://github.com/ait-energy/ seamless). This sections gives an overview of the rather complex in- stance generation procedures. We refer to Appendix A for a more de- tailed description of the instance set RW. In the following, determining a random number according to a discrete uniform distribution over in-

First, random instances were created aiming at covering a wide range of scenarios. This instance generation procedure reflects, to some extent, the generality of the proposed modeling. Most parameters of the gener- ator are fixed in order to limit the number of instances. Four parameters are varied which results in an overall number of 144 parameter combi- nations. For each combination, one instance is randomly generated.

rates lead to more vehicles in the fleet. Vehicles are classified into four categories (e.g., representing small car, medium car, large car, and van); an individual vehicle type cost factor is assigned to each of them (2, 3, 4, and 7, respectively). The number of vehicles per category is deter- mined by fixed vehicle category portions (15%, 35%, 35%, 15%) of the overall number of vehicles. Then, for each generated mobility demand, a minimum vehicle category is randomly determined according to this dis- tribution. Only vehicles of this or a higher category can be used to fulfill

the instances RW. The results showed that for the smaller (E500, E750) and larger (E1500, E1750) instances the best solution was found in only about 44.81% of the runtime and for the medium (E1000, E1250) in- stances in about 68.08% of the runtime. This indicates that for these instances the ALNS is usually able to converge to its final value in be- tween 7 and 11 min of runtime.

results of instance set RW, we see a reduction of the fleet size between 50 and 85% while the average utilization rates are increasing in most cases. There are, however, some cases in which the vehicle utilization rates are actually lower than in the case of fixed vehicle assignments. This is because the goal of the algorithm is not to maximize the vehicle usage but to find the most cost-effective mobility offer allocations. This means that in many cases the alternative offers, e.g., public transport, are actually better for the company and are therefore chosen over a shared fleet vehicle. The same effect can also be observed when looking at the number of offers using fleet vehicles which are also rather low. If desirable, the objective function of the optimization problem could

tric vehicle (BEV) and subtypes corresponding to specific car models, In- ternal combustion engine vehicle (ICEV) and subtypes corresponding to the size of the vehicle and Taxi. For both BEV and ICEV several sub- categories are defined which correspond to car models, e.g., for BEVs

