The rapid development of the internet has become a primary concern of businesses, and the growing amount of information online has led to increasing concerns about information security and threats. Moreover, businesses rely on the internet for valuable transactions such as banking, which caused attackers to attempt access to web application databases [6]. One web application attack is known as a Structured Query Language (SQL) injection attack (SQLI), which targets the database for unauthorised access. SQLI attacks are classified as severe and harmful for web applica- tions because SQLI can gain unauthorised access, manipulate data- base information and may result in denial of service [7].

tion 3 describes previous works related to the subject. Section 4 explains the proposed method. Section 5 demonstrates the imple- mentation and the experiments carried out to verify the proposal. Section 6 presents the results of the experiment and a discussion. Section 7 explains the security analysis carried out, and the final section presents the conclusion and future works.

The injection attack is claimed until reaching the first threat on a web application according to OWASP 2021. In recent years, a con- siderable amount of research has been conducted to detect and prevent SQLI. The following are some proposed methods based on encryption and encoding mechanisms to prevent SQLI.

Raj et al. [17] proposed a coded format to store data. This method is based on the reversal insertion algorithm (RIA). After reversing the input, a special character between each group of two letters is inserted to cancel the (OR) appearance. The proposal evaluates only the login page, and from Algorithm 2, multiple com- putation and comparison combinations load to the web server, which consumes more time.

Namdev et al. [18] used the hash technique for securing logins. The hash value computes for the username and password and then calculates the EXOR between them. The login procedure depends on the EXOR value to authorise a user. The approach protects only the login from tautology attacks, and the EXOR calculation is eval- uated on a web server.

Zhu et al. [31] proposed modular automation of the SQL state- ment in which the module maintains a list for a known anomaly pattern. The disadvantage is centred on pretreatment, which con- sumes considerable time in a web server due to the extraction of the pattern and extra size to store known patterns.

The proposed method is based on using encryption information in the database to prevent SQLI. The encryption is used only with the insertion of information and keyword search, which can increase the time in contrast to the security offering. Searchable encryption is used to preserve information privacy and save decryption time.

Remark: The data encryption standard (DES) suffers from brute- force attacks, whereas the advanced encryption standard (AES) is the solution to DES drawbacks [40]. The AES key is the default size, which is 128 bits. The SHA3 output is more than sufficient com- pared with the key length, but such a size will deceive attackers as a man-in-the-middle attack, and the key driven from SHA3 will not be saved. In other words, there is no waste in database information.

The second category includes the Union attack, which needs console access for the database because the victim site did not pre- pare to handle the Union result; in other words, there is no exper- imental test. The Moh proposal protected against Union attack; this is proven in the security analysis section if the site is prepared to handle all client queries. The third category is targeted at the database procedures, which include stored procedures and alter- nate encoding attacks. The proof is in the security analysis section. The fourth category is targeted at the site input fields, which include tautology, commenting and piggybacked attacks. The experiment uses a localhost server, which runs Apache to handle HTTP messages, a PHP compiler and MySQL database. Two situa- tions, without and with attack, are used to evaluate browsing web applications. Each function of the proposed method or solu-

The proposal results were compared with other approaches and methods that prevent SQLI attacks in web applications. The results are shown in the next subsections. The following results are divided on the basis of the function, and a result value of (0) means the attack is blocked.

The proposal has no limitation for platform or language and is applicable to any web application environment such as e- banking. The results with security analysis prove that the proposal is practical and secure. The future work of study will involve apply- ing the idea to cloud architecture and determining whether it can survive SQL injection assaults in various topologies.

