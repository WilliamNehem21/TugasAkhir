In this paper we will describe our approach, based on Graph Rewriting (GR), to support the visual modeling process in Tropos, an Agent Oriented software engineering methodology. We will give examples of the rewriting rules which specify the syntax of Tropos and will discuss how this graph rewriting rule-set can support an analyst in building correct models (that is models consistent with the Tropos language). Moreover we will consider how GR permits to adopt modeling language variants in a flexible way and to support an incremental modeling process.

Agent Oriented (AO) software engineering is a paradigm that has been recently proposed (see for instance [8] and previous editions) with two main meanings, namely, (i) as an approach to engineering Multi-Agent Systems and (ii) as an approach to developing distributed systems based on the agent paradigm for the analysis and the design of such systems [9]. Visual model- ing plays a crucial role also in AO approaches. We refer, in particular, to the Tropos methodology [10], an agent oriented software engineering methodology (according to definition (ii)), that is based on a visual modeling language and provides a set of analysis techniques. In particular, specific Tropos diagrams allow to represent different aspects of a model structure, while dynamic as- pects of the model can be specified through formal annotations expressed as temporal logic formulas [11].

The paper is structured as follows: in Sec. 2 we will give a brief description of the Tropos modeling language and present the set of problems related to the development of a CASE tool for visual modeling that we intend to address exploiting GR; we will also recall the basic features of GR that we will use in the following. In Sec. 3, we will describe our approach, namely, the set of graph rewriting rules for building a Tropos model; a set of rules for support- ing instance creation and preliminary ideas on how to manage the consistent changing or restructuring of a model. Related works are briefly discussed in Sec. 4. Finally, conclusions and future work are presented in Sec. 5.

The output of a visual modeling process should be a model which is correct with respect to the syntax of the modeling language. However this process goes through the specification of partially correct models. An example could be a creation of a goal without an actor owning it (while according to the language every goal belongs to an actor). Such model should be considered as non completed and the analyst should be warned about this. Moreover, the analyst should be guided towards possible model completions. For example when the analyst starts decomposing a certain goal, the tool should highlight all the goals that can be part of the decomposition. The analyst should also be informed why a building step is forbidden. For instance, if the analyst attempts to create an actor with an already existing name, a clear message should point out the error.

For solving the problems described above we will use GR. In particular, we consider promising to exploit attributed GR which allow to keep some relevant diagram information in terms of a set of attributes attached to nodes and edges of a graph representing the model. Moreover, the rewriting system should support complex conditions on rules application such as Negative Application Conditions (NACs) and conditions on attributes.

We describe our approach along three basic steps: in Sec. 3.1 we describe a first step in applying GR for guiding the analyst in designing valid models; in Sec. 3.2 we address the problem of supporting instance building; in Sec. 3.3 we point out techniques needed to provide restructuring/updating capabilities.

A Tropos model can be represented as a graph whose nodes represent entities like actors, goals, resources, plans, and whose edges represent the relationships that can be defined among these entities, such as dependencies and decompo- sition relationships. Both nodes and edges have attributes which are used to complete the entity specification. It is hence very reasonable to represent the syntax of Tropos using a set of rules that allow for generating all valid Tropos models.

is expressed with an edge has from the actor node to the goal node. Different types of intentional entity (hardgoal, softgoal, plan, resource) are represented as attributes of node of type goal. This allows to reduce considerably the number of the rewriting rules. All the additional information, like names and parts of formal specification, associated to a node are represented as attributes as well.

Guiding the modeling process. We can exploit the functionalities provided by AGG such as suggesting possible rule mapping completions, for instance to highlight possible completion objects. In the case of the rule for creating a decomposition link, the analyst can select the goal to be decomposed and the tool can point out all the possible subgoals that are valid completions for the rule.

The main advantage of the approach here is that it guaranties to build instances within a Tropos model. Using the set of rules for the instances we can create any number of instances for the Tropos diagram. And, so that all of them are guarantied to be compatible with the model itself.

subgoals. All the other links, except decomposition, should be destroyed. The new derivation can be reapplied resulting into the changed diagram. Analo- gous updating will be done for all the instance diagrams. The same technique can be used for other type of restructuring in a model.

Among the available tools that implement GR and that offer also advanced editing functionalities we considered GenGEd or DiaGen both described in [17]. We preferred to use the AGG tool since our focus is on providing a graph transformation engine. This engine shall then be integrated in a CASE tool which provides a broader set of functionalities, and that is being developed in our research group.

In this paper we have described our approach, based on GR, to support the visual modeling process in Tropos. We have given examples of the Tropos rewriting rules which specify the syntax of the Tropos language and supports an analyst in building correct models. These rules have been implemented with AGG. The GR approach gives flexibility in adopting modeling language vari- ants and can be adapted to allow for the definition of partially correct models. Moreover, derivation transformation seems to be a promising way to support the restructuring of a model in consistent ways. We are currently defining an appropriate notation for representing derivation history and completing the implementation and validation of the described techniques in AGG.

