In contrast to a transition system specification in process algebra, a structural operational semantics (SOS) of a programming language usually involves auxiliary entities: stores, environments, etc. When specifying SOS rules, particular auxiliary entities often need to be propagated unchanged between premises and conclusions. The standard technique is to make such propagation explicit, using variables. However, referring to all entities that need to be propagated unchanged in each rule can be tedious, and it hinders direct reuse of rules in different language descriptions.

This paper proposes a new interpretation of SOS rules, such that each auxiliary entity is implicitly propa- gated in all rules in which it is not mentioned. The main benefits include significant notational simplification of SOS rules and much-improved reusability. This new interpretation of SOS rules is based on the same foundations as Modular SOS, but avoids the notational overhead of grouping auxiliary entities together in labels.

Structural operational semantics (SOS) is a well-known framework for describing both static and dynamic semantics of programming and specification languages. This paper is about how its pragmatic aspects can be significantly improved, and assumes familiarity with the standard framework (see e.g. [1,8,22,24]).

the conclusion. Notice that the order in which the premises are written in the ab- breviated rule determines the (intended) order of evaluation of the sub-expressions e1,..., en, in contrast to the usual treatment of premises as an unordered set. A further convention, called the exception convention, is introduced to provide implicit propagation of exceptions; but propagation of the environment is left explicit. The introduction of the two conventions seems somewhat ad hoc, and it appears that they have not been adopted in SOS descriptions of other languages.

Implicit propagation of unmentioned variables is a familiar concept from imper- ative programming languages. It has previously been exploited in various semantic frameworks, including abstract state machines, action semantics, monadic seman- tics, attribute grammars and, most recently, K [9]. Our contribution here is the formal incorporation of implicit propagation in the popular structural style of op- erational semantics.

Section 2 recalls the foundations of SOS and MSOS, then defines how SOS specifications are interpreted as MSOS specifications, allowing implicit propagation. Section 3 considers familiar examples of SOS specifications from the literature, and shows how much simpler they are when reformulated using implicit propagation. Section 4 concludes with a summary of the contribution of the paper, and indicates plans for future development.

as more appropriate for the static semantics of programming languages (also for the semantics of non-computational specification languages, e.g. Casl [3]), and unsuit- able for the dynamic semantics of languages that involve concurrency or interleaved effects. Note however that the two styles can be used together in the semantics of the same language (e.g. small-step for command execution, big-step for expression evaluation).

The sorts in SL classify the phrases of the language (commands, expressions, etc.), the function symbols in TFL correspond to phrase constructors, and subsort inclu- sions correspond to direct inclusions (e.g. of identifiers in expressions). For example, consider the following constructs:

An SOS specification extends the specification of abstract syntax and auxiliary entities by introducing some relation symbols, and defining the relations inductively by rules. In process algebra, transition system specifications usually involve ternary relation symbols (corresponding to labelled transitions between states) and unary predicate symbols (corresponding to subsets of states), and the introduction of the symbols is often left implicit. In descriptions of programming languages, in contrast, the argument sorts of relation symbols tend to be less homogeneous, and the explicit introduction of the relation symbol being defined by a set of rules is common practice (cf. [23]).

We consider only positive rules in this paper (partly for simplicity, but note also that rules with negated judgements are generally eschewed in SOS descriptions of programming languages). Then, by the classic theory of inductive definitions, the interpretation of relation symbols defined by rules always exists. It corresponds to the semantics of a structured free-extension specification in Casl, where the inference rules are expressed as universally-quantified implications (under the as- sumption that the sets of premises are finite).

A semantic relation symbol can be introduced more than once in an I-MSOS spec- ification. We assume that each time the same relation symbol is introduced, the same variables are used to indicate its argument sorts; this ensures that the sorts of the argument terms in an application r(t1,..., tn) uniquely determine the variables x1,..., xn used to introduce r.

