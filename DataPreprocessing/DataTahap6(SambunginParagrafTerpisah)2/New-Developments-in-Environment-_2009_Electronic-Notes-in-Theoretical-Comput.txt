Thus, environment machines can be classified according to the strategy of eval- uation they implement (e.g., call-by-name, call-by-value), according to the kind of reduction performed (e.g., weak reduction, strong reduction), and also according to the way they associate environments to terms. For instance, in the CAM and the KAM, environments are associated to sub-terms of the term being evaluated, and provide information about the terms that should be substituted for the free variables in the sub-term. Later we will describe machines that will use only one environment instead of associating environments to sub-terms. To distinguish these two classes

We start by presenting two weak machines with local environments that use names for variables, instead of the standard presentation using De Bruijn indices [12]. The machines are variants of the KAM and the CAM with Lisp-like associative lists to represent environments; usually the KAM machine is presented using De Bruijn indices [9], however names and maps have also been used (see for instance [16,3]). Since we use names, we may have duplicate entries for keys in the list, however, keys that arise earlier in the list shadow keys that arise later in the list. In this way, one can implement maps in an non-destructive manner.

We proceed with the definition of the operational semantics. To evaluate a closed, linear term, we start with a linear closure (t, a) where a is empty, and use the array to store the substitutions as they are created. Values are closures where the term is an abstraction.

