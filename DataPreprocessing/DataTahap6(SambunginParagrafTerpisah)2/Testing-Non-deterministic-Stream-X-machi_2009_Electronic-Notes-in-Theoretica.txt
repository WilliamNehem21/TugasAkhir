The stream X-machine (SXM ) [10] is a form of extended finite state machine (FSM). It describes a system as a finite set of states and a number of transitions between states. In addition, a SXM contains an internal store, called memory. A transition is triggered by an input value, produces an output value and may access and/or alter the memory. A transition diagram of a SXM is a finite automaton (called an associated automaton) in which the arcs are labelled by relation names (referred to as processing relations). Under certain well defined design for test conditions, it is

This section presents the theoretical basis for the NSXM integration testing method [15]. This method generates a test set from a non-deterministic SXM specification, providing that the system components (i.e. processing relations) are implemented correctly. Therefore, it is assumed that the IUT is a NSXM having the same type (processing relations) as a specification. The concepts and results in this section are largely from [15], the presentation of which has been slightly modified to fit with other published work in the area [8,11]. The essence remains unchanged.

Since C is a set of (non-deterministic) SXMs testing compatible with Z, it is assumed that the processing relations are implemented correctly, i.e. an IUT uses the same set of processing relations as a specification. Therefore, the method only tests the integration of processing relations. The correctness of implementation of these relations is checked by separate testing processes, as discussed in [15].

Since the method does not assume that processing relations are correctly imple- mented, we will have to test their implementations in addition to their integration. Therefore, a test set has to contain two components: an integration test set (from the previous section) and a set for testing processing relations (called a relation test set ). The latter is defined below.

In this section we discuss how Theorem 4.8 (or Corollary 4.9) and Theorem 2.3 can be applied to generate (conformance) test sets for a P system specification. In this respect we show how to build a stream X-machine from a P system. We will use the approach described in [7] to build a derivation tree for a predefined number of steps,

The paper also shows how a SXM model of a P system can be obtained and how the NSXM testing approach can be applied to generate conformance test sets for the P system. Further work will involve devising alternative approaches for deriving SXM models of P systems as well as aspects related to the application of NSXM testing to P systems (e.g. designing P systems that meet the design for test conditions).

