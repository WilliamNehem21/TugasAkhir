The rest of the paper is organized as follows: in the next section we give some introductory ideas and discussions; Sect. 3 is the core of the paper, with the precise description of our method and the results of soundness and completeness, using as formal setting CRWL [8,9], a well-known semantic framework for FLP; Sect. 4 addresses more practical issues and gives some experimental results; finally, Sect. 5 summarizes some conclusions, discusses some limitations and points to possible future work. Additional details, in particular about practical issues, can be found in [7].

but having no extra variables. To obtain such P ' is quite easy: we replace extra variables by a non-deterministic constant (i.e. 0-ary function) genNat whose range of values is the set of all natural numbers. Thus P ' is obtained by adding the following definition of genNat to P :

Although our aim in this paper is mainly theoretical, in this section we shortly discuss some practical issues concerning the use of grounding generators and give the results of a small set of experiments. We are not formal in this section; instead we explain things through examples. We use Toy [6] as reference language, but most if not all the comments are also valid for Curry [14].

To program generators that are complete even under depth first search, we can proceed by iterative deepening, i.e., by levels of increasing complexity, provided that each level is finite and that the union of all of them covers the whole universe of data values of the given type.

Next, we show a comparison between original programs with extra variables and the transformed programs after eliminating them. For the comparisons we give run-times and also the number of reductions to head normal form, which is more independent of the actual implementation and computer. These programs are de- veloped in the system TOY [6] and their source code can be found at the address http://gpd.sip.ucm.es/fraguas/prole06/examples.toy.

We have presented a technique for eliminating extra variables in functional logic programs, i.e. variables present in right-hand sides but not in left-hand sides of rules for function definitions. Therefore, extra variables are not necessary, at least in a certain theoretical sense. Compared to the case of logic programs or more restricted classes of rewrite systems, things are easier in our setting due to the possibility of writing non-confluent programs offered by FLP languages like Curry

We have recently known of an independent and contemporaneous work [5] where a program transformation similar to ours for the elimination of extra variables in functional logic programs is proposed. There are nevertheless several differences to be pointed out. One is the lack in [5] of any indication to practical results.

But the main one is the formal framework considered in each work: [5] proves the completeness of the transformation with respect to ordinary rewriting, while soundness is proved for a variation of rewriting considering explicit substitutions in order to reflect call-time choice, since otherwise the transformation is unsound, as we pointed out in Sect. 2. We find this change of formal setting a bit unsatisfactory, because completeness is not really proved for call-time choice, which can obtain less results than ordinary rewriting (run-time choice). Furthermore we think that the use of CRWL allows a simpler proof.

