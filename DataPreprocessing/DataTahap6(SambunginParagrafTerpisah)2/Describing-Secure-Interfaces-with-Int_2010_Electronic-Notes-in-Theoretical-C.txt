Interface automata are a model that allows for the representation of stateful interfaces. In this paper we introduce a variant of interface automata, which we call interface structure for security (ISS), that allows for the modelling of security. We focus on the property of non interference, more precisely in bisimulation- based non interference for reactive systems. We define the notion of compatible interfaces in this setting meaning that they can be composed so that a secure interface can be synthesized from the composition. In fact, we provide an algorithm that determines whether an ISS can be made secure by controlling (more the actions involving monitoring are intended to be private. (All high actions are underlined.) The transaction processing unit receives transactions (startT? ) and process them satisfactorily (ok!) or not (nOk!) in which case logs the failure (logF!). After this, it informs the result (endT!). All these actions are public. The super-

It is important that occasional monitoring of the server is not revealed to normal users (for example monitoring may be used to understand users behavior). That is why all actions involving monitoring are confidential, while actions involving trans- actions (which are in the interest of the user) are public. It can actually be shown that each of the components of the system satisfies the non interference property in the sense that a user that can only observe low actions cannot distinguish whether a high action has been performed or not in any execution. More specifically, they satisfy the (bisimulation based) non interference relations defined by Focardi and Gorrieri [10]. Roughly, these characterizations state that a system is non interfer- ent whenever an instance of this system which does not perform any high action is weakly bisimilar [15] to another instance where high actions have been hidden.

Related Work. To our knowledge, very little work has been developed in this same area. Cassez et al. [2] resolve a synthesis problem for trace-based non-interference (SNNI) [10]. They do not make difference between input and output action, and only confidential actions are controllable. [11] and [1] introduce synthesis algo- rithms for timed non-interference on timed automata. The setting is similar as before and in these cases, they study both trace-based and simulation-based timed non-interference. In [1], in particular they allow controllability of both public and confidential actions, but still they do not make distinction between controllable (input) and uncontrollable (output) actions.

Organization of the paper. Section 2 recalls interface automata. In Section 3 we define interface structures for security, the composition operation on them, and recall the bisimulation-based non interference properties of [10]. Section 4 introduces the different algorithms, and the sufficient conditions for compositionality are proved in Section 5. Section 6 concludes the paper. Omited proofs appear in [14].

An interface automaton [6,5] is an automaton that models the interaction that a system component carries out with its environment. This interaction is performed by means of input and output actions. Input actions describe the behavior that the component expects (or assumes) from the environment. Output actions represent the behavior it communicates (or guarantees) to the environment. The automaton also describes the temporal ordering in which such interactions should take place. We also consider a third set of actions, the so called hidden actions, that are meant to represent internal non-determinism resulting from internal activity. In this section we recall the fundamentals of interface automata that we use in our paper.

Parallel composition is central to the hierarchical construction of systems. Given two interface automata, their composition defines a new interface that represents the way this new composed system interacts with its environment, hiding the com- munication between the components. It is particularly important to impose new restrictions to the composed interface so that the composed system behaves cor- rectly (i.e. safely ).

The product of two composable IA S and T is defined pretty much as CSP parallel composition: (i) the state space of the product is the product of the set of states of the components, (ii) shared actions can only synchronize, i.e., both component should perform a transition with the same synchronizing label (one input, and the other output), and (iii) transitions with non-shared actions are interleaved. Besides, shared actions are hidden in the product.

Finally, if two IA are compatible, it is possible to define the interface for the resulting composition. Such interface is the result of pruning all input transitions of the product that lead to incompatible states i.e. states from which an error state can be autonomously reached.

In this section we extend IA to cope with security. For this purpose we separate visible actions in two classes: public or low actions, which can be observed and used by any user, and private or high actions, which are intended only for users with the appropriate clearance. According to this separation, we can characterize which components provide a secure manipulation of the information. We take the so-called non interference property [13] as such characterization. We first define interface structures for security (ISS for short) and later adapt the definition of non interference from [10] to our setting.

Notice the difference between the two definitions. BSNNI represents the security property as we describe so far: a system satisfies BSNNI if a low-level user cannot distinguish (up to bisimulation) by means of low level actions (the only visible ones) whether the system performs high actions (so they are hidden) or not (high actions are restricted). BNNI is an apparently weaker notion. (Actually BNNI and BSNNI are incomparable [10].) In this case only input high actions are restricted since the low-level user cannot provide this type of actions; instead output high actions are only hidden since they still can autonomously occur. We also consider this second notion as it seems appropriate for IA where only input actions are controllable.

As we have just seen, the composition of secure interfaces may yield a new insecure interface. The question that arises then is: Is it possible to derive a secure interface out of the resulting composed interface? Notice that, in much the same spirit, a product of IA is adapted to obtain a safe composed interface whenever possible (see Def. 2.6). In this section we present an algorithm to derive an ISS satisfying BSNNI (or BNNI) out of a given ISS whenever possible. Since the method is similar in both cases, we focus on BSNNI.

Notice that, unlike the product of Def. 2.3, the synchronous product synchronizes transition with the same name and the same type (input, output, or silent step). Moreover, transitions do not interleave. In fact, if one transition does not have a matching in the other component, the synchronization leads to a distinguished fail state. Since saturated IA have silent steps self-loops in all states, there is never a silent step leading to fail.

