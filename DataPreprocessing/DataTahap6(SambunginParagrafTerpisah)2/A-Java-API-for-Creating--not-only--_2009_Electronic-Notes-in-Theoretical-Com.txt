In this paper, we present a Java API for creating animation content which uses AnimalScript as the main output. However, the API can also easily be extended to support other notations or languages, making it an attractive tool for many AV content generators, including those that do not use the Animal [6] AV system. Compared with a previous report [8] which appeared only in German, this paper provides more details about the API and its recent informal evaluation and use.

language. In Section 3, we then introduce the design for the Java API, followed by an example animation generated using the API. Sections 5 and 6, respectively, present a brief informal evaluation and comments on extending the API to other notations. Section 7 summarizes the work and outlines areas of future research.

relative to an other object or object node. The value depends on the type of the object, and can for example by an int array for an object of that type (see Listing 2 for an example of creating a visual int array). The display options can be left null to use the standard option of visualizing each declared object. Alternatively, it can be used to declare the object as hidden (not visible) or specify a delay after which the object should become visible. Finally, the visual properties describe the outward appearance of the object, such as its color. The visual properties will be examined in more detail in Section 3.3.

The API supports a large set of graphical objects: points, squares, triangles, rect- angles, polygons, lines, polylines, circles and ellipses (including segments thereof), and text elements. It also supports many of the most relevant data structures used in Computer Science, such as graphs, arrays and matrices with a base type of int or String, code blocks including indentation, list elements with an arbitrary num- ber of pointers, and three variants each of stacks and queues (conceptual, list- and array-based). All objects can be created with a single method invocation similar to lines 4-5 in Listing 2.

Visual settings cannot easily be reused by either of the two previous approaches. For the second approach, the user could move the color adaptations to a separate method invoked by each object that wants to use the appropriate API calls with the same settings. However, that still means additional work for the user.

We have therefore decided to follow an approach closer to Cascading Style Sheets (CSS). Here, the user can define a given combination of visual attributes once, and then reuse it as often as he likes. For example, to create ten text objects that have exactly the same visual settings, the user would first describe the visual properties once, and then pass these visual properties as a constructor parameter to the ten text objects. Listing 3 gives a brief example of how the visual properties for the IntArray object in Listing 2 can be specified. Note that the properties defined in Listing 3 are already used in Listing 2 in line 5.

On creation of a new visual properties object, as shown in Listing 3, all possible properties for the object are set to a default value. Therefore, the user only has to overwrite those settings that he wants to adjust. For example, the array properties actually include 11 different properties.

The two example lines in Listing 4 show how the array array defined in Listing 2 can easily be animated. Line 3 copies a value in the array to the preceeding position over 10 animation frames - in this way, the use can easily visually track the change. Line 6 highlights the copied element to further help in identifying the changed element.

Extending the API to other output languages is very easy. The programmer first creates a new Java package for the new output language. A new base factory implementation of the abstract Language Factory then has to be created and im- plemented. Tools like Eclipse can help by automatically filling in the methods that have to be implemented; this is currently a set of 26 Factory methods for the objects listed in Section 3.2.

The implementation for the AnimalScript language currently consists of 30 Java classes with a total of 6,336 lines (including all empty lines, comments, package and import statements). By far the largest class is the base Factory class with about 900 lines, many of which are either blank (87) or contain import (90) statements or JavaDoc comments (344). When we also disregard the declaration of methods, less than 300 lines of actual code are left.

