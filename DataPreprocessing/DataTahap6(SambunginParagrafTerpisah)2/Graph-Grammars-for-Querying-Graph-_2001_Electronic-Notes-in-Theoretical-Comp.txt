ed by a regular expression [4,7,9,11,23,16]. However, this kind of navigational queries is not completely satisfactory since in many cases we would like to ex- press queries verifying whether the graph has a given structure (e.g. a tree or a chain) or to extract from the source graph a subgraph which satis es some property.

Our paradigm permits to de ne queries that search in a given graph for a subgraph belonging to the language de ned by a given graph grammar. In this way it is novel: while other query languages intend to nd some nodes in a graph such that each of these nodes has a certain property (e.g. the set of the nodes which are the answer of a path query), our model searches for entire sub-structures. Let's consider the following example. Assume that we want to extract all the available online \books" about swing classes from a web site containing documentation about java. In particular we are interested in extracting web pages having a hierarchical structure like the one shown in the following gure:

In the following sections we de ne our graph query language, by introduc- ing a restricted form of node replacement context-free graph grammars [12], called parsing graph grammars and specifying how these grammars identify subgraphs of the original data graph. We point out that our paradigm can also be used to create new graphs. However, in this paper we only consider the extraction of subgraphs.

X is a nonterminal node label, D is a graph and C is the set of connection instructions. A rewriting step of a graph H according to such a production consists of removing a node u labeled X from H, adding D to H and adding edges between D and H as speci ed by the connection instructions in C. The pair (D; C) can be viewed as a new type of object, and the rewriting step can be viewed as the substitution of the node u with (D; C) in the graph H. Intuitively, these objects are quite natural: they are graphs ready to be embedded in an environment. Their formal de nition is as follows.

Let be an alphabet of node labels and an alphabet of edge labels. A graph with embedding is a pair K = (D; C) where D is a graph over and and C       N  fin; outg is the connection relation of K. Each element ( ; 1; 2; v; d) 2 C is a connection instruction of K and is generally written as ( ; 1= 2; v; d). The components of a graph with embedding K will be denoted as NK; EK; K and CK.

Intuitively, for a graph with embedding K, the meaning of a connection instruction ( ; 1= 2; v; out) is as follows: if there was a 1-labeled edge from a node u which has been substituted by K to a -labeled node w, then the embedding mechanism de nes a 2-labeled edge from v to w. Similarly, the meaning of a connection instruction ( ; 1= 2; v; in) is as follows: if there was a 1-labeled edge from a -labeled node w to a node u which has been substituted by K, then the embedding mechanism de nes a 2-labeled edge from w to v. The feature which replaces edge labels is called dynamic edge labeling. Let H be a graph over  and , K be a graph with embedding over the same alphabets, and let v 2 NH. The substitution of K for v in H is denoted by H[v=K]. In the following connection rules of the form ( ; = ; v; a) (i.e. rule which do not re-label edges) are simply written as ( ; ; v; a).

De nition 2.2 A node replacement (NR) grammar is a tuple G = ( ; ; P; S) where  is the alphabet of labels,    is the alphabet of terminal labels, P is the nite set of productions, and S 2  is the initial nonterminal symbol. A production is of the form X ! (D; C) where X 2    and (D; C) is a graph with embedding.	2

We start by de ning a simple graph model on an alphabet with two di erent types of symbols: constant and variables. A variable can take any value and, therefore, it can be associated to any constant. In the following, constants are represented by strings starting with digits or lowercase letters (e.g. b1), variable names are denoted by strings preceded by a dollar (e.g. $b1) and non terminal symbols are denoted by strings starting with uppercase letters (e.g. X).

De nition 3.1 Given an alphabet , a graph over is a tuple G = (N; E; ) where N is a set of nodes, E  f(u; ; v)ju; v 2 N; 2 g is a set of labeled edges and : N ! is a node labeling function. We way that G is a data graph if  contains only constants otherwise it is called query graph.	2

The alphabet used by (general) graphs may also contain, other than ter- minal symbols (variables and constants), non terminal symbols. Thus, data graphs contain only constants and they are used to represent the input database, query graphs are used to denote graphs which can be `mapped' on data graphs and general graphs are used in the intermediate states of the derivation pro- cess. Graph grammars can be used to denote sub-structures from a given data graph.

A data graph D is recognized by a graph grammar PG if there exists a derivation from S to a query graph  (S )  ) and a mapping from  to D. The set of data graphs recognized by PG is denoted DL(P G). The set of subgraphs of a given data graph D recognized by PG is denoted DL(P G; D).

Observe that T erminal( ) is a query graph, i.e. a graph whose node labels can be either constant or variables. Like embedded graphs, mapping pairs can be seen as a new type of object consisting of query graphs (derived from graph grammars) mapped over a given data graph. The derivation of query graphs from parsing grammars can be extended to mapping pairs. Let D be a data graph, PG a graph grammar and ( ; ') a mapping pair over D. We say that a mapping pair ( ; ) is directly derived from ( ; ') through a production of PG (and write ( ; ') ) ( ; )) if and only if ) and extends '. 1 Moreover, we say that a mapping pair ( n; 'n) is derived from a mapping pair ( 0; '0) over a data graph D if ( 0; '0) ) 1 ( 1; '1) ) 2  ) n ( n; 'n). Given a graph grammar PG and a data graph D, (P G; D) de nes the set of mapping pairs derived from (S; ;) where ; denotes an empty mapping.

A mapping pair applied to a data graph D allows us to identify a subgraph of D having the property de ned by the grammar. Each node of the extracted subgraph can be associated to more than one node of the query graph, if these nodes have di erent \role" labels. Di erent labels are used to distinguish di erent classes of nodes and arcs (e.g. in a tree internal nodes and leaf nodes may have di erent labels).

Note that the production de ning the axiom (start symbol) of the graph gram- mar) contains an arc whose start node is marked with the constant label n1. This means that all derived query graphs are trees whose root node is marked with n1. Therefore, every tree generated by such grammar can be mapped only to a tree whose root node has label n1. In the above mapping ated a variable. Although not represented in the gure, the arcs in the query graph are mapped to arcs in the data graph; for instance the arc e = (1; 2; a) and the arc '(e) have the same label a (i.e. '(e) = ('(1); '(2); a)).	2

De nition 3.8 Let D be a data graph D and M a Mapping pair on D. A checking property for D and M is a formula of F O(COU NT ) over the relations used for storing D and the variables appearing in M.	2

De nition 3.10 An extended graph query Q is a pair (P G; ) where PG is a graph grammar and is a FO(COUNT) formula. The answer to an extended graph query Q over a data graph D is Q(D) = fMjM 2  (P G; D)^ (M; D)g.

