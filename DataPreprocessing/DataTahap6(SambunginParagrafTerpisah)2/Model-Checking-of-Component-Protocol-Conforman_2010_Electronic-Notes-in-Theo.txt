In past years, a number of works considered behavioral protocols of components and discussed approaches for automatically checking of compatibality of protocols (protocol conformance) in component-based sys- tems. The approaches are usually model-checking approaches, i. e., a positive answer guarantees protocol conformance for all executions while a negative answer provides example executions that may lead to pro- tocol violations. It turned out that if behavioral abstractions take into account unbounded concurrency and unbounded recursion, the protocol conformance checking problem becomes undecidable. There are two possibilities to overcome this problem: (i) further behavioral abstraction to finite state systems or (ii) a conservative approximation of the protocol conformance checking problem. Both approaches may lead to spurious counterexamples, i. e., due to abstractions or approximations the shown execution can never hap- pen. This work considers the second approach and shows a heuristics that reduces the number of spurious counterexamples by cutting off search branches that definitely do not contain real counterexamples.

Developing software contains nowadays a big share of reusing previously developed software called components. Often these components were developed a long time ago by different developers, third party companies, in different programming languages, supplied as binary code, or as distributed components (e. g., web services). Thus, there is a big interest in components which can be composed to reliable systems.

protocol violation is discovered, an example demonstrating the violation is provided (counterexample). Since the abstract behavior of a component (and therefore the system behavior) is an abstraction, it may model execution paths that can never be executed. In this case the counterexample is called a false negative. Positive answers guarantee that no protocol violations occur.

There are two basic approaches to ensure abstract component behavior. In the top-down approach, the component developers specify the abstract behavior and then refine it (e. g., [33,31]). The bottom-up approach determines from the source code the abstract behavior (e. g., [43,7]). The top-down approach has the advan- tage that protocol conformance can be checked before implementing the components while the bottom-up approach has the advantage that the approach can be mech- anized using standard control-flow analysis. This work considers the bottom-up approach.

There are three possibilities to overcome the undecidability of the general pro- tocol conformance checking: (i) further abstraction to, for example finite state systems, (ii) bounded checking (by bounding the recursion depth and the number of concurrent threads), (iii) approximation of the protocol conformance checking. The first and third possibility may lead to more false negatives. The second ap- proach may lead to false positive answers (in case a protocol violation happens with a larger recursion depth or a larger degree of concurrency than the given recursion depth and degree of concurrency, respectively). As demonstrated in [43], a naive implementation of (i) may lead to false positive answers in the presence of recursive call-backs even if each component internally only contains non-recursive procedures. Hence, this work considers the third possibility.

The paper is organized as follows. Section 2 introduces how process rewrite sys- tems can be used for abstractions. Section 3 introduces the approach of approximate protocol conformance checking and analyzes reasons for spurious counterexamples, while Section 4 shows how to avoid these spurious counterexamples by using a spe- cialized search strategy. Section 5 shows the results of a case study. The paper finishes with a consideration of the related work in Section 6 and the conclusion and future work in Section 7.

This section is a summary of the results in [7] extended by an explanation why the techniques work well. In particular, we present an abstract execution model based on process rewrite systems [29] for concurrent execution of potentially recursive programs and motivate their use. Then, it is shown how abstract component be- haviors can be modeled as process rewrite systems and how these are glued together to obtain an abstract system behavior. Finally, we show that special cases lead to component models known from literature.

after the calls a and b but before their synchronization, respectively. If a procedure call in a process is executed, a stack frame is pushed on a stack. If a new parallel process is started, a new stack grows for this process (like in a saguaro stack). Synchronizations only can be performed between two top-level elements on cactus stacks if one of these stacks contains only one stack frame. Hence, an execution transforms a cactus stack into a cactus stack.

procedure call happened. Note that not all process-algebraic expressions correspond to cactus stacks. For example an expression p1.(p2 || p3) cannot correspond to a cactus stack because p2 || p3 would represent two branches in a cactus stack and therefore it would not be clear where to put p1 in the cactus stack.

Protocols can be verified dynamically by performing the transitions according to the (incoming remote) invocations. In this work we focus on static verification of protocols, i. e., it is verified that a component is used according to its protocol before executing the component-based system.

Hence, the reachability problem can be solved by using the Round-robin reach- ability and will create fewer false negatives. This leads to a better applicability because a component developer or quality management representative has to check a lower number of counterexamples. Moreover, because we cut branches during the verification, it will probably be finished faster.

the Round-robin reachability within the time constraints. This is caused by the behavior of the Round-robin reachability enabling the evaluation of a derivation path only if precisely one action rule was applied. Thereafter, all protocol states are synchronized. In contrast, the trivial evaluation approach evaluates each path.

Our verification approach ensures properties based on interaction protocols of pro- grams which include unbounded recursion and unbounded parallelism. This leads to a higher quality of software, because the protocol conformance can be checked before the deployment. Every error will be found.

This work has shown how the special properties of the representation (defined in earlier works) can be used to reduce the number of false negatives. We call this approach Round-robin reachability, because it balances the derivation steps applied on each parallel term. This improvement reduces the costs of the quality check, because fewer counterexamples have to be reviewed to find the real errors. We assume that, most spurious counterexamples might be removed in an industrial environment.

Currently, we validate our approach in an industrial case study of component- based systems written in Python and C/C++. We can create abstractions of source codes written in Python, already. Presently, we are creating a generator of abstrac- tions for C/C++ source code. Early results show that our approach is capable of finding errors or unexpected behavior in real programs. In future work we will create abstractions of BPEL and PHP source codes, considering Java is also planned.

The user of the verification process can use a graphical user interface (GUI) or a Python interface providing the API. The implementation of the web services for user interfaces omits the verification process and provides multi-user support. The GUI can represent the abstract behavior of components and composed components using a graphical representation. PRS transition rules are represented only in this way. To our experience a graphical representation of the considered counterexample is useful for the evaluation.

