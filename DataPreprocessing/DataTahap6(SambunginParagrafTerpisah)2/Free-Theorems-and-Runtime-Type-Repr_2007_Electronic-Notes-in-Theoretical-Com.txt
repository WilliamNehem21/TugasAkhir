polytypic) programming. It can be used to define type-indexed operations such as generic parsers, pretty printers, iterators and other operations that automate the boilerplate of working with algebraic datatypes. However, partly because of the negative interactions with type abstraction, few functional languages support it.

The question about representation types and parametricity has recently be- come more important with the introduction of generalized algebraic datatypes (gadts) [3,8,23,25,16,26], a variant of inductive families of types [12] originally de- veloped in dependent type theory. With gadts, we may implement representation types, enabling the advantages of runtime type analysis. For example, in recent work we showed how gadts in the Glasgow Haskell Compiler (GHC) [30] may be used to implement a sophisticated library of datatype generic routines.

