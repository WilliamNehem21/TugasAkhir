Sangiorgi and Pous studied up-to techniques first for binary relations [15], and then in the more general setting of complete lattices [13], focusing on finding composable enhancements for better modularity. Their work led to the definition of the subclass of compatible enhancements, which is closed by function composition and union. Following up on a remark by Hur et al. [6], Pous [11] shows how useful the greatest compatible function (the companion) can be used as a sufficient, modular criterion for the validity of up-to techniques. Indeed, any function (compatible or not) below the companion is an up-to technique, and being below the companion is preserved by composition and union. As further demonstrated by Pous, the notion of companion is surrounded by an array of tools that in practice are highly flexible and effective, compared to relying on the notion of compatibility alone. The companion has since been studied as a categorical object [12,2] and has been characterized in a classical [9] and constructive [16] setting. Danielsson [5] uses the former characterization to relate the companion to size-preserving functions, a class of up-to techniques proved valid using types.

In the rest of the paper, we first introduce the concepts and notions used throughout this work in Section 2. We define the diacritical companion in Section 3, and then extend it to the higher-order setting to use it as a proof technique to show that a given pair of functions is below the first-order diacritical companion (Section 4). We conclude in Section 5. The theory (not the examples) has been formalized in the Coq proof assistant; the developments are available at https:

In our previous work, we defined compatibility not simply for functions but for sets of functions, to allow for a strong candidate to evolve towards a regular one in the active progress case, as we can see with the definition of strong evolution in Section 2.1. The same purpose can be achieved by decomposing up-to techniques into pairs of monotone functions (s, f), where s is the function applied after the passive progress, while f is applied after the active one.

By considering pairs of functions, we generalize the distinction between strong and regular up-to techniques described in Section 2.1; we decompose an up-to technique into its strong and weak components, respectively s and f. Such a change allows for a definition of evolution between two pairs (s, f) and (sj, fj) where s evolves towards fj in the active progress case.

Following the first-order intuition, U contains the enhancements allowed after passive evolution, and W the ones after active evolution. More precisely, Ustr contains the enhancements allowed after the evolution of the strong component s, and Uwk those after the weak component f. Due to the asymmetric nature of active evolution, Wwk is used for both components. These functions combine s and f in some way; the question is then which combinations are allowed in the different cases. We provide some answers with the help of the following auxiliary lemma.

As explained before, the properties we have so far for Uwk do not allow to compose strong candidates on the right, while our previous theory permits it. We show that we can recover such a property by only slightly strengthening the hypotheses of Corollary 4.3.

