Novice programmers have difficulties with their visual attention strategies when following program visual- izations. This article presents work in progress on improving the user interfaces of visualization tools to support students in the visual attention problems. We introduce a user interface solution called the dynamic evaluation tree. The basic idea is to reduce the amount of separate windows of the user interface and thus make it possible to concentrate the visual attention more in one part of the screen.

The user interfaces (UIs) of visualization tools are often build with a similar struc- ture. Many tools seem to have the same components in their UI and similar locations for them. We feel that this is partly because the tools are offering multiple different perspectives for the example and no specific design principles are applied for the UI design. Components are in their places just because they always used to be.

Depending on the focus of the visualization, it is possible that some of the windows are not necessary and are thus absent. For example, algorithm visualization tools might not need the evaluation window at all since they present the algorithm on a higher abstraction level than individual expressions. Examples of tools that do not need an evaluation window are presented by Malmi et al. [5] and Naps et al. [7]. Sometimes one window of the visualization tool contains more than one kind of actions. For instance, the theater in Jeliot 3 [6] actually includes both the memory window and the execution window.

According to the study, expert programmers can better follow the information shown parallel in different windows of the visualization tool. They are able to change their visual attention strategy during a session of using the visualization tool. At the beginning of a session, they often concentrate on the code window and later on in the session on relating the code with the presentations in the other windows. Specifically, the experts follow the code window of the visualization tool more comprehensively than novices.

In contrast, novice programmers use only a couple of visual attention strategies. They either switch their visual attention repeatedly between different windows or concentrate all the time on one of the windows. Since the target audience of visual- ization tools are mainly novice programmers, this kind of a visual attention strategy should be taken into account when designing the UI of the tools.

An alternative way of presenting the data dynamically inside the code window would be to show it in a tooltip window when the cursor of the mouse is placed on an expression in the code window. This could be used in any visualization tool regardless of the use of the dynamic evaluation tree. However, this solution does not help if you want the evaluations to be shown as the user clicks the step button. The idea of using curly brackets is just to present the values of expressions in program code. In addition to this, also the other functionalities of the visualization tool are needed to present the execution of the program as a whole. For example on a line that contains a function call the tool can first present that the control changes to the definition of the function and use the highlighting of the executed line for this. After the execution of the function the tool can use a curly bracket to

The rewriting model works in a very natural way in functional programming languages. It also provides a handy solution for non-trivial evaluations like function calls within imperative program languages. When using curly brackets instead of rewriting, function calls can be handled with other features than embracing as explained in previous chapter.

Since novice programmers have most problems with their visual attention strate- gies, the dynamic evaluation tree should be most helpful for them. After all, the biggest target audience of visualization tools is novice programmers. Thus, we feel that the idea is worth trying.

When the dynamic evaluation tree is implemented, it should be evaluated with an eye-tracking study to determine the possible aid with the visual attention strate- gies. The student still has at least the code window and the memory window to follow. An interesting possibility for further research could be to study whether it is possible to guide the student to develop better visual attention strategies by using the dynamic evaluation tree and other similar solutions in the UI.

