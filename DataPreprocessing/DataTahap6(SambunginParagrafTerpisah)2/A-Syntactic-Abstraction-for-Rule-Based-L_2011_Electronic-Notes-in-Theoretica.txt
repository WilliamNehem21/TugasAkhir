The past decade has seen the emergence of many new formal languages and frame- works for modelling in biology. These include the so-called rule-based languages in which a rule generally describes one or more biological reactions in a compact man- ner. Two such language, Kappa [2] and the closely related BioNetGen [4], describe the transformation of protein complexes at the level of binding sites. For example, a rule for adding a binding between two proteins can take the following form in Kappa: product side indicate a binding. The integer label identifies the bond, and different choices of integer labels are needed in the general case for writing complexes with more than one binding. Omitting a binding expression, as in the reactants, indicates that the sites are not bound.

The rule essentially just expresses the binding of SoS, in a certain complex, to Ras. But this essence is not immediately apparent due to the elaborate specification of binding sites and bond labels. In this paper, we propose a syntactic abstraction of Kappa, away from specific binding sites, which we call AL. This allows us to write the above rule in the following simpler form:

Related work has addressed the problem of adding structure to Kappa models as a whole. Little b [6] and LBS [8,7] both introduce a general notion of modularity with support for writing Kappa models, and an extension of Kappa with a perturbation language is introduced in [1]. None of these, however, address the representation of binding itself.

The graph-based nature of complexes in Kappa naturally lends itself to graphical specification and visualisation of rules, supported by tools such as RuleBase 3 . In a graphical context, the abstraction of bindings proposed in this paper may be of less relevance. We stress however that textual representations remain important: they are preferred by some for efficient model development, and they are central to efforts to introduce further structure, such as modularity, into models.

This specifies that an EGFR receptor can degrade when not already bound to an- other receptor, although it may or may not be bound to e.g. a ligand. A site number can be given for the exclusion, so e.g. A\(B,2) specifies that A is not bound on its second site to B.

The rule binds protein A to one of two B proteins, but which one? The choice could be based on the order of occurrence in rules, but that would give rise to a non-commutative + operator which can result in subtle errors; we discuss this in the context of Kappa in Section 4. We therefore adopt an alternative approach of pairing based on protein instance numbers, which as previously discussed are already used for distinguishing different occurrences of the same protein within complexes. We simply extend the scope of instance numbers to entire rules. The above rule could then be disambiguated as follows:

We start by giving an abstract syntax of Kappa based on the presentation in [5], but adapted for our purposes. We adopt the terminology of Kappa, and use the term agents as the abstraction for proteins in the language. For the sake of brevity, we omit initial conditions from both Kappa and AL.

The longest common prefix for this rule is A{s}, B{t,r}, A{s}. It consists of both agent names and site names. Reactant and product agents which are in the longest common prefix are paired by position and updated accordingly; agents after the prefix on the reactant side (here C) are deleted from any context; and agents after the prefix on the product side (here D) are created. This can give rise to subtle errors, for example if the order of the sites t and r were switched on one side of the rule. This problem is addressed in AL through protein instance numbers, creation markers and deletion markers. The translation from AL to Kappa orders both agents and the sites within agents appropriately.

Finally, a means of generating integer binding labels is needed. For notational convenience, we simply assume a given bijective function of the form bind(N,h, i, Nj, hj, j) = k where h/hj are instance numbers and i/j are site numbers. The function could e.g.

The denotational functions for agents and complexes use the given site renaming function for extending modification functions with appropriate binding sites. The case of a single binding gives rise to a set consisting of the two agents with their modifications composed with a new binding. Finally, in the case of a complex, i.e. a set of bindings, the denotational function is applied to each binding; the union of the result is obtained to get a set of agents; and the composition function is used to combine all the modification functions for the same agent.

It is clear that some Kappa rules, such as the one shown in the introduction, can be simplified significantly using AL. For other rules, in particular those with binding exclusion, the AL representation can be more complicated. However, from our (limited) experience with the EGFR case study, we observe that these more advanced language constructs are not needed for the majority of rules. In quantifiable terms, the rules in the AL EGFR model are on average 20% shorter than the rules in the original Kappa model.

models based directly on experimental data. In these cases it could be of interest to translate Kappa models to AL models for improved readability. Such a trans- lation should be straightforward to define. This could form the basis of a model development tool supporting two views, in Kappa and in AL, for editing the same model.

e.g. the rule B-D -> B + D. Although preliminary, this reasoning suggests that the binding-level semantic representation of complexes employed by Kappa may be the most natural one when seeking to handle combinatorial explosion in the number of protein complexes.

