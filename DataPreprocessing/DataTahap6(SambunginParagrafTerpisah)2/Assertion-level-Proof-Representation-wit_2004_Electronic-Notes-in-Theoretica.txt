We propose a proof representation format for human-oriented proofs at the assertion level with under- specification. This work aims at providing a possible solution to challenging phenomena worked out in em- pirical studies in the DIALOG project at Saarland University. A particular challenge in this project is to bridge the gap between the human-oriented proof representation format with under-specification used in the proof manager of the tutorial dialogue system and the calculus- and machine-oriented representation format of the domain reasoner.

by a human mathematician; the joint task was to construct proofs in naive set theory. Neither the tutor system nor the subjects were constrained in this experiments with respect to particular proof formats. The obtained corpus has now been analysed and provides us with valuable insights in the notion and nature of proofs constructed by humans in this field. Among the most prominent differences concerning specifi- cation of proof fragments and references to them are the level of granularity of these proofs, which is typically the application of theorems, axioms and lemmata, and the aspect of under-specification, for example, missing references to premise assertions, rule and instantiation specifications.

The term under-specification is borrowed from the field of computational lin- guistics; it means that certain aspects in the semantic representation of a natural language utterance are left uninterpreted, such that their proper treatment can be deferred to later stages of processing in which more contextual information is avail- able. The most prominent aspect for which under-specification has been used in computational linguistics is scopus of quantifiers. Since this use differs from the aspects relevant for our purposes, we refer to under-specification only for proof representations when seen from the mathematical/logical perspective.

User-Interfaces for Theorem Provers: The clarification of the notion of human- oriented proofs is very relevant for the design of user-interfaces for theorem provers. Our viewpoint coincides with [19], which investigates paper proofs instead of interactively constructed proofs with under-specification, in the sense that a clear separation between the optimally user-oriented proof representation in the user interface and the usually machine-oriented proof representation in the theorem prover appears increasingly important. The design and development of most current user interfaces for theorem provers often starts from the exist- ing functionalities of the concrete system and this approach typically strongly constrains the achieved and achievable solution.

In this paper, we are primarily concerned with defining a data structure for the proof that the user of the system is developing. The user is supposed to prove a theorem by informing the system about every proof step he/she takes. Since the communication between user and system is to be in natural language, it is impor- tant to devise an interpretation component that is able to map the natural language descriptions of the proof, such as the steps the user utters, into a formal representa- tion of the proof under development.

For the first stage, we decided to restrict ourselves to the domain of naive set theory, which is a rather basic mathematical theory that directly builds upon logic without making use of other complex theories. A major advantage of this theory is that it is manageable to a reasonable extent by current automated theorem provers. The investigation in more complex mathematical theories will be done in subse- quent experiments.

to a relevant and correct step of a proof of the theorem under consideration. If so, he only had to acknowledge the step, otherwise a hinting algorithm was invoked that decided what kind of hint should be produced by the system and the wizard had to verbalise the hint. The experiment setup is presented in more detail in [4]. The details of the hinting algorithm can be found in [9].

whether a formula given by the student is a derived fact or a subgoal for some previous goal. Sometimes this information can be derived or at least guessed by linguistic analysis from the textual parts in the student answer. However, in the experiments very often the student only inputted a formula without further description and then nothing is known about that formula.

In addition to under-specification, that is, incompleteness of proof step informa- tion, further challenges can be identified. These comprise correctness of the proof step, granularity of the proposed proof step, and relevance of the proof step. In a tutorial setting all of these aspects need to be addressed when analysing whether a proof step proposed by the student should be accepted by the system or not. In particular, we propose that the uttered proof step is first represented as a hypo- thetical step in an appropriate proof representation format (supporting hypothetical and probably under-specified steps) such that the different analysis tasks can be performed on this representation.

Accuracy: A proof step (or a whole subproof) uttered by a student is accurate if it can be verified as a correct inference. This is usually done with the domain reasoner. In the context of our corpus this mainly boils down to verifying (a) whether a fact is indeed inferable from the assertions in the context or (b) whether a proof goal can indeed be refined to a subgoal using some assertions in the context. In both cases the set of assertions may be under-specified and further information as already discusses above (position, intantiations, etc.) may be taken into account.

On a rough scale, a proof step is completely irrelevant if no proofs have to make use of this proof step. At the other extreme, a proof step must be used if every (known) proof of the theorem employs it. And, in between, there are also proof steps that are used by some proofs but not by all proofs.

Another aspect addresses a preferred proof (e.g., if teaching a specific proving strategy is part of the tutorial goal) and the current proof which the user and the system are pursuing (i.e., the current proof step must fit into the context of the proof under development).

Relevance is an interesting and very challenging issue and more research is needed here. We expect that domain specific reasoning techniques such as proof planning may play an important role for the automation of relevance investiga- tions. Traditional resolution or saturation based first-order reasoning systems, in contrast, appear less useful in this context because of the gap between their machine-oriented representations and search strategies to those used by the stu- dents.

named formulae N : F , or new constants and variables, possibly with some type. The Or(S1  ...  Sn) describes a situation, where from the linguistic analysis there are several possible interpretations resulting in different possible proofs. Resolving this non-determinism by proof checking and eliminate impossible interpretation

checking rule. Thus, the proof checking rules are sound relative to the soundness of the underlying calculus. Due to the presence of the rule for Trivial statements, the calculus is complete in theory if the underlying logic has a complete calcu- lus. However, this theoretical observation is only of limited interest in our context, since we envision the use of specific strategies to establish the respective lemmata. Thereby it certainly is not the case that these strategies are complete in the log- ical sense. A more worthwhile question is whether the set of strategies used for each individual kind of lemma implements a complete strategy. Or, formulating the question slightly differently, what are sufficient conditions to be fulfilled by each individual strategy in order to obtain a complete strategy? The answer to this question remains a challenging research problem.

If the strategy proves the lemma, but fails to find a proof object containing all the references indicated by the student, for instance only the references R1,..., Rk, it returns the information that although the proof step is valid, it is unclear why one should use R1,..., Rk. Furthermore, it also informs the tutor about other facts used in the proof and not stated by the student.

