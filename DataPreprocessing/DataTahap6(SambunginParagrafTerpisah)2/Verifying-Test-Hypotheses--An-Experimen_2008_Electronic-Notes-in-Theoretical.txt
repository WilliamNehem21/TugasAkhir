HOL-TestGen is a specification and test case generation environment extending the interactive theorem prover Isabelle/HOL. The HOL-TestGen method is two-staged: first, the original formula, called test specification, is partitioned into test cases by transformation into a normal form called test theorem. Second, the test cases are analyzed for ground instances (the test data) satisfying the constraints of the test cases. Test data were used in an automatically generated test-driver running the program under test. Particular emphasis is put on the control of explicit test hypotheses which can be proven over concrete programs.

Isabelle [9] is a generic theorem prover. New object logics can be introduced by specifying their syntax and natural deduction inference rules. Among other logics, Isabelle supports first-order logic, Zermelo-Fraenkel set theory and Higher-order logic (HOL), which we choose as framework for HOL-TestGen.

Isabelle can easily be controlled by a programming interface on its implementa- tion level in SML in a logically safe way, as well as on the Isar level, i. e., a tactic proof language in which interactive and automated proofs can be mixed arbitrarily. Doc- process, i. e., when all other rules can no longer be applied. Using a uniformity hypothesis for each (non-THYP) clause allows for the replacement of free variables by meta-variables which can be instantiated by ground terms during the test data selection phase later. This transformation is logically sound.

When generating the test cases for recursive data structures, HOL-TestGen generates instead of a regularity hypothesis (following the terminology introduced by Gaudel [8]), a so called data exhaustion theorem. This theorem is generated on-the-fly, its form depends on the structure of the corresponding datatype. The intuitive meaning of such a regularity hypothesis is: assuming that a predicate P is true for all data x whose size (denoted by |x|) is less than a given depth k, P is always true. For the user-defined value k = 2 and for the type list, we get:

That means that tests which are constrained to lists l which are sorted. Thus, HOL-TestGen has been used for substantial case studies involving the unit tests of red-black tree library implementations as well as firewalls [3,5]. In the latter, regularity hypotheses can be used to establish coverage of an automaton accepting a (protocol) language.

We address these questions by an attempt to test the hypotheses, and an attempt to formally verify them. With respect to the latter, we will specify the insertion-sort algorithm and use it in a (post-hoc) white-box setting. This verification will shed some light on the role of tests and proofs.

The proof of the uniform hypotheses (where PUT is now instantiated with sort, i. e., our presentation of the program) is straightforward and actually automatic. For the sake of this paper, we present the essential proof steps for one of the test hypotheses of the test theorem shown in Section 5 in detail. For example, we prove with Isabelle the second uniformity hypothesis (c.f. line 5 in the test theorem for is sorted shown on page 7) as follows:

With respect to our three initial questions, we can give the following summary: Test hypotheses establish a logical link between individual test data and disjoint test cases. Test hypotheses can be seen as a kind of proof obligation that is proven in later stages of validation if needed. Test hypotheses can give the test engineer a further means to control the quality of a test, an experience that is well confirmed in several larger case studies [3,5] done with our system.

