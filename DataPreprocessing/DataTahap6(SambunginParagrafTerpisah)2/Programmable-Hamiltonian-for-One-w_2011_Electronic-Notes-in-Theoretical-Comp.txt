We construct a family of time-independent Hamiltonians which are able to perform universally pro- grammable quantum computation. The construction is obtained via direct translation of one-way computer assembly language code into a Hamiltonian evolution. We also present how to evolve adiabatically to this Hamiltonian. It is hoped that this approach contributes further into the study of the structural relationship between measurement-based and adiabatic models of quantum computing.

The central question that this paper aims to make a progress upon is the study of the structural relationship between MBQC and AQC. Several methods for the adiabatic simulation of a given circuit have been already proposed [7,8]. These methods are essentially based on rewriting a circuit into rounds of computation with few gates in each round, which are then used to construct a corresponding local Hamiltonian. In another approach adiabatic evolution has been exploited to make the MBQC computation more robust [9]. Our construction differs from the previously known results in presenting a programmable Hamiltonian construction

One can count two of the main advantages of the one-way quantum computation as having an intrinsic parallel structure [14] and a rich graph theoretical toolkits for algorithm design [15,16,17]. Generally speaking, a model to have these prop- erties beside the advantage of having a programmable and robust continuous-time evolution is the main goal of this paper. The first step is a translation of one-way pattern into Hamiltonian evolution, which is presented next.

We finish this part with a comment on the parallelism. In our construction to achieve the same depth complexity of the one-way pattern, we could first dispose all the Z dependency of the measurements using the signal shifting scheme intro- duced in [1] and then parallelise the resulting controlled-gates using the techniques introduced in [14]. However this will effect the dimension of the program register. The study of structural links between locality and parallelism is outside the scope of this paper and demands a further investigation.

