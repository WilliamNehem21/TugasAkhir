Persistence of information is common in modern computer systems. This paper describes how to extend Petri nets, a traditional model of concurrent and distributed computations, to take account of conditions that are persistent. We found use for this kind of nets in modelling untrustworthy networks on which messages are exchanged according to a security protocol. The paper explains a construction where persistent conditions are unfolded and a basic net is recovered. Conditions are given under which the unfolded net exhibits the same finite behaviours as the original net with persistence.

We instantiate the definition of general Petri nets to an important case where in all the multisets the multiplicities are either 0 or 1, and so can be regarded as sets. In particular, we take the capacity function to assign 1 to every condition, so that markings become simply subsets of conditions. The general definition now specialises to the following.

We briefly introduce coloured nets following Winskel [11]. Coloured nets have been first introduced by Jensen [5] and are a useful abbreviation of Petri-nets. We consider the case of coloured nets where all multisets have multiplicity either 0 or 1, and therefore can be regarded as sets (see for example [11] for a more general definition). This simpler case will be enough for the purposes of this paper.

Our description of coloured nets, like many others, uses the notion of places and transitions. These have a higher level nature and stand for sets of conditions and events. Colours are associated to places and transitions so that one can think of a condition as of a place in a certain colour and of an event as of a transition in a certain colour.

will still consist of events and conditions related by pre- and postcondition maps which to an event will assign a set of preconditions and a set of postcon- ditions. But, now among the conditions are the persistent conditions forming a subset P . A marking of a net with persistent conditions will be simply a subset of conditions, of which some may be persistent.

The construction that we described in the previous section, which shows how to unfold a net with persistent conditions into a basic net, is correct when the runs of the net it yields are substantially the same as the runs of the original net. Not all nets with persistence unfold well if one applies the described construction. Nets unfold well if they do not have runs where events with per- sistent postconditions appear more than once in the same run. The following example illustrates the reasons for this restriction. Consider the net: so one might want to generalise the above result to runs in which events can occur simultaneously. There is a restriction, however. In basic nets, an event can either happen or not happen, whereas in nets with persistent conditions an event may happen with some multiplicity. The following net, for example, permits the event e to happen with any multiplicity:

