For example, one might use a join an array of bytes returned from the memory allocator, into an object of some particular type. Then one would use fields of the newly allocated object in a typed way. At some point one might want to split it back into array of bytes, use memcpy() to copy it somewhere, and then join it back again. Finally, one needs to split it and pass the array of bytes back to the memory allocator.

For example, let us take accesses to p1 = a1 ~b1 ~c1 and p2 = a2 ~b2 ~c2, done in the same 7 . We want to conclude p1 /= p2. For p1 the SMT solver computes embedding (7 , p1) = a1 ~b1 and path(7 , p1) = c1, while for p2 is is embedding (7 , p2) = a2 ~b2 and path(7 , p2) = c2. If c1 /= c2 we are done. Otherwise, we need to check if a1 ~b1 /= a2 ~b2. Using similar reasoning (the axiom above will be triggered again), if b1 /= b2, we are done, otherwise we look for a1 /= a2, which will hopefully follow from preconditions. Thus the axiom above allows for distinguishing between pointers, if any element of the path leading to them is different.

Proof. If [ss]1 does not get stuck or go wrong, we have the correspondence from Lemma 5.1. Otherwise the only difference between ss and [ss]1 are the additional conditions on memory accesses. They are however always OK since for any newly introduced join e1, 7 = 71 and for all other operations there was a preceding join e1.

C allows the definition of bit-fields in structured types, which are interpreted as a signed or unsigned integer type with the corresponding number of bits. Since most architectures do not allow for direct access to arbitrary bit ranges in memory, C compilers usually merge one or more consecutive bit-fields into a single underlying field of unsigned integer type. Accesses to particular bit- fields will then be transformed into bit manipulations on the underlying field. That is why C does not allow taking the address of a bit-field. We extend our

Except for the L4 kernel verifier, none of these verifiers deals with unions and bit fields. The memory model presented here is similar to the embedding of C in Coq developed as part of the ongoing certification of a moderately- optimising C compiler [16]. The SPARK programming language, a subset of Ada, has its own verifier [3]. SPARK avoids the issues with anti-aliasing and dangling pointers by disallowing allocation at run time entirely.

