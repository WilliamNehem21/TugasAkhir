deforest the intermediate term by replacing the composition of the decom- position function and of the plug function by a refocus function that directly maps a reduction context and a contractum to the next reduction context and redex, if there are any. Such a refocused normalization function (i.e., a normalization function using a refocus function instead of a decomposition function and a plug function) can be viewed as an abstract machine.

It is our experience that starting from a reduction semantics for a language of terms, we can refocus the corresponding reduction-based normalization func- tion into an abstract machine, and refunctionalize this abstract machine into a reduction-free normalization function. We have successfully tried this con- struction on the lambda-calculus, both for weak-head normalization and for full normalization. The goal of this article is to illustrate it with the simple examples of arithmetic expressions and terms of the free monoid.

In Section 2, we implement a reduction semantics for arithmetic expres- sions in complete detail and in Standard ML, and we define the correspond- ing reduction-based normalization function.	In Section 3, we refocus the reduction-based normalization function of Section 2 into an abstract machine, and we present the corresponding reduction-free normalization function. In Sections 4 and 5, we go through the same motions for terms in the free monoid. Sections 2 and 4 might appear as intimidating; however, except that they are expressed in ML, they describe straightforward reduction semantics as have been developed by Felleisen and his co-workers for the last two decades [27, 28,45]. For this reason, these two sections have a parallel structure. Similarly, to emphasize that the construction of a reduction-free normalization function out of a reduction-based normalization function is systematic, we have also

To define a reduction semantics for simplified arithmetic expressions (integer literals and additions), we specify their abstract syntax, their notion of reduc- tion (computing the sum of two integers), their reduction contexts and the corresponding plug function, and how to decompose them into a reduction context and the left-most inner-most redex, if there is one. We then define a one-step reduction function that decomposes a non-value term into a reduc- tion context and a redex, contracts the redex, and plugs the contractum into the context. We can finally define a reduction-based normalization function that repeatedly applies the one-step reduction function until a value, i.e., a normal form, is reached.

To define a reduction semantics for terms in the free monoid over a given carrier set, we specify their abstract syntax (a distinguished unit element, the other elements of the carrier set, and products of terms), their notion of reduction (oriented conversion rules), their reduction contexts and the corre- sponding plug function, and how to decompose them into a reduction context and the right-most inner-most redex, if there is one. We then define a one- step reduction function that decomposes a non-value term into a reduction context and a redex, contracts the redex, and plugs the contractum into the context. We can finally define a reduction-based normalization function that repeatedly applies the one-step reduction function until a value, i.e., a normal form, is reached.

In this section, we transform the reduction-based normalization function of Section 4.7 into a reduction-free normalization function, i.e., one where no intermediate term is ever constructed. We first refocus the reduction-based normalization function and we obtain a pre-abstract machine. We then sim- plify this pre-abstract machine into an abstract machine. This abstract ma- chine is in defunctionalized form, and we refunctionalize it. The result is in continuation-passing style and we re-express it in direct style. The resulting direct-style function is a traditional flatten function with an accumulator; in particular, it is reduction-free.

In this article, we have built on the computational content of a reduction- based normalization function as provided by a reduction semantics, and we have presented a simple, derivational way to construct a reduction-free nor- malization function. We have illustrated the construction on two examples, arithmetic expressions and terms in a free monoid. Elsewhere, we have success- fully constructed weak-head normalization functions for the lambda-calculus (a.k.a. evaluation functions) and normalization functions for the lambda-calc- ulus (yielding long beta-eta-normal forms, when they exist), thereby estab- lishing a link between normalization by evaluation and abstract machines for strong reduction [15, 33, 38]. We have also constructed one-pass CPS transfor- mations, which provide an early example of normalization by evaluation.

Ma-lgorzata Biernacka, Dariusz Biernacki, and Olivier Danvy. An operational foundation for delimited continuations in the CPS hierarchy. Technical Report BRICS RS-04-29, DAIMI, Department of Computer Science, University of Aarhus, Aarhus, Denmark, December 2004. A preliminary version was presented at the the Fourth ACM SIGPLAN Workshop on Continuations (CW 2004).

Olivier Danvy and Lasse R. Nielsen. Refocusing in reduction semantics. Technical Report BRICS RS-04-26, DAIMI, Department of Computer Science, University of Aarhus, Aarhus, Denmark, November 2004. A preliminary version appears in the informal proceedings of the Second International Workshop on Rule-Based Programming (RULE 2001), Electronic Notes in Theoretical Computer Science, Vol. 59.4.

