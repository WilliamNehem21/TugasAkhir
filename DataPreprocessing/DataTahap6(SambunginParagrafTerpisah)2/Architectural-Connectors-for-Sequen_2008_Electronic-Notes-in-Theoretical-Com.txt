A modelling approach that we consider very interesting is based on the use of architectural connectors [1,13]. In this approach, architectures are built in terms of two kinds of units: components and connectors. Components are not connected directly, but through connectors. Components implement some functionality while connectors describe policies of interaction of the connected components. Originally, the language used in [1,13] for the specification and modelling of components and connectors was CSP [8]. The work using this approach was followed by Fiadeiro (e.g. see [6]), who (in some sense) generalized the approach by putting it into a categorical context In this case, the modelling language used was the coordination language COMMUNITY.

In [3], we developed a very generic approach for the modelling of component- based systems whose aim was to allow the definition of component concepts asso- ciated to arbitrary formal or semiformal specification methods. The idea was that one could instantiate this generic approach to any arbitrary method, as long as one could prove that it satisfied certain properties. In particular, different instantia- tions were sketched in terms of Petri Nets, graph transformation systems or algebra transformation systems. Later, we generalized this approach by allowing, for in- stance, that components could have several interfaces and adapted it to deal with architectural connectors. The approach is described in detail in [5], but preliminary results were presented in [4].

In this section we will describe the basic ingredients of our generic framework. More specifically, following the approach introduced in [1], we consider two kinds of constructions: components and connectors. Components are units that provide some kind of services. Informally, a component is a unit consisting of a body and n interfaces, which we call ports following [1]. In the body the services provided by the component are fully described or implemented. On the other hand, a port provides an abstract view of the body i.e. of its behavior and of the services provided. Conversely, we may see the body of a component as a refinement of its interfaces. These refinement relations will be called transformations.

Components are connected through architectural connectors. In particular, a connector is a unit consisting of two or more interfaces, called roles, and a body (defined in terms of the glue in [1]). Each role describes the expected behavior and services provided by the component to which it will be connected, while the body describes the interaction of the components that will be connected through the given roles. In this sense, the body of a connector extends the specifications included in the roles by defining over them an interaction policy. We will say that in a connector the roles are embedded in the body.

To be able to link a role to a given port, they must be compatible. In particular, to be compatible, the port should be some kind of refinement of the role. Now, be- fore defining the semantics of this kind of composition, we must first specify in detail what are the basic elements (or parameters) that a concrete modelling or specifica- tion framework must provide to allow us to instantiate our generic framework for defining concrete notions of architectural components and connectors.

2. of parallel consistency ensure that such a union exist. Then, we have to check that the diagram S'' built by applying the implementation I to S embeds all the diagrams S''. This is straightforward. Finally, we have to ensure that we can build

Again, the refinement between this interface and the body of the component is just an embedding. The component associated to the set of buttons which are located in each floor could be described exactly in the same way as the previous one. Note that this would not have been true if there would be two buttons per floor.

