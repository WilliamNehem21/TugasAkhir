effort to adjust the existing development environments and to make the orga- nization fit towards the new technology. To keep the migration cost low, to not lose knowledge hidden in already existing applications, and to get the full benefits of MDD and appendant tool(s), the migration should be automated as much as possible. By exploiting technologies from areas such as software architectures, product line engineering, and reverse engineering the migration bypasses common technological change problems from the beginning. The concepts from these areas have in common the focus on patterns and how patterns are applied in model-driven development.

Model driven development approaches have demonstrated that they may im- prove current practices of software development. Design and concepts of an application can be reused in the context of another platform through di- vorcing business logic from technical implementation details Current MDD approaches support the abstraction from concrete implementation technolo- gies through meta-models, which practically define domain-specific languages. Interest groups like the OMG are often responsible for creating these meta- models. This leads to more complete and standardized meta-models but often results in epistemic meta-models capturing concepts that are not of any in- terests to products of a particular organization. Therefore successful MDD approaches are often architecture-centric and bound to a given implementa- tion technology such as J2EE. In other words, some MDD approaches are driven by the target platform and not by the envisioned system architecture. This constitutes a gap between theory of model-driven development, which proposes a waterfall approach, and practice, which in this case proceeds in a bottom-up manner.

Reverse engineering as defined in [4] analyzes the various artifacts of existing software systems and extracts information about them (with techniques such as pattern matching, component identification, etc.). Assuming that both, the manually implemented application and the MDD-implementation, are based on the same set of technologies (e.g., J2EE), then there are technical simi- larities but also alternative solutions of identical technical problems, such as GUI, transactions or persistence. The goal is to transform an existing applica-

The case study presented in this section is based on a hypothetical mobile phone company, the GoPhone Inc, a publicly available [12] test bed developed especially for the purpose of validating and illustrating product line meth- ods, techniques, or tools. In the case study, PuLSE-MDD was applied in the reengineering-driven mode. The architecture and the manual implemen- tations of existing components have been analyzed to identify patterns, which in turn were applied to generate code frames for further components in the application layer. In several iterations an initial pattern set was identified and implemented for the chosen implementation technology (J2ME).

