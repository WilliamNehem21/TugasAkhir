Formal generalized sketches is a graph-based specification format that borrows its main ideas from cate- gorical and ordinary first-order logic, and adapts them to software engineering needs. In the engineering jargon, it is a modeling language design pattern that combines mathematical rigor and appealing graphical appearance. The paper presents a careful motivation and justification of the applicability of generalized sketches for formalizing practical modeling notations. We extend the sketch formalism by dependencies between predicate symbols and develop new semantic notions based on the Instances-as-typed-structures idea. We show that this new framework fits in the general patterns of the institution theory and is well amenable to algebraic manipulations.

People like drawing pictures to explain something to others or to themselves. When they do it for software system design, they call these pictures diagrams or diagram- matic models and the very notation for them a modeling language. Syntax of dia- grams is accurately specified in the so called metamodel but the intended meaning or semantics of diagrammatic constructs often remains intuitive and approximate. Sometimes it is so fuzzy that the construct becomes close to be meaningless at all,

The first is to motivate the applicability of the DP-logic pattern for formal- izing practical diagrammatic notations used in software modeling. We show that generalized (rather than classical categorical) sketches appear on the scene quite naturally. In addition, it is very convenient to record some logical rules right in the signature of predicate symbols by introducing dependencies between the predicates [28].

In more detail, the contents of the paper is as follows. In section 2 we carefully motivate essential features of the machinery we are going to define: what are the benefits of classical categorical sketches, why we need their modification to general- ized sketches, and why it is convenient to introduce dependencies between predicate symbols. In addition, we argue for IATS semantics as opposed to indexed seman- tics. In section 3 we first consider and discuss two simple examples of modeling with sketches, and then (subsection 3.2) discuss how to specify systems of mod- els/sketches in the institution framework. These two sections aim mainly at goals

We see the present paper as a common root of two lines (in fact, trees) of future work. One is to adopt the sketch formalism for formalizing modeling languages actively used in software engineering practice and specified in the corresponding industrial standards. Especially intriguing is to try to adapt the sketch patterns for behavior modeling. We also plan to explore how naturally can sketches be used for addressing real practical problems.

