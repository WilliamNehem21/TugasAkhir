Concurrent programs are ubiquitous: multi-threaded programs in network servers, distributed programs for database applications, etc. In order to guarantee their correctness and security properties, it is important to verify them formally. The main difficulty in formally verifying concurrent programs is the size of their state space. The latter can be very large (because of non-determinism) and even infinite (for non-terminating applications, such as reactive systems).

Regarding concurrency, previous work using proof assistants has focused on ab- stract concurrent systems rather than on realistic concurrent programs. There are many formalizations of pure concurrent calculi (e.g., [13,17,18,28,29]) and experi- ments with the combined use of proof assistants and model checkers for minimal concurrent languages (e.g., [22,32]). This work demonstrates the usefulness of proof assistant-based formal verification for concurrent programs. However, the formal- ized calculi and languages are cumbersome to verify realistic concurrent programs because of the lack of datatypes. Moreover, in view of the large proof develop- ments in previous work, it is questionable whether such verifications can be done in practice. For these reasons, we think that formal verification of realistic concurrent programs has not yet been addressed satisfactorily.

A collection of lemmas in order to facilitate formal proof. The most effective lem- mas are based on confluence properties. They allow for smaller formal proofs by reducing the state space that needs to be explored for the purpose of verification.

Our encoding can be said to be a deep embedding because we define the syntax as an inductive type that we use in the next section to define the operational semantics. However, the ability to integrate Coq functions gives it also the flavor of a shallow embedding. See [6] and [23] for definitions.

Concerning temporal formulas, an important issue developed in our specification language is formalization of strong fairness. Intuitively, strong fairness is a system property enjoyed by execution environments in which communications that can execute infinitely often are eventually scheduled for execution. It is an important assumption without which we cannot write satisfactory specifications for realistic concurrent programs. For example, let us consider the following program:

A property that one might want to check is that the process OutAtom e v is even- tually revealed. However, without the fairness assumption, this property does not even hold. We show in Sect. 3.1 how we encode the fairness assumption and in Sect. 3.2 we give the semantics of the formulas of our specification language.

We formalize the notion of strong fairness. Informally, strong fairness says that any process that is infinitely often enabled is eventually reduced 5 . We need a few intermediate definitions. We say that P is a subprocess of Q when Q consists of the parallel composition of P with some other process(es). The predicate reduced P Q R intuitively means Q reduces to R by reducing its subprocess P. The formal definition is omitted for lack of space.

In our implementation, the satisfaction relations are axiomatized. This is be- cause the formula for negation does not respect the positivity constraints imposed by Coq. This problem has already been observed in [29]. This is not problematic as long as we do not study formally the properties of the formulas.

At this point, we are able to write a concurrent program P, a (temporal) property f, and we can try to prove tsat f P using Coq tactics. This direct approach is tedious because the Coq native tactics are too low-level and not adapted to the problem at hand. Our solution is to propose a collection of lemmas (and accompanying tactics) to facilitate formal proof.

The main difficulty in proving properties of concurrent programs is non-deter minism. In order to prove a property for some program, one often needs to check all possible runs. This is at best costly and often impossible because there may be infinitely many runs or because some process is unknown. To deal with these

We evaluate feasibility of verification of concurrent programs using our library. Our case study is the SMTP receiver part of an existing mail server. In short, this program receives and processes SMTP commands, sends back SMTP replies and queues received electronic mail.

We chose this application for the purpose of comparison. Indeed, we have already performed verification of this application in Coq using a different approach that consists of building a faithful functional model [2]. In short, the original Java implementation was turned into a Coq function using monadic style programming, third-party programs (client and file-system) were modeled using Coq predicates and non-software aspects were modeled using functional constructs (for example, non-deterministic system failures were modeled using infinite lists to serve as test oracles). Arguably, this approach has little overhead because it takes advantage of the Coq built-in support for functional programs. Therefore, comparison should highlight the overhead of using our library for verification.

Coupet-Grimal [9] proposes an encoding of linear temporal logic in Coq. Tem- poral formulas are defined for an abstract transition system and their properties are collected into a library that has been used to prove correctness of a garbage- collection algorithm [10]. It would be useful to integrate similar reasoning on tem- poral formulas for our language.

