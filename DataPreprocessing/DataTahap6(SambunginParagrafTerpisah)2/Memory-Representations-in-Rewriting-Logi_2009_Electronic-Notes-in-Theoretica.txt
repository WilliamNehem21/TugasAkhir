In earlier work [14], the impact of design decisions on performance was explored in the context of KOOL [13], a pure, object-oriented language defined using rewrit- ing logic semantics. That work focused on two particular facets of the language design: the representation of all values as objects, and the use of a global flat mem- ory representation. Analysis performance was improved by making changes to each of these facets. For the first, scalar values were introduced alongside objects, with auto-boxing functionality used to automatically convert scalars to objects when needed. For the second, memory was divided into pools, one global pool for shared memory, and one local pool for memory locations visible in only one thread. These modifications improved analysis performance dramatically, with auto-boxing also improving execution performance.

As mentioned above, it is not possible in SILF to dynamically allocate memory or take the addresses of variables. This prevents addresses from escaping a function, since there is no way to return a pointer to something inside the function; because of this, it should be possible to discard all memory allocated for the function call when the function returns 5 . A conceptually simple way to do this is to change from a flat memory to a stack of memories, with the memory for the current function on top and the global memory on the bottom. Memories can still be treated as sets of StoreCells, but each set can be much smaller, containing just the cells allocated in the current function, and each set can easily be discarded simply by popping the stack at function return. Following this reasoning, the memory model for SILF can be changed appropriately:

KLocs deserves special comment, since it is the main operation that needs to be modified to account for new language features. KLocs is defined for each compu- tation item in the language that may hold locations. This means that, when new computation items which can contain locations are added, the collector must be updated properly. A method of automatically transforming a theory into one with garbage collection would eliminate this potential source of errors.

One point which has not yet been addressed is correctness. Adding a garbage collector to a language should not actually change the results of any computation. The proof that this holds true is sketched here, and will be included in full in a technical report.

First, by definition, if the collector works correctly program behavior will not change. This is because only unreachable locations will be collected; since the values stored at these locations cannot be used in the computation, removing them will not alter the results of the computation. Only if the collector either alters the value at a location or collects a reachable location will program behavior potentially change. Showing that the collector is correct then involves showing that the following facts hold: 1) When the root locations are gathered from the state, no root locations are missed; 2) locations reachable from the root locations are always marked; 3) values at marked locations are not changed by the collector; 4) marked locations are not collected.

[21]. The work in this paper is related to prior work on SILF [12] and KOOL [14,13]. Research in rewriting logic semantics focused on performance has mainly been aimed at analysis performance instead of execution performance. Earlier work on Java focused on producing a high-performance analysis tool for both the Java lan- guage and Java bytecode [11,9], while earlier work on KOOL focused on improving analysis performance, even potentially at the expense of reducing execution perfor- mance [14]. There has also been some work on techniques, such as partial-order

Outside the realm of rewriting logic semantics, research on memory manage- ment, including garbage collection, has been extensive. The collector presented here is novel only in that it has been formally defined in rewriting logic, but be- yond that is a fairly basic mark-sweep collector. Resources on garbage collection [17], including research focused on pure object-oriented languages [27,28], provide additional information on this topic.

