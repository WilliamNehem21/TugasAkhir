is no model associated with network security proposed to be used with these techniques. Accordingly, we propose a new formal verification tool which is specific to network security policy. It includes a model of the application security policies, the network security policies/mechanisms and the network topology.

The paper is organized as follows. In section 2, we explain what is meant by network security from our perspective. In section 3, we define our formal specification language and our formal evaluation method. In section 4, we present our tool which implements the previous concepts and automates the evaluation task. Also, we expose a small example of use. Finally, in section 6, we show our conclusions and our plans for future work.

We describe the semantic of our language using the Colored Petri Nets (CPNs). CPNs [15,17] provide a framework for the construction and analysis of distributed and concurrent systems. A CPN model of a system describes the states in which the system may be and the transitions between these states.

We append a list of roles to each EF for indicating the flows that the EF can produce. The list corresponds to the set of roles assigned to the user representing the connected active entity for an AEF. In the case of a PEF, it is the set of roles assigned to the permissions that concern an object of the connected passive entity. In a CPN built from one of our specification, a token corresponds to a particular flow.

The channel functionality models the physical network. It receives the flow on an interface and retransmits it to all the connected entities. This functionality may be viewed as a broadcast channel. When a flow is oriented, it is not only received by the addressed destinations but also by all of the systems connected to this channel. The functionalities which propagate data flows are specified , functn. We also add a place (ci hist) which contains the list of all the to- kens that have passed through the channel. It is connected to each transition to ensure us that a token can pass once and only once through a channel functionality.

We use the model checking technique to determine if a specification satisfies the security properties. Nevertheless, this technique is sensitive to the com- binatorial explosion problem. Thus, we expose two theorems that allow us to limit our analysis of the CPN to only two states of the reachability graph.

The servers are specified by two PEF. The App Server server has the VPNmembers role because only the users with the VPNmembers role have access rights. The PEF corresponding to the FTP server has the roles Others and VPNmembers because the permission (+all access, FTP Server/pub) is assigned to the Others role and (+all access, FTP Server/confidential) to the VPNmembers role.

Most of the network security analysis techniques (for example [1]) only check rules conflicts. They do not consider the global security policy. The work [10,11] is really interesting because it proposes a solution that formally evaluates IPsec VPNs. It models the network on a directed bipartite graph. The nodes of the graph are areas, collections of hosts and networks which are similar in terms of security policy; and devices, which are dual homed hosts or packet filtering/IPsec routers connecting the areas and moving packets between them. Nevertheless, the users are ambiguously considered. That implies that all hosts in a given area own the same set of privileges.

if there exists cycles in structural paths - e.g. < x2, x3 > is a cycle in the path < x1, x2, x3, x2, x3, x4 > - then there is an infinite number of pos- sible paths between x1 and x4, as < x1, x2, x3, x2, x3, x2, x3, x2, x3, x4 > because a token that can pass two time through a place can pass in- finitely. However by construction, a cycle in the CPN implies that the associated specification contains a cycle too (i.e., there are different paths between two functionalities). And always by construction, there are at least two channel functionalities in a cycle. A channel functionality re- transmits a token with a specific color < a, b, c,d > once. Considering that each flow can only take two possible colors < a, b, EF,d > and

Inversely, the properties of availability and partitioning impose that there must exists a state such that a specific place with no post-arc contains a specific colored token. If such a state exists then the dead state satisfies the property. Moreover, if the place contains the token in the dead state then such a state exists.

