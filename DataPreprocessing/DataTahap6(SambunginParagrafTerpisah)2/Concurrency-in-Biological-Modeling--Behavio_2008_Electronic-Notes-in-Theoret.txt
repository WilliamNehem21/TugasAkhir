pyramid to indicate that the pyramid is incomplete and can be extended in both directions. Downwards, we may zoom in and model gene expression and protein activity using a variety of mathematical and computational tools (for example, see [3,19,25,26,27]). Such extensions address the task of modeling the behavior of many concurrent molecules as they are expressed in the cell and interact over time. Conversely, we may zoom out and add upper levels to the pyramid. Thus, we can model concurrent interactions between different organisms, not necessary of the same species, in a population. A comprehensive model of a mouse, for example, may be used to specify the interactions within a population of mice and may help in understanding how the population behaves under various circumstances, such as starvation.

The function and development of an organ are largely dependant on interactions between cells and their environment. Very often the environment consists of several tissues that generate various signals (e.g., secreted molecules) and thus affect nearby cells and tissues. The various objects of the organ, mainly cells, receive the signals and cooperate to form the organ and drive its behavior over time.

Inspired by ideas from the Turing instability hypothesis [34,35], we formalize surrounding environments as a 3D grid that overlies the organ. Accordingly, the space surrounding the organ is divided into 3D grid-cubes with a fixed volume. Objects, representing different elements in the environment, regulate concentrations of factors that are stored in grid-cubes. At run-time, autonomous cells sense the various factors and act accordingly. The animated front-end can then visualize each element of the model and expose, at run-time, the formation and behavior of the organ. The visualization is best set up to be consistent with illustrations and descriptions of the system as depicted in the biological literature.

When the model is executed, the environment is initiated and instances of the Cell are created and appear in the front-end at their initial positions. Once a Cell instance is created, one state in each concurrent component of its statechart is set to be an active state. At this point, the Cells are uniform and their active states are set to their initial states (designated in the statecharts by stubbed arrows). As the simulation advances, the cells respond concurrently to various events by changing their active states accordingly. Hence, the population loses uniformity at a very early stage of the simulation.

Analysis of the models also revealed some very interesting emergent properties, which correspond well with biological phenomena. For example, in the pancreas model, we found that concurrent execution of pancreatic cells gives rise to a prop- erty that corresponds well with endocrinic clusters found to appear early in the developing organ in vivo [30]. Similarly, the concurrent execution of T-cell develop- ment in the thymus led to the emergence of competitive behavior between the cells [6]. We analyzed and studied these properties and suggested some insights into the phenomena [8,30].

Recent work in our group, that was also inspired by the aforementioned ap- proach, has produced a system we call GemCell [1]. It contains a generic statechart model of cell behavior, which captures the five main aspects of cell behavior (prolif- eration, death, movement, import and export). This generic model is coupled with a database of biological specifics (DBS), which holds the information about the spe- cific cellular system. Modeling a particular segment of biology involves setting up the DBS to contain data about the specific behaviors and responses of the particular kinds of cells in the system under description. During execution, statecharts read in the specific data and the combination runs just as described in the particular models above. This project is still in its early stages of development.

specified as reactive systems [13,14]. This observation has led to quite a lot of work on modeling biology using various software engineering tools and ideas to simu- late concurrent behavior in various natural systems. Furthermore, this approach incorporates cental modeling elements, such as time and stochasticity (e.g., the simulation in different runs with same initial conditions does not necessarily give identical results).

[38] provides a model for eukaryotic cell in which UML class diagram was used to formalize the relations between a cell and its sub-cellular elements. The setup was empowered by specifying behavior of different cell types (e.g., red blood cell) using the ROOM formalism. Similar approach was employed in [32] to model the Ethylene-Pathway in Arabidopsis thaliana using statecharts and LSCs. Another approach for modeling is described in [11], where hybrid automata were employed to model the Delta-Notch mechanism, which directs differentiation in various natural systems. This model reproduces the Delta-Notch decision: cells that express Delta are surrounded by cells that express Notch.

This paper emphasizes the idea of decomposing a natural system into its concur- rent components, which are then modeled and reassembled to form comprehensive emerging simulations of the system. We recognize concurrency along two dimen- sions: vertical concurrency between different levels of abstraction, and horizontal concurrency between the basic elements on the sub-levels. Using this approach, we can specify behavior for concurrent elements and reassemble them horizontally and vertically to form a comprehensive model. Using reactive engines, we can then ana- lyze and execute the specifications and observe the effect of the concurrent execution of the basic elements as a population.

