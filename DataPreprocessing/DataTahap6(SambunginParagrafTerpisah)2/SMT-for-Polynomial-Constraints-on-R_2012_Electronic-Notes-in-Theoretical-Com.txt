We apply very lazy theory learning [15] for interaction with MiniSat 2.2. Ini- tially, an SAT instance given from SAT solver describes possible combinations of input ranges. If interval arithmetic (IA) reports unsatisfiability (IA UNSAT), such combinations are removed for next SAT searching by memorizing them as learnt clauses to SAT solver. If IA reports validity (IA VALID), any instances in the ranges is satisfiable. If IA finds neither validity nor unsatisfiability (IA SAT), each polynomial is examined by testing.

The structure of paper is organized as follows. Section 2 describes the poly- nomial constraints and theory learning strategy in terms of abstract DPLL [15]. Section 3 explains variations of interval arithmetic and newly proposes Chebyshev Approximation Intervals, CAI1, CAI2. Section 4 describes testing strategies. The framework of our SMT solver is described with examples in section 5. Preliminary experiments on small examples from SMT-LIB benchmarks [1] are reported in sec- tion 6. Section 7 discusses some related works, and section 8 concludes the paper with future work.

Satisfiability Modulo Theories (SMT) is a procedure to detect satisfiable instances under a background theory. A typical arithmetic theory is Presburger arithmetic (linear arithmetic) over integers and real numbers. It decomposes a problem into SAT solving as case analysis and theory as arithmetic conjunctive constraint solving. Interaction between SAT solving and theory has Lazy and Eager strategies, which are described below as Abstract DPLL modulo theories [15].

Reducing the number of unnecessary test cases is an important task to improve efficiency. For instance, if we consider 10 variables and each has 2 test cases, then we have 210 instances as a total. In solving that problem, we divides constraints into small groups (constraints in a group share some variables) and we compute satisfiable test cases for each group first.

SAT solver: We use MiniSat2.2 as a backend SAT solver. The SAT solver finds a satisfiable combination of input ranges of all variables. A satisfiable (SAT) instance is sent to IA for checking. If the SAT solver returns unsatisfiability, we conclude unknown if testing is applied, otherwise we conclude UNSAT for the final result.

P1 was checked by AF1, AF2, CAI1 and CAI2, all of them give SAT results. For the problem P2, while AF1 and AF2 detect unknown, CAI1 and CAI2 detect UNSAT because CAI1 and CAI2 give better results for over - approximation than AF1 and AF2 in this problem. The Initial interval decomposition divides given ranges of variables into ranges with the width 1.

[19] and iSAT [8]. While RSOLVER develops a pruning algorithm to remove un- satisfied elements, iSAT applies a tight interaction of SAT solver and eager theory propagation. Thus, conflict detection and theory propagation are directly applied for SAT solver to provide new assignments. Our approach is combining testing (as under-approximation) with interval arithmetic. It will supply more opportunity to conclude satisfiability, furthermore it will guide more likely range decomposition. We also apply Chebyshev Affine Intervals, instead of using CI in RSOLVER and

