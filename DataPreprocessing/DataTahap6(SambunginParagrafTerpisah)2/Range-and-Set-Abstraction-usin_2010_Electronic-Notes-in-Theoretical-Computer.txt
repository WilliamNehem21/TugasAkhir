i.e. the class of weakly-relational domains [15,19], and domains that better match the structure of real programs i.e. symbolic decision trees that correlate the relation- ship between status flags and numeric variables [1]. This paper focuses on relating status flags to numeric abstractions that are ranges and sets. Blanchet et al [1] illustrates the need for mixed symbolic and numeric abstractions with pseudo-code that is given below:

formulae can be applied directly in the analysis itself in an analogous way to decision trees. However, unlike the decision tree approach, we do not enforce a canonical representation and thereby finesse the size problems that are associated with such data-structures [3]. Instead, we express the semantics of a block as a single proposi- tional formula which can readily be derived with bit-blasting techniques [13]. This formula encodes all the relationships between all the registers and all the status flags, albeit at bit-level granularity. Abstraction is then applied to the formula to extract range invariants that always hold whenever the block is encountered, ul- timately allowing the control flow to be recovered. Furthermore, we may impose range information on entry to the block and observe ranges at the exit, again by applying abstraction. This is similar in spirit to work on best transformers [18], but from a propositional stance. In this paper, we focus on how to abstract Boolean formula for range information. Specifically, we make the following contributions:

We show how to refine the range abstraction technique in order to discover bound- aries within the range that partition it into a set of ranges. This technique relies on computing over- and under-approximations of the vector in an alternating fashion. This process ultimately converges onto a set S that exactly describes the values of the vector. However, if desired, this process can be terminated prema- turely, after n steps, to compute a set that approximates the values of the vector. To be precise, if n is odd then an over-approximation is computed (a superset of S) otherwise if n is even then an under-approximation is found (a subset of S).

Range abstraction alone cannot accurately model such sets of indices and addresses and therefore it is necessary to instead employ set abstraction. Since an n-ary bit- vector x can assume up to 2n distinct values, the set itself can be large, at least in the pathological case. Therefore, for cautionary reasons, we seek to compute an over-approximation (superset) that keeps the size of the set manageable. As a by-product of this construction, we are also able to compute under-approximations (subsets) of the set of values that bit-vector can assume when constrained by a given Boolean function f .

Decision procedures have also been applied when computing best transform- ers [18]. This work is more akin to our own since here the decision procedures are applied within the transfer functions themselves rather than in just deriving them [2]. Moreover, the best transformer work does not address bit-vector encodings, and hence does not consider the associated problem of computing range and set abstractions of their values.

Of course, CFG reconstruction remains a challenging problem and Linn and Debray [14] have shown that industry standard disassemblers such as IDA Pro can be persuaded to misinterpret large portions of a binary program. This suggests that more robust disassembly techniques must be developed with anti-reversing techniques in mind. Obfuscation techniques such as those based on pre-empting POSIX signal events [14] are likely to remain out of the reach of analysis for some time.

