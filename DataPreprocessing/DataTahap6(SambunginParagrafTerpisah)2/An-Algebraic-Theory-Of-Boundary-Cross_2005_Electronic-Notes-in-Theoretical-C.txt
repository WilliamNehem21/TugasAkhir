Statecharts [6] is a visual language for specifying reactive, embedded and real- time systems. This formalism extends finite-state machines with concepts of hierarchy (state refinement), concurrency, and priority (preemption among transitions). The success of Statecharts in the software engineering community is founded on its easy-to-learn graphical syntax and its support for the hier- archical modeling of complex control software. Dialects of the language [22] may be found in several commercial design notations, including ROOM [19] , STATEMATE [8], Stateflow [10] and UML [4].

Related work on giving meaning to boundary-crossing transitions have been published by Mikk, Lakhnech and Siegel in [15]. It introduces extended hiererachical automata (extended HA) that acts as an intermediate format to facilitate the linking of new tools to the [7] Statemate environment. Closely similar to the Argos language [14] (which do not support boundary crossing transitions) extended HA provide support for boundary crossing transitions by using prioritized transtions.

Other formalisms have also used ideas similar to the entry/exit points we define. The idea of splitting transitions in order to localize information has been used in ROOM [19]. In [2], Alur and Grosu define a new Statecharts- type language with compositional semantics and modular reasoning. They also deal with boundary crossing transitions by splitting them into entry and exit points. However, their language contains no events, and their semantics, which is trace-based, has the same problems in modeling nondeterminism and conjunctive nondeterminism that the Huizing-Gerth-de Roever work does.

This section introduces Hierarchical State Machines (HSMs), which are a frag- ment of conventional Statecharts. Like Statecharts, HSMs permit the defini- tion of hierarchical state machines with boundary-crossing transitions; unlike Statecharts, HSMs have no provision for concurrency, and transition labels may only contain simple events (no trigger/action pairs, no negated events, etc.). In this paper we study HSMs rather than Statecharts in order to study boundary-crossing transitions; at the end, however, we discuss how our work may be combined with that of [11] in order to obtain a compositional theory treating these other language features as well.

We close this section by commenting on how HPA may be enriched in order to model the other features of Statecharts, including concurrency and preemption. In [11] a process algebra, SPL, was introduced in order to give a compositional semantics to Statecharts without boundary-crossing transitions. The syntax of SPL is parameterized with respect to a set of labels (event names); it shares some operators with HPA (+, recursion), has some operators that are not present at all in HPA (emit, parallel composition, restriction, delay), and has some that are similar to, but differ in key respects, from those in HPA (prefix, disabling, enabling). The operational semantics is given via a transition relation that is labeled with two sets of events: those emitted, and those that must be absent from the environment. It it straightforward to merge HPA into SPL as follows: add entry, enter, exit and handle operators; use the SPL notion of prefixing; adapt the definitions of parallel composition and restriction to be sensitive to HPA transition labels; and modify the SPL disabling operator in order to introduce an exit-handling capability. Since the transition labels of SPL and HPA are disjoint, the modifications are not difficult. However, the resulting language is somewhat large; for this reason we have focused our technical development on HPA in this paper.

