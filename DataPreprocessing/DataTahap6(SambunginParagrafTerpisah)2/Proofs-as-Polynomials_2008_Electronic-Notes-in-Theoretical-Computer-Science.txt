The notion of categorical trace was introduced by Joyal, Street and Verity in an influential paper [25]. The motivation for their work arose in algebraic topology and knot theory, although there have been many applications recently in Computer Science. For references and history, see [1,3,20].

In [22] we went one step further and looked at partial traces. The idea of generalizing the abstract trace of [25] to the partial setting is not new. For example, partial traces were already studied in work of Abramsky, Blute, and Panangaden [2], in unpublished lecture notes of Gordon Plotkin [28], work of Blute, Cockett, and Seely [5], and others. For a comparative account, see [22].We shall briefly recall the notion of partial trace from [22].

Remark 4.3 Notice that if we choose  p  D = ( p  , p  ) for atomic formulas p, then  A  D = (  A  , A  ) for any formula A, (see Proposition 4.4 below.) This is as

Remark 4.6 (Comparing Interpretations) As we have seen above, the two se- mantics are entirely different regarding the way they interpret the formulas, and the interpretations of proofs are related by the Execution formula as in Proposition 4.4 above. In particular, for cut-free proofs, the MGoI and Denotational interpretations into the Int category G(C) coincide.

*-autonomous category whose objects are Girard types and whose morphisms arise from the GoI interpretation of proofs. The same construction could be done here. This might be a more natural domain for a denotational modelling than the compact category G(C) which we worked with above. We shall examine this in the full version of this paper

In summary, denotational semantics does not normally keep track of cuts and has no separate formulation (interpretation) for the removal of cuts (e.g. the execution formula): the removal of cuts is hidden in the composition in the model category. In this paper we wanted to have cut-elimination steps incorporated directly into the interpretation, while still being able to compare this with the denotational view, as in Proposition 4.4 above.

Theorem 6.2 in Section 6.1 above may be applied to give a characterization theorem for the untyped (i.e. uni-object) GoI semantics for MLL, as discussed in our papers [20,21]. The theorem below is related to work of Danos and Regnier on path-based computing [7]. We hope in future work to detail these connections. We shall recall only the definitions that we use in the theorem below and refer the reader to [20] for details about GoI semantics in UDCs.

Proof. (of Theorem 6.5) We shall give a sketch of the full proof that will appear in the journal version. Recall that as we are working in a traced UDC, the MGoI interpretations of proofs restricted to a single object U can be represented by ma- trices of their components. As such they are symmetric permutation matrices with zero diagonal entries, by Proposition 6.1.

