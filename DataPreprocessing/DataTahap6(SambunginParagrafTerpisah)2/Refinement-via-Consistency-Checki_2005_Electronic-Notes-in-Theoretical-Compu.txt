Refinement is a key practice in the Model-Driven Architecture initiative of the Object Modelling Group. However, the practice is loosely defined, overloaded, and open to misinterpretation. In this paper, we outline ongoing work on providing a precise definition for refinement via consistency checking, not only in the context of MDA, but more generally for model-driven development in a variety of domains.

MDD is not a development method or process; it can be implemented in a number of ways, e.g., via Extreme Programming, the Rational Unified Process, the B-Method, or a refinement calculus. The key element in MDD is the construction and transformation of models that are fit for the purposes of the development project. The languages and processes used in construction and transformation will vary from project to project.

Perhaps surprisingly, refinement is a key concept in MDA. This is surpris- ing for two reasons. First, the languages prescribed in MDA are UML-based and generally do not provide the level of formality one might expect in a refinement-based method. Second, the languages used in MDA are multi-view, and as such it is difficult to achieve seamless refinement-based development with them.

The issue of what constitutes a valid refinement step is an interesting one. The idea in MDA is that predefined transformations (written in a standard transformation language, QVT [6]) will be applied in order to go from PIM to PSM, or from PSM to code. Custom (often hand-written) refinement steps will be used in order to refine within a particular type of model, e.g., from PIM to PIM. The latter type of transformation is usually dependent on the application context. Thus, it is assumed that in general many of the transformations that are being applied have been previously validated by an MDA expert, and thus are safe to apply - providing that the rules for applying the transformation are obeyed 2 . However, this does not help in validating custom, hand-written

There are two essential parts to MDA: languages for expressing models, and transformations applied to models. The languages used in MDA are generally UML-based, and as such are built atop the Meta Object Facility (MOF) [10], which is a core language for defining languages. Thus, the transformations used in MDA are defined in terms of MOF and its core constructs, e.g., classes, objects, features.

The difficulties associated with this rigorous approach to defining refine- ment in MDA are typical of attempts to attach formal analysis techniques to semiformal languages after the languages have been defined. The difficulties are perhaps more pronounced in MDA because of the layered nature of the languages used, i.e., UML defined in terms of MOF.

A diagram can be used to express one or more views of a model; non- graphical languages can also be used to capture views. A diagram is expressed in a language. The language itself consists of a syntax and a metamodel, which defines the well- formedness constraints for the language. For example, the metamodel for UML class diagrams will contain a constraint stating that all classes in a diagram must have unique names.

We can express rules like these (and others) in OCL so that OCL evalua- tion can be carried out. This process is quite straightforward and simple to implement. For example the OCL fragment below implements the first rule of the above list.

In MDA, structural and state-based rules are insufficient to fully capture model consistency, since the overall system model is split into several parts, e.g., PIM and PSM. Thus, the rules discussed in the previous section must be applied to check for consistency. As well, at least two additional kinds of consistency must be checked.

Consistency of PSMs with the domain: Each domain (e.g., information sys- tems, database design) has domain-specific rules that should not be broken. Since these rules might not be directly imposed by the modelling language syntax, extra mechanisms i.e., stereotypes or metamodel refinements must be applied in order to ensure their application. Thus, for each different application domain, a set of domain-specific rules must be checked.

The same approach can be used for PSM-domain consistency: a domain model (e.g., for databases) has a metamodel and a syntax and thus cross- model consistency rules can be captured in the same way as for PIM-PSM consistency. This is additional evidence that the distinction between PIM, PSM, and other models in MDA is not always particularly useful.

A and B must obey any cross-model consistency rules relevant to their context. For example, if A is a PIM and B a PSM, then all PIM-PSM consistency rules relevant to the transformation of A into B must be satisfied. Similarly, if A is a PSM and B a domain model, then all PSM- domain consistency rules must be satisfied.

