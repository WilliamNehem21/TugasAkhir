The rest of the paper is organised as follows. We outline related work in Section 2 and introduce our experimental approach and trace-driven simulation of checkpoint- ing in a high-throughput computing environment using real-world datasets in Sec- tion 3. Section 4 describes a number of existing checkpointing strategies, and we propose novel energy- and failure-aware checkpoint strategies. In Section 5 we demonstrate the detrimental effects of the proposed checkpointing policies on en- ergy consumption, motivating the need for an increased understanding of the impact of checkpointing strategies within HTC clusters. Finally we discuss key consider- ations when adopting checkpointing in HTC clusters in Section 6 and conclude in Section 7.

Unsal et al. [37] evaluate the energy characteristics of an Application-Level Fault Tolerance (ALFT) scheme, where redundancy and recovery logic is incorporated at the application level, rather than being provided at the system or hardware level and propose a task scheduling heuristic reducing energy consumption by up to 40%. In contrast, our scenario of a high-throughput computing environment is not subject to the same budgetary constraints as real-time systems. HTC systems tend to place an emphasis on overall system throughput rather than the completion time for individual tasks, instead adopting a best effort policy to execution completion, and often do not consider deadline constraints in during resource allocation. How-

A number of Grid and Cluster level simulators exist including SimGrid [20], Grid- Sim [8], and OptorSim [4] though these focus more at the resource selection process both within clusters and between clusters and lack the modelling of energy. More recently Cloud simulators have been proposed which are capable of modelling the tradeoff between not only cost and Quality of Service, but also energy consumption. These include CloudSim [9], GreenCloud [19], and MDCSim [22]. However, these do not allow modelling of multi-use clusters with interactive user workloads, nor do they support checkpointing.

We extend our simulation environment to model the checkpoint model intro- duced in Section 3.3, and evaluate the impact of enacting various checkpointing policies outlined in Section 4 within the system. While in this work we primarily consider energy consumption and average task makespan, our simulation records numerous additional performance measures, enabling us to evaluate the impact of policies on all areas of the system.

In this section we introduce the checkpointing policies investigated throughout this work. We divide these into policies to determine the interval between checkpoint evaluation events and policies determining whether a checkpoint operation should take place for a given evaluation event. Furthermore, we propose a class of migration policies which proactively checkpoint in anticipation of failure events, and migrate tasks to resources less susceptible to failure.

