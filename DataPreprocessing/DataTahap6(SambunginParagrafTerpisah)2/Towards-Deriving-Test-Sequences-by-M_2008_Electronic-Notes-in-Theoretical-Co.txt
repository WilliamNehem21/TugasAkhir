An Extended Finite State Machine (EFSM) can be thought of as a folded FSM [27]. Given an EFSM, and assuming that domains are finite, it is possible to un- fold it into a pure FSM by expanding the values of its parameters and variables. The resulting FSM can be used with FSM-based methods for test derivation with complete fault coverage, which means that all fault possibilities can be exhausted. Nonetheless, in most practical situations, this approach is unfeasible, mainly due to the state explosion effect [22,27].

This paper is organized as follows. In Section 2 we present the concepts of EFSMs and Extended Timed Transition Systems [7]. In Section 3 we introduce the Timed Extended FSMs. The product of TEFSMs is presented in Section 4. In Section 5 we describe how the TEFSM product can be used in a model-checking set-up, and illustrate this process with a simple example in Section 6. Finally, in Section 7, we draw some concluding remarks and indicate possible directions for future research.

An EFSM is an extension of a conventional FSM. In contrast to FSMs, in the EFSM model we have to consider other items [27], such as input and output parameters, and context variables. Also, update and output functions, as well as predicates are defined over context variables and input parameters.

of y in M 1 and in M 2. In this situation, we would want the product machine M 1,2 to enact both transitions of M 1 and M 2, componentwise. For that: (i) the same clocks are reset; (ii) the output parameter valuations are copied from M 1 and M 2; and (iii) both context updates are also carried over to M 1,2. But we can only enable this action in M 1,2 if both transitions in M 1 and M 2 are enabled. This is case 1(i). Otherwise, we consider the situation where the transition in M 1 is enabled, but the one in M 2 is not. Here, we follow case 1(ii), and make the product machine M 1,2 enact the behavior of M 1 using for that the first state component, while the second component is marked as fail, thereby ignoring the transition from M 2. Note that, in this scenario, M 1 might have taken its transition, while M 2 would be forbidden to do so, even when their external behavior would have been indistinguishable. After

Other aspects that can be investigated include how to allow time constraint to be defined over outputs. We note that our definition does not deal with constraints that may reflect output response that is not instantaneous. The input and output occur in the same time instant. We are considering how this extension might impact the test case generation methods.

