and reception of signals. Signals are also the actors of preemption, making it possible to suspend (to freeze) or to abort the behavior of some parts of the sys- tem. Synchronous models have adopted a simplifying hypothesis: the system evolves only during discrete phase (instant), the duration of which is 0. Thus, the computation of a reaction, which may result from complex interactions among parts of the program, is supposed to be instantaneous. This strong hypothesis, augmented with the hypothesis of instantaneous broadcasting of signals, allows deterministic behaviors even in the presence of concurrency and preemption. Esterel excels in expressing complex reactive behaviors, but it does not directly support specifications in terms of hierarchical communicating

A state can be either a simple state, drawn as a simple circle or ellipse, or a macrostate drawn as a rounded rectangle. A macrostate is refined: it contains other states. A simple state does not. A state may have a name: written inside for a simple state, written in a cartouche for a macrostate.

A transition is a directed link between two states (from a source state and a target state). There are three types of transitions: strong abortion, weak abortion, and normal termination transitions. The transition from state wA to state dA is a strong abortion transition. The self-loop transition from state Detection to itself, and labeled disarm is a weak abortion transition. Finally the transition from state WaitAandB to state done is a normal termination one.

Local signals are explicitly mentioned on a syncChart: arm is signal lo- cal to macrostate Detection; disarm is local to macrostate ABSync. External signals are not explicitly declared in the syncChart. The input signals of the outermost macrostate are A, B, Reset, T, and Inhib. There is only one output signal: AB.

The previous reaction implies only strong abortion transitions on simple states. Strong abortion applies to macrostates as well. When Reset is present, whatever the presence status of the other input signals, macrostate Detection is exited without any prior internal evolution of the macrostate. The target state being the same macrostate, Detection is re-entered during the reaction and recursively activates initial states of the enclosed STGs. A weak abortion is performed differently: before exiting the macrostate origin of the weak abortion transition, the internal evolutions of the macrostate are executed (see example below).

A normal termination transition has no explicit trigger. Such a transition is fired as soon as each STG of the source macrostate is in a final state. For instance, if states dA and wB are active, and B is present, the transition from wB to dB is taken. Now the two STGs in macrostate WaitAandB are in a final state. Instantaneously, the normal termination transition is taken, signal AB is emitted, and state done becomes active.

These few examples show the complexity of a reaction, which may result from partially ordered transition firings. In fact, communicating FSMs are not well-adapted to hierarchy, preemption, and above all, instantaneous chaining of transition firings. Instead of communicating FSMs, we choose cooperating reactive cells as active agents.

The target of the transition is macrostate innerMacro, which is re-entered. Again, it is a re-incarnation. This fresh instance is receptive to strictly future occurrences of c, and to a present or future occurrence of d. The weak abortion triggered by d is then to be taken, but before, the inside of innerMacro must react.

This fresh instance of s1 is receptive to a strictly future occurrence of a, and to a present or future occurrence of b. Hence, the transition triggered by b is taken, and v is emitted with 5. State s2 is activated.

The structure of a syncChart can be represented by a tree that reflects the state containment hierarchy. More precisely, a macrostate contains STGs, a STG contains reactive cells, a reactive cell contains one and only one state. In the tree, a ReactiveCell has one and only one successor. It can be omitted absent. When computing a reaction, only input signals, which are imposed by the environment, have a definite status. The presence status of all other signals must be determined. Like in the Esterel language, we assume that a non-input signal is present if and only if it is emitted during the instant.

Conceptually, reactive cells run concurrently. Each active reactive cell locally determines its behavior (i.e., performs actions, takes a transition and thus becoming idle, or staying active). The presence status of the signals is the deciding information. To ensure the determinism of the reaction of the syncChart, all reactive cells must agree on the actual presence status of each signal. This suppose finding a fixpoint solution through dialogs.

emits a signal, this fact about the presence status of the emitted signal is broadcast to other cells. This reliable fresh information may assert or refute a pending evaluation, and thus resume the evolution of a cell. This process is applied till stability, when each active cell has terminated its evolutions, or is suspended. What is done in the latter case depends on the chosen seman- tics. Some semantic variants will be described below. Beforehand, we have to precisely define the interpretation of signal expression.

nothing left to do at the next instant. Returning PAUSE means that its reaction is over for the current instant, but will proceed at the next instant. Finally, DEAD means that the object has terminated its reaction and has nothing left to do at the next instant except waiting for a normal termination. Once entered in a final state, react() returns DEAD till the effective normal termination.

F. Boussinot [11] has studied different ways to resume the computation. These ideas apply to SyncCharts as well. The more drastic solution, in use in re- active objects, is to set to absent all not yet assigned signals, to resume the evaluation of pending expressions, and to defer the issue of the decisions to the they try to enrich their knowledge about the signal context. A most interest- ing information is about signals that are certainly absent (cannot be emitted) during the reaction. To know whether a signal shall not be emitted seems to be relevant of clairvoyance. In fact, using the structure (syntactic analysis), we construct a monotonic decreasing set of potentially emitted signals, called

Taking account of the potential, a stalled reaction may resume, proceed by microsteps, and then stall again. This process is repeated, and eventually, either the process stops with all presence status defined, or there still exists suspended evaluation and the potential cannot help the pending evaluations. In the first case, the reaction completes successfully. In the latter case the syncChart is rejected as non constructive. The choice of the potential function is critical. A rough potential is easy to compute but leads to many unjustified rejections of syncCharts; a fine potential is difficult to construct but accepts a large class of SyncCharts.

Esterel, we have chosen to present SyncCharts as an independent state- based synchronous model. The structure of SyncCharts has been formally defined by a metamodel, using the UML notations. The computation of a re- action has been explained in terms of cooperating reactive cells. The principles of the constructive semantics have been also explained, but not formalized 5 . We believe that a graphical model like SyncCharts may be a good in- troduction to synchronous programming for many engineers more familiar with state graph models than with programming languages. However, being

Thus, the user could adapt his/her model to his/her needs. A simpler model is, of course, easier to learn, and may lead to more efficient compila- tions. For instance, the immediate modifier is very interesting for instanta- neous dialogs, but it may easily introduce causality cycles. Discarding im- mediate makes the first instant reaction far simpler: neither strong nor weak abortion can occur on a just-entered state. Other possibilities concern the choice of a potential function. It is even possible to introduce variations on signal handling: Under some circumstances, for example to eliminate a causal- ity cycle, it would be convenient to differ the emission of some signals to the next instant, as it is done in Statecharts. All those variations are easily for- malized and implemented. Additional constraints are added to the metamodel (syntax). As for semantics, it is sufficient to modify the react() methods.

