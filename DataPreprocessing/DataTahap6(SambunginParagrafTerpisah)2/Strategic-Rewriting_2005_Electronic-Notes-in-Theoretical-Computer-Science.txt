Therefore the understanding of elementary actions is local and usually easy. Of course the global picture, i.e. the semantics of the action of a set of rules is much more elaborated and depends of the control put on the firing of rules.

all the rewrite derivations. This set could be very elaborated and even non recursive. What is interesting here is the design and study of formalisms to describe strategies of interest. Having in mind the design of strategies for ELAN, we formalized this using either proof terms of an appropriate rewriting logic, or as an appropriate rewriting calculus term. The first approach is fully declarative and do not make precise how to describe this set. The former is less declarative but provides us with a constructive way to build the intended derivations.

From the existing strategy languages, we should find the most appropriate ways to describe strategies and the best combinators to build them. A typical instance of this problem is to setup a strategy language to conveniently model probabilistic algorithm as well as properties and proof tools for them. A dif- ferent but related problem consists in describing probabilistic proof methods. From what has been achieved so far, the rewriting calculus is the frame- work that I consider currently as the most promising to uniformly express strategies at the appropriate level of detail, in particular because it provides us with a possibly typed extension of the lambda calculus having matching (modulo) capabilities, explicit non-determinism, and also elaborated excep- tions and control mechanisms that are needed to finely express strategies.

This is certainly true in a first approximation. But making the control explicit allows us to perform cleaver analysis to simplify or optimize the control and to generate efficient code. For example simplification of strategies are described in [1,13]. The code generation could also benefit of these partial evaluations, and we are still at the beginning of understanding how this could be adapted to strategic rewriting.

A huge effort is devoted to writing strategies, and this is highly non-trivial. Of course sharing this work and knowledge is of fundamental interest and challenge. A first work in this direction concerns the sharing of strategies between the PVS and Coq proof search programming environments [16].

Of course a main stream is theorem proving (i.e. proof search specification) and verification as each prover or verifier is centered, either implicitly or ex- plicitly, around clever strategies. With this respect, our experiences in using ELAN or TOM to perform model checking show that strategic programming could be at least as efficient as a dedicated model checker [9,6] but using a much more abstract description of the model.

The application to strategic programming is still in its infancy. Indeed, as shown by the experiences conducted in ELAN, Maude, Stratego or Rogue, the way algorithms are written is quite different when taking a strategic program- ming point of view. This means that both the researches about programming methodologies using this paradigm should be developed, but also that this programming approach should be largely taught, which is not the case cur- rently.

applications based on XML are becoming extremely popular. This means that symbolic and in particular term structures are omnipresent and that rule base programming becomes a must. Programming languages like XSLT do not take advantage of the explicit use of strategies: strategic programming has here a big chance of exposition and development.

Another field of application is rule based system in the sense of production or business rules [14]. Here one of the fundamental ingredient are strategies, in particular in the rule activation [10]. Since this becomes also a very popular way to understand and model the organization and analysis of companies, markets, ecological, industrial or economical processes, strategic programming will also play a main role here.

As I mention at the beginning, simulating and programming biologic en- tities is one of the main challenge of this century. Because strategic program- ming provides both declarative and strategy use, and in particular permits a natural specification of concurrency, it could be one of the best programming paradigm to model complex systems like the biological ones. In this respect the first experiences using Maude [11] looks promising and should be developed in the near future from an even more strategy oriented view point.

H. Kirchner and I. Gnaedig. Termination and normalisation under strategy - Proofs in ELAN. In Proceedigs of the Third International Workshop on Rewriting Logic and its Applications, volume 36 of Elecronic Notes In Theoretical Computer Science, Kanazawa, JAPAN, September 2000. Elsevier Science Publishers B. V. (North-Holland).

