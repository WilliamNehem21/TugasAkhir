The formal methods of model checking [4] have various applications in software veri cation[2]. Through the exploration of large state-spaces model checking produces either a formal proof for the desired property or a detailed description of an error trail. We concentrate on explicit state model checking and its application to the validation of communication protocols.

In the broad spectrum of techniques for tackling the huge state space that are generated in concurrent systems, heuristic search is one of the new promising approaches for failure detection. Early precursors execute explicit best- rst exploration in protocol validation [18] and symbolic best- rst search in the model checker Mur [22]. Symbolic guided search in CTL model check- ing is pursued in [3] and bypasses intense symbolic computations by so-called hints. Last but not least, the successful commercial UPPAAL veri er for real- time systems represented as timed automata has also been e ectively enriched by directed search techniques [1].

Our own contributions to directed model checking integrate heuristic esti- mates and search algorithms to the cke model checker [21], to a domain in- dependent AI-planner [8], and to a Promela model checker [9,10]. The global state space is interpreted as an implicitly given graph spanned by a succes- sor generator function, in which paths corresponding to error behaviors are searched. The length of the witness path is crucial to the designer/programmer to debug the erronous piece of software; shorter trails are easier to interpret in general.

In this paper we concentrate on error trail improvement, an apparent need in practical software development. We expect that a possibly long witness for an error is already given. This trail might be found by simulation, test, random walk, or depth- rst model checking. The witness is read as an additional input, reproduced in the model and then signi cantly improved by directed search.

The paper is structured as follows. First we give some background on the AI technique we use. In a next section we introduce the HSF-SPIN model checker and its usage in terms of its command line options. In the following sections we address the facets of trail-directed search, based on the hamming distance and the FSM distance. We distinguish between single-state trail directed search for safety errors and cycle-detection trail-directed search for liveness errors. Both approaches have been implemented in HSF-SPIN and in the experimental section we present rst results. We close with some conclud- ing remarks.

Depth- rst search and breadth- rst search are call blind search strategies, since they use no information of the concrete state space they explore. On the other hand, heuristic search algorithms take additional search information in form of an evaluation function into account. This function is used to rank the desirability of expanding a node u.

A* [11] uses an evaluation function f (u) that is the sum of the generating path length g(u) and the estimated cost of the cheapest path h(u) to the goal. Hence f (u) denotes the estimated cost of the cheapest solution through u. If h(u) isa lower bound then A* is optimal, i.e. it nds solution paths of optimal length.

Like in Spin, two steps must be performed prior to the veri cation process. The rst step generates the source code of the veri er for a given Promela speci cation. In the second step, the source code is compiled and linked for constructing the veri er. The veri er then checks the model. Among other parameters the user can specify the error type, the search algorithm, and the heuristic estimate as command line options. It is also possible to perform interactive simulations similar to Spin. When veri cation is done, statistic results are displayed and a solution trail in Spin's format is generated.

The veri er runs depth- rst search, since it is the default search algorithm. It nds a deadlock at depth 1,362. Following such a long trail is tedious. The A* algorithm (option -AA) and a simple heuristic estimate for deadlock detec- tion (option -Ha) nds a deadlock at optimal depth 34, expanding and storing less states (17 and 67, respectively), and performing less transitions (73).

set and x is the value for the option. For example, argument -Ad sets the option search algorithm to the value depth- rst search. By giving an option no value, the list of available values for that option is printed. For example, executing check -A prints all available search algorithms.

Executing the HSF-SPIN veri er without arguments outputs all available run-time options, e.g. -Ax, where x is the search algorithm (A*, IDA*, DFS, NDFS, etc.); -Ex, where x is the error to be checked (Deadlock, Assertion, LTL, etc.); and -Hx, where x is the heuristic function (Formula-based, Ham- ming distance, FSM distance, etc.).

Since various explicit on-the- y model checkers like Spin search the superim- posed global state space in depth- rst manner, they report the rst error that has been encountered even if it appears at a high search depth. One natural option to improve the trail is to impose a shallower depth on the depth- rst search engine. However, there are two severe drawbacks to this approach.

The rst one is that bounds might increase the search e orts by magni- tudes, since a xed traversal ordering in bounded depth- rst exploration in large search depths might miss the lasting error states for a fairly long time. Therefore, even if the rst error is found fast, improvements are possibly di - cult to obtain. Moreover, to nd shorter trails by manual adjusting bounds is time consuming, e.g., trying to improve an optimal witness will fail and result

We have observed this behavior in some of our models. For example, in a model of a telephony system after establishing a witness of length 756, the search with a new bound 755 fails to nd one of the remaining error states. For the same Promela model, error detection alternates with di erent search depths bound: up to bound 67 no error is found, from bound 68 to 139 an error is found, from bound 140 to 154 no error is found, from 155 onwards an error is again found, and so on.

Therefore, we aim at a di erent aspect of trail improvement; namely heuris- tic search. The idea is to take the failure state or some of its de ning features to set up a heuristic estimate that guides the search process into the direction of that particular state. In contrast to heuristic search strategies described in previous work [9,10], we exhibit re ned information. The main argument is that it is easier to nd a speci c error situation instead of nding any member according to a general error description. We distinguish two heuristics and two search algorithms. The rst heuristic is designed to focus exactly the state that was found in the guidance trail, while the second heuristic relaxes this re- quirement to important aspects for the given failure type. The two algorithms divide in trail-directed search for safety property violation and trail-directed search for liveness property violation.

H  (S; S0 ) is not a lower bound, since one transition might change more than one bit in the state description at a time. Moreover, the Hamming distance can be re ned by taking the binary encoded values of the state variables and their modi ers into account. Nevertheless, the Hamming distance reveals a valuable ordering of the states according to their goal distances.

Let (pc1 ;::: ; pcl) be the vector of all FSM locations in a state S, i.e. pci, i 2 f1;::: ; lg, denotes the corresponding program counter. The FSM distance metric H   (S; S0 ) according to the goal state S0  with FSM state vector

In our case we extract the error state S0 to focus the search by the above heuristics H  (S; S0 ) and H   (S; S0 ).  These estimates are integrated in the heuristic search algorithm A*. Recall that is complete, and that, if the estimate is a lower bound, the path is optimal.

While previous work on directed model checking concentrates on detecting unknown error states, the paradigm of trail-directed model checking contem- plates the improvement of trails result from error detections, simulations, etc. On the other hand, although paths to errors could be improved with directed model checking, the new paradigm proposes richer heuristics based on the in- formation of a singleton given error states. Moreover directed model checking is restricted to safety properties, while trail-directed model checking is able to improve error trails corresponding to such type of properties.

One early approach for focusing trail information is diagnostic model check- ing for real-time systems [17]. It also shifts attention to highlight failure detec- tion, but does not clarify why the established traces are improved compared to ordinary failure trails. Another line of research aims not only to report what went wrong, but explain why it went wrong. However, most approaches in this class such as assumption truth-maintenance systems implemented in the General Diagnostic Engine (GDE [6]) turn out to scale badly.

At the moment we concentrate on SPIN's Promela speci cation language, but in future we are interested in verifying real software in Java and C. The Bandera tool [5] developed at Kansas University allows slicing of distributed Java-Programs with an export to either SPIN or SMV. The same research line is pursued by the Automated Software Engineering group at NASA Ames Re- search Center that apply a Java byte code veri er, called Java Path Finder [12]. On the other side, Holzmann [14] has pushed the envelope for actual C-Code veri cation with the SPIN validator.

[8] S. Edelkamp. Directed symbolic exploration and its application to AI-planning. In AAAI-Spring Symposium on Model-based Validation of Intelligence, pages 84{92, 2001. Precursor S. Edelkamp, Directed Symbolic Exploration in Planning published in European Conference on Arti cial Intelligence (ECAI), Workshop on New Results in Planning, Scheduling and Design (PUK-2000).

[14] G. J. Holzmann and M. H. Smith.  Software model checking: Extracting veri cation models from source code.  In Formal Description Techniques for Distributed Systems and Communication Protocols, Protocol Speci cation, Testing and Veri cation (FORTE/PSTV), pages 481{497. Kluwer, 1999.

