Related forms of programmable strategies permeate computer science. For instance, evaluation strategies without any traversal control are useful on their own in rewriting [7,4]. In theorem proving, one uses a sort of strategies as proof tactics and tacticals [33]. In parallel functional programming, one uses a sort of strategies to synthesise parallel programs [36].

type GenericM m = forall a. Data a => a -> m a -- corresponds to TP m type GenericT	= forall a. Data a => a -> a	-- transformations type GenericQ r = forall a. Data a => a -> r	-- queries

We used the combinator gmapT :: GenericT -> GenericT, which is the non- monadic variation on allTP [22]. The type of stop_tdTP says that this com- binator takes a polymorphic function and returns one. We use the type aliases for readability; we could as well inline the forall types. As an exercise in ver- satility, we have reconstructed a more specifically typed scheme stop_tdTP. The original scheme involved the opaque type TP m, where m could be instan- tiated later to any instance of MonadPlus. The reconstructed scheme fixes the monad for the argument type to Maybe, which allows us to guarantee success of the composed strategy (cf. the non-monadic result type GenericT).

Attribute grammars Strategies and attribute grammars are complemen- tary in that the former are more operational, whereas the latter are more declarative. Also, the former emphasise traversal, whereas the latter empha- sise attribute dependencies. Research on a possible marriage of strategies and attribute grammars promises interesting insights. Alike strategies, at- tribute grammars are conveniently embedded into Haskell [8].

XML & XPath Next to language processing on the basis of syntaxes, strate- gies are thought to be useful for XML document processing. Functional combinator libraries for XML processing do exist [42], but they lack the typ- ing strength of functional strategies. It should be possible to use strategies as a means to provide the illusion of an XPath-like language for controlling fully typed XML transformations.

