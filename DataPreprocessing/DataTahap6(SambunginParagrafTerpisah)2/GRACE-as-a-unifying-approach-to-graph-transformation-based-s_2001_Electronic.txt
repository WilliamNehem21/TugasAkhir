determine, for example, the order in which rules may be applied. The aim of graph class expressions is to restrict the set of graphs to which certain rules may be applied or to filter out a subset of all the graphs that can be derived by a set of rules. Typically, a graph class expression may be some logic formula describing a graph property like connectivity, or acyclicity, or the occurrence or absence of certain node or edge labels.

Using a similar coupling mechanism, we have introduced a framework for hierarchical graphs in [3]. Graphs with distinguished sets of nodes from an arbitrary graph are combined with acyclic graphs and bipartite connection graphs. A connection graph relates the distinguished set of nodes with the nodes of the acyclic graph and imposes a hierarchy on the graph in this way.

A transformation unit specifies a binary relation on graphs depending on the choice of the used binary relations in the import part. But how can the used relations be chosen? One possibility is that relations are stored in some relation library and may be called by their names. Another possibil- ity is to use the relations specified by transformation units. Both together leads to the notion of a transformation module as a network of transforma- tion units which use each other and where the edges reflect the use struc- ture. Moreover, each module has an import interface, which plays the same role as the import component of units, and an export interface containing the units that are provided by the module to the environment and may be imported by other units and modules later on. More formally, a transfor- mation module is a system MOD = (IMPORT , BODY , EXPORT ) where BODY is a set of transformation units, IMPORT is a set of identifiers, and

Semantically, a transformation module specifies a set of binary relations on graphs, one relation for each export unit, depending on the choice of the imported relations. If the network underlying a module is acyclic (and finite), the semantics is constructed level by level by means of the interleaving se- mantics. One starts with the transformation units that use relations from the import interface only, and proceeds step by step with those units whose use component has got a semantics already. In the case, of cyclic use structures, the interleaving of rule applications and used relations is repeated ad infini- tum starting from the imported relations and the empty relations for the body units.

This unit has got two rules with the same left-hand side and two alternative right-hand sides. The first rule removes an edge if applied in the way defined in 2.4. The second rule is an extra rule not yet introduced. It can be applied to a node with degree one such that this node and its only incident edge is removed.

number of edges, that any connected graph can be derived into a single node. Both together means for the semantic relation of connectivity-test-undir that a graph G is related to the single-node graph if and only if G is connected. In this sense, we have a correct connectivity test for undirected graphs.

