As Globally Asynchronous and Locally Synchronous (GALS) based System-on-chip (SoC) are gaining im- portance, a special case of GALS when the global clocking is preserved, but the interconnect delays of multiple clock cycles are to be tolerated has also been proposed, and used. In some cases, such designs, known as Latency-Insensitive Protocol (LIP) based SoC integration are also general enough to work when the global clocking is not present. In either case, the protocols are complex, and many optimized implemen- tations of such protocols need verification that indeed they work correctly with respect to the specification of the system. Usually the specification of the system is fully globally clocked with negligible interconnect delays, so that the specification can be first implemented as synchronous design with traditional tools. GALS or LIP refinements are then applied to tolerate the multi-cycle interconnect delays, or fully asyn- chronous interconnect communication, as the case may be. Verifying that such refinements are correctness preserving, researchers have used model checking in the past. In this paper, we present static analysis based framework for such verification. Our framework makes use of the Polychrony framework and associated semantic analysis techniques, in the form of endo-isochrony. We show a number of LIP protocols to pre- serve the correctness with respect to their fully synchronous specifications using our framework. We believe, designers can verify LIP implementations with clever optimizations using our framework much more readily than when using model checking.

for LIPs based on the Polychrony framework. The Polychrony framework consists of the SIGNAL language and various analysis tools and software synthesis tools. The static analysis of various properties of a SIGNAL program are done using formal structures of SDFG and CH which we use here as well. In our framework for analysis of LIP based system, a given LIP is firstly modeled by the SIGNAL syntax which is further transformed to get its SDFG and CH. Next, endo-isochrony is checked

based on the obtained SDFG and CH and their respective composition. A case study of modeling and analyzing Phase Elastic Buffer (pEB) is done to demonstrate the flow and validate the proposed framework. The prominent distinction between our framework and other verification techniques for GALS is that we are using static analysis which is an efficient technique. Also, this work brings the concept of Polychrony to real hardware level LIP based SOC communication.

Another important aspect of the compiler is to synthesize the clock relations by formal structure CH. In a given CH, any child node clock is a down-sample of its ancestors. All of the synchronized clocks are grouped as one node in CH. [1] illustrates the algorithm to construct the CH for a given SIGNAL process. The CH ancestor is b2, then b1 is a childnode of b2, and it contradicts that b^1 is a ancestor of b^2. Therefore, ill-formed hierarchy results from contradict clock inclusion, and which is explained by an example given in Section 5. SDFG and CH are used to check communication correctness between interconnected processes.

Endochrony and Isochrony are properties to ensure correct operation of synchronous processes working in an asynchronous environment. The formal definitions and proofs of endochrony and isochrony can be found in [4] and [3]. Limited by the space in this paper, we will only talk about their application for GALS and their verification, which is the foundation for our framework.

We thank Kenneth Stevens (University of Utah), Mathew W. Heath (Intel Corp.), Marly E. Roncken (Intel Corp.), Jean-Pierre Talpin (INRIA), and Dimitrou Potop (INRIA) for various fruitful discussions regarding this work. This work was partially supported by NSF fund CCF- 0702316, and SRC task 1818.

