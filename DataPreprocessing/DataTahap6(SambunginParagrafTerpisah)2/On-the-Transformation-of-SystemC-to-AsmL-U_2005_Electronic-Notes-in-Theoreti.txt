SystemC is among a group of system level design languages proposed to raise the abstraction level for embedded system design and verification. A straight and sound verification by model checking or theorem proving of SystemC designs is, however, infeasible given the object-oriented nature of this library and the complexity of its simulation environment. We illustrated, in a previous work, the feasibility and success of performing model checking and assertions monitors generation of SystemC using a variant of Abstract State Machines (ASM) languages (AsmL). In this paper, we establish the soundness of our approach by proving the correctness of the transformation from SystemC to AsmL.

Regarding, the program transformation, the work of Patrick and Radhia Cousot in [2] is the essence for any program transformation using abstract interpretation. The tactical choice of using semantics to link the subject pro- gram to the transformed program is very smart in the sense that it enables proving the soundness proof of the transformation, related to an observational semantics. A projection of that generic approach, described in Section 3.9 of

AsmL [8] is one of the very latest languages developed for ASM [3]. It supports object-oriented modeling at higher level of abstraction in comparison to C++ or Java. We are going to restrict the AsmL semantics presented in this paper to the subset used in the program transformation.

Proof. Similar construction approach to what we proposed in Theorem 2.14 except that instead of considering the SystemC method thread and sensitivity list, we consider here AsmL methods and their pre-conditions. Here also, there exist many possible constructions involving AsmL post-conditions, for example.

Proof. (Sketch) The proof is done by constructing the AsmL program. For instance, for every SystemC module we affect an AsmL class having the same data members and methods. We set the pre-conditions, AS Ctr, for the AsmL methods as a conjunction of the state of the events present in the sensitivity list, SC SL, of the SystemC program processes. The tricky point in the con- struction is when to make the updates in the AsmL program. We have two possibilities: (1) C++ variables update: whenever a C++ variable is involved in an instruction, a partial update can be applied using the notion of binders in AsmL; and (2) SystemC signals: all signals are updated when all methods pre-conditions are false. Once the set of AsmL classes defined, Theorem 3.9 ensures the existent of the AsmL program.

