For the sake of simplicity, we deal first only with non-binary methods, i.e. methods which take no more than one class argument. Binary methods cannot be treated simplistically, since they produce contravariant occurrences of the variable in the corresponding functor. Extensions of the coalgebraic paradigm to mixed functors have been considered in [14], but such extensions are rather complex and cover only a restricted range of cases. We briefly sketch an alternative approach to dealing with binary methods, based on representing functions as graphs. This approach is completely satisfactory in a purely functional setting. However, in an imperative setting, binary methods bring about further problematic issues which we briefly touch upon.

For simplicitly, we assume all fields in the classes to be private, i.e. to be accessible from outside the class only through the class methods. On the contrary, we take all methods in a class to be public. Moreover, we assume no local variables in method bodies.

is the expression e'. Notice that, by the assumption that all fields in a class are private (see Section 1.1), main methods can only access objects through class methods. In particular, in Definition 1.1 above, field access expressions appear neither in the expressions e, e' nor in the context C[ ].

In this section, we give a coalgebraic account of Fickle objects (and programs) for the fragment of Fickle consisting of unary methods, i.e. methods which do not take more than one object parameter. Following [13,9], we model classes as coalgebras, where the carrier represents the objects of the classes, and the coalgebra structure is determined by the operational semantics of the methods. The coalgebra structure captures the evolution of the objects under the action of methods.

Now we introduce the coalgebraic description of the fragment of Fickle con- sisting of unary methods. To this aim, we endow the set of refobjects of a given program P with a coalgebra structure for the functor induced by the methods in P . A method t0 m(t1x1,... , tqxq) in P , when called on an object together with a list of actual parameters, can either terminate (successfully or with an exception/error) producing a possibly modified object, or not terminate. The behaviour of methods on objects determines the coalgebraic structure: of objects under method application only on parameters consistent with both objects. However, somewhat surprisingly, this is not a transitive relation, in general. A possible solution to the transitivity problem above consists again in compensating the observability deficit of unary methods. However, this deserves further study, and we leave it as an open problem how to give a coalgebraic description of Fickle objects in the general case.

