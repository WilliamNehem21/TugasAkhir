Outline: We formalize B+ trees as a data structure invariant, formulated in sep- aration logic, in Section 2. We then introduce abstract machine semantics for B+ tree operations and show their correctness: insertion (Section 3) and finding ele- ments in a range query (Section 4). Deletion of elements is discussed in Section 5. Finally, we remark on some issues raised by this work, discuss our conclusions and indicate our planned future work in Section 6.

The B+ tree is a ordered, n-ary branching, balanced, search tree supporting de- structive updates. In order to preserve the B+ tree invariant, updates can trigger further updates at higher levels of the tree. Data items are stored only in the leaves and all nodes except the root are guaranteed to be kept at least half full. Leaf pages are maintained in a singly-linked list.

Note that the Btree predicates directly limit the maximum occupancy of a node to its maximum capacity, MaxN . Also, the Btreeh+1 predicate limits the minimum occupancy of each child node to be at least half its maximum capacity. The usual occupancy guarantee of B+ trees, namely that all except the root node are at least half full, then follows from the obvious inductive argument.

They are split into 4 sections. The first contains the single rule for descending down the correct path of internal nodes in the tree, while pushing the path location information on the stack at each step. The second section describes the three cases that can occur when a leaf page is encountered: (i) The entry to be inserted has the same key value as an existing entry in the page and so replaces the existing entry and no further action is necessary (a single page result has occurred). (ii) The entry fits into the page so the page is updated. Again no further action is necessary as a single page result has occurred. (iii) The entry did not fit and the page had to be split between the original leaf page and a new one. As a double page result has occurred, a new key/page pointer pair has to be inserted into the parent level

The third section describes the possible ripple in post operations up the tree. Again there are three cases, each popping the parent location off the stack: (i) If the result from the level below was a single page, there is no change necessary in this level so we pass on a single page result to the level above. (ii) If the result from below was a double page, we have to insert a new pair in this level. If it fits then we return a single page result to the level above. (iii) If the result from below was a double page, and there is insufficient space in this node to insert the new key/pointer pair, then we have to split this page and return a double page result to the level above.

