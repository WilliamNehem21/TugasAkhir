In this paper, we investigate classes of systems based on different asynchronous in- teraction patterns with the aim of achieving distributability, i.e. the possibility to execute a system on spatially distributed locations, which do not share a common clock. As our system model we use Petri nets. The main reason for this choice is the detailed way in which a Petri net represents a concurrent system, including the interaction between the components it may consist of. In an interleaving based model of concurrency such as labelled transition systems modulo bisimulation se- mantics, a system representation as such cannot be said to display synchronous or asynchronous interaction; at best these are properties of composition operators, or communication primitives, defined in terms of such a model. A Petri net on the other hand displays enough detail of a concurrent system to make the presence of synchronous communication discernible. This makes it possible to study asyn- chronous communication without digressing to the realm of composition operators. In a Petri net, a transition interacts with its preplaces by consuming tokens. An inherent concept of simultaneity is built in, since when a transition has more than one preplace, it can be crucial that tokens are removed instantaneously, depending

When modelling a distributed system by a Petri net, this built-in concept of synchronous interaction may become problematic. Assume a transition t on a loca- tion l models an activity involving another location l', for example by receiving a message. This can be modelled by a preplace s of t such that s and t are situated in different locations. We assume that taking a token can in this situation not be considered as instantaneous; rather the interaction between s and t takes time. We model this effect by inserting silent (unobservable) transitions between transitions and their preplaces. We call the effect of such a transformation of a net N an asynchronous implementation of N .

a semi-structural characterisation of the resulting net class. In Section 4 we re- peat those steps for the symmetrically asynchronous transformation. Furthermore we describe how the resulting net class relates to the classes of free-choice and ex- tended free choice nets. In Section 5 we introduce the asymmetrically asynchronous transformation. We give semi-structural upper and lower bounds for the resulting net class and relate it to simple and extended simple nets. In the conclusion in Section 6 we compare our findings to similar results in the literature.

We consider here 1-safe net systems, i.e. places never carry more than one token, but a transition can fire even if pre- and postset intersect. To represent unobservable behaviour, which we use to model asynchrony, the set of transitions is partitioned into observable and silent (unobservable) ones.

t. Naturally, this can happen only if all these tokens are available in M in the first place. These tokens are consumed by the firing, but also new tokens are created, namely one for every outgoing arc of a transition in G. These end up in the places at the end of those arcs. A problem occurs when as a result of firing G multiple tokens end up in the same place. In that case M ' would not be a marking as defined above. In this paper we restrict attention to nets in which this never happens. Such nets are called 1-safe. Unfortunately, in order to formally define this class of nets, we first need to correctly define the firing rule without assuming 1-safety. Below we do this by forbidding the firing of sets of transitions when this might put multiple tokens in the same place.

As explained in the introduction, we will examine in this paper different possible as- sumptions of how asynchronous interaction between transitions and their preplaces takes place. In this section, we start with the simple and intuitive assumption that the removal of any token by a transition takes time. This is implemented by inserting silent transitions between visible ones and their preplaces.

Starting at the top of the diagram, free choice nets are characterised structurally, enforcing that for every place, a token therein can choose freely (i.e. without inquir- ing about the existence of tokens in any other places) which outgoing arc to take. This property makes it possible to implement the system asynchronously. In partic- ular, the component which holds the information represented by a token can choose

There exists an implementation for the right net, namely by u taking the tokens from r, q and s in that order. The first token (from r) conveys the information that y was executed, and thus t is not enabled. Collecting the last token (from s) could fail, due to v removing it earlier. Even so, removing the tokens from r and q did not disable any transition that could fire in the original net. In the left net such an implementation will not work.

We have investigated the effect of different types of asynchronous interaction, using Petri nets as our system model. We propose three different interaction patterns: fully asynchronous, symmetrically asynchronous and asymmetrically asynchronous. An asynchronous implementation of a net is then obtained by inserting silent (un- observable) transitions according to the respective pattern. The pattern for asym- metric asynchrony is parametric in the sense that the actual asynchronous imple-

In [18] Wolfgang Reisig introduces a class of systems which communicate using buffers and where the relative speeds of different components are guaranteed to be irrelevant. The resulting nets are simple nets. He then proceeds introducing a decision procedure for the problem whether a marking exists which makes the complete system live.

