vertices represent events and directed edges causal dependency between them. We consider here systems modeled by timed automata. The model of timed automata is more general than timing constraint graphs as it allows for composition of sys- tems and choice of actions. The timing bounds involved in the action guards and location invariants of our timed automata are not constants, but parameters. Those parametric timed automata allow to model various kinds of timed systems, e.g. communication protocols or asynchronous circuits.

The synthesis of constraints has been studied in the context of parametric timed automata or hybrid systems, e.g. in [4], or in [13] where the authors use a prototype extension of Uppaal [14] for linear parametric model checking. Note that [4] is able to infer non-linear constraints.

This idea of synthesizing constraints by refinement from counter-examples has often been used in the literature, e.g. using TReX [9], and more generally with CEGAR-based methods (counter-example guided abstraction refinement [8]). Note that, in our work, the notion of bad state corresponds to the notion of state incom- patible with the reference valuation.

We first introduce Parametric Timed Automata (Sect. 2) and a motivating ex- ample (Sect. 3). Then, we present our method of synthesis of constraints (Sect. 4), and apply it to the motivating example, as well as to an example in the case of cyclic traces (Sect. 5). We finally give some remarks and directions for future work (Sect. 6).

We assume familiarity with standard timed automata [1]. All clock constraints of standard timed automata are boolean combinations of atomic conditions that compare values with nonnegative integer constants. Parametric timed automata allow within clock constraints the use of parameters in place of constants (see [2]).

The following definition is an extension of the class of timed automata (considered in e.g. [16]) to the parametric case. With respect to the classical definition, this class is contrived by the fact that guards and invariants are necessarily in conjunctive form, but this is not restrictive in practice.

In [13], Prop. 3.17 states that each symbolic trace is simulated by a concrete trace. The formalism in [13] uses PDBM, whereas we use a first-order form of (X, P )-constraints. However, this has no incidence on the result used here. The following proposition is a reformulation of Prop. 3.17 in our formalism.

Let us suppose the algorithm terminates when i < n. Then, as the instanti- ated traces are acyclic, we can find an instantiated trace which is strictly bigger than any parametric trace. Which is not possible because of the correction of SYNTHESIS (Theorem 4.4).

An elementary complexity analysis can show that our procedure is exponential with the number of parameters P , exponential with the number of locations of A, and doubly exponential with the number of clocks X. However, in practice, we have successfully applied SYNTHESIS to various examples containing up to 10 parameters, 10 clocks and several thousands of potentially reachable locations. One reason for which it behaves well in practice, apart from the optimizations (see below), is that the procedure quickly reduces the number of reachable states, by iteratively refining K.

The procedure SYNTHESIS described in Sect. 4, has been implemented under the form of a script program written in Python and calling HyTech [12] for computing the Post operator on the current set of states. The selection of the atom J to be negated is performed randomly. The experiments were conducted on a 3.20 GHz Intel Xeon with 2 GB memory. The two examples are asynchronous circuits modeled using the bi-bounded inertial delay (see [5,15]).

We presented an algorithm SYNTHESIS allowing to synthesize a constraint en- suring to get the same set of traces than the set of traces of a given valuation of the parameters. Our method suits particularly well in the framework of asyn- chronous circuits. It is in particular experimented at a larger scale in the framework of French ANR project VALMEM, for synthesizing timing constraints of memory circuits designed by ST-Microelectronics. Using the implementation of the algo- rithm SYNTHESIS , we successfully treated in less than 2 minutes the case of an asynchronous circuit containing several dozens of gates. One of the objectives of this project is to treat even larger circuits, containing several hundreds of gates.

