The synthesis of asynchronous logic circuits is an old subject, having been studied in the earliest days of computing by Huffman [19]. Although the benefits of using asynchronous over synchronous hardware are substantial (better composibility of modules, lower power usage, lower electromagnetic interference, faster speed), its challenges have generally precluded its widespread acceptance. Most of the diffi- culty of asynchronous design involves careful control of delays within the circuit, and the avoidance of race conditions [21]. However, even correct timing is insuffi- cient to ensure correct operation, due to subtleties involving switching thresholds [38]. That said, an increasing number of organizations use designs that incorpo- rate some asynchronous portions [12]. A few processors, for instance the ILLIAC [33], the Caltech Asynchronous Microprocessor [23], and the ACT11 [15] have been constructed without global clocks.

In contrast to verification by temporal logic or timeseries simulation, the ap- proach taken in this article suggests that the topological structure of a logic circuit plays an important role in determining its behavior. This appears to be related to the recent approach in [29], but topological analysis of electrical circuits is not new. Indeed, algebraic topology can be used to show that the usual formulation of electrical circuit laws results in a solution for voltages and currents [34]. Branin

In order to shorten the design cycle for asynchronous circuits, it is desirable to bridge the gap between static logic state computation and event-level simulation. Ideally, such a technique would avoid both the level of detail and the computational burden of exhaustive simulation, while providing coarse semantic properties that static logic computation cannot address. This article describes a way to encode slightly more information than the netlist (the gates and connections) and logic values on the wires.

However, by lifting the logic values from binary values into an abstract vector space spanned by logic 0 and logic 1, we obtain new information from the sheaf (at the level of its global sections, rather than just in its relative cohomology) and computations become straightforward exercises in linear algebra. This seemingly abstract trick corresponds to using one-hot signaling [11], which is used to provide error detection in existing asynchronous interfaces. Mathematically, using this en- coding gives the resulting switching sheaf enough freedom to describe global logic states that are the superposition of two transitional states; essentially by capturing undefined signals and signal collisions. Therefore, by examining the cohomology of switching sheaves, certain behaviors can be detected in addition to the static logic states. The main result is that the first cohomology group of switching sheaves is generated by all the feedback loops that have the potential to latch or cause glitches. On the other hand, we show that combinational logic circuits in which each input is used exactly once (and therefore cannot glitch) have trivial first cohomology. Therefore, it appears that the first cohomology group contains certificates of truly asynchronous behavior.

In Section 2 we give the basic definitions and highlight the relevant results from sheaf theory. Section 3 describes our encoding of a logic circuit as a switching sheaf. In Section 4, we show how the cohomology group of a switching sheaf captures the logic states that arise from sustained feedback. We give three examples of switching sheaves and computation of their cohomology in Section 5, culminating in a demonstration that the cohomology of a switching sheaf carries more information than the list of logic states. Finally, the results are discussed in Section 6.

A sheaf is a mathematical tool for storing local information over a domain. It assigns some algebraic object, a vector space in our case, to each open set, subject to certain compatibility conditions. These conditions are of two kinds: (1) those that pertain to restricting the information from a larger to a smaller open set, and (2) those that pertain to assembling information on small open sets into information on larger ones. What is of particular interest is the relationship of the global information, which is valid over the entire graph, to the topology of that graph. This is captured by the cohomology of the sheaf, in the way we summarize here.

This section describes a way to associate a sheaf structure to a directed graph that encodes a logic circuit. Each vertex represents a logic gate, where the in-degree represents the number of inputs. Each edge of the graph corresponds to a 1-bit signal connecting the the input of one gate to the output of another. We allow edges to be self-loops (connecting the input of a gate to an output of the same gate) and external connections. As existing logic circuits contain finitely many gates, we assume that the underlying graph is finite, but not necessarily connected.

Problems of logic can now be addressed computationally using the framework of linear algebra. This can result in gains in asymptotic computational complexity. Rather than being forced to enumerate states, one may instead perform standard polynomial-time linear algebra (over the finite field F2).

Proposition 3.1 Suppose S is a switching sheaf over a logic circuit X. Every QLS of this logic circuit lifts via T to an element of H0(X; S). Conversely, every element of H0(X; S) that restricts to ( 1 ) or ( 0 ) on each edge is the image of a QLS through

In this section, we exhibit the cohomology of switching sheaves and its interpretation by way of three illustrative examples: combinational circuits with and without shared inputs and an RS flip-flop. These examples indicate that H0 of a switching sheaf contains at least as many elements as the set of QLS. Additionally, as was shown in Section 4, H1 of a switching sheaf captures information about the presence of feedback or race conditions. We give two explicit examples of this fact.

Let us consider the case of a switching sheaf S on a connected, directed tree X. (The choice of directions on the edges of X does not effect the cohomology of S.) This represents the situation in which each external input is used at most once in the production of each external output. In this case, {X} by itself is a good cover, so we conclude that H1(X; S) is trivial. Observe that the combinatorial Euler characteristic of X is 1 by the same reasoning, so that the number of vertices of X is 1 more than the number of internal edges. Thus, if there are n vertices with in-degrees {m1, ...mn},

It is apparent that the first two basis elements are lifts of the QLS. However, the second is clearly neither a lift of a QLS, nor a linear combination of them. Indeed, it indicates that ambiguity in the input logic value (such as occurs during a transition) causes ambiguity throughout the rest of the circuit. It is therefore an algebraic indication of the presence of time-sensitivity of the circuit.

There are other switching sheaf structures that can be constructed over a graph with one (undirected) loop. While glitches are one kind of time sensitive behavior, another is the latching of a transient input. We therefore give a classic example of a circuit that exhibits latching, the R-S flip-flop.

