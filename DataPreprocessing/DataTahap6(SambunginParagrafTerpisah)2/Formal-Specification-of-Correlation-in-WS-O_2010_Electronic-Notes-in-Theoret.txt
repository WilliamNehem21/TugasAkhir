Motivations of the present paper are twofold. First, while the approach of [2] might be considered as a rather low-level implementation mechanism, notably to express the handlers constructs, in this work we extend this approach by introducing a message algebra with functions allowing abstraction from these details. Finally, we also extend the mapping in such way it includes correlation sets and we intro- duce a formal framework for studying the mechanism of correlation in orchestration languages.

The remainder of this paper is organized as follows. The next section, Section 2, introduces WS-BPEL with correlation sets and an illustrating example (Section 2.4). Syntax of the extended BP-calculus is presented in Section 3.2 and its operational semantic in Section 3.3. Encoding of some relevant BPEL constructs into BP- calculus is presented in Section 3.4. A BP-model for the example is given in Section

WS-BPEL [10] is an XML-based specification language for describing business pro- cesses orchestrating the interaction of different, existing and possibly dynamically emerging Web Services. As such, it builds on top of the WSDL language for describ- ing the interface of Web Services. This is specified in terms of port types, actions, and messages.

Variables can be defined that can carry XML data values and messages, and which are used to define the state of each process instance. Most notably, variables can also contain partner links. This feature allows for addressing mobility while coupled with WS-Addressing specification [7].

In WS-BPEL a receive activity can be defined so that receipt of a message cre- ates a new process instance. Correlation rules can be defined in order to correlate messages with the appropriate instance of a process. Correlation sets are then intro- duced to identify those interactions that are pertinent to a given process instance; each correlation set is a set of properties, which are aliases for parts of messages. Correlation sets are instantiated while initializing the containing scope.

When a message is sent, a field linked to a property is automatically bound to hold the value associated to that property. Hence, a message is received by a process instance only if the field linked to a property contains the value associated to this property. This mechanism guarantees all the messages sent and received by a process instance to be compliant with the initialization of properties.

The set of terms T consists of variables V, names N and values (U ) (integers, booleans, strings, ...). For each term t, fv(t) is the set of variables in t. A message is a closed term (i.e. not containing variables). The set of messages is denoted M.

IG is an input guarded process and IG + IG' behaves like a guarded choice and is intended to be translated by a <pick>. We do not consider non-determinism in service behavior. An input may be annotated by s indicating whether we catch a fault or in event within a handler.

We present in this section a mechanism that abstracts the WS-BPEL scopes. Scopes act as containers for WS-BPEL processes and handlers. A scope contains a primary structured activity which defines its normal behavior; it might contain variable definitions and handlers (fault, compensation, event and termination handlers). In case of normal execution, a scope is activated at the same time as its activities are and terminates when all its activities have been accomplished.

Here, there are 2 correlated sets: CSi for input and CSo for output. The update function sets the correlation part of the message M corresponding to CSi and to CSo to values that identifies the targeted instances, the initiate parts to true or false, the target value to l and the input and output variables to i and o. The message is sent to its target and the correlations are updated.

We present in this section a BP-calculus specification of a fragment of the Trade Market example. The system is made of three processes, the agent, the customer and the broker, that run in parallel. The customer process and the broker process are instantiated. The former by the external environment of the whole system, while broker instances are created by the agent, when sending sell orders. The agent acts as a coordinator between other processes and represents the BPEL process we are interested in. For sack of simplicity, we abstract from defining handlers and scopes. In the following, we present the BPEL code for the agent and the broker pro- cesses and then we show how we can automatically generate their corresponding BP-calculus code, using the mapping of Section 3.4. For the customer process we only present their BP-calculus formalization, since it is not directly concerned with

In this paper we enhanced the BP-calculus [2] by using function calls and message handling to formalize the correlation concept for orchestration languages in general and the BPEL language in particular. Some aspects of this work need a deeper analysis in order to study some properties of the model and the interactions of correlation sets with handlers and other complex constructs. This work may also integrate a formalization of the WS-Addressing [7] standard in order to deal with name mobility. Finally, we are working to integrate all the concepts presented in this paper to the verification engine based on the BP-calculus that we are developing.

