The Mondex formal development featured a refinement proof from an atomic abstract model to a multi-step protocol at the concrete level. The principal component of this refinement proof was a backward simulation from abstract to concrete. At the time of the original development, the develop- ment team did try to construct a forward simulation, but were not successful. For a long time it was believed that a forward simulation refinement was im- possible. It is by now known that a forward simulation is entirely possible, and more than one has been constructed [3,22,12].

In this, the original framework, the backward simulation correlated with an early synchronisation, i.e. the single non-trivial abstract step was (1, 1) matched with a step that occurred early in protocol runs. By contrast, the more recently discovered forward simulations correlate with a late synchronisa- tion, namely, the various possible non-trivial abstract steps are (1, 1) matched with steps that occur late in protocol runs.

The preceding described the workings of a successful run of the protocol. Be- yond that, all events after the Start events can be replaced by Abort events, corresponding to runs of the protocol that are unsuccessful for whatever rea- son. The fact that despite Abort events, the protocol still enjoys the unforge- ability and atomicity properties, is what makes Mondex non-trivial theoreti- cally. However, the details of how this comes about do not concern us in this

A further issue is that the Mondex protocol is isolated, i.e. once the protocol has commenced, the two purses take note only of the arrival of the next message expected in the playout of the protocol, and of calls to Abort, ignoring all other messages or calls from the environment and reserving the option of responding to such unexpected events by performing a self-initiated Abort whenever appropriate.

For (15), we note first that by Assumptions 3.1.(iii), vt is reachable from some initial vI. We use this to assert a uI such that RP (uI, vt) holds, after which we argue as for case (13). We are done.

Definition 3.4 Given an initial vI, a synchronisation assignment (SA(vI)) for the relevant valid subtree of a protocol computation tree is a subset of its steps, such that for each maximal path through the valid subtree from vI, exactly one of its steps is in SA(vI ). Steps in SA(vI) are called SA steps.

Our aim is to show that when given a big-diagram refinement of an atomic action to a protocol of the kind we have described, if we wish to break the big-diagram refinement down into a collection of small-diagram refinements of zero or one atomic action steps to individual steps of the protocol, one can always use forward simulation reasoning, except for the BS steps. In fact one can use forward simulation reasoning for all steps except branching BS steps (a term explained below), though it comes at a price. Likewise, we have the option of using backward simulation reasoning for all steps if we so wish. We discuss these points later.

Since at both abstract and protocol levels, the transpose of the step relation is a partial function, backward simulation is always aligned with a decrease of nondeterminism in both abstract and protocol transition functions. Therefore we get the following (cf. [17]).

Firstly, it is illuminative. One can be convinced of the correctness of a protocol with respect to an atomic action, without having the details of a refinement already worked out. In such a situation, it may not be clear how to synchronise the atomic action with the lower level description. Theorem unique successor cannot force a distinction between the choices for uF . So for nonbranching BS steps, a forward simulation inference will succeed. However, it comes at a price. If a forward simulating BS step immediately follows a backward simulating BS step, the R1(uF , v) value at the v state that they share, occurs as a hypothesis in both the backward PO (20) and the forward PO (19). It thus remains as an unproved assumption in the overall single-step verification of the big-step refinement. As such it allows the verification to succeed vacuously. For this reason we phrased Theorem 3.7.(ii) as two induc- tive processes that meet in the middle, since it is much better to verify some R1(uF , v) twice independently, than to leave some other R1(uF , v) unproved, thus undermining the whole verification.

The basic idea is that the previous section should be understood as de- scribing (the various possibilities for) a single isolated protocol run, performed by however many agents would be appropriate in practice, with the protocol state recording the full history of the protocol so far (regardless of whether such knowledge is obtainable in principle by the individual agents), and ignoring the rest of the universe. The latter not only regarding other agents/activities in the rest of the universe, but also regarding what the agents of the single pro- tocol run might do both before and after the run itself. So the previous section described an idealised pattern or template for what collections of agents might do over some period of time towards the achievement of some goal described in principle by the atomic action that the protocol implements.

Patterns or templates are normally made to correspond with what happens in the real world by some process of matching, and that is the basis of our approach too. Since we have remarked that our protocol states can include unrealistically detailed history information, our matching process must include a projection mechanism to allow the unrealistic parts to be forgotten. In such a scenario, protocol states that were previously distinct can be matched to the same system state, destroying the previously assumed tree property of the valid subtrees that interpret the protocol. But this is OK. At the system level, we do not need the backward reachability properties that trees guarantee.

The decomposition into agent subspaces just described, represents the fact that an instantiation of a protocol is normally executed by a number of agents inside a real system. However a real agent in a real system can play many roles during the running of the system, including acting out different roles in different instances of the same protocol at different times. So we need to distinguish the various agent roles in a protocol definition from the different instantiations of these during system runs. The next definition introduces the technical machinery for this.

which is 2P. An external dependency definition (XDD) for them is, a pair of sets (IDS, ODS) of (not necessarily disjoint) steps. IDS is the input dependency set, and ODS is the output dependency set. A protocol is XDD- normal iff:

The different choices for the synchronisation points was one motivation for us to study the general possibilities here. Another one was to provide a general formalization of using past and future simulation relations (RP and RF ). Instances of such relations with a schematic encoding into Dynamic Logic are not only used in the case study [22] but also in earlier work. Future simulation relations occur in the correctness proof of ASM refinement [20]. Past simulation relations are used in coupled refinement [9] as noted in [21].

