In lazy functional programming, different kinds of syntactic annotations on the program (such as strictness annotations, or the global and local anno- tations used in Clean) have been introduced in order to drive local changes in the basic underlying lazy evaluation strategy and obtain more efficient execu- tions. In these languages, constructor symbols are lazy, i.e., their arguments are not evaluated until needed. This permits structures that contain elements which, if evaluated, would lead to an error or fail to terminate. Since there are a number of overheads in the implementation of this feature, lazy func- tional languages like Haskell allow for explicit syntactic annotations on the arguments of datatype constructors, thus allowing an immediate evaluation.

(and early) attempt to exploit programmable strategies as a programming tool. Kirchner also enumerates a number of strategic challenges including the development of languages and combinators to specify and build strategies; the analysis of properties of strategic rewriting (bringing the standard problems of reachability, termination, confluence, etc., to this field); the evaluation and transformation of strategies; and the use of strategies in real applications and current technology (including theorem proving, programming, XML technol- ogy, production and business rules, biocomputing, etc.).

