Here we model these security automata by process algebra operators (see [12]), acting as controller operators. We propose a logical approach to the problem of monitoring systems in order to enjoy security policies. As matter of fact, we express security policies by a temporal logic formula and we exploit a huge theory of process algebra and temporal logic in order to synthesize controller operators.

In this paper we introduce four process algebra operators Y dK X, where X is the target, Y is the program controller, i.e. the process that controls the behavior of the target, and K is the name of the corresponding automaton. These operators are able to mimic the behavior of the security automata briefly described above.

Moreover, other approaches deal with the problem of monitoring the component X to enjoy a given property, by treating it as the whole system of interest. However, often not all the system needs to be checked (or it is simply not convenient to check it as a whole). Some components could be trusted and one would like to have a method to constrain only the un-trusted ones (e.g. downloaded applets). Similarly, it could not be possible to build a reference monitor for a whole distributed architecture, while it could be possible to have it for some of its components.

This paper is organized as follows. Section 2 presents the necessary background on process algebras and (Generalized) Structured Operational Semantics (GSOS), logic and security automata. Section 3 describes some process algebra operators (controllers) corresponding to security automata under investigation. Section 4 shows how to automatically build controller programs that enforce desired security policies. Section 5 shows how to build the maximal model for truncation automata. Section 6 shows a simple example and Section 7 concludes the paper.

Exploiting our framework we can build a program controller Y which allows to enforce a desired security property for any target system X. We present an extension of [10]. Here we have four different operators and in particular we have to deal with control actions.

In this simple example we choose the controller operator dS. Hence we apply the partial model checking for relabeling function fS to the previous formula, that we have simplified replacing W//0 and Z//0 by T (and assumed that Y can only suppress c actions). We obtain D//fS as follows.

