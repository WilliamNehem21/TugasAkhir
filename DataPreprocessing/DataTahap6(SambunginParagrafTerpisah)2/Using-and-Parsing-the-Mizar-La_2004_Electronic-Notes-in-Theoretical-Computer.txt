Mizar is a well established and successful system for producing formal mathematics. We investi- gate the acceptability of formal mathematics to mathematicians by studying the Mizar language. Specifically, we analyse various features of the Mizar language through the exercise of trying to build a grammar for it in order to parse its library. Our analysis highlights unresolved problems with the language which may have reduced its uptake by mathematicians.

Mathematical knowledge management (MKM) is concerned with making math- ematics widely available to a multitude of users in a wide range of settings. In order to provide a comprehensive, internationally relevant repository of math- ematics, it must be possible to translate between the many forms of language used in mathematics, including words, symbols and conventions. There is also the issue of how to convert existing mathematics into such an internationally robust form.

translation from the formal language. To sustain growth of MKM reposito- ries, mathematicians need to be able to contribute directly to such repositories. With a formal language basis, this means that mathematicians must be able to produce, or at least easily reproduce, their own mathematics as a formal language.

Wiedijk recently collated examples of formal proofs developed on fifteen of the major formal systems [13]. His analysis of these proofs allowed a comparison between the different systems on a number of different factors. Naturally enough the systems vary and have a variety of strengths and weaknesses.

Mizar also has some practical features that make it appealing to study. There are several versions of Mizar for Windows and Unix platforms and the Windows version at least is quite straightforward to install and integrate with the emacs text editor. In addition there is the Mizar web-site [9] that provides lots of resources for understanding the Mizar language, the MML and the process of developing a Mizar article.

This is not to say Mizar is without possible problems. Most notably, all advice on learning Mizar has mentioned the value of working closely with an experienced Mizar user. This suggests that there are idiosyncrasies in Mizar that are difficult to avoid or master for all but the most dedicated solo worker.

In order to objectively analyse the Mizar language, a grammar was built from the description of the language on the Mizar web-site. The parsing environ- ment used was JavaCC [7], a top-down compiler compiler. It uses a Java-like representation for lexical analysers and parsers [1] that it translates into na- tive Java. JavaCC was chosen as being fairly representative of the various compiler compilers available.

The first thing to note about Mizar is that it is not a simple language. The grammar for Mizar has over 150 productions and 93 keywords. The Java language by contrast has only 83 productions and 50 keywords. This is not to say that Mizar is necessarily harder to learn or master because the difficulty of a language comes from its semantics rather than its syntax. It does, however, suggest that Mizar is certainly an interesting language to examine in detail.

number of arguments and then a further construct. The problem occurs be- cause both constructs are separated by commas as are the arguments of the first construct. It is impossible for the parser to decide whether the second construct really is a construct or simply an argument of the construct. For example, in DECOMP 1 the following definition appears:

Bracketing in Mizar is somewhat complicated. Naturally enough, Mizar has brackets to logically or presentationally separate parts of the grammar. These brackets include the usual suspects: {}, () and []. In addition, Mizar allows articles to define brackets that act as functors. For example, [] are used in the core Mizar syntax to indicate the arguments of certain predicates (privately defined ones) whereas they are also used to denote ordered pairs, triples etc. This overloading does not cause parsing problems but instead lexing prob- lems. Square brackets are defined in the lexer so that they can be referred to in the syntax for private predicates. However, they also need to be understood as possible functor brackets that have a completely different set of syntactic

More subtly, the findvoc utility that is able to find the definitions and uses of a particular term in the Mizar library is not entirely co-ordinated with the library. Some definitions found by findvoc do not in fact exist but are to be found elsewhere in the library. Clearly some refactoring has been done, but not across the entire set of Mizar services.

As stated out the outset, this critique is not intended to particularly criticise Mizar, but rather to learn from Mizar what the issues are for general formal languages. Mizar has some peculiar properties, but in fact the trade off with making a rich and flexible mathematical language is entirely appropriate. The whole area of MKM witnesses that mathematics is not the pure, unambiguous and invariant language that many non-mathematicians suppose it to be.

resource that is comparatively old-fashioned. Whilst this is not a problem in the short term, in fact, is normal in mathematics, it may become a problem for the long term usability of the MML. For example, modern mathematicians have difficulty reading the intersection and union of sets denoted by . and

As it stands, the Mizar language is a flexible, mathematics-like language that can be used to specify formal proofs. Its flexibility makes it usable but also undermines its usefulness as a formal basis for mathematics. Several aspects of the language cannot be easily reconstructed, and this has obvious implications for potential users of the language, as well as those who wish to develop tools. The Mizar language was designed for both people and computers. The difficulties we have highlighted raise the question of whether it is possible for a language to successfully fulfil both of these goals. We regard this an

It may be possible to adapt Mizar, or some other language, to give a more clearly defined and understandable language which suits both. On the other hand, it may be better if the languages of MKM divided into two: some lan- guages would be ideal for mathematicians to use and develop mathematics, other languages would be ideal for storage, standardisation, search and re- trieval tasks. Translation systems would ensure that what mathematicians produced would have formal correctness in the context of the larger formal repository. They would also translate sections of the repository back into the language context of the working mathematician.

