program and calculates the fix point of properties using that graph [8]. This is very different from dynamic analysis, which evaluates properties against an event trace originating from a concrete program execution. Using a graph- free analysis [15], static analysis is again close to dynamic execution. In this paper, a graph-free static analysis is extended to a generic analysis which is applicable to dynamic analysis as well.

In JNuke, static analysis works very much like dynamic execution, where the environment only implements non-deterministic control flow. It thus imple- ments a graph-free data flow analysis [15] where data locality is improved because an entire path of computation is followed as long as valid new suc- cessor states are discovered. Each Java method can be executed in this way. The abstract behavior of the program is modelled by the user. The environ- ment runs the analysis algorithm until an abortion criterion is met or the full abstract state space is exhausted.

The iteration over the program state space is separated from the analysis logics. A generic control flow module controls symbolic execution of instruc- tions, while the analysis algorithm deals with the representation of (abstract) data and the semantics of the analysis. The control flow module implements a variant of priority queue iteration [12], executing a full path of computation as long as successor states have not been visited before, without storing the flow graph [15].

The generic control flow module first chooses an instruction to be executed from a set of unvisited states. It then runs the specific analysis algorithm on that unvisited state. That algorithm updates its abstract state and verifies the properties of interest. After evaluation of the current instruction, the control flow module adds all valid successor states to the queue of states to visit, avoiding duplicates by keeping a set of seen states. When encountering a branch instruction such as switch, all possible successors are added to the state space. Furthermore, each possible exception target is also added to the states that have to be explored.

Many Java bytecode instructions do not affect control flow. Therefore our algorithm does not store the current state if an immediate successor instruction is eligible. A state is only stored if it is target of a branch instruction. This reduces memory usage [15] but may visit a state twice: If an instruction ib is the target of a backward jump, such as in a while loop, it is only recognized as such when the branch instruction is visited, which usually occurs after ib has been visited before. However, this overhead is small since it only occurs during the first iteration.

A generic analysis represents a single program state or a set of program states at a single program location. It also embodies a number of event hand- lers that model the semantics of byte code operations. Both static analysis and run-time analysis trigger an intermediate layer that evaluates the events. The environment hides its actual nature (static or dynamic) from the generic algorithm and maintains a representation of the program state that is suitably detailed.

information used by the generic analysis. The generic analysis only operates on such data. The environment thus acts as a proxy [11] for the virtual machine, if present, or replaces that data with appropriate facsimiles in static analysis. These facsimiles have to be conceptually isomorphic with respect to concrete values obtained during run-time analysis. Distinct objects have to map to distinct representations. Of course, true isomorphism is only achieved if pointer analysis is absolutely accurate.

Conversely, analyzing a context-insensitive (method-local), thread-local property is more amenable to static analysis, but actually makes run-time analysis more difficult. This is counter-intuitive because such properties are conceptually simpler. However, in run-time verification, a new instance of the analysis has to be created on each method call and thread. Instances of ana- lysis algorithms then correspond to stack frames on the program stack. Each new analysis instance is completely independent of any others, except for a shared, global context (such as lock sets, which are kept throughout method calls) and return values of method calls. The dynamic environment maintains the shared context and relays return values of method calls to the analysis instance corresponding to the caller. Detailed knowledge of run-time verific- ation is not necessary for the remainder of this paper; more about run-time verification in JNuke is described in the extended version of this paper [2].

Static analysis calculates the set of all possible program states. Branches (test nodes) are treated non-derministically by considering all possible successors and copying (cloning) the current state for each outcome. Junction nodes denote points where control flow of several predecessor nodes merges [8]. In this paper, the operation that creates a new set of possible states at this node will be called merging.

In dynamic analysis, only one program location l is active (per thread), corresponding to a single program state s. In static analysis, the sets of states Sl at all program locations l are of interest. Each set of states Sl is represented by an instance of the generic algorithm. The type of operation performed to model the semantics of each instruction remains the same for static and dynamic analysis.

The effect of each evaluated method call is stored as a summary. Context- sensitivity is modeled by evaluating each method call once for each possible context. If an analysis is context-insensitive, an empty context is assumed, having the effect that each method is only evaluated once.

In principle, every analysis algorithm can be split up into a generic al- gorithm and its environment. Most data flow problems can be seen as set- theoretic or closure problems [14] and their nature will affect how the merge operation is implemented. Precision of the analysis will depend on the approx- imation of pointer aliasing [20]. If accurate information about data values is needed or when environment-specific optimizations are called for, the generic part of an algorithm may become rather small compared to the size of its (static or dynamic) environment. However, with the block-local atomicity al- gorithm, it has been our experience that the generic algorithm does indeed embody the entire logics and thus is not just a negligeable part of the whole. Notably, adapting a static algorithm for dynamic analysis is greatly facilitated with our approach.

Given warnings are all false positives. 2 In Daisy, they were caused by read- only [ro] and thread-local [tl] values. For the ProdCons benchmark, the stale value comes from a synchronized buffer [buf] and is thread-local [13]. The two false alarms for the TSP benchmark are caused by thread-local exceptions [exc].

Static and dynamic analysis algorithms can be abstracted to a generic version, which can be run in a static or dynamic environment. By using a graph-free analysis, static analysis remains close enough to program execution such that the algorithmic part can be re-used for dynamic analysis. The environment encapsulates the differences between these two scenarios, making evaluation of the generic algorithm completely transparent to its environment. This way, the entire analysis logics and data structures can be re-used, allowing for comparing the two technologies with respect to precision and efficiency. Experiments with JNuke have shown that the static variant of a stale-value detection algorithm is significantly faster but less precise than the dynamic version. This underlines the benefit of using static information in order to reduce the overhead of run-time analysis. The fact that both types of analysis share the algorithm also allows for combining them in a tool that applies run-time verification to test cases resulting from static analysis reports.

