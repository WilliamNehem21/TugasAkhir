We present a software tool for the automatic translation of models from the Narrative Language, a semi- formal language for biological modelling, into the Bio-PEPA process algebra. This provides biologists with an easy way to describe systems and at the same time gives them access to the simulation and analysis techniques provided by Bio-PEPA. We present details of the translation algorithm and its integration into existing software, and discuss ways in which this idea could be further explored.

Biological modelling, especially in the context of systems biology, is increasingly becoming an interdisciplinary field, and often biologists are directly involved in the development of models. However, because of the complexity of formal methods, despite their attractive characteristics and the analysis capabilities, biologists often prefer to continue describing systems in an informal way and rely on mathematicians and computer scientists to translate these informal descriptions into computational models. Unfortunately, this translation process is prone to a number of errors, including misinterpretation of the informal representations.

Bio-PEPA [7] is a stochastic process algebra introduced for the purpose of being applied to biochemical systems. It adopts a reagent-centric view in which each biochemical species is abstracted as a process. A model is then composed in a modular way through the interactions between the processes.

An additional change is the ability to define constants, which can then be used in the model whenever an explicit numerical value is expected, e.g. as kinetic parame- ters or initial concentrations. Despite being a trivial change, this greatly simplifies the process of specifying and modifying models.

Generally speaking, the NL follows a rule-based modelling style, so the emphasis is on the description of events. On the other hand, Bio-PEPA is reagent-centric, with the building block being the definitions of species. Therefore our work is mainly to process each NL event to collect the reactions in which each species participates and its role in them. We will now briefly describe how each event is processed.

A crucial difference between the NL and Bio-PEPA is that in the NL a com- ponent is associated with a number of binary states (e.g. (un)phosphorylated, (in)active), whereas Bio-PEPA species have no internal state. This means that a NL component with n states can correspond, in the translation, to 2n Bio-PEPA species. In practice, the number of these variants is constrained by the conditions of each event, which can impose restrictions on the state of components. We will de- note by var(a, C) the set of variants of component a that satisfy the set of conditions C.

Continuing the previous example, let us assume that B has no internal states while A has two: it can be phosphorylated or not, and active or not. This implies that B can only have one variant, also denoted B.  A can have four variants, denoted A active phosphorylated, A active unphosphorylated, A inactive phosphorylated and A inactive unphosphorylated. However, the event imposes a condition c1 on A, which limits the applicable variants to two; i.e. for- mally, we have that this event can only be applied to the set var(A, {c1}) =

The products of every such reaction depend on the affected variants and the type of the event (e.g. activation, binding, etc.). Let the product species be denoted by out(Aj, e), where e is a type of event and Aj is a tuple of variants of the affected species, i.e.

In the case of errors being found during the validation procedure, the course of action depends on their severity. If the translation cannot continue, e.g. if the parsing has failed because an essential element is missing, the process is aborted. If, however, the problems are less severe, the user has the choice of continuing, although the resulting file may not be valid in its entirety.

The tool is written in Java, using packages from the standard library, with two exceptions. Parsing of the model is performed using Xtext [4], a tool for speci- fying and handling domain-specific languages. To use Xtext, we specify the rules describing the NL grammar in a format similar to EBNF. Xtext then produces an object-oriented model of the grammar, automatically generating classes for each term defined, and also provides classes for parsing a file according to the grammar. This greatly simplifies the low-level work needed to retrieve the model described. Secondly, the graphical interface is built using the Eclipse API [2] for its various elements.

We are interested in continuing this work and believe there is room for further improvement, at both a theoretical and practical level. For the former, we plan to explore possible optimisations of the translation algorithm that would result in a reduced output model. This could be done by analysing the Bio-PEPA model once it is generated and using existing theoretical results concerning bisimilarity in the language, e.g. [10], or approaches like symmetry detection [9]. Translations could also be developed for other target languages, in particular rule-based languages such as Kappa [8].

On the practical side, we believe that our tool would benefit from a graphical interface that makes the NL even easier to access. One idea, for instance, would be to use Xtext to implement a text editor for the Narrative Language, which could be integrated into the Bio-PEPA plugin. Another option would be to have a more elaborate and user-friendly GUI for specifying NL models, using forms or a spreadsheet-like application. This could be either standalone or part of the plugin. One could even hide the Bio-PEPA model altogether: a user could describe the model and choose an analysis method using a purpose-built GUI, then the tool would silently perform the translation and run the desired analysis, before presenting the user with the results.

