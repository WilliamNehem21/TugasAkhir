CLF (the Concurrent Logical Framework) is a language for specifying and reasoning about concurrent systems. Its most significant feature is the first-class representation of concurrent executions as monadic expressions. We illustrate the representation techniques available within CLF by applying them to an asynchronous pi-calculus with correspondence assertions, including its dynamic semantics, safety criterion, and a type system with latent effects due to Gordon and Jeffrey.

the input message (msg ). The receiver cooperates with the sender by waiting for pairs of message and acknowledgment on channel c. After receiving on c, the begin assertion declares that the receiver b has received the input message. After this declaration, the receiver sends an acknowledgment to the sender. We hope that in all executions of senders in parallel with receivers, begin assertions match up with end assertions. If they do, sender a can be sure that receiver b received the message msg .

Gordon et al. introduce latent effects to treat many such cases. The idea is that each value transmitted across a channel may carry with it a multiset of latent effects, the effects being debited from the process sending the value and credited to the process receiving it. Since communication synchronizes the sending and receiving processes, it is certain that the begins introducing the debited effects in the sending process will occur before any ends making use of the credited effects in the receiving process. 6

The task of assume and consume is to introduce and consume linear hypotheses for the whole multiset of effects contained in a latent effect. Latent effects are consumed by out, which has no continuation, and produced by inp, which does. Accordingly, assume takes the continuation as an argument, and invokes good to check it once the multiset of effects has been introduced into the linear context.

Finally, we can define the safety criterion for processes. In a constructive setting, it is easiest to characterize violations of safety because it is witnessed by finitary evidence. A process is unsafe precisely when it has an execution admitting some abstraction as a trace that violates the correspondence property (see Section 2). It turns out to be easy to write a clf judgment characterizing those traces that violate the correspondence property (see Appendix A). Thus, each step of the criterion is modeled by a clf judgment, and we can write an overall judgment unsafe P , which,

Right from its inception, linear logic [5] has been advocated as a logic with an in- trinsic notion of state and concurrency. In the literature, many connections between concurrent calculi and linear logic have been observed. Due to space constraints we cannot survey this relatively large literature here. In a logical framework, we remove ourselves by one degree from the actual semantics; we represent rather than embed calculi. Thereby, clf provides another point of view on many of the prior investigations.

