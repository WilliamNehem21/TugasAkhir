Fork-join and split-merge queueing systems are mathematical abstractions of parallel task processing systems in which entering tasks are split into N subtasks which are served by a set of heterogeneous servers. The original task is considered completed once all the subtasks associated with it have been serviced. Performance of split-merge and fork-join systems are often quantified with respect to two metrics: task response time and subtask dispersion. Recent research effort has been focused on ways to reduce subtask dispersion, or the product of task response time and subtask dispersion, by applying delays to selected subtasks. Such delays may be pre-computed statically, or varied dynamically. Dynamic in our context refers to the ability to vary the delay applied to a subtask according to the state of the system, at any time before the service of that subtask has begun. We assume that subtasks in service cannot be preempted.

A key dynamic optimisation that benefits both metrics of interest is to remove delays on any subtask with a sibling that has already completed service. This paper incorporates such a policy into existing methods for computing optimal subtask delays in split-merge and fork-join systems. In the context of two case studies, we show that doing so affects the optimal delays computed, and leads to improved subtask dispersion values when compared with existing techniques. Indeed, in some cases, it turns out to be beneficial to initially postpone the processing of non-bottleneck subtasks until the bottleneck subtask has completed service.

Split-merge and fork-systems are parallel queueing network abstractions which describe task flow and processing in parallel networks. In such systems incoming tasks are split into a number of subtasks, each of which must be served before the whole task can be regarded as completed. Two primary performance metrics are of interest in such systems. Task response time is the time it takes from the point when a task enters the system to the point where all of the subtasks have been fully serviced. Response time has been a very intensively researched topic in queueing systems over the last 50 or so years, see e.g. [2,8,9]. Subtask dispersion is the difference in time between the completion of the first and last subtask. Sub- task dispersion has not received much attention in the literature until recently, see

In dynamic delay systems, it is beneficial in terms of both task response time and subtask dispersion to remove delays on any subtask that has a sibling that has already completed service. This paper defines a new way to calculate subtask delays in split-merge and fork-join systems that is able to incorporate this optimisation. We begin by exploring 2-server split-merge systems with deterministic and exponential service to offer some intuition behind our technique. We then proceed to a 3-server test case to demonstrate that our technique is able to deliver substantial reduction in subtask dispersion compared to existing methods.

This section contains a brief introduction to terms that are fundamental to the understanding of this paper. The section includes an introduction to split-merge and fork-join systems. Both systems are queueing network models for describing the processing of a set of subtasks in parallel. In addition it describes related quantitative metrics, including response time, subtask dispersion and a trade-off metric. The trade-off metric can be used to make decisions when both subtask

When a task enters service it is split into N subtasks. Each of these subtasks is then processed by its own server. The service time of each server is characterised by a probability distribution. The task is considered to be done with service once all N subtasks have been serviced by their respective servers.

Task Response time is the length of time it takes for a task to get processed. The clock is started when the task first enters the system. Once all the subtasks belong- ing to that task have been completely serviced the clock stops.

This section introduces a way to calculate subtask dispersion in split-merge systems where a start work signal is sent to sibling subtasks once service of a subtask is completed. The model assumes that a delay applied to a subtask can be arbitrarily preempted at any point before service of the subtask has begun. However, once a subtask has begun service it will be serviced uninterrupted until it completes service. The start work signal is sent because removing delays after the first sibling subtask finishes service reduces both subtask dispersion and task response time.

Gj(t, tj, dj) represents the probability distribution function of the service time of the jth server. If tj < dj then the jth server has not yet begun service of its subtask and servicing is begun immediately. Otherwise the server has already started servicing its subtask. In this case the service time is renormalised to take into account that some service has already been performed and the service of the subtask has not been completed. The two part G-function is the key difference compared to previous work presented in [14,15,13].

The methods described next are described in Section 3 of this paper. They use interruptions to start processing of sibling tasks once a subtask finishes. The results have been calculated with the same simulation framework as the fork-join systems in the previous subsection.

The improvement in subtask dispersion, however, comes at a cost to task re- sponse time. Method 6 is better in terms of subtask dispersion compared to the old dispersion minimisation technique Method 2, but it has a significantly higher response time when compared to the trade-off technique (Method 3) and vanilla technique (Method 1). However some of these issues can be corrected by Method 7 which is the fork-join version of Method 6. Method 7 does have a slightly increased subtask dispersion when compared to Method 6. However, task response time is still higher than found in the two other fork-join systems (Methods 4 and 5).

