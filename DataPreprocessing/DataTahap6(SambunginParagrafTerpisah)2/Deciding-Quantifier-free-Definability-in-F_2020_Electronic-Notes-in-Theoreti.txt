This work deals with the definability problem by quantifier-free first-order formulas over a finite algebraic structure. We show the problem to be coNP-complete and present a decision algorithm based on a semantical characterization of definable relations as those preserved by isomorphisms of substructures. Our approach also includes the design of an algorithm that computes the isomorphism type of a tuple in a finite algebraic structure. Proofs of soundness and completeness of the algorithms are presented, as well as empirical tests assessing their performances.

[11] and in the Generation of Referral Expressions [10,4,3]. The computational complexity of the definability problem has also been investigated for various logics. The article [9] investigates the definability problem for classical propositional logic under the name of inverse satisfiability, proving it is complete for coNP in the general case. They also characterize for which special syntactical cases the problem lies in

P. It is proved in [5] that the definability problem is GI-complete (under Turing reductions) for first-order logic. For the primitive positive fragment of first-order logic the definability problem is coNEXPTIME-complete [12], and for basic modal logic [4] and some of its fragments [3] it is in P. In the article [1], it is shown that for the quantifier-free fragment of first-order logic with a purely relational vocabulary the definability problem is coNP-complete, and in the same article a parameterized version of the problem is proved to be complete for the complexity class W[1].

The paper is organized as follows. In the next section we fix notation and pro- vide the basic definitions. In Section 3 is the exposition of our complexity result. In Section 4 we introduce the algorithm that computes the isomorphism type of a tuple in an algebra. The algorithm to decide quantifier-free-definability for algebraic structures is presented in Section 5. In Section 6 some empirical tests are performed, showing that our algorithm performs better on models with a large amount of sym- metries. Finally, Section 7 provides a summary of the results obtained as well as further research directions which arise from the developments we present here.

isomorphism type, and thus it suffices to compute the isomorphism type of one of them. These observations together with a deliberate strategy to cycle through the tuples comprise the main ideas behind our algorithm. We explain next how they are implemented.

In this section we present an empirical testing of the performance of algorithm IsoType (Algorithm 1) versus the isomorphisms search via CSP, as well as an empirical testing of algorithm QfDefAlg for different input algebras. Our imple- mentations are written in Python 3 under GPL 3 license, source code available in https://github.com/pablogventura/QfDefAlg. All tests were performed using an In- tel Xeon E5-2620v3 processor with 12 cores (however, our algorithm does not make use of parallelization) at 2.40GHz, 128 GiB DDR4 RAM 2133MHz. Memory was

There are several possible lines for future research. Due to the lack of standard testings to decide definability, the empirical tests we presented are preliminary, and more evaluation is needed. We hope to extend the design of models to reach a broader class of algebras, and to be able to introduce control variables, as we extend our approach and tool to other fragments of first-order logic. It would also be natural to study definability over finite classes of models instead of a single structure. Lastly, it would be useful to find classes of algebras in which the problem is well-conditioned and for which polynomial time algorithms exist.

