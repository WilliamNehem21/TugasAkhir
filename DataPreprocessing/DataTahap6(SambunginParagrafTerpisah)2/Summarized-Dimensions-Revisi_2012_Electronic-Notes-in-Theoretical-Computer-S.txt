The task of summarizing memory regions becomes increasingly important in the analysis of data structures and the analysis of recursive functions. Calculating summaries of memory regions containing several abstract variables becomes quite subtle when using relational abstract domains. We address this challenge using two principal operations, fold and expand , that calculate such summaries for any numeric relational domain and argue optimality. We thereby generalize an earlier approach in the literature that was geared towards memory cells modelled by a single abstract variable.

The remainder of the paper is organized as follows: After illustrating our tech- niques on a few examples, Sect. 2 formalizes the summarization of relational infor- mation using a generic concrete numeric domain. The herein developed operations are then lifted to abstract domains in Sect. 3 where their optimality is proven. We conclude the paper in Sect. 4.

For tractability, these states are approximated by so-called abstract domains that map a set of variables to some abstract properties. While it seems plausible that the value of each program variable is represented by exactly one variable in the abstract domain, this no longer holds true for more sophisticated analyses. A C variable that holds a struct may be represented by several abstract variables, namely one per field. Also, the elements of an array or several dynamically allocated heap regions may be represented by the same abstract variable. In the latter case, the abstract variable over-approximates the content of each concrete memory cell. For this case, Gopan et al. [3] discuss how to implement transfer functions that manipulate these summarizing variables. In order to illustrate their approach, consider the following example.

In the first iteration, the write access to the array will create a memory cell represented by the variable x in the abstract domain. This cell is initialized to zero, since i, the right hand side, is zero. In the next iteration, the write access to a [1] creates a second memory cell whose value 1 is represented by, say, xj. For tractability, the new memory cell is merged with the existing one by an operation called fold . The net effect is that afterwards xj no longer exists while x contains a summary of the previous values of x and xj, for example, the interval [0, 1].

The work of Gopan et al. addresses the analysis of arrays over single scalar values which is why their expand and fold operations only manipulate a single variable at a time. In particular, their method can lead to a significant loss of precision when summarizing compound memory cells. While arrays occasionally range over com- pound memory cells, they are ubiquitous in the analysis of heap allocated structures. This is illustrated in the next example.

The intuition is that relational information that holds between ab . . . and ajbj ... is retained during the fold operation. We illustrate this behavior in the B-Tree example by, again, folding the second and third child node into one summary node:

One question that arises is whether folding memory en bloc is always more precise than folding element-wise. Surprisingly, this is not the case. This is illustrated in the following example that exhibits a 4-dimensional state on which folding and expanding two dimensions is exact using the element-wise method but approximate when using the en bloc method.

The existence of two summarization approaches begs the question whether there are others and, in particular, if there is a best method. Indeed, given two lists of indices ab . . . and ajbj .. ., any partitioning P of these lists can be used to apply fold and expand |P | times, once for each partition. Each choice of partitioning leads to a different abstraction and, thus, precision.

Prop. 3.4 and Prop. 3.5 show that, given appropriate functions drop#, add # and swap#, it is not only easy to implement summarization for an abstract numeric domain, but this implementation is also the best approximation of the concrete operations for that domain.

In this work we have observed that summarizing relational information is non-trivial. Using generic fold and expand operations we proposed a family of abstractions that feature the same precision but retain different relational information. It remains for future work to identify the right family member for a given application. No matter which member is chosen, the summarization is optimally precise given com- plete concrete and abstract lattices. An interesting open question is whether this optimality result can be generalized to incomplete abstract lattices. This question is particularly relevant as common relational numeric abstract domains such as convex polyhedra [2] do not form complete lattices.

