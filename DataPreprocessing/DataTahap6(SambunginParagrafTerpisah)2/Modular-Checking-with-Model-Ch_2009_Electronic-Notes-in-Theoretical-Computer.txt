Automatic static checkers based on model checking, particularly SAT-based bounded model check- ers, are used in industry, but they sometimes suffer from the scalability problem. Scalability can be achieved with the notions of Design by Contract(DbC) and modular checking. However, modular checking with DbC still have some problems. The method is insufficient for handling pointers to functions (function-pointers) which are abundantly used in C programs, defensive programming which is widely adopted in industrial software development projects, and re-entrancy which some- times occurs in programs using callback functions. This paper proposes a DbC notation for the above problems and a checking method that uses behavioral subtyping to clarify the exact location where an error occurs.

suffer from the state space explosion problem, which results in them having poor scalability. Users sometimes have to pre-process the program codes to cut down its size before they begin checking with the tool. The resulting witnesses of errors also need to be manually checked afterwards. A systematic means of modular checking is desirable to overcome this problem.

VARVEL, a SAT-based bounded model checker for C programs, combines model checking and modular checking. It performs modular checking on top of the model checker F-Soft [13]. The idea of introducing DbC to a program model checker is not new. For example, CBMC [4] and Bogor [18] as well as F-Soft provide two primitives, assume and assert. These primitives can be combined to emulate behavioral specifications needed for modular checking. However, VARVEL explicitly introduces such a DbC style, which means that the tool automatically embeds the appropriate primitives corresponding to a contract at specific positions in the source programs and conducts model checking.

Furthermore, VARVEL provides advanced features to deal with DbC for higher-order functions [11]. In C programming, higher-order functions are emulated by using function-pointers. The capability of handling function- pointers is mandatory for checking industrial C programs because they use many function pointers.

In this paper, we illustrate how the model checker we developed (VARVEL) can provide modular checking, i.e., modular checking with model checking. We also discuss DbC for function-pointers and the case of defensive programming. The code snippets in the paper are from source programs developed in industry that VARVEL has been applied to.

(1) and (2), it is possible to check the calling program and the called program separately; modular checking is performed and the method is scalable. A further advantage of DbC is that it clarifies where the responsibility lies for fixing a defect. For instance, if S does not satisfy PreP , the calling program ClientP rogram needs to be modified.

A disadvantage of modular checking is that it does not perform the inter- procedural flow-sensitive analysis because it stops the analysis at the boundary of the contracts and uses no caller side information. Therefore, modular check- ing produces many spurious witnesses of the errors. Particularly, it does not handle re-entrancy where a function of a module will be processed while the other function of the module is processed. In addition, the expressiveness of the contract notation has some problems, such that it does not handle higher order functions (function-pointers in the case of the C language). Also, DbC remains controversial to what should be denoted as contracts, especially for defensive programming.

Next, VARVEL generates state transition and property formulas from the CFG. The state transition is represented as a set of formulas. Each formula denotes the next value of a variable from the current values of some variables. A property is an LTL formula denoting the condition to reach the error nodes. The tool converts these formulas into boolean formulas and passes them along to the model checking engine, which then performs SAT-based bounded model checking on the given boolean formulas.

Functional languages that treat functions as first class data must be able to handle the contract of a higher-order function. There is an existing work that introduces contracts to Scheme [11], but the contracts are checked at run-time, as in Eiffel [16]. Our method differs from the existing work because it checks contracts statically.

A higher-order function is difficult to check against a contract statically, since the preconditions and postconditions of a callee function are not de- cided until the address of the callee function is assigned to a function-pointer. Modular checking divides a program into modules by regarding contracts as boundaries. This makes it even more difficult to use the source codes of the callee functions in other modules.

Defensive programming is a technique for achieving robustness, and it has been used in many industrial software development projects. Programmers write as many checking codes for the invalid arguments as possible. From the viewpoint of the design or functionality, the contract of a function is an ex- ternal specification of its intrinsic functionality to the other functions. In this sense, the contract of a function should not accept invalid arguments because they result in the function returning just an error code without performing its intrinsic functionality.

that represents an external specification for the intrinsic functionality. The precondition @pre denotes that callers must not pass NULL to bar in order for bar to perform its intrinsic functionality. Case 2 is an example of a internal contract that represents an internal specification for defensive programming. No precondition indicates that bar accepts any actual argument, and the postcondition @post denotes the result for each case of an actual argument. If p is not NULL, bar returns a non-negative value. If p is NULL, bar returns a

External and internal contracts can be handled with the help of behavioral subtyping. The relationships below should be respected for the consistency of the external and internal contracts as mentioned in the section 4.2. Namely, the internal contracts that represent all behaviors of a function correspond to supertype and the external contracts that are specialized for behaviors of its intrinsic functionality correspond to subtype.

Resolution of Actual Function The re-entrancy in C programs is often caused by a function call through a function-pointer. F-Soft performs a points- to analysis to determine the set of function addresses that are potentially assignable to a function-pointer and constructs a proper CFG in consideration of the function-pointers. VARVEL can make use of such features provided by F-Soft.

As mentioned in sections 4,5, and 6, a SAT-based bounded model checker sup- porting modular checking can overcome the weakness in modular checking if we adopt the notion of behavioral subtyping [15] and enhance DbC notations. However, it needs to consider other aspects for a practical use of the tool. The explanations are in order.

Initialization for invariants. The invariants are met after the initial- ization is completed. Object oriented languages like C++ and Java have a constructor, which is a language construct for initialization. C dose not have a constructor and the initializer of the variable declaration in C is not expressive enough to initialize the variables with complex data structures. C program- mers usually write their own initialization functions. DbC notations must be enhanced to instruct the static checkers about the initialization function.

It is not easy to solve the above issues by considering only the syntax and semantics of C language. We need to more thoroughly understand programming convention currently in practical use; how developers write industrial source codes (defensive programming, etc.) and how they create logical modules using language constructs and physical containers. We plan to establish a convention so that the advanced checking discussed above can also be performed by VARVEL.

