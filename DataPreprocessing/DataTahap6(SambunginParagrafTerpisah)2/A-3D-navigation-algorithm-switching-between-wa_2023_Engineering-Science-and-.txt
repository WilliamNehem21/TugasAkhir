The objective of this project is to develop 3D path planning, navi- gation, localization, and mapping algorithms for MAVs to enable au- tonomous navigation. Local planners based on waypoint and Bezier curves have been created to facilitate the successful navigation of MAVs within various environments. In this proposed method, we introduce a navigation approach that can seamlessly switch between local planners by assessing the complexity of the environment.

The most significant challenge faced by MAVs is the limited com- puting and storage capacity. Hence, it is imperative that the methods designed for MAVs have low processing complexity. In the literature, various methods are employed for path planning operations in MAVs. Effective waypoint selection for each path node is a prominent area of research in path planning [1]. Another method involves assessing the effectiveness of the planned path using a Bayesian approach [2].

Additionally, many path planning algorithms are based on the A* algorithm [3]. The primary objective of all these methods is to plan a path to a destination while avoiding obstacles. It is worth noting that these research endeavors are undertaken assuming knowledge of the environment map, whether it is feature-based, grid-based, or graph-based.

In the literature, several studies on this subject have shown that navigation is often addressed in conjunction with localization and mapping. This is because information about the environment, the MAV, and goal positions is essential for navigation. The concurrent process of mapping and navigation is commonly referred to as active SLAM (Simultaneous Localization and Mapping). In this article [4], we have compiled various active SLAM studies that explore different active SLAM types used on various robot platforms. Upon evaluating the active SLAM techniques discussed in this survey, several techniques that have been considered state-of-the-art for some time appear worthy of examination.

3D mapping is essential for robots in need of navigation. Therefore, in this study, mapping is planned to be executed as described in [8]. The implementation of the SLAM algorithm using a single camera and an IMU sensor is presented in [7]. In these studies, feature extraction

In this study, curves are generated based on the selected control points. Typically, while the first and last points lie on the curve, the other selected points are not necessarily located directly on the curve. Leveraging these properties of the Bezier curve, path planning was implemented for the path tracking module integrated into the control systems of MAVs. This method, functioning as a global planner within the navigation algorithm, effectively avoids enlarging the search space. Although there may be some marginal performance trade-offs in terms of path calculation time, significant time savings in MAV path execution have been achieved.

In this study, OctoMap was employed as a 3D mapping technique for MAVs. Additionally, the study involved the development of costmap extraction and global and local route planning methods integrated into the navigation algorithm. All experiments and research were conducted within the ROS/Gazebo (The Robot Operating System) framework.

The designed navigation algorithm extract a global costmap using OctoMap data. Only one instance of global map is calculated because there is only one map on the entire system. Local costmaps are cal- culated using MAV depth sensor information. MAV has its own local costmap information to be able to move dynamic environments.

Using local and global costmaps, the system produced a global path to given goal using A* algorithm. Each 3D matrix cell has 27 different directions and the point of A* route array is consist of these directions. In a nutshell, navigation module calculate two different costmap: Local costmap using sensor data, Global costmap using OctoMap data.

Researchers are generally involved in studies that will increase the performance values of these methods. But there are basically 2 low-level MAV controls for MAVs to follow local plans: Waypoint- oriented and trajectory-oriented approaches. A*, Dijkstra and etc. are used to generate a navigation path for waypoint-oriented low-level MAV controls.

Drawing a single curve from the starting point to the designated target may not always be feasible. In situations where a continuous path cannot be established with a single curve, research has been con- ducted to explore the possibility of creating a multi-hop path to reach the target. The objective is to reach the target using multiple hops, necessitating the identification of intermediate hop points. The number of hop points has been predetermined through empirical methods. In other words, efforts have been made to predefine a navigation route to the destination using a specific number of hops, such as 2-hop or 3-hop. The determination of waypoints becomes a crucial consideration when aiming to reach the destination using 2, 3, 4, or any other number of hops.

The user visualizes the OctoMap, which the system generates, using RViz, a 3D visualization tool. The user, with the assistance of interac- tive markers, directs the vehicle by determining its navigation position from the RViz screen. To ensure a safe and precise journey to the predefined destination, the most efficient route on the map is selected via global and local costmaps. Throughout this process, the path is continually updated to safeguard the MAV from obstacles and identify the correct route.

In the 1st and 2nd scenarios, routes were found with 2-hop, and the times taken to find the routes, the times taken to follow these navigation routes with a micro air vehicle, and two different total elapsed times are provided. In cases where the attempt to find the navigation route with 2-hop was conducted after failing to find the navigation path with 1-hop, a total time of 29.3 s was reached. On the other hand, the time taken to find the way using only 2-hop and reach the destination by following the path found was calculated as 14.4 s.

When comparing these times, the 29.3 s navigation duration was notably longer than the durations of 15.9 s with Dijkstra and 14.6 s with A*, both of which did not involve using Bezier curves. Conversely, it was observed that navigating using only a 2-hop search took 14.4 s, which is significantly faster, denoted in green as it outperformed the Dijkstra and A* methods.

In Scenario 4, when searching solely with 3-hop and reaching the destination using the navigation path found, the elapsed time was measured at 44.1 s. This time is shorter than the times of both the Dijkstra and A* methods. While creating and following the navigation path using only 3-hop outperformed the Dijkstra and A* methods in the 2nd scenario, the times in the 1st scenario were also better than the Dijkstra and A* methods

In some experiments, results were attempted using 4-hop. However, these results took longer to compute than the other two methods and were, therefore, omitted. The pathfinding process becomes con- siderably more time-consuming when the Euclidean distance to the target exceeds 11 m. Therefore, test results beyond this distance were excluded from the analysis.

reached in a total of 146.7 s. In contrast, when solely using Multi- hop Bezier curves, it is not possible to provide a total time because certain sections of the route could not be covered using Bezier curves. In the proposed method, the MAV first determines which local planner to utilize, and as a result, it reaches the intermediate points with the selected local planner. The entire route was navigated in a total of

122.9 s. In other words, it was able to complete the route 23.8 s faster than when exclusively using the waypoint-based local planner, representing a 16% difference. Efficiently managing battery usage in MAVs is of utmost importance, and a 16% reduction is a considerable improvement.

In addition to all these, blind search techniques were used to determine the most appropriate Bezier curve to follow. Instead, if optimization is done with heuristic-based optimization approaches, it may be possible to shorten the calculation time and therefore reduce the total flight time. Studies on this are being carried out and are considered as future studies.

As a result, new approaches have been brought to the literature on navigation approaches on micro air vehicles. In addition to this study, in the future, in the calculation of multi-hop curves, searching for the positions of the intermediate hops with an intuitive method can make the developed method work faster, so this point can be focused on. In addition, costmaps used to calculate environment complexity may not always produce the correct result, with a low probability. The discovery of new methods to calculate this complexity can be listed among future studies.

