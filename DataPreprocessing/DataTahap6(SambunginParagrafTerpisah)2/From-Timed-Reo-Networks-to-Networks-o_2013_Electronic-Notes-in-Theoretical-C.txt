In software engineering, a service is an autonomous software entity running on one or more machines and providing a particular functionality to its clients. Service clients are typically other software systems that provide their own services and need the provisioned functionality to fulfil some of their goals. Thus, within one system, various services communicate with each other, e.g., exchange data or collaborate to carry out some activity. Given only limited information about functionalities provided by various services, it is crucial to ensure that these services communicate

It is not a trivial task to create a connector that implements a certain behavioral protocol. There are several tools that can help connector designers to detect possible errors in their models. One of them is the animation engine [4]. This tool shows flash animated simulation of designed connectors. For more complex connectors, their formal verification can be performed with the help of simulation and model- checking tools [16] integrated with the Extensible Coordination Tools (ECT), an environment for design and analysis of Reo models. In our previous work [17], we mapped timed Reo to the process algebra mCRL2 which provides a special operator to define relative time constraints on the occurrences of process actions. However, the verification abilities of the mCRL2 toolset with respect to time properties are currently very limited. In particular, a model checker dealing with real time, time- aware simulation facilities, and system property specification language supporting time constraints are not available. Therefore, we need a more powerful tool for analyzing timed workflow and service composition models designed with Reo.

In this paper, we aim to eliminate this gap by integrating ECT with Uppaal [8], a powerful and widely used toolset for real-time system modeling, validation and verification. In Uppaal, distributed real-time systems are modeled as networks of communicating timed automata. Research has demonstrated that rigorous mod- eling of the behavior of concurrent and distributed systems can prove to be very successful in uncovering design flaws. However, the need to model a system at

The remainder of this paper is organized as follows. In Section 2, we explain the basics of Reo. In Section 3, we describe the Uppaal networks of extended timed automata. In Section 4, we explain how we model Reo channels with Uppaal timed automata templates. In Section 5, we illustrate the use of Uppaal to analyze a sample Reo workflow model. Finally, in Section 6, we conclude the paper and outline our future work.

at a time and loses them; and (v) the FIFO channel, which is an asynchronous channel with a buffer of capacity one. Additionally, there are channels for data manipulation. For instance, the Filter channel always accepts a data item at its source end and synchronously passes or loses it depending on whether or not the data item matches a certain predefined pattern or data constraint. Finally, the Transform channel applies a user-defined function to the data item received at its source end and synchronously yields the result at its sink end.

The informal description of channel behavior presented above is not sufficient to fully understand the semantics of a Reo connector. The most basic model ex- pressing formally the semantics of Reo is constraint automata [7]. Transitions in a constraint automaton are labeled with sets of ports that fire synchronously, as well as with data constraints on these ports. The constraint automata-based semantics for Reo is compositional, meaning that the behavior of a complex Reo circuit can be obtained from the semantics of its constituent parts using the product operator.

A system may be described as a network of communicating timed automata. Semantically, the system can delay if all automata can delay, and can perform an action if one of the automata can perform an internal action or if two automata can synchronize. Synchronization in Uppaal takes place via channels. A binary synchronization channel c in Uppaal can be declared as chan c. An automaton edge labeled with c! synchronizes with another edge labeled c?. A broadcast channel c is declared as broadcast chan c and is used for multi-party communication: one emitter c! can synchronize with an arbitrary number of receivers c? and all channels that can synchronize at a current state must do so. If there are no receivers, the emitter can still execute the c! action, i.e. broadcast sending is never blocking. In a network of timed automata, variables can be defined locally for one automaton, globally (shared between all automata), or as parameters to the automata.

An automata template in an Uppaal model consists of a name, a set of argu- ments, local declarations and a timed automaton definition (as above); formally, TAT = (tName, Args, local, Auto). Global and local declarations contain the def- inition of clocks and variables. The network of timed automata to be analyzed is defined in the system declarations by instantiating the timed automata templates.

Due to the fact that Uppaal channels synchronize non-deterministically if several combinations of input and output edges with the same name are enabled, we can model the behavior of Reo Merger and Router nodes by instantiating all joint chan- nels with a common port name. However, to reproduce the behavior of Replicator nodes, we need to involve broadcast channels. Since Uppaal specification language does not support polymorphism or channel type inheritance, we cannot pass broad- cast channels as parameters to the aforementioned templates. Hence, we need to create separate templates for all basic Reo channels connected to Replicator nodes. For every channel type, e.g., FIFO, we introduce two additional templates with the following signatures:

The intuition behind this statement is as follows: by construction, for every location in a TCA for a basic Reo channel, we introduce a non-committed loca- tion in the corresponding timed automaton, while all committed locations in the instantiated templates represent data flow through Reo ports shown as TCA tran- sition labels. Thus, we can define a weak bisimulation relation between TCA and the constructed networks of timed automata. The goal then is to show that the introduced Uppaal synchronization templates preserve the semantics of the TCA product operation. Due to the lack of space we cannot provide a formal proof here.

All variables for the nodes that follow the Join node resR out are arrays of two el- ements, i.e., int d resR out[2], d res in[2], d res out[2]. All automata declarations are based on automata templates discussed in Section 4.

In this paper, we presented an approach for mapping Reo networks to the networks of timed automata to enable their timed analysis with the Uppaal model checker. Despite many conceptual differences in these two specification formalisms, we were able to compositionally map one into the other preserving the behavior of dataflow models in Reo. The most closely related work to ours is the SAT-based verification of timed component connectors [12]. In this work, an approach for bounded model checking of TCA is proposed by translating systems of TCA into propositional logic with linear arithmetic constraints. Since TCA provide a semantic model for timed Reo, this work can be used for the analysis of Reo circuits. However, our work pro- vides a more straightforward approach and uses the well-established Uppaal model checker. In [13], a compositional model for real-time coordination in dataflow net- works is presented. This approach is interesting for its combination of synchronous and asynchronous communication patterns, but it significantly differs from the prin- ciple of extensible channel-based coordination used in Reo. An important issue for our future work is to formally establish the relation between TCA and the semantics of the generated Uppaal networks of timed automata. The intuition behind it is as follows: a transition in a TCA corresponds to a path in the Uppaal network of timed automata that leads from one location without committed states to another location without committed states.

A translation from a subset of constraint automata to timed automata has been discussed in [11] in the context of schedulability analysis of real-time actors coordi- nated by Reo. In that work, a Reo connector is considered to be locally deployed, i.e., no distributed implementation of Reo, and furthermore, the coordination is assumed to happen in zero time. The effect of communication delay is studied as an orthogonal concern.

