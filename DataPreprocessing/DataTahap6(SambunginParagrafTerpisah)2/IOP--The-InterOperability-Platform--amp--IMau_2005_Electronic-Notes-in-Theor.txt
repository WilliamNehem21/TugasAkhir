The Maude system [1,2] is a high performance system based on rewriting logic with many advanced features. Currently the means of interacting with Maude is via a command line interpreter. Typically, users that want to connect Maude to other tools or provide alternative display mechanisms, must do something ad hoc, for example with Perl scripts, Tcl/Tk, etc.

Rover is visualized using a graphical object that knows its location and orientation. In addition to responding to messages generated by mouse or keyboard input, the rover object can receive messages from other IOP actors. Thus, like the IMaude actor for mobility, the graphics actor must provide for messages to and from its contained graphical objects. For the initial case study we defined an ad hoc syntax for messages to the rover graphical object and the reactions are hardwired in Java code for the behavior of the rover graphical object (represented as a Java object). Future work is to define a more general syntax for describing active graphical objects. Another task is to define module transformations that automatically add instrumentation for animating object system behavior.

Inter-actor communication is purely ASCII text, and is implemented in two layers, the user layer, and the transport layer. In the transport layer a message consists simply of a line of text representing a number (i.e an integer in base ten), followed by that specified number of bytes. The user layer, implemented on top of the transport layer, consists of the address of the target actor, the address of the sending actor, followed by the body of the message, each on a new line:

The Graphics actor is a first step towards realizing a graphics algebra with mappings between algebraic data types (as specified in Maude) and graphical objects that have a related structure. Graphical objects are interactive and can be used to interact with related Maude data structures. So far we have defined the following graphical objects: Graphs, Menus, Text, Grids, Containers, and Sprites. These objects are specified using a Lisp style syntax, and messages sent to active graphical objects also have a Lisp style syntax.

This module is the mechanism used to support building user interfaces by pro- viding a basic read-eval-print loop. A LOOP-MODE system has the form [inQ,S,outQ] where inQ and outQ are lists of quoted identifiers (qids) and S is the system state that is rewritten using application specific rules provided in a module that in- cludes LOOP-MODE. The state persists between input/ouput actions until the loop is exited. inQ is a stream that receives input directed to the loop from stan- dard input and outQ corresponds to a stream connected to standard output. The Maude tokenizer converts the input byte stream into a qid list (each qid represents a token) and conversely the output qid list is converted to a byte stream by Maude.

The operation qid converts a string to a quoted identifier. Note that we have reused the variable name vname to declare a variable of sort QidList. This was done to remind us that although the argument list part of an entry can be any qid list, we expect that it will be a single qid, the variable name, for an entry of type setq.

The following rule is the rule in the Pathway Logic Assistant module used to display such a graph. The graph must have been already generated and saved under the name matching gname:Qid. It is retrieved using the function findPetriG, and the function dgraph2graphix prints the graph in a form that can be understood by the Graphics actor, adding annotations for actions and display instructions such as colors and shapes of nodes and edges.

There are two aspects to the IOP/IMaude work. One is moving from a declar- ative functional language to an interactive system while retaining a clean semantics, and the other is interoperation of tools. Although we have not emphasized the semantics aspect, we are relying on the basic ideas of interac- tion semantics for actors [17,18] to give semantics to Maude actors, without modifying the underlying Maude system. An alternative approach is the idea of Functional Reactive Programming (FRP) [19], where a functional language such as Haskell is extended with constructs such as Monads, Arrows, and I/O to support interaction. The basic Haskell Library is then extended with primitives for graphics (HGL), robot controllers, and so on. The IOP/IMaude approach is to provide a mechanism for communication with tools or processes providing additional services rather than extending Maude.

The ToolBus [20] is a software coordination architecture. The ToolBus uti- lizes a scripting language based on process algebra to describe the communi- cation between software tools, providing synchronous and a limited broadcast forms of communication. To integrate a tool, an adapters must be written that translate between the internal ToolBus data format and the data format used by the individual tools, and adapts it to the ToolBus communication protocols.

The IOP coordination model is simply asynchronous message passing tak- ing strings to be the basic communication data. Building on the metalogical expressiveness of Maude, IMaude provides the ability to program coordination scripts as desired. The IOP wrapper for non-interactive tools such as Maude or PVS is a rudimentary form of adaptor for input/output byte streams. Some more advanced adaptors have been programmed in IMaude (for example con- verting representations of graphs). In some cases generic adaptors could be useful, and perhaps we will build on the ToolBus ideas. In the case studies carried out so far, the choice of precisely what external representation to use depends on context, graphs being a good example.

The Systems Biology Workbench (SBW) [21], is a modular, broker-based, message-passing framework for communication between applications that aid in research in systems biology. While Pathway Logic is aimed at qualitative models represented using rewrite rules, the SBW focus is on kinetic mod- els represented using the SBML markup language (http://www.sbml.org). SBW comes with a simulator, plotter, adaptors for external simulators, and a generic simulation-control GUI interface. Future work in the Pathway Logic project includes connecting the Pathway Logic Workbench to SBW.

We have described IOP, a communications infrastructure that manages a dy- namic collection of actors including: basic communications actors, a Graphics actor, and actors obtained by adapting existing tools to the communication infrastructure. Currently both Maude and PVS have been adapted. We have also described the IMaude module that support defining application specific behaviors for the Maude actor. IOP is being used heavily in the Pathway Logic Project to develop and experiment with models of biological networks and processes. Its further development will also be motivated by its use in several other current and pending Maude projects.

