In the Software-as-a-Service (SaaS) paradigm, software applications are hosted on a central server, and provided to users on-demand. This is often accomplished by means of web-based interfaces, so that clients do not need any other application than a web browser. Social networks and online storage facilities are prominent examples of this paradigm. Due to its advantages in terms of resources, costs, and convenience, this kind of paradigm is often used also within organizations, to provide services to employees or internal users.

The rest of the paper is organized as follows. The OPENNESS framework is described in Section 2, while related work are discussed in Section 3. The stochas- tic model is described in Section 4, while evaluations and results are described in Section 5. Finally, conclusions are drawn in Section 6.

and supports social discussion, while supporting modern technological standards. Moreover, such platform guarantees secure exchange of data between several services of heterogeneous frameworks. The design of the platform has thus been strongly characterized by the risk evaluation on the whole system, where the need to realize a secure system was of paramount importance.

The Web Layer, which is built on top of the Apache Server, is also composed by a Web Cache, operating as a Reverse-Proxy, in order to reduce bandwidth and to improve response time. The Apache Web server communicates with the Application Layer components (e.g., Tomcat and PHP application servers), using AJP (Apache JServ Protocol), which is an optimized protocol for the J2EE and PHP containers. Communication between layers is based on the SSL (Secure Socket Layer) protocol. The access to the platform is managed by an identity provider system, and a specific module is in charge to manage user accounts, which are centralized on an

J2EE Container. Represents the web container in which all the services of the platform relying on Java 2 Enterprise Edition are installed. Within this modules it is possible to identify two main applications: the Liferay Portal and the D2R WS 1 . Liferay is a web portal framework written in Java based on a Service- Oriented Architecture (SOA). D2R WS is a framework that can be used to map different kinds of information to an ontology model, and retrieve them using SPARQL queries. Such service can be used both to expose the information on a certain database, and to perform SPARQL queries on external data providers.

PHP Container. This block comprises all services that rely on PHP for their exe- cution. In particular, we consider the Moodle and Mantis applications 2 . Moodle is a modular e-Learning platform. It allows teachers to organize lectures, and provides social features like forums, blogs, and chats to students. Mantis is a popular open source bug tracking system written in PHP.

The impact of security on performance is even higher on web services which rely on XML for communication. Even though the use of XML for communication guarantees properties like interoperability and flexibility, its usage for implementing security mechanisms has a great impact on performance, mainly due to its excessive verbosity. Several works in the literature highlight the high performance cost due to the adoption of WS-Security, a standard based on XML to provide security mechanisms to web services. For example, results in [9] show an increase of network

The authors of [21] analyze the tradeoffs existing in a key distribution centre, using the Markovian process algebra PEPA. Other existing approaches in the com- bined evaluation of performance and security are reviewed in [20]. In the same paper, the authors describe a general process using the example of choosing an appropriate key length for encryption.

For a successful deployment of a multi-service web-based system like OPEN- NESS, means to evaluate its scalability with respect to the expected workload are needed. Moreover, the evident impact of security mechanisms on the planned ar- chitecture needs to be assessed as well, in order to find the proper balance between security, performance, and flexibility of the system. In this paper we describe a model-based approach for performance and scalability analysis of OPENNESS.

In performing such decomposition, particular attention is devoted to the iden- tification of the interfaces between the different submodels. Clearly defining the interfaces between submodels before their implementation improves the reusability, maintainability and modularity of the obtained submodels. Taking this concept to its highest level leads to a modeling paradigm that recalls object-oriented pro- gramming: the implementation of each submodel is independent from the other interacting submodels, and it only depends on the defined interfaces. Submod- els obtained in this way are modular i.e., they can be easily replaced or refined as needed, provided that the input and output interfaces remain the same. This approach also eases the integration with external tools: a given submodel, imple- menting a specific function, may be replaced with an ad-hoc external tool, either directly or through a wrapper model. An example of such integration is described in [4], where adopting this approach allowed SAN submodel implementing a mobility model to be replaced with the output produced by a vehicular mobility simulator. Another dual aspect that enhances the modularity of submodels is the identifica- tion of their parameters. In complex systems like OPENNESS, different components may have a similar behavior, only differing by some numerical parameters that are specific of a particular instance of the component, depending on its role in the

According to the introduced assumptions, a user of the OPENNESS platform pe- riodically becomes active, performs a number of actions, and then returns in an inactive state. The selection of an action by the user is modeled as a probabilistic choice. The actions that are available to the user, as well as the probability of being selected, depend on the user profile.

Us: Utilization of service s. To evaluate this metric, the reward function is defined as a function returning one unit of reward for each state in which service s is busy (i.e., Mark(Queue)>0), and zero otherwise. The mean reward that is obtained in a given instant of time t corresponds to the desired metric.

Similarly, a Trainee may only access to e-Learning courses (Action 4). A user with profile Teacher may access to courses, but he may also manage them (Action 5). A Public Citizen may be involved in the generation of an entrepreneurship idea (Action 6), and may use the platform to engage the communication and collabora- tion services (Action 7). Finally, users with profile Decision Maker use the platform to decide about the realization of ideas proposed by citizens (Action 8).

In this section the OPENNESS platform is evaluated considering the effect of in- troducing some security mechanisms. We assume that the introduction of such mechanisms produces an adverse effect on system performance, as largely docu- mented by experimental work in the literature (see Section 3). The obtained results are then compared with the ones described in the previous section.

In this paper we applied stochastic modeling to the evaluation of performance and scalability metrics of the multi-service web-based OPENNESS platform. The ap- proach presented in this paper highlights one emerging application of stochastic modeling, i.e., the evaluation of the impact of security countermeasures on the per- formance of a service-based architecture. The framework defined in this paper also highlights how achieving modularity can improve the reusability and maintainability of models based on Stochastic Petri Nets.

