Democles 5 [12] is the tool supporting the EP language. EP-models can be used to describe a platform-independent model of a system [12,11]. This paper shows how EP can describe a family of related systems, and presents a code-generation strategy for EP based on templates.

The Formal Template Language (FTL) [4,2] is a formal language for expressing templates of any target textual language. It has a general mathematical semantics, not being bound to any platform or execution environment. FTL is generative; it describes sentences of some target language (here Java and Objective-C) and generates sentences when provided with an instantiation.

The EP model of section 6 is platform independent. It talks about problem do- main, graphical user interface and persistence concepts without committing to any platform-specific details. The team that developed the EP model presented here consists of three people; only two of them are experts in Android and iPhone. How- ever, all developers could understand and process the EP PIM and generate iPhone and Android applications from it; EP constituted a platform-independent medium over which the different users could communicate.

In such a setting, initially the progress in developing a model is slow. This is because initially, we need more templates, and it takes time to build them and get them right. Once the templates are there and they become mature, then the development is relatively fast and straightforward, and the model developer becomes independent from platform developers.

Our experiment suggests that our MDD approach is effective at helping develop- ers that are not experts in some target platform in developing platform applications from models. However, our approach does have several limitations and opportuni- ties for improvement. We now discuss these in detail.

A benefit of the approach presented here is that the different application variants are obtained automatically. This means that application developers do not directly have to deal with variability, which is hidden in the templates infrastructure. How- ever, sometimes one wants to deal with variability at the modelling level, but our EP based approach does not currently support this.

This experiment shows several usability benefits of developing applications at the modelling level. The abstraction from platform code enables non platform-experts to participate in the development; this encourages the formation of teams with a healthy mixture of skills, enabling those that are not platform experts to partici- pate in the development. Furthermore, this provides a clear separation of concerns between the work that platform-experts and designers need to do and a medium that enhances collaboration. The downside in terms of usability lies in the level of tool support. Despite many advances in recent years, modern platform-specific development toolkits are more sophisticated than MDD toolkits. We are not aware of platform-independent GUI editors that support various platforms. Through the experiment presented here, we gained insight on things to improve on our approach:

Although we have successfully built a model from which a practical mobile appli- cation could be generated, our case study is still relatively small. Things get more complicated when the EP models become large; the models tend to become clut- tered. We are looking into ways of improving this to facilitate modelling in the large.

The approach presented here is a variant of the FTL-based modelling framework of [2,3]. This proposes to define semantics of UML notations based on catalogues of FTL templates; each catalogue encapsulates a particular semantic interpretation of the notations. Here, we adapt the same idea to the context of code generation, where each catalogue targets an alternative execution platform. Unlike the FTL templates presented here, templates of [2,3] were instantiated manually (no FTL tool support was available at the time).

Several works propose MDD frameworks based on templates [20,7,8]. However, unlike our FTL-based approach, they use template languages that are not formally defined; [20] and [8] uses very simple template languages made of placeholder con- structs only. FTL is a formally defined language with a rich set of constructs including placeholders, lists, choice, template naming, and modules.

Balasubramanian et al [6] propose an MDE approach based on domain-specific modelling languages (DSMLs), where domain modelling concepts encapsulate trans- formations to platform-specific artifacts. This approach covers more system aspects than the EP-based approach presented here, such as architectures and deployment. Our approach does not use DSMLs, but provided the concepts of our models are abstract they can be mapped to various platforms. Unlike [6], the approach pre- sented here uses templates as intermediate representations of code. Our approach is based on formal languages, both EP and FTL are formal; [6] uses statecharts and data-flow diagrams to describe behaviour; our behaviour is described using EP and OCL.

