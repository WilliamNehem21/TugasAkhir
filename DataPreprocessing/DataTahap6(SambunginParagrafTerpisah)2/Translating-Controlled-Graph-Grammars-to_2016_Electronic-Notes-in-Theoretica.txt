Software and hardware systems are found everywhere and each day we face more complex and sophisticated systems. The development of systems has been a hard task to be performed, making it necessary a complete specification with no mistakes. Each day, these systems grow in scale and scope, often having to interact with other complex and independent environments. Along this increase of complexity, the pos- sibility of mistakes is intensified which can lead to catastrophic losses, either in terms of time, money or even lives. Therefore the techniques to assist the development of reliable and correct systems are becoming more and more necessary [1]. One of the ways to reach such a goal is through the use of formal methods, techniques based in mathematical formalisms which can offer strict and efficient measures to project, model and analyze computer systems [2]. A specification must be com- pact, accurate and with no ambiguity, that is, it must be given through a language with well-defined syntax and semantics, which use mathematical concepts. These concepts are important as they enable stating if a computational system presents a certain property or fulfills its specification [3].

In the last decade several case studies and industrial applications confirmed the significant importance of the use of formal methods to improve the quality of both hardware and software systems. However, the high cost to use formal methods causes them, in a general way, to be used only in the development of high integrity systems, where there is a high probability that the mistakes result in the loss of lives or serious damages. Well defined specifications, verified with respect to critical properties, have provided a basis for a correct and efficient source code generation. An outstanding example is the Paris metro system [4]. The system is fully automatic and had its critical safety parts formally developed by Matra Transport International using the B method [5].

Instead of using simple graphs which only have vertices and edges, some typing mechanism in the graphs is generally used. The graph typing can be done through labels, attributes or type graph. In the case of this paper, the typing is provided by a type graph. A type graph of a grammar characterizes all the types of vertices and edges allowed in the system, and all graphs of the grammar are restricted to these types. This restriction is defined by a graph morphism mapping each graph in the type graph.

should be present in the graph so that it can be applied and the changes are made by its application, where some elements are eliminated and others are created. The behavior of a graph transformation system is determined by the application of rewriting rules, also called graph productions [15]. Following the Double Pushout approach (DPO) [15], a rule is composed by three graphs: the left-hand side L, the right-hand side R, and interface K which represents elements that L and R have in common. It specifies that, once an occurrence of the graph L is found in the current state, it can be replaced by the graph R, preserving K.

In general, a graph grammar describes a system which is composed by a type graph, that characterizes the types of vertices and edges allowed in the system; an initial graph, that represents the initial state of the system; and a set of rules, which describe the possible state changes that may occur in the system. Besides this, the rules can have associated names. To do this, a set of rule names is defined and each name is associated to a rule by a function.

The behavior of a system specified using a graph grammar can be described by applications of the graph grammar rules in graphs which represent the system states. Thus, the semantic is given by a set of graphs which derive from the initial graph. The application of a rule to a graph (derivation step) is enabled as long as there is an occurrence of the left-hand side of a rule in the present state graph, that is, if there is a total graph morphism mapping the left-hand side of the rule into the state graph.

The construction of the diagram above depends on the existence of D, called pushout complement. To ensure this existence, the match m must satisfy the gluing condition with respect to l. This condition is divided into two parts: the dangling condition, i.e., if a vertex is deleted, there can be no edges arriving or leaving from this vertex; and the identification condition, i.e., two vertices can be identified by m only if they are preserved.

If there is a rule that create some item that is needed by another one it is possible to consider that it causes this second rule. This stresses the idea that a cause provides the necessary condition for some action. In addition, because some rules can be applied simultaneously (in parallel), it is necessary that these rules are not in conflict, that is, one rule cannot delete some item used by the other rules. The following definition review causal dependency and conflict relations.

Since the restrictions imposed by the REs cannot be translated to a control structure of the Event-B, the control structures imposed by the REs are transferred to the data. In order to do this, a translation of the CGGs to the GGs was defined by adding dependencies and conflicts in the rules of the grammar. These dependencies and conflicts are necessary to keep the order of the application of the rules that are defined by the REs. In order to introduce dependencies and conflicts, the right- and the left-hand side of the rules and the initial graph are changed, adding new vertices. Each added vertex must be new (it must be from a type which does not exist yet), since it cannot cause side effects, that is, it cannot create other dependencies or conflicts besides the expected ones. All new vertices must also be added in the type graph of the new grammar. Since a rule can appear several times in a RE and have different order restrictions, there can be several instances of the same rule, where each one will have different added dependencies and conflicts.

The functions right and left differ from right and left, respectively, by using the functions upFinalNames and upInitialNames instead of the originals. These new functions, change the name of an old rule by a non-deterministic choice between the old and the new rule names. This modification enables also to keep the original rule (needed to start and finish the iteration cycle).

Observe that new vertices are added in the type and initial graphs, as well as, in the left- and right-hand sides of the rules. In the type graph are added all new vertices used to create the dependencies and conflicts:  , , , ,  and . In the initial graph only one vertex was added, since there is only the Start rule in the initial rules of the RE. This same vertex was also added in the left-hand side of Start.1 rule. Given that the new vertex is only on the left-hand side of Start.1 rule, this rule does not conflict with any other. Note that there are two versions of Start rule, this occur due to the closure operation. One version (Start.1) is applied

Graph grammar is a visual and intuitive language that allows specification and formal verification of systems with complex characteristics. This language was chosen because there are different techniques and tools that allow the use of model checking and theorem provers for the verification of systems properties that were described in that language. Controlled Graph Grammars permit to set an order on the rule applications that does not take into account the state but rather an auxiliary control structure, such as regular expressions. Nevertheless, there are no tools that allow formally verify properties for this kind of grammar.

