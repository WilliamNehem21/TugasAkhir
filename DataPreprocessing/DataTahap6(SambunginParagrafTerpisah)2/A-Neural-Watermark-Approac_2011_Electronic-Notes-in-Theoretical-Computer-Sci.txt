In this paper we propose the coupling of a watermarking technique for images, called least significant bit, in the multiple classes random neural network. For that, we design a training process of the watermark pattern, an embedding process of the learned pattern in the original image, and a detecting process of this pattern in the carrier image. The removal of the watermark is not considered in this work, since the aim is to study the capability of detection of our neural approach of any manipulation over the carrier image. We define several attacks to compare the robustness of our approach with previous works (rotation, JPEG and detect digital watermark in images, in order to exploit the highly efficient learning and pattern recognition mechanisms of this model. Particularly, we propose the mixing of a watermarking technique in images called least significant bit, or LSB with the multiple classes random neural network model (MCRNN). The LSB technique exploits the weakness that the human visual system HVS has to detect brightness variations in the colors of the visual spectrum [6]. The technique is based on replacing the least significant bit of the carrier signal with the bit pattern of the digital watermark. The detection process can recover the watermark if it has known the values used to embed the digital watermark. The watermark embedding process

We attack this problem encrypting the watermark in the synapses weights of the MCNN (it learns the watermark) and proposing a neural-LSB embedded and detection approach. The watermark is embedded and detected through a MCRNN, which is learned by the MCRNN in the training process. In our approach based on the MCRNN and on the LSB technique, the MCRNN learns a version of the watermark built using the LSB principle (the synapses weights will contain the encrypted watermark), and uses the synapses weights of the MCRNN in the neural- LSB embedded and detection phases. Particularly, the detection of a violation in the original image is like a classical recognition problem on the domain of Artificial Neural Network (in our case, of the encrypted watermark embedded in the original image).

Our proposed method is highly robust; the watermarked image can survive to different image attacks like rotation, JPEG compression, scaling, noise, cropping, Horizontal Flip, Brightness and contrast correction; contrary to the classical LSB technique, due to that we encrypt the watermark (in the synapses weights of the MCNN) and we use it in the watermarking process (embed and detection process). The watermark is difficult to violate and the watermarking process is very sensitive to a modification of the original image (it does not recognize the watermark if this one is modified). Additionally, our approach is very good in terms of Peak Signal to Noise Ratio (PSNR) and Noise Generated (NG) criteria, which makes invisible our approach (it is not perceived in the image).

The MRNN is based on the random neural network model. The RNN was intro- duced by Erol Gelenbe [9. 10], it consists of a network of n neurons in which positive and negative signals circulate. Each neuron accumulates signals as soon as they ar- rive, and can fire if the count of signals in a given moment is positive. The firing occurs randomly according to an exponential distribution of constant rate, and the signals are sent to other neurons or from outside the network. Each neuron i of the network is represented at any time t by the potential of its input signal ki(t). The positive and negative signals have different roles in the network. A negative signal reduces by 1 the potential of the neuron to which it arrives (inhibition) or no effect on the potential if it is zero, while a positive signal increases by 1 the potential of the neuron. The signals can arrive at a neuron from outside the network or from other neurons. Each time a neuron fires is deleted the potential contained in it. A signal leaves the neuron i due to the neuron j with probability p+(i, j) as a posi-

Our training stage can be regarded as a process to encrypt the watermark for the embedding and detection processes. In this section we explain the main aspect of this phase (meaning of the weights, initialization of certain parameters of the MCRNN, learning procedure, etc.).

in our approach, Yk(i, c) indicate LSBs intensities of each neuron, for example, Y(3) = (0.2, 0.8, 0.2) refers to the desired intensities output of the neuron 3 in the first, second and third class (0.2, 0.8 and 0.2, respectively). This LSB intensity is an approximation of the LSB value of each pixel in the watermark to be used by the MCRNN (see section 3.1.3). The initialization of this set of input and output pairs in the network is:

where P(p, c) represents the pixel p of the original image in the channel c. Like there are three channels per pixel (RGB) and each channel is associated with a class c, the channel c of the pixel P(p, c) will be read completely (this is, the full 8 bits), so that, depending on the value threshold function Fv(q(i, c)) and the LSB on the original image, we embed the pattern of the watermark by adding or subtracting 1 to P(p, c). In this way we embed the watermark pattern in it.

In our approach, the fundamental goal of the detecting process is to determine if all the watermark patterns previously embedded in the original image have not been changed. For that, we need to compare all embedded patterns with the pattern of the original watermark by using the MCRNN. We start with the computation of the probabilities of excitation of each neuron q(i,c) using the weights trained (key), to obtain the pattern of the original watermark. After calculated the probability of excitation q(i,c), we use the threshold function Fv(q(i, c)). These steps at this point are the same as in the embedding process. The next step is to compare the patterns embedded with the trained pattern. This comparison is performed by taking the LSB for each channel of each pixel of the carrier image and the value of the threshold function Fv(q(i, c)) related. This process is defined by a detection function Fd(Fv(q(i, c)), LSB) as follows:

In general, the experiments will be performed by setting a threshold T with a value of 0.5, assuming an intensity of 0.2 and 0.8 for LSBs values of 0 and 1 of the watermark pattern, respectively. In our system the reading of the channels starting with the blue, then green and finally the red, and pixels are counted from left to right, starting from the bottom of the image.

22. If we calculate the PSNR with maximum possible noise, the maximum possible PSNR is 48.13 dB, for this reason is not expected a lower than 48.13 dB over any image using our approach. We can conclude that using our technique, it does not influence significantly in the distortion of the images embedded.

All the attacks over the carrier image were detected by our approach. For the rest of works, only some of them are detected (in some case, they do not detect some attacks). In the case of the SVD approach [5], it has difficult to detect a violation when the image is moved or if we introduce some noise because this matrix approach cannot detect some of the modification. The behavior of DCT and DWT approaches

The times of the processes involved (training, embedding and detection), were not analyzed in this work, since their values in milliseconds were too small. For example, in several of the experiments the longest training execution time was 1235 milliseconds to 5 iterations, for a watermark of 16x16 pixels. The embedding and detection processes had the same behavior.

As future work we propose the development of new prototypes that can connect the model presented in this work with other digital objects such as text, audio and video. This increases the possibilities of using this model in the area of computer security. We have tests our system for BMP images, we need extend it to images in other formats (such as JPG, GIF and PNG).

