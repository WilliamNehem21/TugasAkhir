The Control Systems team at AWE is currently undertaking the formal anal- ysis of a hardware implementation of a Java Virtual Machine (JVM). The intention is to analyse the behaviour of the processor with respect to the instruction set presented in the official JVM documentation [8]. Since the instruction set of the JVM comprises over 200 bytecodes, this paper will il- lustrate one of the intended approaches using a considerably smaller example. However, the example is sufficient to demonstrate potential hazards in the development of pipelined hardware through refinement.

Informally, the ACL2 and Event-B approaches described above are similar because the refinement map in ACL2 corresponds to the gluing invariant in Event-B. A gluing invariant relates states in a refined (concrete) Event-B model with states in the corresponding abstract model. Finite stuttering in the ACL2 approach corresponds to the introduction of new events in an Event- B refinement (see Section 1.2).

The structure of the paper is as follows. Event-B and its notion of refine- ment are introduced. Then an informal description of the instruction set of a hypothetical processor (taken from [9]) is presented in Section 2; from this, an abstract Event-B specification is constructed. In Section 2.2, a pipelined hardware architecture (also taken from [9]) is introduced as a candidate pro- cessor for the instruction set, and Event-B refinement is used to formalise the architecture and its behaviour with respect to the instruction set. A proof of refinement, described in Section 2.4, fails to highlight some potential haz- ards in the pipelined architecture, and a novel solution (event merging) is proposed in Section 3 as a way to overcome these problems. In Section 4, we see how over-zealous merging can introduce further problems in a refinement.

Note that this paper is not questioning the soundness of superposition refinement. The purpose of this paper is, given an abstract specification of an instruction set, to propose a solution to the task of its formal refinement to hardware. Also note, the refined model presented in this paper is still relatively abstract when compared to hardware description languages such as VHDL [6]. Hence, the paper does not propose a complete route to hardware. However, it could be incorporated into any future approach that generates hardware from Event-B specifications.

An abstract Event-B specification [10] comprises a static part called the con- text, and a dynamic part called the machine. The machine has access to the context via a SEES relationship. This means that all sets, constants, and associated properties defined in the context are visible to the machine. To model the dynamic aspects, the machine contains a declaration of all of the state variables. The values of the variables are set up using the INITIAL- ISATION clause, and values can be changed via the execution of events. Ultimately, we aim to prove properties of the specification, and these proper- ties are made explicit using the INVARIANT clause in the machine. The tool support generates the proof obligations that must be discharged to ver- ify that the specification is well-defined and the invariant is maintained. It also has interactive and automated theorem proving capabilities with which to discharge the generated proof obligations.

where G(v) is a Boolean guard and S(v) is a generalised substitution (both of which may be dependent on one or more state variables denoted by v) 2 . The guard must hold for the substitution to be performed (otherwise the event is blocked). A REFINES clause, which includes the name of an abstract event, is necessary when the definition is a refinement of an existing event. There are

In order to express the desired properties of a system as succinctly as possible, an abstract specification will dispense with many of the implementation details in favour of a more mathematical representation. Refinement is the means by which the artefacts of an implementation can be incorporated into a formal specification whilst conforming to the behaviour of the abstract specification. A demonstration of Event-B refinement will be given in Section 2.4.

The context and machine of an abstract Event-B specification can be re- fined separately. Refinement of a context consists of adding sets, constants or properties (the sets, constants and properties of the abstract context are re- tained). The link between an abstract machine and its refinement is achieved via a gluing invariant defined in the concrete machine. The gluing invariant relates concrete variables to those of the abstract model. Proof obligations are generated to ensure that this invariant is maintained.

substitution S' and variable v' causes a transition to a new state, then the new state is related (via J ) to a new state in the abstract world (i.e. a state resulting from the abstract event with generalised substitution S with abstract variable v). Note, the multiple arrows in the diagram indicate that generalised substitutions can be non-deterministic. Also note that it is not necessary for transitions in the abstract world to correspond to transitions in the concrete world (i.e. refinement can reduce the non-determinism).

The guard of an event is enabled only when the instruction indexed by PC contains the appropriate opcode. For example, the event add inst is enabled only when ins opcode(program(PC)) = add. Note that there are two events corresponding to the bez instruction: one event for the zero case (i.e. when the first source register is 0) and one for the non-zero case; the guards determine which of these events is enabled by examining the value held in the first source register.

in this paper of merging events gives a more accurate model of pipelined be- haviour, and reveals conflicts within the pipeline by generating unprovable proof obligations. By strengthening guards, it is possible to circumvent such conflicts, and introduces explicit constraints in the pipeline to guarantee cor- rect execution. An alternative solution could be achieved by redefining the abstract-level specification, but this would obscure the relationship between the formal specification and the informal description of the instruction set.

