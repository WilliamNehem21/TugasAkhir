Aspect-Oriented Programming (AOP) [20] provides new programming languages constructs for improving the separation of concerns with the goal of enhancing de- sign modularity. Aspects are new units of modularisation for encapsulating crosscut- ting concerns, i.e., system features or properties that naturally affect many system modules [20]. AOP is therefore expected to be an effective technique to enhance soft- ware maintainability through the modularisation of crosscutting concerns. However, there is a need for a systematic migration of existing object-oriented (OO) systems towards the aspect-oriented decompositions in order to reap the benefits of AOP.

The recognition that concern identification and refactoring are important is- sues through the software maintenance activities is not new. Actually, with the emergence of AOP, there is a growing body of relevant work in the software engi- neering literature focusing on concern analysis techniques [8] [25] and refactoring of crosscutting concerns [1] [18]. However, there is a lack of work integrating those techniques to enhance refactoring of crosscutting concerns based on concern analy- ses. In addition, only initial works have classified common crosscutting structures using metaphors [4] and explored how taming these structures help in software maintenance activities, such as refactoring.

In this context, the main contributions of this paper are threefold. First, an initial set of metaphors is defined in order to characterise concerns regarding their crosscutting structures. Heuristics are used to identify occurrences of two concern metaphors, namely Octopus and Black Sheep [4]. Second, taking advantages from the crosscutting structure defined by concern metaphors, refactorings are presented to modularise Octopus and Black Sheep crosscutting concerns. Third, an empirical study involving concerns of 23 design patterns is used to evaluate (i) the accuracy of our heuristic classification and (ii) the applicability of the metaphor-based refactor- ings. Based on our experience, we also determine a catolog of additional categories and heuristics for refactoring crosscutting concerns.

This section presents a review of existing object-oriented (OO) refactorings that have been extended to become aspect-aware (Section 2.1). It also discusses refac- torings tailored for supporting the extraction and modularisation of crosscutting concerns (Section 2.2). Section 2.3 summarises the shortcomings of existing refac- toring approaches for aspect-oriented (AO) systems and Section 2.4 demonstrates some of those shortcomings in an illustrative example.

Some authors [15] [19] [24] have recently identified limitations when applying well- known OO refactorings [11] in the presence of aspects. For example, one problem arises from the fact that OO refactoring usually changes the structure of join points of the program and, thus, potentially changes how the aspects affect classes. To address this problem, Hanenberg, Oberschulte, and Unland [15] proposed precon- ditions which have to be respected when applying a conventional refactoring in the presence of aspects. They use Extract Class [11] in order to exemplify the precon- ditions which make the refactoring aspect-aware. In addition, they propose some new refactorings to extract concerns from an existing design to aspects.

The previously discussed refactoring approaches in their own nature look indi- vidually at each code fragment and do not consider the crosscutting sturcture of the target concern. Therefore, Hannemann and his colleagues proposed the no- tion of role-based refactoring [18] to describe transformations based on an abstract model of the target crosscutting concern. The underlying idea is that refactoring instructions are the same for all concrete program elements playing a given role in the concern realisation. The strategy for role-based refactorings is composed of three main stages. First, the developer chooses an appropriate refactoring. Then, it is necessary to map the roles defined by the chosen refactoring to elements of the design realising those roles. Finally, a tool opens dialogue boxes in order to confirm the user choices and automatically performs the refactoring steps.

Inconsistent terminology of the concern structure. Role-based refac- toring [18] and refactoring based on concern type [22] try to address the previ- ous problem by assigning abstract names to a set of similar crosscutting concerns. Nonetheless, they fail due to the lack of a unified terminology of concerns. For ex- ample, in role-based refactoring, names for roles are intended to be abstract and not tied to any specific concern implementation. However, apart from design patterns, Hannemann [16] uses application-specific names, such as CurrencyControl, when presenting the role-based refactorings. Furthermore, although Marin et al. [22] compiled an initial list of concern classifications, their concern types are usually tied to implementation-specific constructs of programming languages. For example, the Declare Throws Clause and Exception Propagation refactorings [22] are related to exception handling mechanisms.

Lack of support to detect concern-related bad smells. Recent empirical studies have highlighted that crosscutting concerns are key factors to the observance of bad smells in the system design [6] [8] [9]. A bad smell is any symptom that indicates something may be wrong and it generally indicates that the overall design should be refactored [11]. Metrics-based analyses are traditionally the fundamental mechanisms for assessing design modularity and detecting design flaws. In fact, a number of papers [21] [23] have associated bad smells with modularity metrics [3], such as coupling, cohesion, and conciseness. For example, Marinescu [23] proposed a mechanism called design heuristic rule (or detection strategy) for formulating metrics-based rules that capture bad smells. However, to the best of our knowledge, there is no work which integrates those three prominent techniques: metrics-based analysis for assessing design modularity; heuristic rules for detection of concern- related bad smells; and AO refactorings driven by holistic-detected anomalies.

Heuristic classification.  The target concern is classified according to its structural pattern by the use of metrics-based heuristic rules (Section 3.2). A terminology of concerns, based on metaphors, is used to provide an unified and intuitive vocabulary of crosscutting concerns. We believe that this vocabulary allows developers to use meaningful terms when referring to a concern.

Selection of refactoring steps. A set of fine-grain AO refactorings, such as those ones discussed in Sections 2.1 and 2.2, are selected to modularise the specific concern structure identified in Step 1. In some cases, it might be possible to select one refactoring from two or more alternatives. This flexibility allows developers to choose the best transformations in that application-specific context.

Code transformation. The code transformations which implement the refactoring can be automated by appropriate tools [1] [19]. Since each heuristic- based refactoring of crosscutting concern is also composed of smaller aspect-aware refactorings, existing tools for the latter [1] [19] can be also used to support the former.

Recent research work has classified concerns in different ways [4] [18] [22]. Generally, if a concern is not well-encapsulated it assumes a crosscutting structure over the system. This crosscutting structure might have different shapes depending on each concern. In our approach we use concern metaphors as instances of concern-related bad smells, i.e., concerns with a particular harmful crosscutting structure for the system modularity.

This section focuses on an initial classification proposed by Ducasse, Girba and Kuhn [4] which is based on how a given concern is distributed over the system. These authors identified two metaphors, namely Black Sheep and Octopus, representing patterns of concern manifestation over a system. We extend this classification in Section 5 with new concern metaphors. Black Sheep is described as a specialised category of crosscutting concerns that touch only few points of the system [4]. On the other hand, Octopus is a crosscutting concern which is partially well modularised by one or more classes, but it is also spread across a number of other classes.

The goal of this refactoring is to better modularise concerns classified as Octopus by our metaphor-based heuristics (Section 3.2). The following refactoring steps aim at moving to aspects parts of code composing the body or touched by tentacles of an Octopus. The body and tentacles are the main characteristics of this kind of crosscutting concerns.

Refactoring steps to the Octopus body.  The following steps target at separating the Octopus body structure. There are two possibilities of classes composing the body: (a) those entirely dedicated to the Octopus concern, and (b) those mainly dedicated to this concern, but they mixed it with other concerns.

The goal of this refactoring is to better encapsulate concerns classified as Black Sheep by our heuristics. First, it identifies classes implementing parts of the Black Sheep concern and, then, it modularises those parts into aspects. Using metaphors, each class is called sheep (or black sheep) and the whole system is a herd. Alternatively, each part of the class realising the target concern is called a sheep slice.

Refactoring steps to separate Black Sheep. The following six steps (labelled 2.a to 2.f) aim to separate sheep slices into aspects. Some of those steps might not be applied to specific instances of Black Sheep. Furthermore, those steps assume an pre-existing aspect (empty or not) assigned to this concern. In case this aspect does not exist, a preliminary step is its creation.

Our evaluation is divided in two parts according to our goals. The first part (Section 4.1) aims to evaluate the metaphor-based heuristics by applying them to a set of concerns and analysing the results. In the second part (Section 4.2), we applied the proposed refactorings to the subset of concerns classified as Octopus or Black Sheep in the first part. Our case study involves concerns of relevance to the 23 Gang-of-Four (GoF) design patterns [12].

The crosscutting structure of the GoF design patterns has already been detected and explored in previous studies [2] [13] [17]. These studies enable us to compare our heuristic classification to their findings. Our comparison focuses mainly on the H&K study [17] and on our previous experience on design patterns assessment [2] [13].

Garcia et al. [13] confirmed these findings for all eight aforementioned patterns, ex- cept for the Template Method pattern. Regarding Template Method, Garcial et al. refuted H&K claims and verified that the AspectJ solution brings no improvement in relation to the OO one. To support this observation, Garcial et al. performed a quantitative study using a plethora of modularity metrics.

This comparison between our heuristic classification and previous knowledge also allowed us to find at least one false positive of our technique. In other words, we confirmed that Template Method should not be classified as Octopus since the OO solution cannot be improved by the use of aspects. Despite this false positive, we believe all other classifications are correct. If so, our metaphor-based heuristics would present an accuracy of about 85 %. Of course, further empirical investigation is needed to confirm or refute this percentage.

The results of the first part of our evaluation (Section 4.1) brings to us a set of concerns classified as Octopus or Black Sheep. This set is used as input to the application of the proposed refactorings (Sections 3.3 and 3.4). In this second part of our evaluation we applied the proposed refactorings to those design patterns classified as Octopus and Black Sheep.

In this part, we decided to take two sets of design pattern instances in order to assess the scalability of refactorings. The first set contains the original versions from H&K [17] and the second one includes extended pattern instances used in a more complex empirical study [13]. The difference between them is that Garcia et al.

Although different numbers of refactorings were used, the refactored version of each design pattern instance was successfully obtained by following the refactorings steps and by selecting the appropriate fine-grained refactorings. The Template Method pattern was the only exception as described in Section 4.1. Although the Template Method structure matches the Octopus structure, we decided to not aspectise it due to our previous knowledge that the OO solution cannot be improved with the use of aspects.

In this section we aim to provide some discussions about our study relating to the liabilites of previous refactoring approaches. A briefly explanation is given regarding additional metaphors besides those ones explored in Section 3. We also present the study constraints and the ongoing work at the end of this section.

In section 2.3 we pointed out three liabilities found in previous refactoring ap- proaches: inconsistent terminology of the concern structure, the lack of support to detect concern-related bad smells, and lack of holistic treatment of scattered changes. The metaphor-based refactoring approach helps to address these short- comings in a number of ways.

tent and unified terminology to classify crosscutting concerns manifested as design flaws. Hence, it addresses this problem in existing refactorings of crosscutting con- cerns. For example, the role-based approach [16] uses application-specific names, such as CurrencyControl, while the refactoring based on concern types [22] is usu- ally tied to implementation-specific constructs of programming languages. On the other hand, our metaphor-based refactorings are based on a terminology that is abstract enough to be applied in different application domains, technologies and programming languages.

Second, we claim that our approach of concern classification based on metaphors is an efficient way to express concern-related bad smells. As far as we are concerned, existing refactoring approaches which deals with crosscutting concerns modularisa- tion [16] [22] do not use metrics-based analysis for design modularity assessment. Although a number of papers [21] [23] have associated bad smells with modularity metrics and heuristics, existing refactorings do not explore heuristic rules for de- tection of concern-related bad smells. On the contrary, our refactoring technique copes with this limitation by applying concern-oriented metrics and, then, using the collected data as input to design heuristic rules.

A Climbing Plant is a concern which affects the root of an inheritance tree and, then, propagates its structure to all children of this root. The concern can be to- tally or partially propagated to the root descendents. However, all descendents of the concern root are somehow affected. As Climbing Plant, a Hereditary Disease concern affects the root of an inheritance tree and, then, propagates its crosscutting structure to some root descendents. However, a Hereditary Disease does not mani- fest in all nodes of a tree, i.e., some nodes are disease-free. Copy Cat is a concern with replicated code in many places. A special type of Copy Cat occurs when the

Aspect-oriented refactorings have been proposed to deal with the modularisation of crosscutting concerns [19] [1] [14] [15] [24]. We recommend the use of those low-level refactorings after the proposed Octopus and Black Sheep aspectisation in order to modify the internal structure of aspects and prepared them for reuse. We should highlight that the aspectised versions of concerns following our technique are not expected to directly be considered as optimal solutions. The proposed refactorings (Sections 3.3 and 3.4) are aimed to be generic and applied into any Octopus or Black Sheep concern. Thus, they are not specific enough to obtain the best AO solutions of those design patterns. Although we have not evaluated whether the refactored concerns represent optional solutions, the patterns in our evaluation (Section 4) had their respective crosscutting structure eliminated by the aspectisation which is our main goal.

We are planning as future work to develop a refactoring tool that supports our approach. This tool would help the developer to follow the workflow presented on section 3.1. Basically, it encompasses the identification of design flaws through the metaphor-driven heuristics and the application of the metaphor-based refactorings for each detected concern metaphor. Automation of the refactoring application involves three steps: selection of refactoring steps, human calibration as input pa- rameter, and code transformation.

This paper proposes aspect-oriented refactorings to better modularise crosscutting concerns classified by metaphor-based heuristic rules. Our refactoring technique complements previous research work, such as role-based refactoring [18] and refac- toring of crosscutting concerns types [22], which has similar goals. In fact, all these approaches target at aspectising crosscutting concerns by using a higher level repre- sentation of concerns. However, we explicitly provide a set of heuristics (Section 3.3) to classify concerns before refactoring them. In addition, the concern metaphors used in this paper are more abstract and intuitive than previous categories, such as roles [18] and crosscutting concern types [22].

In our evaluation, we used the GoF design patterns [12] and organised them according to our heuristic-based concern classification (Section 4.1). The heuristic classification presented an accuracy of about 85 % in our preliminary evaluation (Section 4.1). In addition, we applied our refactoring technique to design patterns which match the Octopus and Black Sheep metaphors (Section 4.2). Although the refactorings presented in this paper derive from studies of design patterns [12], they aim to be general-purpose, rather than case specific or pattern specific. Finally, we proposed five additional metaphors (Section 5.2) to describe recurring structures of crosscutting concerns.

