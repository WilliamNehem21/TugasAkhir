Non-termination analysis proves that programs, or parts of a program, do not terminate. This is important since non-termination is often an unexpected behaviour of computer programs and exposes a bug in their code. While research has found ways of proving non-termination of logic programs and of term rewriting systems, this is hardly the case for imperative programs. In this paper, we describe and experiment with a technique for proving non-termination of imperative, bytecode programs by relating their non-termination to that of a (constraint) logic program. Moreover, we show that our non-termination test effectively helps a termination test, by avoiding expensive search for termination proofs of those portions of the code where such proofs do not exist.

This paper provides a first experimentation with the automatic derivation of non-termination proofs for Java bytecode programs. We start from our previous work on a tool Julia+BinTerm for the termination analysis of Java bytecode [19]. There, we translated the original Java bytecode program P into a constraint logic program PCLP whose termination entails that of P . Here, we show how, in those cases when the approximation of the bytecodes is exact, the non-termination of PCLP entails that of P . Hence, we use the same tool as in [19] to prove the non- termination of Java bytecode programs by exploiting previous results from non- termination analysis of logic programs [10]; namely, we prove the non-termination of PCLP and hence infer, when possible, that of P . Although these results are far from being a definite solution to the problem of non-termination analysis of Java bytecode programs, they represent a first step in that direction and highlight weaknesses of the current approach, that must be solved if non-termination analysis must be applied to real Java and Java bytecode software. Note that, while a notion of existential non-termination for C is considered in [7], we instead consider a notion of universal non-termination here for the CLP program derived from the Java bytecode program.

Java bytecode is a low-level object-oriented type-safe language. Its static analysis is complicated by the fact that it has no explicit structure, differently from high- level languages, and that it uses a stack of temporary variables. Hence the number and type of the variables are different at different program points inside the same method.

after the execution of each instruction in the bytecode: the size or path-length of a variable bound to a data structure is the maximal length of pointers that one can follow from that variable; the path-length of a variable bound to an array is the length of the array; the path-length of a numerical variable is its value; the path-length of a Boolean variable is 0 for false and 1 for true. The result of the path-length is finally used to express the relationship between the size of the vari- ables at the beginning and at the end of each basic block of the program. This is written in terms of a constraint logic program PCLP over linear constraints, whose predicates b(vars) correspond to each basic block b of P and vars are the variables at the beginning of the execution of b. These approximations build constraints that are later used in order to derive bounds on the values of variables in programs, which is crucial for termination and non-termination analyses to work. The main result proved in [19], wrt. termination analysis, is the following:

The converse, however, does not hold in general: we can find programs P and a basic block b of P such that, in the translation PCLP , predicate b(vars) does not terminate for some fixed initial integer values for vars, although all executions of P starting at b do terminate. This is due to the approximations done during the translation of P into PCLP : both sharing and cyclicity analyses are approximated, so that, for instance, the analyser might not necessarily prove that a non-cyclical list is actually non-cyclical. Moreover, some bytecodes have an inherently non-linear behaviour, such as multiplications and divisions, and cannot hence be approximated by using the linear constraints available for the path-length.

is non-terminating wrt. P by using the standard semantics of constraint logic pro- grams. This means that an infinite computation can be built for that query in the program P . Note that we do not consider any precedence between the clauses of P , that is, we assume a non-deterministic resolution of a predicate with all the clauses that define that predicate. The following results provide simple non-termination conditions for constraint logic programs.

These theorems provide a simple mechanism to infer ground non-terminating queries: first, use Theorem 3.1 to infer a set of non-terminating queries from the recursive clauses of the program and then complete this set with the help of Theo- rem 3.2.

The method iter (intended to perform an iteration over a list) contains a bug since it recurs on the same list rather than on its tail (iter() instead of tail.iter()). The bytecode version of this program has an exact approximation as our cyclicity analysis correctly infers that the list l in the method main is not cyclical.  The

A completely different use of our non-termination tests consists in proving the non- termination of clauses of the PCLP program generated during the termination anal- ysis of a Java bytecode program P . By removing such clauses, which cannot have any termination proof, we help the termination checker by simplifying its task. Since our non-termination tests are extremely efficient, while a thorough quest for a termination proof is in general expensive, the trade-off is positive and we get a more efficient termination analysis still keeping the same precision.

of 356; among the removed clauses, there is a huge SCC containing 122 clauses where the arity of the involved predicate symbols is 8, which explains the gain in efficiency. On the contrary, the clauses removed for Kitten are several but include relatively small components and have small arity, so that the gain in efficiency is not significant there. This is because the cost of the termination analysis increases significantly with the arity of the predicates and, by removing clauses with small arity, we do not affect very much the efficiency of the termination analysis.

