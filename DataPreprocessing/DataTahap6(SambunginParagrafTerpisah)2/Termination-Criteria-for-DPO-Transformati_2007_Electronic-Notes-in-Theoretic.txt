Statements about termination of graph and model transformation systems have been proven recently, and a few transformation tools already support checking ter- mination criteria [12]. This issue has mainly arisen for the following reason. When graph transformation is used for model transformation, the objective is to create an output mode either from the ground up or modifying existing models. If an output model must be achieved, a transformation must provide it within a finite number of

Primarily, we need a definition for the termination of a graph transformation system. We extend the definition used in [10]. In [5], the treatment of a layering control structure is added to this definition. We extend the definition in such a way that an arbitrary control structure can be handled.

Up to now, the following definition of E-concurrent productions and the Concur- rency Theorem have not been extended to productions with some kind of application conditions. Therefore we consider only plain productions in the following definition and theorem, as given in [6]. The results contributed in Section 3 are also valid when the rules contain negative application conditions.

To show the practical relevance of the presented termination criteria, two case studies are provided. We take two transformation idioms from [1], and analyze their termination properties. Obviously, there are other proofs for these case studies, but we would like to illustrate how the technique contributed in this paper works for practical software model transformations, where the tool supports strict control flow constructs.

The Leaf Collector pattern is used to find the leaf elements in a tree structure. This idiom has been distilled from the transformation flattening a hierarchical data flow diagrams to a flat data flow representation [1]. In fact, Leaf Collector does not modify the input graph, but finds a place where the next rule can be applied. Therefore, Leaf Collector is a useful idiom of many software model transformations, and it is worth examining its termination properties.

Since the idiom is obviously not concerned with self-loops, injective matches are assumed. Then we compute the E-based composition of the rule with itself. In this case it is rather simple, because the parameter passing reduces the number of the possible E-dependency relations to one.

According to Lemma 4.2, if the input graph does not contain directed cycles, the transformation terminates, otherwise it is possible that the transformation does not terminate. In practice, this condition can be guaranteed in model transformation systems. (i) Most of the modeler tools offer a containment hierarchy, and along this hierarchy it is ensured by the tool that there are no directed cycles. (ii) Directed cycles in inheritance hierarchy causes semantical problems, it may also be forbidden by the tool.

If there are no such constraints in the model, the Leaf Collector should be extended with additional construct in order to avoid nontermination. A possible solution is to add an isP rocessed attribute to the nodes, which is false by default, and set by the rule if it is matched. Another solution is to introduce helper edges between the processed nodes, and introduce NACs to forbid the match at the same place again.

In [2], termination criteria have been developed for graph rewriting applied to pro- gram transformation. The criteria aim at this specific problem domain. The ap- proach assumes that there can be no parallel edges with the same labels between two nodes. This leads to a termination criteria for specific (edge-accumulative) rules if the label and node sets are finite. Moreover, subtractive rules are investigated, which are conceptually similar to deletion layers examined in [5]. These results assume more restricted types of rules, compared to those analyzed in this paper.

In [3], a theory has been developed for the DPO approach. It provides abstract termination criteria by a measure function F . The paper also shows concrete ter- mination criteria such as the number of nodes, the number of edges. Based on this assumption, it proves termination criteria for other control structures. However, these criteria are violated in the second case study with respect to the concrete criteria of edge and node numbers. However, no explicit relationship has been es- tablished between the proposed definition of a termination criterion and the notion that the transformation stops within a finite number of steps.

