Array 6 (2020) 100028

		




Role of sub-trajectories in online signature verification
Sudhir Rohilla a, Anuj Sharma b,1,*, R.K. Singla b
a Department of Computer Science, Gopichand Arya Mahila College, Abohar, India
b Department of Computer Science and Applications, Panjab University, Chandigarh, India



A R T I C L E I N F O

Keywords:
Online signature verification Static feature
Structural feature Kinematics feature Statistical feature
A B S T R A C T

In this paper, we have provided a partitioned based technique which can increase the efficiency of an existing technique in which each partition is called as a sub-trajectory. To implement it, eighty features are extracted from signature trajectories and categorized into four feature sets as static, kinematics, structural and statistical. We have used these four feature categories and their possible combinations on two different algorithms. An important outcome is observed as the EER decreases with increase in sub-trajectories to an optimum level and behaves in reverse direction afterwards which suggests that for any matching algorithm, the present technique can further reduce the error rate to an optimum level. These experiments are performed on the benchmark database SVC 2004 TASK 2 which contains forty genuine signatures of each forty writers and forty skilled forgeries from five different writers. The experiments are discussed in detail for change in the EER with change in each subsequent sub-trajectory level for all feature sets and the results prove that the technique using sub-trajectories improving the EER by a significant average amount of 1.18 with increase in one sub-trajectory level for all the eighty features and 1.5 for the features of categories kinematics and structural when taken together.





Introduction

Signature is a socially worldwide accepted biometric characteristic to represent any individual and hence the problem of automating the signature verification process has a significant importance. The online mode of signature verification is more robust than the offline mode as it captures the dynamic properties of signatures in the real time which is hard to replicate by imposters. The online signature verification process has two phases: feature extraction and the verification process. In liter- ature, the features are classified as parametric and functional. In func- tional approach, signatures are categorized by the features which are functional in nature, especially function of time. On the other side, the parametric features are categorized into four categories on the basis of their physical behavior: static, kinematic, structural and statistical [1]. For the verification process, many classifiers and techniques have been explored in the previous works. Some of the important techniques are Support Vector Machine (SVM), Hidden Markov Model (HMM), Dynamic Time Warping (DTW), Symbolic data matching, Principal Component Analysis (PCA) etc which are used as the verification tools and tech- niques. The DTW is one of the most common technique in which the matching can be done between any two time sequences by considering
the minimization of root mean square distances between them [2–5]. The best example of such type of technique is Euclidean distance based matching. Few classifier has also been considered as the signature veri- fication tool like NN (Neural Network), SVM, HMM etc. The HMM tool is a stochastic model which is based on markov process containing hidden states [6–9]. It is considered to be potential verification approach despite the fact that it has a high computational complexity [10]. The other classifier, SVM, distinguishes any two class or multi-class objects by constructing a hyper plane or a number of hyper-planes in a high dimensional space which further maximizes the distance between different class objects and minimizes the classification error within the class [11–13]. The NN classifier is also used for the verification purpose [14,15]. But it requires a large number of input data for training which is difficult to get in case of signatures [16]. In symbolic data matching, signatures are represented by symbolic feature vectors and a reference feature vector (RFV) is evaluated to find out the forgery or genuineness of a test signature [16].


Algorithm 1 FEST: feature extraction using sub-trajectories 1: procedure FEST
2: for i ¼ 1,2,…, all the writers, U do
3: for j ¼ 1,2,…, all the samples of each writer, S do
(continued on next page)



* Corresponding
E-mail address: anujs@pu.ac.in (A. Sharma).
1 https://sites.google.com/site/anujsharma25/.

https://doi.org/10.1016/j.array.2020.100028
Received 19 November 2019; Received in revised form 23 April 2020; Accepted 24 April 2020
Available online 4 May 2020
2590-0056/© 2020 The Authors. Published by Elsevier Inc. This is an open access article under the CC BY license (http://creativecommons.org/licenses/by/4.0/).


(continued )
4: for k ¼ 1,2,…, STL(Sub-trajectory level, m) do
5: s Vector(X,Y,T,P) ← signature captured
6: sig(X,Y,T,P) ← sizeNormalization(s Vector(X,Y,T,P)) 7: sig(X(k),Y(k),T(k),P(k)) ← sig(X,Y,T,P)
Quantification of a signature has been done by evaluating N number of features from the raw information
8: (X,Y,T,P) of each signature

9: ½f1 ; f2 ; …; fN ] ← sig(X(k),Y(k),T(k),P(k)) 10: st Vector(k) ← ½f1 ; f2 ; …; fN ];
11: sig Sample Vector(j)← [st Vector(1), st Vector(2),… st Vector(m)];
end for
12: sig User Vector(i)← [sig Sample Vector(1); sig Sample Vector(2);…
sig Sample Vector(S)]; end for 13: sig Complete Vector ← [sig User Vector(1); sig User Vector(2);… sig User Vector(U)];
end procedure



Algorithm 2 GFE: General Feature Extraction without using sub-trajectories 1: procedure GFE
2: for i ¼ 1,2,…, all the writers, U do
3: for j ¼ 1,2,…, all the samples of each writer, S do


4: s Vector(X,Y,T,P) ← signature captured
5: sig(X,Y,T,P) ← sizeNormalization(s Vector(X,Y,T,P)) 6: sig(X(k),Y(k),T(k),P(k)) ← sig(X,Y,T,P)
Quantification of a signature has been done by evaluating N number of features from the raw information
7: (X,Y,T,P) of each signature

8: ½f1 ; f2 ; …; fN ] ← sig(X(k),Y(k),T(k),P(k)) 9: sig Sample Vector(j) ← ½f1 ; f2 ; …; fN ]; end for
10: sig User Vector(i)← [sig Sample Vector(1); sig Sample Vector(2);… sig Sample Vector(S)];
end for
11: sig Complete Vector← [sig User Vector(1); sig User Vector(2);… sig User Vector(U)];
end procedure



All these techniques are implemented to develop a better signature verification system in terms of the error rates or its performance. In this paper, we have provided a partitioned based technique which can in- crease the efficiency of an existing technique in which each partition is called as a sub-trajectory. To implement this technique, we have applied the algorithm FEST (Feature Extraction using Sub-Trajectories) as shown in Algorithm 1 and it is implemented along with the interval valued symbolic matching technique. Symbolic matching with sub-trajectories means that we are partitioning the signatures into a number of equal parts. Each part is considered as a sub-trajectory. This partition is done on the basis of captured data points. The sub-trajectory level two means that signature is broken into two halves, the sub-trajectory level three means that signature is broken into three equal parts and similarly, the sub- trajectory level m means that signature is broken into m equal parts. Each such part contains equal number of data points. After dividing into sub-trajectories, the symbolic matching technique has been applied on each of the sub-trajectory. Thus, we would have a feature set comprising
m times the extracted features from the sub-trajectory level, (ST) ¼ m,
and in this way, we increase the total number of features each time by
increasing the sub-trajectory levels. The concept of sub-trajectories can be understood with the help of Fig. 1. We have implemented the algo- rithm GFE (General Feature Extraction) as shown in Algorithm 1, to extract the features without using sub-trajectories. The implementation of GFE algorithm means that we are implementing any technique without implementing FEST algorithm and to compare the results of that tech- nique while using the FEST algorithm in order to see the impact of sub- trajectories.
Moreover, in the next section of this paper, system design has been discussed to implement the proposed technique. Then feature classifi- cation has been discussed in section 3. In section 4, we have mentioned two different algorithms SDM (Symbolic Data Matching) and SDMSVM (Symbolic Data Matching using Support Vector Machine) on which the



Fig. 1. 1a represents 1 partition means entire signature trajectory, 1 b shows 2 partitions, 1c shows 3 partitions and 1 d shows 4 partitions.


Fig. 2. System Design of signatures verification system.

impact of FEST algorithm has been discussed. The last section concludes the paper by analysing the results.



System design

The system developed for this study contains 3 stages as shown in Fig. 2.
Stage I: The very first step in online signature verification is the data acquisition. The signature can be captured through various machines like pen tablet, tablet PCs and PDAs. As the signature is being done, we can
dynamically capture its attributes like x — y coordinate points, time
sequence for the captured data points, pressure etc. The size normaliza-
tion is then applied to the captured data points of each signature.
Stage II: The next stage is the feature extraction. The signatures are quantified by using the dynamic information captured at stage 1, some of the mathematical properties, called features, has been computed and the signatures are, then, represented in terms of these features. We have
defined two ways of capturing the features: FEST (Feature Extraction
Symbolic matching using sub-trajectory levels

Algorithm 3: symbolic data matching (SDM)

In symbolic data matching (SDM), signatures are represented by the feature vectors. Each feature vector contains the value of all the features define to characterize the signature such as a signature can be charac-
terized by m features as {f1,f2,…,fm}. Then, on the basis of the mean and
standard deviation of each feature in a number of sample signatures
(feature vectors) of a writer, a feature level threshold is developed. This feature level threshold is used to obtain an interval valued reference feature vector (RFV) [16]. For example, the RFV of an ith writer for m features is given by
RFVi = f —, f + , f —, f + , …, f —, f + },	(1)

using Sub-trajectories) and GFE (General Feature Extraction or without
i1  i1
i2  i2
im  im


sub-trajectory) as explained in Algorithm 1 and 1 respectively.	where the interval-valued mth feature of ith writer and [f — , f + ], is defined

Stage III: After evaluating the features, we have implemented the symbolic matching technique on both the feature vectors with sub-
as
 f —  μ
τ  f +  μ	τ
im im


(2)

trajectories and without sub-trajectories. After that the output is stored as if the signature is authentic or genuine and termed as output 1 and 2 respectively.

Feature classification

The signature trajectories can be represented by some behavioral characteristics which are the numeric measure of the basic mathematical properties of each data point. These characteristics are termed as features of signature trajectories. In this paper, such type of eighty features have been described and categorized into four categories based on their behavioral nature. These categories are static, kinematics, structural and statistical [1]. We have identified 80 features from the literature. The Nelson and Kishon mentioned some formulas for the features path tangent angle, tangential and centripetal acceleration, jerk, curvature etc. mainly used in signature verification [17]. All of the used features along with their respective categories are mentioned in Table 1. These cate- gories help us to find out the impact of each category in the process of signature verification.
im = im — im , im = im + im ,
where the μim is the mean of mth feature of ith writer’s training sample and
feature-level threshold, τim, is evaluated as
τim = ασim,	(3)
where the α is a scalar and σim is the standard deviation of mth feature of
ith writer’s training sample.
Each of the feature value of a test signature of a writer is compared to its corresponding interval in the reference feature vector of the same writer and is checked whether this value lies within the interval or not. If it lies within the interval, it is accountable for the genuineness of the signature otherwise for forgery of the particular signature. Then a com- mon threshold, empirically evaluated, is applied on the total count of accountable features for a test signature. This threshold decides if the test signature is authentic or a forgery.




Table 1
A feature Set containing the eighty features under their respective categories. Here, T denotes a time interval and t specifies an instance of time.



Table 2
The minimum EER for P4 C
i=1


15 combinations for each category and their
Table 3
The minimum EER for three datasets (DS1, DS2 and DS3) is reported in the ex- periments performed considering F1F2F3F4 as a feature set with seven sub-

respective combinations with single sub-trajectory (ST1) as entire signature.
trajectory levels (ST1, ST2, ST3, ST4, ST5, ST6 and ST7).




Algorithm 4: SDM using support vector machine (SDMSVM)

In algorithm 4, the symbolic data matching has been used with SVM classifier (SDMSVM) [18]. In SDMSVM algorithm, two RFVs has been generated for forgery as well as genuine dataset which are described below:
g refVec = {[min(g f1), max(g f1)], [min(g f2), max(g f2)], …, [min(g fN ),
max(g fN )]}f refVec = {[min(f f1), max(f f1)], [min(f f2), max(f f2)], …,
[min(f fN ), max(f fN )]}
Then the remodeling of these RFVs has been done by using random
numbers as described below:
g randInt = (max(g sigTr)— min(g sigTr))*(rand(I — 1, 1)+ min(g sigTr))
f randInt = (max(f sigTr)— min(f sigTr))*(rand(I — 1, 1)+ min(f sigTr))
g refVec = [min(g sigTr); g randInt; max(g sigTr)] f refVec = [min(f sigTr); f randInt; max(f sigTr)]
In this technique, signatures are symbolized in 0 and 1 with respect to
above generated RFVs and then two class SVM classifier is applied to check the genuineness of the test signatures.

Experimentation

Algorithm 3: SDM

The experiments are performed on the benchmark dataset, SVC TASK 2, used in first signature verification competition held in 2004. The dataset contains 20 genuine signatures of forty writers and 20 forgery signatures from five skilled forgers other than the forty writers. We have used three combination of training and testing datasets. The first dataset, DS1, contains 5 genuine signatures for training and other 15 genuine signatures for testing. Thus, testing set comprises 35 signatures (15 genuine signatures and 20 forgery signatures). In the second dataset, DS2, 10 genuine signatures are used for training and 30 signatures (10 genuine signatures other than those used in training and 20 forgery signatures) are used for testing purpose. Similarly, the third dataset, DS3, contains 15 genuine signatures for training and 25 signatures for testing (5 genuine signatures other than those used in training and 20 forgery signatures).

Symbolic matching without sub-trajectories: SDM with GFE
We have extracted eighty features from any signature trajectory and
categorized into four categories as mentioned in Table 1. The features are evaluated as mentioned in Algorithm 1 and the verification experiments are performed on each category as well as on all the possible combina- tions of these categories. Thus, it gives us the fifteen experiment set which are to be performed on the three training-testing dataset as mentioned above. The results are given in Table 2.

Symbolic matching with sub-trajectories: SDM with FEST
Symbolic matching technique has been implemented along with the idea of sub-trajectory levels. The experiments for sub-trajectory level are conducted on all the experiment sets by taking all the combinations of mentioned feature categories and it is observed that the experiment set
(F2F3) gives the optimum results. The results of the experiment set that contains all the features taken together (F1F2F3F4) and the experiment set (F2F3), for which we have achieved the best EER, are reported to see the at sub-trajectory level for experiment sets (F1F2F3F4) and (F2F3) with all effect of sub-trajectories in the process of verification. The minimum EER the three datasets (DS1, DS2 and DS3) has been mentioned in Tables 3
the experiment sets (F1F2F3F4) and (F2F3) has also been mentioned in and 5 respecively. The change in EER with each sub-trajectory level for Tables 4 and 7. The average change in EER for the respective experiment
set with each dataset is also reported in these respective Tables. Thus, the average change in EER as per sub-trajectory level for the experiment sets
(F1F2F3F4) and (F2F3) as 1.18((1.32 + 1.06 + 1.17) /3)and 1.5((1.45 +
1.31 + 1.73) /3), respectively. This behavior of change in the EER for the corresponding experiment sets, (F1F2F3F4) and (F2F3), with DS1, DS2 and DS3 are shown in Fig. 3 and Fig. 4, respectively.


Algorithm 4: SDMSVM

We have used the dataset DS1 to see the impact of the algorithm 4 by using the sub-trajectories. By using two class classifier, it is showing lower values of EER as compared to the Algorithm 3. The results are presented in Table 6 in which results with respect to ST1 level shows the implementation without sub-trajectory and remaining column shows the minimum EER obtained after implementing subsequent levels of sub- trajectories.

Table 4
The absolute change in the minimum EER for three datasets (DS1, DS2 and DS3) has been mentioned by considering F1F2F3F4 as a feature set with change in sub- trajectory levels.



Table 5
The minimum EER for three datasets (DS1, DS2 and DS3) is reported in the ex- periments performed considering F2F3 as a feature set with seven sub-trajectory levels (ST1, ST2, ST3, ST4, ST5, ST6 and ST7).


Analysis of results

On the basis of results obtained, we have analysed the outcomes which are as follows:

For algorithm 3: SDM
EER decreases with increase in sub-trajectory level, obtain an op- timum value and then begins to rise with further increase in sub-
trajectory level. This behavior is shown in Figs. 3 and 4 for F1F2F3F4
and F2F3 with DS1, DS2 and DS3, respectively.
The EER decreases with increase in training data. This can be observed from results reported in Tables 2, 3 and 5.
The results also prove that the technique using sub-trajectories changes the EER by a significant average amount of 1.18 with increase
in each sub-trajectory level for all the eighty features and 1.5 for the features of categories kinematics and structural when taken together as we have achieved the best EER for this experiment set. The results are mentioned in Tables 4 and 7, respectively for the F1F2F3F4 and F2F3 feature sets with DS1, DS2 and DS3.

For algorithm 4: SDMSVM
The categorization of features in this study helps us in the selection of the optimum feature set among 15 available feature set. The optimum
error= 0.0008 has been observed at sub-trajectory level 7 for F2F3
feature set which shows that the combination of kinematics and struc-
tural produces the best EER among other features.

Without sub-trajectory (ST = 1), we have obtained an EER of 3.6979 implementing the sub-trajectories (ST = 2,3,4,5,6,7), the performance of the system increases as EER reported is 0.0008 at ST = 7 for F2F3 feature for the optimal feature set F1F2F3F4 as given in Table 6. But after
set. This reduction of EER occurs because with increase in each subse-
quent sub-trajectory level, there is an increase in feature values of a genuine signatures that can be compared with the forgery test signature and more the number of features values to compare, the better is the performance of the system.
The error rates are decreased with each subsequent implementation
of sub-trajectory level and it goes to an optimum level. With the use of
ST = 7 level for all the experimental sets as they show the same trend for SVM, it is observe that the behavior is kept stable after implementing each sub-trajectory level. We can see this behavior in Table 6.
The results also prove that the technique using sub-trajectories changes the EER by a significant average amount of 1.6556188893
with increase in each sub-trajectory level for overall 15 experiments. The mean of change in EER per sub-trajectory (ST) level for the optimum feature set F2F3 is 1.599. The results are mentioned in Table 6. This lower value of standard deviation for optimum feature set among other experiment sets shows the consistency of the features with Algorithm 3.

Conclusion

In this way, the overall conclusion is that the categorization helps us to see how each set of features when taken together can be useful in evaluating the performance of the system rather than taking the single feature. Also by implementing sub-trajectory, we have reduced the EER to an optimal level which can be implemented with any state of the art verification technique in signature verification and hence, it can improve the EER further. This shows the effectiveness of the discussed categori- zation and sub-trajectories in signature verification system.
Further in comparison to previous work, the performance of this technique is quite satisfactory and we have achieved the minimum EER




Fig. 3. EER with respect to Sub-trajectory levels for F1F2F3F4 with DS1, DS2 and DS3.


Fig. 4. EER with respect to Sub-trajectory levels for F2F3 with DS1, DS2 and DS3.



Table 6
Result of Algorithm 4: The total Error evaluated by considering P4 C


15 the various combinations for F1


(static), F2


(kinematics), F3


(structural) and F4


(statistical)

with sub-trajectory levels (ST = 1,2,3,4,5,6,7).
i=1





















Average(Mean)	1.6556188893


Table 7
The absolute change in the minimum EER for three datasets (DS1, DS2 and DS3) has been mentioned by considering F2F3 as a feature set with change in sub- trajectory levels.

Sr	Sub-trajectory	change in	change in	change in



of 9.47 for DS3, 10.31 for DS2 and 10.60 for DS1 with the feature set F2F3 and the comparison of similar work to literature is shown in Table 8 which shows the promising results achieved with our approach. We have shown the comparison for only Algorithm 3 as it comprises the similar conditions at training phase. Algorithm 4 considers the forgery signatures at training phase which shows the contrast change in the minimum EER reported for both the algorithms. By considering all the results, we conclude that the sub-trajectory technique can be implemented


Table 8
Comparison with previous work for SVC 2004 TASK2.


Authors   Features used	Technique used	EER reported
effectively in online signature verification.

Declaration of competing interest

The authors declare that they have no known competing financial interests or personal relationships that could have appeared to influence the work reported in this paper.

CRediT authorship contribution statement

Sudhir Rohilla: Conceptualization, Methodology, Software, Data curation, Writing - original draft, Visualization, Investigation, Software, Validation, Writing - review & editing. Anuj Sharma: Conceptualization, Methodology, Software, Data curation, Writing - original draft, Visuali- zation, Investigation, Software, Validation, Writing - review & editing.
R.K. Singla: Supervision.

References

Rohilla S, Sharma A, Singla R. Online signature verification at sub-trajectory level, Springer International Publishing, Smart Innovation. Systems and Technologies: Advanced Computing, Networking and Informatics- Volume 2014;2 28:369–74.
Mariano LG, Rafael RL, Enrique CN. Embedded system for biometric online signature verification. IEEE Transaction on Industrial Informatics 2014;10(1): 491–501.
Fang P, Wu ZC, Shen F, Ge YJ, Fang B. Improved dtw algorithm for online signature verification based on writing forces. Proceedings of ICIC 2005:631–40.
Huang K, Yan H. Stability and style variation modeling for online signature verification. Pattern Recogn 2003;36(10):2253–70.
Bovino L, Impedovo S, Pirlo G, Sarcinella L. Multi expert verification of handwritten

Positional, pressure, path tangent angle, path velocity magnitude, log curvature radius acceleration and their first derivatives
DTW and HMM	10.91 (for skilled forgery-user independent)
signatures. Proceeding IEEE 7th International Conference Document Analysis and Recognition; 2003. p. 932–6.
Ortega-Garcia J, Fierrez-Aguilar J, Martin-Rello J, Gonzalez-Rodriguez J. Complete signal modeling and score normalization for function based dynamic signature verification. Lecture Notes in Computer Science in Audio and Video Based Biometric Person Authentication 2003;2688:658–67.
Shafiei MM, Rabiee HR. A new online signature verification algorithm using

Time Encoded Signal Processing and Recognition (Tespar) and Tespar DZ (set of differential descriptors)
Positional, pressure and velocity
Wavelet analysis +
WLSVM (Weka libSvm)




partition + Neuro- velocity and pressure fuzzy classifier of the
Mamdani-type
6.96 (for skilled forgery)



11.58
variable length segmentation and hidden markov models. Seventh International Conference on Document Analysis and Recognition 2003;1:443–6.
Yoon HS, Lee JY, Yang HS. An online signature verification system using hidden markov model in polar space. Proceedings of the Eighth International Workshop on Frontiers in Handwriting Recognition (IWFHR) 2002:329–33.
Coetzer J, Herbst BM, Preez JA. Offline signature verification using discrete radon transform and a hidden markov model. EURASIP J Appl Signal Process 2004;4: 559–71.
L. R. Rabiner, B. H. Juang, An introduction to hidden markov models, IEEE ASSp

Our
Study
Static, Kinematics, Structural and Statistical
Symbolic interval valued based verification at sub- trajectory level Algorithm3
9.47 (for skilled forgery)
Magazine.
Kholmatov A, Yanikoglu B. Identity authentication using improved online signature verification method. Pattern Recogn Lett 2005;26(15):2400–8.
Lv H, Wang W, Wang C, Zhuo Q. Offline Chinese signature verification based on support vector machines. Pattern Recogn Lett 2005;26(15):2390–9.





Fuentes M, Salicetti SG, Dorizzi B. Online signature verification: fusion of a hidden markov model and a neural network via a support vector machine. Eighth International Workshop on Frontiers in Handwriting Recognition 2002:253–8.
Dimauro G, Impedevo G, Pirlo G. Component oriented algorithms for signature verification. Int J Pattern Recogn Artif Intell 1994;8:771–94.
Draouhard JP, Sabourin R, Godbout M. A neural network approaches to on-line signature verification using directional pdf. Pattern Recogn 1996;29:415–24.
Guru DS, Prakash HN. Online signature verification and recognition: an approach based on symbolic representation. IEEE Trans Pattern Anal Mach Intell 2009;31(6): 1059–73.
Nelson W, Kishon E. Use of dynamic features for signature verification. Proc IEEE Int Conf Syst Man Cybern 1991;1:201–5.
Rohilla S, Sharma A. Svm based online signature verification technique using reference feature vector. Proc Natl Acad Sci India: Physical Sciences 2017;87(1): 125–36.
Fierrez-Aguilar J, Krawczyk S, Ortega-Garcia J, Jain AK. Fusion of local and regional approaches for on-line signature verification. Advances in Biometric Person Authentication, Lecture Notes in Computer Science 2005;3781:188–96.
Emerich S, Lupu E, Rusu C. A new set of features for a bimodal system based on on- line signature and speech. Digit Signal Process 2013;23(3):928–40.
Cpalka K, Zalasinski M, Rutkowski L. New method for the online signature verification based on horizontal partitioning. Pattern Recogn 2014;47(8):2652–61.
