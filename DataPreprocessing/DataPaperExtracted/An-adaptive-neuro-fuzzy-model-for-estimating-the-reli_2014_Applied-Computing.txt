ORIGINAL ARTICLE
An adaptive neuro fuzzy modelfor estimating the reliabilityof component-based software systems
Kirti Tyagia,*, Arun Sharmab
aDepartment of Computer Science and Engineering, Ajay Kumar Garg Engineering College, Ghaziabad, India
bDepartment of Computer Science and Engineering, Krishna Institute of Engineering and Technology,Ghaziabad, IndiaReceived 15 January 2014; revised 16 March 2014; accepted 24 April 2014
Available online 6 May 2014
KEYWORDSNeuro fuzzy;Component-basedsoftware systems(CBSS);Fuzzy;Reliability;Reliability modelAbstract Although many algorithms and techniques have been developed forestimating the reliability of component-based software systems (CBSSs), muchmore research is needed. Accurate estimation of the reliability of a CBSS is dif-ﬁcult because it depends on two factors: component reliability and glue code reli-ability. Moreover, reliability is a real-world phenomenon with many associatedreal-time problems. Soft computing techniques can help to solve problems whosesolutions are uncertain or unpredictable. A number of soft computingapproaches for estimating CBSS reliability have been proposed. These tech-niques learn from the past and capture existing patterns in data. The two basicelements of soft computing are neural networks and fuzzy logic. In this paper, wepropose a model for estimating CBSS reliability, known as an adaptive neurofuzzy inference system (ANFIS), that is based on these two basic elements of softcomputing, and we compare its performance with that of a plain FIS (fuzzyinference system) for different data sets.
ª2014 King Saud University. Production and hosting by Elsevier B.V. All rights reserved.
*Corresponding author. Tel.: +91 9990802717.E-mail address:kirti.twins@gmail.com(K. Tyagi). Peer review under responsibility of King Saud University.
Production and hosting by ElsevierApplied Computing and Informatics (2014) 10, 38–51
King Saud University
Applied Computing and Informatics
www.ksu.edu.sawww.sciencedirect.com
2210-8327ª2014 King Saud University. Production and hosting by Elsevier B.V. All rights reserved.http://dx.doi.org/10.1016/j.aci.2014.04.0021. Introduction
Software generally has two user requirements: reliability and availability. Reliabil-ity is required when the product’s nonperformance will have the greatest impact,while availability is required when downtime will have the greatest impact.Although it is difﬁcult to formally deﬁne reliability, we cannot simply deﬁne itas a binary notion by saying that if a program is correct its reliability is 1, andif it is incorrect its reliability is 0. Instead, reliability can usually be measured prob-abilistically as
RSYS¼ð1/C0probability of failureÞ:
Speciﬁcally, software reliability is deﬁned as a software system’s probability of
failure-free operation for a speciﬁed period of time in a speciﬁed environment. Asthe complexity of software applications continues to grow, greater emphasis hasbeen placed on reuse. Therefore, component-based software system (CBSS) appli-cations have come into existence.
Component-based software engineering (CBSE) is a specialized form of soft-ware reuse concerned with building software from existing components, includingcommercial off-the-shelf (COTS) components, by assembling them together in aninteroperable manner. Achieving a highly reliable software application is a difﬁ-cult task, even when high-quality, pretested, and trusted software componentsare combined. Several techniques have therefore emerged to analyze the reliabilityof component-based applications. These fall into two groups:
/C15System-level reliability estimation: reliability is estimated for the applicationas a whole./C15Component-based reliability estimation: application reliability is estimatedbased on the reliability of the individual components and their interconnec-tion mechanisms.
Traditional approaches to software reliability analysis treat the software as awhole and use test data during the software test phase to model only the software’sinteractions with the outside world. These are known as black-box models.However, black-box models ignore the structure of software constructed fromcomponents as well as the reliability of individual components and are thereforenot appropriate for modeling CBSS applications. Recently, soft computing tech-niques have emerged. Since reliability is a real-world issue, many run-time param-eters are associated with reliability. This makes soft computing techniques idealfor estimating CBSS reliability, as these techniques deal mainly with uncertainty.The two basic soft computing techniques are neural networks and fuzzy logic. Inthis paper we combine these two techniques to estimate CBSS reliability.
This paper presents an adaptive neuro fuzzy inference system (ANFIS) modelfor estimating CBSS reliability. In a fuzzy inference system (FIS), the if-then rulesAn adaptive neuro fuzzy model for estimating 39are formulated on the basis of expert advice. However, this is a relatively time-con-suming process. The advantage of an ANFIS over the FIS model is that it com-bines fuzzy logic with the learning capabilities of neural networks (NNs) tosolve this problem. The aim of our proposed model is to integrate the best featuresof fuzzy logic and neural networks in a CBSS reliability estimation model. Ourresults demonstrate how this is an improvement over an FIS.
The rest of this paper is organized as follows. Section 2 discusses related work.Section 3 provides the framework for our proposed model, and Section 4 presentsthe model. Section 5 presents our experiments to evaluate the proposedmodel. Section 6 discusses the experimental results, and Section 7 presents ourconclusions.
2. Related work
Researchers have proposed a number of models for estimating CBSS reliability.We can categorize the approaches into three types:
/C15Architecture-based reliability models./C15Mathematical models for estimating CBSS reliability./C15Soft computing techniques for estimating CBSS reliability.
Architecture-based reliability models such as state-based and path-based mod-els are most suitable for CBSSs (Popostojanova and Trivedi, 2001; Cai et al., 2003;Gokhle, 2007). CBSS reliability depends not only on the architecture but also onthe operational proﬁle for the input. Heiko and Koziolek ( Koziolek and Becker, 2005) describe the role of a component as a transformer from one operationalproﬁle to another. In state-based models (Cheung, 1980; Wang et al., 2006;Gokhle et al., 1998; Littlewood, 1979), control ﬂow between components is takeninto consideration. It is assumed that components fail independently. Thesemodels consider transfer among components to be Markov behavior, which meansthat the current behavior of a component is independent of its previous behavior.These models can be represented in two ways, namely, as composite models or ashierarchical models. Path-based models (Shooman, 1976; Krishnamurthy andMathur, 1997) consider possible execution paths for estimating the reliability ofan application. A sequence of components along different paths is obtained byeither algorithmic or experimental testing.
Yacoub et al. (2004)propose an approach to reliability analysis calledscenario- based reliability analysis. This approach introduces component dependency graphs(CDGs) which can be extended for complex distributed systems. Using the samealgorithm, sensitivity can be analyzed as a function of component reliabilitiesand link reliabilities. This approach is based on scenarios which can be capturedwith sequence diagrams, which means that the approach can be automated. Alimitation of this approach is that it does not consider failure dependencies among40 K. Tyagi, A. Sharmathe components.Zhang et al. (2008)also proposed a model based on a CDG. Inthis approach, a system’s operational proﬁle is given. It is assumed that controlﬂow transits from componentito componentj, and the reliability of componentjis calculated asT
ij=R ij·W ij, where
Tij= the transition probability from componentito componentj, R
ij= reliability vector for each subdomain of component j, and W
ij= weight vector for each subdomain of component jin transition from componentito componentj.
This approach can characterize component reliability for an application whenthere are changes in the system’s operational proﬁle.
Dong et al. (2008)proposed a new model for estimating CBSS reliability inwhich various complex component relationships are analyzed. The Markov modelis used to solve these complicated relationships, which have a large impact on asystem’s reliability. The results were used to develop a new tool to calculate soft-ware application reliability.Huang et al. (2008)proposed a technique based onalgebra which provides a framework for describing the syntax and predictingthe reliability of a CBSS, implemented onSeth et al. (2010)proposed a minimum spanning-tree-based approach to estimating CBSS reliability.
Goswami and Acharya (2009)proposed an approach to CBSS reliability anal-ysis which takes the component usage ratio, which is the time allotted for a com-ponent’s execution out of the application’s overall execution time, intoconsideration. Mathematical formulas are used to calculate the usage ratio. Dueto the ﬂexibility of the component usage ratio, this approach can be used inreal-time applications.
Fiondella et al. (2013)proposed an approach based on correlated componentfailures (COCOF). In this paper an efﬁcient approach to access the reliability ofa software application, considering the component reliabilities, correlation andapplication architecture is proposed. This proposed approach is based on an algo-rithm that transforms a Multivariate Burnoulli distribution (MVB) into a jointdistribution of the component outcomes.
Palviainen et al. (2011)proposed a technique for reliability estimation, predic-tion and measuring of CBS. The proposed approach explains that reliability is akey driver for safety critical systems such as health care systems and trafﬁc con-trollers. This paper gives software reliability evaluation during design and imple-mentation phases. The contribution of this approach lies in the integrating thecomponent level reliability. There is a need for a systematic approach that facili-tates software developers to both construct reliable component based software sys-tems and ensure that the software architecture, selected components andconstructed software system meet the reliability goals. The approach integratesheuristic reliability estimation, model base reliability prediction and model basedreliability measuring activities at component level and reliability predictionAn adaptive neuro fuzzy model for estimating 41activities at system level to support the incremental and iterative development ofreliable CBSS. This proposed approach is not applicable for distributed systems.
Hu et al. (2013)proposed a software reliability estimation method using mod-iﬁed adaptive testing (MAT) for reliability of CBS. In this paper, a set of extendedmetrics based on the Nelson’s software reliability model account for informationgained from a user’s point of view regarding the severity of the observed failures.In the approach, the use of test history information allows the resulting test pro-cess to be adaptive in the selection of tests under the limited test budget. Thisapproach can enhance the software reliability estimation testing by guiding testcase selection process by providing more descriptive and accurate results.
Dimov and Sasikumar (2010)proposed a fuzzy reliability model for CBSSs,based on fuzzy logic and possibility theory. A mathematical fuzzy model basedon necessity and possibility is proposed to predict the reliability of a CBSS. Likemany other models, this model does not require component failure data because itis based on uncertainty. However, a mechanism is necessary to model the propa-gation of failure between components and failure behavior.
Si et al. (2011)proposed a framework for estimating reliability through a com-ponent composition mechanism. The approach proposes ﬁve basic componentcomposition mechanisms and techniques for their reliability estimation. After cal-culating the reliability for each composition, a procedure estimates the overallapplication reliability based on the component composition mechanisms and com-ponent utilization frequencies. It is possible to recognize additional compositionmechanisms.
Many soft computing approaches are based on support vector machines(SVMs), genetic algorithms (GAs), and fuzzy logic.Lo (2010)proposed a software reliability estimation model based on an SVM and a GA. This model speciﬁes thatrecent failure data alone are sufﬁcient for estimating reliability. Reliability estima-tion parameters for the SVM are determined by the GA. This model is less depen-dent on failure data than are other models.
Hsu and Huang (2011)proposed a model which is an adaptive approach fortesting path reliability estimation for complex CBSSs. Three methods were pro-posed for path reliability estimation: these use sequence, branch, and loop struc-tures. The proposed path reliability can be used to estimate the reliability of theoverall application.Tyagi and Sharma (2012)proposed an approach based onfuzzy logic for estimating CBSS reliability. In this approach, four critical factorswere identiﬁed for estimating the reliability of a CBSS, and these were used todesign an FIS for the estimation.
3. Framework for our proposed model
The present paper proposes a neuro fuzzy reliability model. The differencebetween this model and other models that have been proposed is that this modelis fully based on CBSS characteristics. Fuzzy logic has been widely studied in42 K. Tyagi, A. Sharmadifferent ﬁelds of engineering with varying degree of success. An FIS often consistsof if-then rules. These rules are ﬁred in parallel: when if- conditions are met, theconsequents of those rules ﬁre to the degree to which the antecedents of the rulesare met. One of the main challenges in creating an FIS is determining the fuzzy setsand fuzzy rules to be used. This requires acquiring deep domain knowledge fromhuman experts, and the ﬁne tuning of the fuzzy sets and rules can be very time con-suming. The solution to this problem is to combine an FIS with the learning capa-bilities of NNs, resulting in an ANFIS. The proposed model is an improvementover the fuzzy model proposed byTyagi and Sharma (2012).
3.1. Neural networks and fuzzy logic
NNs and fuzzy logic are complementary concepts. NNs have learning capabilities:they can learn from data and feedback. They are black-box models. Fuzzy logicmodels are rule-based models, where the rules usually have an if-then form. Fuzzymodels do not have learning capabilities, so for learning, they must adopt tech-niques from other methods. It is therefore natural to marry the two technologies.Fuzzy logic is based on the combination of four concepts shown in Fig. 1.
3.2. ANFIS
ANFISs were ﬁrst proposed byJang (1992)in 1992. These are adaptive networkswhose function is similar to FISs. The aim of an ANFIS is to integrate the bestfeatures of fuzzy systems and NNs. The advantages of an ANFIS over an FISare as follows:
/C15An ANFIS can simulate and analyze the mapping relation between input andoutput data through a learning algorithm to optimize the parameters of agiven FIS./C15An FIS is fully dependent on its membership functions. An ANFIS involvesnetworks which combine nodes and directional links, and some learning rulesare associated with these networks. The networks learn relationships betweeninputs and outputs./C15An ANFIS can be trained without any need for the expert knowledge usuallyrequired for the standard fuzzy logic design.
Fuzzy logicMembership function FuzzySets
Logical operations If – ThenRules
Figure 1Working of fuzzy system.An adaptive neuro fuzzy model for estimating 434. Proposed model
In this paper, we propose an automated model for CBSS reliability estimation thatuses the ANFIS approach. An ANFIS is a class of adaptive networks which arefunctionally equivalent to FISs. This is an extension of the fuzzy model proposedbyTyagi and Sharma (2012). We take into consideration all four factors proposedin that model to compare the results of both models.
The four factors proposed inTyagi and Sharma (2012)are as follows. There are two main factors for estimating component reliability, the reusability of the com-ponent and its operational proﬁle.
4.1. Reusability of the component
Reusability is one of the most basic concepts of component-based development(CBD). As the name suggests, reusability refers to how frequently a componentis used in different applications. We selected reusability as a factor for estimatingcomponent reliability because it is believed that components that have been usedin many applications are highly reliable. Hence the reliability of a component isdirectly proportional to its reusability: component reliability areusability
We selected components from the site www.ejbeans.com; reusability measuresfor these components are given on the site.Sharma et al. (2009)proposed another method of calculating reusability using artiﬁcial neural networks.)
Operational proﬁle for the component:The operational proﬁle (OP), a quantita-tive characterization of how the software will be used, is essential in any softwarereliability engineering application. An OP is a complete set of operations with theirprobabilities of occurrence. The reliability may be different for different OPs. TheOP for any component describes the inputs supplied to the component.
Other factors may contribute to component reliability, but these are the twofactors that have the greatest effect on a component’s reliability. Because the com-ponents are platform independent, the measures of these two factors will be thesame for all applications.
Two main factors are used to estimate interface reliability:
Component dependency:In a CBSS, various components are connected to oneanother to form a larger application. The components are dependent on eachother to perform their functions, that is, the output of one component may serveas an input for another component. This dependency plays an important role forestimating the reliability of the overall application. If components are highlydependent on one another, the reliability of the system will be low.
There are several mechanisms for characterizing dependencies among compo-nents. For example, an adjacency matrix representation of dependencies indicateswhich dependencies exist among components. However, this representation doesnot explain the interactions between components. These interactions play animportant role in relation to the dependencies of components and therefore their44 K. Tyagi, A. Sharmareliability, and so we need a different way to represent the interactions. Sharma et al. (2009)proposed a dependency representation which is based on linked listsand implemented using Hash Map in Java. This representation can store depen-dencies along with other information like provided and required information,which can be used to analyze several interaction- and dependency-related issues.
Application complexity:The complexity of any CBSS application can be deﬁnedin terms of the number of components in that application and their interconnec-tivity. An application that has more components is said to be more complex andhence less reliable. Therefore, the complexity of an application is inversely propor-tional to its reliability:
Application complexity/1reliability
Application complexity can be measured in terms of the number of components
in the application. WhereNis the number of components in a CBSS, we deﬁne theapplication complexity AC as
AC/N:
Our proposed model is an additive model. It does not explicitly take the archi-
tecture of the CBSS into consideration, but the measure of application complexitywill be platform dependent because it comes from the glue code (integration code).
The FIS studied in this work has four input factors as described above, namely,reusability, application complexity, component dependency, and operational pro-ﬁle. For a ﬁrst-order Sugeno fuzzy model, a rule set with fuzzy if-then rules is asfollows:
Assumptions:
(1) R = reusability(2) CD = component dependency(3) AC = application complexity(4) OP = operational proﬁle
Rule 1:
IfRisA iand AC isB iand CD isC iand OP isD i, then f=p
iR+q iAC +r iCD +n iOP +m i
whereA i,Bi,Ci, andD iare fuzzy sets andp i,qi,ri,ni, andm iare parameters that are determined during the training process.
There are a total of 81 rules in whichlow(L),medium(M), andhigh(H) are linguistic variables.
Nodes in the same layer have similar functions. ANFIS has the following ﬁvelayers:
Layer 1:Every node in this layer is an adaptive node with a node function.
O1,iis the membership grade for the fuzzy set. Parameters for this layer areknown aspremiseparameters.An adaptive neuro fuzzy model for estimating 45O1;i¼lAiðRÞfori¼1;2;3
wherelA iis the membership function forR.
Layer 2:Every node in this layer is a ﬁxed node labeled/C213whose output is the product of all incoming signals.
O2;i¼w i¼lAiðRÞl BiðACÞl CiðCDÞl DiðOPÞfori¼1;2;3
Each node output represents the ﬁring strength of the rule.
Layer 3:Every node in this layer is a ﬁxed node labeledN. Theith node calcu- lates the ratio of theith rule’s ﬁring strength to the sum of all rule ﬁring strengths.The output of this layer is called thenormalized ﬁring strengths.
Layer 4:Every node in this layer is an adaptive node with a node function.
O4;i¼w ifi¼w iðpiRþqiACþr iCDþn iOPþm iÞ
The parameters for this node are referred to asconsequentparameters.
Layer 5:The single node in this layer is a ﬁxed node labeledP, which computes the overall output as the summation of all incoming signals (see Fig. 2).
Overall output¼O 5;1¼Xw
ifi.Xw
i
Figure 2Proposed architecuture of the system.46 K. Tyagi, A. SharmaOne of the major limitations of this ANFIS is that it uses only Sugeno-stylefuzzy inference systems. The difference between Sugeno and Mamdani inferenceengines lies in the defuzziﬁcation method. A Mamdani-type FIS uses the defuzz-iﬁcation technique for fuzzy outputs, and a Sugeno-type FIS uses a weighted aver-age to compute crisp outputs. A Mamdani FIS also has output membershipfunctions, while a Sugeno FIS doesn’t have output membership functions.
5. Experimentation and evaluation of the model
We designed our ANFIS for a Sugeno FIS. To train the ANFIS, we collected datafrom 47 classroom-based projects. Some of these projects are complex CBSS sand
Figure 3Membership function before training and after training.
0.2 0.25 0.3 0.35 0.4 0.45 0.50.10.150.20.250.30.350.40.450.50.550.6
RMSE 0.11748Bias -0.050393
Figure 4Root mean square error of FIS.An adaptive neuro fuzzy model for estimating 47some are simple CBSSs. The ANFIS was trained and tested using the dataobtained from these projects. Some of the data were used for training and testing,and some were used for the results. A total of 81 rules were formed on the basis ofthe available data. The rules divide the input factors into three variables: low,med- ium, andhigh.
To evaluate our proposed model, the training data set was loaded, and theANFIS was trained using that data set. To validate the model, we loaded the test-ing data set and then plotted the testing error. The membership function of theFIS before and after training is shown inFig. 3.0.2 0.25 0.3 0.35 0.4 0.45 0.50.20.250.30.350.40.450.5
RMSE 0.066636Bias -0.014148
Figure 5Root mean square error of ANFIS.
Table 1Performance analysis of FIS and ANFIS.Inputs Output reliabilityCD ACROP Original FIS ANFIS .0202 .0202 .0202 .0202 .5000 .5667 .4837.2424 .2424 .2424 .2424 .3263 .4351 .3228.2323 .2323 .2323 .2323 .4127 .4438 .3390.3131 .3131 .3131 .3131 .2025 .3672 .2526.3434 .3434 .3434 .3434 .2891 .3604 .2541.6970 .6970 .6970 .6970 .4543 .4772 .4079.6667 .6667 .6667 .6667 .2667 .5178 .3896.6465 .6465 .6465 .6465 .2740 .3013 .3890.9798 .9798 .9798 .9798 .5000 .5734 .4942.9293 .9293 .9293 .9293 .5000 .5710 .498448 K. Tyagi, A. Sharma6. Results and discussion
After creating the ANFIS model, we compared the output reliability values fordifferent input sets with the original values. We calculated the root mean squareerror (RMSE) for the output obtained by the FIS and the output obtained bythe ANFIS with the original output. The degree of membership had signiﬁcantchanges (seeFigs. 4 and 5).
The difference between the two RMSEs can be observed. Using only the FIS,there was an 11.74% error in the results, but the ANFIS reduces the error to6.66%. Hence, the ANFIS performs better than the FIS. Using the ANFIS, weﬁrst trained the FIS, and the rules were formed on the basis of training data toproduce the output of the trained model. The only limitation of this model is thatits execution is complex for large data sets. Our results show that the ANFISmodel gives a more accurate measure of reliability than the FIS model ( Table 1).
The testing error and training error obtained from the MATLAB FIS TOOL-BOX is shown inFigs. 6 and 7.
7. Conclusion and future work
For any software system, there are two user requirements: reliability and availabil-ity. Reliability is required when the product’s performance will have the greatest
Figure 6Testing error mapping sugeno FIS to ANFIS.
Figure 7Training error mapping sugeno FIS to ANFIS.An adaptive neuro fuzzy model for estimating 49impact. This paper proposes a neuro fuzzy model for estimating CBSS reliability.Many approaches to CBSS reliability have been proposed, some based on math-ematical formulas and others based on soft computing techniques. Our proposedmethod is based on an ANFIS, which is a soft computing technique. This is ahybrid method that requires less computational time than traditional approachesand the previously proposed FIS approach. The CBSSs used to test the models areclassroom-based projects. Our results show that the ANFIS improves the reliabil-ity evaluation of the FIS technique.
A limitation of our proposed model is that while the four factors for which themodel was implemented are the most critical factors, there may be other relevantfactors that should be used. One such factor is fault density, but currently we onlyhave data available for the four factors, so the addition of this factor is left forfuture work.
References
Cai, K., Bai, C., Zhong, X., 2003. Introduction to reliability models of component based software system. J.Xi’an Jiaotong Univ. 37 (6), 560–564
.
Cheung, R.C., 1980. A user oriented software reliability model. IEEE Trans. Softw. Eng. 6 (2), 118–125 .
Dimov, Aleksandar, Sasikumar, Punnekkat, 2010. Fuzzy reliability model for component-based softwaresystems, 36th EUROMICRO Conference on Software Engineering and Advanced Applications, pp. 39–46.
Dong, W., Huang, N., Ming, Y., 2008. Reliability analysis of component-based software based on relationshipsof components, IEEE Conference on Web Services, pp. 814–815.
Fiondella, Lance, Rajasekaran, Sanguthever, Gokhale, Swapana, 2013. Efﬁcient software reliability analysis withcorrelated component failures. IEEE Trans. Reliab. 62 (1), 244–255
.
Gokhle, S.S., 2007. Architecture based software reliability analysis: overview and limitations. IEEE Trans.Dependable Secure Comput. 4 (1), 32–40
.
Gokhle, S.S., Dong, W.E., Trivedi, K.S., Horgan, J.R., 1998. An analytical approach to architecture basedsoftware reliability prediction, Proc. of the Third International Computer Performance and DependabilitySymposium, Durham, NC, pp. 13–22.
Goswami V., Acharya, Y.B., 2009. Method for reliability estimation of COTS components based softwaresystems, International Symposium on Software Reliability Engineering.
Hsu, C., Huang, C., 2011. An adaptive reliability analysis using path testing for complex component basedsoftware systems. IEEE Trans. Reliab. 60 (1), 158–170
.
Hai Hu, Chang-Hai Jiang, Kai-Yuan Cai, W. Eric Wong, Aditya P. Mathur, 2013. Enhancing software reliabilityestimates using modiﬁed adaptive testing, Information and Software Technology Journal Elsevier, pp. 288–300.
Huang, N., Wang, D., Jia, X., 2008. FAST ABSTRACT: an algebra-based reliability prediction approach forcomposite web services, 19th International Symposium on Software Reliability Engineering, pp. 285–286.
Jang, J.R., 1992. ANFIS: adaptive-network-based fuzzy inference system, IEEE Trans. Systems, Man, andCybernetics.
Koziolek H., Becker, S., 2005. Transforming operational proﬁles of software components for quality of servicepredictions, Proc. 10th WCOP’05, pp. 1–8.
Krishnamurthy, S., Mathur, A.P., 1997. On the estimation of reliability of a software system using reliabilities ofits components, Proceeding of the Eighth International Symposium on Software Reliability Engineering,Albuquerque, NM, pp. 146–155.
Littlewood, B., 1979. Software reliability model for modular program structure. IEEE Trans. Reliab. 28 (3), 241–246
.
Lo, J., 2010. Early software reliability prediction based on support vector machines with genetic algorithms, FifthIEEE Conference on Industrial Electronics and Applications, pp. 2221–2226.
Palviainen, Markov, Evesti, Antti, Ovaska, Eila, 2011. The reliability estimation, prediction and measuring ofcomponent – based software. J. Syst. Softw., 1054–1070
.50 K. Tyagi, A. SharmaPopostojanova, K.G., Trivedi, K.S., 2001. Architecture based approach to reliability assessment of softwaresystems. Perform. Eval. J. 45 (2), 179–204
.
Seth, K., Sharma, A., Seth, A., 2010. Minimum spanning tree-based approach for reliability estimation of COTS-based software applications. IUP J. Comput. Sci. 4 (4), 13–21
.
Sharma, A., Grover, P.S., Kumar, R., 2009. Dependency analysis for component based software systems.ACMSIGSOFT Softw. Eng. Notes 34 (4), 1–6
.
Shooman, M., 1976. Structural models for software reliability prediction, Proceeding of the Second InternationalConference on Software Engineering, San Francisco, CA, pp. 268–280.
Si Yuanjie, Xiaohu Yang, Xinyu Wang, Chao Huang, Aleksander J. Kavs, 2011. An architecture-based reliabilityestimation framework through component composition mechanisms, 2nd International Conference onComputer, Engineering and Technology, pp. 165–170.
Tyagi, K., Sharma, A., 2012. A rule-based approach for estimating the reliability of component-based systems.Adv. Eng. Softw. 54, 24–29
.
Wang, W., Pan, D., Chen, M.H., 2006. Architecture-based software reliability modeling. J. Syst. Softw. 79 (1),132–146
.
Yacoub, S., Cukic, B., Ammar, H., 2004. Scenario based reliability analysis approach for component basedsystems. IEEE Trans. Reliab. 53 (4), 465–480
.
Zhang, F., Zhou, X., Chen, J., Dong, Y., 2008. A novel model for component-based software reliability analysis,11th IEEE High Assurance Systems Engineering Symposium, pp. 303–309.An adaptive neuro fuzzy model for estimating 51