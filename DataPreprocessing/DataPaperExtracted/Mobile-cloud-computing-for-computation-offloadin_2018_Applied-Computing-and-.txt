Mobile cloud computing for computation oﬄoading:Issues and challenges
Khadija Akherﬁa,*, Micheal Gerndta, Hamid Harroudb
aTechnical University of Munich, TUM, Munich, Germany
bAl Akhawayn University in Ifrane, Ifrane, MoroccoReceived 28 September 2016; revised 3 November 2016; accepted 28 November 2016Available online 18 December 2016
KEYWORDSCloud computing;Mobile cloud computing;Computational ofﬂoading;Algorithms;PartitioningAbstractDespite the evolution and enhancements that mobile devices have experienced, they arestill considered as limited computing devices. Today, users become more demanding and expect toexecute computational intensive applications on their smartphone devices. Therefore, Mobile CloudComputing (MCC) integrates mobile computing and Cloud Computing (CC) in order to extendcapabilities of mobile devices using ofﬂoading techniques. Computation ofﬂoading tackles limita-tions of Smart Mobile Devices (SMDs) such as limited battery lifetime, limited processing capabil-ities, and limited storage capacity by ofﬂoading the execution and workload to other rich systemswith better performance and resources. This paper presents the current ofﬂoading frameworks,computation ofﬂoading techniques, and analyzes them along with their main critical issues. In addi-tion, it explores different important parameters based on which the frameworks are implementedsuch as ofﬂoading method and level of partitioning. Finally, it summarizes the issues in ofﬂoadingframeworks in the MCC domain that requires further research.
/C2112016 The Authors. Production and hosting by Elsevier B.V. on behalf of King Saud University. This isan open access article under the CC BY-NC-ND license ( http://creativecommons.org/licenses/by-nc-nd/4.0/ ).
Contents1. Introduction . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 22. Concepts and background . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 32.1. Cloud computing . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 32.2. Mobile cloud computing . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 3
*Corresponding author.E-mail addresses:k.akherﬁ@aui.ma(K. Akherﬁ),gerndt@in.tum.de (M. Gerndt),h.harroud@aui.ma(H. Harroud).Peer review under responsibility of King Saud University.
Production and hosting by ElsevierApplied Computing and Informatics (2018) 14, 1–16
Saudi Computer Society, King Saud University
Applied Computing and Informatics
(http://computer.org.sa)www.ksu.edu.sawww.sciencedirect.com
http://dx.doi.org/10.1016/j.aci.2016.11.0022210-8327/C2112016 The Authors. Production and hosting by Elsevier B.V. on behalf of King Saud University.This is an open access article under the CC BY-NC-ND license ( http://creativecommons.org/licenses/by-nc-nd/4.0/ ).2.3. Computation ofﬂoading . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 33. Ofﬂoading approaches . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 53.1. Ofﬂoading steps . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 53.1.1. Application partitioning . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 53.1.2. Preparation . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 53.1.3. Ofﬂoading decision. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 63.2. Framework classes . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 63.3. Framework mechanisms . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 64. Comparison of ofﬂoading frameworks in mobile cloud computing. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 64.1. CloneCloud . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 64.2. MAUI . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 74.3. Cloudlet. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 74.4. Jade. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 84.5. Mirror server . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 94.6. Cuckoo . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 104.7. Phone2Cloud . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 104.8. A comparative review of some ofﬂoading frameworks . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 125. General issues and challenges in computation ofﬂoading for MCC . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 145.1. Platform diversity . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 145.2. Security and privacy in mobile cloud applications . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 145.3. Fault-tolerance and continuous connectivity . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 145.4. Automatic mechanism. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 145.5. Ofﬂoading economy/cost . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 145.6. Partition ofﬂoading and external data input . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 146. Conclusion . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 15Acknowledgments . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 15References . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 151. IntroductionThe main goal of CC is to allow IT departments to focus ontheir businesses and projects instead of just taking care of theirdata centers and keeping them working[2,18,20]. CC is a new concept that aims to provide computational resources as ser-vices in a quick manner, on demand, and paying as per usage.The CC paradigm is presented in three cloud delivery models:Infrastructure-as-a-Service (IaaS), Platform-as-a-Service(PaaS), and Software-as-a-Service (SaaS) as shown in Fig. 1. According to Gartner[3], CC will have in 2016 a Global Com-pounded Annual Growth Rate (CAGR) of IaaS: 41%, PaaS:26.6% and SaaS: 17.4%.Recently, user preferences for computing have changedbecause of the latest developments and enhancements inmobile computing technologies. Several reports and studieshave presented the importance of MCC and its impact onmobile clients and enterprises. For instance, and accordingto a recent study by ABI Research, more than 240 million busi-ness will use cloud services through mobile devices by 2015 andthis will push the revenue of the MCC to $5.2 billion [11]. Moreover, the usage of smartphones has increased rapidly invarious domains, including enterprise, management of infor-mation systems, gaming, e-learning, entertainment, gaming,and health care. Although the predictions that mobile deviceswill be dominating the future computing devices, mobiledevices along with their applications are still restricted by somelimitations such as the battery life, processor potential, and thememory capacity of the SMDs[31]. Nowadays, modernmobile devices have sufﬁcient resources such as fast proces-sors, large memory, and sharp screens. However, it is stillnot enough to help with computing intensive tasks such as nat-ural language processing, image recognition, and decision-making. Mobile devices provide less computational powercomparing to server computers or regular desktops andcomputation-intensive tasks put heavy loads on battery power.
Figure 1Cloud computing layers.2 K. Akherﬁ et al.Currently, there are several works and research in CC thataim at enhancing the computing capabilities of resource-constrained mobile client devices by providing mobile clientsaccess to cloud infrastructures, software, and computing ser-vices. For example, Amazon web services are used to protectand save clients’ personal data via their Simple Storage Service(S3)[23]. In addition, there are several frameworks that allowto process data intensive tasks remotely on cloud servers. Forinstance, the ASM computation ofﬂoading framework [6] showed that computation ofﬂoading helped to reduce theenergy consumption cost of mobile devices by 33%, and theturnaround time of the application by 45% [30]. The following two points highlight our main contributionin this paper.1. Classifying current computation ofﬂoading frameworks.Analyzing them by identifying their approaches and crucialissues.2. Presenting the related open issues in computation ofﬂoad-ing for MCC and challenges that require more investigationand elaboration.This paper is organized as follows: Section 2explains the essential background concepts and terminology, includingCC, the MCC concept, and computation ofﬂoading. Section 3 presents the ofﬂoading approaches. A comparison between thedifferent ofﬂoading frameworks and their critical issues is dis-cussed in Section4. Section5highlights general issues andchallenges in computation ofﬂoading for MCC. Finally, Sec-tion6gives a summary and points to future work.2. Concepts and background2.1. Cloud computingCC is a new way of providing computing resources and ser-vices. It refers to an on-demand infrastructure that allowsusers to access computing resources anytime from anywhere[25]. CC offers to users and business three main advantages:(1) enormous computing resources available on demand, (2)payment for use as needed and on a short-term basis (storageby the day and release them as needed), and (3) simpliﬁed ITmanagement and maintenance capabilities[1]. CC provides cli- ents with different applications as services via the Internet. Asexamples of public CC we can list Windows Azure and Ama-zon Web Services (AWS). Windows Azure is an open and ﬂex-ible cloud platform which provides several services to develop,deploy and run web applications and services in cloud datacenters[33]. AWS, which is considered as an example of a pub-lic computing tool, provides users with two models: infrastruc-ture as a service and software as a service. These services allowthe user to use virtualized resources in cloud data centers [23]. Computational clouds implement a variety of service models inorder to use them in different computing visions [4]. 2.2. Mobile cloud computingMCC can be seen as a bridge that ﬁlls the gap between the lim-ited computing resources of SMDs and processing require-ments of intensive applications on SMDs.The Mobile Cloud Computing Forum deﬁnes MCC as fol-lows[11]: ‘‘Mobile Cloud Computing at its simplest formrefers to an infrastructure where both the data storage andthe data processing happen outside of the mobile device.Mobile cloud applications move the computing power anddata storage away from mobile phones and into the cloud,bringing applications and mobile computing to not just smart-phone users but a much broader range of mobile subscribers ”. MCC has attracted the attention of business people as abeneﬁcial and useful business solution that minimizes thedevelopment and execution costs of mobile applications,allowing mobile users to acquire latest technology conve-niently on an on-demand basis.Fig. 2shows the general view of MCC which is composedof three main parts: the mobile device, wireless communicationmeans, and a cloud infrastructure that contains data centers.These latter provide storage services, processing, and securitymechanisms for both the cloud environment and mobiledevices.2.3. Computation ofﬂoadingComputation ofﬂoading is the task of sending computationintensive application components to a remote server. Recently,a number of computation ofﬂoading frameworks have beenproposed with several approaches for applications on mobiledevices. These applications are partitioned at different granu-larity levels and the components are sent (ofﬂoaded) to remoteservers for remote execution in order to extend and enhancethe SMD’s capabilities. However, the computation ofﬂoadingmechanisms are still facing several challenges.In the remaining part of this section, our objective was togive a summary about the MCC ofﬂoading research by dis-cussing the following:
Figure 2General view of MCC.Mobile cloud computing for computation ofﬂoading 31. Usage scenarios for ofﬂoading in MCC.2. Techniques being applied in ofﬂoading.3. A classiﬁcation of proposed ofﬂoading frameworks.Computation ofﬂoading emerged around 1970s. However,its potential has been widely explored only when wireless com-munication and Internet speed became sufﬁciently enhancedand could support it[37].The potential of mobile ofﬂoading mainly depends on themobile network technologies such as cellular and WiFi. Theydetermine the viability of mobile ofﬂoading. Today, the WiFitechnology is able to provide high bandwidth connections.However, the data transmission using the cellular networkrequires a considerable amount of energy from the mobiledevice as opposed to a WiFi network.Fig. 3illustrates the environment that supports computa-tion ofﬂoading. In this overview, the mobile device decidesto ofﬂoad method B to a cloud server or a powerful machine.The cloud here provides the virtual computation resources torun the ofﬂoaded components. The powerful machine can bea server or cluster in a computing center, or a computing grid,or a virtual server in the cloud.Fig. 4
1shows the number ofpublished papers since 2004 citing the word ‘‘Ofﬂoading ”and ‘‘Computation”. Most of the research works tackling dataofﬂoading have the goal to store data in remote large reposito-ries. It can be seen inFig. 4that the research work citing ‘‘com-putation ofﬂoading”and ‘‘data ofﬂoading”is increasing progressively.Clearly, computation ofﬂoading is worthwhile only whenthe local execution (mobile device) consumes more time andenergy than the ofﬂoading overhead. Many factors can impactthe ofﬂoading decision and could inﬂuence the ofﬂoadingprocess.Fig. 5illustrates these factors which are network speciﬁca-tions, mobile speciﬁcations, application characteristics, serverspeciﬁcations, and user’s preferences.The computation ofﬂoading has experienced a remarkableimprovement which makes it applicable in a wide range ofdomains.Table 1shows some of these domains.As it is known, the battery life of mobile devices and thelimited processors’ capabilities remain key limiting factors inthe design of mobile applications. Today, the demand forresource intensive applications such as 3D video games andvoice recognition is increasing day by day. To close this gapbetween the users demand and the mobile devices limitations,research studies have been exploring computation ofﬂoadingin MCC to bring the power of cloud computing to the other-wise limited mobile devices capacity.
Figure 3Ofﬂoading process overview.
Figure 4Number of computation ofﬂoading and data ofﬂoading papers.
1The number of published works is retrieved from Google Scholar.4 K. Akherﬁ et al.3. Ofﬂoading approaches3.1. Ofﬂoading stepsOfﬂoading transfers a compute intensive task from the SMDto a remote server. Ofﬂoading is a process that includes basi-cally three steps: application partitioning, preparation, andofﬂoading decision.3.1.1. Application partitioningThe ﬁrst step is application partitioning which is very impor-tant for computation ofﬂoading. It divides the application intoofﬂoadable and non-ofﬂoadable components meaning whichcomponents to retain on the mobile device and which tomigrate to the cloud server. The decision whether a componentis ofﬂoadable can be taken based on different information. Theprogrammer can annotate application components for exam-ple through a special API as ofﬂoadable. Compute intensiveparts that are candidates for ofﬂoading can be identiﬁed alsoby source code analysis in combination with performance pre-diction or via application proﬁling. If the partitioning is doneat design time, both techniques have a limited accuracy sincethey do not take the real execution context into account, whenthe application is run.3.1.2. PreparationThe preparation step performs all actions required for ofﬂoad-able components to enable their use in mobile applications.This includes the selection of a remote server, the transferand installation of the code, as the start of proxy processes thatreceive and execute tasks on behalf of the SMD. Besides thetransfer of the code, also data might be transferred to preparefor the remote execution.
Figure 5Aspects affecting the ofﬂoading decision.
Table 1Areas of the research work related to computation ofﬂoading.
Domain ResearchworkContribution of some research workArtiﬁcial intelligence basedapplications[6,8,16,27,37]The proposed work aims to reduce computation time on robots by using an oﬄoading technique.The system is designed for real-time moving object recognition and tracing using computationoﬄoading[27] Graphics and imageprocessing[6,37,17,35]The suggested work examines the trade-oﬀs that emerge from executing some of the workloadlocally and some on remote cloud servers. Extraction and matching are two features that arecrucial in image classiﬁcation. The paper analyzes the possibility of executing the previouslymentioned features in a mobile device using diﬀerent scenarios [17] Health and socialapplications[24,21]The proposed work presents an extensible module that proactively facilitates the management ofprocesses for web service supported by mobile applications. This module measures powerconsumption and application performance from the smartphone device. Based on the obtainedmeasurements, the module dispatches image processing jobs locally or remotely [24] Games applications[35]The objective of the presented work was to satisfy Cloud Mobile Gaming communication andcomputation constraints by using an adaptation technique that ensures a good mobile gamingexperience[35] Mathematics[7,34]The work presents a new architecture that addresses the mobile device limitations by using apartial oﬄoading execution from the smartphone to a remote cloud infrastructure hostingsmartphone clones[7] File system and database[26,7]The presented work addresses the maximization of the lifetime of mobile devices by developingcomputational oﬄoading schemes while considering the network status. The paper presents anexperimental environment where diﬀerent proﬁles and computational moles are evaluated [26]Mobile cloud computing for computation ofﬂoading 53.1.3. Ofﬂoading decisionThe ofﬂoading decision is the ﬁnal step before remote execu-tion is started for ofﬂoadable components. Whether aninstalled remote component is used in the SMD applicationor not depends typically on the execution context. If the deci-sion is taken at runtime, more precise information is available,for example, the SMD might even not have a wireless connec-tion or the energy consumption for transferring the data forthe remote execution might simply be too high. Wheneverthe situation changes, the ofﬂoading can be adapted. Such aruntime decision induces some overhead that typically is notpresent if the decision is taken at design time.3.2. Framework classesAccording to when the decision is taken to ofﬂoad computationon a remote server, we can distinguish two types of ofﬂoadingframeworks. The ﬁrst class is static ofﬂoading frameworks.Here all the presented steps are performed at design time,before the application is started on the mobile device. The otherclasses are dynamic ofﬂoading frameworks. In those frame-works, at least the ﬁnal decision whether to ofﬂoad a computa-tion is taken at runtime. The other two steps can be executed atdesign or runtime. For example, a framework that is based onuser annotations of ofﬂoadable components and on pre-installation of the components on a remote server will be calleda dynamic ofﬂoading framework, if it decides at runtimewhether it is better to ofﬂoad computation or not.3.3. Framework mechanismsAlthough there are several ofﬂoading mechanisms availablefor ofﬂoading computation intensive components of mobileapplications to the cloud, we can classify these mechanismsinto two broad categories:1. Frameworks based on virtual machine cloning.2. Frameworks based on code ofﬂoading.Frameworks based on code ofﬂoading ofﬂoad intensiveapplication components by invoking a remote procedure call(RPC) using annotations, special compilation or binary modi-ﬁcation. Whereas in virtual machine cloning, the mobile devi-ce’s full image is captured and stored on the cloud server.During ofﬂoading, the mobile’s execution is suspended andtransferred to the VM clone in the cloud.4. Comparison of ofﬂoading frameworks in mobile cloudcomputingThis section introduces different existing ofﬂoading frame-works. For each of the frameworks we identify the approachesused in the three steps introduced in the previous section. Atthe end of the section, the different frameworks will be com-pared with respect to their most important properties.4.1. CloneCloudChun et al. present in[6]the CloneCloud framework whichaims at improving the battery life and performance on themobile device by ofﬂoading intensive components to cloudservers.The partitioning step in this framework combines staticprogram analysis with program proﬁling to produce a set ofofﬂoadable components while meeting some constraints, suchas methods that use mobile sensors should be executed locally.The framework uses thread level granularity for partitioning ofapplications. The role of static analysis is to discover con-straints on possible migration points while proﬁling aims tobuild a cost model for ofﬂoading and execution. Partitioningand integration of the applications are performed at the appli-cation level.As a preparation step, a duplicate of the smartphone’s soft-ware is captured and stored within a cloud server.At runtime, the ofﬂoading decision is taken and threads aremigrated from the mobile device to the clone in the cloud. InCloneCloud, threads must be suspended, all states of thethreads must be transferred to the server, and then threadsresume on the server in order to ofﬂoad computation. Theframework is based on VM instance migration to the cloudserver.Fig. 6shows the CloneCloud execution model. Initially,a duplicate of the smartphone’s software is created in thecloud. The state of the smartphone and the clone is synchro-nized periodically or on-demand. After the execution of off-loaded components, results from the execution on the cloneare reintegrated back into the smartphone state. CloneCloudemploys dynamic ofﬂoading.The objective of the distributed execution mechanism inCloneCloud was to implement a speciﬁc partition of a givenapplication process executing inside an application-layer vir-tual machine.In CloneCloud framework, the distributed execution goesthrough several steps as follows. When the user tries to run apartitioned application, the framework looks in a databaseof pre-computed partitions for current execution conditions(such as available network bandwidth and cloud resources).The result of the veriﬁcation is a partition conﬁguration ﬁle.The partition is loaded by the application binary which instru-ments the selected methods with migration. On the mobiledevice, once the execution of the process reaches a migrationpoint, the running thread is suspended and its state is wrappedand shipped to a synchronized clone. In this clone, the threadstate is instantiated into a new thread with the same stack and
Figure 6CloneCloud execution model (adapted from [6]).6 K. Akherﬁ et al.reachable heap objects, and then resumed. On the cloud server,when the migrated thread reaches a re-integration point, it issuspended, packaged, and then shipped back to the mobiledevice. Finally, the received packaged thread is merged intothe state of the original process in the mobile device.To evaluate the prototype, the authors implemented threeapplications (virus scanner, image search, and privacy-preserving targeted advertising). All measurements are theaverage of ﬁve executions. Phone, CloneCloud with WiFi,and CloneCloud with 3G are the used environments.A clear tendency is that larger workloads beneﬁt fromofﬂoading because of amortization of the migration cost overa larger computation[6].4.2. MAUIMAUI[8]is a framework that considers energy saving onsmartphones as the main objective function for the ofﬂoadingprocess. MAUI is a highly dynamic ofﬂoading frameworkbecause of a continuous proﬁling process. The frameworkhides the complexity of a remote execution from the mobileuser and gives the impression as if the entire application isbeing executed on the mobile device.In MAUI, partitioning is done based on developer annota-tions to specify which components can be executed remotelyand which cannot.In the preparation step, two requirements should be met:(1) application binaries must be in both mobile and server sidesand (2) proxies, proﬁlers and solvers must be installed on boththe mobile device and server sides.At the beginning, MAUI proﬁler measures the device char-acteristics. Then, it keeps monitoring the program and net-work characteristics during the whole execution time becausethese characteristics can often change and any old or inaccu-rate measurement may lead MAUI to make the wrongdecision.The ofﬂoading decision is taken at runtime. The frameworkchooses which components should be remotely executedaccording to the decision of the MAUI solver. The decisionis based upon the input of the MAUI proﬁler.Fig. 7shows the MAUI architecture. On the smartphone,the framework consists of the following components: a proxy,a proﬁler, and a solver. Each time a method is called, theMAUI proﬁler evaluates it for its energy-saving potentialand proﬁles the device and the network to obtain the statusinformation. Then, the MAUI solver works on the results pro-vided by the proﬁler and determines the destination where themethod will be remotely executed; the proxy is responsible forcontrol and data transfer between the server and the smart-phone. On the server side, the proﬁler and the server proxyperform similar roles as their client-side counterparts. TheMAUI controller is responsible for authentication andresource allocation for incoming requests[8].The authors presents different experiments in order to com-pare the energy consumption of running three applications(-face recognition, chess, and video) standalone on thesmartphone versus using MAUI for remote execution to ser-vers that are located elsewhere. The face recognition applica-tion can achieve strong energy savings when using MAUI.On the one hand, the results of the conducted experimentsshowed that the energy consumed when ofﬂoading code using3G is 2.5 times higher than ofﬂoading code to a close server.On the other hand, the energy savings for both video and chessgame are less strong but they are still important; when ofﬂoad-ing to a close server, MAUI saves 45% for chess and 27%energy for the video game.4.3. CloudletOfﬂoading to the cloud is not always a solution, because of thehigh WAN latencies, mainly for applications with real-timerestrictions. Thus the cloud has to be moved closer to themobile user in the form of cloudlets.Satyanarayanan et al. suggest in[29]a VM based cloudletframework. A cloudlet can be deﬁned as a hosting environ-ment for ofﬂoaded tasks that is deployed to remote resources,as different as individual servers or parallel systems. Cloudletsare virtual-machine (VM) based on support scalability, mobil-ity, and elasticity. They are located in single-hop nearness tomobile devices.In the preparation step, the framework requires the cloningof the mobile device application processing environment to aremote host. It ofﬂoads the entire application using VM asthe ofﬂoading mechanism and more precisely it uses a tech-nique called dynamic VM synthesis. The VM would encapsu-late and separate the guest software from the cloudlet’s hostsoftware. The mobile device serves as a thin client providingonly the user interface, whereas the actual application process-ing is performed on the cloudlet infrastructure.Device mobility is the main critical issue for mobile users onthe move while connected to cloudlets.AsFig. 8illustrates, cloudlets are widely distributed Inter-net infrastructure components whose storage resources andcomputing cycles can be exploited by nearby mobile deviceswhile avoiding the long latency which is available for accessingdistant cloud resources. These cloudlets would be situated incommon areas, such as coffee shops, so that mobile devicescan connect and work as a thin client.Fig. 9depicts the cloudlet architecture. Cloudlets are dis-coverable, and located in single-hop proximity of mobiledevices. The main elements of the architecture are CloudletHost and Mobile Client. A Discovery Service is a componentrunning in the cloudlet host and publishes cloudlet metadata.The cloudlet metadata (e.g. IP address and port to connect
Figure 7High-level view of MAUI’s architecture (adapted from[8]).Mobile cloud computing for computation ofﬂoading 7to the cloudlet) are used by the mobile client to specify the suit-able cloudlet for computation ofﬂoading. Once the cloudlet isdetermined for ofﬂoad, the mobile client sends the applicationcode and the application metadata to the cloudlet server. Thecloudlet server deploys the application code in the guest VM.Once the deployment is done, the execution of the applicationis launched.We can take a scenario where the user must execute a com-putation intensive application. At runtime, the application dis-covers a nearby cloudlet and ofﬂoads the computationintensive mobile application[15]. However, because of lossof network connectivity, the mobile application can ﬁnd a dif-ferent cloudlet and run the application in a short time.4.4. JadeSharing the same concern but from a different perspective,Qian et al. present in[28]a system that monitors applicationand device status and that automatically decides where thecode should be executed. The goal of Jade was to maximizethe beneﬁts of energy-aware computation ofﬂoading formobile applications while minimizing the burden on develop-ers to build such an application.
Figure 9Cloudlet architecture (adapted from[22]).
Figure 8Cloudlet illustration adapted from[29].8 K. Akherﬁ et al.During partitioning, applications are partitioned at theclass level in Jade based on the collected information.As a preparation, the system checks the application anddevice status by monitoring the communication costs, workload variation, and energy status. The framework provides asophisticated programming model with a full set of APIs, sodevelopers have total control on: how the application is parti-tioned, and how remote code interacts with local code.The ofﬂoading decision is taken at runtime to decide wherethe code should be executed. Jade supports two types of ser-vers: (1) Android servers and (2) Non-Android servers runningoperating systems such as Windows and Linux. Non-Androidservers must have Java installed in order to support Jade.Jade’s runtime engine runs as a Java program on a non-Android server.Jade can dynamically change its ofﬂoading decision accord-ing to the device status and thus efﬁciently reduce energy con-sumption of mobile devices.Fig. 10presents an overview of the Jade framework. Themobile device that ofﬂoads computation is called the client.The device that executes the ofﬂoaded code is called the server.Mobile applications contain remote tasks which can be off-loaded to the server. The Jade runtime engine automaticallydecides where to execute remote tasks and initiates distributedexecution.Fig. 11presents the Jade framework architecture. In orderto ofﬂoad a computation, the system handles the followingtasks:/C15Proﬁling: In order to make correct ofﬂoading decisions, theframework should have updated information concerningthe status of the application and the device. Applicationproﬁling is the process of collecting information about pro-grams, such as energy consumption, data size, executiontime, and memory usage. Similarly, device proﬁling collectsinformation about devices status, such as battery level,CPU usage, and wireless connection./C15Communication: To ofﬂoad code from the mobile client tothe server, the system should be able to (1) connect to theother server; (2) coordinate with the remote server for off-loaded components; (3) send data between the mobiledevice and the remote server; (4) follow status of remoteexecution; and (5) save information related to all connecteddevices (e.g., connection speed, hardware conﬁguration)./C15Optimization: The framework determines an optimizedofﬂoading approach to reduce energy consumption andenhance application’s performance.The Jade framework automatically transforms applicationexecution on one mobile device into a remote execution opti-mized for wireless connection, power usage, and servercapabilities.In order to check the amount of energy that Jade can savefor mobile device, authors run face detection application on amobile device. The application performs face detection on 50pictures with size of each less than 200 KB. Results showedthat Jade reduces the power consumption for face detectionapplication. Average power consumption was decreased by34%.4.5. Mirror serverZhao et al. present in[38]the mirror server framework thatuses Telecommunication Service Provider (TSP) based remoteservices. A TSP is a type of communication service providerwhich provides voice communication services such as landlinetelephone services. Mirror server extends capabilities of smart-phones by providing three different types of services: computa-tion ofﬂoading, security, and storage. Mirror server is apowerful server which retains VM templates for differentmobile device platforms.This framework does not require a partitioning as the entireapplication is ofﬂoaded.In the preparation step, a new VM instance is created. ThisVM is called mobile mirror and the mirror server takes care ofmanaging and deploying the mobile mirrors on a computinginfrastructure in the telecom network. Applications are exe-cuted in the mirror VM instances and results are returned tothe SMD. The framework employs an optimized mechanismfor ofﬂoading.
Figure 10Jade overview (adapted from[29]).Mobile cloud computing for computation ofﬂoading 9The Mirror Server architecture is presented in Fig. 12.O n the SMD side, a client synchronization module (Syn-Client)is deployed within the SMD operating system (OS) to collectSMD input data and transmit them to the mirror server forsynchronization. On the server side, in order to keep mirrorsand smartphones synchronized, the synchronization module(Syn-Server) updates mirrors according to the data providedby Syn-Client and the Trafﬁc Monitor module which monitorsnetwork trafﬁc between the smartphone and the IP network.The main critical issue is that mirror servers are notdesigned for data processing and because of that only limitedservices (i.e. ﬁle caching, ﬁle scanning) can be provided com-pared to the variety of services in cloud data centers.In the proposed framework, antivirus scanner applicationcan be deployed as a service on the mirror server, and theapplication can access the ﬁle system on mirrors. The beneﬁtsof sending antivirus scanner to the mirrors are signiﬁcant:1. It saves battery power on smartphones.2. Scanning will not affect the common usages of smartphonedevices since the CPU and I/O intensive workload aremoved to the mirror server.3. Running the scan on mirror will be much faster than thaton the phone due to its limited resources.4.6. CuckooKemp et al. present in[19]the Cuckoo framework for compu-tation ofﬂoading for smartphones. This framework ofﬂoadsmobile device applications onto a cloud server using a Javastub model. Cuckoo’s objectives were to enhance mobile’s per-formance and reduce battery usage. The framework integratesthe Eclipse development tool with the open source Androidframework.In the partitioning step, Cuckoo takes advantage of theexisting activity model in Android which makes the separationbetween the intensive and non-intensive components of theapplication. This activity presents a graphical user interfaceto the user, and is able to bind to services. The frameworkcan ofﬂoad intensive components to any resource running aJava Virtual machine (JVM).As a preparation, the framework requires the developer towrite ofﬂoadable methods twice - one for local computationsand one for remote computations. For this purpose, a pro-gramming model is made available to application developers.This programming model is used for dropped connection, sup-ports local and remote execution, and combines all codes in asingle package so the user will have a compatible remoteimplementation.Cuckoo is a dynamic ofﬂoading framework as it takes theofﬂoading decision at runtime and ofﬂoads the well-deﬁnedcomponents of the application. In case the remote resourcesare not reachable (i.e. network connection is not available)then the application can be executed on local resources (themobile device).4.7. Phone2CloudXia et al. present in[36]a computation ofﬂoading frameworkcalled Phone2Cloud. The objective was to improve energy efﬁ-ciency of smartphones and improve the application’s perfor-mance. Unlike the previous frameworks, authors focus onconducting a fully quantitative analysis on energy saving ofthe system by conducting application experiments and scenarioexperiments.Phone2Cloud is a semi-automatic ofﬂoading framework. Inorder to run applications on the cloud and receive the results,applications need to be manually modiﬁed during preparationstep to make it possible to be executed on cloud servers.The ofﬂoading decision is based on a static analysis whileconsidering user’s delay-tolerance threshold.For delay tolerant applications, the framework uses a sim-ple model to expect WiFi connectivity.The threshold is deﬁned based on predictions to delaytransfers in order to ofﬂoad more data on WiFi while respect-ing the application’s tolerance threshold[42]. The framework will wait for WiFi (only if 4G savings are expected within
Figure 11Jade architecture (adapted from[28]).10 K. Akherﬁ et al.the application’s delay tolerance) to become available, ratherthan sending data immediately.The framework can ofﬂoad the whole or part of an applica-tion to a cloud server. The prototype of Phone2Cloud is imple-mented for Android and Hadoop environment (to serve as acloud). It consists of several components, including an ofﬂoad-ing decision engine, a local execution manager, a bandwidthmonitor, a resource monitor, an execution time predictor, aremote execution manager, and an ofﬂoading proxy that linksthe ofﬂoading decision engine to remote execution manager.The decision engine is built in order to analyze the powerconsumption due to ofﬂoading. Before execution, two typesof comparisons are made:(1) The average execution time of the application runningon the SMD is compared with the user’s delay-tolerance threshold.(2) The power consumption to run the application on theSMD is calculated and compared with power consump-tion required to run the same application on the cloud.First, average execution time and user’s delay-tolerancethreshold are compared. If user’s delay-tolerance threshold issmaller than average execution time then the application is off-loaded to the cloud. Otherwise, the decision engine checkswhether power consumption to run the application on thecloud is greater than power consumption to run the applica-tion on the SMD. If it is the case, the application is executedlocally. Otherwise, the application is ofﬂoaded to the cloud.An illustration of the architecture of Phone2Cloud is pro-vided inFig. 13. Phone2Cloud is composed of seven keycomponents./C15Execution time predictor: It is one of the key components inPhone2Cloud. It is used to predict average execution timeof an entire application on a mobile device./C15Bandwidth monitor and resource monitor: Bandwidthmonitor is used to monitor current bandwidth usage ofthe network while resource monitor takes care of monitor-ing CPU workload and other resources. The two monitorsserve the ofﬂoading decision engine and the execution timepredictor separately./C15Ofﬂoading proxy: It sends necessary input data to theremote execution manager, receives the results returned bythe remote execution manager, and sends back the resultsto the application./C15Ofﬂoading decision engine: It is the core component of Pho-ne2Cloud. Ofﬂoading decision engine decides whether toofﬂoad the application’s components from the mobiledevice to the cloud server. When it decides to run the appli-cation locally, it invokes local execution manager to executethe application. Otherwise, it invokes the ofﬂoading proxyto ofﬂoad computation to the cloud./C15Local execution manager and remote execution manager:The local execution manager is designed to execute theapplication locally on the SMD. It calls the SMD’s operat-ing system, like Android OS, to execute the application.When the remote execution manger receives the required
Figure 12Mirror server architecture (adapted from [38]).Mobile cloud computing for computation ofﬂoading 11input data from the ofﬂoading proxy, it runs the ofﬂoadedcomputation on the cloud, and returns results to theofﬂoading proxy.The authors examine how the energy consumption and exe-cution time of applications will be affected. The evaluatedapplications are word count, path ﬁnder, and sort application.The framework saves energy and improves applications’ per-formance and users’ experience of smartphones . For instance, face ﬁnder application costs more energy onsmartphone than on a cloud server and the difference betweenthe two costs gets bigger as input grows. The reason behindthis is because data transmission costs less energy than runningthe application locally. Moreover, the energy consumption insmartphones grows faster than that on the cloud server. Thus,face ﬁnder application should be ofﬂoaded to cloud.4.8. A comparative review of some ofﬂoading frameworksHaving reviewed different existing computation ofﬂoadingframeworks along with their main characteristics, Table 2pre- sents an overall view about these frameworks and classiﬁesthem based on the following attributes:/C15Preparation: Any necessary preparations before ofﬂoading./C15Partitioning: Partitioning supported or not./C15Decision: Dynamic or static./C15Ofﬂoading Mechanism: Mechanism used to ofﬂoad inten-sive computations./C15Granularity Level: Granularity Level (i.e. class, method,thread)./C15Annotation: Automation of partitioning process (Auto-matic or manual)./C15Contribution: Solved problems?Annotation is one of the important attributes in partition-ing step. It can be seen as a metadata added to the source code.The current partitioning algorithms used in the ofﬂoadingframeworks can be categorized as (a) automatic and (b)manual.In automatic annotation, the ofﬂoading framework imple-ments automatic annotation by using the proﬁler to collectthe necessary information and annotate the relevant compo-nent in the application as an indication of availability of par-titioning[6,7].Manual annotation is performed by the programmers at thedesign phase. It requires examining the scope of the compo-nents of the application at design time. Programmers annotatethe components of the application at different granularity suchas classes and methods[8,32].We can notice that some frameworks ofﬂoad the entireapplication while other frameworks split the application intoits components. Concerning the ofﬂoading mechanism, someframeworks encapsulate the ofﬂoaded components into aVM or create a VM with exactly the same hardware/softwarespeciﬁcations. Other frameworks focus on the code mechanismto ofﬂoad intensive components. For the annotation attribute,some frameworks use manual annotation while others useautomatic one except Phone2Cloud framework which followsa semi-automatic way. Decision ofﬂoading is the main attri-bute of the different ofﬂoading frameworks. Some frameworkstake the ofﬂoading decision at runtime based on a programproﬁling and program analysis while others take the decisionduring design or compile time using programmers’ annotationsand some estimations. A static ofﬂoading decision could notadapt to ﬂuctuating network conditions efﬁciently anddepends on programmers’ decision. A dynamic ofﬂoadingdecision incurs overhead as it is continuously performed toobtain the latest information.It can be seen from the presented frameworks that they usedifferent approaches to ofﬂoad intensive tasks to remote cloudservers. However, none of them use or adopt containers tech-nology such as Linux Containers (LXC). LXC is attractingresearchers these days as a lightweight alternative to fullmachine virtualization such as the common known hypervisorssuch as KVM or Xen. Recently, research suggests that applica-tions running in containers can achieve approximately samespeed in memory, processing and also network throughputas if they were running on a physical machine [41]. LXC is con- sidered as an OS level virtualization where each container hasits own environment called a namespace where speciﬁc pro-cesses are running and isolated from the rest of the system.The usage of containers instead of VM will be a good ideasince it is lighter than VM.
Figure 13Architecture of Phone2Cloud (adapted from [36]).12 K. Akherﬁ et al.Table 2A comparative review of some ofﬂoading framework.
Framework Partitioning Preparation Decision Oﬄoading mechanism Contribution Granularity
level
Automation YearVM Cloudlet[29]
The entire migrating imageof the running application isoﬄoaded to the designatedremote server while themobile device provides auser interface and serves as athin client
It requires the cloning ofthe mobile deviceapplication processingenvironment to a remotehost
Not available VM: the mobile device
transmits all the states ofthe application to thecloudlet, which applies itto the base VM to launchand execute the VM
Cloudlet-basedresource-rich mobilecomputing
Entire App Not
available2009Phone2Cloud[36]
The application can bepartitioned or entirelyoﬄoaded
Applications need to bemanually modiﬁed in orderto be executed on cloudservers
Static: the oﬄoadingdecision is based on user’sdelay-tolerance thresholdand static analysis
Code: the remoteexecution manger getsrequired input data, itexecutes oﬄoadingcomputation on the cloudserver, and sends backresults to the oﬄoadingproxy
Enhancement of theapplication’sperformance andimprovement ofenergy eﬃciency ofsmartphones
Part/EntireApp
Semi-automatic2009MAUI[8]Annotate each individualmethod as local or remote
It creates two versions of amobile application (formobile device and cloud).It uses programmingreﬂection to identify whichmethods are markedoﬄoadable or not
Dynamic: decision is basedupon the input of the MAUIproﬁler and MAUI solver
Code: MAUI does notsupport executing onlyportions of a methodremotely
Energy-aware codeoﬄoad
Method Manual 2010Mirror Server[38]
The framework does notrequire a partitioning so theentire application isoﬄoaded
It creates a mirror for asmartphone
Not available VM: During the copying
process, no operationfrom user is authorized
Reduce theworkload andincrease theresources ofsmartphones in avirtual manner
Entire App Not
available2010Cuckoo[19]Partitioning is made basedon the existing activitymodel in Android. Thegraphical componentsremain on the mobile devicewhile the services can beoﬄoaded
Destination running a JavaVM
Dynamic: methodinvocations to services arereceived and Cuckooframework will then decidewhether to oﬄoad it or notwhile checking theavailability of the remoteresources
Code: the frameworkreceives method calls andevaluates whether tooﬄoad the method usingheuristics information
Simplifying thedevelopment ofsmartphone
applications whilebeneﬁting fromcomputationoﬄoading
Method Manual 2010CloneCloud[6]
The partitioning is madebased on static programanalysis and programproﬁling
A duplicate of mobiledevice’s software stored onthe cloud server
Dynamic: threads aremigrated from the mobiledevice to the clone in thecloud
VM: oﬄoadedcomponents of anapplication are runninginside a virtual machine
Elastic executionbetween mobiledevices and cloudswhile adapting theapplicationpartitioning
Thread Automatic 2011Jade[28]An application ispartitioned at the class levelin Jade. A class mustimplement one of twointerfaces to be oﬄoadable
It checks the applicationand device status bymonitoring thecommunication costs,work load variation, andenergy status
Dynamic: have updatedinformation concerning thestatus of the application andthe device
Code: an oﬄoaded objectcan be executed on theremote server
An energy-awarecomputationoﬄoading system
Class Automatic 2015Mobile cloud computing for computation ofﬂoading 135. General issues and challenges in computation ofﬂoading forMCCThe selected issues are presented from three perspectives: theresource-intensive structures of the existing frameworks, thesecurity perspective, and the optimal ofﬂoading platform.5.1. Platform diversityOne of the challenges in the current computation ofﬂoadingframeworks is the diversity and heterogeneity of smartphonearchitectures and operating systems. This diversity is seen inthe following example: MAUI[8]is an ofﬂoading frameworkwhich is applicable for the .Net framework whereas MirrorServer[38]is a framework which is compatible with theAndroid platform. A consistent access to cloud services isexpected wherein SMDs are enabled to access cloud comput-ing services regardless of the installed operating system orthe used hardware. A standardized ofﬂoading framework fordifferent smartphone platforms is still a challenging issue inthe MCC ﬁeld.5.2. Security and privacy in mobile cloud applicationsSecurity of data transmission is an important concern in cloudbased application processing. Security and privacy are two cru-cial concepts that need to be maintained during the ofﬂoadingprocess. These concepts can be addressed from differentangles: (1) Mobile device, (2) cloud data centers, and (3) duringdata transmission over the network. Besides all the technolo-gies, there is a great increase in the variety of sophisticatedattacks on mobile phones which are the main targets forattackers. Regarding the security in the cloud data centers,threats are basically related to the transmission of databetween the different nodes over the network. Thus, high levelsof security are expected by both the mobile clients and thecloud providers. In the current frameworks [10,12], binary transfer of the application code at runtime is continually sub-jected to security threats. Despite the available solutions,strong measures and a secure environment are required forthe three entities of MCC model.In[39], the authors focus on optimizing tasks and compu-tations, and they explore secure ofﬂoading of applicable linearprogramming (LP) computations. In this paper, authors buildtheir work based on the decomposition of the LP computationofﬂoading into public LP solvers running on the cloud and pri-vate LP parameters owned by the customer. To achieve an efﬁ-cient and validate results, the authors focus on thefundamental duality theorem of LP computation and comeup with the essential conditions that must satisﬁed by correctresults. Bugiel et al. present in[40]an architecture for secureoutsourcing of data and arbitrary computations to anuntrusted commodity cloud. The architecture proposed intheir approach consists of two clouds (twins): a trusted cloudand a commodity cloud.The computations are divided in such a way that the trustedcloud is mainly used for critical operations, whereas requeststo the ofﬂoaded data are processed in parallel by the fast com-modity cloud on encrypted data.However, the idea of dividing operations and handlingthem by different clouds lead to different difﬁculties.For instance, the deployment and maintenance of thisarchitecture of cloud will need clear modiﬁcations in the maininfrastructure.The security threat is advancing in a quick manner morethan we can keep up with it. Security techniques need toenhance and progress constantly to meet new changes andnew offered services. Thus, it is no longer possible to deﬁnea security system that would solve all the security threats atonce.5.3. Fault-tolerance and continuous connectivityIn MCC, mobility is one of the most important attributes ofSMDs. This is because freedom of movement and autonomyof communication during the consumption of mobile cloudservices, are crucial criteria for users’ satisfaction. However,there are some constraints that prevent the achievement ofseamless connectivity and uninterrupted access to cloud ser-vices while on the move. As mobile users move, data exchangerates and network bandwidth may vary. Moreover, users maylose their connection while sending or receiving data; there-fore, ofﬂoading approaches should be provided with suitablefault-tolerant strategies in order to resend the lost components,minimize the response time, and reduce the energy consump-tion of mobile devices. It should be noted that the guaranteeof a successful execution of ofﬂoaded applications is very cru-cial for mobile users.5.4. Automatic mechanismThe available computation ofﬂoading frameworks still need tobe automated. This will help the ofﬂoading process to be per-formed in a seamless fashion while discovering the surroundedenvironment[5,9,14]. The achievement of such automation isnot an easy task as it needs the implementation of a protocoldedicated to ﬁnding and discovering services depending onthe current context and its constraints.5.5. Ofﬂoading economy/costUsing cloud infrastructure resources imposes ﬁnancial chargeson the end-users, who are required to pay according to the Ser-vice Level Agreement (SLA) agreed on with the cloud vendorserving them. Generally, the operations of content ofﬂoadingand data transfer between cloud providers incur additionalcosts on end-users. Therefore, economic factors should betaken into consideration while making the ofﬂoadingdecisions.5.6. Partition ofﬂoading and external data inputAt runtime, it is challenging to decide which application com-ponents need to be ofﬂoaded and to ﬁnd the suitable server forthat. Algorithms answering this problem need resource-intensive effort, which can affect the execution time of the off-loaded partitions of the application[13].Although existing application partitioning algorithms allowan adaptive execution of the application between the mobiledevices and the cloud servers, they still do not provide anysolution on how to utilize and beneﬁt from the elastic resourcesin the clouds. This is speciﬁcally needed in order to make the14 K. Akherﬁ et al.applications scalable when a large number of mobile usersneed to be served and when the application requires input datathat are stored in other remote servers.Table 3recapitulates the main challenges to currentofﬂoading frameworks and open research issues in MCC.The challenges indicate the issues in the computation ofﬂoad-ing frameworks in MCC that still require more elaborationand thorough study, while the open issues specify unresolvedproblems in current ofﬂoading frameworks.6. ConclusionThis paper discusses three main concepts: (1) cloud computing,(2) mobile cloud computing, and (3) computation ofﬂoading.More speciﬁcally, it presents existing frameworks for computa-tion ofﬂoading along with the various techniques used toenhance the capabilities of smartphone devices based on theavailable cloud resources. The paper investigates the differentissues in current ofﬂoading frameworks and highlights chal-lenges that still obstruct these frameworks in MCC. Moreover,the paper shows the different approaches that are used by theframeworks to achieve ofﬂoading. Some of these approachesuse static ofﬂoading while others employ dynamic ofﬂoading.Even though there exist a variety of approaches, all of themtarget the same objective which is the improvement of thesmartphone device capabilities by saving energy, reducingresponse time, or minimizing the execution cost.We notice that current ofﬂoading frameworks are still fac-ing some challenges and difﬁculties. For instance, lack of stan-dard architectures. This shortage leads to more complicationswhile developing and managing a proposed framework.Finally, it is important to come up with a lightweight paradigmor model that will help to overcome the difﬁculties and mini-mizing efforts while developing, deploying, and managing anofﬂoading framework.We believe that exploring other alternatives, such as intro-ducing a middleware based architecture using an optimizingofﬂoading algorithm, could help better the available frame-works and provide more efﬁcient and more ﬂexible solutionsto the MCC users.AcknowledgmentsThis work has been funded by the Schlumberger FoundationFaculty for the Future and Technical University of Munich.References[1]M. Armbrust, A. Fox, R. Grifﬁth, A.D. Joseph, R. Katz, A.Konwinski, G. Lee, D. Patterson, A. Rabkin, I. Stoica, et al, Aview of cloud computing, Commun. ACM 53 (4) (2010) 50–58
. [2]
R. Barga, D. Gannon, D. Reed, The client and the cloud:democratizing research computing, IEEE Internet Comput. 15(1) (2011) 72
.[3]
B. Butler, Gartner: Cloud Putting Crimp in TraditionalSoftware, Hardware Sales, Networkworld, 2012
. [4]
R. Buyya, C.S. Yeo, S. Venugopal, J. Broberg, I. Brandic, Cloudcomputing and emerging it platforms: Vision, hype, and realityfor delivering computing as the 5th utility, Future Generat.Comput. Syst. 25 (6) (2009) 599–616
. [5]
W.-C. Chuang, B. Sang, S. Yoo, R. Gu, M. Kulkarni, C.Killian, Eventwave: programming model and runtime supportfor tightly-coupled elastic cloud applications, in: Proceedings ofthe 4th annual Symposium on Cloud Computing, ACM, 2013,p. 21
.[6]
B.-G. Chun, S. Ihm, P. Maniatis, M. Naik, A. Patti,CloneCloud: elastic execution between mobile device andcloud, in: Proceedings of the Sixth Conference on ComputerSystems, ACM, 2011, pp. 301–314
.[7]
B.-G. Chun, P. Maniatis, Augmented smartphone applicationsthrough clone cloud execution, HotOS 9 (2009) 8–11
. [8]
E. Cuervo, A. Balasubramanian, D.-K. Cho, A. Wolman, S.Saroiu, R. Chandra, P. Bahl, Maui: making smartphones lastlonger with code ofﬂoad, in: Proceedings of the 8th InternationalConference on Mobile Systems, Applications, and Services,ACM, 2010, pp. 49–62
.[9]
Y. Cui, X. Ma, H. Wang, I. Stojmenovic, J. Liu, A survey ofenergy efﬁcient wireless transmission and modeling in mobilecloud computing, Mobile Networks and Applications 18 (1)(2013) 148–155
.[10]
J. Dean, S. Ghemawat, Mapreduce: simpliﬁed data processingon large clusters, Commun. ACM 51 (1) (2008) 107–113
. [11]
H.T. Dinh, C. Lee, D. Niyato, P. Wang, A survey of mobilecloud computing: architecture, applications, and approaches,Wireless Commun. Mobile Comput. 13 (18) (2013) 1587–1611
. [12]
A. Dou, V. Kalogeraki, D. Gunopulos, T. Mielikainen, V.H.Tuulos, Misco: a mapreduce framework for mobile systems, in:Proceedings of the 3rd International Conference on PervasiveTechnologies Related to Assistive Environments, ACM, 2010, p.32
.[13]
I. Giurgiu, O. Riva, G. Alonso, Dynamic software deploymentfrom clouds to mobile devices, in: Middleware 2012, ACM,2012, pp. 394–414
.[14] M.S. Gordon, D.A. Jamshidi, S. Mahlke, Z.M. Mao, X. Chen,Comet: Code ofﬂoad by migrating execution transparently, in:Presented as part of the 10th USENIX Symposium onOperating Systems Design and Implementation (OSDI 12),2012, pp. 93–106.[15] K. Ha, G. Lewis, S. Simanta, M. Satyanarayanan, CloudOfﬂoad in Hostile Environments, Technical Report, DTICDocument, 2011.[16]
S. Hakak, S.A. Latif, G. Amin, A review on mobile cloudcomputing and issues in it, Int. J. Comput. Appl. 75 (11) (2013)
. [17]
J. Hauswald, T. Manville, Q. Zheng, R. Dreslinski, C.Chakrabarti, T. Mudge, A hybrid approach to ofﬂoadingmobile image classiﬁcation, in: International Conference onAcoustics, Speech and Signal Processing (ICASSP), 2014 IEEE,IEEE, 2014, pp. 8375–8379
.Table 3Some challenges and open issues in ofﬂoadingframeworks for MCC.
Open Issues inoﬄoadingframeworksChallenges toavailableoﬄoadingframeworks Access a distributedplatform transparentlyppContinuous connectivity tocloud servers–pDiversity of operatingsystems in mobile devicesalong with the variety oftheir architecturesppProvide an eﬀectiveexecution of a processremotely and returns resultto mobile deviceppMobile cloud computing for computation ofﬂoading 15[18]A. Huth, J. Cebula, The Basics of Cloud Computing, UnitedStates Computer, 2011
.[19]
R. Kemp, N. Palmer, T. Kielmann, H. Bal, Cuckoo: acomputation ofﬂoading framework for smartphones, in:Mobile Computing, Applications, and Services, Springer, 2010,pp. 59–79
.[20]
K. Kumar, Y.-H. Lu, Cloud computing for mobile users: canofﬂoading computation save energy?, Computer 43 (4) (2010)51–56
[21]S. Kundu, J. Mukherjee, A.K. Majumdar, B. Majumdar, S.S.Ray, Algorithms and heuristics for efﬁcient medical informationdisplay in PDA, Comput. Biol. Med. 37 (9) (2007) 1272–1282
. [22]
G.A. Lewis, S. Echeverr’ ıa, S. Simanta, B. Bradshaw, J. Root,Cloudlet-based cyber-foraging for mobile systems in resourceconstrained edge environments, in: Companion Proceedings ofthe 36th International Conference on Software Engineering,ACM, 2014, pp. 412–415
.[23]
S. Mathew, Overview of Amazon Web Services, AmazonWhitepapers, 2014
.[24]
J. Matthews, M. Chang, Z. Feng, R. Srinivas, M. Gerla,Powersense: power aware dengue diagnosis on mobile phones,in: Proceedings of the First ACM Workshop on MobileSystems, Applications, and Services for Healthcare, ACM,2011, p. 6
.[25] P. Mell, T. Grance, The Nist Deﬁnition of Cloud Computing,2011.[26]
A. Mtibaa, A. Fahim, K.A. Harras, M.H. Ammar, Towardsresource sharing in mobile device clouds: power balancingacross mobile devices, ACM SIGCOMM Comput. Commun.Rev. 43 (4) (2013) 51–56
.[27]
Y. Nimmagadda, K. Kumar, Y.-H. Lu, C.G. Lee, Real-timemoving object recognition and tracking using computationofﬂoading, in: International Conference on Intelligent Robotsand Systems (IROS), 2010 IEEE/RSJ, IEEE, 2010, pp. 2449–2455
.[28]
H. Qian, D. Andresen, Jade: reducing energy consumption ofandroid app, Int. J. Network. Distrib. Comput (IJNDC) 3 (3)(2015) 150–158 (Atlantis Press)
.[29]
M. Satyanarayanan, P. Bahl, R. Caceres, N. Davies, The casefor vm-based cloudlets in mobile computing, IEEE PervasiveComput. 8 (4) (2009) 14–23
.[30]
M. Shiraz, E. Ahmed, A. Gani, Q. Han, Investigation onruntime partitioning of elastic mobile applications for mobilecloud computing, J. Supercomput. 67 (1) (2014) 84–103
.[31]M. Shiraz, A. Gani, R.H. Khokhar, R. Buyya, A review ondistributed application processing frameworks in smart mobiledevices for mobile cloud computing, IEEE Commun. Surv.Tutorials 15 (3) (2013) 1294–1313
.[32]
M. Smit, M. Shtern, B. Simmons, M. Litoiu, Partitioningapplications for hybrid and federated clouds, in: Proceedings ofthe 2012 Conference of the Center for Advanced Studies onCollaborative Research, IBM Corp., 2012, pp. 27–41
. [33]
M. Tulloch, Introducing Windows Azure for IT Professionals,Microsoft Press, 2013
.[34]
C. Wang, Z. Li, Parametric analysis for adaptive computationofﬂoading, ACM SIGPLAN Notices, vol. 39, ACM, 2004, pp.119–130
.[35]
S. Wang, S. Dey, Rendering adaptation to addresscommunication and computation constraints in cloud mobilegaming, in: Global Telecommunications Conference(GLOBECOM2010), 2010 IEEE, IEEE, 2010, pp. 1–6
. [36]
F. Xia, F. Ding, J. Li, X. Kong, L.T. Yang, J. Ma, Phone2cloud:exploiting computation ofﬂoading for energy saving onsmartphones in mobile cloud computing, Inform. Syst. Front.16 (1) (2014) 95–111
.[37]
K. Yang, S. Ou, H.-H. Chen, On effective ofﬂoading services forresource-constrained mobile devices running heavier mobileinternet applications, Commun. Mag. IEEE 46 (1) (2008) 56–63
. [38]
B. Zhao, Z. Xu, C. Chi, S. Zhu, G. Cao, Mirroring smartphonesfor good: a feasibility study, in: Mobile and Ubiquitous Systems:Computing, Networking, and Services, Springer, 2010, pp. 26–38
.[39]
C. Wang, K. Ren, J. Wang, Secure and practical outsourcing oflinear programming in cloud computing, in: INFOCOM, 2011Proceedings IEEE, IEEE, 2011, pp. 820–828
. [40]
S. Bugiel, S. Nurnberger, A. Sadeghi, T. Schneider, Twin clouds:an architecture for secure cloud computing, in: Workshop onCryptography and Security in Clouds (WCSC 2011), 2011
. [41]
D. Bernstein, Containers and cloud: from LXC to Docker toKubernetes, in: IEEE Cloud Computing 1.3, IEEE, 2014, pp.81–84
.[42]
A. Balasubramanian, R. Mahajan, A. Venkataramani,Augmenting mobile 3G using WiFi, in: Proceedings ACMMobiSys’10, Chicago, 2010, pp. 209–222
.16 K. Akherﬁ et al.