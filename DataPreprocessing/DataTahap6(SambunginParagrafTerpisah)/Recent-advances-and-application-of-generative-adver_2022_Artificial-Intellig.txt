A rising amount of research demonstrates that artificial intelligence and machine learning approaches can provide an essential basis for the drug design and discovery process. Deep learning algorithms are being developed in response to recent advances in computer technology as part of the creation of therapeutically relevant medications for the treatment of a variety of ailments. In this review, we focus on the most recent advances in the areas of drug design and discovery research employing generative deep learning methodologies such as generative adversarial network (GAN) frameworks. To begin, we examine drug design and discovery studies that use several GAN methodologies to evaluate one key application, such as molecular de novo design in drug design and discovery. Furthermore, we discuss many GAN models for dimension reduction of single-cell data at the preclinical stage of the drug development pipeline. We also show various experiments in de novo peptide and protein creation utilizing GAN frameworks. Furthermore, we discuss the limits of past drug design and discovery research employing GAN models. Finally, we give a discussion on future research prospects and obstacles.

posed to employing artificial neural networks that only employ a single individual layer [22]. Deep learning algorithms have achieved a broad variety of applications in drug design and discovery [9,21]. These ap- proaches are based on the most advanced computer technologies now available, such as general-purpose computing performed on graphics processing units. There is an enormous need to employ software tools in deep learning frameworks for various drug development tasks [2] in order to address the demanding challenges we face today in the field of drug design and discovery. These challenges are presented in the form of complex problems that must be solved. To be more specific, deep learn- ing frameworks are utilized in order to serve as tools in order to ful- fill the applications of drug design and discovery, such as molecular de novo design, dimension reduction of single-cell data in pre-clinical devel- opment, compound property and activity prediction, reaction analysis, synthesis prediction, and biological image analysis [1]. These applica- tions include molecular de novo design, dimension reduction of single- cell data in pre-clinical development, reaction analysis, synthesis pre- diction, and biological image analysis.

designed to emulate that of the human mind through learning from the surrounding environment and/or experiences. When working on ma- chine learning, there are three focuses of the model: the class of the task, the factor by which the performance must be improved by, and the source of the overall experience [45]. Using these three factors, ma- chine learning models have the optimization goal of minimizing their learning error through the use of a variety of algorithms such as gra- dient descent and backpropagation. Gradient descent looks at the error curve that the model generates compared to what it should be outputting and finds the right parameters for the model that minimizes the error. These algorithms have been applied in a very broad range of environ- ments consisting of, but not limited to: computer vision, entertainment, spacecraft engineering, finance, and computational biology [45].

putting a discrete number of classes or regression outputting a continu- ous value or set of values [46]. For example, a machine learning model such as linear regression classifying a given image as containing a cat or a dog would first need to be separately shown images of a cat and a dog to learn the features within the images to then compare to the features of a new image. For regression, a model could be trained on the previous sales of a company to then create a numerical prediction to forecast future sales and growth of the next year.

One of the biggest inspirations for GANs came from deep Boltzman machines that likewise utilized two separate processes running at the same time while training which included a positive and negative phase [59]. The positive phase loaded in data and made it more likely, and the negative phase drew samples and made them less likely. Through iterative training, the distribution of the samples becomes closer to the distribution the model represents. The parameters of the model are up- dated at the same time as new samples are being generated. However, it was found that deep Boltzman machines lacked the capability to scale past the greyscale MNIST digits dataset, and for example, were unable to generate color image samples in a timely manner. This is caused by the negative phase being unable to keep up with the speed of the posi- tive phase generating samples which prevents deep Boltzman machines from converging to a useful state.

plausible data, and the discriminator distinguishes between what part of the data is real or fake. The generator uses the feedback from the dis- criminator to update its weights and biases in order to generate data that can better fool the discriminator by looking more real. The discrimina- tor will then begin to perform worse on the data and will have to update itself to perform better. After this, the generator will be able to use the feedback from the new discriminator to better improve its own data generation. This cycle continues until convergence. For image genera- tion applications, the discriminator is typically a Convolutions Neural Network (CNN) and is able to adapt to the underlying distribution of data. It will perform a binary classification to distinguish between the real and the generated data.

A year later, Denton et al combined the CGAN with a Laplacian pyra- mid to break up the generation of images through multiple CNNs into successive refinements [66]. The Laplacian GAN (LapGAN) was the first GAN architecture to be able to generate high-resolution images by first generating images at a low resolution and then scaling to successive higher resolutions. This was done by taking the difference between the generated images and their blurred counterparts to produce a learnable filter.

Researchers from Google created the famous Transformer architec- ture that connects the encoder, the generator, and the decoder, the dis- criminator, through an attention mechanism [72]. An attention mech- anism looks for the most relevant parts of a dataset through using a weighted combination of input vectors with the most relevant input vectors granted the highest weights. This same architecture was then applied to a convolutional based GAN model called the Self-Attention Generative Adversarial Network (SAGAN) [73]. SAGANs are able to gen- erate data with details across the entire high resolution feature map as opposed to previous models only generating data with details in local points from lower resolution representations of the data. With SAGANs being attention-driven from utilizing the self attention architecture in both the generator and discriminator, they are able to converge must faster than other GAN architectures and achieve state of the art results with the ImageNet dataset [73].

For example, imagine that the Generator creates images that are clas- sified as real by the Discriminator 25% of the time. Therefore, the Gen- erator has a 25% accuracy, and the Discriminator has a 75% accuracy. Now imagine that the Generator improves itself with feedback from the Discriminator, so that the Generator is now 80% accurate. Therefore, the Discriminator must be 20% accurate. In other words, the Generator has improved by 55%, and therefore, the Discriminator must have lost 55% points of accuracy.

used to help resolve are the issues involving the heavy cost and over- all time for drug research, but one issue that has come up for GANs itself involves the limitation when working to explore some regions of chemical space. We previously referenced how GANs work better than other traditional methods as well as newer deep learning when it comes to chemical space, but innovations in GANs look to expand and solve this shortcoming of not having complete access to chemical space. A fully quantum GAN could accelerate the training process for GANs, as well as offer better training samples which could allow more exploration of chemical space but lacks the ability to process over two dimensions [109]. In the future, a fully quantum GAN could be viable and success- ful, but more innovation in the technology is currently needed. In the

Lin et al continue to describe another group of researchers, Karimi et al. [112] who investigated the gcWGAN (guided conditional Wasser- stein General Adversarial Network) structure and its applications in pep- tide folding. This conditional Wasserstein GAN structure is derived from the Wasserstein GAN [68] with gradient penalty. The Wasserstein GAN, as proposed by Arjovsky et al., is a type of GAN architecture which uses

A research used GANS with adaptive training data for drug discover. During the training period, the model saved new and valid compounds it generates. The training data then updated using a replacement tech- nique that may be either directed or random. The technique was re- peated when the training resumes. The findings suggest that this method can counteract the decline in new molecules created by a normal GAN during training. In addition, using recombination between created com- pounds and training data to boost novel molecule discovery. By includ- ing replacement and recombination into the training process, GANs may be used for larger drug discovery searches[107].

continues, the discriminator maps the inputs utilizing a feature space by a local feature extractor. This local feature extractor promotes sample classification, which learns the difference between real and fake pro- teins and SIMILES. After the first round is completed, the local feature extractor will be used as the feature representation of the new model. The second round is to build upon the regressor. This uses the feature extractor from the first round along with the labeled data to train the

The convolutional regression model conducts convolution operations with kernel size 4 to create feature maps of the input data. The dimen- sions of the convolution layers are 16x4, 32x4, and 48x4. The output layer is a linear function that obtains the continuous value. This is on a network that is trained to decrease the loss of function defined by the

In order to target these cannabinoid receptors, a study utilized a deep convolutional generative adversarial Network (DCGAN) model for de novo designing target-specific compounds [114]. de novo is one of two strategies for identifying the compounds of a specific target. In this study, four types of targets, or fingerprints, were used to describe the small molecules with different structural features: ECFP6, MACCS, AtomPair Count, and AtomPair. A convolutional neural network (CNN) was the architecture for the deep learning model used in this study. It was first built using the four aforementioned types of targets as input data. Then it was applied to the discriminator of the DCGAN. Afterward, the generator was created through reverse convolution. This strategy minimizes the discriminative and generative loss simultaneously [114].

input with the label of zero. The discriminator chooses between these fingerprints and the authentic data which is labeled as one. The sec- ond step is minimizing the generative loss. Here the discriminator is not trainable and the generative loss is recorded to show how well the gen- erator fools the discriminator. The learning epochs were 50, 100, and 200, while the batch size was 128. When comparing the different CNN architectures, the LeNet-5-based architecture and the Atompair finger- prints performed the best. Based on the ROC curves, this duo attained the highest AUC score across each test set for both types of receptors, CB1 and CB2 [114]. This is the optimum combination using the first as the generation for the discriminator and the second as the input data. This strategy lets the machine produce fingerprints of a potential target- specific compound without any effort from the user.

The study does point out two concerns regarding the GAN architec- ture. The first challenge is to optimize both the discriminator and the generator simultaneously. However, this instability can lead to a gradi- ent favoring one over the other. This could result in an improved score for D, but not G, or vice versa. Secondly, there can only be a restrictive set of outcomes to be generated, also known as mode collapse. With the restrictive set, the generator can only produce one type of outcome or a small sample. Only a limited chemical space is to be covered as well as a lack of structural diversity.

data frameworks. Drug discovery relies on a wide variety of data kinds, many of which are far from exhaustive. One example is that not all protein folds and structures are fully understood, and the data space is only partially covered. Therefore, even if significant progress has been made, applications in which these structures are projected are not yet as good as in other fields. For small molecule synthesis, where the com- plete chemical space is unknown, this holds true as well for reaction prediction.

concerns about the veracity and reproducibility of findings. As a means of avoiding potential pitfalls, understanding the current state-of-the-art of research reproducibility in computational drug discovery is crucial. This will guarantee that the underlying work is of high quality and will withstand the reproduction of the described methodology by the exter- nal research group. In this overview, we looked at the various methods

Transparency in implementations and easy access to validate the analyses are both benefits of open source. It might be challenging to maintain track of the various analysis tools and settings while dealing with data and modeling. As a result, drug discovery workflow solutions are becoming increasingly popular. They aid in producing more trust- worthy multi-step computations, as well as in establishing a trail of ev- idence and making results easy to reproduce. Common Workflow Lan- guage is one example of an initiative seeking to standardize and promote interoperability among workflow specification languages.

The usage of public or shared computing infrastructures (HPC/Cloud) is necessitated by the ever-increasing amounts of data, but this introduces a new layer of complexity for computational reproducibility. The usage of virtual machines and software containers has made it possible for all data analysis tools to be used across differ- ent platforms. High levels of automation and, by extension, increased repeatability, are possible when workflow systems are integrated with the container and virtual machine infrastructure. For example, when deploying models as networked services, virtual infrastructure and containers allow for more dependable and reproducible service delivery.

