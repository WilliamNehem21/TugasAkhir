FlowJo [24], Labfolder [25], PlateDesigner [26], and PlateEditor [27]. While some are able to generate randomised layouts, none of them have capabilities to generate effective layouts. There is, of course, the possi- bility of generating several random layouts and then evaluate them in order to select the best one [28], but that does not guarantee that effec- tive plate layouts have been selected, regardless of how many layouts are generated.

We implemented a constraint model comprising the constraints de- scribed here using MiniZinc [32]. Advanced users can interact with and personalise the model by adding or removing constraints, which can be ran using the MiniZinc IDE, scripts, or command line. It is also possi- ble to incorporate the model into existing workflows, for example, with the help of the MiniZinc Python package. Instructions on how to run our MiniZinc model using the command line or the MiniZinc IDE are available at https://github.com/pharmbio/plaid.

tion [33], that replicates do improve precision, but not enough to ad- dress systematic bias. In general, adding more doses had a higher impact in the estimations than adding more replicates, regardless of the layout. In particular, effective layouts generally lead to more accurate results even with fewer replicates or fewer doses. For example, we obtained

possible substances to place on a well, i.e. a given compound at a certain concentration, a positive control, etc. Moreover, problem solutions are distinguished from non-solutions by constraints, which are the limita- tions to the values that the decision variables can take simultaneously. In this context, a constraint is, for example, a limitation that controls of the same type cannot be placed in adjacent wells.

On top of including all the desirable properties of effective mi- croplate layouts, we have chosen to include other constraints that are needed for practical matters. For example, we enforce that for each sam- ple, all concentration levels of a given replica must appear on the same plate. Technical replicates of a sample can be chosen to appear on the same plate, on a different plate, or a mixture of both. We have also included the dimensions of the microplate as parameters in terms of number of rows and columns, allowing the use of any kind of plate size. Finally, it is also possible to specify how many rows and columns should be left empty on the border of every microplate in order to mitigate edge effects.

We simulated screening experiments consisting of 40 384-well mi- croplates, each of which contained either (i) 8 positive controls and 8 negative controls, (ii) 10 positive controls and 10 negative controls, or (iii) 10 positive controls and 20 negative controls. The remaining wells contained random samples with hit-rates of 1%, 5%, 10%, 20%, 33%, and 40%. We then applied various strengths of bowl-shaped ef- fects to every microplate. Strong plate effects are designed according to the examples in Zhang [11], while moderate plate effects are de- signed to be half way between no-effect and a strong plate effect. For error correction and normalisation we used linear regression in the case of border layouts, and LOESS regression (as implemented in Cappellari et al. [55]) in the case of random and effective layouts, and scaled the data as a percentage of the average of the negative controls. Both linear and LOESS regression are performed based on negative controls only, without assuming a low hit-rate. We used the error-corrected data to

Geibinger T, Mischek F, Musliu N. Investigating constraint programming for real world industrial test laboratory scheduling. In: Rousseau L-M, Stergiou K, editors. In- tegration of constraint programming, artificial intelligence, and operations research. Lecture notes in computer science. Cham: Springer International Publishing; 2019.

