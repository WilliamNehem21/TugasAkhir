Abstract Embedded systems consist of one or more processing units which are completely encap- sulated by the devices under their control, and they often have stringent timing constraints associ- ated with their functional specification. Previous research has considered the performance of different types of task scheduling algorithm and developed associated timing analysis techniques for such systems. Although preemptive scheduling techniques have traditionally been favored, rapid increases in processor speeds combined with improved insights into the behavior of non-preemptive scheduling techniques have seen an increased interest in their use for real-time applications such as multimedia, automation and control. However when non-preemptive scheduling techniques are employed there is a potential lack of error confinement should any timing errors occur in individual software tasks. In this paper, the focus is upon adding fault tolerance in systems using non- preemptive deadline-driven scheduling. Schedulability conditions are derived for fault-tolerant peri- odic and sporadic task sets experiencing bounded error arrivals under non-preemptive deadline scheduling. A timing analysis algorithm is presented based upon these conditions and its run- time properties are studied. Computational experiments show it to be highly efficient in terms of run-time complexity and competitive ratio when compared to previous approaches.

[4] and Nasri and Fohler [5]. The results demonstrated by Abugchem et al. [1] and Thekkilakattil1 et al. [2] are directly applicable to the npEDF scheduler. Since very efficient run- time implementations (with effectively O(1) CPU overheads) are relatively straightforward to create [13], npEDF becomes the focus of the current paper.

from a computational study which provide an evaluation of the relative effectiveness of the proposed techniques in com- parison with previous works. The remainder of this paper is organized as follows. Section 2 reviews some relevant previous work in the area of fault tolerant real-time scheduling. Sec- tion 3 presents the system and error models while Section 4 derives the schedulability analysis. Section 5 presents the com- putational simulation results. Section 6 concludes the paper and presents some areas for future work.

A watchdog timer is arguably the simplest approach for error detection and correction in a computer system [18,19]. How- ever the use of a watchdog can have several drawbacks with respect to a real-time control system, as outlined in Short and Sheikh [24]. Previous work has therefore considered more elaborate error/fault detection and recovery means for task failures for a variety of non-preemptively scheduled systems: the key related works are now elaborated.

Observation 2. Under npEDF, considering a job with a dead- line at t = d and a single error occurs in the interval [b(d), d), then the worst-case behavior is induced when the eligible job with the largest execution time fails. Under the npEDF scheduling policy, jobs which are eligible for execution in the interval [b(d), d) are those which are generated by tasks satisfy- ing the relationship di 6 d. h an efficient mechanism to add fault-tolerance to npEDF with efficiently verifiable schedulability conditions. The analysis and illustrative example in the previous Section gave a promis- ing indication of the suitability of the proposed method in this respect; computational experiments using randomly generated representative task sets will be used to give further evidence in this respect. Specifically, the competitive ratio and analysis complexity will be investigated in more depth. First, the methodology employed to generate the task parameters and the design of the experiment is described.

Non-preemptive scheduling techniques can provide a simple and attractive option for meeting real-time constraints in embedded systems. In this paper, the fault-tolerant npEDF scheduling of periodic and sporadic tasks has been studied. Schedulability analysis techniques for task sets experiencing bounded sporadic error arrivals have been developed, and have been shown to provide an efficiency improvement over previous methods in terms of competitive ratio and/or analysis complexity. In conclusion, the proposed technique may be of interest to developers of fault-tolerant, non-preemptive embed- ded systems which may be exposed to interference and errors. Further work will concentrate upon better categorizations of the fault load, the application of probabilistic schedulability guarantees and extensions to multiprocessor environments, extending techniques such as those proposed in Andrei et al. [29].

