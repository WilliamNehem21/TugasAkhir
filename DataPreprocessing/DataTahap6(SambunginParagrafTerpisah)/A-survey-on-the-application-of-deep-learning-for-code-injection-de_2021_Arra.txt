Code injection is one of the top cyber security attack vectors in the modern world. To overcome the limitations of conventional signature-based detection techniques, and to complement them when appropriate, multiple ma- chine learning approaches have been proposed. While analysing these approaches, the surveys focus predomi- nantly on the general intrusion detection, which can be further applied to specific vulnerabilities. In addition, among the machine learning steps, data preprocessing, being highly critical in the data analysis process, appears to be the least researched in the context of Network Intrusion Detection, namely in code injection. The goal of this survey is to fill in the gap through analysing and classifying the existing machine learning techniques applied to the code injection attack detection, with special attention to Deep Learning. Our analysis reveals that the way the input data is preprocessed considerably impacts the performance and attack detection rate. The proposed full preprocessing cycle demonstrates how various machine-learning-based approaches for detection of code injec- tion attacks take advantage of different input data preprocessing techniques. The most used machine learning methods and preprocessing stages have been also identified.

Code injection is the most popular and most impactful attack, which is at the top of the OWASP vulnerabilities list. The detection of code injection attacks, traditionally carried out using signature/pattern-based recognition techniques, has been recently supplemented by the appli- cation of advanced machine learning approaches. The advantage of such techniques is that similar algorithms, e.g., Deep or Convolutional Neural Networks, may find application in a broad range of various threat detection scenarios. Indeed, big cyber security companies are investing significant funds into the research and deployment of machine learning algorithms for the cyberthreat detection purposes, including malware analysis, vulnerable code detection, and intrusion detection (i.e. vulnerability exploitation attempts). AI-enhanced security adoption is growing rapidly,1 and a range of machine learning methods for intrusion detection has already accumulated over the years.

cyber security (specifically, network intrusion detection) have been analysed, out of which only 20 covered preprocessing for code injection detection in sufficient details (see Section 4.4). Further revision revealed a wide variety of diverse preprocessing methods, that as well will be documented later on in the survey.

Preprocessing, a highly critical step in the data analysis process, shapes data for the neural network to be trained, forming a struc- tured multi-dimensional dataset. Preprocessing may increase or reduce the accuracy of the applied method based on a multitude of factors, discussed later in the survey. For example, duplicates can make the neural model biased.

The last step in the machine learning process is to read the output data, evaluate and present it in a way that can be further used by other systems or visually represented for human understanding. E.g., improper selection of a testing dataset can affect the metrics of the output performance.

Exchangeable Image File Format (exif) data contains information about the file: e.g., file source, creation and modification dates, GPS coordinates, camera model, time, compression type, etc. In the vast majority of cases, this data is present in every image or photo.

injection attack types and their detection approaches, methods and tools, including the pre-deployment detection of vulnerable code in web applications. In 2019, Mitropoulos et al. [8] published a survey, reviewing methods of the web application attack detection, which included a class of hybrid approaches, some of which were based on machine learning (e.g., AMNESIA).

In their survey Alwan and Younis [22] list and classify the ap- proaches and methods of the SQLIA detection. The authors claim that none of the enumerated tools addresses the issues of the more recent types of SQLIA, e.g., fast flux SQLIA. In the advanced cases of non-typical injections, the data preprocessing can assist in successful detection.

Valeur et al. [23] proposed a method to identify queries that did not match multiple models of typical queries at runtime. As this was one of the early methods, it did not reach accuracy as high as modern ap- proaches do, however the method has shown the potential of deep learning in malicious query detection.

The above list shows that there is a variety of machine learning methods applied to the code injection detection. The majority of the methods are supervised, with a half of them being deep learning methods, such as CNNs. The deep learning methods demonstrate themselves as more versatile, allowing to analyse 2D, 3D or 4D data using convolution (CNN), or LSTM, as they keep memory of the previous items from the dataset or network sessions. Detecting time-spread ma- licious behaviour can trigger intrusion prevention mechanisms and improve overall security of the application.

Support vector machines (SVMs) are supervised learning models with the associated learning algorithms that analyse the data used for classification and regression analysis. For the code injection detection, SVMs were applied by Dussel et al. [24] and Dong et al. (Y [11].

As per [14], reinforcement learning is the learning of a mapping from the input situations (events) to the output actions so as to maximise a measurable reward or the reinforcement signal. In practice, it is a reward-based system, that works as a semi-supervised approach to learning. The machine-learning-based system learns from the environ- ment and gets rewarded for correct predictions, and penalised for incorrect predictions.

To the extent of our knowledge, there have not yet been any appli- cations of the reinforcement learning to the code injection detection, as its successful applications to intrusion detection have started only recently. In 2020, Lopez-Martin et al. [34] presented a survey on the application of reinforcement learning to the issues of network intrusion detection in general. They state that for the code injection detection, reinforcement has to be limited to only one numeric reinforcement value, i.e. successful detection.

A variety of automated tools can be used for data collection. For example, for he event collection Cova et al. [35] use modified Zend engine. Aceto et al. [36] collected data from a mobile service provider and from various applications on Android devices, which resulted in a binary dataset that was published by Yao et al. [37]. After collection or generation is complete, the raw data has to be preprocessed and then features must be extracted to transform any type of data into a numerical form that can be analysed during future stages.

In the context of code injection attacks, collection of benign and malicious queries can yield a limited number of samples, that is insuf- ficient for the effective model training. Generation of new datasets from the existing data can resolve this challenge. A trend in the recent years shows the use of Generative Adversarial Networks (GAN), however, there are multiple ways to successfully generate new samples from the existing ones.

Adversarial inputs created by introducing permutations of patterns from the already existing datasets can easily subvert their predictions. The 2017 report by Biggio et al. [40] highlights common misconceptions related to the evaluation of machine learning methods and approaches for security applications.

Cheon et al. [20] develop their own way of generating samples based on the existing query templates, by randomising numbers, usernames, passwords, email addresses, etc. Edalat et al. [9] outline the dataset generation approach to multiply the number of malicious samples using concolic input generation [41].

There also exist the non-machine learning based methods that include fuzzing for the attack generation and testing of the experimental system. They can also be used to create a dataset, that is usually stored in text files or database files. One of the most popular tools in fuzzing SQL databases is SQLmap,11 presented by Damele and Stampar. SQLmap is now a part of the majority of the existing security testing toolkits and operating systems. This non-machine learning toolkit can be used for the attack generation to test prototype systems against real life attacks. Cheon et al. [20] use SQLmap for the evaluation of their method. Edalat et al. [9], while also researching the SQL injection detection, instead of machine learning methods, use taint analysis for the evaluation of their ConsiDroid.

The automatic scripts, toolsets, and virtual networks can be used for the attack sample generation. Tools like TCPReplay can be used to emulate the traffic activity from an already existing *.pcap file. Taken a step further, to generate a CICIDS2017 dataset,12 the University of Brunswick used a Virtual Machine with Kali Linux as an attack station. The network traffic was recorded during several days of simulations on a virtual network. After that, the IP addresses were removed from the dataset (CSV file), anonymizing the data. The newer versions of 2018 and 2020 are also available.

Using the adversarial approach, it is possible to create additional permutations and multiply the dataset, increasing the number of sam- ples and improving the detective capabilities of the IDS. However, in real-life attacks, the malicious actors can use sophisticated techniques to avoid simple IDS. To be able to detect more sophisticated malicious queries, generative adversarial approach can be used to increase the complexity of code samples, both malicious and non-malicious.

Parameter fine-tuning is an important step in machine learning. It can be defined as the adjustment of parameters of the model for optimal performance. A parameter or a hyperparameter is a value that impacts the learning process. Every machine learning method has a set of such (sometimes unique) parameters. For example, Artificial Neural Net- works (ANN) have different layers of different types, number of neurons, activation functions for each layer, optimisers, loss function for the output layer, batch size, and number of epochs. Tuning hyperparameters aims to improve the speed of and overcome the limitations of small datasets [53].

Preprocessing is the process of data transformation and its conver- sion into another form, that aids the neural network with the learning process. It changes the initial data in such a way that it allows the ma- chine learning algorithms to analyse the data. Preprocessing can include any process that involves data manipulation before the correlation process (using machine learning or any other algorithm), and task- specific, as the architecture of the neural networks can be tailored for detection (of any type), classification (detection and attack identifica- tion), or clustering. For example, it can include data cleaning and refinement (filtering, reducing, reshaping, encoding, etc), handling missing attributes, imbalanced dataset and elimination of noise or

The revision of the selected academic publications revealed a wide variety of diverse preprocessing methods, that need to be summarized and classified for effective use in intrusion detection. The way in which the input data is pre-processed (cleaned, reduced, reshaped, encoded, etc.) significantly influences and affects the performance of the machine learning techniques employed to detect code injection attacks. For example, some of the features in the data set may be random in nature and corrupt the output results, or, similarly, may be more impactful and introduce biases.

It is worth noting that pretreatment does not involve any trans- formation of the data values. In specific cases some steps of pretreatment might be repeated after the feature-based and encoding-based pre- processing as well. For example, in the cases when the data cleaning (pretreatment), and its further encoding (preprocessing), produce du- plicates, those have to be removed again (pretreatment).

Dong et al. (Y [11]. mention data normalisation, that may reduce the number of samples, by techniques, such as decoding the ASCII charac- ters, transforming to lowercase, un-escaping, removing queries whose length is less than four symbols, etc. After such normalisation, the initially different queries may become identical, as the distinguishing items were removed. However, transformation like this might be irre- versible. For example, Valeur et al. [23] replace certain values in the query white spaces. When queries with different values but similar structures are pretreated using this method, they become similar or even duplicates. With an approach like this it may be impossible to backtrack the event record and identify the origin or condition of the attack.

Deep learning is considered to be the most advanced technique and effective against the sophisticated attacks and constantly evolving attack vectors [29]. One of the earliest attempts to specifically detect code injection attacks (specifically SQL injections) using deep learning was AMNESIA, a method developed in 2005 by Halfond and Orso [19]. The entire preprocessing was similar to the one used by Gould et al. [62], except the use of NDFAs in AMNESIA instead of DFAs.

dataset by mapping the IP address. The mapped IP includes the Source IP Address (Src IP) as well as the Destination IP Address (Dst IP). As IP addresses cannot be processed by any classifier without pretreatment, they are converted either to a decimal format, or to assigned relevant ID numbers.

As an example of a successful data preprocessing, Dong et al. (Y [11]. use the logs (6.11 Gb) where during pretreatment, that included cleaning, normalisation, and filtering, the data effectively reduced in volume by 4 times while ensuring its high quality. Another example of a complete data preprocessing is the above-mentioned CICIDS 2017 dataset, which is reduced from 50 Gb of pcap files to less than 1 Gb csv file with all the features describing bidirectional traffic flow.

Dussel et al. [24] introduced a payload-based anomaly detection method through adding structural information from a protocol analyser, with the detection of SQL and PHP code injection attacks. The goal of that particular research was to analyse the network traffic based on the grammatical characteristics of an underlying protocol.

computation complexity without affecting the prediction accuracy in the classification process. In their work, the Chi-squared scored function is used to rank the top 5000 hashing features in descending order to return the most appropriate labels to improve the SQLIA prediction accuracy. Yan et al. [26] extract all JavaScript code written by developers (JavaScript libraries like JQuery are excluded) in the application to

It is worth mentioning beyond the scope of our research, that before the pretreatment stage the collected data has to go through a quality check and proofing. Ehrlinger et al. [66] identified 667 tools to evaluate the data quality and composed a review of ways to measure data quality, clean it, and monitor.

Shuffling the dataset in an uneven manner would result in a biased statistics, similar to the bias in an unbalanced dataset training. Furthermore, splitting dataset 50/50 as compared to 80/20 in an un- balanced way may increase that bias. For example, if the training dataset contains only non-malicious samples, the model will not be able to detect malicious samples during the testing phase.

Tomar et al. [3] use feature selection for dimensionality reduction using two methods: feature ranking and feature subset selection. They propose feature selection using four different approaches - filter method, wrapper method, embedded method, and hybrid method, while also presenting comparative characteristics of these four methods.

Yan et al. [26] presented a Hybrid Deep Learning Network (HDLN), a more efficient model, based on the approach by Xiao et al. (X [72]. In addition to the already existing features in the dataset, Xiao et al. suggest to extracts the new features from the Abstract Syntax Tree of JavaScript in hybrid applications through the feature space generation and feature selection.

The feature selection process can be manual or automated. Manually they can be selected via trial and error, while automatically, the features can be selected using Recursive Feature Elimination, LassoCV, etc. In 2019 [36], proposed a deep learning approach as a viable strategy to design a mobile traffic classifiers based on automatically-extracted fea- tures, able to cope with the encrypted traffic, and reflecting their com- plex traffic patterns. For example:

With the features already extracted and dimensionally reduced (e.g., using principle component analysis, Kmeans clustering, etc.), a smaller neural network can be used, to analyse the patterns faster, without the need to detect any new features. For example [67], use the principal component analysis (PCA) as a form of preprocessing for Support Vector Machines (SVM). With a smaller dataset, the bigger neural networks will not train as effectively due to insufficient samples. The CICIDS2017 dataset contains sessions described in 78 features, however, PCA can reduce the number of values down to 10 (principal components) without a feasible loss in accuracy [63]. Gao et al. [69] use PCA for the experi- ments with NSL-KDD.

Conversion of values like IP addresses can be another cornerstone. The intuitive conversion of IPv4 into a decimal value, and further di- vision by 10 power 10, would not work as intended. For example, 192.168.1.1 would be into 3232235777, and 192.167.1.1 into 3232170241. Once scaled between 0 and 1, those two decimal values are very close to each other, even though they represent different sub- networks, and the neural network may not be able to notice any difference.

The research by Uwagbole et al. [21] uses a combination of data composed of the extracted dictionary wordlist with words and unique SQL tokens extracted from the MSSQL reserved keywords. The dataset items are labelled based on the exhibition of the SQLIA types charac- teristics which are: the presence of the SQL tokens in the injection point, disjointed text, single quotes, semicolons, comments, hex, etc. The data set items labelling is represented in the binary values of 0 (SQL negative) or 1(SQL negative).

There is a variety of methods on the network data visualisation, that can be used to generate static images, and then further use various automated tools (e.g., imgaug22, AutoAugment [4], K-correct [5]) and image augmentation techniques presented in the surveys by Shorten and Khoshgoftaar [76] and Mikolajckzyk and Grochowski [77] to further improve the detection rates.

Translation of natural language into commands, images, lines of code, and samples for the dataset has been researched since the early days of programming languages. To illustrate the mechanism in the context of the survey, we have studied the SQL query as an example. The approach of the natural language translation into SQL queries can be potentially abused by attackers to bypass filtering.

ing. Liang et al. [82] used masking for symbolic parsing by storing key-variable pairs in the memory. Masking presented by Cai et al. [25] supports more complex operations, covering both short-term and long-term dependencies. Moreover, the authors emphasize that the grammar structure of SQL is known to be more complicated than the logical forms used in semantic parsing.

It is our understanding that to ensure maximum efficiency the full preprocessing cycle should be respected. This cycle is suggested based on our previous research in the respective area [27]. To maximise the performance efficiency of machine learning for the code injection detection, we propose six stages of Pretreatment, three stages of Feature-based preprocessing, and three stages of Encoding-based pre- processing. This approach, however, can be also applied to all other cyber security methods in general. Revealing the present inconsistencies and to harmonise the preprocessing methodology, we map the existing approaches against our proposed classification to identify the gaps.

As per the assessment, Feature-based preprocessing is the most rep- resented stage. Feature extraction is mentioned in 100% of the analysed works, while shuffling of the dataset is the least mentioned substage. Cleaning, Unification, and Encoding Transformation are mentioned in 85% of the methods, followed closely by Feature Engineering in 80%. The remaining stages and substages are mentioned in less than a half of the analysed publications.

Based on the selected academic publications, the survey explored the existing approaches to the applications of machine learning for the detection of code injection attacks, with special attention to deep learning. We identified at least 13 different methods of code injection detection using various types of machine learning. Deep learning is observed being the most used approach.

The stages of machine learning for intrusion detection have been further revised and least researched have been identified. The findings confirm that the scarcity of the datasets remains one of the biggest and most common challenges for the adoption of machine learning in cyber security. The findings also revealed that data preprocessing being one of the most critical stages in machine learning, lacks consistency in the approaches in the context of code injection attack detection.

The suggested classification of a full preprocessing cycle for the code injection detection will result in the harmonisation of the approaches to this stage and will improve the accuracy and performance of the machine-learning-based Intrusion Detection Systems. The proposed consecutive stages of data preprocessing can be further used by machine learning researchers and practitioners for other cyber security needs, such as network traffic analysis and intrusion detection. And finally, the presented classification will allow to better understand the role of deep learning in the code injection attack detection process in machine- learning-based Intrusion Detection Systems.

Raja M Chithik, Munir Ahmed Rabbani M. Combined analysis of support vector machine and principle component analysis for IDS. In: Proceedings of the international conference on communication and electronics systems, ICCES 2016. Institute of Electrical and Electronics Engineers Inc; 2016. https://doi.org/ 10.1109/CESYS.2016.7889868.

