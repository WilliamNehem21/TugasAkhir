This paper examines the process of managing inconsistencies in object-oriented behavioral models by utilizing a previously-developed general approach for consistency management. The authors begin by summarizing prior work in the field of consistency checks, demonstrating a specific problem of consistency through an example. They then delve into the notion of handling inconsistencies, focusing particularly on the use of graph transformations to reconstruct Unified Modeling Language (UML) models from results produced by model checking software.

Previously, the team explored consistent concepts and employed Communicating Sequential Processes (CSP) and the model checker Failures-Divergence Refinement (FDR) as a case study for evaluating consistency conditions. They developed the Consistency Workbench, a tool to aid software engineers in translating UML submodels and setting up consistency checks. This workbench facilitates the creation of rule-based translations from UML models to semantic domains and lets users define consistency checks as workflows. The workbench supports translations from statecharts and collaborations to CSP and performs consistency checks on the stated problem.

Handling inconsistencies involves identifying and dealing with discrepancies in multi-view software development. Various techniques have been devised depending on the languages and abstractions within model-based development. These techniques include both changing and non-changing actions, as well as decisions to either tolerate or resolve an inconsistency. The paper limits its discussion to the identification of these actions, leaving cost and risk evaluation for future work.

Inconsistency management is predicated on the initial detection of inconsistencies through consistency checks, which typically output results in the language of the semantic domain. To support software engineers in resolving these inconsistencies, the concept of back-annotation is introduced. This approach aims to reconstruct a UML model from a CSP trace that indicates the inconsistency, assisting the engineer in handling the discrepancy in the original UML model.

The critical challenge of back-annotation is ensuring the reconstructed information aligns with the original UML model since the initial translation to CSP might involve renaming concepts and omitting details. An adequate approach must be integrated with the original UML to CSP translation process, preserving necessary details for later reconstruction.

The paper proposes a solution where critical aspects needed for reconstructing a UML model from a CSP model are identified during abstraction. These aspects are then mapped into a reconstruction model which assists in generating a back-annotated UML model during the inconsistency handling process.

Further elaboration in the paper addresses the concept of the reconstruction model, designed to save essential information during translation into a semantic domain for later use in back-annotation. The authors discuss how graph transformation techniques with compound rules, previously applied in translating UML models to semantic domains, can also facilitate back-annotation.

Looking ahead, the paper suggests investigating back-annotation for different consistency problems to enhance the transformations available for back-annotation. Ideas include incorporating negative traces and leveraging the extensive set of elements provided by UML. Additionally, the paper outlines goals to incorporate back-annotation techniques into the Consistency Workbench and develop algorithms for user-directed inconsistency resolution.