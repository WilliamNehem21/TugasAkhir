The academic paper under discussion emphasizes that while the functionality of components is key when developing an application, non-functional properties (NFPs) are increasingly important and need to be integrated into the design process early on. NFPs must be considered from the outset to guide component selection, allowing designers to assess the NFPs of the developing system at any point.

Resource specifications such as storage are approximated using predicates, which are value-based, but they hinge on a detailed functional specification denoting the actual implementation. These specifications require a white-box view of the component and need to be provided by the component developer. However, estimating base values for these specifications remains unclear.

The COMPAS project employs a matrix to define import-export relationships between components, showing the likelihood of one method calling another during a given transaction, extracted from system traces. Although this predicts behavior under new workloads, it doesn't adjust the development process to address performance during system construction.

A general component model is used to represent components, which includes declared service interfaces offered by the component and interfaces it imports to realize its own functionality. As the NFPs of components are crucial, the current relation, which doesn't account for method parameters, is to be extended for additional complexity and usefulness.

In the proposed setting, component creators determine which interfaces to import, while adhering to the NFP annotations of both imported and exported interfaces. Response time is explored as an example NFP, with CPU and memory usage as critical resources. These depend on the platform and data type. Simple data types can use value-based specification, while complex types like video must specify key properties.

The COMQUAD project uses an extension of CQML, termed CQML+, to describe component resource demands concerning NFPs. While the focus is on CPU and memory, CQML+ can accommodate a range of resources, depending on the resource manager.

The discussion includes a formal approach to quantifying response times and resource needs, allowing profiles to constrain various NFPs. When calculating system-wide NFPs, it is necessary to consider the response times of all components and their methods, as these will aggregate when methods call each other.

Finally, the paper suggests that while response time is an additive NFP that has been examined, other NFPs with different characteristics may require separate examinations, with the potential for common treatment only among similar NFPs. The authors propose to explore the applicability of their approach to other NFPs in future work.