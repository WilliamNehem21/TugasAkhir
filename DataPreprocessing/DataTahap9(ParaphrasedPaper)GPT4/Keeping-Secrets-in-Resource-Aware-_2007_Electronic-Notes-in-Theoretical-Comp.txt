Component-based software engineering facilitates the reuse, exchange, and even runtime downloading of software modules. However, maintaining confidentiality of sensitive data within a component can be challenging, especially in environments where the component operates alongside potential attackers on the same system, who can observe its resource usage patterns. To address this, we present a framework that allows for the automated assessment of confidentiality within components against an attacker who can interact with the component and scrutinize its consumption of resources.

We introduce a variant of automata, distinct from traditional weighted automata, which imposes costs based on a Q-algebra. This innovation enables a compositional approach to evaluating the resource consumption of components. Timed automata mark transitions with temporal costs, and extensions like priced or weighted timed automata incorporate both clocks for timing and costs associated with states and transitions, demonstrating the complex relationship between costs and time, often leading to problems without a decision procedure. In contrast, our approach permits the concurrent occurrence of multiple actions. Previous research in computer security has dealt with the modeling of an attacker's resource usage during attacks, whereas our focus is on modeling the target system's resource use, which could be exploited by an attacker, a concept closely related to the study of side channel attacks.

The structure of our paper is as follows: we describe our automata model and cost algebra; we then extend the automata to handle value passing and define levels of secrecy for these values; we introduce an automated tool that checks for secrecy; and finally, we conclude.

Our automata include a set of actions that consist of four types: input from a specific domain segment, output, internal actions, and conditional data value comparisons. Applying our tools to these automata, we find that they have non-maximal "value secrecy degrees," indicating that while absolute secrecy is not achieved, the degrees of secrecy prevent the attacker from learning specific details, such as the order of values chosen.