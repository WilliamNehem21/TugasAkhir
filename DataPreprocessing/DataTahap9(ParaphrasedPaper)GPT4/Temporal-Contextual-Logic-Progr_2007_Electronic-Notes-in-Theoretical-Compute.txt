This academic paper discusses the significance of temporal representation and reasoning within both the database and artificial intelligence communities. It presents a temporal extension to Contextual Logic Programming (CxLP), named Temporal Contextual Logic Programming (TCxLP). The extension adopts a reified approach to temporal qualifications, enhancing expressiveness and allowing the capture of the notion of time within a context.

CxLP is a straightforward yet potent language that adds modularity to logic programming. It treats a finite set of Horn clauses with a specific name as a 'unit.' This language contains sets of variables, constants, function symbols, and predicate symbols, as customary, and it includes unit names as well. A unit's name can have different arities (number of arguments), but the arity is often omitted unless needed for clarity. In CxLP, units can be ordered to form 'contexts,' which dictate the visibility of definitions and how computations occur within a set current context.

The authors decided to attach temporal qualifications to units, more specifically, to unit designators, to permit a general approach to temporal information within the language. They differentiate between temporal relations such as fluents (properties that hold continuously over time) and events (which occur at specific points or intervals). The operational semantics of TCxLP encode a theory of temporal incidence, allowing unit designators to act either as fluents or events, depending on whether they must hold in a solid or homogeneous way.

The paper describes the inference rules that define computations in TCxLP and provides examples of how they operate. It highlights the importance of time management in workflow management systems (WFMS), which traditionally have limited temporal capabilities. The authors suggest that their proposed language can facilitate more sophisticated temporal management at both the conceptual and runtime levels, including potential applications in schema evolution and workload balancing among agents.