For software of lesser importance, the process of checking and confirming its quality (validation and verification, V&V) is typically a casual task managed by the developers themselves. However, when it comes to essential or critical systems, rigorous assessment by an external expert is mandated, as professional standards require clear separation between development teams. The reviewer looks at the entire creation process, from system design down to the specific software parts. If any doubts about safety or reliability emerge, the reviewer, who has legal responsibility in case of system failures, can refuse to approve the system.

The paper outlines the structure of the paper itself, discussing a case study of a "voter" in section 2, a software tool called FOCAL in section 3, and how it applies to the development of safe systems in section 4. Section 5 delves into a detailed model of the voter, with conclusions and future research directions in section 6.

Sensors in critical systems can fail in various ways, potentially affected by environmental factors. To counter such transient faults, redundancy is a key defense strategy, where multiple components do the same task so if one fails, the others can continue to operate.

The "voter" is a mechanism that processes the outputs from these redundant components to determine a final, reliable output based on a set of input values and a consistency relation.

FOCAL, the development environment in question, is prototypical in nature and includes advanced language features, with a focus on formal proof verification to build trust in the software's quality. The language supports formal describability and works with external theorem provers, like Zenon, to automate the proof process.

Critical software development follows a stringent V-cycle model, where an independent verification team checks the traceability after each phase, and a separate validation team tests the software. The paper suggests using "species templates" within FOCAL for each stage of the development lifecycle, rather than strictly categorizing them, to facilitate verification without overcomplicating the process.

The paper notes that critical software design should adhere to safety guidelines, considering external constraints from hardware or pre-existing software. FOCAL allows for the integration of external components in the model, but since these are often proprietary ("black boxes"), it can't simply assume they're safe, nor prove their safety, leading to a methodological challenge.

FOCAL is closely tied to the Coq proof assistant, which validates the proofs and increases confidence in the software, allowing the formal verification processes to be automated and preventing errors.

Finally, the paper describes the structure of the "voter" within FOCAL, where the vote function, its requirements, and the necessary conditions for imported components are defined. After ten years, FOCAL is maturing and being rewritten to incorporate improvements, stability, and connections to external tools while ensuring software can be independently assessed.