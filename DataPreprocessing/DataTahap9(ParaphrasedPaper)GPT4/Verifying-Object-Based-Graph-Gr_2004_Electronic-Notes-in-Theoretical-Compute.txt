This academic paper presents a framework to facilitate the development of distributed systems, using OBGG (Object-Based Graph Grammars) as the central formalism. The study involves simulating and verifying the behavior of distributed systems in the presence of failures through the use of OBGG models and tools. It also highlights a code generation process from an OBGG model to Java that can be deployed in real environments.

Key contributions of the paper are:

1. Extension of the property specification: The paper extends OBGG property specifications to consider not only events (rule applications) but also states of objects. This allows for more detailed and relevant system specifications.

2. Graphical counter-examples: The paper introduces a method to generate graphical representations of counter-examples for OBGG models that fail to satisfy certain properties, aiding in understanding verification outputs.

Graph grammars, generalizing Chomsky's grammar to graphs, represent system states as graphs and describe system changes through the application of rules. These rules define how entities respond to messages, involving operations such as changing attribute values, creating objects, or generating new messages. OBGG models transition from one state to another through rule application.

The paper uses the SPIN model checker, which takes specifications in Promela language and uses Linear Temporal Logic (LTL) for property specification. SPIN checks for concurrency errors in systems and generates counter-examples for properties that are violated. In translating OBGG to Promela, objects become processes, messages translate to Promela messages, and rules map to process behaviors. Global variables and atomically updated variables help indicate event-based properties in Promela.

In verifying OBGG models using SPIN, events are treated as rule applications, which simplifies property specification. To handle the lack of state-based property expression, the paper expands the method to include object states using attributes, increasing the scope of verification.

The visualization of distributed system executions is improved by presenting message exchanges and rule applications along a process timeline. This approach helps OBGG users better interpret the results of model verification.

The paper differentiates its work from other literature by providing a level of abstraction compatible with OBGG for both specifying properties and viewing counter-examples. A formal correctness proof of the translation process further distinguishes this work from other literature.

In summary, this paper advances the tools and methods for verifying and simulating OBGG models, providing a formal framework for the development and analysis of distributed systems with an innovative visualization method for counter-examples.