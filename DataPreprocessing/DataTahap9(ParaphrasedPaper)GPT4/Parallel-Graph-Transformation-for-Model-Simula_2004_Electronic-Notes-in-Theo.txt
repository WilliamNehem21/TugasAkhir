The paper discusses an innovative method for modeling and simulating various formal systems by employing graph transformation techniques. Traditional modeling approaches frequently rely on visual diagrams, such as UML for software engineering or function block diagrams for programmable controllers. The authors propose using graph transformation both to convert different modeling formalisms into a common semantic framework and to simulate the resultant models. These formalisms are characterized as visual languages through meta-modeling.

While there are tools like DIAGEN and GenGED that support the definition of visual languages via meta-models and simulate visual models through graph grammars, none offer parallel graph transformation capabilities. The MetaEnv platform is another related technology that defines semantics for visual models and translates them into high-level timed Petri nets using graph grammars, allowing for simulation and translation into C code. In comparison, the ATOM3 system the authors mention differs because it allows for a variable semantic model, as opposed to the fixed model in MetaEnv.

The paper proceeds to cover the following topics:

1. Section 2 provides an overview of parallel graph transformation principles.
2. Section 3 introduces a simulator for timed transition Petri nets, implemented as a parallel graph transformation system.
3. Section 4 outlines how the ATOM3 system has been enhanced to support the definition and use of amalgamated rules.

Parallel graph transformation allows the simultaneous execution of multiple actions on a state represented by a graph. This approach enables the potential for massively parallel execution and employs common subrules to synchronize parallel rule applications. The authors delve into the details of seamlessly representing transitions in timed-transition Petri nets using this technique.

The paper also explains the concept of rule amalgamation and the synchronization of complex parallel operations. In particular, the authors focus on a specific form of synchronization where a set of elementary rules co-occurs within the context of a common subrule.

Finally, the authors conclude by emphasizing the significance of parallel graph grammars for modeling and simulation. This approach enhances traditional graph grammars by facilitating the parallel execution of synchronized elementary rules, which is beneficial for simulating systems where parallel actions occur, such as Petri nets and other discrete event simulation formalisms. Parallel graph transformation also streamlines the process of converting between various modeling formalisms by enabling the embedding of new elements within variable contexts.

The paper suggests that ongoing work at the Madrid group involves applying parallel and distributed graph grammars to model simulation protocols for parallel discrete event systems. Future plans include adapting the techniques to other timed-transition Petri net semantics, various Petri net types, and different discrete event formalisms, and to explore additional covering constructions.