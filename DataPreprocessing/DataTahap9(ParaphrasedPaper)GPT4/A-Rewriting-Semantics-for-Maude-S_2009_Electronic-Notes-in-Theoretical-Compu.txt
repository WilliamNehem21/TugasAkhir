This academic paper discusses a computational framework for strategy-controlled rewriting in a modular setting, advocating for a strict separation between system modules, denoted as 'm', and strategy modules, denoted as 'sm'. Such separation ensures the strictly declarative nature of 'm' is maintained while promoting modularity, allowing for a single 'm' to be paired with various 'sm' for different purposes. Although the language ELAN does not enforce this division, the authors believe that it is possible to adopt this methodology in ELAN module development.

The paper further explores the intricacies of applying strategies to subterms and the handling of rewrite conditions, noting that the language allows for more precise control through the use of specific combinators. These combinators, along with strategy definitions and expressions, form an essential part of the strategy-controlled rewriting approach.

Inside this computational framework, tasks represent the process of applying strategies to terms. Tasks can give rise to new tasks during rewriting. Sets of tasks, solved tasks (represented as 'sol(t)'), and continuations (especially when dealing with conditional rules) are elements of the language syntax that manage the flow of rewriting logic.

The semantics of the rewriting framework are explained, emphasizing that the application of strategies generates tasks, and these tasks are represented as terms which upon rewriting evolve into task sets. Solutions of tasks are expressed as terms that have reached a solved state.

Lastly, the paper suggests that reflective properties of rewriting logic could be leveraged by using rewriting logic itself to implement transformations from rewrite theories to rewrite theories. It points out that a meta-level implementation, such as in the full Maude extension of Maude, could facilitate the creation and execution of such transformations. This meta-level approach would involve using meta-level operations for matching and rewriting, allowing for a powerful and flexible way to handle nonconditional rule applications and manage matching results that emerge from different contexts and structural axioms within state terms.