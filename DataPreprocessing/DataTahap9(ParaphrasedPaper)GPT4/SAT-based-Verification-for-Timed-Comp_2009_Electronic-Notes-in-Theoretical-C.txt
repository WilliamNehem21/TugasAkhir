In this paper, the authors introduce a SAT-based method for bounded model checking of Timed Constraint Automata (TCA). Their method embeds the process of model checking into the framework of propositional logic with linear arithmetic to address the state explosion problem often encountered with large systems. The authors improve the efficiency of model checking by integrating counterexample guided abstraction refinement with Craig interpolants into their approach.

The paper also discusses the importance of correctly coordinating actions in component-based software engineering, especially regarding real-time systems where timing is critical. Since components often function as black boxes, proper timing is managed by connectors that are aware of time constraints.

Standard model checking techniques for real-time systems suffer from the limitations imposed by the state explosion issue, particularly with TCA due to the exponential increase in states when combining multiple TCAs. To tackle this, the authors present a method for parallel composition that scales linearly with the size of the system. Advanced SAT solvers are utilized to focus only on relevant parts of the state space for a given safety property, based on a linear arithmetic and propositional encoding strategy that has been effective with finite state systems.

The paper extends existing methods to create a new abstraction refinement process tailored to the infinite state space of real-time systems, while maintaining correctness in verification. In practice, the authors upgraded the CA editor in the Eclipse Coordination Tools, allowing for the creation and editing of TCA models and their translation into propositional formulas for analysis via the MathSAT solver.

After reviewing related work, the authors delve into TCA and bounded model checking details, offer a logical representation with linear arithmetic, and present soundness results. They discuss uniform abstraction, refine abstractions using counterexamples, and outline future directions for their research.

In contrast to other approaches that rely on selecting predicates or work with finite state programs, this paper's approach is suited to infinite state model checking and leverages SAT-based bounded model checking specifically designed for use with TCA.

The authors conclude by expressing their framework's potential to not only improve our understanding of timed coordination in component-based systems but also to facilitate verification of connectors. Future plans include integrating features into the Eclipse Coordination Tools that would allow visualizing the results of abstractions as TCA, and using the framework within a testing environment to support both white and black box testing of Reo networks.