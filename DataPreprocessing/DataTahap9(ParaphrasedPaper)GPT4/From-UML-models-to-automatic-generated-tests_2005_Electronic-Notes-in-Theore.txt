The paper discusses the necessity of evaluating not only the graphical user interfaces but also the contents of web pages that are created dynamically. The authors contribute by proposing an approach to address these challenges and present a new method for testing web applications.

While there exists an extension of the Unified Modeling Language (UML) for web applications, it is primarily focused on design. The authors seek to improve upon this by creating diagrams that offer the requisite details for their testing needs, drawing inspiration from established practices. Another key contribution of the paper is outlining the techniques and tools employed in component and conformance testing.

In the context of the .LRN platform, the paper describes three principal types of portals: user, class, and community. User portals are individual spaces for users, while class and community portals house content pertinent to respective classes or communities. Each portal type has four main sections: the main space, calendar, files, and control panel. Within these portals, pages are constituted by portletsâ€”minor portals with specific functions like forums or news.

User portals are automatically created for each new .LRN user, whereas class and community portals are established by a site-wide administrator based on user requirements. Administrators appointed for these portals are responsible for adding content, customizing layout, and determining portal policy.

The paper emphasizes the importance of navigation maps for web applications, as they detail the dynamic contents and interconnections among the web pages, crucial for HTML page parsing. These navigation maps are presented as class diagrams where each web page is represented as a class and links as associations between the classes.

For parsing UML diagrams, the authors suggest using the Application Programming Interface (API) of a UML tool or exporting diagrams in XML Metadata Interchange (XMI) format for parsing with an XML parser. Choosing to use XMI allows them to avoid dependency on a specific UML tool.

Given XMI's complexity, they opted for a specialized XMI parser, specifically the one from the System Modeling Workbench tool, which is open-source, written in Python, and thus easily integrated into their code. This choice also provided the flexibility to solve compatibility issues encountered with XMI files from the Poseidon tool.

Finally, the paper describes a testing methodology based on specific objectives, selected with input from experts and designers. These tests, based on user cases, aim to cover all significant aspects of system behavior. While the authors acknowledge that absolute error coverage is unattainable, they assert that it is achievable for the tests they have chosen.