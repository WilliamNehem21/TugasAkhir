In this paper, the authors introduce jdc, a novel specification language created to aid in the design phase of distributed components amidst increasing demands for asynchronous operation. The language emphasizes data flow to facilitate understanding and management of inter-component synchronizations driven by a data-oriented synchronization model. Jdc is formalized to enable constructive approaches, like the generation of behavioral models suitable for model checking and the creation of control flow code skeletons for components.

The work targets systems of distributed components communicating via asynchronous method calls with futures within the Grid Component Model (GCM), a framework for grid computing developed by CoreGRID. GCM extends the Fractal component model's hierarchical structure and separation of concerns to support scalable deployment over numerous nodes.

The authors contrast their approach with existing formalisms like STSLib, highlighting their focus on service invocations and synchronization via futures. The goal is to offer programmers a high-level abstraction closely aligned with their programming model.

Jdc allows the specification of systems, verification of their correctness, and thereafter the generation of Java code skeletons that comply with the specifications. This process relies on PNETs as the underlying formalism for interfacing with model checkers.

The paper's structure consists of sections that discuss jdc's foundations, how to describe and compose components, defining black-box behaviors, specifying user-type abstractions, and generating both behavioral models and code skeletons.

The authors dive into the nuances of the GCM, including interface relationships, data abstractions, and control-flow implications. They also describe the tools for developing abstractions and how to characterize effective abstractions.

Furthermore, the paper addresses tool architecture and features for validating designs, integrating with eclipse, and interfacing with GCM runtime components. It also delves into collective interfaces within the GCM, offering synchronizations and distribution functionalities.

In the latter sections, the paper presents a custom graphical editor built as an eclipse plug-in for the GCM, discussing functional and non-functional specifications, validation, and ADL generation features.

Finally, the authors touch on future work and enhancements to the specification language, aiming to produce components that are safe by construction with solid behavioral guarantees.