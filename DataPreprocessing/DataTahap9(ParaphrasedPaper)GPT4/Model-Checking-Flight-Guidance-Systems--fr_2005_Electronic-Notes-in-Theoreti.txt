The selection of an appropriate model checker for a project remains a complex decision, as there are few comparative studies to guide this choice, leaving the decision to be influenced by anecdotal evidence. The project's success raises questions about whether alternative models could have been more effective. Notably, the distinction between the efficacy of symbolic versus explicit model checking is not well-defined, although it's generally suggested that symbolic is better for synchronous, hardware-like systems, and explicit is more suitable for asynchronous systems with multiple communicating processes. However, evidence is mixed, and direct comparisons between the two techniques are challenging.

In the specific context of a Flight Guidance System (FGS) with both active and passive modes, which exhibits both synchronous and asynchronous behaviors, the choice between model-checking approaches is not straightforward. The paper proceeds to compare symbolic and explicit model checking, describing motivations related to FGS model checking and outlining performance data of different translation approaches to the SPIN model. The paper concludes with a discussion of the results.

Eisner and Peled’s investigation into the most suitable model-checking technique for different systems—particularly, the symbolic model checker RuleBase and the explicit model checker SPIN—challenged the notion that explicit model checking is superior for software verification with communicating processes.

The use of macros in RSML-e specifications simplifies the complex logic expressions, enhancing model checking usability. Despite symbolic model checking's power, its exhaustive search approach hits limitations, while explicit model checking offers more flexibility with potential trade-offs between exhaustiveness and efficient handling of large state-spaces.

The researchers explored automating the verification process of FGS using SPIN and translating RSML-e to SPIN's input language. Initial attempts at direct translation for model checking were inefficient, prompting a more modular approach involving message passing and macro modification, leading to promising results.

In translating to SPIN's input language, Promela, certain issues were encountered, such as the necessity to explicitly model the environment and define non-deterministic inputs, alongside challenges in imposing constraints within Promela.

Verification tests consumed substantial memory and highlighted the need for optimization to manage the large number of variables contributing to state-space explosion. A goal of the research was to develop systematic modification and automation approaches that practitioners can implement.

The experiment indicated that SPIN underperformed compared to NuSMV on a synchronous FGS model but was potentially more scalable for asynchronous systems, with the possibility of future optimization. Despite the results, the authors reserve judgment on performance differences due to factors like unsound outcomes from bit-state hashing and modeler-dependent levels of optimization.

In summary, the paper acknowledges the challenges in choosing the optimal model-checking technique for complex systems with both synchronous and asynchronous elements, and it explores the performance of explicit model checking using SPIN in verifying an FGS. The findings suggest that while initial performance may favor a symbolic approach, explicit model checking may still be viable with sufficient optimization and knowledge.