Graphs are central to most visual languages, serving as a structured representation of a system's states, components, and their connections. System changes are captured through transformation rules. This graph-based modeling approach offers clarity for formal analysis and is accessible to non-experts due to its visual nature. 

Despite the power of graph transformation systems (GTSs), there has been limited exploration into enhancing GTSs with transactional capabilities. Conceptually, a transaction involves a set of events that either successfully update the system or fail, discarding any partial effects to restore the initial state, often through a rollback mechanism.

Although these concepts were initially developed for Double Pushout (DPO) rewriting in directed graphs, they can be easily adapted to other graph rewriting methods like Single Pushout (SPO) or applied to different graph types, such as hypergraphs, which are demonstrated in Section 4 of the paper.