In Algol 60, call-by-name parameter handling offered an alternative to the typical order of operation, known as innermost evaluation. With call-by-value, the actual parameter's value is calculated just once, then applied throughout the procedure's execution. In contrast, call-by-name parameters lead to evaluation of the actual parameter expression each time the parameter is used within the procedure, similar to outermost evaluation. However, due to potential changes in variables within the expression between evaluations, results can differ. Algol 60's call-by-name is epitomized by Jensen's Device, which efficiently carries out an expression for varying parameter values, a method proven useful in numerical computations.

It is noteworthy that execution models reliant on backtracking have been largely replaced by more straightforward, declarative approaches. For string matching, the contemporary preference is for declarative syntax definitions and parser generation technologies. In logical programming, more restrained paradigms are explored.

Theorem proving involves establishing axioms and rules to prove or disprove a proposition. The sequence in which proof rules are applied significantly influences problem-solving. This sequence can be represented through a strategy or tactic, which is instrumental for both automatic (guiding the prover) and interactive theorem proving (documenting choices made during user interaction). Additionally, a single proof step may involve complex calculation processes.