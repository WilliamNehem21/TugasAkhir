The paper introduces a new method for developing a graph transformation engine within the context of the EJB3 platform, utilizing EJB QL queries for pattern matching. This involves generating an EJB QL query corresponding to the precondition for each graph transformation rule. The application of a rule includes phases for pattern matching and updating, which are handled in a public method of a stateless session bean. This involves first executing the EJB QL query for matching, then altering persistent objects for updating.

Section 3 provides a summary of EJB3 and its query language, while Section 4 outlines how to translate graph transformation rule preconditions into EJB QL queries. Section 5 discusses related work, and Section 6 concludes the paper.

The paper details the structure of a search graph used in pattern matching and describes how to process to-one and to-many navigation edges within the graph. It also illustrates how entity bean classes are generated based on a metamodel with object-relational mapping rules and discusses handling type constraints and injectivity constraints.

The implementation maps graph transformation rules to methods within a stateless session bean, which executes the query, retrieves the necessary objects and links, and manipulates the persistent objects. Although the updating phase details are not discussed as they rely on previously presented techniques.

Initial experiments suggest the approach can manage large models efficiently with acceptable performance trade-offs. Future work includes further testing to validate expected performance improvements and memory savings and exploring the balance between portability and performance when enabling database-specific optimizations.