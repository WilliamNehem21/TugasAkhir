Merging is a technique used to combine two pre-sorted lists into one sorted list, and it's traditionally employed in sorting large databases. This method balances the cost of high-speed internal memory (RAM) with slower, less expensive external storage like magnetic disks, particularly when RAM costs are a concern. Merging was originally developed as an external sorting mechanism to concatenate multiple ordered lists into one on an external storage device.

The discussed algorithm works in episodes, each with two phases. In the first phase, it generates a number of sorted subarrays. During this phase, elements from the initial array are distributed into these subarrays in a specific order, ensuring that identical elements either go into the same subarray in the order they appeared in the original array, or into different subarrays, with the subarray containing the first element being earlier in order than the one with the second. The second phase employs an 'm-way-merge' technique to combine these sorted subarrays and produce a single sorted array. With subsequent episodes, the procedure for the two phases remains consistent with the approach taken in the initial episode, maintaining the ordering of sorted elements across the m subarrays.

Performance in external memory sorting is often constrained by the input/output (I/O) operations, as the disk I/O throughput is considerably lower than that of main memory. To optimize performance, the system must minimize disk read and write operations, a necessity when dealing with files too large to be held in RAM. In the implementation under discussion, the sorting of the input file is accomplished in two passes, involving reading from and writing to the disk during each pass.