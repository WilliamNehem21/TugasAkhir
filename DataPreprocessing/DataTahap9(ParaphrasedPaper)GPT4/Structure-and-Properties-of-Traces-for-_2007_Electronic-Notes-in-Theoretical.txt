The paper describes "HAT", a tool that records a detailed trace of a Haskell program's execution called the "Augmented Redex Trail" (ART). This trace assists with comprehending and debugging Haskell programs by providing a graphical representation of program execution that can be analyzed in different ways.

Tracing is imperative for debugging, checking consistency, reverse engineering, or learning programming, as it reveals the internal workings of a computation. Unlike black-box views of computation, tracing helps identify where a program's actual behavior differs from expected behavior.

The HAT tool transforms a Haskell program into another Haskell program that generates an ART during execution. This tracing process also includes various specialized Haskell constructs, making the manual analysis of even simple computations quite complex.

The ART is explained through its roots in graph rewriting implementations. The paper provides both informal and formal descriptions of ART with an emphasis on its inductive construction, which enables simple proofs of its properties. It's shown that ARTs are acyclic and independent of any particular evaluation order. Although HAT's rewriting deviates slightly from actual implementations, non-determinism is accommodated, making ART applicable across different reduction strategies.

Several simple properties of ART are listed, valuable both for understanding ART's structure and practical checking. Formal semantics have been sketched elsewhere, but the definitions provided in this paper are intended to make formal reasoning more straightforward.

The paper suggests that while the current definition of ART handles non-termination and incorrect results, runtime errors stemming from pattern match failures or built-in function issues are not fully modeled.

Looking to the future, the authors plan to study essential properties of various computational views based on ART and verify correctness proofs for these methods, with a special focus on debugging techniques.