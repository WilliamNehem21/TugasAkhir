In our research, we examine interactive systems through discrete models, focusing specifically on the observable behaviors of components at their interfaces, rather than their internal workings. To this end, we have developed an automata-based language for defining a component's external behavior. This framework captures the sequence of a component's operations and its external interactions. Importantly, our approach includes modeling the component's environment, allowing for the composition of two components when there exists an environment that meets both of their assumptions. This perspective aligns with a generally optimistic view.

Our previous efforts concentrated on a formal component model that facilitated analysis of general component properties and their interactions. In this work, we progress by introducing a class of automata that accurately generates the elements within our model, pushing the model towards greater automation and potential tool support.

We postulate that two behaviors, u and v, can occur independently if they utilize distinct component interfaces. However, we note that such independence doesn't inherently imply concurrent execution. This is elaborated upon in our definition.

The notation we propose bridges the gap between our model and traditional software design methods, drawing parallels with UML 2.0 state machines and their concept of compound transitions. Our approach formalizes a scenario similar to a 'fork' in UML, where a compound transition's initial state splits into multiple independent states.

Moreover, we explore the connection between local concurrency in individual components and the global concurrency of a composed system. We demonstrate that independent behaviors u, v in a composite automaton are independent if, and only if, their corresponding projections onto individual automata are also independent.

Our ongoing research includes examining how well our automata-based composition approach preserves certain desirable properties, such as normality, when creating composite systems. Initial findings are promising. An unexpected result of investigating composition from an automata standpoint is the potential to relax compatibility conditions that usually ensure normality is maintained during component composition.