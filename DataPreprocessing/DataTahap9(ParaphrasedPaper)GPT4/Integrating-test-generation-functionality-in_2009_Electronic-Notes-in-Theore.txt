We propose a new tool called the "Quiz Generator" as an enhancement to the existing Teaching Machine project to assist instructors in effortlessly creating assessment quizzes in the realm of algorithms and data structures. This tool integrates visualization techniques and capitalizes on updated features of the Teaching Machine that support third-party visualizer plug-ins and advanced scripting functions. Thanks to these updates, we have already conceived various quiz types that can be used for any algorithm or data structure for which visualizer plug-ins are obtainable.

In devising new tests, we aimed to maintain a low difficulty level for instructors; we concentrated on developing multiple-choice quizzes specifically, although we have created a broad selection of quiz types. Our strategy involves incorporating quiz generation facilities into the current Teaching Machine and WebWriter++ framework. The Teaching Machine, a program animation tool for demonstrating the execution of Java or C++ code, includes compilers for both languages and an interpreted runtime on a didactic computer model. This model showcases elements of the actual machine (like physical memory and fetch-execute cycles), the compiler (such as expression parsing), and the memory manager (with a stack, static memory, and a heap). It has been updated to accommodate any visualizer plug-ins and is usable as both an applet and a standalone application. WebWriter++ is a compact authoring tool created in JavaScript, enabling creators of educational web content to concentrate on material over technology and offer additional automated features.

The article outlines the five types of quizzes integrated into our framework and discusses the enhancements to the Teaching Machine and WebWriter++ necessary for the Quiz Generator's development. These improvements mainly include a new plug-in architecture and improved scripting capabilities. A sample test is depicted, along with explanations of how the enhanced features of both tools assist in the visualization and evaluation of the quiz. We also review related research and conclude by contemplating the potential use of the Quiz Generator as a formal testing instrument in addition to self-assessment.

The supported quiz question types employ visualizer plug-ins to generate visual representations of both the input and the output. This capability is the result of an extensive overhaul of the Teaching Machine conducted between 2006-2007, allowing the creation of third-party plug-ins. An essential development is a visualization adapter that enables rapid creation of new visualizers by skilled developers within one to three days.

A richer set of embedded scripting controls was essential for the Quiz Generator compared to what WebWriter++ required. Our learning web pages can show code snippets for discussion, permit students to engage with the Teaching Machine to execute, edit, or observe a related video about the code. However, crafting quizzes demands more advanced functionalities.

An example of a quiz could involve presenting an unsorted, randomly populated array based on instructor parameters and asking students to identify the sorting algorithm applied after a certain number of passes, given a partially sorted version of the array and a list of possible algorithms.

Finally, this paper is situated at the "responding level" of the learner engagement taxonomy, aiming to mitigate challenges faced by instructors as stated in other literature by employing visualization techniques and merging new quiz developments into a unified framework with WebWriter++ and the Teaching Machine. Other research discussed relates to the development of interactive prediction tools and tool-independent strategies for web-based learning.