The "d-clean" system expands upon the Clean programming language by allowing for distributed computing across clusters. It enables coordination of functional programming tasks within a cluster using a specialized language designed for managing computational nodes, which can also integrate with other programming languages.

At its core, the system leverages an intermediate language called "d-box," which is based on Petri nets. Each 'box' in this language computes a function that represents a node within a distributed computation graph. These boxes, compiled as Clean programs, interact through a network of channels, adhering to predefined communication protocols.

The channels' input and output coordination is controlled by coordination primitives that produce dataflows on predetermined output channels. These primitives' signatures are determined by the types of input and output channels, influenced by the underlying Clean expressions.

Within the distributed system, entities created by the "mkfunbox" operation work in parallel, and this operation signals that the primitive will reside in the computational node of its designated box. Communication takes place through channels using established protocols.

The "ddivide" function within the system includes a "dfun" expression, which is responsible for splitting incoming dataflows. This action is based on a divider function, and, following the split, it distributes these dataflows across various computational threads, each carrying separate tasks. Significantly, while the input dataflow uses a single channel, the outputs utilize multiple channels, all sharing the same dataflow type.

Past research on parallel and distributed computations in Clean has been documented in two PhD theses. One thesis focused on testing Clean programs on parallel supercomputers, while the other concentrated on evaluating function segments concurrently within a single computer using parallel evaluation annotations. The current d-clean approach stands out due to its concentration on running separate Clean programs over different computers in a cluster.

Two significant research books discuss the concept of 'skeletons'â€”patterns for functional programming. The first discusses practical applications of these skeletons, and the second takes a more theoretical stance. However, neither book addresses the concept of distributed skeleton applications within clusters, which is a central feature of the d-clean system.

Further discussion on parallel dataflow issues and comparisons of implementation approaches are provided elsewhere. The d-clean system's approach to dataflow programming stands out due to its complexity, utilizing two layers of coordination languages for dataflow manipulation, supported by middleware services.

The paper also references work on "JoCaml," a language for concurrent, distributed, and mobile programming, as discussed in a book on advanced functional programming edited by Johan Jeuring and Simon Peyton Jones, which includes revised lectures from the 4th International School on Advanced Functional Programming, held in 2002 in Oxford and published by Springer in the Lecture Notes in Computer Science series (LNCS 2638).