In this academic paper, the authors examine the circumstances that determine the existence of the smallest bisimulation within set inclusion. They present a methodology for eliminating superfluous pairs from a bisimulation and introduce the trait of conciseness in process graphs, which is essential for the presence of the smallest bisimulations using the discussed method.

To address the problem, the authors propose the concept of concise graphs. When a graph G is concise, one can construct the smallest bisimulation between G and any bisimilar graph H (even if H is not concise). Starting with any bisimulation R between G and H, they show how to remove certain pairs to achieve a bisimulation with a defined transition structure.

They define access paths and reachable nodes within a graph G and show that for a concise graph G, the maximal labeled transition system on the bisimulation R satisfies certain conditions and is the largest structure of this type.

Several theorems are presented, including one that establishes that if either G or H is concise, and if a process graph S has functional bisimulations with both G and H, then the smallest bisimulation R uniquely corresponds to the reachable parts of G and H through S. Another theorem posits that if G is concise and H is a forest structure (each node has at most one access path), then the smallest bisimulation R between G and H partially maps from H to G, covering all reachable nodes in H.

The paper further discusses different categories of process graphs, noting that the concise graphs form a full subcategory. It also touches on the process of combining bisimilar process graphs into a coproduct, pointing out that conciseness is key to this construction; otherwise, the coproduct may fail.

The authors also discuss how each process graph G can generate a bisimilar concise graph H through a reflective subcategory relationship, an operation akin to closure operators in partial orders, but through a quotient rather than an enlargement.

Conciseness plays a practical role in verifying concurrent system specifications, as these often yield smaller state graphs that allow for the identification of conciseness more easily, paving the way for proofs on system properties.

The paper concludes by acknowledging open questions, such as looking for a general necessary and sufficient condition for the existence of the smallest bisimulations beyond reachable parts, and explores the applications of conciseness in models of parallel computation and weak bisimulations.