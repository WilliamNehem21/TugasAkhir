Below is a paraphrased summary of the provided text:

This academic paper discusses how a fundamental participant, or "basic actor," must adhere to a given role's abstract interface to gain association with that role. Actors holding memberships in roles, known as "role member actors," are basic actors associated with one or more roles. "Role actors" are specialized coordination actors handling the coordination tasks within a group of role member actors, and there could be multiple role actors for each role. These role actors may also act as inputs for another kind of coordination actor, the "coordinator actor," which coordinates interactions between different roles by using role actors as parameters without maintaining detailed knowledge about individual role member actors.

The distribution of coordination responsibilities among basic actors, role actors, and coordinator actors is the focus of this paper. It introduces the "ARC" programming model and the corresponding ARC programming language (ARC-PL). The work is detailed over several sections, each addressing different aspects such as related coordination models, local coordination syntax, intra-role coordination, and inter-role coordination. The conclusion points toward the future work, and an appendix provides the formal syntax and operational semantics for ARC-PL.

Coordination has been subject to research for many years, with models categorized as either data-driven, where coordination is endogenously integrated with computing entities, or control-driven, wherein coordination is exogenous and separate from such entities. The ARC model takes a unique approach by distinctly separating intra-role and inter-role coordination, assigning coordination based on roles.

An example of intra-role coordination in the ARC model would be the management of a GUI selection list in which only one item may be selected at any given time, with selecting a new item causing previous selections to be deselected. This mechanism is achieved through the role actor implementing state-based coordination policies, which can change over time.

Role actors are multifaceted, acting both as basic actors—exchanging messages for role membership—and as meta actors—reacting to event-driven messages affecting themselves or their coordinated role member actors. They process events serially and have event handling mechanisms that allow them to react to specific conditions when events are triggered.

The paper then discusses sending messages through dispatch statements, highlighting the distinction between ARC's coordination actors from other constructs which only address existing messages from basic actors. The ARC model takes care that the coordination actors' message-sending is in response to events and does not start unsolicited computation processes.

The membership to a role is explicitly communicated through messages between a basic actor and a role actor. The paper stresses the importance of atomically processing role membership and integrating this capability within a basic actor's extended finite state machine (EFSM) through specific join and exit messages.

Further, an actor can be a member of several roles at once, but to avoid conflicts where roles have overlapping event triggers, ARC-PL prohibits conflicting role memberships, requiring any overlaps to be resolved by defining a composite role.

Finally, the paper explains that coordinator actors play a significant part in system scalability by not retaining specific knowledge of individual role member actors. Instead, they utilize queries with call/return semantics for coordination, which are implicitly provided by each coordinated role actor.