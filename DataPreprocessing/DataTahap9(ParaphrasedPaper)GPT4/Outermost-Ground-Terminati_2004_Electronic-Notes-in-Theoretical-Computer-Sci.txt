We present a semi-automatic method for proving the termination of outermost rewriting in ground term algebras. Our approach involves an innovative use of abstraction to represent the normalization of subterms and narrowing to represent the potential reductions of ground terms. Unlike traditional methods, our process does not require a predefined inductive ordering; instead, the ordering is determined through the resolution of constraints that emerge during the proof process. This technique is particularly effective for systems that are not terminating under standard or lazy evaluation strategies.

In the realm of term rewriting systems, evaluating queries through rewriting ground expressions poses a challenge that demands specialized termination-proof techniques, especially under certain reduction strategies. While limited results exist for strategies like innermost strategy, context-sensitive rewriting, and local strategies, our method contributes to this niche by relying on induction to ensure termination of every element within a set of terms, without necessitating a predefined Noetherian ordering.

Our semi-automatic process alternatively utilizes narrowing and abstraction with the ultimate goal of proving outermost termination of a Term Rewriting System (TRS). The procedure can conclude successfully, fail, or continue indefinitely, with the latter two cases yielding no definitive answer on termination. Constraints solving is flexible and can be handled internally, manually, or by external automatic solvers.

Proof trees simulated by each derivation tree start from a generic term and evolve through an interplay between narrowing (which captures all outermost rewriting possibilities) and abstraction (which represents normalization under outermost strategy). Nodes in the proof trees consist of a current term with variables and a constraint representing ground substitutions accumulated from narrowing steps.

The termination procedure can result in three outcomes: success when the strategy terminates with no applicable rules, failure when no rules apply yet non-terminating terms remain, or indefinite continuation when an infinite application of rules occurs.

For automation, the satisfaction of ordering constraints is crucial. In many cases, this is straightforward due to the constraints merely reflecting the subterm relationship, which is inherently satisfied by simplification orderings. In other cases, an ordering constraint solver like CiME may be utilized.

Reference:
M. Clavel, S. Eker, P. Lincoln, and J. Meseguer have contributed to the understanding of Maude principles through their work presented at the 1st International Workshop on Rewriting Logic and its Applications.