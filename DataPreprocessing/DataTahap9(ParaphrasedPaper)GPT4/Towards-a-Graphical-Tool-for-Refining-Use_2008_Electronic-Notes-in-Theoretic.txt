The paper discusses a repository designed for collecting common property specification patterns used when verifying concurrent and reactive systems. These specification patterns are characterized by different scopes to define the context in which the pattern is applicable. Specifically, the paper identifies five primary scope types: global (pertaining to the entire program execution), before (up to a specified event), after (following a specified event), between (any execution segment delimited by two events), and after-until (similar to 'between' but inclusive of executions where the second event may not happen).

Patterns are grouped based on the types of system behaviors they characterize. There are two principal categories: occurrence patterns and order patterns. Occurrence patterns are subdivided into absence, universality, existence, and bounded existence patterns. Order patterns are divided into precedence, response, chain precedence, and chain response patterns. Detailed classification is not provided in the paper; instead, references are given.

Additionally, the paper elucidates how to design a user interface with interactive elements and dialog trees that allow users to define property specification scenarios dynamically through decision-making. There is also mention of research that has developed methods to convert Object Constraint Language (OCL) specifications into natural language. Unlike the described approach, which helps to generate formal specifications from user input, this research facilitates understanding of OCL by translating it for users unfamiliar with the formal language.