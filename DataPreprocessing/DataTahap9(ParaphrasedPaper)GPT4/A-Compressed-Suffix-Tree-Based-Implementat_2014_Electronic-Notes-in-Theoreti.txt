Suffix arrays were developed as a more space-efficient method for string processing than suffix trees, but they only represent the leaves of a suffix tree in sorted order. To improve suffix arrays, longest common prefix (LCP) information can be added, which implicitly represents the structure of the corresponding suffix tree. With LCP and particular navigation abilities, a suffix array can fully substitute a suffix tree.

The paper evaluates two indexes: first, an uncompressed suffix array with LCP information determined using a specific method; second, a compressed suffix tree (CST) developed by the Succinct Data Structures group at the University of Helsinki.

The paper's structure includes: basic concepts in Section 2, compressed suffix arrays and LCP in Section 3, compressed suffix trees in Section 4, related work in Section 5, experimental results in Section 6, and conclusions and future work in Section 7.

Kasai et al. presented an O(n) technique for calculating LCP information in connection with suffix arrays. Abouelhoda et al. explored various applications of suffix arrays combined with LCP information, demonstrating that suffix trees can be replaced with LCP-enhanced suffix arrays without increasing time complexity. Puglisi et al. classified suffix array construction algorithms.

Although the time it takes to build these arrays is significant, it's less critical for applications where the index is constructed only once. An example is DNA sequence mapping, where the genome index is built once to align many DNA fragments.