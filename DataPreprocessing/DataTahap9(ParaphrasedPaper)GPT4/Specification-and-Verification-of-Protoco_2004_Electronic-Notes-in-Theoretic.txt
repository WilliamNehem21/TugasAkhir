The paper tackles the challenge of specifying and verifying security protocols that incorporate temporal elements explicitly within their descriptions. The authors propose a novel specification formalism, where each protocol participant is represented by a state-transition graph annotated with trigger/action clauses. This formalism allows for translating protocol specifications into timed automata, enabling the use of established model-checking techniques to validate security properties, which can be articulated in either linear or branching, untimed or timed, temporal logics. A non-repudiation protocol involving two parties serves as an illustrative example throughout the paper, demonstrating the application of the framework in verifying the protocol's fairness propertyâ€”essentially confirming that at no point can one participant unfairly benefit over the other.

The paper addresses the inadequacy of previous techniques that overlook timing information's importance, such as delays or timeouts, in the correctness of cryptographic protocols and abstracts away low-level timing details like timestamps and channel delivery durations.

Unlike other approaches that use timed automata for specifying and proving real-time system security properties, this paper introduces timed automata not as the primary specification language but as a front-end to a security protocol-specific language, similar to a timed process algebra but with distinct time treatment (discrete vs. continuous) and verification techniques.

A well-known non-repudiation protocol is provided as a practical application. In this protocol, Alice sends a message to Bob, guaranteeing that by the protocol's end, neither can falsely claim not to have sent or received the message as there would be sufficient evidence to prove otherwise.

The remainder of the paper is structured as follows:

1. The Zhou and Gollmann non-repudiation protocol is revisited.
2. The authors present their specification language, resulting in modified timed automata (MTAs) for the example protocol.
3. The translation process into timed automata is described.
4. They conclude with the verification of the fairness property, ensuring no participant has an unfair advantage at any protocol stage.
5. Lastly, they provide some conclusions.

The protocol's fairness may be compromised by a faulty communication channel or a participant not adhering to the protocol rules. The paper assumes a resilient communication channel and illustrates the protocol's principle: splitting the message into a commitment and a key, both sent to Bob and a trusted third party (TTP), which can be recovered in disputes.

Further, it defines an algebra to express structured messages, encompassing cryptographic primitives and temporal constraints, and clarifies how messages with certain conditions like private key requirements can be unified.

In summary, the paper introduces a graphical specification formalism offering two benefits: a specification language that closely resembles the protocol designer's style, and the ability to automatically translate protocols into timed automata for verification using model checking.