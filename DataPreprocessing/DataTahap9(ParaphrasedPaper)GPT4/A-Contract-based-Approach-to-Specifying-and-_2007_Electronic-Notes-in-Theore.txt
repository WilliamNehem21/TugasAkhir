The paper presents an approach for formal specification and verification of component-based safety-critical systems, leveraging the UML 2.0 superstructure. It outlines a process for ensuring the correctness of static structures through type checking and dynamic behavior verification by examining component cooperation. These components' interactions are modeled using Interface Protocol State Machines (IPSMs) and Contract Automata.

Software's critical role in systems like avionics and nuclear power controllers is acknowledged, emphasizing the demand for high-reliability development methods given their real-time, dynamic, and fault-tolerant nature. The paper underscores the importance of specifying dynamic interfaces and supporting composition and refinement in the development of these systems.

The paper describes a formalization process that models static structures and temporal constraints of safety-critical systems. It introduces stateful and stateless operation concepts in contracts and studies static and dynamic consistency rules for component integration. Furthermore, it details how to specify environments for dynamic contracts and check refinement consistency in both top-down and bottom-up development.

Following a review of related work, the paper outlines the formal specifications for component structure, proposes static consistencies, examines the dynamic contract and its consistency, and explores refinement relationships among components. Despite certain limitations, such as not considering real-time properties, the paper contributes a lightweight formal method tailored for both composition and refinement in line with the UML 2.0 component model.

The proposed approach seeks to narrow the gap between formal methods and UML, a widely-used modeling language. The authors have applied their method to the development of a safety-critical system called SAFE-II, showing promising usability results and providing a rigorous development framework.

Future work includes model checking for safety-critical systems, improving scalability through compositional reasoning, and integrating real-time models and performance interfaces into specifications and verification efforts.