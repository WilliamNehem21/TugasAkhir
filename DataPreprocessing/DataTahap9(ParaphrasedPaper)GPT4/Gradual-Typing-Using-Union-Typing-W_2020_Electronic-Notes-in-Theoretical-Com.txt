Programming languages are often categorized based on their typing systems, with static and dynamic typing at opposite ends of the spectrum. However, there are additional typing classifications that blend characteristics from both static and dynamic typing, such as hybrid typing and gradual typing. Gradual typing, in particular, allows programmers the flexibility to employ aspects of both static and dynamic typing to leverage their respective benefits.

In dynamically typed languages like Racket, Scheme, or Lisp, an identity function might be written as (lambda (x) x), without specifying the type of x. The type is only resolved at runtime. Gradual typing systems, on the other hand, aim to define a type for such functions that would represent the concept of run-time typing at compile-time, introducing a notion of type consistency.

Toro and Tanter have developed a meta-theory which ensures safe language extension into a gradually typed system, incorporating gradual union types and an unknown type denoted as "?". This approach uses the Abstract Gradual Typing (AGT) framework, relying on abstract interpretation—originally introduced by Cousot and Cousot—which models computations in a different universe while preserving semantics.

This paper presents an extension of a functional language to incorporate records - data structures that group together fields with potentially different types. The extension uses gradual union types to maintain safety properties. A key contribution of the work is providing a deeper understanding of the AGT abstract behind the methodology proposed by Toro and Tanter.

They adopt a Gradual Union Typing (GUT) approach, allowing for both disjoint (tagged) union types and untagged unions within the same language. This mixed approach is known as optimistic type checking, which assumes that all terms can be assigned a type statically, without explicit projection or case analysis.

Disjoint union types, also known as tagged unions (T1 + T2), encapsulate values of distinct types, with each value tagged to indicate its type. This explicit tagging allows the type system to verify the type of elements during both compile and execution time.

Expanding on the AGT methodology, Toro and Tanter outline static semantics for a gradual typed functional language, utilizing gradual unions and unknown typing. Gradual union types are designed to limit imprecise types to a finite set of static types, based on a simply-typed functional language (STFL), which is statically typed.

This paper extends Toro and Tanter's GUT with records—a data structure that contains fields, each with a distinct type. Programming languages often utilize records to define new types, leading to an extension of the language itself. Incorporating records enhances the theoretical foundation for programming languages, allowing the creation of composite types and providing a more powerful and flexible language system.

Related works by Garcia, Clark, and Tanter involve extending a type system with records using subtyping and formalizing a consistency relation in a gradual typing language, following the methodology by Siek and Taha. This paper, in contrast, focuses on gradual union types within a statically formalized system, with plans for further exploration of dynamic semantics in future research. The objective is to achieve a gradual typing system that incorporates records via a 'threesome calculus' for dynamic semantics.