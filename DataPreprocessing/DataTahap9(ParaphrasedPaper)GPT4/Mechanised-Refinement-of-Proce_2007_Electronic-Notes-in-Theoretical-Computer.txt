In this article, the authors introduce an improved version of REFINE, an educational software application designed to assist with the refinement process in software development. The initial iteration of REFINE was limited in its development management capabilities and did not support the inclusion of procedures and recursion in the programming languages it covered. The updated tool now includes these features and focuses on enhancing the refinement calculus method.

The paper is structured into five sections. Section 2 provides an overview of the refinement calculus, including an explanation of the laws of procedures and recursion. Section 3 introduces the updated REFINE tool, while Section 4 explains how the laws for procedures and recursion were incorporated into the tool. Section 5 briefly describes related work and anticipates future improvements.

During the refinement process in software development, a program is incrementally transformed by applying various refinement laws, sometimes generating proof obligations to ensure the correctness of the transformation. The authors discuss how specifications are written using preconditions for the desired initial state and postconditions for the final state, along with a frame to specify which variables can be modified.

An example given is a program that calculates the inverse square root of a positive number, which is incrementally developed by applying refinement laws and introducing blocks of code such as procedures. The authors highlight the importance of refinement management, which includes saving and loading development progress, as well as tracking proof obligations alongside the laws that generated them.

In addition to its refinement guidance, REFINE can gather code to facilitate the application of procedure-related laws and support the refinement of non-visible program parts. The tool also helps automate recursive procedure development, demonstrating this capability through examples involving square root calculation and factorial evaluation.

The revised version of REFINE has shown its effectiveness in educational settings over four years, with promising results as a learning tool. It has been developed in Java, with a sizable codebase and provides UML documentation, a tutorial, and example developments. In addition to REFINE, an extension called Gabriel has been added, enabling the creation and use of refinement tactics, which document and streamline common law applications.

Overall, REFINE stands as a valuable tool in teaching the principles of refinement calculus, with the new version significantly extending its utility by incorporating procedures and recursion, fundamental concepts in modern software development.