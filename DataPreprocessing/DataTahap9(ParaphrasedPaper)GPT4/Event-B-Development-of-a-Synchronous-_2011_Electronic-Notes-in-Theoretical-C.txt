The paper outlines the process of modeling the semantics of a selected portion of the Architecture Description Language (AADL) using Event-B, a formal method for system-level analysis and design. The approach involves gradually adding semantics to the Event-B model, ensuring that formal representations can be traced back to informal specifications. The analysis begins with a generic computational model and incrementally incorporates AADL elements, culminating in the incorporation of scheduling behavior.

The objective is to verify that the scheduler defined in the final model refinement complies with the properties specified as invariants in the earlier stages. Essentially, the goal is to ensure that the scheduler adheres to the semantics of the chosen AADL subset. Another aim is to systematically integrate AADL semantics into the model to constrain and define the computational framework progressively.

The model is structured around two types of machines: context machines, which define the static structure and are iteratively refined to introduce more detail (like connection types), and behavioral machines, which add dynamic elements like the contents and evolution of node ports.

In this system, nodes are defined to have multiple input ports and a single output port. The authors describe how connections work and the computational function associated with each node. Complex axioms relating to the computational functions are explained, highlighting their dependence on input port values and the conditions under which they can be applied.

The paper discusses how the dynamic state of the system is mapped by the data flowing through the input ports and the computations performed by the nodes. Operations portray the progression of this data, and certain scenarios—such as nodes waiting for missing input data—are described in detail.

Dispatch events are introduced, with a focus on how nodes are processed and how data is handled depending on the type of connections (immediate or delayed). Refinement of the model allows redefinition of these events to accommodate the specific states and interactions of nodes.

The scheduler is introduced toward the end of the refinement process with axiomatic definitions, implying that it could be represented by various concrete scheduling algorithms. This leads to suggestions for future work, such as considering specific algorithms, optimizing memory use, incorporating timing to account for task periodicity, and ensuring that the system can be scheduled under the assumption that computations occur instantaneously.

The paper concludes by asserting the value of using refinement to incrementally define semantics for AADL, as opposed to translation-based methods. Using the Rodin platform, the paper confirms that all necessary proofs have been verified, with some requiring manual intervention. To enhance this work, the paper suggests introducing timing information, encoding scheduling models, and examining data structures to facilitate the proof process.