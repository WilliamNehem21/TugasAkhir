Security methods that depend on language to control access and data flow ultimately must employ a policy language to articulate the rules governing these controls. However, selecting the most appropriate policy language can vary with each specific application, and similarly, the method of implementing a policy language can differ depending on context. This paper discusses employing cryptographic libraries at the application level to implement these policy languages. These libraries provide interfaces with security guarantees that help in verifying the correctness of the policy language's implementation.

Cryptographic libraries are often used to enforce implicit security policies during data exchange, though these policies are usually informal or not explicitly stated. By formally specifying these policies in a formal policy language, it is possible to automatically verify compliance with these policies.

A method called language-based security integrates the policy language within the type system of a programming language. When types are checked (typechecking), this also verifies that data is handled correctly according to the security policies. These policies are then linked to the cryptographic libraries securing communication over networks, through typed application programming interfaces (APIs) that define the security guarantees of these operations, such as encryption for confidentiality and digital signatures for integrity.

The paper discusses an example of a policy language implemented as a library, demonstrating that implementing policy languages through libraries is practical since it is unrealistic to expect a universal policy language or implementation to suit all applications. Types are utilized to ensure the proper structure of values and can include complex data types for organizing data.

The difference is highlighted between a certificate type, denoting the verification of a policy statement, and a value-level representation of a policy statement that only checks for structure, not truthfulness. The paper adds a construct for principals in a policy language and examines how to generate and verify basic policy statements.

The concept of delegation comes under scrutiny, especially regarding the cost and complexity of managing credential chains. Role-based cascaded delegation (RBCD) is discussed as a more efficient alternative, combining role-based access control with cascaded delegation.

For security, credentials must be protected against alteration during transmission. Therefore, the paper proposes using both cleartext and encrypted credentials in a format that ensures the integrity of the transmitted information.

A novel approach to ensure both signing and authentication while preserving some privacy during the credential chain checking is described. The process avoids disclosing the identity of signatories beyond the first one in the chain.

Finally, the paper acknowledges certain limitations in the presented approach. The cryptographic operations are treated as secure, without considering potential vulnerabilities in the cryptographic algorithms or network protocols. The approach may also complicate security protocol verification. Despite these challenges, the authors believe competent developers could adopt the approach and are in the process of implementing it to validate this belief.