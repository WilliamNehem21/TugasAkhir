We utilize the Eli tool to automatically generate semantic support for various projects, allowing us to bypass the manual creation of document models and analysis typically required in other sophisticated language support projects within the Eclipse ecosystem. Section 5 offers a brief overview of how this semantic support functions.

The PLD compiler is designed to process programs written in a language resembling Modula, known as Mystery, along with a given semantic framework. The compiler's output is a Java program tailored to function within the defined semantic parameters. It is important to note that due to the variable nature of the semantics, many checks that would usually occur at compile-time are instead performed during runtime. However, this complexity is not exposed to the students who use the system.

In past research, we created the Noosa tool, which allows for advanced execution monitoring of compilers built with Eli. Noosa enables us to understand the operation of a compiler by focusing on high-level concepts such as basic symbols, phrases, or syntax tree nodes, circumventing the need to delve deep into the actual coding of the compiler. For instance, when developing specifications for lexical analysis, compiler developers work primarily with regular expressions. Noosa provides a mechanism that shows which portions of the input text correspond to specific regular expressions. Similarly, in constructing a parser, developers specify a context-free grammar and wish to see how grammar productions match parts of the input text, not the intricate workings of the parser itself.

We have created an Eclipse plugin based on Noosa that facilitates an environment (Noosa perspective) and offers a suite of views to access critical compiler runtime information, such as the token stream, phrase structure, or syntax tree. Initially, this plugin is geared towards compilers manually written in Java, but we plan to extend its capabilities with Eli integration.