This paper discusses the limitation of testing in ensuring software quality for distributed and concurrent systems written in Java, particularly those that are multithreaded. Instead, it highlights that verification techniques, like model checking, offer higher confidence by automatically verifying complex systems' properties. The focus of the paper is on applying model checking to a subset of multithreaded Java programs using a tool based on selective mu-calculus logic for checking systems described with the CCS (Calculus of Communicating Systems) specification language.

The main content of the paper is as follows:

1. Introduction to CCS and selective mu-calculus. CCS is a language for specifying concurrent and distributed systems, while selective mu-calculus is a branching temporal logic used to express behavioral properties of systems, which helps to manage the state explosion issue common in model checking.
2. Description of the methodology for transforming multithreaded Java programs into CCS specifications.
3. Presentation of the CCS reduction tool's capability to automatically eliminate irrelevant actions for the property being checked, enhancing existing techniques to mitigate state explosion.
4. Application of the approach to a simple synchronization problem to demonstrate model reduction.
5. A discussion on the results and comparison with related work in the field.

The paper proposes a source-to-source translation approach, converting Java program code into CCS specifications, and then applying a reduction algorithm based on selective mu-calculus logic. This methodology is integrated with an existing model checking environment (CWB-NC) and associated tools to implement the reduction algorithm and translate selective formulae into mu-calculus expressions. This approach facilitates the detection of errors, especially in concurrent programs, and offers a cost-effective alternative to traditional testing by using a reduced model of the program's behavior for verification purposes.