The paper presents the development of a new scheduler type called "strongly distributed schedulers," designed to restrict the level of nondeterminism when multiple system components are executing. The authors compare this new class to existing concepts and demonstrate its significance in handling worst-case probabilities in systems with limited inter-component communication, such as distributed systems and security protocols.

The key observation is that in scenarios where components have restricted information sharing, certain system behaviors, like reaching a target state, should ideally occur with maximum probability despite the limited knowledge each component has of the others.

Addressing nondeterminism involving the order of component execution, previous literature didn't account for varying interleavings, while the new approach does, realistically constraining the behavior of distributed schedulers. Here, nondeterministic choices within a distributed setting require not only output schedulers to select generative transitions but also input schedulers to choose reactive transitions based on the local historyâ€”an approach the authors enforce through the concept of projection.

The authors suggest that some believe restricting schedulers to have a finite memory could potentially bypass the undecidability of model checking in distributed settings, though they argue that the specific memory amount necessary for accurate worst-case value approximation cannot be predetermined. Furthermore, nondeterministic schedulers prove to be superior to deterministic ones with the same memory limitation, and it is NP-hard to calculate the worst possible outcome among all Markovian distributed schedulers.

The paper concludes that probabilistic model checking remains undecidable with distributed schedulers, even when limited to those with finite memory. The difficulty of accurately approximating probabilities with deterministic schedulers with bounded memory underlines the complexity of decision-making in these systems. The discussion includes a scenario involving an NP-hard problem, suggesting the computational intractiveness of such tasks, highlighting the challenges in creating effective and realistic schedulers for complex systems.