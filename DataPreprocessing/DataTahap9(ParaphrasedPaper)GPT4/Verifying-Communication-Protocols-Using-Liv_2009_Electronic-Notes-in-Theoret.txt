The academic paper discusses the trend in System on Chip (SoC) design where development relies increasingly on integrating third-party Intellectual Property (IP) cores. This heterogeneous integration necessitates multiple communication protocols, complicating system verification to ensure correct functionality and compliance with specifications. This verification is critical for vendors entering new markets.

The paper is structured into six sections where:

1. Section 2 reviews related work on Live Sequence Charts (LSCs) and their use in verification.
2. Section 3 describes LSC constructs with a detailed example.
3. Section 4 provides an overview of translating LSCs into automata.
4. Section 5 demonstrates a case study with verification results using the Bounded Virtual Component Interface (BVCI) LSC specification.
5. Section 6 concludes the paper.

LSCs have proven effective in modeling and specifying behaviors in complex systems, including SoC communication protocols. However, verification against LSC specifications has challenges. The paper looks at two primary verification methods: one uses temporal logic with limitations due to scalability issues; the other converts LSCs into automata for language containment-based verification techniques, supporting larger specifications but lacking certain constructs like subcharts or Kleene stars.

The paper proposes an extension to the automaton translation method to support the full LSC grammar, addressing constructs such as subcharts, hierarchical charts, and Kleene stars. It details various LSC elements like locations, messages, conditions, coregions, and delayed choice semantics. The latter is key to reducing non-determinism in specifications. Verification uses LSCs as specifications, detecting accepting cycles by composing the system automaton with the negative automaton of the LSC.

The approach extends to handle complex constructs and enable verification against specifications with enhanced features. A case study using the BVCI protocol showcases translating additional LSC constructs into a negative automaton and verifying Promela models against the LSC specification. Results demonstrate the utility of LSCs for writing specifications useful in formal verification and as a modeling language in early development stages. The paper includes a reference to work by Bontemps, Heymans, and Kugler on applying LSCs to an air traffic control system.