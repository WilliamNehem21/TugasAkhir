The paper presents a method for fully verifying complex temporal properties in large-scale RTL (Register-Transfer Level) designs using a technique known as windowed induction. This technique is an enhancement to bounded model checking that allows for the unbounded verification of safety properties. Prior methods struggled with these temporal properties, but the authors have introduced "explicit induction" to address this challenge. Explicit induction integrates the induction process into the specification, making it more accessible and manageable, using a language like Forspec.

The authors illustrate how they implemented explicit induction with only minor changes to the existing tools (Forspec compiler and the Thunder model checker). They explain how explicit induction's theoretical completeness stems from the property Q describing the reachable states of a system M, which is a simpler approach than other methods.

Windowed induction involves lengthening the verification window or strengthening the property Q to solidify the induction hypothesis. This method, compared to traditional induction, often allows for simpler hypotheses and can deal with very large models by considering only one-step paths, as opposed to bounded model checking, which must evaluate much longer paths.

The authors discuss the necessity of tool support for implementing induction checks and describe how Forspec is equipped to express explicit induction proofs. They emphasize the inherent flexibility of their methodology in selecting window sizes for different induction hypotheses. Through iterative experimentation, users can find an optimal window size, thereby managing complexity while seeking counterexamples for debugging purposes.

Lastly, the paper shares the authors' experience in verifying Intel's Pentium 4 lock protocol, detailing the iterative process of strengthening the induction hypothesis based on failures from previous attempts. Their model contained about 12,000 state elements, and most verification efforts took between three to six person-months with reasonable computational requirements.

The paper acknowledges the ongoing research efforts in automating induction proofs; however, due to the complexity of the proofs in their work, they believe user involvement is critical for identifying the correct induction invariants.