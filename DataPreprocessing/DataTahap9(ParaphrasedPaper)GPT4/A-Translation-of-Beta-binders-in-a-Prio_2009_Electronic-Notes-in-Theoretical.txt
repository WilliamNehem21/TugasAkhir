This article introduces a method for transforming beta-binders, a computational model inspired by biological cells, into the language pi@. Beta-binders simulate enclosed computational processes, a feature not directly present in pi@, which is a variant of pi-calculus. In pi@, computation steps are prioritized, and channel names can be complex structures.

The paper is structured in the following way: Section 2 and Section 3 review the original language (beta-binders) and the target language (pi@), respectively. Section 4 discusses the specific rules and steps of the translation, including its operational correspondence. Finally, the paper concludes with remarks in Section 5.

Operational semantics for beta-binders are defined through axioms and rules presented in Table 2. This is a partial representation of the complete transition system, which also includes mechanisms for merging and separating computational 'boxes.' These actions are semantic rather than syntactic—meaning they're not represented by any specific command in the language—and thus are not directly handled by the translation process.

The details of the translation are fully listed in Table 4, and the paper explains the encoding process incrementally, focusing on key design decisions and gradually refining the presentation until it matches the final definition in Table 4.

It is further explained that shared private names, such as ‘g,’ are used as identifiers for computational boxes, allowing the simulation of global communications in pi@. The actual use of the encoding facilitates certain actions, such as hiding or revealing parts of a computation.

The paper presents a theorem (Theorem 4.3) that asserts any computational step in beta-binders may lead to either a 'rollback' in the process or the encoding of a process that is equivalent to a single step in beta-binders, up to structural congruence. Additionally, it points out that if a rollback occurs, the need for a garbage collection axiom is eliminated.