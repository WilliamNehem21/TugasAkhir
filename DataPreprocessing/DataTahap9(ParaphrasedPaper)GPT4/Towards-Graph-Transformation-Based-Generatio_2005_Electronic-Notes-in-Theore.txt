Visual language techniques are crucial for developing software systems, often requiring custom visual notations and corresponding tool environments such as visual editors and simulators. Various methods, including meta-modeling, grammar-based approaches, and logic, exist for generating these tool environments. This paper focuses on generators that use graph transformation techniques, like Diagen, AToM3, and GenGED, to create precise visual modeling languages and their environments. It also examines the Eclipse development environment, which supports the development of graphical editors with plug-ins like EMF, Draw2D, and GEF.

Utilizing graph transformation for defining visual languages (VLs) involves specifying a graph grammar that details the visual alphabet and syntax through a type graph and graph rules, with additional attributes for layout. These graph grammars can define VL syntax to generate visual editors.

Visual editor development can harness Eclipse technology, which includes the Eclipse Modeling Framework (EMF) that generates the foundational models for visual editors from EMF class diagrams into Java classes. However, these classes require manual extension for complete VL descriptions, involving additional syntax checks and hand-coded editors based on GEF.

The paper introduces a new tool environment, TIGER (Transformation-based Generation of Modeling Environments), which merges the formal VL specifications of graph transformation methods with Eclipse's graphical editor features. TIGER utilizes the AGG engine's graph transformation following a double-pushout approach to generate environment components based on formal graph transformation specifications for different modeling purposes.

The structure of the paper starts with a comparison of visual editor development through graph transformation and Eclipse/GEF. TIGER's goals and architecture are outlined, followed by the first development steps, emphasizing graph-like diagram editors for VLs with an example of Petri nets. The paper concludes with future development prospects for TIGER.

While graph transformation-based editor generators offer formal VL specifications superior to meta-model-based approaches like EMF, the tiger.generator and tiger.vlspec packages are the core of the TIGER tool, allowing VL specification design and the generation of various environment components. TIGER-generated modeling environments are Eclipse plug-ins and can integrate into the Eclipse framework.

A sample Petri net editor demonstrates the initial development of TIGER, but it's too early to compare it with other non-graph transformation-based visual modeling environment generators. TIGER aims to extend beyond simple symbol insertion/deletion by allowing complex editing operations through an extended editing grammar for more comprehensive language manipulation.