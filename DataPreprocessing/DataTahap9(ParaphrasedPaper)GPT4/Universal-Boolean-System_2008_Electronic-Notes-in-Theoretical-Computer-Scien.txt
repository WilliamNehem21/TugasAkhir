The academic paper discusses Boolean interaction systems and hard interaction systems which serve as frameworks for defining networks of interacting cells. These systems follow the same local interaction principle as interaction nets, where two cells interact. Unlike in interaction nets, however, the structures of these networks are static, meaning that cells and their links cannot be created or destroyed.

Boolean interaction systems are akin to hardware circuits and utilize an implicit rendezvous mechanism for information exchange. In these systems, communication is restricted to binary data. Hard interaction systems are a specific type of interaction system with rules that enforce structural immutability of the networks. These rules can only affect the symbols of agents and designate which port is principal but cannot alter the actual network architecture.

The paper explores how every hard interaction system can be emulated by a universal Boolean interaction system, acknowledging that the former is not considered universal due to its inability to preserve net structures through rule application. For an interaction to occur in a net, two agents must connect through their principal ports, and an interaction rule dictates the rewrite from this connection to any interaction net conforming to the same interface.

For hard interaction systems, interaction rules must maintain network structure, so only agent symbols and principal ports can be changed. Rules for these systems are further classified as deterministic, where there is at most one rule for each couple of different agents—including self-interactions—and complete, where at least one rule exists for every pair of agents. Deterministic and complete systems guarantee strong confluence in reductions, meaning that any sequence of reductions will lead to the same result.

Additionally, the paper covers the simulation of other logical operations such as OR, NOT, and AND using Boolean agents and interaction rules, stating that functions like NAND and a Boolean duplicator suffice to simulate any Boolean function vector. It also includes a description of a Boolean device that permits or prohibits I/O interaction based on a validation signal and a Boolean interaction controller that repeatedly selects an I/O channel, sends out a Boolean value, and updates its state based on the received input and a transitional function.