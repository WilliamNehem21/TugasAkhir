The paper discusses various task scheduling algorithms such as HEFT, CPOP, CPOC, DLS, MCP, MH, and DCP and reviews a comparative study by Topcuoglu et al., highlighting HEFT's superior performance over CPOP, DLS, and MH, and comparable results between CPOP and DLS. It also compares the HEFT algorithm with the HNPD algorithm, noting the latter's integration of list-based scheduling techniques.

Additionally, the paper introduces the LDCP algorithm that uses a new attribute for determining task priorities in Heterogeneous Earliest-Finish-Time Conditionally Stable Schedulers (HEdCSs). The LDCP algorithm's performance is described as being compared with that of the HEFT and DLS algorithms.

The main focus of the paper is on a new algorithm called SNLDD, developed for static task scheduling in HEdCSs with a limited number of processors. SNLDD aims to create high-quality task schedules by dividing a directed acyclic graph (DAG) into levels and sorting tasks within each level by their computational size in descending order. The study shows that SNLDD outperforms LDCP in metrics such as schedule length, speedup, efficiency, and system behavior quality.

The structure of the paper is outlined as follows: Section 2 defines the task scheduling problem and necessary terms. Section 3 presents the LDCP algorithm. Section 4 introduces the newly developed SNLDD algorithm. Section 5 describes the SPOP procedure applied to both LDCP and SNLDD algorithms. Section 6 presents a comparative study between SNLDD and the existing LDCP algorithm. Section 7 concludes the paper.

An important aspect of the LDCP algorithm is the identification of tasks crucial for provisional schedule length and the construction of DAGP for each processor. Zero communication costs are assumed for tasks scheduled on the same processor. The LDCP algorithm is based on computing the longest path and updating the DAG after each task assignment, which involves extensive arithmetic computations.

In contrast, the SNLDD algorithm simplifies the process by dividing the DAG into levels based on dependency conditions and sorting tasks, which makes task prioritization more efficient. The SNLDD algorithm's approach avoids runtime overheads and reduces task assignment complexity compared to LDCP.

A comparative study using two sets of parallel application graphs and the standard benchmark task graph set demonstrated that SNLDD improved performance by 16% in schedule length and 21.3% in speedup, which further increased to 22% in schedule length and 28.6% in speedup after implementing the SPOP procedure over LDCP.