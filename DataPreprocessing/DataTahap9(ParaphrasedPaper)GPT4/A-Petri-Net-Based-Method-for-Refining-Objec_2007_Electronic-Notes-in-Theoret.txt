Over the last twenty years, object-oriented programming has been a dominant force within the field of software engineering. This paradigm views a system as a compound of objects that interact to complete various tasks. An object incorporates both state and behavior and can be assessed from two perspectives: its structural makeup, where objects with shared attributes are organized into classes, and classes with common attributes form an inheritance hierarchy, as well as its behavioral aspect, where objects show varied behaviors during interactions, thus forming different scenarios.

Understanding the behaviors of individual objects from their interactions within a system is challenging due to the varying levels of abstraction involved, a problem that has yet to be systematically addressed in the design of object-oriented systems.

The paper is organized into several sections, detailing the specific methodologies used to address the behavioral aspect of object-oriented systems. Section 2 outlines how object interaction scenarios are represented as labeled nets, followed by the first step of synthesizing these nets. Section 3 discusses the process of removing redundant labels to streamline the resulting net, and in Section 4, the process of deducing individual object behaviors through projection is explained. Concluding remarks are provided in Section 5, with the expectation that readers will have prerequisite knowledge.

In terms of specifics, the paper explores the use of labeled nets to specify object interaction scenarios. It clarifies how events and conditions are depicted within these scenarios and the requirements for events to transpire. The concept of a uniquely labeled subnet is introduced, which has implications for the structural integrity and labeling uniqueness of a net.

The approach involves identifying common subnets to merge and transforming these subnets before fusion, employing colored Petri nets to ensure proper token flow and maintain transition firing capabilities. The added bonus is the ability to analyze important attributes such as safeness and boundedness using established Petri net analysis techniques.

The paper's contribution is a Petri net-based approach to refining object interaction scenarios into individual object behaviors. This method is unambiguous, semantically detailed, and allows the derived specifications to reflect the interactions' intended functionalities. It also facilitates implementation by ensuring specifications have unique, non-duplicate labels and that they can be analyzed for critical system properties using Petri net techniques. The paper demonstrates this approach using an example.