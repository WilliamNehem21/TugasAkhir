Microsoft, as part of its Trustworthy Computing Initiative, has been exploring various methods to bolster reliability in software, focusing particularly on model-based testing. They initially implemented a modeling tool called the Finite State Machine (TMT), which was well-received by numerous testing groups. However, the need for more sophisticated and flexible modeling led to the exploration of the Abstract State Machine Language (ASML) and its accompanying testing tool (ASML/T). These tools have demonstrated a significant improvement in defect detection during the early stages, such as specification and design, while also enhancing structural code coverage of the systems being tested.

Traditional software testing, which concentrates on the software's external behavior, is known as black box testing and has been predominantly a manual process. However, as the complexity of Microsoft's software and its operating environments has increased, there has been a growing need for more efficient design and maintenance of tests. Although many testers use mental models or even document these models, without automation, the advantages of model-based testing cannot be fully realized.

Different methods are used to generate test cases in model-based testing: "directed" generates all possible test cases up to a set number of steps, "shortest path" finds the most efficient route between two specified points, and "all shortest paths" identifies the shortest routes for all possible starting and ending points. Combining these techniques, testers can create test cases that focus on the most critical aspects of the product.

TMT allows for elementary model checking through "assertions," which help ensure the quality of both the model and the specification it is based on. It outputs test cases as XML files and generates an automation template for the tester to then write the necessary automation. TMT became the first tool at Microsoft that facilitated automation in test design rather than just in test execution.

Over 20 teams at Microsoft use TMT, resulting in significant reductions in automation time—up to 88% faster in some cases—and considerable increases in code coverage. For example, a subteam in Shell managed to improve code coverage from 20% to 75% and expand their number of test cases from 75 to about 2000 in just two weeks. During the process of model creation, numerous specification and implementation bugs are discovered.

ASML specifications offer a precise way to describe a computer system, allowing program managers, developers, and testers to gain a unified understanding. Because ASML specifications are executable, they enable evaluation of a design before full system coding, aiding in system design decisions.

The Indigo test team utilized ASML to model several web service standards (WS) specifications, discovering multiple issues more efficiently than traditional design and architecture meetings. For instance, the ASML model identified numerous problems with the specifications of WS-Routing, WS-Policy, and WS-AtomicTransaction that had gone unnoticed or took significantly longer to identify using conventional methods.

During Indigo's early implementation testing of WS extensions, ASML/T parameter generation revealed several critical bugs that traditional testing failed to detect. This highlights the effectiveness of ASML/T in identifying complex defects in the early stages of development, illustrating the strength of model-based testing in improving software reliability and trustworthiness.