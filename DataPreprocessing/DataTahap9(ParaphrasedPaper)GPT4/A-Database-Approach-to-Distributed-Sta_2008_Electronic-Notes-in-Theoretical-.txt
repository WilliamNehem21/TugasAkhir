In this study, distributed explicit state space generation is investigated using a network of workstations in order to address the challenges posed by recursive data types, such as lists and trees, in modelling complex protocols and distributed systems. Traditional partitioning methods that rely on a global hash function prove to be inefficient with recursive data types due to the unbounded nature of these types. To overcome this, a database system is proposed that assigns a global number to state values, allowing workers to exchange indices rather than complex pointer structures.

Tree-compression, a method for recursively folding states, is introduced to reduce memory requirements, representing states with a tree structure where leaves store individual state components and the root represents full states as integer pairs. This technique shows improved efficiency over using uncompressed state vectors.

Several implementations were tested to assess the impact of recursive state folding and the organization of databases, revealing a trade-off between local and global database setups based on network bandwidth and latency. The study also addresses serialization issues, bandwidth reduction through compressed index vector communication, and potential future research directions, including finding an optimal level of state vector compression and adapting the scheme for heterogeneous systems.