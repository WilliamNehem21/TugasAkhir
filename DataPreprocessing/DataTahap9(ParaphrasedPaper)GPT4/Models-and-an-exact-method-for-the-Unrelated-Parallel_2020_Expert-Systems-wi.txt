In the industrial sector, optimizing the allocation of jobs to machines is essential due to the constraints of scheduling and limited resources. The parallel machine scheduling problem (PMS) is a well-examined problem where jobs need to be processed by machines running in parallel. Each job is handled by one machine at a time, and each machine only processes a single job at a time. The "unrelated" scenario is one where processing times vary depending on the machine-job pairing. A real-world example of this problem can be found in a ceramics factory where orders must be distributed among kilns. A common goal is to minimize the makespan, or the maximum job completion time, a problem known to be NP-hard.

Research on the unrelated parallel machine scheduling problem (UPM) often incorporates setup times, making it the UPM with setups (UPMS) version. Advanced mixed integer linear programs (MILPs) have been proposed for UPMS, leading to highly efficient algorithms that can handle large numbers of jobs and machines.

This paper advances an exact algorithm and utilizes recent methodologies to tackle versions of the UPM that consider resource constraints, whether in processing, setups, or shared across both. It's demonstrated that the algorithm is effective for instances with up to 400 jobs and 8 machines, with solutions having less than 2.7% deviation from lower bounds for the largest cases.

While UPM is frequently studied, UPMS attracts less attention in literature. This work references various MILP improvements for UPMS and explores a recent paper by Fanjul-Peyro, Ruiz, & Perea (2019), which presented MILPs that deliver solutions for up to 400 jobs and an exact algorithm based on this MILP that can handle up to 1,000 jobs and 8 machines with a gap of less than 0.8% against lower bounds. 

The paper includes a detailed example with four jobs and two machines, showing how to find optimal solutions for UPMS, including when different types of resources are involved: specific processing resources (p-resources), specific setup resources (s-resources), and unspecific shared resources (h-resources). 

It further discusses the adaptability of the model for more than one resource of each type, along with the computational setup used for experiments on virtual machines and the performance of the proposed models for various instance sizes.

Overall, the proposed MILP models for UPMS are shown to be capable of yielding solutions for complex scheduling problems, particularly as the number of jobs increases, where the solutions are close to optimality. Additionally, the paper hints at the potential of other modeling approaches – temporal approximations versus spatial – for future research on scheduling problems with multiple resource considerations.