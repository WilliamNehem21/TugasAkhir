We present a formal system for the Timed Interval Calculus, a method for denoting time interval properties using set theory. This system is encoded within the Ergo theorem prover, enabling the automated verification of time-related predicates. Such predicates are utilized for the validation of real-time systems.

The verification of real-time systems often utilizes interval-based formalisms. Nevertheless, manually proving their correctness is complex. Automated theorem proving offers a promising solution, yet research in this area has been limited, with notable attempts like the implementation of the Duration Calculus in PVS.

Our research provides a detailed framework for the Timed Interval Calculus (TIC), drawing on prior work by Mahony and Hayes. Several reasoning laws within TIC have proven useful across various system verifications. To facilitate their use in theorem provers, we have precisely characterized these laws within our framework. We've implemented this in the Ergo theorem prover.

Our axioms include one that confirms intervals contain all time points between their endpoints and others that define the closed nature of intervals based on whether endpoints are included.

TIC hinges on the use of functions mapping time domains and time intervals to depict system behavior. For simplicity in the theorem prover, function references are implicit, yet precise definitions are required to prevent ambiguities.

Function lifting is particularly crucial in interval calculus. To assert properties over subintervals, we must ensure the accuracy of predicates containing lifted functions over these ranges. To accomplish this, a new bracket notation is introduced that identifies all instances where functions on intervals are lifted.

We also introduce a quantifier construct within the theorem prover, denoted as !!name. This allows variable binding within a predicate, ensuring no free variables or metavariables exist outside the scope outlined by the quantifier.

The implementation comprises several theory files totaling around 1000 lines of code, with additional domain-specific extensions. These modules manage various aspects of TIC, such as time and interval definitions.

We discuss the nuances of logical unions versus intersections within our calculus. Specifically, universal quantifiers align with conjunctions more naturally than with disjunctions, affecting how predicates distribute over intervals.

Using Law D1, users perform proofs leveraging TIC laws without needing deep knowledge of the underlying axioms, which remain abstracted from the user's purview. Alterations to the axiom system do not impact users as long as the observable laws stay intact.

Acknowledgements are given to Tony Cant, Colin Fidge, Ian Hayes, Brendan Mahony, and Luke Wildman for their valuable input. Colin Fidge is also thanked for suggesting an example for the paper and providing feedback. The research benefited from the support of the Defence Science & Technology Organisation's Information Technology Division and a University of Queensland ECR grant.