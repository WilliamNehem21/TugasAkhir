The traditional methods for modeling interactive systems, which focus on individual interactors, are limited in their ability to seamlessly integrate multiple interactors into a unified model. This paper proposes a different methodology based on the coordination paradigm to better define the relationships among interactors in complex interactive system specifications. The groundwork for this approach is laid out, and an example is provided to illustrate its application. Future research directions are also identified.

Interactive systems are a subset of reactive systems that possess unique characteristics due to the requirement for user interaction. This presents distinct challenges in terms of both modeling and analysis. A critical issue is managing the interaction among various user interface components and the users themselves.

Typically, managing the coordination among interactors involves introducing extra interactors to control communication, which complicates the model even further. The goal is to express coordination logic as simply and naturally as possible. The paper explores using coordination models that are based on previous work by some of the authors.

The coordination paradigm is a method that can be useful in developing complex systems by separating the coordination component from the computational aspects. This separation allows for a system to be described in terms of the externally observable behavior of its components and their interactions, offering a clearer division of tasks between coordination and computations.

An interactor can produce output for both the user and the application, thus its behavior is categorized into external contributions (user-facing appearance) and internal actions (data flow to other interactors or the application). These two types of behaviors are defined by two functions, one for internal and one for external actions.

In models that employ exogenous coordination, such as "or," components are treated as black boxes with interfaces described syntactically, focusing primarily on port names and data type constraints. This concept of interfaces is compatible with the interactor notion, and the paper defines an interface accordingly.

The model discussed includes basic connectors and combinators that can be used to construct more sophisticated connectors for complex coordination and interaction patterns. The paper describes some basic connectors, and more details can be found in the referenced works.

Connectors operate by pairing ports of the same polarity to either aggregate output (right join) or input (left join), allowing for asynchronous or synchronous communication. Though timing issues weren't considered, the connectors ensure if one port is activated, the others must also be activated before new interactions can occur.

Finally, the paper mentions that while main ideas are presented, complete specifications of the examples weren't demonstrated. For a comprehensive understanding, the authors direct readers to additional resources. The paper concludes by noting that it does not address the dynamic aspects of interactive systems, like creating or destroying UI components at runtime. Preliminary work in this area introduced an "orchestrator" connector to manage system dynamics, and this will be an area for future exploration as the authors continue to seek alternative modeling approaches for interactive systems.