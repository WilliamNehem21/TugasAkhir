The academic paper discusses the criteria used to assess the safety of program transformations concerning space complexity, with the key focus on ensuring that such transformations do not increase the complexity of programs. This is essential for compiler optimizations, where the space safety criterion is considered to be a minimal requirement but deemed to be too permissive, particularly when dealing with programs that lack input.

To address this, the authors suggest a different criterion that applies to whole-program transformations, which they deem more appropriate than the loosely defined space safety. They also explore the relationship between local transformations (common in compiler design) and global transformations, showing that certain local transformations can meet the new criterion when extended to the whole program.

To discuss the performance safety of program transformations, the authors introduce the concept of profiling semantics, which is a system to evaluate the performance impact of a transformation on programs. While many transformations are seen as space efficient, there are those that are only space safe, and proving space efficiency requires a detailed understanding of the source language's operational semantics.

The paper also touches on the CPS (Continuation-Passing Style) transformation. It was found that proving the CPS transformation as space efficient required revisions to previously proposed semantics. Moreover, they show that applying local transformations successively in a compiler phase can lead to a space efficient transformation, given that the transformations share a strong improvement relation to one another.

The research has so far focused on stack space efficiency in a simple functional language, but the authors claim that their methods can be adapted to evaluate execution time or heap space. They note the lack of examples of local transformations as weak or semi-strong improvement relations and plan to investigate various optimizations through local transformations that may possess these qualities. They also reference related work by Gustavsson and Sands on space improvement relations in call-by-need languages, which could also be applied to call-by-value languages.