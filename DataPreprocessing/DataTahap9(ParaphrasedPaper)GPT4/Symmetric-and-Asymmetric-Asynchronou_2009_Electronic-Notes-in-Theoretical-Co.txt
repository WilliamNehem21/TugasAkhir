In this study, we explore system classes defined by varying patterns of asynchronous interactions, aiming to achieve distributability, meaning the capability of executing a system across geographically distinct locations without a shared clock. We use Petri nets as our system model, specifically because of the granularity at which they represent concurrent systems and their interactions.

Petri nets provide the necessary detail to distinguish synchronous from asynchronous communications within a concurrent system, facilitating the study of asynchronous communication outside the scope of composition operators. A transition in a Petri net is synchronously engaged with its pre-places, removing tokens instantaneously, which becomes critical when multiple pre-places are involved.

When modeling distributed systems, this inherent notion of synchronous interaction in Petri nets presents a challenge. If a transition across locations represents an activity such as receiving a message, we cannot treat token removal as instantaneous since such interactions take time. We model this by introducing silent (unobservable) transitions between transitions and their pre-places. This transformation yields what we call an asynchronous implementation of the original net.

In various sections of the paper, we characterize the classes of nets arising from symmetric and asymmetric transformations, comparing them to free-choice and extended free-choice net classes. We provide structural bounds for these net classes and demonstrate how they relate to simple and extended simple nets. We conduct this analysis under the premise of 1-safe net systems where a place never has more than one token, and we introduce silent transitions to represent unobservable, asynchronous behavior.

This paper focuses on the implications of different types of asynchronous interactions between transitions and pre-places in Petri nets. We implement these scenarios by adding silent transitions and examine the structural characteristics and limitations that result from such modifications.

In our conclusion, we reference Wolfgang Reisig's work on simple net systems that use buffers for communication, where the differing component speeds do not impact the overall system. Reisig also proposes a decision procedure for identifying a marking that ensures the system's liveness. Our findings are contrasted with similar results in existing literature.