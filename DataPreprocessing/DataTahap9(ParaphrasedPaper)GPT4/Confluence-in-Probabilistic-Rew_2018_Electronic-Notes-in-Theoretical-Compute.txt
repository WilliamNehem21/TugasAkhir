In this paper, we explore the dynamics of interactions within probabilistic computational systems that involve both random choices and various potential paths for computation, a notion referred to as non-determinism. Non-determinism arises when a program contains more than one subexpression that can be probabilistically reduced, leading to multiple possible outcomes based on the reduction path taken. An important question we investigate is whether the overall outcome of such a program—a distribution over various possible results—is consistent regardless of the sequence of reductions, similar to how outcomes are consistent in classical deterministic languages regardless of computation order. We aim to analyze a property that assures this consistency, which can be thought of as a form of confluence adapted for probabilistic contexts.

Prior work has investigated this property in concrete programming languages, but a generalized theoretical framework applicable across different languages has been missing. Previous methods for studying confluence in probabilistic systems are also largely inapplicable to other computational systems and are generally more abstract than what we consider necessary for practical programming scenarios.

In our approach to capturing the unpredictability in probabilistic systems, we must link elements not just to single outcomes but to entire distributions of possible outcomes. Furthermore, we need to account for elements that simultaneously relate to multiple such distributions. This necessity led us to propose a novel definition to accurately represent this complexity.

We consider probabilistic abstract reduction systems (PARS) where computation involves both non-deterministic choices with one operator, which selects among successor distributions, and probabilistic choices with a different operator, which randomly selects from the elements within a given distribution. A computation tree model is used to represent such computations.

Having introduced and justified our definition of confluence in the context of probabilistic systems, the next step is to ensure this property can be practically verified. Thus, we present several criteria designed to facilitate the process of proving confluence, analogous to classical methods but tailored for probabilistic contexts.

(Note: In the paraphrased version, specific symbols such as "(,)" and references to particular operators have been described in a textual manner as their exact representation was not provided.)