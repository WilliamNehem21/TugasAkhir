Graph grammars and parsing techniques are key to defining visual languages (VLs) and building VL editors. These techniques enable the graphical interface to function similarly to an enhanced drawing program, whose front-end is adaptable for different VLs with minimal modifications, except for the definition of permitted VL symbols such as boxes and arrows. Users directly manipulate these symbols to construct diagrams. A VL parser then analyzes these diagrams for correctness and generates an abstract representation for further use.

The inclusion of a parser in a VL editor has significant benefits. It reduces the need to define a comprehensive set of structure-based editing operations, keeping the language-specific components of the editor minimal. This, in turn, allows for the use of an "editor generator" alongside a class library to create editors for complex VLs from succinct syntax descriptions. Diagen is an example of such an editor-generator framework that fuses the VL parsing approach with a transformation-oriented approach, facilitating complex transformations on diagrams described as graph transformations within their internal graph model.

Diagen represents diagrams as labeled hypergraphs comprised of "component" and "relation" edges. Each component edge represents a visual symbol in the diagram, with connectors for interactions with other components. These connectors correspond to nodes in the hypergraph to which component edges are linked. The syntax description specifies geometric relations between connectors, such as containment or intersection, represented as binary relation edges between respective nodes.

In some cases, the abstract syntax graph (ASG) is almost the same as the resulting hypergraph model (RHGM), although RHGM may include additional non-parsable edges or groups of edges that combine to form a single ASG entity. Additionally, for some UML elements with multiple visual representations, different RHGM structures may arise, yet they all stem from the same nonterminal type.

Various approaches exist for generating visual language editors from formal specifications. Approaches like GENGED and KOGGE, which are based on abstract graph models, inherently provide abstract representations. In contrast, tools that do not use abstract internal models, such as Penguins that operate on constraint multiset grammars, lack innate abstract models and must instead explicitly generate external diagram representations through attribute evaluation.