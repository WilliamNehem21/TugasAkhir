We have developed a customized function library that mirrors the names and operations of standard POSIX system calls (such as myfork for fork, myexec for exec, etc.), with the additional capability of producing Graphviz dot language descriptions to visually demonstrate each system call's activity.

To visualize the real-time behavior of a program, we replace the original system calls with our augmented library functions through a simple program or script. This maintains the original system call functionality while adding the benefit of a graphical description of the process.

We structure the comprehensive dot file by breaking it down into numerous files, each growing incrementally in content. The first file contains the first line, the second file includes the first two lines, and so on, such that the ith file represents the first i system calls, with each call corresponding to a line in the dot file.

Our immediate goal is to streamline the workflow of creating and disseminating these graphics. Currently, each phase (from the creation of the original files to their division into segments, the production of visuals, and the publication on webpages) is performed separately and semi-manually. Our next step is to integrate these phases into a single automated process for the swift generation and publication of graphics based on the execution data of a process.

Beyond the technical development, we aim to extend these visualization techniques to other areas of our curriculum that could gain from such supportive explanations. We see potential in applying this to file management, where it can help visualize how data structures evolve when performing each system service. Additionally, we are exploring how to incorporate this approach into teaching other concepts such as concurrent programming or input/output management, although these applications are less straightforward.