A simplified paraphrase of the academic paper:

Nodes within a DORIS segment are connected via a shared channel and can be slow or fast, differentiated by their message-transmission capabilities. While slow nodes exclusively send hard real-time messages, fast nodes can send both hard real-time and best-effort messages. Each node hosts a server overseeing message transmission. Servers at slow nodes manage a queue for hard real-time messages, while servers at fast nodes handle an additional queue for best-effort messages. Despite there being only one server per node, it functions with dual threads - one for each queue type. Local prioritization for scheduling messages from different applications is mentioned but not covered in detail, as this paper solely concentrates on communication processes.

The paper explains that DORIS uses an implicit token passing in its medium access control, which cycles through nodes based on timing or logical conditions. The system employs a pure Time Division Multiple Access (TDMA) method to separate its two types of communication rings. The protocol dynamically includes nodes in the soft ring using a mechanism where elementary messages flag a server’s intent to join. The processing of these messages and transitions between server states follow a set pattern.

Each server tracks received elementary messages through a flags tuple called 'cons' in their 'hardstate' data structure, with entries indicating successful message reception or identifying omissions, hence facilitating failure detection. Receipt of messages and updates to the server's 'hardstate' occur unless a server is specifically excluded from receiving messages ('norecvset'). Detection of protocol deadlocks and maintaining type invariances are automated processes within the system, but the paper focuses on verifying functional properties related to communication isolation and collision avoidance.

Implementation insights were garnered from the protocol specification, but direct application to a Linux-based real-time operating system was challenging due to its complexity. Adjustments were necessary to adapt the protocol functions into the system’s architecture. The paper suggests that the development and formal specification of DORIS underscore the need for more automated methods to integrate specified protocols within complex existing software frameworks, treating DORIS as a case study for future research in this area.