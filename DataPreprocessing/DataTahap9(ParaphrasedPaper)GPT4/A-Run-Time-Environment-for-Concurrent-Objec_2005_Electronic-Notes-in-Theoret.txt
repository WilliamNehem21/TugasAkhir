This paper presents enhancements to concurrency in object-oriented design through a language called Creol. Creol integrates object-oriented approaches with asynchronous method calls and designated points, known as processor release points, within the execution of concurrent objects to control internal flow. Processor release points help minimize the wait time for method call responses in distributed systems and enable objects to switch roles between active and reactive behaviors, such as transitioning from client to server tasks.

Creol uses method argument types like object identifiers (obj) and standard data types such as booleans (bool), and expressions that yield various data results. The language includes variables (var), method names (mtd), and unique method call identifiers (label).

In Creol, the execution flow in concurrent objects can be influenced through explicit processor release points defined in method bodies. These release points use guarded commands, an approach that stems from Dijkstra's work, allowing sections of code to be conditionally executed. When a guard within a nested structure evaluates to false, the current process is paused and queued, releasing the processor for other tasks. This release allows the system to choose another enabled process from the queue to execute.

The 'wait' construct allows for explicitly releasing the processor, while 'reply guards' check for method call responses, critical for further execution. These guards operate atomically, ensuring sequential checks without interference.

Creol's approach differs from future variables since it enables the evaluation of pending processes or new method calls rather than blocking the processor while waiting for responses. However, once a reply is received, the subsequent process must vie with others in the internal process queue to resume execution.

Objects in Creol interact through asynchronous method calls encoded as two messages, reflecting invocation and completion stages. Messages must include the callback address and a unique label to ensure correct message routing between objects with multiple pending calls.

Creol offers three types of guards signifying processor release points: boolean expressions, wait guards, and return guards. These facilitate suspending processes while awaiting method completion, allowing an object to perform other tasks simultaneously.

Many object-oriented languages provide concurrency constructs, often distinguishing between activities (threads) and objects, as seen in languages like Java. Traditional approaches adopt synchronous Remote Procedure Calls (RPCs) requiring blocked calls, which impedes concurrent activities within the calling object. The suggested asynchronous method calls, inspired by the actor model, focus on loose coupling and less synchronization, which is advantageous for distributed programming. While similar to future variables seen in other languages, Creol's nested processor release points offer a more nuanced approach to asynchrony.