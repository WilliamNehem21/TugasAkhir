In this academic paper, the authors introduce an advanced variant of the Earley parsing algorithm designed for efficiently parsing context-free grammars that incorporate regular expressions on their right-hand side. They describe the fundamental state-machine-based algorithm, explain the process of converting grammars into state machines, and discuss the method for reconstructing parsed data. Moreover, they provide a theoretical framework for discussing the algorithm and examining potential optimizations. The authors assess the performance of their algorithm via implementation tests, identifying notable improvements compared to previous methods.

The new parsers have similarities with the Augmented Transition Networks (ATNs) identified by Woods, which are equally capable of directly managing regular right-hand sides and have been applied to Earley parsing before. However, the team introduces a distinct type of finite-state transducer granting them the ability to implement optimizations that enhance performance beyond ATNs. These enhancements echo some of the optimizations found in the Earley parsers by Aycock and Horspool, which do not natively support regular right-hand sides.

The paper outlines the formal connection between grammars and parsing transducers, detailing the specific conditions needed for a transducer to parse the language defined by a grammar. The authors deliver an algorithm to construct a transducer based on a given grammar, and propose a deterministic, Earley-style recognition algorithm built upon these parsing transducers. They prove that this algorithm recognizes the same language as the nondeterministic pushdown algorithm and explain how to adjust the algorithm for parsing and parse reconstruction.

Earley parsing, which is traditionally a top-down parsing method for any context-free language, involves a breadth-first search of every possible leftmost derivation of the input string. The original Earley algorithm's time complexity caps at O(n^3), with O(n^2) performance for unambiguous grammars and potentially linear time for certain grammar types. The newly presented version maintains this O(n^3) complexity.

The paper discusses the process of reconstructing the parse output, mentioning how the updated Earley algorithm generates a parse graph while parsing. Nodes in this graph represent Earley items discovered in sets during parsing, and the directed edges portray the syntax rules utilized. Reconstruction of subtrees happens upon encountering nonterminal links, using recursive calls to a specific function.

Although the Earley graph encapsulates all possible parse trees for input, a more pragmatic representation might be desired. The authors acknowledge that they have created an algorithm for reconstructing a parse forest but leave the full details unexplored due to space constraints, hinting only at the nuances attributable to their use of parsing transducers.