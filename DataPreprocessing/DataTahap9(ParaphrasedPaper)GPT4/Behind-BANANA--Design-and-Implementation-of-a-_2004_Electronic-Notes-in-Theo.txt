In this paper, the Venice team reports on their research into control-flow analysis as part of the MEFISTO project, with a specific focus on identifying potential information leaks in mobile ambient calculusâ€”a modeling language used for mobile computation. The team has developed Banana, a Java-based tool for analyzing ambient nesting, with an emphasis on precise analysis and algorithm optimization.

The paper emphasizes the benefits of static analysis for security, allowing for more efficient verification of security properties and the development of secure programs from the outset. Static techniques have been used in prior research to verify various security properties within different modeling languages.

The team's approach to detecting information leakages adheres to the principles of preventing low-level entities from accessing high-level information (no read up) and preventing high-level entities from leaking information to low-level entities (no write down). They have built upon existing research to refine control flow analysis for this purpose.

The core of their research derives from Nielson et al.'s control flow analysis, which has been enhanced to detect information leakage and implemented within the Banana tool. The paper is structured to cover foundational terminology, previous analyses, algorithms used in Banana, detailed descriptions of the tool, and concludes with final remarks.

Banana features algorithms that significantly reduce the spatial complexity compared to previous techniques. The authors have achieved these improvements through better data structures, an operational approach that bypasses the use of Horn formulas, and a more efficient computation focused only on necessary constraints. This results in no superfluous repetitions and reduces memory demands.

The paper further provides a theoretical framework proving the existence of a least solution for their analysis and describes a method for computing it. It also describes the tool's ability to create an overapproximation of all possible runtime ambient nestings, supporting various control flow analyses. Banana has a post-processing module for interpreting analysis outputs in terms of an information-flow model that identifies when high-level ambients are leaked to untrusted environments.

Users of Banana can select from several algorithm implementations to carry out the analysis, which is then parsed, and the syntax tree is built. The analysis results in an overapproximation of ambient nestings, and the findings are listed in the tool's output console as label pairs.