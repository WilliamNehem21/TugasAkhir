In this section, we introduce basic concepts and notation related to Julia sets, drawing from a comprehensive book which offers further details on Julia sets for rational functions. Additional valuable information can be found in several other resources cited in the paper.

Typically, we use the notation \(f^n\) to represent the \(n\)-th iterate of a function \(f\), while \(f'\) stands for the derivative of \(f\). A complex number \(z\) is termed a fixed point of \(f\) if it satisfies \(f(z) = z\). If \(z\) is a fixed point of an iterate of \(f\), then it is referred to as a periodic point of \(f\). Based on the value of the derivative at \(z\), a fixed point can be categorized as repelling if \(f'(z) > 1\), attracting if \(f'(z) < 1\), or indifferent if \(f'(z) = 1\). Periodic points are classified similarly, depending on the corresponding iterate. A critical point of \(f\) is identified by the condition \(f'(z) = 0\).

The process involves computing preimages of a point \(z_0\), and then iteratively computing preimages of those preimages, while simultaneously identifying a set of open balls \(B(z)\) around points \(z\) in these preimages and a specific index \(n\) that satisfy certain conditions labeled a) through d). 

It is important to note that we can only compute these sets with finite precision. Therefore, the algorithm aims to ensure that conditions a) to d) will be met through appropriate approximations. This is facilitated by Lemma 5.1, which allows for the necessary approximations. Calculation of roots of the function \(q\) may pose another challenge.

The algorithm involves a step where it employs the function `reduce([log2 n(k)|)` and later resolves the reduced problem using an exponentially time-bounded algorithm `reduce(2)`. These steps contribute to a polynomial time-bounded algorithm since the length of the reduced input scales as \(O(\log^2 n(k)) = O(\log^2 k)\), which is significantly shorter than the original input length \(O(k)\). By using `reduce(\log^2 n(k))` in conjunction with this polynomial time-bounded algorithm, the authors achieve the result stated in the paper.