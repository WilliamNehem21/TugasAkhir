A net "n" can be described as a graph that has agents located at its vertices. Each line, or edge, in the graph can link up to two connection points called ports. Ports that do not have connections are considered "free." Within this framework, there are two unique kinds of nets: "wirings," which have no agents, and the "empty net." Free ports can also be located at the ends of wirings and are recognized as part of the net's "interface," which is defined by the collection of free ports.

In particular, there's a structure known as a "case agent" that features a special port at the top called the auxiliary port, which serves the purpose of output. According to an interaction rule, when a case agent encounters a specific constructor (denoted as "c_i"), it establishes a connection between its output port and the selected constructor's matching branch, designated as "branch i." As a result, all other branches are removed. It is a relatively simple process to confirm that this action effectively replicates the behavior of an associated reduction rule. It's important to note that while this setup requires that the constructors' patterns do not overlap with one another (they are "disjoint"), they might not cover every possible case (they can be "nonexhaustive"). Should a case agent connect to a constructor for which no matching branch exists, such an interaction leads to failure.

The paper also describes a scenario that involves compilation, where the net defined as "p" serves as a common prefix pointing towards "t(t)." This implies that the net construction rules from subsection 4.3 of the document are applicable in this case. It's implied in the diagram referenced that the net at discussion is isolated from any other patterns, as those situations have already been covered earlier in the discussion.