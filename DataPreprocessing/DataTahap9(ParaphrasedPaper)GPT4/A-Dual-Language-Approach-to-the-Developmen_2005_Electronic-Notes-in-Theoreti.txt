This research introduces a new proposed notation reliant on architectural diagrams akin to UML-RT collaboration diagrams. It features a concise set of constructs: components are depicted as capsules; abstract interfaces are defined by ports and protocols; and communication relations are represented by connectors. Components of a complex system are partitioned into parallel parts that communicate through connectors, leading to a hierarchical structure with the smallest components at the bottom represented as operational state-transition machines.

The paper is divided into five sections. Section 2 outlines the OTL (Object Temporal Logic), Section 3 demonstrates the dual-language approach through a case study, Section 4 contrasts this approach with other existing methods in literature, and the paper concludes in Section 5.

In discussing programming languages, the OTL cannot utilize finite iteration for the semantics of temporal quantification and must follow the approach of conventional mathematical logics that include arithmetic. The paper acknowledges that providing these semantics for OTL is technically feasible but excludes them from the current discussion due to spatial constraints, suggesting it as a topic for further research.

Additionally, the paper defines a method related to a disk, denoted as pos f(), which is a Boolean function indicating whether the disk (referred to as phi) is in a position that the photocell will recognize as full. This is articulated through the use of an OCL (Object Constraint Language) statement.