The paper discusses the development of a safety component for autonomous mobile service robots within the SAMS project. The component is designed to be SIL-3 compliant and is responsible for calculating a safety zone around the moving robot, halting its motion if an obstacle enters this zone to prevent collisions. The safety attributes of the system are described in high-level geometric terms using polygons and time-varying point sets, distanced from the low-level code.

The paper is set out as follows: Section 2 gives an overview of the project, Section 3 details the specification of safety properties using an example, Section 4 explains how these properties are verified against the implementation, Section 5 provides a simplified narrative of the complete development process indicating an integrated development cycle, and Section 6 offers concluding remarks.

The novel aspect of this work lies in the combination of achieving safety certification based on software and advanced algorithms, especially since industrial safety certifications typically rely on less complex algorithms and hardware-based safety measures like physical barriers. This software-centric approach is unique in robotics, a field which lacks a history of formal methods or specialized tools for such applications, raising the challenge of specifying safety properties in a way that is clear and abstract enough for external certification.

Ongoing efforts are aimed at formalizing these properties in a theorem prover, Isabelle, yet some technical lemmas related to non-linear arithmetic still require formal proof. By formalizing proofs of known theorems, previously implicit assumptions become explicit and reduce the risk of errors, an approach that reconciles discrete input with continuous real-world behavior.

The methodology offers several advantages: the abstract specification uncovers potential conceptual errors, emphasizes mathematical concepts, and connects the software's input to the environmental conditions.

At the time of writing, the SAMS project is in its second year. The software comprises approximately 13.5 thousand lines of C code, while the Isabelle proof scripts consist of 4.5 thousand lines for the implementation model and 1.5 thousand lines for the domain model.