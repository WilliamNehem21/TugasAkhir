This paper addresses the computational geometry challenge of determining visibility within a plane scattered with non-intersecting linear obstacles, a problem with applications in fields like video game development and robotic motion planning. The authors present an efficient parallel algorithm intended for implementation on modern parallel architectures, such as those found in today's GPUs (Graphics Processing Units).

Building upon the existing research of Shoja and Ghodsi, which provides a parallel approach for point visibility within a simple polygon, the authors extend this work to handle point visibility among a more complex set of obstacles comprising non-intersecting line segments. They achieve this using the same optimal time complexity as Shoja and Ghodsi's algorithm.

The proposed algorithm utilizes the divide and conquer strategy combined with the parallel merge technique pioneered by Atallah et al. and takes inspiration from visibility concepts in Asano et al.'s research for constructing a visibility graph. Within this algorithm, the set of segments, denoted as S, and a query point Q are considered, whereby the visibility region V(S(Q)) represents the area visible from Q. A point is considered visible from Q if the line segment connecting them is unobstructed by any segment in S.

Key innovations of the paper include the assumption that segments intersecting the positive x-axis are divided at their intersection point, transforming the problem into one where the query point is treated as the origin, and segments that are collinear with the query point or cross the positive x-axis are preprocessed accordingly. The algorithm's parallel merge operations replicate the performance of traditional merge sort, thus rendering the time complexity for finding the visibility region to be O(n log n).

To adapt the algorithm for GPU architectures, the authors suggest employing the GPU merge path strategy, which efficiently divides the workload amongst processors, reducing idle thread time. This paper proposes a multi-level computation of visibility regions, where independent computations within blocks are initially conducted, followed by a collaborative computation across blocks.

To validate their method, the authors tested their algorithm using CUDA toolkit 9.1, compiling their CUDA code with specifications targeting the Tesla K80 GPU. Their approach considered improvements in time efficiency and the particular constraints of GPU architecture to achieve an effective solution to the point visibility problem with line segment obstacles.