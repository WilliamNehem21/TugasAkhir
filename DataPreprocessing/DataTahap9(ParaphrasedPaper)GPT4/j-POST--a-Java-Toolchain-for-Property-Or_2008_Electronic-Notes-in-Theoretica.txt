Testing is a verification method used to identify any faults within a software system, applicable both during the development phase and after the software's completion. It is considered a practical strategy to affirm a software's proper operation, especially in light of increasing system complexity. Nonetheless, minimizing its cost and duration is an ongoing industrial challenge that is heavily emphasized.

The structure of this paper is as follows: Section 2 details the theoretical principles of J-POST, and Section 3 outlines the specifics of the toolchain. An experiment using J-POST on a travel agency application is presented in Section 4, and Section 5 provides some concluding thoughts and future outlooks.

The logical expressions of L consist of a limited set of n-ary operators (fn) and predicates (p1, p2, ..., pn). The abstract definitions for such logic can be represented as: formula ::= fn(formula1, formula2, ..., formulan) | pi.

Test controllers (TFn), connected to each n-ary operator (fn) in the logic L, aim to oversee the testing sequences of their respective components through basic commands (start, stop, loop), aggregating their outcomes to formulate a collective verdict for the operator fn instance. Research reports contain examples of controllers applicable to various logics.

J-POST's test designer offers an interface to aid users in crafting formal requirements and related test modules via specialized editors within the Eclipse Modeling Framework. These test modules are preserved in XML formatâ€”J-POST's native format. Additionally, the tool provides a visualization feature (utilizing Graphviz) to display these modules more comprehensibly, which helps to mitigate potential user errors when handling XML files.

The initial step involves assembling a communication tree from the abstract syntax tree of the formula. This outlines the communication strategy amongst test processes generated by the test generator. The tree's leaves are Abstract Test Modules (ATMs), corresponding to the formula's atomic predicates and derived from the library. The internal nodes are generic test controllers aligned with the formula's logical operators, sourced from a limited array of universal controllers available through the logic plugin. The tree's apex is a unique test process designated as the 'TestCaseLauncher', tasked with initiating the test and announcing the end result.