Design patterns serve not only in creating new software but also in understanding and reconstructing existing code, tasks typical of reverse engineering. The article presents DPVK, a tool created to recognize design pattern occurrences in Eiffel-based systems. By examining a wide range of patterns and assessing Eiffel software through static structures and dynamic interactions, DPVK aims to enhance the accuracy of pattern detection. It is developed as an Eclipse plugin, offering improved compatibility and potential for further development.

The basic configuration for pattern detection tools consists of three elements: a parser to extract information from the code, a detector that compares these details against pattern definitions from a database to produce detection results, and a database that may store these results for additional evaluation.

To reduce false positives, modern tools implement multiple passes or recursive filtering and consider both static and dynamic information to increase accuracy in detecting true instances of design patterns.

The paper reviews KT, a tool that can extract design diagrams from Smalltalk code and utilize this information to identify patterns. It emphasizes the necessity for tools to support both static elements (like class relationships) and dynamic elements (such as object interaction).

A three-tier architecture outlined in the study comprises an object-oriented database, a repository schema, and various end-user tools that cater to domain-specific functions like source code capture and visual analysis.

Another approach by several authors integrates static and dynamic analysis for automatic pattern detection, producing reliable results that don't depend on naming conventions. Source code is analyzed for abstract syntax tree node relationships to identify potential pattern instances, then dynamic analysis validates these instances during runtime.

The paper also discusses Eiffel's "Design by Contract" concept, which ensures reliable designs by defining clear obligations and responsibilities among classes. These contracts are specified using assertions, preconditions, and postconditions, making it easier to detect and resolve design bugs.

The study highlights BON, a notation system deemed suitable for analyzing and designing object-oriented systems and for its compatibility with Eiffel environments. BON is considered an easier alternative to UML and is firmly aligned with Eiffel concepts, though it can operate independently too.

DPVK, a text-search based tool for detecting design patterns in Eiffel code, stands as an implementation example, exploiting Java for broader compatibility. It operates through initial static fact extraction and then defines the static structure of design patterns for comparison using a relational calculator named Grok.

The research indicates that creating a repository of design pattern definitions can help accommodate the evolution and variance in software implementations, thus assisting in identifying patterns accurately.

Finally, the paper suggests that once a forthcoming Eiffel development tool for Eclipse is completed, it could replace the current EiffelStudio and EC for fact extraction. Future plans for DPVK also include expanding its detection capabilities to other popular programming languages such as Java and C++.