Disjunctive Logic Programming (DLP) and Linear Logic Programming (LLP) are two sophisticated variations of Horn logic, the foundation for languages such as Prolog. The reasons for introducing these two models seem quite distinct: DLP was developed to manage uncertain beliefs, while LLP was introduced to introduce state into pure Prolog computations through the addition of state-based computations.

In DLP, resolution steps are expanded to work on positive clauses, which are disjunctions of atoms, and implicit contraction steps are used on the chosen clause. In contrast, LLP, which operates within a sub-structural logic where contraction is not allowed, functions like multiset rewriting on collections of atomic formulas.

Viewing DLP as an abstraction of LLP is promising for many reasons. This perspective allows for the application of analytical techniques designed for DLP to LLP, revealing that DLP could serve as a theoretical framework for reasoning about properties of Petri nets, known for modeling concurrent computations.

This work explains that first-order programs are considered by analyzing ground instances of program clauses. Notably, DLP operational semantics can be described with an explicit contraction rule, and the weakening rule is admissible.

Recent research has shown LLP programs can have a fixpoint semantics, which defines provable LLP goals and can be computed finitely similarly to Horn and disjunctive programs. This fixpoint semantics allows further exploration of the relationship between LLP and DLP using abstract interpretation, which involves the notion of completeness to estimate abstraction precision.

Abstract interpretation, a well-established framework for semantic approximation, helps develop program analysis algorithms. This framework uses an abstract representation of the language that is sound with respect to the standard semantics, enabling finite-time calculation but with some detail loss.

Previous results demonstrate the abstraction is complete for certain LLP programs, especially those encoding Petri nets. The paper discusses proving completeness for all LLP programs and establishes an indirect proof via the connection between completeness and proof theory. It also explores how reduction in backchaining steps can simplify contractions over multiset contexts during proof analysis.

The research anticipates further analysis of LLP, potentially investigating negation in LLP based on DLP's negation. Another application could involve applying DLP's operational and fixpoint semantics for Petri nets analysis. Ongoing work is addressing the relationship between DLP and LLP in abstract interpretation and aiming to provide a direct proof of the abstraction's completeness. There is also interest in formally studying the complexity of converting DLP proofs, potentially to understand the benefits of proving properties in the abstract domain versus the concrete one.