This article introduces TILC, a user-friendly graphical application called the Interactive Lambda-Calculus Tracer, designed to aid in teaching and learning the foundational principles of pure untyped lambda-calculus. TILC enhances the learning experience by allowing users to visually manipulate a parse-tree representation of lambda terms, which simultaneously updates the corresponding lambda term. This visual interaction simplifies the process of understanding the syntax and operational semantics of lambda-calculus.

The structure of the paper is as follows: Section 2 provides a concise overview of the lambda-calculus language that TILC is based on, by summarizing the essential concepts of pure untyped lambda-calculus. Section 3 details the key features of TILC, demonstrated with specific examples, and provides insight into the tool's modular design. The paper concludes with Section 4, where the authors discuss potential enhancements for TILC that are inspired by feedback received from its initial use in Girona and other locations.

The syntax for lambda terms is described using a BNF grammar. Starting with an infinite set of variables denoted by V, where variables are represented by symbols such as x, y, z, etc., the grammar defines the structure of lambda terms. The paper also discusses the concept of redexes, stating that if a lambda term contains no redexes, it is considered to be in its normal form. A redex is positioned to the left of another redex if its initial lambda abstraction appears further to the left in the term. The "leftmost outermost" redex is identified as the redex that is furthest to the left and not contained within any other redex. The normal reduction order is then defined as the strategy where the leftmost outermost redex is reduced first. The paper provides an example of a lambda term that is not in normal form, as it contains multiple redexes.