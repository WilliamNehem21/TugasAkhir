Our research builds upon earlier work that facilitates interaction with proof assistants through the use of a "proof movie" structure. We have now expanded upon this structure, enhancing it with commentary features to support the discussion of formal proof development. Specifically, we have investigated the incorporation of commentary by adapting online text material from Pierce et al.

The combination of the dynamic nature of conventional movies with the descriptive aspects of literate proof scripts has been a focal point of our research. We used Pierce et al.'s course notes on software foundations as a case study for embedding dynamic visualization into the proof process, creating a similar set of pages that not only encompass the original content but also present the proofs' evolution.

Our examination includes the prospect of having the proof script interactively displayed in proof assistant interfaces such as CoqIDE or Proof General. This interactive document lets the learner navigate through the proof by advancing through tactics and observing their outcomes—additionally assisting in completing exercises. However, this interactive display lacks the enriched markup of the fully rendered version.

Originally, our proof movies were made up of simple text without any additional formatting. To improve the movies' visual presentation, we've proposed incorporating a more appealing printed representation of the script, using the Coq proof assistant's built-in pretty-printing tool, Coqdoc, rather than creating our own.

Coqdoc, a tool that comes with the Coq proof assistant, can produce a visually appealing (rendered in HTML or LaTeX) version of a proof script, including well-formatted commands and special comments extracted from the proof script.

To structure a movie into distinct "scenes," we can automate the process based on the output from Coqdoc, which segregates the script into code and documentation. Documentation nodes, which include both text paragraphs and section headers, correspond to scenes in our structure. Each documentation node leads to the creation of a new scene in the movie, incorporating the subsequent code as its frames.

We consider how an author might bundle text into scenes during the authoring process. Given the tree-like structure of the resulting document, utilizing a tree editor allows for easy maneuvering—adding, removing, and reordering scenes, and selecting them for editing—with the benefit of seeing the structure at a glance for straightforward amendments.

Prior to this paper, we developed a dynamic adaptation of the software foundations course notes. Applying our methodology, we created interactive materials for a proof assistant and type theory course that Geuvers teaches at Eindhoven University of Technology. Other applicable documents include the Coq tutorial by Huet et al., which allows for the composition of documents containing both Coq code and LaTeX documentation. Similar to Coqdoc, the Coq distribution includes the Coq-tex tool, which interweaves executing Coq commands within a LaTeX document and outputs the results for further author processing. Typically, these tools are used to simultaneously write proofs and documentation. In contrast, our proof movie concept allows an author to first develop a proof script independently and then produce a dynamic narrative presentation, enriching the proof's explanation for educational purposes.