The paper discusses the challenge of designing systems that are reliably correct. It identifies shortcomings of semi-formal modeling techniques like UML, which are prevalent in industry but fall short in precision, leading to potential ambiguity, inconsistency, and difficulty in formal analysis. In contrast, fully formal methods provide rigor but require a level of expertise not widely present in commercial development environments and lack integration with the wider development process.

To bridge this gap, the paper proposes model-driven development (MDD) frameworks that combine the ease of use of diagrammatic notations with the rigor of formal languages. These frameworks aim to hide complexity while still allowing for accurate construction, analysis, and refinement of models, specifically tailored to certain problem domains.

Embracing pattern-based development and problem-driven methods, the paper showcases the UML+Z framework. This approach involves generating Z models, a formal specification language, from UML diagrams enriched with templates from a specialized catalogue. This integration aims to alleviate the formal competency burden on developers by promoting reuse of proven template "meta-theorems," thus bringing the rigor of formal proofs to a more practical level.

The paper details the concept of "meta-proof" using FTL (Formal Template Language), which encapsulates reusable structure or proof patterns, and exemplifies the use of UML+Z by applying it to a simplified case study. The analysis uses snapshots to represent state changes and confirms model consistency through formal verification with Z/EVES theorem prover, pointing out that model refinement is a topic for future exploration.

The authors believe that tool support could significantly enhance the practicality of MDD frameworks by streamlining the interaction between UML and formal languages like Z, making these frameworks attractive for rigorous yet practical software development. Overall, the paper advocates for a formally grounded, yet accessible modeling environment to improve the quality of system design.