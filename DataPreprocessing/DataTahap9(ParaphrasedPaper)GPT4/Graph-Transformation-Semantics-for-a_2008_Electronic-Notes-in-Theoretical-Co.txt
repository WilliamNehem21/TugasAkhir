The graph transformation community has long believed that model transformation in model-driven architecture is basically an application of graph transformation. This paper aims to validate this belief by offering a graph transformation-based interpretation of one of the initial proposals for the QVT (Query/View/Transformation) language. Specifically, the paper presents a method to convert a QVT-based model transformation definition into an equivalent graph production system, with a completed implementation.

However, a key limitation of the Model Transformation Language (MTL) semantics is its informal natural language description, which impedes formal reasoning and correctness verification. This issue is the focus of the paper, which is partly based on the second author's MSc thesis. The authors describe their method of translating model transformation definitions into graph production systems that have a formal foundation. They illustrate their approach with an example taken from the QVT proposal, but the paper doesn't detail the semantics due to space limitations, referring readers to additional resources.

Regarding previous research, the paper acknowledges extensive support for graph transformation in defining formal semantics, but it omits most theoretical backgrounds, directing readers to other sources.

The paper also highlights an inconsistency problem, where example syntax doesn't align with the EBNF grammar and abstract syntax meta-model. This issue is addressed in the remainder of the paper by working with proposed solutions.

The paper describes how to extract instance graphs from a combined graph using left and right production systems, while also discussing the representation challenges of certain elements, such as attributes and subtypes.

Finally, they note that while much research has been done on applying graph transformation to model transformation, there's been little done on providing a graph transformation semantics to an existing model transformation language. This paper reverses the more common approach of translating specifications from graph transformation formalisms into model transformation languages. The authors reference a specific case where Fujaba's graph transformation specifications were translated to MTL and interpreted by the tool Tefkat.

[Gardner, T., C. Griffin, J. Koehler, and R. Hauserâ€™s work is cited at the end, which reviewed OMG MOF 2.0 Query/Views/Transformations submissions and provided recommendations for the final standard.]