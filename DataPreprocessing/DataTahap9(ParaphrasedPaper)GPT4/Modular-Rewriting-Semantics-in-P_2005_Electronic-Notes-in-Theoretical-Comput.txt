This academic text emphasizes the importance of validating a methodology through persuasive practical examples. It presents two case studies using different languages: GNU BC, a numerical computation language that is part of the Linux distribution, and a rewriting logic semantics of Concurrent ML.

In one case study, semantic entities are recorded with two components: a trace of actions and an environment that maintains the context of process definitions. The environment component leverages sets of process definitions within contexts, and their syntax and semantic modules are further elaborated, including an extension to weak-CCS-semantics.

For BC, their semantics specification includes an environment and a store, with variable identifiers bound to specific store locations. The methodology promotes the use of abstract functions, allowing flexibility to adjust concrete representations without altering semantic rules. For instance, an extension called units.maude allows BC programs to handle physical units alongside numerical values.

An example BC program execution with an empty environment and store outputs 0 but fails to assign a proper unit because the units for the variables x and y are not declared. The result would depend on the specified unit algebra, but ideally, it matches the unit of x with proper declarations.

The article suggests that the robustness and adaptability of a methodology can be showcased through such detailed and varied case studies, verifying the practicality of the approach in real-world applications.