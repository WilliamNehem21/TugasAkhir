The paper explores how the concept of refactoring, commonly associated with software code modifications, applies to various domains including programming, UML modeling, and formal specifications. The text highlights Fowler's influential work which includes a catalog of 72 refactorings for improving object-oriented code.

The study proceeds to illustrate the translation of a Z specification, a formal specification language, into Alloy, a language developed by MIT CSAIL for automatic analysis using the Alloy Analyzer. While the Analyzer is adept at handling Alloy models, handling integers within these models is cumbersome. This is due to the limited range of integers and the inelegant representation of numerical values, which the solver must handle.

The paper acknowledges that while Alloy offers some inheritance-like features through signatures, it cannot replicate the schema operations of Z directly. As a solution, the authors recommend resolving state schemas before translation, despite losing information about schema operations.

The research concludes that Alloy can check for behavior preservation during refactorings, but with some limitations. Notably, existential quantifiers can complicate translations and verifications. The effectiveness of Alloy as a tool for checking refactorings depends on a total bijective representation relation between the original and refactored specifications.

Lastly, the paper recognizes Z's historical criticism due to its lack of verification tools and indicates that Alloy partly fills this void with its automatic analysis capabilities. Yet, for Alloy or another model checker to serve as a backend system of a refactoring tool, further investigation is needed, including performance comparisons with other model checkers and assessing the practical impact of the assumption of a total bijective representation on the checking of refactorings. The authors suggest these points as future work.