This paper discusses a computational model designed to capture the unique characteristics of mobile hardware and software in a ubiquitous computing environment. The proposed model, an extension of the Homer calculus, can distinguish between copyable ('non-linear') software processes and non-copyable ('linear') hardware devices, such as smart cards and ATMs.

The authors argue that mobile hardware, unlike software, is inherently non-copyable (linear), which is a crucial aspect of its security. To prevent software from being illegally duplicated, it is often enclosed within secure, non-copyable hardware. However, existing process calculi do not adequately represent the relationship between linear hardware and nonlinear software, prompting the need for a new calculus integrating both concepts.

The authors introduce an extension inspired by affine intuitionistic linear logic, which allows distinguishing between linear and non-linear usage of variables and location names. This new type system allows software (non-linear) processes to be embedded in hardware (linear) without risking the security concern of potentially copying linear resources through embedding in a non-linear context.

To illustrate the practical application of the calculus, the paper provides an example of an e-cash system that relies on the non-copyability of hardware devices like smart cards. The system is designed to ensure that despite the inherent copyability of software processes (e.g., encrypted messages), security is maintained by correctly typing and managing resources.

The structure of the paper includes an introduction to the Homer calculus, an explanation of its transition semantics, and the presentation of the new type system. A smart card system example demonstrates the practical implications of the model. The paper concludes by summarizing the findings and suggesting directions for future research.

The presented calculus builds on previous works like the Seal calculus and the M-calculus (and its later version, the Kell calculus), but adds the capability to represent nested named locations and objectively mobile anonymous resources that are either linear or non-linear. The introduced type system potentially allows for better routing control via the unity of location names. The type system includes process types and also defines concretion and abstraction types.

The authors claim that their model and type system accurately represent the intrinsic properties of mobile hardware and software, highlighting their potential impact on security systems like e-cash. Their example illustrates that even though a smart card's software process is meant to be non-copyable, if improperly managed, it could be replicated, posing a significant security risk.

Finally, the paper discusses standard properties of the type system, such as the strengthening of unused names and variables, and provides some main results, including subtyping and narrowing of variables within the system.