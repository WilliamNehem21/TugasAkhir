This academic paper discusses the challenge of assigning tasks to processors within heterogeneous systems to optimize performance metrics, such as system utilization, load balancing, and reducing execution time. A directed acyclic graph (DAG) is used to represent an application, where nodes are tasks with associated computation costs, and edges denote communication costs between tasks. Task scheduling can be either static or dynamic, with the paper focusing on dynamic scheduling for heterogeneous computing systems and introducing an algorithm named Clustering Based Heterogeneous Earliest Finish Time with Duplication (CBHD).

This CBHD algorithm combines the Triplet Clustering algorithm, which groups related tasks, with the Heterogeneous Earliest Finish Time (HEFT) algorithm to prioritize tasks within clusters. Furthermore, it may duplicate some tasks across processors to enhance the scheduling performance and improve load balancing, while mitigating computation overhead.

The structure of the paper includes a more detailed exploration of the HEFT and Triplet Clustering algorithms in sections 2 and 3, the presentation of the proposed CBHD algorithm in section 4, and a performance evaluation comparing CBHD with HEFT and Triplet Clustering in section 5. The conclusions are presented in section 6.

The paper describes a process for grouping tasks into clusters using a geometric approach focused on communication minimization and transforming heterogeneous systems into homogenous subsystems for efficiency. Task duplication on processors is used to achieve full utilization and load balancing, with immediate execution of dependent tasks once a duplicated task is completed, thus ensuring minimal makespan (the total time required to complete all tasks).

A simulation tool called Distributed Algorithm Simulator1, which can model different network topologies and includes analysis features, was employed to test the algorithms. The simulation ran on a Pentium 4 computer with a CPU at 1.86 GHz and 504 MB of RAM.

The results indicate that the CBHD algorithm outperforms both HEFT and the Triplet Clustering algorithm by reducing makespan by approximately 2.5%, improving load balancing by 70%, and increasing processor utilization by 10%. Two versions of CBHD were developed: one without duplication, which could increase makespan and reduce performance, and one with duplication, which achieved the minimum makespan, maximum utilization, and optimal load balancing.