This academic paper discusses a hierarchical approach to modeling biological systems, highlighting that the hierarchy (depicted as a pyramid) can be expanded both downwards to examine molecular details, such as gene expression and protein activity, and upwards to explore interactions among different organisms within a population. The study emphasizes the importance of understanding both cellular interactions and environmental influences in organ function and development. To represent the environment around an organ, they propose a 3D grid model where grid-cubes contain factors influencing cell behavior.

The paper also describes how they animate and visualize the cellular model to reflect biological processes and how cells, initially uniform, evolve during the simulation to display diverse behaviors. They identify emergent properties within these models that align with real biological phenomena, such as the formation of endocrine clusters in the developing pancreas and competitive behavior in T-cell development.

The researchers introduce a system called GemCell, which leverages a generic cell behavior model interconnected with a database containing specific information about cellular systems. By customizing this database for different types of cells, they can simulate specific biological segments.

Moreover, the paper notes that biological systems can be interpreted as reactive systems, which has led to modeling efforts using software engineering tools to mimic concurrent behaviors in nature. Various methods, including UML diagrams, ROOM formalism, and hybrid automata, have been utilized to model different cellular processes and interactions.

The approach taken in this work involves breaking down a natural system into concurrent components to model them separately and then recombine to create complex simulations. The authors emphasize the significance of recognizing concurrency on two levels: vertically, across different abstraction levels, and horizontally, among elements within those levels. By implementing reactive engines, they can execute and analyze the concurrent activities, allowing for the observation of how these interactions impact overall system behaviors as a collective.