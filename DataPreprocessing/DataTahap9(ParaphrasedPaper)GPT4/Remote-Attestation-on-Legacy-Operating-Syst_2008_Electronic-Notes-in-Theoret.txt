This study was funded partly by the Flemish Government's Concerted Research Action (GOA) project AMBIORICS 2005/11, the Belgian State's Interuniversity Attraction Poles Programme P6/26 BCRYPT, the European Commission's IST Programme contracts IST-027635 OPEN TC and IST-021186 RE-TRUST, and an IWT-Flanders PhD grant.

The paper highlights the importance of allowing only authentic, intact client applications to utilize services. The goal is to have a means to verify, by an authorized body, whether client software on a remote untrusted platform remains unaltered. If alterations are spotted, steps would be taken to restrict access or cease the application's functions.

Creating a trusted execution environment on an untrusted platform is a significant research challenge, particularly because an adversary with full control of the platform also controls its input/output, making it difficult to ascertain the genuineness of an environment or software running on that platform.

Kennell et al. introduced genuinity tests to check the authenticity of hardware and the running of certain software; however, these tests have been deemed slow and insufficient in practical scenarios.

As a resolution to unreliable attestation systems, one method involves moving essential code off untrusted platforms through program slicing, which separates non-critical from critical code, ensuring the latter remains untampered with.

This paper focuses on remote code integrity verification using two methods: relying on TPM-enabled computers, which are increasingly available, and software attestation techniques like program slicing. The authors discuss trusted computing platform-based attestation (section 2), software attestation techniques (section 3), and a new mixed attestation method (section 4), concluding with results and directions for future research (section 5).

The TCG is discussed as a standards body only, noting it doesn't provide full technological infrastructure or conduct certifications. It outlines three components of a trusted platform, with TPM being central, providing various cryptographic functions and memory for key storage.

Software components loaded during the boot process are measured cryptographically to establish a chain of trust, which traditional monolithic operating systems struggle to maintain.

Two detection methods for memory copy attacks are proposed: measuring verification function execution time and employing self-modifying code.

To counter proxy attacks, where an adversary could use a faster device for computations, authenticated communication channels within protocols like Pioneer and TEAS are used, making adversaries prone to delays and enhancing verification unpredictability.

The paper suggests a practical solution that combines the strengths of software attestation and TPM support without needing heavily modified operating systems or bootloaders. The solution could improve by having the TPM report processor specifications to detect hardware attacks.

Despite this mixed protocol covering many issues addressed by pioneer protocols, it remains vulnerable to proxy attacks. Two strategies against such attacks are presented.

Currently, commercial operating systems offer limited trusted computing support, with pure software-based attestation schemes proposed for legacy platforms, demanding timed checksum functions and execution measurements that are onerous and challenging to implement.