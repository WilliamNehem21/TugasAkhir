This academic paper explores and enhances the One-Big-Jump (OBF) technique, utilized in distributed algorithms for decomposing partitioned graphs into their strongly connected components (SCCs). The authors present a new recursive variant of OBF and assess its performance with varying degrees of parallelism through experiments conducted on different types of synthetic graphs, as well as graphs representing state spaces in model checking applications. Their findings are compared with other established SCC decomposition techniques.

The OBF technique focuses on partitioning a rooted graph into autonomous subgraphs, simplifying the decomposition process without affecting the SCCs. The researchers improved OBF to permit its recursive application, aiming to achieve greater parallel decomposition and enhancing the overall efficiency of SCC decomposition. It was unclear, however, if the potential benefits of parallel decomposition would counterbalance the added complexity and overhead.

The paper is organized into five sections, starting with essential definitions from graph theory and current distributed algorithms. It proceeds with the description of the new recursive OBF algorithm, an overview of experimental results, and comparisons with prior algorithms. The paper concludes with a summary of contributions and an outline of future research objectives.

All the algorithms discussed incorporate a common optimization step that eliminates trivial SCCs, which have vertices with zero in-degree. This step involves recoloring vertices to identify SCCs, allowing the removal of edges between different colors, thereby simplifying the graph.

The paper highlights that OBF is generally more efficient than the FB algorithm in experiments. The authors thus suggest applying OBF recursively on the graph slices. They also note that the performance of recursive OBF can be significantly influenced by how independent procedures are managed, especially regarding synchronization points.

Experimental results indicate that introducing more parallelism can indeed reduce the total running time of the algorithm, even with the potential for additional overhead costs. The most parallel versions of FB and OBF-FB were compared, and Color Homomorphism (CH) processes SCCs intrinsically in parallel. The maximum recursion depth observed with recursive OBF was modest, suggesting that space complexity is not an issue, in contrast to FB, which achieved a much higher recursion depth in the experiments.

The experiments also show that recursive OBF works well on certain graph structures, leading the authors to propose that future work should focus on improving the algorithm for graphs with many disconnected components, and to conduct more comprehensive experiments to validate the promising results of recursive OBF.