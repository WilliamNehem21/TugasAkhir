To achieve high performance, modern computer programs, particularly those with high data rates like in digital signal processing, are often run on networks of processors. Using shared memory for inter-process communication is efficient for such applications, but it requires careful management to ensure correct and consistent data access, as oversights can lead to errors. Alternatively, architects can use message-passing architectures that eliminate shared memory and clearly separate computation from communication, which reduces the risk of these errors but can lead to higher data latency and duplicate data transfers.

The shared messaging communication (SMC) approach innovates by allowing processes to acquire a token representing access to a section of memory. Once a process has the token, it operates on the allocated memory space and then passes the token onto the next node through message-passing, thus blending the benefits of both shared memory and message-passing. This method shows significant performance gains, especially when large volumes of data are involved.

SMC offers a system-level design that can be formally verified, providing both qualitative and quantitative descriptions of program behavior. Nodes within this model have their own private memory, but they communicate through SMC, which manages the shared memory for the entire network.

The SMC model allows for potential concurrency and non-scalar data structures, although this simplifies one key aspect: not all data written to shared memory by a source process will necessarily be read by the target process. Nonetheless, the focus of this model is on the management of tokens rather than detailed data interactions.

The paper demonstrates that any program using traditional message-passing can be converted to an SMC-based program with comparable behavior, using a concept called weak bisimilarity. It's important to note that SMC improves cost-efficiency, particularly in high data-rate scenarios, and supports the idea that SMC can effectively implement message-passing.

To compare performance more accurately, the authors introduce 'amortized bisimilarity', which accounts for functional correctness and costs. SMC is positioned as a communication model that enables efficient, portable, and reusable software within certain micro-architectures, aligning with technologies like flash architecture and efficient value-passing languages.