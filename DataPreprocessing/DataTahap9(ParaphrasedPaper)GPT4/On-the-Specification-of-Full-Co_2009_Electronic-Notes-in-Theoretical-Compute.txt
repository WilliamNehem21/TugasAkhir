This academic paper discusses the challenge of creating comprehensive contracts for software components which detail not only normal behavior but also special cases and exceptions. The paper looks at the behavioral properties of use cases from the COCOMO benchmark and specifies these cases using the deontic specification language CL. It then compares the ability of deontic specifications against operational specifications to handle normal and exceptional cases by examining specifications in the CSP (operational) and CL languages. The authors theorize that while operational specifications are adequate for normal behavior, they are less flexible for handling exceptionsâ€”a hypothesis that is supported by their comparisons.

The paper is structured as follows: It begins with an overview of COCOMO, followed by an introduction to CL language and the COCOMO use case specifications. It then details three specific properties to be specified using both CL and CSP, noting that LTL and CTL might also be relevant specification languages in this context. By comparing the specifications, the paper argues that CTL and CSP can capture exceptional behavior which cannot be expressed with LTL, and thus are better suited to define comprehensive contracts.

Additionally, the paper highlights the accessibility of these specification languages to model-checking tools, such as the FDR2 for CSP, but acknowledges difficulties in analyzing specifications that involve complex constructs like contrary-to-duty actions.

It concludes that while standard logics like CTL and LTL can describe contractual obligations, they may obfuscate the relationship to original deontic concepts such as obligations, permissions, and prohibitions. This compromises the ability to handle exceptions and contract violations and can make it challenging to reason about deontic inconsistencies. The paper underscores the challenge of striking a balance between sufficient descriptive power to capture contracts and the ability to analyze and reason about those specifications efficiently.