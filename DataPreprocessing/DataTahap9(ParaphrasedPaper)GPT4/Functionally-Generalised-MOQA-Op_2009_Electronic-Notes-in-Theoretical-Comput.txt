This paper introduces MOQA, a novel programming language created by M. Schellekens designed for analyzing the average execution time of programs. MOQA is constructed around a set of basic operators, and the language's design and the semantics of these operators are discussed in other referenced works.

The paper describes enhancements to three specific MOQA operations: projection, unary product, and split. These operations are generalized to extend their functionality.

In the paper:

- Section 2 introduces the concept of random preservation, including a new distinction between random preservation and automatic random preservation not previously addressed.
- Section 3 outlines the definitions for isolated subsets of partially ordered sets (posets) and local transformations, which are important for understanding the limitations of MOQA operations.
- Section 4 discusses the MOQA operations and their generalizations, proposing enhancements to increase their applicability.
- Section 5 examines the random preservation property of the generalized operations, noting that the article is self-contained and reintroduces necessary concepts from prior works.

The paper also touches on the notation of posets and when the subscript can be omitted for clarity. A discussion of the Hasse diagram for posets is included to visualize the relationship between elements.

Additionally, the paper defines output multisets to track the number of inputs resulting in a specific output and introduces multisets and their constructors.

The authors link the ideas of isolated subsets and local transformations while observing that operations within MOQA interface with posets and linearly ordered posets (LPOs) in a specific way.

A particular operation, pushdown, is illustrated with an example to demonstrate its function when applied to near-LPOs.

The paper concludes by emphasizing the benefits of the refined MOQA operations, which broaden both the range of definitions and the potential for random preservation. The extensions are described as significant and contribute to the language's capability.