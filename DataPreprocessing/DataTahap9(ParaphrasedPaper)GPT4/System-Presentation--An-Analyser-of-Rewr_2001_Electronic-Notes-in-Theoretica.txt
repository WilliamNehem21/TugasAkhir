The paper discusses term rewriting systems encompassing three sets: defined function symbols, constructors, and variables. Constructors are viewed as the lowest elements in the ordering of symbols based on their precedence. A program in this context is composed of a set of rewriting rules.

The ICAR (Implicit Complexity Analyser) is a tool that first ensures the termination of a rewriting system and aims to estimate an upper bound on its computational complexity. This analysis draws from previous work and focuses on determining the complexity of the functions computed, rather than the program's runtime, which is termed "implicit" complexity analysis. Additionally, ICAR suggests a new operational semantics to achieve the estimated complexity bounds.

The function computed by a given program is defined as a partial function from tuples of constructor terms to constructor terms, taking into account the arity of the main function symbol.

The paper claims that finding the precedence for verifying termination can be done in quadratic time relative to the program size and that termination with either the multiset path ordering (MPO) or lexicographic path ordering (LPO) can be checked within a specified time based on function symbols' maximal arity and a constant value.

Although deciding on polynomial interpretations may be undecidable, the paper suggests that finding quasi-interpretations—a type of loose interpretation of the program's functionality—is feasible. Programmers can potentially provide these quasi-interpretations along with rewriting rules for verification by the program.

The paper measures computational resource usage in terms of reduction steps (time) needed to reach the normal form and the combined size of the environment and cache (space). These measurements are approximations but are considered adequate since their increments are polynomially bounded by the term size.

The paper includes proofs that if function symbols are ordered based on precedence, terms can be ordered using MPO. It states a lemma indicating that no symbol in a term can have higher precedence than the highest symbol in another term if one is ordered before the other using MPO or LPO.

Finding a polynomial quasi-interpretation is likely undecidable, but the paper posits that the semantics of a function can serve as a good quasi-interpretation candidate, which a programmer can supply based on their knowledge of the program's intended computations.

Lastly, there is a discussion about integrating ICAR into ELAN 3, a substantial system developed at LORIA for handling term rewriting systems. During spring and summer 2001, Mitch Harris was mentioned to have rewritten ICAR in TOM, which is anticipated to be the future parser of ELAN terms. This integration would be beneficial, providing ELAN users with complexity bounds for some systems.