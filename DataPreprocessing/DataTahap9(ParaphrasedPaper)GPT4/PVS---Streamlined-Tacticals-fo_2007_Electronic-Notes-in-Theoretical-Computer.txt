This academic paper discusses the semantic foundation of proof languages, emphasizing that representing the state of a proof after applying a logical rule is critical for managing the search for a proof. The state information, while not logically significant, is essential for describing the control mechanisms of the proof language. The authors present a monadic datatype to represent the proof state in the PVS theorem prover and demonstrate its use through the implementation of a new, more semantically straightforward set of proof tactics known as PVS#.

The paper builds on earlier efforts to formalize the semantics of the PVS proof language, where proof states were simply noted using flags in the proof tree. Instead, the paper proposes an elegant monadic datatype model. Section 2 of the paper defines this datatype and its properties. In Section 3, the application of the monadic framework in creating new PVS# tacticals is demonstrated. Section 4 details the implementation of the monadic datatype within PVS#.

Monads, commonly used in functional programming languages to handle imperative features like side effects and exceptions, are central to this framework. They allow viewing programs with side effects not as pure functions but as morphisms to a monadic datatype representing both the side effects and the return value. Monadic operators enable building and combining such programs in a structured way.

A "proof object" is defined as a concrete instantiation of a (potentially incomplete) proof tree. The paper abstracts proof objects to allow distinguishing the current goals from all open goals. A monadic datatype is defined to encapsulate the state of proof objects, with tactical operators providing exception handling behaviors.

The research described in the paper is a part of ongoing efforts to develop new PVS# tacticals, study the role of monads in proof languages theoretically, and explore their application in other theorem provers. For example, a similar monadic datatype has already been implemented in the Fellowship proof assistant. The paper suggests that monads will significantly influence future proof language design and semantics for procedural theorem provers.