Fork-join and split-merge queueing systems are used to model parallel task processing where tasks are divided into subtasks that are distributed to various servers. Tasks are only finished when all its subtasks are completed. These systems are typically measured using task response time and subtask dispersion. Recent efforts in research seek to minimize subtask dispersion or the product of task response time and subtask dispersion by implementing subtask-specific delays. These delays can be applied either statically or dynamically, with dynamic meaning the delay can be adjusted based on the system state at any point before a subtask begins service. An important dynamic strategy to improve performance involves eliminating delays for subtasks whose related subtasks have finished.

This paper introduces techniques that integrate this strategy into existing methods for calculating optimal subtask delays in split-merge and fork-join systems. Through case studies, the paper demonstrates that including this policy changes the computed optimal delays and results in better subtask dispersion compared to prior methods. In certain scenarios, it's advantageous to delay less critical subtasks until the most pivotal subtask is done.

The paper initiates with an overview of fork-join and split-merge systems, which are parallel queueing models describing how tasks comprising subtasks are processed simultaneously. It defines key performance metrics such as task response time, subtask dispersion, and a metric that balances the two.

A task is broken down into subtasks, each processed by different servers with a unique service time distribution. A task is complete when all its subtasks have been serviced.

The paper suggests a way to calculate subtask dispersion in split-merge systems that involves sending a signal to start processing sibling subtasks once one subtask is completed. This approach assumes that any subtask may have its delay removed before it begins service, but not during. Sending the signal to start work after a subtask finishes reduces both subtask dispersion and task response time.

The paper uses a probability distribution function to characterize service times and applies a two-part function that distinguishes this research from prior studies.

Later sections detail methods that use interruptions to begin processing sibling subtasks upon the completion of a subtask. Although these methods can enhance subtask dispersion, they typically do so at the expense of increased task response time. One method shows improved dispersion at a higher response time than other techniques, but a variation of this method offers a better balance in a fork-join context, despite having a slightly longer task response time than two other compared fork-join methods.

This summary paraphrases the key concepts and findings of the paper while omitting specific technical details, methodologies, and numerical results.