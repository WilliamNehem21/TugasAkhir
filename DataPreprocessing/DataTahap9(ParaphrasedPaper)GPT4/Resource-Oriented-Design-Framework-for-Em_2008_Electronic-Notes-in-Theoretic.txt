Codesign provides a unified design methodology for embedded systems, integrating hardware and software components from the outset without prioritizing one over the other. This integrated system design is then partitioned into detailed designs for both the hardware and software that will be implemented. Challenges frequently arise from the interaction between hardware and software, particularly in terms of communication timing and behavioral variations due to the embedded system's limited resources. Consequently, it is crucial to understand and model the behavior of embedded software within the constraints imposed by both resource limitations and communication timing.

Embedded system models are often categorized into structural and behavioral models. Software developers are particularly focused on the dynamic behavior of these structural elements during system operation. Statecharts are recommended for this behavioral description, but the methodology does not typically extend to the specification of hardware properties such as timing and resource constraints.

Resources in a computer system are characterized as both physical and logical elements essential for processing data. Specific embedded applications may require resources such as power, bandwidth for quality of service, and central processing units (CPU), memory and input/output (I/O) devices for data processing. Logical elements such as data structures, semaphores, message queues, and network data packets are provided by the operating system to facilitate access to this hardware.

The concept of a Resource-Oriented Model (ROM) is introduced to define the behavior of software within the constraints imposed by hardware, such as timing and availability. ROM originates from an approach taken by hardware engineers, who utilize hardware timing verification techniques to establish timing properties. These properties can then be abstracted in a form more accessible to software developers, allowing them to create software behavior models that take hardware constraints into account and validate these models against the hardware specifications.

Resource-oriented models encompass a software behavior model, a software-oriented hardware model, and a resource model, which are all components of an embedded system. Additionally, there are resource-independent and resource-oriented embedded system models. To illustrate these concepts, a gate control system example is provided where the gate's functionality is captured using an Algebraic Communication Sequential Resource (ACSR) model. In this example, the gate's closing operation is triggered by a timer signal and continues when a specific signal, such as a green light, is active.

The design approach under discussion is aimed at a more explicit and specific behavioral modeling of hardware components. ACSR specification offers the capability to model the exclusive utilization of a resource, while a resource-oriented design aims to capture not only this exclusivity but also the particular impact that resource behavior has on software behavior.