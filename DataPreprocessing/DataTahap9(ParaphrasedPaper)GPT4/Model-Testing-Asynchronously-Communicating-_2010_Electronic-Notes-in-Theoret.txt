The paper emphasizes the importance of systematic testing for the reliability and quality of software and systems, highlighting the usefulness of formal methods and program language theory in making testing more structured. The authors have previously proposed a formal method for black-box testing of components that communicate asynchronously in open environments.

This method is applied within Creol, an object-oriented modeling language for distributed systems favored by RM-ODP guidelines, due to object orientation being a well-suited paradigm for such systems. Asynchronous communication is favored in Creol for decoupling interactions and reducing wait times, but it introduces challenges such as message overtaking and non-determinism, which lead to a state space explosion.

The paper then describes experiments demonstrating the benefit of using associative and commutative (AC) rewriting for resource efficiency in testing asynchronous communication. AC rewriting results in time savings and fewer rewrites, although its effects on state space are less clear.

One experiment tested a component responsible for ensuring all methods are called before any method returns, using processor release points and await guards in Creol. It also explored testing outgoing calls and generating incoming returns, where a broker component would be considered non-conforming if it did not follow the specific call and return sequence laid out in the specification.

The paper concludes by highlighting the advantages of the formal testing approach using AC rewriting to handle potential communication event reorderings due to networking. This approach allows for precise input scheduling and tests the internal synchronization of the object. The authors found that AC rewriting could handle more extensive test cases and is applicable to various programming languages beyond Creol, given the commonality of non-determinism in distributed systems.

Furthermore, the paper compares its approach to other methods which use assume/guarantee specifications for bounded model checking, environments for driving unit tests, Labelled Transition Systems (LTS) for modeling component behavior, and techniques for automatically generating assumptions a component might make about its environment to hold certain properties. However, these techniques differ from the authors' approach in terms of object interaction models, use of shared variables, specifications, and invariant-based reasoning with Hoare logic.