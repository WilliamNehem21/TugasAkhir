BPEL is recognized as the de facto standard for defining the interactions and execution logic within a web service orchestration since its acceptance in April 2007. This language orchestrates the cooperation of multiple web services to fulfill a business objective.

The subsequent sections of the paper unfold as follows: Section 2 provides an overview of BPEL; Section 3 introduces our BP-language for formal modeling of BPEL processes; Section 4 outlines the mapping from BP-calculus to BPEL; Section 5 discusses the verification process with an example; and Section 6 wraps up the discussion.

To model BP-calculus, a system to abstract BPEL scopes is necessary. Scopes are containers for a primary activity (indicating normal execution), as well as variable definitions and various exception handlers. Scopes and their activities are activated and completed simultaneously under normal operation.

We employ reduction semantics, involving structural and reduction relations. The structural relation interprets operator meanings, while the reduction relation allows process evolution via operational semantics.

Fault handlers use the "enfh" channel to become active and carry out a corresponding activity "pi" when a specific fault "i" occurs. They signal completion to the relevant process and scope through channels "y1" and "yfh," and can be deactivated using the "disfh" channel, if needed. Internal faults activate via the "enfh" channel.

Compensation handlers are set up through the "instch" channel input at a scope's start. They perform the compensation activity "p2" and, if invoked but uninstalled, they use the "throw" channel to signal scope completion while handling children's compensation with the "cc" command. The "<compensate>" activity invokes compensation handlers.

We describe how processes can be specified and formally verified using both BP-calculus and BPEL. Verification results are refined iteratively, leading to an auto-generated and verified BPEL code.

We presume unique renaming of variables within the BP-calculus expressions to avoid name clashes and forego alpha-conversion. Communication channels in BP-calculus map to web service operations, and partners are interchangeable as variables.

Our verification method starts with expressing processes in BP-calculus, translating them into syntax suitable for the HAL tool, with the caveat that annotations are lost. Nonetheless, this loss does not affect verification.

Fault handlers consist of three activities, each mapping to a different "catch" block but sharing the invoked porttype and operation; only the fault name parameter varies. The mapping is specified for these fault handlers.

A link serves as a bidirectional connection between two activities, a source and a target, with explicitly defined roles. Links enforce execution order among parallel activities, allowing for activity synchronization. Some conditions, such as not crossing scopes, apply to links.