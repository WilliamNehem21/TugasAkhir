Customizing operating system kernels for embedded devices is becoming increasingly important, yet kernel development is hindered by numerous factors such as high costs associated with development and testing and the complexity of kernel code, which makes unit testing impractical. Against this backdrop, the proposed Model-based Kernel Testing (MoKerT) framework aims to facilitate the detection of concurrency bugs in operating system kernels by utilizing a combination of model checking and testing techniques.

The Linux 2.6 kernel's file systems were analyzed using the MoKerT framework, which successfully identified a data race bug in the proc file system. One of the significant challenges in kernel testing is the limitation of tools available, as they often affect kernel performance and can lead to system crashes or unpredictable behavior. Traditional debugging methods like printk() or kernel logs remain prevalent due to the inability to employ standard libraries in kernel space.

The proposed MoKerT framework addresses these issues by extracting models and applying model checking to identify concurrency bugs, offering a viable alternative to direct kernel analysis. Model checking allows for the independent and abstract examination of kernel components and their interactions with surrounding systems, along with exhaustive exploration of potential scenarios and the production of concrete counterexamples, which are beneficial for debugging.

Despite its advantages, model checking faced the challenge of distinguishing between actual bugs and false alarms, as the abstract models may not always match the target code. To bridge this gap, PROMELA, a language similar to C, is used in the Spin model checker to aid in expressing kernel behaviors for model checking. MoKerT then allows users to replay and scrutinize any counterexamples within the context of the actual kernel code to accurately pinpoint the root cause of the issue.

In practice, many kernel bugs are reported via manual inspections or artificial scenarios, with numerous patches included in the Linux changelog that may be unnecessary or fail to address the bug appropriately. MoKerT enhances the validation process for bug patches by modeling the patched code and using model checking to confirm whether the patch effectively resolves the issue. The framework includes a runtime phase with a controller thread to manage the scheduling of target threads and a monitor thread to verify the correct replay of counterexamples.

An examination of the Linux virtual file system (VFS) functions `vfs_readdir()` and `do_rmdir()` revealed the data race identified in the MoKerT model to be a false alarm, which was resolved by refining the model to account for the mutual exclusion properties of the functions involved.

In conclusion, MoKerT assists in the detection of concurrency bugs in kernel code by applying model checking results to the actual kernel, enhancing confidence in the results obtained from exhaustive model checking by testing them against real-world code. The framework's effectiveness was demonstrated through case studies on the Linux 2.6 kernel's file systems, illustrating its capacity to uncover hidden concurrency bugs like the one found in the proc file system.