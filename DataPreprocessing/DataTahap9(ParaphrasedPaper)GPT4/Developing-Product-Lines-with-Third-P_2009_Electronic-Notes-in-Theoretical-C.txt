This academic paper addresses the challenge of combining the trend of developing software product lines with the increasing adoption of third-party software. Software product lines require tight control over software to manage diversity, while third-party software typically offers limited control.

The paper presents a solution that integrates the Koala component model, developed at Philips, with the concept of build-level components. This approach changes the granularity of Koala components from individual C files to build-level components, allowing for the unification of both trends. Using the Koala Architectural Description Language (ADL), the authors orchestrate product composition and manage diversity, with build-level components acting as the unit for third-party composition.

The paper explains the proprietary Koala component model, which has been successful for about a decade in constructing diverse products via an ADL and related tooling. Koala was initially designed for software with constrained resources in the consumer electronics industry and uses a hierarchical model with smaller components forming larger ones.

The authors illustrate how Koala uses ADL to map C function calls to definitions, enabling the composition of various artifacts besides C source files. They propose extending Koala to accommodate coarse-grained, build-level components to allow the incorporation of third-party software, with an example including the use of GNU Automake and Autoconf.

The paper also describes the normalized composition specification and how it defines a composition tree with nodes and leaves representing different components and modules. They suggest using directories to represent these elements, with build-level components placed in the corresponding module's directory.

The proposed solution addresses the issue Philips faced when trying to integrate third-party software with their Koala model. By using Koala ADL and build-level components, it becomes possible to combine the need for diversity management with third-party components. The paper concludes with a practical demonstration of defining the Koala compiler as a composition of build-level components and outlining how to automate this composition through the extended Koala compiler.