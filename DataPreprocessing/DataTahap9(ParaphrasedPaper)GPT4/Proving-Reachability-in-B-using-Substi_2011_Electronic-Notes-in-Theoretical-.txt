In an academic paper, the authors discuss the use of a "while" statement that doesn't conform to the standard syntax of the B-Method because its body comprises substitutions that aren't implementation substitutions. Despite this, the underlying semantics and rules for "while" statements are still applicable to various substitutions. Thus, this allows the authors to create proof obligations for the statement in question, specifically referencing it as (11).

To validate statement (11), they apply Law 5.5, assuming that specific proof obligations are satisfied. They incorporate these proof obligations into assertions, which are drawn from several other parts of their work denoted as (5), (7), (10), and (11). These assertions are detailed in Appendix A of their document and yield a total of 14 proof obligations (POs). Out of these, a tool or system automatically confirms 10, leaving only 4 for manual proof using an interactive prover.

In a particular case study, an alternative method that the authors discuss produces a larger number of POs: 28 in total. Of these, 14 necessitate interactive proof but are challenging to verify. To assist in proving a specific "while" loop, additional variables are introduced, increasing the number of POs to a substantial 88, with 30 requiring interactive proof. This larger number is markedly more than the 14 generated by the authors' assertion-based approach and refinement of substitutions, in which only 4 needed interactive proof.

The paper notes that their method, which focuses on stepwise substitution refinement, offers several advantages. It permits the specifier to engage directly with abstract variables, regulating the number of POs by breaking down the proof into manageable segments. The application of refinement laws further prevents the generation of some POs that are otherwise necessary when using automated refinement methods. This approach shares similarities with the BART tool, which promotes the use of automatic refinement laws.