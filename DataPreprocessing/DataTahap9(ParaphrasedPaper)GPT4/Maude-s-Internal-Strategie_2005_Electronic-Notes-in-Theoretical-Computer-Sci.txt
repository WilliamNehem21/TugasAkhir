In certain situations where the primary focus is to verify if a system is operable or to observe the system's development without tracking specific execution pathways, Maude, a programming language, provides two inherent strategies. The "rewrite" command utilizes a strategy that encompasses a top-down approach with rule adherence, whereas the "frewrite" command employs a bottom-up tactic that ensures fairness in position. For scenarios requiring examination of all potential execution trajectories from an initial term to reach states that meet a specified condition, Maude offers a "search" command, which conducts a breadth-first search through the tree of potential rewriting scenarios.

However, there are cases when alternative modes of execution are necessary, and choosing the right strategies becomes critical for the execution of rewrite theories in the Maude system. To address the need for varied execution strategies, Maude has developed a framework for strategy control at the metalevel. Strategies are crafted within an extension of the predefined "META-LEVEL" module by employing built-in functions, such as "metareduce," "metaapply," "metaxapply," and others, to serve as foundational elements. This approach allows for the creation of a range of internal strategy languages within the rewriting logic framework of Maude itself, rather than introducing them as external, supplemental features.