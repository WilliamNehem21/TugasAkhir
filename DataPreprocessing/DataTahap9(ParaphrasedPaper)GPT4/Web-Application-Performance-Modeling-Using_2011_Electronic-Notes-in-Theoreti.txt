Title: Performance Modeling of a Web Application with LQN: An Apache-PHP-PostgreSQL Case Study

Abstract
This study presents a Layered Queueing Network (LQN) performance model for a Linux Apache-PHP web application backed by a PostgreSQL database. Through the model, performance indicators like steady-state throughput and response times are computed and compared with real-world load testing data to validate the model. The paper explores performance analysis techniques, highlights the system's bottleneck, and suggests strategies to scale the system and prevent early saturation of this bottleneck.

Structure
1. Introduction
2. Review of relevant literature on web performance modeling
3. Introduction to Layered Queueing Networks (LQN)
4. Architectural details of the target web application
5. Load testing setup description
6. LQN modeling of the application
7. Comparative analysis of empirical measurements and model predictions, and strategies to alleviate performance bottlenecks
8. Summation of findings and directions for future research

Prior Studies
Liu et al. developed a three-tiered web application model using closed queueing networks, capturing the limits of concurrent processing in Apache and MySQL servers. Similar LQN applications include modeling CGI web servers and an Apache-PHP-MySQL system by Dilley et al. and Pastsyak et al., respectively. These models were validated against empirical data. Other performance modeling approaches like Stochastic Process Algebra (SPA) and Stochastic Petri Nets (SPN) were also discussed.

Web Application Description
The paper discusses MyBikeRoutes-OSM, a mapping application for bicycle routes using OpenLayers for client requests and PostgreSQL for data storage, with routing powered by PgRouting. This differs from the MyBikeRoutes web app which uses Google Maps API and a MySQL database for similar functionality.

Load Testing
For complex queries, load testing was conducted using JMeter with a single user over a period of 900 seconds. Utilization law was applied to calculate service demands.

Performance Results and Analysis
Performance metrics from model predictions were compared against empirical data, establishing a baseline performance scenario, and outlining an objective to support 40-50 users with an acceptable response time. However, the findings suggested that the application would struggle to maintain satisfactory response times for a significant user base. The performance evaluation targeted the Apache server's CPU as the bottleneck.

Strategies for Scaling
To meet performance targets and alleviate the bottleneck at the Apache server, the study suggests two potential solutions: utilizing a multi-processor system or dividing the application and database services across separate servers. The LQN model was adjusted for each approach:

1. Multi-Processor Apache: The model was tested for Apache servers with two and four processors, using a first-come-first-serve scheduling discipline due to limitations in LQN's support.
   
2. Separating Application and Database Servers: The database was moved to a separate machine, adjusting the model for designated disk I/O tasks and assuming negligible network delay within a LAN environment.

Both hardware and architecture changes are considered to avoid bottleneck saturation and improve overall system performance. The study concludes with an emphasis on accurate modeling for forecasting performance under scale and the importance of infrastructure considerations.

Please note that this paraphrased summary is brief and omits certain specifics and technical details present in the original academic paper. For complete understanding, it is recommended to refer to the full text of the study.