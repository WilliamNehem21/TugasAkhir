The paper discusses the integration of Model-Driven Architecture (MDA) with Agile and Behavior-Driven Development (BDD) principles. Agile MDA processes embrace agile methodologies, such as test-driven development and immediate execution, and treat models similarly to how code is treated in typical programming paradigms. The paper outlines its structure as follows:

Section 2 introduces the broader context of BDD and Model-Driven Development (MDD). The paper then details a proposed UML profile and library in Sections 3 and 4, while Section 5 describes the development tool they have created. Section 6 addresses related work in this area, and the final section offers conclusions and musings on future research.

The study focuses exclusively on structural and behavioral constructs as defined by the fUML specification, omitting components like composite structures, collaborations, interactions, and state machines. It defines system structure using elements such as packages, classes, properties, associations, and operations. System behavior is defined through activities.

According to the MDA guide, Platform Independent Models (PIMs) can be used to generate code for various target platforms, with the goal to generate fully complete code that doesn't require developer-added placeholders. While structural class generation is relatively straightforward, coding the behavior of operations remains more challenging due to the complexity of element structures and action sequences.

For scenario descriptions, stereotypes "given," "when," and "then" are used to create scenarios and can be applied to any fUML action following a specific order. These scenarios can be created by different stakeholders such as customers, analysts, or developers, before the scenario is actually implemented.

Handling the representation of null values and properties with 0..1 or 0..* multiplicities are identified as particularly challenging when creating the 'then' part of the scenarios. To test for identical objects, the `TestIdentityAction` is used but this action limits the input pins multiplicity to 1..1. For properties with a multiplicity of 0..1, a null test must be performed first using fUML's `listSize` function before calling the `TestIdentityAction`.

The paper conveys that manually implementing scenarios with fUML can be tedious. Structured activities are important to maintain for successful model-to-text transformations compatible with structured programming languages like Java. The authors present their agile solution to simplify the creation of fUML scenarios.

Models can be further divided into fragments according to iterations and the developers in charge of the stories, which is advantageous for change management operations and for developers to manage their workload.

The authors' development tool, bUML, helps in automatically managing the story and scenario status, updating the project progress after scenario executions. Once all scenarios pass for a given story, the story status is updated to "completed."

Finally, the paper notes that, to the authors' knowledge, no existing works have combined BDD and MDD in the way they have. Comparing their approach with easyb—a specific BDD framework—they highlight that while there are numerous other BDD frameworks, the concepts remain consistent with those introduced in Section 2.