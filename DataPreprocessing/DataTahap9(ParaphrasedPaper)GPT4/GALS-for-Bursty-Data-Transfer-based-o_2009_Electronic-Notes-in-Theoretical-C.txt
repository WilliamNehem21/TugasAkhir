In this paper, we present an innovative burst-mode technique for Globally Asynchronous Locally Synchronous (GALS) systems designed to enhance performance in situations where data transfer is bursty in nature. We have applied this technique to develop a GALS-enabled hardware accelerator for a 60 GHz Orthogonal Frequency-Division Multiplexing (OFDM) baseband processor. Our simulation results illustrate that this new technique significantly outperforms traditional GALS implementations that use pausible clocking.

Wireless communication system design is becoming exceedingly complex, with a 5 GHz WLAN OFDM baseband processor currently at roughly 500k gates and a state-of-the-art 60 GHz OFDM baseband processor exceeding 23 million gates. With the industry aiming for 10 Gbps data rates, the complexity of these systems is set to increase tenfold. Moreover, such systems must be power-efficient and emit low levels of electromagnetic interference (EMI) to facilitate mobility and integration into a single System on Chip (SoC).

We detail the concept of our novel burst-mode GALS wrapper in the subsequent section. In Section 3, we delve into the implementation specifics of our wrapper and compare it with other GALS methodologies. Section 4 delves into how this concept is practically applied to a hardware accelerator for a 60 GHz OFDM baseband processor. We conclude our findings at the end of the paper.

One of the major issues with existing GALS interfaces is their inability to support data transfers at a one-to-one ratio with clock cycles, usually supporting transfers at a rate of one per two clock cycles or less. While a few interfaces can handle data bursts—transfers on every cycle of the local clock—they often face synchronization challenges during burst mode operations. Traditional pausible clock-based GALS solutions synchronize modules during every transfer, leading to undue overhead, which seems unnecessary when operating in burst mode.

Our burst-mode GALS technique remains scalable even when the system involves multiple masters and slaves. Nonetheless, if a slave block also serves as a master for another GALS module, its clock generator must be pausible, as explained in Section 2.

Crucially, synchronization is required only once at the start of a data burst, eliminating the need for continual synchronization, which gives it a distinct advantage over conventional pausible clocking interfaces. While the underlying concept is similar to that proposed by Plana, Bainbridge, and Furber (2004), our implementation is simpler yet achieves higher throughput.

Reference:
Plana, L. A., Bainbridge, W. J., & Furber, S. B. (2004). The Design and Test of a Smartcard Chip Using a Chain Self-Timed Network-On-Chip. In Proceedings of the Design, Automation and Test in Europe Conference and Exhibition (Vol. 3, p. 274).