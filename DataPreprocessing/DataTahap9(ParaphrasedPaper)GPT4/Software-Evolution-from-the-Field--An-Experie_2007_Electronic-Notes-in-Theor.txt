In recent years, we have played an active role in developing and updating Squeak, an open-source Smalltalk environment. The community has consistently struggled with balancing the need for updates while preserving compatibility. In this paper, we discuss the current state, the problems encountered by the Squeak community, and the improvements that have been implemented. We point out ongoing challenges and suggest them as potential areas for future research.

As developers and maintainers of Squeak, we contributed to the 3.7 and 3.9 official releases and were involved in the 3.6 and 3.8 versions. We faced typical software development issues such as bloated code and inadequate documentation, and also tensions between enhancing code versus maintaining existing functionality.

We summarize our experiences, adding to research on software evolution and open-source development. Our analysis includes the dynamics of Squeak development, the nature of its open-source status, and the examination of changes between releases based on the number of patches integrated.

Squeak.org's distribution supports various projects, ranging from educational platforms like Squeakland (targeting primary school educators and distributed widely in the US and Japan) and SmallLand (localized for Spain and focusing on code quality) to advanced web application development through Seaside. It's also used in Croquet, a 3D collaborative environment, and Tweak, a UI and scripting system. While these projects have different areas of interest, they all contribute to the diverse ecosystem around Squeak.

Squeak has evolved since its inception with no major financial backers, growing from a central group of developers to a more distributed community. We discuss code-level issues such as tangled code and dead code and the application of software engineering techniques to improve Squeak's evolvability, including systematic refactoring and deprecation mechanisms.

Going forward, efforts are focused on modularization, quality of tests, and the utilization of tools like SqueakSource, Monticello, and Mantis to help with project management and bug tracking. We discuss the need for automatic build tools, better modularity support, and the potential for a module system to improve structure.

Although the Squeak community has made substantial progress through modularization and increased testing, we acknowledge the lack of tools to analyze Squeak's codebase and assist in system improvement. Additionally, we underline the inherent difficulties in introducing changes while maintaining stability, and the lack of language features to support software evolution across versions.

In closing, we express gratitude for the financial support received for related projects and to the Squeak developers for their contributions. The paper presents the shared challenges of maintaining and evolving Squeak as a valuable context for future research efforts in the field of software evolution.