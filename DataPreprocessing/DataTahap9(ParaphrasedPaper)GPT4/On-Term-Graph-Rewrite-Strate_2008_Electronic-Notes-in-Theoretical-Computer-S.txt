In this academic work, the authors focus on term-graph rewriting, specifically for a subset of term-graphs deemed 'admissible'. An admissible term-graph is defined as one whose cycles do not contain defined functions. The researchers establish a syntactic condition ensuring that admissible graphs remain stable under rewriting and demonstrate the confluence of the rewriting process for these graphs, even when the rules permit collapsing.

Confluence is critical as it ensures deterministic and efficient expression evaluation through rewrite strategies, previously developed for orthogonal term rewrite systems (TRSs). The paper then explains how these strategies can be adapted for use with orthogonal constructor-based term-graph rewrite systems (TGRSs), using definitional trees to compute necessary redexes. The authors claim that their strategy is c-hyper-normalizing for admissible graphs and guarantees the shortest possible derivations.

The extended abstract outlines the paper as follows: a review of term-graph rewrite systems, the introduction of admissible term-graphs along with their confluence property, and the presentation of an efficient rewrite strategy. The paper concludes with final remarks.

An example provided illustrates the creation of admissible graphs through a step-by-step construction of term-graph nodes and edges.

The authors point out that computing with cyclic term-graphs can be complex even with orthogonal systems. They suggest admissible term-graphs as a solution that aligns with programming paradigms involving defined procedures and data structures and avoids meaningless cyclic expressions.

They clarify that within admissible graphs, concepts like 'outermost node' and 'outermost redex' are well-defined, with a clear path distinction between nodes.

The paper also discusses modified definitions of certain graph rewriting concepts to promote sharing in the left-hand sides of rules, enhancing pattern specialization by introducing branch nodes.

Lastly, the versatility of the proposed strategy is highlighted through its successful extension to parallel rewriting with weakly orthogonal systems and its adaption for other applications such as computing needed narrowing steps and handling non-deterministic functions in declarative languages. The authors are exploring further expansions of this strategy to broader contexts, such as prioritized term-graphs.