This paper presents a graph-based decision procedure for a calculus with sum and product types. Originating from the algebraic reasoning methods of functional programming in the Bird-Meertens formalism, the calculus examined can also be regarded as the internal language of a category characterized by binary products and coproducts, hence lending the decision procedure broader significance.

A node within this context is defined as a triple comprising a symbol (with defined arity and co-arity), a set of input ports, and a set of output ports, where the quantity of input (respectively, output) ports matches the arity (resp. co-arity).

The paper outlines the graph-rewriting system proposed and acknowledges the complexities in its definition, to be delineated in subsequent parts of the paper. The system addresses the manipulation of fusion and cancellation processes, highlighting the necessity for rules that govern the expansion and interaction within the graph to avoid divergence and ensure proper index restrictions.

The core of the paper establishes a local graph-rewriting system specific to sum-product networks, adopting ideas discussed earlier. The essence of graph-rewriting rules is captured; they consist of well-typed, well-formed finite nets that maintain the net interface, preserve input and output labelling, and avoid cycles on both sides of the rule.

One example, Definition 6.3, describes a network construction called join, which fuses a single-input, multi-output net with a specialized two-input, single-output node to create a larger net with two inputs and multiple outputs. This construction involves duplicated and interconnected elements from the originals.

Finally, the paper details the criteria for net reduction and normal forms. Indexed nodes within a network can persist in a normal form only if they rise to the top of the net or get trapped in an impossible commutation, as ensured by the criteria for well-formedness. Additionally, for general sum-product nets, the paper proposes a read-back procedure where a vector of inputs is transformed into a vector of outputs, with index-based management of data flow.

In summary, the paper establishes a decision procedure for navigating and manipulating sum and product types within a graphical framework, with implications for functional programming and the theory of categories.