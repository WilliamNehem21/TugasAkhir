The paper discusses the integration of textual and graphical modeling languages, focusing on UML, which typically uses graphical diagrams for model representation. The study explores the use of textual notations, conducting a comparative analysis of two integration methods: one based on grammar technology (grammarware) and the other based on model technology (modelware). Two versions of a textual language for Activity Diagrams, considered as a surface language, were developed to serve as case studies.

The paper presents the following structure:

- Introduction of relevant concepts (Section 2)
- Specification and embedding of the devised surface language (Section 3)
- Description and comparison of grammarware approach (Section 4) and modelware approach (Section 5)
- Discussion of other applications merging textual and graphical languages and model transformation (Section 6)
- Relationship of this work to previous research (Section 7)
- Conclusions and future research directions (Section 8)

The authors discuss key concepts such as control and object tokens, metamodel conformance, and the role of graphical representations in UML diagrams. They introduce the concept of a surface language that provides a textual notation alternative to graphical diagrams, and explain the OpaqueBehavior concept for specifying behaviors in different textual languages. 

The grammarware approach uses ASF+SDF language for transformations, which involves syntax definition and conditional rewrite rules. Drawbacks of the approach include limited compatibility due to varying XMI format interpretations among different tools.

The modelware approach, using the openArchitectureWare platform, supports transformations within a single environment, including model-to-text, text-to-model, and model-to-model transformations, with tools such as Xpand, Xtext, and Xtend. This approach avoids the import/export issues present in the grammarware approach but requires grammar modifications due to parsing limitations of the tool Xtext.

The paper discusses other related proposals for action languages but clarifies why the authors chose their specific approach, emphasizing the desire to create a simple alternative to activity diagrams without relying on external language constructs. It then examines additional transformation tools and languages, such as SGLR for parsing, TXL for tree manipulation, and TCS as an alternative to Xtext.

Finally, the paper highlights the advantages and challenges of each approach and suggests a future extension involving an intermediate language to overcome the current limitation to a single variant of XMI in the grammarware implementation.