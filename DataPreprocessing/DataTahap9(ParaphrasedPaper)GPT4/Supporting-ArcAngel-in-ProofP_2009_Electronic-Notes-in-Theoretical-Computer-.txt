This academic paper discusses the implementation and utilization of a tactic language called ArcAngel for conducting proofs and refinement in software development. The authors highlight how the language operates within the context of the ProofPower theorem prover, which is an extensible system based on Higher Order Logic (HOL) and has successfully been used for industrial-scale projects. ProofPower is particularly noted for its formalization of the Z specification language, enhancing its capability to handle software specifications and proofs.

In this paper, the authors focus on extending ProofPower to accommodate the ArcAngel language, aiming to make the process of software refinement and theorem proving more rigorous and systematic. A significant aspect of ArcAngel is its handling of nondeterminism, which allows for multiple possible outcomes during tactic application. This probabilistic behavior is fundamental to the language and is harnessed through its choice operator, represented as t1 | t2. When multiple paths of execution are possible, the system keeps track of all potential outcomes to resolve which path ultimately leads to successful refinement.

The paper outlines the principles behind applying tactics and laws in ArcAngel, where laws are predefined operations that can transform a program and potentially yield proof obligations. Tactics are essentially functions that map refinement theorems to lists of potential refinement theorems based on the laws. The application of tactics can result in either succeeding to refine a program or failing, which may require backtracking and exploring alternative paths.

The structure of the paper includes introducing the key concepts behind ArcAngel, detailing the design and implementation of the language within ProofPower, showcasing usage through an example, and discussing potential future improvements and extensions. The paper also presents the theory behind the construction of recursive tactics and how they are implemented within ProofPower, demonstrating the system's ability to automate many routine proof obligations.

Finally, the authors address the generalization and unification of ArcAngel with related languages like Angel and its variant for the Circus language, ArcAngelC. They detail how these developments pave the way for creating further extensions and for embedding additional derivatives of Angel within the ProofPower environment. In conclusion, the paper reflects on the implementation's success in offering a direct translation of ArcAngel semantics into ProofPower's framework, employing lazy evaluation for partial and infinite lists, and supporting recursive tactics through effective programming in ML (MetaLanguage).