This paper addresses the discussions around the benefits and limitations of different methods used for formalizing lambda-calculi, which are often based on subjective reasoning. To provide objective insights, the authors compare formalizations that utilize either de Bruijn indices or names from nominal logic, finding that the best approach depends on the specific task and goals of the formalization.

The paper argues that effective use of theorem provers for formal proof engineering often involves transcribing a proof idea from an initial sketch, rather than relying solely on automatic proof tools. The authors highlight the support Isabelle's Isar-language provides for this process of proof formalization.

Using the example of the substitution lemma in lambda-calculus, the paper demonstrates how techniques like de Bruijn indices and names from nominal logic can facilitate binder representation and reduce the effort required in formalizing proofs. The authors overview their formalization strategies for the narrowing and transitivity proof of subtyping, as posed by the POPLmark Challenge.

A detailed look at the formalized proof process shows that it differs from informal proofs by Barendregt in that it requires a strengthened induction hypothesis for proper handling within the de Bruijn framework. This strengthening makes routine treatment of lambda abstraction and application cases possible.

The study compares established and widely-used de Bruijn indices with the still-developing nominal logic work, represented by the nominal datatype package in Isabelle/HOL. Despite the success of de Bruijn indices in addressing problems in programming metatheory as seen in POPLmark Challenge submissions, experts have long been incorporating the necessary reasoning infrastructure, such as natural number arithmetic, into theorem provers like Coq and Isabelle/HOL. Conversely, nominal logic approaches are not yet widely supported outside of Isabelle/HOL, nor has there been extensive work to replicate nominal-based formalizations in other theorem provers.

The paper also notes the advantage of de Bruijn indices in not requiring classical reasoning in formalizations, whereas the nominal datatype package does incorporate classical principles. There is uncertainty about whether a constructive variant of this package offering similar benefits can be developed. Furthermore, the existing infrastructure for extracting programs from proofs is available for de Bruijn-based proofs in Isabelle, yet does not exist for proofs using the nominal datatype package.