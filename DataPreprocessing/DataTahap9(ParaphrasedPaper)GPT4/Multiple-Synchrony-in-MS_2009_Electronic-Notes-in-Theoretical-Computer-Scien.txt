This paper describes research driven by the need to create models for mobile application scenarios to automate test case generation. The research team utilized Motorola Labs' PowerToolkit, which can automatically create test cases from Message Sequence Chart (MSC) diagrams. However, modeling some multi-synchronization applications with traditional MSC resulted in diagrams that were difficult to comprehend or did not behave as expected. Despite this specific context, the research is not limited to one application.

The paper acknowledges that while various enhancements to MSC have been proposed, including synchronous messaging, no previous work effectively incorporated multiple synchrony or utilized Communicating Sequential Processes (CSP) as a semantic model for MSC. The advantage here is that CSP allows for automated reasoning.

The organization of this paper is as follows: Section 2 explains standard MSC basics; Section 3 delineates the extended MSC; Section 4 defines the semantics of MSC within CSP; and Section 5 offers conclusions, discusses applications, and suggests future avenues for research.

A significant contribution of this work is an extension to MSC to include synchronous communication, which simplifies the specification of interactive systems by abstracting away low-level handshake protocol details, thereby allowing designers to focus on high-level application communication. This extension includes an algorithm for converting extended MSCs to standard MSCs.

The paper introduces an approach for mapping asynchronous message implementation to a higher level of abstraction where synchronous communication events are represented as atomic. This mapping justifies the transformation algorithm proposed by the authors.

The semantics of an MSC diagram is then constructed by combining two dimensions: the event order within diagram instances and the send-receive relationship. This is related to the CSP formalism, where processes are combined in parallel to form the ordered sequence of events. The extended MSC incorporates synchronous messages, enabling multiple instances to synchronize on the same event and maintain the capability to incorporate both synchronous and asynchronous messages within a diagram.

The authors illustrate their extended MSC through a model of a conference call scenario, which uses asynchronous messages to initiate the call followed by synchronous messages to establish communication between multiple participants.