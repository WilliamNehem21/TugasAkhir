The contemporary smartphone surpasses its traditional role as a mobile telecommunication device, evolving into a versatile computer utilized for numerous applications such as personal information management, web browsing, media playback, and gaming. Many of these functions often require network access, which, unlike computational resources like processor time or memory, incurs external costs influenced by mobile carrier pricing structures. Controlling this network usage is crucial for users due to financial implications.

This paper presents the following structure: Section 2 covers important information about the Mobile Information Device Profile (MIDP), while Section 3 introduces a resource management library developed for this framework. Section 4 expands the library by integrating policy management, and Section 5 discusses the security features provided by the library along with a potential deployment scenario. Section 6 reviews related work in the field, and the paper concludes with Section 7.

To effectively manage messaging resources, enhancements to MIDP and the Wireless Messaging API (WMA) are required. Modifications include the addition of a new method to the WMA's MessageConnection interface and updates to the MIDP's Connector.open method to support the new functionality. Adding support for new types of resources is straightforward, involving the expansion of the abstract Resource class.

Initially, user interaction was necessary for enabling the selection of resources, but this has been developed to support more dynamic policy oracles beyond user input. Despite concerns about potential security breaches and information leaks—for example, access to sensitive data from an address book—the paper argues that this risk is mitigated through the library's design for safely handling MIDlets (MIDP applications).

Trustworthiness of the resource management library is critical because its integrity cannot be easily verified. Since MIDP does not support downloading trusted libraries, MIDlets must include the resource management library within their own JAR files. A credible third party, such as a network operator, is expected to endorse the MIDlet by signing it to establish trust.

The paper also touches upon the wider context of runtime monitoring within Java to enhance software reliability and mentions related frameworks like JRes, J-SEAL, and JRAF, as well as the Real-Time Specification for Java (RTSJ), which provide varying levels of resource monitoring. The resource management API presented in this work differs from these frameworks in that it focuses on enhancing security rather than solely aiding resource-adaptive applications.

Furthermore, runtime monitoring can be employed to verify compliance with safety properties expressed in temporal logic. Tools like JPAX can automate this by observing program behavior in conjunction with a finite automaton. However, this approach may be insufficient for tracking more complex resource protocols involving potentially unbounded counting.

The culmination of this research is a Java library designed for MIDP mobile phones, to track and monitor the consumption of external resources (e.g., sending text messages). This library offers an improved user interface, flexible policy control, and safeguards to prevent resource misuse on mobile phones.