This study outlines a method of software component-level testing introduced by Ericsson AB, which aims to detect defects earlier and reduce costs in the software development process. By implementing a test automation tool and Test-Driven Development (TDD) at the component level—where tests are written before the product code and focus on component interactions via XML rather than individual methods—the department expected to see notable efficiency gains.

Analysis of past improvement attempts and a thesis study on test efficiency, comprising both qualitative and quantitative research, supported the implementation. The study identified later defect detection in the development cycle as much more costly and highlighted a lack of focused testing on isolated components as a key area for improvement.

Insufficient testing tools and the tendency to skip thorough testing due to high deadline pressures or delayed schedules were cited as reasons for previously inadequate testing. The paper provides a detailed description of the tool, its integration with the development process, and the benefits that were anticipated, including the potential for decreased development lead times.

The decision to write test cases in C++, the same language used for product code, was made to eliminate the need for additional training, leverage the language's robust features, and utilize existing programming tools.

Challenges arose in applying the new basic test concept to products with a history of untested legacy components. The approach was to write tests only for new or modified functionality and to progressively cover more legacy code over time.

Tracking metrics like the number of test cases developed and passed increased the adoption of the new testing approach. The study emphasized several lessons learned, such as the importance of adhering to agreed processes, not relying solely on test tools to solve problems, and the understanding that test automation benefits might not be immediately apparent due to initial set-up costs.

The paper concluded that test automation should be incrementally introduced and maintenance costs minimized for long-term success. While test case generators can produce many test cases quickly, they may not always be cost-effective due to the manual effort involved in specifying expected results and verifying that they test the right functionality.

Finally, the study asserts that a mature development process and management commitment are indispensable for successful test automation integration. The introduction of the new tool and its TDD approach at Ericsson led to an estimated decrease in project lead times and a significant reduction in fault rates, demonstrating the potential benefits of this testing strategy.