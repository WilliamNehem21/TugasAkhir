The swift expansion of the internet has emerged as a critical focus for businesses, especially considering the heightened need to protect the increasing volumes of online data from security threats. Companies depend heavily on the internet for essential operations like banking, which has made web application databases prime targets for cyberattacks. One of the most notorious types of assaults is the SQL injection (SQLi) attack, notorious for its ability to illicitly access and manipulate databases, potentially causing service disruptions.

The academic paper outlines its contents as follows: an overview of related works, details of the proposed defense method, implementation and experimentation, results and discussion, security analysis, and concludes with future research directions.

SQLi attacks rank at the top of web application threats, as highlighted by OWASP in 2021. Significant research has been directed at detecting and preventing SQLi, with proposed solutions focusing on encryption and encoding strategies.

Raj et al. recommended using a reversal insertion algorithm (RIA) for data storage, which involves reversing the input and inserting special characters between letter pairs. Their method, although time-consuming, was only tested on login pages.

Namdev et al. advocated for securing logins using a hash technique, where XOR operates on hashed usernames and passwords. This method's limitation lies in its narrow scope, only defending against tautology attacks and requiring additional server resources.

Zhu et al. offered a system based on modular automation for SQL statements, utilizing precompiled lists of known anomaly patterns, which introduces latency and storage overhead due to pattern extraction.

The paper's proposed method employs encryption to safeguard databases against SQLi, utilizing searchable encryption to balance privacy protection and decryption efficiency. It acknowledges the vulnerability of the Data Encryption Standard (DES) to brute-force attacks, pointing to the Advanced Encryption Standard (AES) as a more resilient alternative, with a default key size of 128 bits. The output of SHA3 encryption exceeds this key length, adding a layer of deception to thwart man-in-the-middle attacks without storing unnecessary data.

Different attack categories are addressed: union attacks requiring console access to unprepared victim databases, data manipulation via database procedures, and input-based attacks on the website, including tautologies, comments, and piggybacking.

The experimental setup included an Apache server, PHP compiler, and MySQL, using local hosting to compare web application performance in scenarios with and without attacks.

The method's effectiveness against SQLi was benchmarked against other approaches, revealing that it adeptly blocks attacks regardless of the platform or language, making it suitable in various environments such as online banking. The research intends to explore the method's viability in cloud architectures and its resilience to SQLi across diverse network topologies.