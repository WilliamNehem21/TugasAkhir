The interactive view of computation challenges traditional ideas by positing that computation involves communication (input/output) concurrently with processing, not strictly before or after. This new conceptual model, which diverges from conventional concurrency theory and computational theory, could revolutionize our understanding of what computation entails and how it's represented. Interaction Machines, enhancing Turing Machines with interactive capabilities, better reflect the realities of concurrent systems and may reconcile these two realms of theoretical computer science.

Traditional computer science literature has implicitly held a narrow view on what constitutes an algorithm, typically within the scope of Turing Machines. However, some early texts from non-theoretical domains more broadly defined algorithms to include practical problem-solving activities, such as creating potato vodka, filling a ditch with sand, or navigating home from work.

The Association for Computing Machinery's Special Interest Group on Algorithms and Computation Theory (ACM SIGACT) recognizes that theoretical computer science has evolved minimally at the undergraduate level over time compared to its practical counterpart. Despite theoretical advancements in complex areas such as online and distributed algorithms, Arthur-Merlin games, and interactive proofs, the discipline still predominantly adheres to a function-centric perspective of computation and problem-solving.

In recent applications, autonomous software has become necessary in contexts where user control isn't feasible, like interacting web services that have revolutionized business operations through standardized tools. These services promote a vision of self-sufficient, interoperable software components providing valuable functions. In dealing with emerging problems and complexities, agent technologies have become essential tools.

Agent paradigms mark a significant shift in software development post-object orientation, finding relevance across IT sub-disciplines. The integration of agent technology is poised to significantly influence IT industry competitiveness and the conceptualization and design of future computer systems.

An agent is characterized as an autonomous, problem-solving entity able to operate effectively in dynamic and open spaces. Agents, distinct from mere objects in software, are self-governing units with decision-making capabilities regarding their actions and interactions. They cannot be directly controlled like objects but can be created using object-oriented techniques. Agents play key roles in multi-agent systems, where they may interact or cooperate with other agents, including humans, with potentially disparate objectives.

Agent-based approaches have extended their influence beyond traditional domains; for example, they offer improved resource allocation methods in complex environments like utility networks or logistics. Moreover, agent simulations could provide insights into elaborate issues, such as climate change effects or socioeconomic outcomes of public policies.

Designing large-scale systems that rely on shared knowledge is fraught with unresolved issues of interaction. Emerging systems like the semantic web, computational grids, and extensive multi-agent systems demonstrate the challenges inherent to facilitating complex activities and goals for vast communities, signaling that the exploration of interactive elements is critical for success.