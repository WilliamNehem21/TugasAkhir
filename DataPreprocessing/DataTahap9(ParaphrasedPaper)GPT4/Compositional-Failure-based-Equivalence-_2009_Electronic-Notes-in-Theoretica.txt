In the academic paper, the authors discuss constraint automata as the foundational operational semantics behind Reo specifications. The paper begins with a brief review of Reo before delving into the established definition of constraint automata, which are recognized as acceptors for languages of timed data streams. This definition is expanded upon in the paper to enable constraint automata to be viewed as labeled transition systems. With this perspective, it becomes possible to interpret any labeled transition system as a constraint automaton.

Furthermore, the paper introduces two new operators for manipulating constraint automata: join (or production), which merges two constraint automata based on shared port names, and hiding, which removes a specific port name from all transition labels within a constraint automaton. These operators extend the original framework while preserving previously proven properties.

The traditional definition of constraint automata, referred to in the text as "definition 3.2," serves as a starting point. However, the paper primarily employs an updated version of this definition, dubbed "definition 3.3." This revision allows the authors to apply and refer to the concept of constraint automata more flexibly throughout the paper. The new definitions of the composition operators presented are designed to be broader generalizations of the original ones while maintaining the validity of established theorems and conclusions.