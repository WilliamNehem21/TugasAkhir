The paper describes an ongoing project to enhance assume/guarantee (a/g) reasoning for heap-manipulating programs, which is complex because procedures can modify the heap in various ways and specifying these effects is not straightforward. The authors have developed a method to automatically generate post-conditions and estimate side-effects for non-recursive procedures. This method is sound and uses a combination of theorem proving and abstract interpretation.

The focus is on object-oriented programs that use the heap extensively and can redefine behaviors via inheritance. However, the paper leaves handling inheritance to existing methods, and it simplifies the scenario by considering only single-threaded programs.

The authors limit their attention to non-recursive procedures, allowing an analysis prior to usage. Each procedure is analyzed once using an abstract value that represents all possible stores that satisfy its precondition. The outcome is a safe approximation of the post-condition that includes potential side-effects. This also enables verification of safety properties and user-defined assertions.

They employed two operations, 'assert' and 'assume,' using a theorem prover. 'Assert' verifies if all concrete stores represented by an abstract value satisfy a given formula. 'Assume' refines an abstract value by removing any stores that do not satisfy a formula.

The paper explains how the analysis can show the absence of memory leaks and null dereferences for any program that meets the precondition. Moreover, they model dynamic memory allocation with an additional unary relation and simplify specifications to handle only relevant data during analysis.

The analyses maintain information about the heap before and after procedure calls, using a two-vocabulary store that contains dual versions of each binary relation symbol to represent the store's state before and after the call.

The authors use the TVLA system and the Simplify theorem prover to evaluate their method, which effectively established the correctness of their example. They have modeled transitive closure with a relation and axioms. The team is developing a Java front-end for further experiments with Java methods.

In summary, the paper reports on a systematic approach to reduce the complexity of assume/guarantee reasoning for analyzing heap-manipulating programs by automating the generation of post-conditions and side-effect estimations for non-recursive procedures.