The article discusses the concept of extending simulation activities within specific domains to an "animation view." This view allows for the visualization of scenarios in ways that are more aligned with the practical application than traditional abstract, graphical representations. To define this view, the existing visual modeling language is supplemented with additional symbols representing elements from the application domain. The simulation rules for a given visual model are then translated into "animation rules" tailored to the animation view, using a process called simulation-to-animation (S2A) model and rule transformation. This ensures a consistent matching between simulation steps and animation steps. The visualization of these steps within the animation view is referred to as "animation," as opposed to "simulation," which is the depiction of changes within the abstract graph-based model.

The structure of the paper is outlined as follows: A practical example using an animation view for a radio clock statechart is introduced in Section 2. Section 3 covers fundamental concepts of simulation, animation, and the transformation of models and rules. Section 4 delves into the main findings regarding the semantic correctness of S2A transformations. It highlights a new contribution revealing that every S2A transformation has a corresponding backward A2S transformation, and establishes the semantic accuracy of A2S transformations in scenarios not involving negative application conditions (NACs), with discussions on how to adapt the approach for NACs. Section 5 compares the discussed methods with existing literature, and Section 6 concludes the paper.

The paper's goal is to generate a full animation specification, including animation rules, from the simulation specification. This is achieved by defining a process that applies S2A transformation rules to simulation rules, creating a set of animation rules. The definition reviews the process for rewriting rules with other rules.

The notion of rule rewriting and its application to transformation processes is discussed, especially regarding cases where S2A transformation rules are not applicable to the interface but can still add animation symbols to simulation rules. The paper also describes how visualization symbols are added based on the current state of the pointer, focusing on basic states without substates, while superstates are ignored as they represent transient states without explicit visual representations.

The article validates the semantic correctness of the S2A transformation through theorems, asserting it as a behavior-preserving model and rule transformation.

Finally, the paper critiques existing reactive animation approaches, such as those specified by UML diagrams and implemented via software like Macromedia Flash or Director. These methods, which operate at the implementation level, are not formally specified nor proven to be behavior-preserving. It also notes that existing Petri net tools and case tool enhancements are usually restricted to specific modeling languages.