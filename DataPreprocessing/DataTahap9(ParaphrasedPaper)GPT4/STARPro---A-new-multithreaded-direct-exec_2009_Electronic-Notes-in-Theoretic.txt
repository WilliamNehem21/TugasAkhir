This paper introduces a novel processing approach tailored for executing Esterel programs—a programming language for designing reactive systems. Typically, Esterel programs are transformed into either software for general-purpose processors or hardware netlists. In contrast, this research proposes a unique reactive processor, called STARPro, that executes Esterel programs directly. This method bridges the benefits of software flexibility and the performance advantages of hardware solutions, leading to more compact code and faster execution times compared to traditional methods.

STARPro is described as a pipelined, multithreaded processor designed to handle the synchronicity and concurrency inherent in Esterel programs. It effectively manages threads, scheduling, and includes a hardware preemption unit to address Esterel's abort constructs. The authors introduce a new intermediate format: UCCFGSD (unrolled concurrent control-flow graph with surface and depth), enhancing the representation of an Esterel program's structure within the compiler, which aligns closely with Esterel syntax and streamlines translation into STARPro assembly instructions.

Comparison of STARPro's performance with another reactive architecture, KEP3A, revealed improvements in worst-case and average reaction times, alongside a reduction in the processor's complexity in terms of logic gates used, while still maintaining code size efficiency.

Additionally, the paper contrasts STARPro against virtual machine (VM) approaches and a series of custom-designed processors known as KEP, emphasizing the superior code size and performance of reactive processors over such alternatives.

The STARPro architecture incorporates a scheduler for managing thread priorities and local ticks, as well as a bus system (RX) for interfacing with I/O signals. Furthermore, STARPro's preemption handling is simpler than similar designs such as KEP’s preemption watchers, due to reliance on compiler correctness rather than runtime hardware behavior.

Moreover, the processor is configurable and memory-mapped for I/O signal manipulation, bypassing the need for dedicated instructions for strong immediate aborts. Code generation from UCCFGSD to STARPro assembly is straightforward, simplifying compilation.

The paper concludes with benchmarks from an established suite for Esterel, demonstrating the performance gains of STARPro over KEP3A in terms of reaction times and code size, while highlighting the benefits of a pipelined architecture.