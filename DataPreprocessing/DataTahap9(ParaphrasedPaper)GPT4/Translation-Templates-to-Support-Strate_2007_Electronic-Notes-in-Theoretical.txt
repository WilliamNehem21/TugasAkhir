The process of creating strategies for verifying various properties in a theorem prover naturally unfolds in at least two stages. Initially, there is the stage of concocting problem specifications for the prover, including settings and claims that require validation.

During this initial phase, there is a push-and-pull between the user's ease of specification and what is most straightforward for the theorem prover to process. The way users naturally describe specifications may not align with the most efficient format for a theorem prover to handle. To address this, an intermediary layer that translates user-friendly specifications into a prover-friendly format is beneficial.

This paper concentrates on incorporating the theorem prover PVS with the TIOA (Timed Input/Output Automata) framework. PVS is an excellent fit for theorem proving in TIOA thanks to features such as higher-order logic, which allows automata states to be represented with variable functions. For example, a higher-order logic permits the description of states that depend on uninterpreted type parameters, such as 'process' types in concurrent systems. Additionally, PVS supports saved, rerunnable proof scripts and automated assertion labeling, which are useful for constructing proof steps approximating high-level hand proofs.

The paper is divided into several sections, with Section 2 comparing this work to other efforts, Section 3 providing background on TIOA and PVS interface TAME, Section 4 describing the TIOA framework and language, and Section 5 explaining templates developed for TAME that make specifying and reasoning with PVS strategies more efficient. Section 6 discusses the evolution of the TIOA-to-PVS translator and its focus on producing translations that facilitate strategy development without the need for users to modify their TIOA specifications excessively.

Tools for translating IOA language into different theorem provers existed before, but this paper introduces a TIOA-to-PVS translator designed specifically to support developing strategies for proofs.

The paper discusses various translation schemes and strategies for handling issues such as reasoning about starting states and dealing with quantifiers. Solutions are provided, like using separate axioms for translation or modifying translation schemes to reduce complexity. It also details how TAME supports theorem proving in various settings, such as analyzing distributed and concurrent systems using TIOA specifications.

Finally, the paper underlines the challenge of providing efficient theorem proving support in a user-friendly way without compromising on the natural expression of models. By adhering to a set of templates during specification translation from TIOA to PVS, the authors argue that it's possible to maintain a natural form for the user while enabling efficient reasoning with domain-specific proof steps in the theorem prover.