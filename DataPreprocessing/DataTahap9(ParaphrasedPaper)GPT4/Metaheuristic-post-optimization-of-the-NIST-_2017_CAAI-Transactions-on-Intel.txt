This academic paper discusses the complex task of creating Covering Arrays (CA) with the fewest number of rows, which is often met with challenges due to redundancies in the combinatorial interactions. To address these redundancies, the paper introduces a Metaheuristic Postoptimization (MPO) approach comprised of a Redundancy Detector (RD), a Row Reducer (RR), and a Missing-Combinations Reducer (MCR). The MCR, in particular, uses a Simulated Annealing (SA) algorithm. The study's novelty lies in its application of MPO to a dataset of 21,964 CAs from the National Institute of Standards and Technology (NIST) repository, where it achieved the significant accomplishment of establishing 349 new upper bounds.

Covering Arrays (CAs) and Mixed Covering Arrays (MCAs) are critically important in various fields, with a prominent application in software testing. These structures are instrumental in identifying unexpected interactions between components that can lead to software faults.

The process of optimizing non-optimal CAs (those with more rows than the theoretical minimum) involves the potential for row reduction since some interactions are covered multiple times. By using RD, RR, and MCR, the paper's MPO approach improves almost all examined CAs and breaks new ground with its results.

The paper details its methodology and the MPO approach, including the workings of the Redundancy Detector, Row Reducer, and the Missing-Combination Reducer. It also describes the comprehensive results of applying MPO to the entire NIST repository of CAs.

In the Row Reducer algorithm, a greedy approach is taken to find a row to remove that minimizes the number of missing combinations. The Missing-Combinations Reducer, using SA, aims to eliminate any missing t-tuples. The SA algorithm benefits from tailored neighborhood functions, a cooling schedule, an initial temperature, a decreasing function for temperature, a final temperature, and a finite number of iterations.

The cooling schedule parameters, especially the static geometric cooling schedule controlled by a parameter and the static number of iterations, are crucial to the outcome of the algorithm. Furthermore, the "frozen factor" (an additional parameter) is introduced as an alternative termination criterion to prevent stagnation in the search process.

Finally, the paper references other studies that applied Simulated Annealing to construct Mixed Covering Arrays and fine-tune algorithms, indicating the broader context of its metaheuristic application in optimization problems.