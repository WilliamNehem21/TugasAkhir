In recent years, there has been extensive research into safeguarding sensitive data against unauthorized access in both systems and networks. Information is typically secured through access control policies that restrict data access by different entities, such as users and processes. Access control policies differ in adaptability, with some allowing entities to modify their own data rights while others, such as mandatory policies, do not.

For instance, multilevel security, a stringent policy, assigns entities and data to a hierarchy of security levels and prohibits access to data at a higher security level. This policy aims to prevent inside threats, like Trojan horse attacks, but data can still be indirectly leaked by such programs.

To analyze these issues, a software tool provides a visual interface to inspect processes, enhancing usability through syntax highlighting and customizable fonts and colors.

The tool incorporates assumptions about protocol security, where users at a certain level, denoted 'L,' are considered trustworthy, while the network, at level 'H,' is controlled by a potentially malicious environment. To evaluate protocols, extra observable actions at level 'L' are introduced to verify that certain actions take place in the correct order regarding integrity.

Another focus is on confidentiality, where data is classified into different levels. Specially marked areas called 'boundary ambients' confine confidential information. Leaks occur if information from a 'high' level area escapes a boundary, leading to vulnerability to attacks.

In the research, an improved abstract domain is proposed to distinguish between secure and insecure nestings within security boundaries, aiming for better control flow analysis and detecting undesired boundary crossings or information leaks.

The results of the analysis are interpreted through a post-processing module, which views information flows as potential leaks from protected areas to an untrusted environment. 

The tool in question, called 'banana,' is developed in Java, utilizes object-oriented modularity, and is web-browser compatible, designed as an applet. A tutorial is provided on the tool's website.

The model also includes a depiction of the server as a series of sub-ambients representing different stages of verification. To ensure the correct sequence of these phases, the server and client are intricately modeled. An intruder, on the other hand, attempts to disturb the sequence by skipping a phase, such as obtaining items without payment.

By labeling sensitive parts of the process as 'high ambients,' the tool helps determine if the process is secure and identifies which parts of the system should be labeled as boundaries to enhance protection.

Finally, the tool's ability to verify process integrity was demonstrated through a proposition, leading to future investigations that may generalize these results beyond individual systems. The paper closes with acknowledgments to various individuals for their contributions to the research and tool development.