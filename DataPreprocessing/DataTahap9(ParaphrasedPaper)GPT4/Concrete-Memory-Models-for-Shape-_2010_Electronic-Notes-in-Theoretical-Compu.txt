Shape analysis aims to understand the structure and behavior of memory in computer programs during runtime, specifically focusing on more nuanced details than simple checks for aliasing or null pointers. It provides a higher level of detail and accuracy for a variety of uses, such as optimizing compilers, ensuring program reliability by avoiding errors like illegal pointer use, proving program correctness, and facilitating automatic parallelization of code.

The programming languages C, C++, and to a lesser extent, Ada, offer rich pointer operations, including the ability to have pointers that point within objects, perform pointer arithmetic, and access memory addresses directly or indirectly (C, C++), as well as reference parameter passing (C++, Ada).

Previous analyses like TVLA were developed with Java-like languages in mind, while others, such as the separation-logic-based XISA, were designed for C subsets. However, the memory models used in shape analysis are often abstract, lacking a detailed explanation of the concrete memory representations, making it challenging to apply these analyses in different scenarios or to understand their limitations.

A key assumption in the discussed semantics is that expressions are statically typed. However, with the introduction of type casts, a form of dynamic typing is introduced, which is not handled by the current models. To address this, one would have to assume knowledge about the internal representation of types—information which might be provided by the Application Binary Interface (ABI)—and the memory model would need to track individual byte values.

The paper further classifies concrete, store-based memory models according to two criteria: how pointers are stored and how offsets are represented. A compact set of semantics for a subset of the C language called 'Clight' that accommodates arrays and pointer arithmetic is provided for each of the four memory models. The typical semantics are encapsulated within their standard memory model. In contrast, the object memory model, often used in shape analysis, leads to significant semantic limitations, which the authors propose to mitigate through additional instrumentation.