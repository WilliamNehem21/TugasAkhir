This paper discusses the use of rewriting strategies to define and separate the application of program transformation rules. By doing so, program transformation components can be created generically, which can then be specialized through fusion techniques applied to specific strategies.

The authors focus on how the generic innermost rewriting strategy can be made more efficient by fusing it with the transformation rules it applies. This optimization process and the programs it targets are specified in the Stratego strategy language. The optimization leverages small transformation rules, which are applied locally and selectively within program contexts through the use of strategies that are aware of rule application contexts.

Conventional program optimization involves applying transformations throughout a program, whereas the optimization style proposed in this paper involves combining many small transformation steps with precise strategies to achieve the impact of more complex transformations on targeted program parts.

The paper is structured as follows: Section 2 explains Stratego's basics and its generic specification of innermost reduction, Section 3 presents an optimized version of this strategy, Section 4 illustrates the derivation of the optimized specification from the original one, Section 5 discusses the Stratego implementation of optimization rules, and Section 6 concludes the paper.

Stratego, the language described, separates logical transformations (captured by rewrite rules) from the control of their application (managed by rewriting strategies). Rewrite rules describe basic transformations on terms and apply when a pattern matches a term. Strategies are defined to exert more nuanced control over when and where transformations are applied, avoiding exhaustive and potentially problematic normalization of terms and obviating the need for extra constructors or rules.

The paper illustrates how to optimize the innermost strategy by recognizing specific strategy expressions patterns and using the Stratego overlay mechanism for abstraction. It details optimization steps such as differentiating normalizing rules from local rules and removing unnecessary applications of certain constructors.

The discussion extends to cases where strategies optimize programs not inherently defined with strategies, alongside the mention of 'humble transformations' commonly seen in transformation-based compilers.

Overall, the paper proposes that program optimization can be refined through the use of strategic local transformations and that this approach has wider applications, with potential connections that merit further exploration.