This paper introduces a novel programming language called MGS, designed for simulating biological processes that require concurrent computation of state space and the system's state. MGS unifies various computational mechanisms stemming from biology and chemistry, such as GAMMA, CHAM, Lindenmayer systems (L-systems), P systems, and cellular automata. 

In MGS, computation occurs through transformations, where a subcollection B within a collection A is replaced by another collection C. C's formation is based on B and its neighboring elements, and the substitution takes into account the shape of the collections. Transformations can be specified using a pattern language that leverages the neighborhood relations established by the collection's topology. The paper highlights multiple ways to control these transformations.

The paper also discusses the difficulties in pre-determining the phase space in dynamic systems (DS) with a structure that changes over time, which is common in various biological modeling situations, such as plant growth and cell development.

MGS aims to abstractly represent four computation models (CHAM, P systems, L systems, and CA) within its language structure, and readers are expected to have some familiarity with these models. A brief overview of these models is provided.

MGS introduces topological collections representing the state of a DS, with elements reflecting entities or messages. A subcollection symbolizes interacting entities and messages. Transformations update the state of entities and possibly affect others.

MGS is described as a dynamically typed functional language that treats collections as new types of values and transformations as rule-defined functions. The language supports functional applicative programming without side effects, though it also includes some imperative features.

Collection types affect operations, with monoidal collection types being particularly flexible. MGS records are a special kind of collection mapping names to values and can be used for fields with dot notation.

The transformation rules in MGS provide the primary computation method by matching and replacing subcollections. Transformations can apply rules in parallel, and the rule set can be controlled for finer execution.

In addition, MGS allows for different transformation application modes, including stochastic and asynchronous modes, which influence rule selection based on probability or single rule application per step, respectively.

The paper discusses P systems as models of nested multiset rewriting and L systems for simulating multicellular organism development through grammar-like parallel derivations with optional parametric rules.

For cellular automata, MGS accommodates rule application on individual cells, considering neighborhood conditions.

Finally, gratitude is expressed to reviewers, stimulating discussion partners, and supporting organizations. The paper includes references to works by Fontana and others on algorithmic chemistry and previous work by Giavitto and Michel on data structures and their approximation domains.