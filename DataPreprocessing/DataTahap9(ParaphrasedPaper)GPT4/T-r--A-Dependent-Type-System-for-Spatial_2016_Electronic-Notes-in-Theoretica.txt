This research introduces a dependently-typed system for LLVM Intermediate Representation (LLVM IR) to maintain and check pointer bounds, aiming to prevent spatial memory safety issues like buffer overflows. This hybrid approach of static and dynamic analysis enhances spatial memory safety for languages compilable to LLVM, such as C and C++.

Previous methods to improve C memory safety typically involve manual bounds management and program instrumentation. Deputy, for example, uses dependent types for compiler-aware bounds annotations, easing the creation of checks to prevent misuse.

The paper is structured in the following way: background information is presented, followed by an overview of LLVM IR, a detailed description of the dependently-typed system, its integration within LLVM, and its specific type rules and operations. The paper then concludes with a summary and discussion of future directions.

It is important to note that the scope of this research is confined to spatial memory safety, eliminating out-of-bounds access, and does not include temporal memory safety, which prevents access to unallocated or deallocated memory. The latter can be managed using other strategies like conservative garbage collection.

Approaches to memory safety differ in the granularity of memory safetyâ€”the basic unit considered for safety checks. Some approaches allow for overflows within data structures as long as they do not exceed the structure's boundaries, whereas this research adopts a stricter standard, considering individual variables and fields of structures for safety.

Dependent type systems range in expressiveness. While some languages allow any expression in types risking undecidability due to the possibility of non-terminating expressions, others limit the types of expressions, thereby ensuring decidability but at the cost of expressiveness.

The present research employs a strictly expressive approach catering to the needs of outlining bounds in C, where LLVM IR's architecture, with its typed assembly-like syntax and static single assignment form for registers, conveniently supports extensions for analysis and transformation. The LLVM framework's flexibility is highlighted due to its language-independent design and its various backend options for different architecture translations.

The proposed system operates within the LLVM IR's structure, where memory access is conducted via typed pointers, and branching instructions are determined by boolean conditions or occur unconditionally.

By enhancing LLVM IR with dependent types, the research contributes a significant step towards safer memory utilization across languages that can be translated into LLVM IR.