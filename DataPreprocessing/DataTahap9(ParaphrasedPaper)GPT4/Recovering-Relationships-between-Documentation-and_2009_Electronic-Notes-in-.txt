The academic paper discusses the use of information retrieval (IR) techniques for establishing traceability links between software documentation and source code. Latent Semantic Indexing (LSI) is used to transform both the documents and code into term-document matrices, capturing their underlying meanings to compute similarities. The paper notes that source code often includes unique tokens like class and method names, while documentation can be hierarchical, attributes that are essential for software engineering and refining traceability links.

The paper is divided into several sections. Section 2 provides an overview of IR-based recovery methods, while Section 3 describes the main framework for the recovery process. Section 4 highlights the unique aspects of documentation and source code, proposing strategies to improve the model's accuracy. In Section 5, the proposed approaches are compared with previous work through experiments and parameter tuning analysis. The conclusion and future work are outlined in Section 6.

Extracting relationships between documents and code resembles an IR query, with code serving as the query terms and documentation as the literature. After preprocessing steps like case conversion and removing stopwords, document similarities are calculated using IR models to generate a ranked document list. An underlying assumption is that code identifiers are often named with meaningful words that also appear in the documentation. This was validated by checking software files and commercial products, finding almost all identifiers meaningful.

The Vector Space Model (VSM) views queries and documents as term vectors, where spatial similarities reflect textual similarities. LSI, which considers word relationships and can handle synonymy and polysemy, makes preprocessing simpler by not requiring stemming.

Comparative experiments showed that the probabilistic model outperformed VSM, but when Marcus et al. used LSI, precision and recall rates improved dramatically. However, the application of these IR models to software engineering requires considering additional specialized features present in documentation and source code, such as UML diagrams and structural entity relationships.

The paper describes a detailed preprocessing procedure for source code identifiers and document conversion into plain text. Lower-level documents, which often include code elements like class and method names, act as a bridge to higher-level documents, creating an iterative process for refining traceability links.

Experiments with different threshold values and weight assignments to comments indicated that accuracy cannot be improved by arbitrarily increasing weights. Manual effort is necessary to handle thesaurus entries for synonymies and abbreviations, and preprocessing remains a complex task that needs more focus. Future work aims to exploit more software-specific characteristics and conduct experiments on large open source projects using the improved IR approach for better precision in traceability link retrieval.