The paper outlines an approach developed as part of the FONDUE software development methodology for specifying system behavior during the analysis phase, using an example of a Drink Vending Machine (DVM). The approach utilizes operation schemas defined by preconditions and postconditions expressed in Object Constraint Language (OCL) with some modifications, coupled with a protocol model that captures the sequence of system operations using UML protocol state machines.

A concept model, functioning as a distinct class model, details the relevant concepts, relationships, and actors within the system without attributing behavior to the classes. This model strictly represents the problem domain, with actual software component design deferred until later.

The behavior of the system is explicitly described by combining the refined operation model with the protocol model derived from use cases. This combined behavior model provides a precise system specification.

The DVM case study describes a reactive system composed of a controller with peripheral hardware devices communicating through asynchronous messages. Ordering constraints for these messages are detailed by the protocol model, and their effects are laid out using operation schemas.

For the DVM environment, classes reflect the problem domain's concepts rather than software entities. For example, the 'Money Box' is modeled as two separate coin collectors working in tandem, and beverage shelves are associated with specific drink types and prices. Actors in the environment model include users and physical devices, which can be multiples of a kind, indicated by a star notation.

The protocol model directs the temporal ordering of operations, with each message from the environment triggering an operation. Transitions between states occur through events that align with operations, and input events not matching any transition are ignored. This describes a system's dynamic behavior on receiving events like inserting money, ejecting money, or selecting a drink.

Conditions not captured by the protocol model, such as updating displays after inserting money, can be articulated using OCL constraints, incorporating constructs like 'receiver^message' for indicating messages sent during operation execution.

The paper also introduces the use of 'sender' in specifications, which, though not part of the standard OCL, has proven beneficial for reflecting the initiator of an operation. This becomes especially useful in the case of updating internal representations of physical actors based on incoming messages.

The paper discusses ways to handle protocol model state information within OCL, either by adding a new attribute or by using the 'oclinstate' construct.

In summary, the paper presents a methodology for modeling system behavior through an integrated approach using OCL, UML protocol state machines, and conceptual models, which together provide a structured means of capturing the functionality and ordering of system operations and their effects during the analysis stage of software development.