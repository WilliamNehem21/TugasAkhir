Symbolic model checking is a method for verifying if finite state machines meet certain temporal requirements, and it is well-known that these checks can be represented with Boolean formulas. This paper describes how to perform these verification tasks using Binary Decision Diagrams (BDDs), particularly focusing on scenarios that are challenging for traditional symbolic model checking approaches.

Verification often involves checking the satisfiability of formulas, a common task in analyzing combinational circuits and symbolic model checking. Typically, satisfiability checks are used to identify errors. This paper explores the use of the BDD structure for more efficient satisfiability checking.

Additionally, the paper introduces an operation for identifying minimal prime implicants referred to as "minimal p-cuts" in fault trees. Fault trees are used to model the reliability of systems, using Boolean formulas to represent the conditions under which a system might fail, considering each component's state of failure or operation. A minimal p-cut corresponds to the smallest set of component failures that could lead to a system failure. By employing this approach, one can estimate the system's likelihood of failure based on the individual failure probabilities of its components.