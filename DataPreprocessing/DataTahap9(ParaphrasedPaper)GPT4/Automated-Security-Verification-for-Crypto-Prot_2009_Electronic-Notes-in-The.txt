This paper discusses the critical challenge of ensuring that software implementations of cryptographic (crypto) protocols are secure and correspond to their formal specifications. The authors propose a method to bridge the gap between a software's design specification and its practical implementation. This method involves using automated theorem provers for first-order logic to create a link between Java-based crypto protocol implementations and their specification models.

The paper provides case study details on applying this method to Jessie, an open-source Java implementation of the SSL protocol, and briefly discusses how these findings can be transferred to the recently open-sourced Java Secure Sockets Extension (JSSE) library by Sun Microsystems.

The authors highlight that crypto-based software is often neither generated from formal specifications nor developed under the security analyst's control. As a result, implementations may harbor vulnerabilities due to the improper use of cryptographic algorithms, despite formal verification of the corresponding specifications.

The aim of the paper is not to achieve a comprehensive formal verification of Java code but to enhance the understanding of security properties upheld by the implementations of crypto protocols in a highly automated manner. The authors presume the correctness of the cryptographic algorithms assumed to be implemented correctly, focusing instead on verifying their proper usage within the crypto protocols.

Despite abstractions made for efficiency, which might lead to false alarms, the authors report that such false positives have not yet emerged in practical cases. This work builds on previous studies to address legacy crypto protocol implementations and improve the trustworthiness of cryptographic software.