Definition 2.2 [EBM] presents an Evidential Bipolar Model (EBM), which is characterized by a finite set of propositional variables known as hypotheses (denoted by H(M)) and a finite but non-empty collection of finite sets of propositional variables, called conclusions (denoted by C(M)). Each variable, whether a hypothesis or a conclusion, is unique and disjoint from others. The totality of propositional variables within an EBM is represented by the notation V(M). Graphically, an EBM can be depicted as a directed graph with labeled edges that are pending and two types of nodes: a unique positive node and one or more negative nodes. The interpretation of an EBM or of a proof structure is one-directional.

There are three particularly noteworthy types of EBMs: 

1. An EBM is termed "initial" if it has no hypotheses. Initial EBMs serve to introduce available resources into the system.
2. An EBM is called "final" if it lacks conclusions. Final EBMs act to withdraw resources, effectively ending a segment of a computation.
3. An EBM is described as "transitory" if it is neither initial nor final. These transitory EBMs correspond to definite clauses in standard logic programming.

In certain contexts where it is unambiguous, the interface of an EBM can be omitted. The paper provides a translation from proof structures into Bipolar Modules (BMs) through a set of rules that handle different logical connectors, but it is necessary to note that these rules are not fully detailed here due to space constraints. These translations maintain properties such as acyclicity and connectivity between corresponding structures.

Furthermore, the paper emphasizes the bipolar nature of modules as crucial for the proofs provided and suggests that considering either minimal or maximal poles is sufficient for their purposes, with only one of the two reduction rules being necessary. The methodology used by Guerrini for Danos' criterion can be adapted for a linear algorithm in this context. Additional details about extending these techniques to open modules, which is a critical step toward defining a logic programming language based on bipolar modules, are discussed in another paper by the authors.