The SPARC TSO (Total Store Order) weak memory model is traditionally defined in a manner that makes it hard to reason about program behaviors on a modular basis. Our method provides a compositional semantic framework using partially ordered multisets (pomsets), accurately representing the behaviors allowed by SPARC TSO, thereby aiding in understanding and modular analysis of programs under this memory model.

In a system employing the TSO memory model, processors with write buffers work independently, adding writes to their buffers which act in a queue-like fashion. Writes are executed one by one according to a global order, affecting shared memory. Processors will check their local buffer for a recent write to a given memory location when performing a read, before consulting the shared memory. Buffering allows the program execution order to differ from the perceived order of writes and reads.

The paper limits its focus to program orders that align with SPARCTSO-consistent orders within a defined simple imperative language. These orders are outlined in the paper.

Our denotational semantics consists of two parts: firstly, assigning to each program a set of TSO pomsets as its abstract meaning (explored in one section); secondly, associating each pomset with a set of possible executions that describe its potential behaviors (detailed in another).

Regarding write buffer flushing, threads can flush any number of writes at any point. The mechanics of flushing (how pomsets define writes and flushes) are demonstrated in specified 'families' of pomsets, each illustrating different scenarios and buffer states after flushes.

Our denotational perspective on TSO, outlined in one part of the paper, is proven to be sound and complete relative to the axiomatic approach discussed in another part. 'Soundness' ensures that only permissible behaviors are captured, while 'completeness' ensures all allowable behaviors are accounted for. Since TSO-consistent orders are subsets of TSO-consistent total orders, we only need to show that all TSO-consistent total orders are represented.

Typically, weak memory models employ execution graphs and operational semantics. Execution graphs, while useful, are not modular since they pertain to an entire program's execution. Our denotational approach offers an alternative that is both compositional and modular. We note predecessors in the field who have provided frameworks for operational semantics and fully abstract semantics adapted to TSO.