This paper introduces an algorithm designed to search for proofs of positive formulas within the realm of minimal predicate logic, drawing from the principles of the LJB deduction system. This algorithm is capable of generating a deduction tree or proof if the given formula can be shown to be true. Conversely, if the formula cannot be proved, the algorithm has the capacity to construct a counter-model to demonstrate its unprovability. The correctness of this algorithm, along with its soundness and completeness, has been rigorously validated.

The first step of the algorithm is a proof search conducted backward, abiding by the conventions of the LJB system. For provable formulas, this search will eventually yield a valid proof. On the other hand, if the formula cannot be proved, the search will reach a point where further upward application of rules is impossible, or it may encounter a cyclical pattern. At this juncture, the process of building a counter-model commences, beginning at the terminating leaves of the search and progressing towards the root. Each variable is assigned a unique constant, and initial assignments are given to the atomic formulas at each leaf. This methodically establishes a model for each internal node.

The paper is organized systematically, with Section 2 providing the necessary foundational knowledge. Section 3 delves into the algorithm itself, detailing the methods for proof search and counter-model construction, supplemented by a pair of illustrative examples. In Section 4, the paper attests to the accuracy of the counter-model construction. The final section culminates with the verification of the soundness and completeness of the algorithm.

The paper also addresses the semantics of Kripke frames, connecting each world "w" of a Kripke frame (R, W, D) with an expansion of the predicate logic language, "Lw." This expanded language includes constants denoting each element within the domain D(w), with these constants effectively replacing the corresponding domain elements. Thus, sentences within Lw are composed of formulas that lack free variable occurrences but may include objects from D(w).

The concept of a "singleton model" is further introduced. This model encompasses a single atomic formulas set "S," comprised of elements like a1, an, and a single domain "D0." The singleton model is effectively a Kripke model represented by (W, R, D, V), where W is a set containing only one world, R is a trivial order, the domain D(w) is equal to D0, and the model is defined to support the atomic formulas specified by the set "S."

The paper also describes the procedure for handling formulas deemed unprovable, including assigning constants to the free variables present within the nodes of an unsuccessful tree "T" and substituting every free variable in this "fail tree" with unique constants, all while avoiding the use of brackets. These steps and their specifics are elaborated upon within the paper.