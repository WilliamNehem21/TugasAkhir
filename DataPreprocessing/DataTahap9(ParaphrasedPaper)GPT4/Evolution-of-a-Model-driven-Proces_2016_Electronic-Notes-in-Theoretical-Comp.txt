The paper examines the development and refinement of the Praxis process framework over fifteen years, driven by its application in educational settings and professional projects. The authors trace the framework's evolution, identifying improvements and the reasons for changes based on user feedback. Following an introduction that highlights the paper's scope, Section 2 proposes categories for the types of process and modeling enhancements. Section 3 presents the chronological evolution of Praxis, highlighting changes in each version influenced by feedback and the impact of these changes.

The paper discusses the reorganization of artifacts which entails structural adjustments to the core models within a model-driven framework. This can include modifications to the models themselves or their internal elements, like model layering, which segments a model into layers with each layer relying only on its own elements or those below it.

Version 2.0, released in 2003 alongside a fresh edition of the textbook, marked a shift to a truly model-driven approach, improving analysis and design models to encapsulate significant technical details. The IEEE documentation was altered to become derivative of these models, with prior experience showing their usability challenges for small-scale projects.

This version introduced a layered architecture employing Jacobson's boundary, control, and entity layers, plus added persistence and system layers. Praxisâ€™s life cycle model moved closer to the spiral model, with the expectation for the analysis model and its specifications to be complete at the end of the second project phase. A major enhancement was the addition of a reuse framework to facilitate artifact implementation, influenced by Ambler's design. This framework promoted artifact reuse for application code, design models, and unit tests.

Test-driven development was incorporated with JUnit scripts to test each layer, although system tests on actual user interfaces were not available at the time, leading to simulated tests through the JUnit on the boundary layer.

The third edition of the textbook updated to reflect new or revised software standards like UML 2.0, CMMI, IEEE standards from 2003, PMBOK, and SPEM 2.0, impacting modeling significantly. Praxis adopted most practices from extreme programming while retaining models at its core, contrasting XP and aligning more with Agile modeling.

The UML 2.0 and Rational Architect allowed the development of the Praxis profile that leveraged stereotype profiles for enhancing diagram clarity. Automated functional tests were implemented using IBM Rational Functional Tester with a layered test model architecture to simplify API usage and ensure technology independence.

Improvements to the stereotype profile facilitated artifact extraction from models, particularly useful in professional settings with large, less UML-savvy development teams. Challenges in implementation typically arose with functions not conforming to the model solution patterns, prompting support for handling multiple detail collections.

For solution-level prototypes, HTML prototypes were deemed too JavaScript-heavy; hence, an alternate solution was adopted, minimizing code differences between prototypes and final versions to under 5%.

As the author moved away from teaching regular courses, they have undertaken writing a fourth edition of the Brazilian textbook, which will encapsulate the lessons and advancements of Praxis over the fifteen-year period as Praxis 4.0.