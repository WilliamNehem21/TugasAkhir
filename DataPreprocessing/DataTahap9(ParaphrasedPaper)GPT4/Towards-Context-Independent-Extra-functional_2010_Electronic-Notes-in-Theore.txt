This paper sets out the structure and main themes of the research, beginning with an overview of the technological and research background linked to extra-functional properties (EFPs) and laying out the principles behind the authors' methods. It details how EFPs and deployment contracts are defined and related to each other, along with the introduced modifications to enhance existing strategies. A registry system is thoroughly explained, followed by a case study demonstrating the application and enhancements brought by the authors' proposed method to a system developed by a Czech company.

The authors discuss previous approaches to EFPs, including Aagedal's CQML language, which is useful for generally describing EFPs but lacks complex types and has limitations in its handling of derived properties. Another language, SLAng, is used to describe EFPs in service-level agreements but targets specific cases and has a limited property set. ProCom and PECT focus on attributes relevant to a system's lifecycle and real-time quality attributes, respectively. The authors of the paper critique these approaches for their lack of a universal understanding of EFPs and their context-dependent limitations.

The paper argues for a more uniform and shared understanding of properties. To this end, it proposes a technical infrastructure with a registry system. A global registry, defined by domain experts, lays out all available EFPs without values, while local registries, linked to this global registry, contain context-specific values for these properties. This setup accommodates both simple and derived properties, with deployment contracts generalized to be consistent with the defined properties.

The authors then present a case study highlighting a practical implementation of their system. They define simple properties related to data transfer and processing time, as well as a derived property for performance, in the context of a database containing all Czech Republic addresses.

In conclusion, the paper acknowledges ongoing research and the need for further development on issues such as the handling of context registries, simplification of deployment contract attribute algorithms, and development of practical tools for the model's application. It envisions the creation of a tool using XML for the registry and a Java GUI for editing. The approach presented aims to refine the definition of EFPs and deployment contracts for reusable software components, building on the groundwork of previous languages like CQML and NOFUN, while extending their capabilities to meet the authors' specific needs.