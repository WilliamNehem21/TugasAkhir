Here is a paraphrased summary of the academic paper:

The calculation of attribute values in an attribute grammar involves determining synthesized attributes from inherited ones through an inductive function, which can be efficiently implemented in a lazy, higher-order functional programming language like Haskell. However, the resulting evaluation functions are difficult to optimize using common optimization techniques. As an alternative, the paper presents a first-order functional approach where the input tree is replaced by an extended cyclic tree that includes the context as an additional child, allowing for preprocessing and simplification. This concept extends the idea of doubly-linked lists to arbitrary tree structures. The paper discusses attribute grammar semantics, zippers as tree-context representations, and the unfolding of trees into cyclic representations, culminating in a first-order interpretation of attribute grammars. The goal is to eventually provide a domain-specific language embedded within Haskell that hides the complexity of cyclic zippers from the programmer, reducing potential errors and overhead.