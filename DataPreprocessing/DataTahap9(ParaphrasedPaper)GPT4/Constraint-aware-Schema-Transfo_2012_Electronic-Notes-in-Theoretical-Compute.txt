This paper outlines a novel approach to schema transformation that recognizes and preserves constraints when translating between different data schemas during software evolution, refactoring, and data mapping across paradigms. The presented algebraic method relies on refinement theory and point-free program transformation to manage the transformations. The approach ensures that constraints on the original schema are also applied to the target schema and new constraints are introduced as necessary to maintain data semantics when higher-level data types are translated into lower-level representations.

Using rewrite rules on types that include point-free predicates as constraints, data refinements are modeled and applied systematically. At each stage of the transformation, the target constraint is derived from the original constraint. Additionally, a rewrite system processes point-free functions to standardize constraints accumulated throughout the transformation process.

The paper discusses how schemas often come with structural descriptions plus constraints that impart further semantic meaning, such as referential integrity in SQL databases or datatype invariants in VDM specifications. Schema transformations can happen due to software maintenance, language evolution, or when moving data between different programming paradigms like XML and SQL.

Previous work has addressed schema alteration in conjunction with the transformation of the data bound to it, ensuring type safety and extending to data processors and updating functions. The authors have implemented their theoretical framework within type-safe rewrite systems applied to different types of specifications and databases.

The paperâ€™s structure includes a motivating example, background on refinement theory and point-free program calculation, an in-depth look at constraints representation and rewriting, and the implementation of these theories in Haskell. The theory is then applied back to an example to show the practical use of the rewrite system in schema-aware hierarchical-relational mapping, discussing related research and concluding in the final sections.