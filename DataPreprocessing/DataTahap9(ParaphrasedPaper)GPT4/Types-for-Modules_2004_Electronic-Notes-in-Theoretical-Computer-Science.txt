The Standard ML (SML) programming language is composed of two distinct yet interrelated languages: the core language and the modules language. The core language is employed for articulating algorithms and data structure specifics, whereas the modules language is used for expressing the modular construction of a software system. Both languages employ static typing and are strictly defined in terms of their static and dynamic behaviors through a formal specification.

Over the past ten years, SML's modules have sparked considerable research regarding the theoretical underpinnings of module languages based on type theory. Despite many efforts, achieving a type-theoretical grasp of SML's static semantics for modules has proven challenging. This thesis leverages type theory to rethink the unconventional static semantics of SML modules, establishing a foundation for further enhancements to the language's module system.

The thesis introduces two major enhancements to SML modules. The first is the generalization to support higher-order modules, allowing modules to be parameterized and to accept or return other modules. This surpasses previous approaches, implementing a type generativity concept, and provides a verifiable algorithm for the type-checking of these higher-order modules. The second enhancement treats modules as first-class entities within an ML-like core language, broadening the computational possibilities with modules.

Modules enable packaging of identifier definitions that represent types and terms from the core language, structured in a potentially nested manner, while also offering control over the naming space for large-scale programming. Structures in SML are transparent—meaning the identities of types within a structure are apparent from outside—a feature beneficial for incremental program development.

SML stands out due to its formal definition of syntax and semantics, and its strength as a statically typed language with compile-time type checking. By looking at Standard ML through the lens of type theory, which examines formal languages and their connection to logic and computer science, greater clarity can be gained regarding its design principles. While this approach is insightful, understanding the static semantics of SML modules in terms of type theory remains elusive.

This thesis thus aims to better articulate the static semantics of SML modules using type theory, and to use this new understanding to extend and refine the language's static semantics. This contrasts with other researchers who have either failed to capture intrinsic language features or introduced new problematic constructs when attempting to give a type-theoretic account of SML modules.

The thesis proposes a lookahead to building a separate compilation system for SML modules, addressing the common criticism of inadequate separate compilation support. It suggests that earlier attempts faltered due to a misjudgment in selecting the compilation unit rather than the modules' semantics being at fault. Issues like the accessibility of structure components using dot notation and the generativity of functors, which prevent their definition as part of a structure or across certain levels, are addressed throughout the document.

Approaches to envelop existing language features within a type-theoretical framework, and designing enhancements that are theoretically sound and practically useful, are key objectives of this work. Through detailed discussions and reformulations, the thesis contributes significantly to the broader understanding of SML's modules, paving the way for more advanced type system features and establishing a groundwork for future language improvements.