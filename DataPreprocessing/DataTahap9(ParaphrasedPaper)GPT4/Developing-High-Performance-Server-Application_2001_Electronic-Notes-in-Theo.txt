The internet has created a new realm for multithreaded server applications that can engage with hundreds or even thousands of clients at once, such as file transfer (FTP), email, domain name systems (DNS), news services, messaging servers, file-sharing networks, and notably web servers using the HTTP protocol to deliver web content.

To improve on the limitations of the conventional 'select()' method for handling multiple client connections, newer techniques like asynchronous I/O, POSIX real-time signals, and kernel event notification methods have been developed. Though not universally supported across all operating systems, these modern methods can be adopted with minimal modifications from the 'select()' approach.

User-space threading is a concept where thread functionality is emulated within a single process or atop a few OS-level threads. Programmers use language-specific concurrency features, and the user-space threading system manages underlying task scheduling and I/O management. For UNIX systems, various user-space POSIX thread implementations are available.

Concurrent Haskell (as executed in GHC) exemplifies this model, running multiple Haskell threads within a single OS process and choosing among the I/O multiplexing techniques mentioned above, all while abstracting these details from the programmer.

Logging in these systems is typically handled by an isolated thread. Worker threads interact with this logging component through a global channel to submit log requests. The dedicated logging thread then processes these requests, generating the corresponding log entries and writing them to a log file.