In this paper, the researchers explore the semi-decidability of may, must, and probabilistic testing for higher-type, non-deterministic programs, including systems featuring both non-deterministic and probabilistic choices. They look at a higher-type language influenced by PCF (Programming language for Computable Functions) that enables various forms of non-deterministic choices expressed via powertype constructors.

The primary findings are:
1. ‘May’ testing (to determine if there is at least one outcome that satisfies a given property) is semi-decidable.
2. ‘Must’ testing (to see if all possible outcomes satisfy the property), despite involving universal quantification over an infinite number of outcomes, is also shown to be semi-decidable.
3. Probabilistic testing (investigating whether all outcomes meet a property with a probability exceeding a specific threshold) is semi-decidable.

The authors use advances in higher-type computation and existing research on the computability of integrals to demonstrate these results. They develop semi-decision procedures that can infer, with certain limitations, whether a non-deterministic program satisfies the above conditions.

Additionally, the paper takes initial steps towards addressing the complexities that arise when programs exhibit both non-deterministic and probabilistic behaviors. They create preliminary semi-decision procedures for this situation, although their correctness remains unproven and their applicability is still under investigation.

The paper discusses the type system extensively, defining deterministic and non-deterministic types, where the latter allows for multiple potential outcomes per term. Ground types are deterministic, per the authors' specifications, and product and function types maintain determinism.

Moreover, the researchers propose that may, must, and probabilistic testing in the language can be translated to operations involving quantification and integration in a way consistent with PCF and related systems. They acknowledge that domain theory (particularly continuous domains, which are essential for these operations) presents some limitations, and introduce the notion of topological domain theory as a potentially more versatile alternative.

The authors conclude with a discussion of related work that combines powerdomains for both probability and non-determinism. They suggest that further work in domain theory, especially focused on unit-interval valued valuations, is needed to fully understand and demonstrate the correctness of the procedures proposed for languages with combined non-deterministic and probabilistic features.