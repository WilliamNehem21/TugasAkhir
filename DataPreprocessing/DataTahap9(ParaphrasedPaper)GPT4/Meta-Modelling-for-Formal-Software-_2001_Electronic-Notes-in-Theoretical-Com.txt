This paper presents a methodology for creating large-scale software systems by employing several models that are unified through a single metamodel. This common metamodel facilitates a consistent approach to software specification and carries benefits for implementation. The method has proven effective and has been utilized in building real-world medium to large-scale software systems across various countries.

The authors discuss how using multiple models can enhance software development, providing examples involving program analyzers and decomposing complex problems into manageable parts. A key aspect of the approach involves defining transformations at the level of the metamodel, making it possible to handle larger programs efficiently.

As an illustration, the paper discusses how a compiler might be broken down into components such as lexical analysis, syntax analysis, and code generation, with each component represented by a distinct modelâ€”regular expressions for lexical analysis, context-free grammars for syntax analysis, and an informal model for code generation.

Similarly, multiple models are used in program analysis to capture different property sets, such as syntactic and semantic properties. These models are interconnected through the programs they describe, allowing for analyses that can be uniformly applied to various programming languages and properties.

For instance, a central locking system for a car is broken into several model instances, each contributing to a part of the system which, when refined and transformed using defined functions, results in a whole, operational program.

The paper describes a framework called ADEX, which ensures that the models conform to their definitions and that transformations lead to correct refinements of program components. The correctness of these transformation functions guarantees that the composed program will be a faithful implementation of the initial models.

In conclusion, the authors have introduced an approach for building complex software by using related models that represent different program properties, which are all instances of a coherent metamodel. This approach has been successfully applied in the development of sizeable functional applications.