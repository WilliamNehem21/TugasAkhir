This paper introduces a new method for automatically determining input parameters for Java methods, using a self-correcting algorithm informed by specifically designed heuristics. These heuristics are aimed at selecting parameter values suitable for creating substantial benchmarks. By recognizing invalid method arguments through exceptions, the method adapts and proposes relevant alternative inputs to improve the testing process.

The paper is structured into several sections, starting with foundational concepts before delving into the methodology. It explains how it parses bytecode to create an API model, assesses method complexity, and navigates dependencies between methods and their parameters. Techniques for handling runtime exceptions and a case study further illustrate the process.

The presented approach is applicable across Java APIs but began with the heavily-employed Java Platform API as a starting point. It leverages the Java Reflection API for method invocation and also considers constants from class definitions when choosing input parameters. It can handle exceptions commonly thrown during program execution, such as IndexOutOfBoundsException and ClassCastException, to adjust inputs accordingly.

Data was collected using Java Platform API classes from java.util and java.lang packages to evaluate the approach, with the limitation that it can't be directly compared to a random parameter generation strategy due to a lack of such a reference implementation. Although primarily designed for Java APIs, the principles behind the presented approach, called HeurigenJ, could be adapted for other language APIs.