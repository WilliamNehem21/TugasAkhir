The study discusses the resemblance between the Ambient Calculus and LMNtal, highlighting their shared use of nested membranes. This commonality leads to the assumption that ambients in Ambient Calculus should be translated into LMNtal cells, a notion central to the proposed encoding approach, where such cells are termed "ambient cells."

The paper also defines the concept of a "normal form" for a name tree, which should coincide with the structure of the ambient hierarchy, described here as an "ambient tree." A name tree in normal form is outlined as having a root cell at the highest point of a connected subsection of the ambient tree and a "proxy cell" at each of the other points within the said subsection.

To maintain the structure of a name tree, various 'proxy_' prefixed rules are introduced. These rules adapt the name tree to changes from the application of mobility primitives. Examples of these rules include 'proxy_enter,' which recognizes identical name references; 'proxy_resolve,' which unites two consecutive proxies; 'proxy_insert_middle,' which is triggered during a movement of connected cells and inserts a new proxy. 'proxy_insert_outer' occurs when moving a child proxy outside of an ambient, altering the hierarchy. Lastly, 'proxy_merge_outer' combines two proxy parents into one.

The concurrency of name normalization and ambient operations is also considered. Operations 'in,' 'out,' and 'open' may be performed even when name trees aren't in their normal form, as these operations inherently maintain the defined invariants. Name tree normalization can, therefore, continue together with ambient operations without total synchronization.

The issue of encoding an operation like '!(open n.p),' which involves duplicating process 'p' and creating new references to 'p's' free names, is addressed through the concept of "aggregates." Although not yet supported in the existing LMNtal implementation, a substitute construct, the nonlinear membrane (nlmem) API, accomplishes this with the 'nlmem.copy' function. This function handles the duplication of cells and free links while adhering to necessary renaming conventions to avoid conflicts. The semantics of 'nlmem.copy' are exemplified by a specific rule schematic.

Acknowledging the contribution of the LMNtal development team, the author notes that the implementation is publicly available and mentions financial support from various grant-in-aid scientific research programs, specifically those provided by MEXT and JSPS.