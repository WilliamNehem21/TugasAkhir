The paper presents a non-intrusive method for measuring code coverage of Objective Caml (OCaml) programs without altering the source code. Traditional code coverage analysis techniques modify the source code to generate runtime traces, but the proposed method employs a virtual machine to monitor instruction execution, which then generates low-level traces for creating machine code coverage reports. This information, coupled with debug information on program control-flow, is later used to produce source code coverage reports. By doing so, the same binary can be used for both testing and production.

The motivation for this research comes from Esterel Technologies, a French company that produced a DO-178B certifiable code generator, part of the SCADE Suite 6tm, based on OCaml. This suite is used for safety-critical embedded software development in avionic systems. The code generator can shorten certification time in compliance with aviation software standards. As DO-178B applies to development tools just as it does to code, the code generation tools must adhere to coding standards, with an adaptation of the standard for development tools inclusion.

MlCOV, an open-source code coverage tool, measures coverage by instrumenting the OCaml source code, winding up with measurement represented in a simple format within the source code context. The certified OCaml code generator adheres to IEC 61508 and EN 50128 norms and is used in several aviation projects, including for the Airbus A380.

For processors like PowerPC, the free QEMU emulator can generate traces for non-intrusive analysis without modifying the target code. Tools developed by AdaCore can carry out similar analyses with independence from programming languages and compilers by utilizing DWARF debug info from compilers.

ZAM is a stack-based virtual machine that OCaml uses, with a minimalist design. It executes OCaml bytecode which allows a performance efficient representation of the functional programming paradigm OCaml embodies while running this bytecode virtually.

In contrast to OCaml's strong static typing, ZAM is untyped, which is made possible by the static type checks done at compile-time, freeing runtime from type checks. The approach mirrors the division in the OCaml runtime library between low-level C functions and high-level OCaml functions.

ZAMCOV, the developed tool for non-intrusive coverage analysis in OCaml, utilizes debug events and execution traces to ascertain code coverage. Debug events map bytecode instructions to source code, and by cross-referencing these with execution traces, the tool determines which parts of the source code have executed.

The paper also explores the support for debugging tools in other virtual machine environments, like the JVM and CLR, noting the abundance of libraries and APIs available in those ecosystems for creating debug and instrumentation tools.

This research contributes to the COVERAGE project, focusing on non-intrusive coverage tools for both Ada and OCaml. QEMU is employed for Ada targeting PowerPC and the ZAM virtual machine for OCaml, with the requisite compiler information for MC/DC analysis being similar across both languages.

(Note: This text simplifies and condenses the concepts for broader accessibility. Some technical terminologies and details have been omitted to focus on the overall methodology and context of the research.)