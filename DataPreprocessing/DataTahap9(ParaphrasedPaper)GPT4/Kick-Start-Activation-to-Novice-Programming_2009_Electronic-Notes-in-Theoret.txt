At the start of programming education, students often harbor misconceptions about what programming entails. To address this, a method called "kick-start activation" was implemented at the commencement of an introductory programming course (CS1) to clarify the true nature of programming. This method entails introducing students to the core concepts of programming before delving into superficial aspects. Students are presented with a problem during the first lecture that relates to a real-world computer program. The problem is designed to be simple enough to understand and allows students to engage in debugging exercises, supported by a visualization-based approach for better comprehension.

Students tend to have false impressions about programming, perceiving it as mainly coding rather than problem-solving and critical thinking. The course begins by correcting these misconceptions and teaching the concept of an algorithm, alongside tools for algorithm implementation and program design like pseudocode and flowcharts.

Typically, an algorithm is likened to a cookbook recipe, which provides a clear, executable set of instructions. However, this comparison has its drawbacks. It's not directly related to computer programming, which can be misconstrued as irrelevant by students expecting explicit programming instruction. Moreover, while it clarifies the nature of an algorithm, it fails to convey the role of a programmer since no profession solely revolves around inventing new recipes. Also, this analogy doesn't illustrate programming phases such as design, testing, and debugging, thus maintaining the misconception that programming is just about implementing algorithms.

Kick-start activation offers a novel approach to beginning the programming course. This paper discusses the concept in section 2, the specific example used in section 3, visualization and feedback in section 4, with discussion and conclusion in section 5.

The kick-start activation must be simple and relatable to everyday life, without using real programming languages or computer-specific details which could distract at this stage. Instead, natural-language-like pseudo code and flowcharts are utilized for teaching. A visualization tool was also developed to show how such an algorithm would run on a computer.

Encouraging student participation is paramount, as programming involves more thinking and problem-solving. For example, students can test an algorithm, and a deliberately buggy version can be provided for them to debug.

The focus for kick-start activation was hyphenation rules in the Finnish language—a familiar subject since word processors commonly use such programs for hyphenation and students are versed in the native language's spelling.

The test phase was designed to engage students in actual programming-related tasks, using visualization to run and examine the algorithm. They also have the option to use the visualization tool post-lecture for revision, featuring controls and visuals that show the algorithm's application to the input words and where hyphens are inserted.

Students are further engaged by allowing them to input custom words for the algorithm to process, elevating their involvement according to the visualization engagement taxonomy. Pop-up questions about the program's behavior enhance engagement by soliciting predictions about the forthcoming steps in the process.

An evaluation using a quantitative survey showed positive feedback for the kick-start activation, particularly from students with no prior programming experience, validating the effectiveness of this visualization-based approach for novices.

Kick-start activation effectively conveys strategic knowledge—important for programming—more so than just syntactic and conceptual knowledge. While the potential to let students fix bugs or create new algorithms within a visualization tool is enticing, it's complex for beginners, presenting an opportunity for future research and development of such educational tools.