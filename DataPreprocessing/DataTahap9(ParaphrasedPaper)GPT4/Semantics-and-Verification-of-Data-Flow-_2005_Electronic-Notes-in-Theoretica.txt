This paper defines a formal semantics for activity diagrams in UML 2.0, focusing on key aspects like control and data flow, while leaving out parts such as hierarchy, node expansion, and exception management, as these topics are discussed in other studies. The authors indicate where the standard's constructs are challenging to formalize and suggest how their formalization can be leveraged for rigorous analysis.

At the time of writing, the advancement of UML 2.0 is in its final stages, with technical work concluded and an official endorsement anticipated soon. Comparatively, UML 2.0 introduces significant improvements over the former version, featuring a re-engineered and more sophisticated metamodel.

Major enhancements in UML 2.0 include a restructured approach to activity diagrams, where subactivity states are replaced by calls to subordinate activities, reflecting actions from superordinate activities. Data flow representation has evolved to use object nodes and flows. Additionally, there are now functions to represent effects, selection, and transformation within activity edges, which rely on modelers to detail their effects on object states and their corresponding name spaces.

Furthermore, guard functions are included in activity diagrams, designated to oversee the name space and can be interpreted as moved to optimize transitions within the model. This vagueness allows modelers to define the exact semantics, which are transformed into guards in the context of the diagram.

The paper's proposed formal semantics is grounded on colored Petri nets (CPNs) and aligns with the structure of original activity diagrams, thereby facilitating the transfer of activities to their CPN counterparts and even visualization of activity executions. Unlike abstract semantic models like process algebras, the graphical integrity of UML is preserved in this approach.

Highlighting some limitations identified in the standard, the authors note their ongoing efforts to develop tools for industrial case studies. This development is currently limited by the absence of authentic UML 2.0 tools, an issue anticipated to be resolved following the formal adoption of the UML 2.0 standard.