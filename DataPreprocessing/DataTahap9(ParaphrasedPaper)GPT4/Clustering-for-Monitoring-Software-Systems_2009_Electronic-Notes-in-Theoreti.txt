The paper discusses techniques for understanding and analyzing source code from legacy systems written in C and COBOL by mining for lower and medium-level concepts and relationships within the code at the function, paragraph, or line level. For C programs, entities such as functions were used to define attributes based on the usage, types of parameters and variables, and types of return values. These attributes were then used to cluster subsets of the source code based on custom similarity metrics.

The authors present an approach to evaluate the effectiveness of using dynamic dependencies as inputs for software clustering algorithms. The goal is to assess whether dynamic dependencies can improve the clustering process and, by extension, the comprehension of the software system's structure.

Further, the paper describes a clustering method that operates on a Module Dependency Graph (MDG), which helps in the automatic recovery of a software system's modular structure from source code. This creates a hierarchical view of the system's architecture and identifies the subsystems based on detectable components and their interrelationships in the source code.

Mancoridis et al.'s use of clustering algorithms, including traditional hill-climbing and genetic algorithms, is also mentioned. They focus on recovering the modular structure from source code. Program comprehension is also discussed, along with Zaidman et al.'s introduction of four static web-mining and coupling metrics to identify important classes within a software system.

The approach in this paper distinguishes itself from previous literature by using the k-attractors clustering algorithm on software measurement data to understand a software system and assess its maintainability. This clustering analysis happens in two steps and provides an overview of the software system as well as insights into its evolution over different versions.

The collected data, including attributes and metrics, are stored in structured XML files because XML is widely accepted for data representation and interoperability. These XML files facilitate further processing and analysis with various tools. The structure of an XML file is based around the 'java-source-program' unit, which includes details about package declarations, imported modules, interfaces, classes, and other relevant metrics for each class.

For monitoring the evolution of clusters across different versions of the software, the authors suggest an alternative approach involving clustering each version separately and then clustering these clusters hierarchically using their centroids. This results in 'clusters of clusters' that can track the persistence of certain data items through versions.

Lastly, the paper expresses an interest in enhancing the extraction method to include data from other programming languages like C++, C, and COBOL, which are prevalent in legacy systems and hold value for program comprehension and maintainability analysis.