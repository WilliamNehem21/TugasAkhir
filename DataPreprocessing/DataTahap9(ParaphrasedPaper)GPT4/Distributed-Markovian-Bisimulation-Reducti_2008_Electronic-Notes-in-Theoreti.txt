This study introduces a signature-based Markov-AP bisimulation algorithm that offers memory efficiency and, in some instances, enhanced speed compared to existing algorithms. This distributed algorithm is novel in computing the quotient of a stochastic bisimulation relation in a decentralized manner.

The research is structured as follows: Section 2 outlines the syntax and semantics of CSL (Continuous Stochastic Logic), the concept of Markov-AP bisimulation, and a signature-based definition of the bisimulation. Section 3 details a distributed approach for calculating the bisimulation quotient using this signature method. In Section 4, common case studies in stochastic verification are discussed, which are then utilized in Sections 5 and 6.

The bisimulation quotient computation starts with an initial partition where states with identical labels are grouped. The partitioning is then iteratively refined until a stable partition (no further refinement possible) is achieved.

A case study, based on a simplified peer-to-peer protocol akin to BitTorrent, explores a scenario in which n+1 clients download a file; initially, one client has the entire file while others have none. The system, with k=5 and n varying from 2 to 4, was examined under typical CSL properties for this protocol.

Another case study concerns a system with two sub-clusters of n workstations each, arranged in a star-topology, dependent on a central backbone for communication. The model considers failures and repairs under a random repair strategy.

A different case study analyzes a cyclic server-polling system with n stations, where the server serves each station in sequence, skipping idle ones. 

The final case study models a kanban system with four cells and kanban cards, with a rework possibility for some workpieces. While CSL formulas were not defined for the kanban system, the state space was found to be reducible under strong bisimulation.

Section 5 demonstrates the effectiveness of the signature-based reduction algorithm through case studies, comparing time and memory efficiency to the MRMC tool. The performance of the distributed version is covered in the subsequent section.

It was found that the MRMC's complexity is O(m log n) for n states and m transitions, whereas the LTSmin tool, implementing the proposed algorithm, has a complexity of O(mi), with i being the number of iterations â€“ typically better than O(n) in practice. Incremental signature computation, effective in strong bisimulation, is suggested as potential future work for Markov-AP bisimulation.

Finally, when computing a simple strong bisimulation quotient without accounting for different rates, the state space for the kanban system is reduced, exemplified by a decrease from 58,400 to 33,200 states when n=3. However, bisimulation quotient calculation for the CSL formulas in isolation led to no state space reduction.