The paper discusses the importance of validating software performance early in the development lifecycle, noting that insufficient time and effort are currently dedicated to this task. This can result in performance issues that are difficult and costly to address later on. The short time to market and a lack of specialized skills among the development team contribute to this problem.

Software architecture provides an abstraction that can be used for validating and predicting system performance. Various notations and languages exist to depict software architecture with a performance perspective. This paper explores performance issues within software architectures and examines different performance modeling notations from the viewpoint of software designers. The main objective of the paper is to evaluate the descriptive power of three widely used performance modeling notations through a case study and determine their effectiveness in providing feedback at the architectural design level.

The complexity of modern software systems makes it increasingly important to have tools that support design decisions. Decisions made during early design phases can greatly influence the development process and the final quality of the software product, where inaccurate early decisions could lead to costly rework.

The paper describes three techniques—splitting, merging, and duplication—that can be applied to software components to influence their performance. An example case study involves an XML Translator (XT) system which automatically constructs an XML document from a text document according to a given XML schema.

The case study's performance is modeled using Stochastic Process Algebras (SPA), Generalized Stochastic Petri Nets (GSPN), and Queueing Networks (QN). SPA and GSPN are extensions of Process Algebra (PA) and Petri Nets (PN), respectively, with additional capabilities to model timing and probability. The model parameters used in the case study include indices like component utilization and workload distribution.

The paper acknowledges that while using extended notions could reduce model complexity, it would require more advanced Petri Net expertise from software designers, which the study aims to keep minimal. However, they leave the future possibility of adopting a powerful Petri Net tool to handle more complex models.

Metrics including queue length and software component throughput are examined as the number of XT users increases. The paper notes that the complexity and potential errors in model evaluations vary and that comparing model notations based on these dimensions is beyond its scope due to additional influencing factors.

The paper ends by reflecting on the challenges of using these performance model notations from a software designer’s perspective. The aim is to provide insights for future research on how to make performance analysis more accessible and integrated into standard software design practices through automation and user-friendly frameworks.