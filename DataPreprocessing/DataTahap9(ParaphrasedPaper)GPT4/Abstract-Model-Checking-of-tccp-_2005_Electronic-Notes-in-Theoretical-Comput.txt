The paper discusses the challenges and proposed solutions for automatic verification of systems specified in the Timed Concurrent Constraint Programming (tccp) language. Initially, efforts were made to apply classical model checking techniques to tccp programs, using temporal logic for reasoning. These methods aimed to utilize the unique constraint aspect of tccp to develop a compact representation of the system, which would then be subjected to model checking algorithms.

However, these techniques encountered challenges due to the time aspect of tccp, which led to the creation of inaccurately abstracted models through overapproximation. To address these limitations, the paper proposes a new approach that combines both overapproximation and underapproximation to create abstract models of tccp operators. This mixed approximation strategy is innovative, offering a balance that yields abstract models with a higher degree of precision.

The paper goes on to state that for the abstract semantics of tccp programs to properly approximate the standard semantics, additional conditions related to the program's suspension behavior must be met. Once these conditions are satisfied, the authors describe an "abstraction-by-transformation" method to approximate tccp computations. Furthermore, they explore how to refine abstract semantics to better preserve suspension behaviors, though they note the transformation method used for the initial abstraction cannot be directly carried over to the refined abstraction.

Conceptually, the method can be visualized as dividing each time instant into "n" parts. When abstracting a concrete program, the resulting abstract program's structure guarantees that all agents, except for the conditional agent, execute in the last segment of each "n" division of time. Meanwhile, the execution of conditional agents commences at a part of the time block that corresponds to their relative depth.