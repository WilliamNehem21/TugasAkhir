This paper presents the use of Communicating Sequential Processes (CSP) to define a version of non-interference, termed "may non-interference," based on the inferences that can be made about high-level processes through low-level tests. The classic non-inference concept is captured by the may-testing approach, which is easily expressible in CSP and is more robust in terms of composition than typical non-interference frameworks. The paper demonstrates that may non-interference is compatible with broader composition operators beyond those traditionally connected to non-interference, and also provides straightforward proofs of compositionality.

Compositionality of non-interference is vital for building secure systems from secure components. This concept was previously advanced by McCullough, who defined restrictiveness to ensure non-interference that is maintained when systems are combined. Various models of non-interference exist, often using state machines or event systems to frame system behaviors and define system composition within their respective semantic models.

Within the context of CSP, the paper explains parallel composition, where two processes operate in parallel and may synchronize on shared channels, allowing them to communicate. In contrast, interleaved parallel composition allows processes to execute simultaneously without intercommunication. CSP also offers mechanisms for abstraction, such as removing events from external observation, leading to internal events within a process.

The paper includes a traces model and trace semantics for the introduced CSP operators in an appendix. The traces model is adequate for the paper's objectives and provides a foundation for discussing may non-interference. When examining non-interference with respect to high and low-level events, the paper shows that low-level views will only observe low-level events or no events, without being able to distinguish between different high-level processes. Thus, observing a specific low-level event can reveal that a high-level event did not occur, yet the absence of any low-level event doesn't provide any information about high-level activities.

However, when high-level events can synchronize with other processes, this non-interference property does not always hold, evident from a counterexample presented in the paper. The demonstration of this point underscores the nuanced interplay between synchronization and non-interference.

The paper asserts that may non-interference is compositional, meaning it is preserved by a range of CSP composition operators, which is imperative for secure system design. These operators include interleaving, synchronous parallel (with conditions), restriction, hiding, chaining, and specific high-low level connections. This preservation extends to external operators commonly investigated in non-interference research, like cross product and feedback loop compositions.

Although this CSP characterization of may non-interference is practical, it does not account for scenarios where low-level refusals provide information leaks nor can it capture instances where low-level actions might be influenced by high-level events. The paper suggests a more refined form of non-interference, including the notion of refusal, could be more informative, and this is a topic of ongoing study.

Finally, the paper discusses the concept of strong must non-interference and its limitations, questioning its intuitive relevance and practicality. The paper suggests that a more applicable approach would involve refusal test notions alongside an enhanced form of may testing. This area represents ongoing research seeking to refine the semantic models managing information flow in system execution.