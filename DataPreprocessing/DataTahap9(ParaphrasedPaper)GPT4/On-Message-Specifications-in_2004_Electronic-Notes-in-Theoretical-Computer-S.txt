The academic paper discusses an enhancement of the Object Constraint Language (OCL) by integrating the concept of histories, which detail objects' external behavior either individually or in groups. By using histories, the paper aims to improve how complex systems can be composed and understood by separating specifications into local (pertaining to individual objects) and global (relation and interaction between objects) aspects. This is achieved by employing two dialects of OCL that differ syntactically.

The paper acknowledges OCL's existing behavioral concepts like preconditions, postconditions, and, with the introduction of OCL 2.0, message expressions. However, it points out practical limitations with the use of message expressions in OCL 2.0 and proposes a more expressive and flexible approach based on histories which can capture both sent and received messages.

Instead of modifying the language syntax or the meta-model of OCL, the authors suggest incorporating histories and events as new data types. They argue that their method, which uses standard OCL constructs, is better for early design-stage model verification and offers a more general solution compared to OCL 2.0's message expressions.

The paper is structured to first critique the current message expression proposal in OCL 2.0, then introduce their concept of events and histories, and subsequently explain how this approach facilitates compositional specifications. The authors present their method for compositional verification and conclude with a comparison to related work.

Their notion of local and global histories allows for detailed specification of object behavior and object interaction while maintaining object encapsulation principles. The paper also introduces a compatibility predicate to verify that a collection of objects can work together based on their specifications. Lastly, it briefly outlines a soundness proof for their approach and compares it with existing OCL proposals, emphasizing that their history-based extension is more comprehensive and can successfully model messages that OCL 2.0 does not fully account for.