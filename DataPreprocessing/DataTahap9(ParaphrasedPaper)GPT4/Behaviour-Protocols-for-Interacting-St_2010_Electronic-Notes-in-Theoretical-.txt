This academic paper addresses the complex interplay between control flow and data flow in system development, particularly within the context of concurrent systems. The authors note that traditional pre/postcondition specifications are generally unsuitable for systems composed of concurrent components. Still, it remains valuable to explore the extent to which these aspects can be integrated in a shared environment. The paper aims to understand the effects of combining control and data flow on numerous factors, such as specification accuracy, implementation, formal correctness, concept of compatibility, composition strategies, and the capacity for independent component development.

The paper is structured to progressively introduce concepts and findings. Initially, it lays out technical foundations, followed by a description of the key components of the authors' proposed model. Behavior protocols, which are crucial for defining component and assembly behaviors, are introduced together with their compatibility rules. The fourth section presents a formal semantics for these behavior protocols, rooted in model theory, which also encompasses component and assembly implementations. A significant result discussed is the compositionality of the proposed approach.

Behavior protocols, which are pivotal for component and assembly behavior specification, require a formal semantic foundation. This allows for precise interpretations and supports subsequent analysis. The paper distinguishes its approach by considering communications between components as non-invisibleâ€”these must align with protocol transitions rather than be treated as silent actions overlooked in refinement relationships, highlighting the necessity for protocol-compliant communication in assembly implementations.

The paper comments on other research approaches, such as those utilizing symbolic transition systems with annotated guards and effects, noting differences in focus, particularly regarding formal correctness and contractual pre/postconditions. The authors suggest that these approaches might be adapted for compatibility checking as proposed in their own research.

The authors emphasize that behavior protocols serve as contracts, outlining expectations and obligations for both component developers (implementors) and users. The study delves into foundational concepts that support the development of concurrent, component-oriented systems, considering component data states. The paper's methodology is designed to remain independent of specific assertion languages for pre/postconditions and programming language notations, allowing for an overarching theoretical approach. Yet, concrete applications using subsets of languages like OCL for assertions, UML for protocols, and concurrent Java for implementations are identified as areas for future research.