In our work, we focus on enhancing the flexibility and minimizing the complexity of visualization in programming education. We aim to distinctly separate the visualization aspect from the application and clearly delineate the specification of visual elements from the actual drawing or rendering process. Our system, Problets, illustrates the application of overlay visualization to assist software education. This method provides notable benefits, chiefly reducing the mental effort required by learners and offering automatic mechanisms for both tracing the execution path and displaying the current state of the program.

By disassociating the visualization details from the coding interface, we achieve two main targets: enhancing the adaptability of the visual aids provided and reducing the burden of defining these aids. Using a declarative method for specification makes the system more adaptable, whether the visualization rules are manually written, generated by an automated process, or directly inputted by learners through intuitive actions like mouse gestures. Regardless of the input method, the visualization tool employed to turn these specifications into actual images remains constant.

Overlay visualization carries the advantage of lessening cognitive strain as it presents both code and corresponding visuals in a unified space. This prevents students from splitting their attention between separate areas for code and visualization, which typically requires mentally piecing together disparate pieces of information. Instead, they can concentrate simultaneously on the code and its visual representation.

Another feature of overlay visualization is its ability to automatically showcase a program's execution history, not just the line currently being executed. This historical representation can enhance understanding as it provides context alongside the visualization of the program's current state.

Additionally, we recognize that encouraging learners to construct their own visualizations can substantially improve learning outcomes. Our method supports such active, visual learning as students can use simple mouse gestures to create visual connections or highlights within the visualization space. The system interprets these gestures as visualization commands, and students can receive immediate feedback by comparing their inputs against predefined correct visualization specifications.