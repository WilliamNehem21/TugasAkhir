This article presents a model for understanding the behavior of connectors within the Reo coordination language. Constraint automata are introduced as a more versatile alternative to probabilistic automata, using constraints to guide state transitions rather than probabilities. Reo's primary compositional operator, "join," is equivalent to creating a product of automata within this model.

Reo provides various operations for dynamically assembling and connecting components and conducting input/output operations through connectors. The basic building blocks of these connectors are channels, which are primitive communication media with two distinct ends. Channels in Reo are broadly defined and can differ in synchronization, buffering, ordering, computation, and data handling policies. Complex connectors are created from simpler ones using the "join" operation, which essentially merges nodes at coincident channel ends, allowing the creation of intricate connectors from a diverse mix of channel types.

Connector semantics in Reo is a culmination of individual channel behaviors (defined by the user) and node behaviors (defined by Reo), particularly involving three node types. The simplest of such connectors use synchronous channels, depicted as solid arrows, allowing data transfer only when simultaneous input and output can occur. A special variation is the lossy synchronous channel.

The operational semantics of Reo connectors are described using constraint automata, which are related to timed data streams (TDS). The use of constraint automata allows for adaptation of analysis methods for classical finite state automata, which alone are insufficient to encapsulate Reo's complex constraints, particularly the intricate blend of synchronous and asynchronous actions.

In essence, constraint automata represent acceptors for groups of timed data streams observed at ports a1, ..., an. These automata monitor data at these ports and respond by changing states or rejecting data if it doesn't correspond to any existing transition within the automaton. They serve as a semantic model to describe the behavior of Reo connector networks through TDS languages.

The paper also discusses the technicalities of using constraint automata to model the detailed timing and interactions at connectors, such as channels. It addresses how the relevance of timing information is confined to the specific connector, with importance placed on the initial timing values for determining future active states. The concept of "weakest delay constraint" (dc) is introduced to define the minimal necessary constraint for ensuring a transition from one state to another, with specific notation and definitions given for clarity.