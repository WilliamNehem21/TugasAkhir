This platform delivers a variety of applications and security services to users in an integrated, effortless, and inconspicuous manner. It’s a flexible and comprehensive system, compatible with a range of devices such as computers, PDAs, and smart environment gadgets, supporting various network infrastructures, including both wired and wireless connections, and different communication methods.

The Sicari platform has a core framework that runs atop a Java Virtual Machine, essential built-in services that are always present, and additional optional services for applications. Critical services include authentication management, identity handling, cryptographic key management, and policy services, all of which applications can depend on.

A Sicari application is a sophisticated piece of software crafted to perform complex functions while interacting with users. It has interfaces for user interaction and programming, using the platform's services to accomplish its goals.

The platform aims to translate informal security policies, as specified by security managers, into precise machine-readable formats which the system can enforce.

The platform adopts a portion of the XACML language focusing on key components and attributes. The selection aims to achieve a level of expressiveness proven effective by existing examples in scholarly writings, although it doesn't yet support certain XACML concepts like obligations and rule combining algorithms.

Policy enforcement in the platform involves ensuring that actions related to security can only occur within the bounds of set security policies. It identifies security-sensitive tasks, refers to policy decision components for action determination, and enforces these decisions, regulating access to resources accordingly.

For policy enforcement — such as access authorization — every active participant within the service infrastructure must be authenticated. To this end, the platform offers various local authentication methods tailored to the specific scenarios and characteristics of the user and the local platform instance.

The policy decision point (PDP) actively keeps the policy enforcement point (PEP) updated on security policies. When changes are made in the master policy at the PDP, they are relayed to all PEPs using it. Both components exchange regular messages to guarantee that PEP always applies the most current policy.

The system identifies objects by class and characteristics fields, with a specific classification number for client objects and accompanying policy data that need to be deciphered by specialized COPS protocol modules. The existing open-source COPS implementation from the University of Waterloo has been augmented with new classes to handle client-specific policy content like XACML.

Finally, a methodology for extending the COPS protocol to carry XACML policies as payload has been developed. Any addition to the COPS protocol must consider the specifics of the target policy language, and the structure for client-type specific objects and protocol extensions should be well-documented to ensure the PEP and PDP can properly interpret and manage the policy-specific payload.