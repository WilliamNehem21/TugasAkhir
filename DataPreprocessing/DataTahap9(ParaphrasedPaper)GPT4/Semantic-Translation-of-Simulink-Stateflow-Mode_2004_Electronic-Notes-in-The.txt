In the realm of model-based development, the integration of diverse design tools is necessary to create a framework that allows for semantic interoperability -- meaning different tools understand models in the same way. This is particularly relevant in the embedded systems field, where MATLAB Simulink/Stateflow (MSS) is popular for simulation and other tools like Charon, which use hybrid automata, are employed for verification.

Simulink is feature-rich, allowing for a blend of signal processing, continuous dynamics, and discrete states, which can sometimes lead to complexities when trying to represent these mixed behavior models in hybrid automata (HA). In response, a practical approach has been to focus on a Simulink subset that clearly distinguishes between continuous and discrete behaviors and limits the number of supported Simulink blocks to a useful range.

In discussions of model transformations, a production or rule is defined as the core transformation unit that involves a pattern graph made up of vertices and edges. The roles assigned to pattern elements -- bind, delete, or new -- determine their actions during a transformation. The transformation occurs by matching elements marked as bind or delete, followed by the deletion of matched elements labeled delete and the creation of those marked new, contingent on the match success and the satisfaction of guard conditions.

The conversion algorithm outlined in section 4 has been applied using the GREAT tool, with the algorithm consisting of numerous rules and tests/cases. The translation process is split into two stages: identifying discrete states in the Simulink/Stateflow model, and then determining the continuous dynamics for each state.

Ultimately, the paper presents a methodology to convert MSS models into HSIF models. This conversion preserves dynamic behavior across different elements such as continuous blocks, Stateflow diagrams, and switches in MSS, ensuring that the transformed HSIF models with hybrid automata accurately reflect the original MSS model's dynamics. This transformation relies on a formalized technique that involves graph transformations.
