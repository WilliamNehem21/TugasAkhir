This paper discusses the challenge of converting textual scenarios into Petri-net models and using these formal representations to generate test scenarios, particularly for large, complex systems. Petri-nets, grounded in rigorous mathematical theory, offer a comparatively simple way to model, simulate, and analyze the properties of concurrent systems through reachability trees.

The structure of the paper includes an approach overview, the language for scenario writing, the process of transforming scenarios into Petri-nets, a strategy for generating test scenarios, and a review of related work, conclusions, limitations, and future work suggestions.

The proposed approach involves translating scenario sentences, whether imperative or declarative, into Petri-net elements—nodes as transitions or places—and connecting them with arcs to create a Petri-net model, which can inform subsequent software development activities like model-based testing (MBT). MBT can utilize these formal models to generate test scenarios and execute tests automatically, addressing a significant challenge in adapting formal Petri-net models from real natural language (RNL) scenario specifications.

Scenarios begin with an initial state, and through their episodes, which describe the operational behavior, achieve a goal. Episodes vary in nature; they might be simple, conditional, optional, or loop constructs, occurring based on internal or external conditions. The paper applies this to an online broker system scenario, illustrating Petri-net components such as transitions, places, tokens, and arcs, and how they denote system activities, states, and conditions.

The process of deriving a Petri-net (PN) from a scenario includes identifying event occurrences (episodes and exceptions) and their related conditions. Transitions represent the events, with input places denoting prerequisites, and output places representing the outcome. The initial marking of the PN indicates the initial state. If scenario descriptions or Petri-nets contain defects impacting properties like unambiguity or consistency, feedback is used to refine them. If no defects are present, the resultant Petri-nets facilitate the generation of test scenarios.

Lastly, reachability analysis is used to construct a reachability tree from a Petri-net, providing insight into potential system states. This analytical technique underpins the strategy for accurate test scenario generation.