Queuing Petri Nets (QPNs) are an advanced framework for performance modeling that combines elements from traditional Queueing Networks (QNs) and Colored Generalized Stochastic Petri Nets (CGSPNs). However, QPNs can become complex, with large models leading to a vast number of elements, making them difficult to handle using existing analytical techniques and typically requiring time-consuming discrete-event simulations.

In this study, the researchers utilize the Layered Queueing Networks (LQNs) formalism and its solvers to overcome the challenges posed by complex QPN models. They transform QPN models into LQN models, which can be solved using a variety of LQN solvers, including:
- LQNS: the standard analytical solver for LQNs
- LQSim: a discrete-event simulator for LQNs
- LINE: a solver that employs fluid-limit approximation to speed up the analysis.

The paper focuses on automating the model-to-model transformation from QPN to LQN, enabling non-experts to capitalize on LQN's benefits without needing detailed knowledge of either formalism. This automated process also helps avoid errors and inefficiencies associated with manual conversion.

The authors acknowledge the limitations of current transformation tools like Descartes Modeling Language (DML) and Descartes Network Infrastructures (DNI), which support QPN but not fluid analysis-based LQN solving. They outline the contribution of this research as the development of a systematic, automated transformation from QPN models into LQNs, detailing the specifics of the transformation process, its capabilities, and its limitations.

Additionally, the research discusses the semantic disparities between the QPN and LQN formalisms and the limitations of certain LQN models with LINE. The paper uses two examples to showcase the transformation and assesses the accuracy and efficiency of various solvers.

The paper is structured with background information, an analysis of existing works on fluid analysis and model-to-model transformations, the proposed transformation methodology, and the evaluation of the transformation and solvers. The authors conclude by emphasizing the advantages of their approach, including enhanced solver support for existing QPN models, and propose future research directions.

Overall, the study introduces an effective method for handling complex QPN models, bridging the gap between QPN and LQN formalisms to expand the toolset available for analyzing performance models in a more time and resource-efficient manner.