This academic paper discusses how the Term Rewriting Systems (TRS) leverage an advanced theory of types from the Prototype Verification System (PVS) to represent TRS objects. These objects include binary relations (abstracted as functions of type t:[t->t]), and substitutions (a subset of these functions mapping variables to terms [v->term] with a finite domain). This use of types allows higher-order theorems to be specified more easily and intuitively than with first-order formalizations like the one presented for the critical pair theorem in ACL2.

The paper is structured as follows: Section 2 offers background knowledge on PVS and outlines the specification of fundamental reduction concepts. Section 3 details the components involved in the TRS theory specification. Subsequently, Section 4 demonstrates the practical application of TRS by detailing the formalization of the Knuth-Bendix critical pair theorem. Prior to concluding, Section 5 surveys related contributions in the field.

PVS is recognized for its modularity through parameterized theories and possesses a sophisticated type system that accommodates subtypes and dependent types. It includes a wide variety of constructs for expressing different concepts. Moreover, PVS specifications are organized into theories, with the most important groups known as the prelude. Each theory includes declarations for types, constants, variables, axioms, formulas, and importings that facilitate the sharing of names across different theories. Parameterization of theories enhances their versatility, as exemplified in the ARS PVS theory.

The TRS framework is implemented in PVS version 4.2, encompassing 350 lemmas across 2745 lines (82 kilobytes) and 50489 lines (3.4 megabytes) of proof, generating 124 Type Checking Conditions (TCCs). Within these, the ARS theory alone consists of 65 lemmas, including 5 TCCs.

Finally, the paper notes that, unlike previous general formalizations of rewriting theory, the development of ARS and TRS theories in PVS was carried out naturally, using the higher-order language of PVS to represent complex objects of the rewriting theory. This methodology provides a straightforward and polished means of depicting second-order constructs like reduction relations in a diagrammatic form.