This lemma indicates that the concept outlined in Definition 2.3 can be expanded with an additional transformation. The proof is simple and can be approached in two ways: either by adapting the proof used for a previous theorem to include the second transformation from Lemma 2.2, or by directly applying the proof from Lemma 2.2.

The paper explores how the concept of arrows and Freyd categories intersect. It begins by revisiting the definition of a (closed) Freyd category and its link to strong monads. It then delves into how arrows within a cartesian closed category (as per Definition 2.1) relate to Freyd categories, leading to the proposed formulation of an enriched Freyd category. The subsequent section will differentiate between enriched Freyd categories and standard Freyd categories.

The discussion progresses from considering an arrow within a category with finite products (as per Definition 2.3) to comparing its structure to that of a Freyd category. This comparison yields a new, broader concept termed indexed Freyd categories. The relationship between indexed Freyd categories and Freyd categories is examined, and a specific condition is identified that, when applied to indexed Freyd categories, renders them isomorphic to Freyd categories.

The proposition demonstrates that there are two coherent methods to translate between arrows and closed indexed Freyd categories, and vice versa. These translations are shown to be essentially inverses of each other, meaning they are isomorphic. In order to clarify this concept of isomorphism within this context, the paper defines morphisms for arrows within a base category and morphisms for indexed Freyd categories within a base category.

Highlighting a counterexample related to the counit of adjunction not being an isomorphism, the paper reveals a fundamental distinction between Freyd categories and indexed Freyd categories. In Freyd categories, computations are represented within the function space k(x, y) and have a single input, which may or may not have a structured typeâ€”structured if arising from a comonad, or unstructured if arising from a monad. On the other hand, computations in indexed Freyd categories involve two inputs; within the function space hw(x, y), there is access to types w and x, and either input could potentially have a structured type. For closed indexed Freyd categories, the type w input is required to be unstructured.