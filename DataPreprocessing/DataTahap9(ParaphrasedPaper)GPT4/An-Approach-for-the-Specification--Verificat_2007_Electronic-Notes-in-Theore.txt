This paper presents a framework for designing, verifying, and enforcing security within systems through open system analysis. The approach enables modeling of the system along with potential intruders, and ensures the system adheres to security specifications detailed in temporal logic. If necessary, the framework can automatically generate a control process to restrict the intruder's actions, thus maintaining the system's security.

Building on past research, the authors introduce process algebra controller operators, denoted as Y d X, with Y being the controlling program for the unspecified component X. These operators are capable of emulating the function of security automata and enforcing safety properties, as well as ensuring the non-interference properties under specified conditions.

The paper also discusses a specification framework known as G N D C, which can describe various security properties including non-interference, agreement, authentication, and non-repudiation. This framework allows for the uniform modeling of dependable systems and the analysis of their dependability properties, enabling the expression and comparison of a family of security attributes.

The text is divided into multiple sections: Section 2 revisits process algebra and temporal logic, Section 3 details the system specification and verification approach, Section 4 explains the definition and synthesis of controller programs, Section 5 describes a related methodology for managing dependability properties, and Section 6 concludes.

A unique aspect of this methodology is partial model checking, which requires only the potentially untrusted component of a system to be monitored. This means components deemed trusted are not constrained, offering advantages when it is inconvenient or impossible to verify the entire system.

Within the G N D C schema, the concept of the "most-general intruder" simplifies verification for various relations by avoiding the need for universal quantification, allowing established techniques and tools to be used. However, for certain complex properties, this approach may not work, and logic-based methods are necessary.

The paper also illustrates that dependable systems can be modeled within this framework, making it possible to analyze dependability properties. Systems must be modeled using CCS, including their failing behaviors and corresponding fault-recovery procedures, with the environment acting as a fault-injector. This division between the system and its environment is advantageous for precise analysis.