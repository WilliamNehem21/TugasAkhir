The latest OCL (Object Constraint Language) 2.0 proposal has introduced two types of semantics for the language: a metamodel-based semantics using UML to map language concepts to semantic domains, and a set-theoretic formal semantics, known as the object model. However, there are issues with consistency and completeness in these methodsâ€”namely, the formal semantics has not yet incorporated the concept of OCL messages, and there is an absence of integration with statecharts and definitions for state-related operations.

This article addresses these shortcomings by proposing a formal semantics for OCL messages, aiming to harmonize the two semantic approaches. To this end, the object model framework is expanded to include a more comprehensive system state that encompasses all necessary data for evaluating OCL expressions, specifically those related to OCL messages.

In the context of OCL, a system represents an instance of an object model at a specific time, with varying states due to transformations that occur during execution, such as changes in the number of objects, attribute values, and other attributes. The OCL 2.0 proposal describes a system state, but the formal semantic representation is not complete as it does not account for the currently activated statechart states or the messages being transmitted.

The OCL 2.0 proposal introduces OCL messages, which allow for the specification of behavioral constraints concerning inter-object messages. OCL messages represent either asynchronous signals or synchronous/asynchronous operation calls. Synchronous calls involve a waiting period for a return value, while asynchronous calls discard potential return values. To verify if a message has been sent, the "hassent" operator is employed.

Section 3.1 of the article details the syntactical components of the enhanced object models, while Section 3.2 presents an augmented system state version to encapsulate message-related operations. The article does not elaborate on the tuple components of expanded object models or formal syntax for signals and statecharts, instead referring readers to other sources for detailed information.

To evaluate expressions that interact with OCL messages, additional runtime information is necessary, including the tracking of active operations and histories of signals and messages sent. The article also points out an error in the OCL 2.0 proposal regarding the treatment of message identity and introduces a function to address free variables, outlining rules for post-expression validity in OCL postconditions.

The article builds upon previous work encompassing statecharts and state-related operations. To properly define OCL messages semantically, the authors have introduced call identifiers to correctly attribute messages between source and target objects, forming an abstract representation of the UML semantics, which suggests that a specific reply object is sent following a synchronous operation call.

Overall, the research makes a direct contribution to the development of OCL 2.0 by extending object models and system states to facilitate a robust formal semantics for OCL messages and related operations.