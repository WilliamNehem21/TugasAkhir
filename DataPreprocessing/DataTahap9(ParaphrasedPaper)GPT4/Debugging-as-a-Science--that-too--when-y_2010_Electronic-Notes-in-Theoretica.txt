Debugging is a critical and time-intensive part of software development, often involving the arduous task of going through extensive execution traces to locate the source of a detected error. This paper reviews the transformation of debugging from a largely ad-hoc process into a structured, scientifically driven activity, backed by recent technological advancements. The paper also investigates how formal methods like model checking relate to the task of software validation, underlining the importance of incorporating them into the debugging process.

Given the inevitability of changes in software over its lifetime, the authors emphasize the need for debugging approaches that account for software evolution. They propose employing symbolic execution and satisfiability modulo theories (SMT) solvers to enhance the efficiency of automated software debugging in evolving codebases.

The paper is structured as follows: Section 2 evaluates current debugging practices and commercial tools, with a focus on manual command line tools such as gdb and jdb, which allow step-by-step execution but are limited by their reliance on the programmer's memory and manual intervention. Section 3 discusses novel approaches to debugging from the last decade wherein bugs are pinpointed by comparing traces dynamically.

The current way of managing test suites with coverage criteria for programs is discussed, and the authors describe how bug reports from these systems often fail to directly identify the actual error, thus necessitating systematic methods for selecting successful runs to create more meaningful bug reports. The paper touches on research that addresses this issue, and further examines the misunderstanding between the concepts of model checking and debugging from an end-user perspective, though they are dissimilar processes.

For debugging software undergoing evolution, including different versions or implementations of the same protocol, the authors advocate a method based on symbolic execution and SMT solving. The recent progress in the efficiency of SMT solvers has made these formal and symbolic methods practical for use. Despite the growing interest in symbolic execution for test generation, its application in debugging remains underexplored, a gap the authors urge the software engineering research community to address. They conclude by stressing the importance of developing scalable, formally grounded debugging methods for industrial-scale software, with symbolic analysis and SMT solving expected to play key roles.