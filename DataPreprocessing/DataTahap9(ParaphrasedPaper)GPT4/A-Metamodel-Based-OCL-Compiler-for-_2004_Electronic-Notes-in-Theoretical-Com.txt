The paper begins with a review of related literature and preliminary matters in sections 2 and 3, followed by an introduction to the structure of the OCL compiler in section 4. Compatibility between OCL, UML, and MOF is discussed in section 5. Section 6 details the code generation process, and section 7 concludes with a summary of the findings and a preview of future research.

The authors discuss the Dresden OCL Toolkit based on the OCL version 1.3, highlighting its extensible compiler, capacity to manage OCL constraints like preconditions, postconditions, and invariants on UML models, as well as code generation for Java and SQL. The toolkit's effectiveness is affirmed through widespread testing and industrial collaboration, underpinning a strong OCL support foundation.

The USE tool for evaluating OCL expressions over UML models is described, showcasing its ability to make textual model representations, produce model instances ("snapshots"), and evaluate OCL expressions using these snapshots. Differences between this tool and a prototype based on OMG standards are also emphasized, noting that unlike USE, the new tool employs code generation for OCL expression evaluation instead of interpretation.

The paper clarifies pivotal terms and technologies, highlighting the MOF metadata architecture and its role in the definition of XMI for model exchange across software tools. JMI and MOF-IDL mapping are explored to show how they facilitate access to shared data in a common repository.

The primary architecture of the toolkit is grounded in the MOF repository, with the NetBeans Metadata Repository chosen for its integration capabilities within the NetBeans IDE or as a standalone product.

Section 5 of the paper details the alignment between OCL, MOF, and UML, addressing differences between the MOF and UML core, the introduction of a unified interface for OCL metamodel access, and an adapter-based system for mapping MOF and OCL data types. It also presents strategies for uncoupling OCL's well-formedness rules (WFRs) from UML's internal structure to aid alignment with UML 2.0.

The central element of the architecture is Common-OCL, which consolidates elements from the OCL metamodel and is accessible through ICommon interfaces created by the MOF repository. UML-OCL contains the OCL metamodel, which integrates with UML, facilitating code generation for OCL expressions within UML models.

Lastly, the paper mentions the development of a prototype metamodel-based OCL compiler with an ongoing parser module project, stressing the significance of efficient tool support for practical application.