The addition of reflective reasoning can significantly enhance the capabilities of a proof assistant. However, to make this theoretical enhancement practically available to users, there is a need for extensive infrastructure to facilitate reflective reasoning. This paper examines the challenges in implementing a practical layer of support for reflective reasoning.

Reflective reasoning involves the use of second-order variables to represent various types of terms. For instance, a second-order variable z[] denotes all closed terms, while z[x] represents terms that may contain the variable x as the only free variable.

Moreover, reflective reasoning employs an inductively-defined type system encompassing all quoted terms. Although the paper does not dwell on the specifics of the encoding previously published, it mentions that a type exists to express meta-properties.

There is a representation function that converts rules into provability statements. Alongside this, a proof-checking predicate is utilized to verify the correctness of proofs. An important aspect of this proof-checking is the validation of reflected rules against the provability definition, exemplified by the substitution lemma.

The paper clarifies that meta-variables in these rules are implicitly universally quantified, and while these quantifiers are not explicitly present in the meta-logic, they are assumed in the schema language to avoid variable capture issues.

One challenge noted is the correct universal quantification of meta-variables within terms, as this explicit quantification is beyond the expressive capacity of the meta-logic.

The paper concludes that when logic is reflected, its formulation is only minimally altered, allowing existing reasoning methods and proof procedures to remain effective while enabling reflection on meta-properties of the logic.

The authors emphasize the importance of implementing the theory of reflection in parallel with its development to prevent paradoxes and misconceptions, acknowledging that while they have simplified the explanation in the paper, the actual formalization is complex and demanding.

The current application of reflection is in the development of an account of F<: type theory, serving as both a testbed and a guide. Future work involves exploring alternative approaches to the proof induction principle, which inherently lacks modularity. Nonetheless, the authors believe that practical advancements can be achieved through enhanced automation and hierarchical decomposition of the induction process.