The importance of knowing the variable value ranges in programs is critical for applications like compiler optimization and program analysis. Traditional abstract interpretation methods, particularly the interval abstract domain, provide numerical bounds for program variables, but some applications like automatic parallelization benefit more from symbolic rather than numeric ranges. To address this, we introduce a new numerical abstract domain called the abstract domain of parametric ranges, which deduces symbolic ranges dependent on nonnegative parameters for each variable. This is especially relevant when dealing with procedures that naturally operate with nonnegative parameters, such as the length of a list or the size of an array.

Our abstract domain of parametric ranges calculates variable bounds as linear expressions built on nonnegative parameters, offering a complexity of O(nm) both in time and memory, where 'n' represents the number of variables and 'm' represents the number of parameters. This paper demonstrates the use of this domain in deriving symbolic ranges for the sizes of list segments in programs that manipulate singly-linked lists. Preliminary experimental findings are also shared.

We analyze related works that either restrict symbolic ranges by variable order or by using loop counters and integrate integer coefficients. Our approach is distinct in that we limit symbolic bounds to involve nonnegative parameters, which offers advantages in terms of computational cost.

Earlier work provided strategies to numerically represent singly-linked list manipulations by segmenting lists and using nonnegative integers as counters for segment sizes. These counters, alongside typical numerical variables, offer a foundation for the abstract domain of parametric ranges to capture symbolic ranges effectively.

Finally, as symbolic ranges using linear expressions over nonnegative parameters prove to be a robust tool, we highlight areas for future research. These include expanded experimentation, applications in analyses like buffer overflow prevention, and the potential for incorporating nonlinear expressions to further enhance the expressiveness of symbolic ranges.