In this academic paper, the authors describe a method for representing negation in structures with a 'minus' symbol in a formal system implemented in Maude, a high-level language and high-performance system for metaprogramming. They choose a unique syntax "{_,_}" for representing conjunction to prevent confusion with common uses of brackets in meta-level programming and within Maude itself. Structures' associative and commutative properties, as well as their units, are denoted using operator attributes, such as "[assoc comm id: ff]" for disjunction.

The module relies on another module named "ksg-signature" and follows the rules of the "system ksg," where the rules are applied in a bottom-up proof search using term rewriting. A key condition in this system is that inference rules are allowed only outside the scope of a negation context. To ensure the weakening rule does not apply to negative atoms, two separate weakening rules are introduced. This measure leverages Maude's pattern matching to prevent unsound applications.

An issue with the system is that a rule which copies arbitrary substructures can rapidly increase the complexity of the search space. To manage this, the application of this rule is restricted, which is discussed further in the context of proof theoretical approaches aimed at reducing non-determinism during proof search.

The paper details an implementation where different phases of the proof search process are segregated into distinct functional modules. These modules are invoked by the "prove" operator of the "ksg-strat" functional module. The process is described: initially, the "upterm" operation converts the input query from an object-level term to a meta-level Maude representation as defined in the "ksg-signature" module. Next, the meta-level term representing the negation normal form is calculated via the "metareduce" operation, which takes the meta-representation of the "ksg-unf" functional module as an argument. The resulting meta-level terms are then processed with meta-level representations of other functional modules—specifically "distribute," "interaction," and "weakening"—which apply their rules to further reduce the meta-level terms.