The paper addresses the design and development of user interfaces for interactive theorem provers such as Isabelle and Coq. Traditionally, interface discussions have centered on user functionality, such as efficient management of proof scripts, and assisting users in crafting these scripts that are akin to mathematical texts. Innovations like proof-by-pointing, graphical metaphors, and specialized interaction models aim to enhance user experience, while web interfaces facilitate collaborative proof development. Moreover, integrated environments cater to specific applications with tailored prover interfaces.

Curiously, the literature has overlooked engineering considerations for constructing such interfaces, focusing instead on larger software structures. For instance, brokers are employed to separate the interface from the prover to avoid entanglement, and while there's some exploration of client/server communication in web interfaces, UI implementation specifics are rarely addressed.

This paper introduces engineering principles to the domain of theorem prover interfaces, highlighting non-functional properties essential for high-quality interface software. Using the i3p, an interactive interface for Isabelle, the paper illustrates the application of software engineering to attain these properties.

It's emphasized that the non-functional properties, such as usability, maintainability, and extensibility, are not stand-alone objectives; they're relevant because they contribute to the effectiveness of prover interfaces. Software engineering literature offers techniques to achieve these properties, which the paper seeks to transpose onto the context of prover interfaces.

Key components of i3p are outlined, such as the theory editor that supports mathematical symbols and the result viewer that displays prover messages. The system's architecture is crafted to meet the desirable non-functional properties, with each component designed to fulfill specific criteria like traceability and testability. For instance, i3p consists of approximately 350 unit tests that aid in changeability and maintenance.

The paper employs concepts from object-oriented frameworks and the interceptor pattern to ensure extensibility. In i3p, events are used to manage interactions between the framework and its extensions, with a particular emphasis on event-based designs that benefit from the generalized framework. The design strategies also explore how the prover and interface can operate with varied functional distributions and the potential for the interface to offer functionalities independent of the prover.

i3p supports extensibility through new drivers, and the system's structure enables independent development of modules. Alternative frameworks like pgkit provide XML-based communication protocols, and although they strive for reusability and extensibility, they might lack mechanisms for prover-specific features and are not evidently testable.

The paper concludes by recognizing that while existing studies have touched upon the goals for prover interfaces, they have not methodically applied software engineering principles to achieve these goals. The current work makes a case for integrating general software engineering strategies into the development of prover interfaces, thereby unlocking potential benefits such as improved usability and maintainability.