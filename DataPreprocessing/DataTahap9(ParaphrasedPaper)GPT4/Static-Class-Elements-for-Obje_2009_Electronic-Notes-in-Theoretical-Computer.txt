The academic paper discusses enhancing Object-Z, a formal specification language, by incorporating static class elements, which are commonly used in object-oriented programming languages but are absent in traditional object-oriented specification formalisms. The absence of these elements in formal specifications could hinder a seamless and refined transition from the specification to the implementation.

The paper introduces a technique to model static variables and methods in the Object-Z language by adding a property called 'classname', which refers to the class of an object, similar to how 'self' refers to the object itself. This approach allows static elements to be modeled in Object-Z without the need for additional global variables or functions that could disrupt the object-oriented structure.

The authors illustrate how the singleton pattern—a design pattern often implemented using static variables and methods—can be modeled with these new Object-Z extensions. They argue that this integration of static elements is an essential step during the later stages of model development in object-oriented implementations.

Furthermore, the paper examines how static elements can fit within the framework of refinement in formal specification. Refinement is the process of moving from a more abstract model to a more detailed and closer-to-implementation model. The introduction of static elements raises questions about refinement validity.

The authors assert that the inclusion of static elements should be considered a valid refinement step, thereby making their new extension a practical way to bridge the gap between formal specifications and object-oriented programming concepts.

In conclusion, the paper expands Object-Z to include static elements, offering a way to incorporate classic object-oriented programming structures directly into formal specifications, enhancing the methodology for building software from abstract models to concrete implementations.