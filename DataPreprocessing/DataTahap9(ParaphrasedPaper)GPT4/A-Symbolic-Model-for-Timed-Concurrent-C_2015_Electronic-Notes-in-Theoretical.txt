The NTCC calculus is an enhancement of concurrent constraint programming (CCP) that includes discrete time units to facilitate the modeling of reactive systems. NTCC introduces constructs for making non-deterministic choices and handling asynchronous behaviors. 

The paper describes a method to symbolically represent NTCC processes' behaviors, demonstrating that this symbolic model can be derived for any process in a finite number of steps and affirming its accuracy in relation to the operational semantics. Examples are provided to illustrate the computation of a process's symbolic model. Furthermore, a logic is introduced for specifying system properties, and the use of the symbolic model in established model checking algorithms is detailed. The paper concludes by highlighting related work and briefly introducing a prototype tool implementing the proposed approach.

NTCC processes interact with their environment within discrete time intervals, receiving inputs as constraints and outputting updated information after processing. Parallel processes and the concept of local variables within processes are incorporated in NTCC.

The paper's approach uses logical formulas to represent the reachable states of a process, considering both observable and internal transitions. These logical operations are analogous to the eventually and always modalities in Linear Temporal Logic (LTL).

Proofs are provided to show that since the number of potential reachable states is finite, the process of computing fixpoints must terminate.

To describe system properties, the paper introduces Constraint Temporal Logic (CLTL), which allows atomic formulas to be constraints. Decision Diagrams for Constraints (DDCs) are also introduced, emphasizing their complexity and the proposal of using path-reduced DDCs for a more manageable semi-canonical structure.

The paper discusses constructing a symbolic model of a NTCC process and recalls the CLTL logic for expressing temporal properties. Model checking techniques are applied to verify if a process meets a specified property by combining the system model with the formula under evaluation.

Finally, the paper acknowledges the state explosion problem in model checking and suggests future work on abstract debugging and abstract interpretation frameworks to tackle this challenge and simplify state-space reduction for verifying system properties.