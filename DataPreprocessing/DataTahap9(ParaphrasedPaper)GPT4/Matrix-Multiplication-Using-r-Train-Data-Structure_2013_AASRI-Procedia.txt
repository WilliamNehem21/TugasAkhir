A novel dynamic data structure called R-train was introduced in 2011, designed for efficient execution of basic operations like insertion, deletion, and searching, especially within the context of parallel computing. The paper discusses the first application of the R-train data structure to matrix multiplication on parallel systems.

The R-train begins with a "start" that refers to the head of a linked list, called the pilot, which contains the address of data element c1 in memory. The pilot's length can be any natural number, while the subsequent "coaches" are arrays (termed larrays) with a fixed size of r elements, where each element is of the same data type. Instances of R-trains are identified by the "r" value, such as 1-train or 100-train, with 0-train being undefined since it would imply no storage space.

An R-train operates as a two-tier data structure, providing an efficient way to handle large volumes of identical data. It can store an array of x elements even when it's not possible to allocate space for that many elements at once in memory. Elements are accessible using indices and whether a particular coach of an R-train can accept more elements — termed "passengers" — is indicated by the coach's "status," which can change over time.

The paper proposes an algorithm for multiplying two N x N matrices, A and B, to generate a resultant matrix C using the R-train data structure, optimized for parallel execution on a system with M processors. The key points of the proposed algorithm are:

1. The first two steps of the algorithm are performed in O(n) time.
2. Steps 3, 4, 5, 6, 8, and 9 are executed in O(1) time.
3. Step 8 involves a loop that is iterated O(n) times due to the loop in step 7.

Using the sum and product rules for calculating algorithmic complexity, the proposed algorithm operates with a complexity of O(n), assuming that the number of processors M equals n². This suggests that the algorithm efficiently manages the multiplication of large matrices in a parallel computing environment when M and N are proportional.