In the paper, Section 3 describes two linear systems named LN and LN which stand for "closed function" and "closed argument," respectively. These systems have various versions yielding different properties, with substitution being explicitly addressed in them.

Section 4 presents evidence that all primitive recursive functions can be represented within these calculi.

Section 5 reveals that system LN is capable of expressing more than just the primitive recursive functions, indicating it has a broader computational scope.

The paper concludes in Section 6.

A portion of the paper touches on the nature of substitution within these systems, emphasizing the explicit nature of substitution processes as explained in the referenced detailed section.

The provided proof outline uses structural induction on a term 't' to show that during reduction, the constraints on variable availability in terms are maintained. It highlights that the reduction rules involving iterators are the only ones that might duplicate or remove terms. Importantly, it is stipulated that the function being iterated should be 'closed' while forming the term 'iter t u v'. As a result of this constraint, any reduction of an iterator will consistently duplicate or eliminate a closed term, ensuring that the set of free variables is unchanged, and the resulting term remains correctly formed.