This paper outlines the authors' experiences with IF, an open validation framework designed for verifying distributed software systems. As such systems grow in complexity, no single existing tool can manage the entire validation process alone. The IF framework utilizes an expressive intermediate language that enables the integration of multiple validation tools, offering advanced validation techniques. The application of IF to large-scale case studies, including telecommunication protocols and embedded systems, validates the practicality of this approach.

Validating distributed software automatically is critical for producing reliable systems, such as communication protocols and embedded software. Despite extensive research and tool development, the validation remains challenging. Initial software descriptions are typically in high-level formalisms, and a wide array of tools is needed to address various stages of development. No individual tool, whether commercially or academically developed, can meet all practical needs by itself.

Commercial tools, such as ObjectGeode and Rational Rose, offer development features like editing and testing but are limited in verification techniques and are not easily integrated with other tools. Conversely, academic tools like SMV and UPPAAL offer powerful verification methods but often support only low-level input languages, limiting their industrial application.

The IF specification starts with the initial program description, expressed in languages like SDL or UML, which is then translated automatically into the IF format. IF employs timed automata extended with discrete variables for processes and supports various buffer policies.

A well-defined API in IF allows for high-level transformations and abstract interpretation of the program. This API is optimal for translating IF to other specification languages and supports symbolic model checking and minimal model generation using Binary Decision Diagrams (BDDs).

The paper discusses practical use cases, including the SSCOP protocol, where Simplified SDL specifications from France Telecom R&D were used, and the MASCARA protocol from WAND Consortium, showing how a large SDL description can be validated through layer-specific verification. The IF environment has proven effective in analyzing various protocols and software, particularly when traditional model-checking was inadequate for large examples.

The paper suggests improvements for the IF language to handle dynamic specifications by allowing parameterized descriptions and dynamic component creation and destruction, as well as enhancing component description to better express structured control similar to Statecharts.