In this scholarly paper, the authors introduce a formally structured method for refining systems over time, known as the timewise refinement method. This approach builds upon the traditional refinement calculus utilized for action systems, incorporating temporal considerations to facilitate the step-by-step refinement of systems that are modeled using timed action systems formalism. The critical task for a developer when refining an abstract system into a more concrete implementation involves proving adherence to both functional and temporal property requirements.

Action systems, as a formalism, provide a state-based language to describe and develop reactive systems while preserving specifications' correctness. Initiated by Back and Kurki-Suonio and based on an extension of Dijkstra's guarded command language, this formalism has proven useful not only in software design but also in hardware systems, encompassing both synchronous and asynchronous domains.

The authors discuss three alternative refinement methods that focus on stepwise development while preserving the correctness of models through successive refinements. They compare these methods with their approach, which does not take into account the relaxation of time constraints in VLSI systems, where system constraints are specified and not open to modification. Instead, time constraints can be refined to align with the updated timed action system.

The paper describes the structure of a timed action system, including its interface (defining global variables visible to other timed action systems), its declarative section (establishing local variables, action definitions, and mandatory constraints), and its iterative section (the do-od loop dictating the system's reactive behavior).

Delving deeper, the authors explain deterministic and non-deterministic predicates used for action delays, dividing operational segments into start, finish, and time propagation actions that either execute or release a timed action based on its enabled state, to prevent deadlocks.

An example provided illustrates how an action is placed into a timed action system, demonstrating the use of non-deterministic delay to establish a range of operation times. The paper stresses that the delay details depend on factors like the specific multiplication algorithm or production technology, but does not focus on these aspects.

They then apply the refinement calculus method to timed actions, emphasizing that their approach maintains the original structure of refinement rules from conventional action systems, simply extending them to include time considerations. In refining a timed action system, the refinement calculus for standard action systems is used, with modifications made to keep constraints relevant according to new action definitions. The authors argue that this process does not constitute refinement of the constraint itself, as it retains the same scope.

In summary, the paper outlines a framework for refining timed action systems by combining conventional refinement techniques with a time-aware approach, allowing developers to maintain correctness while progressively refining both the functionality and temporal aspects of the system model.