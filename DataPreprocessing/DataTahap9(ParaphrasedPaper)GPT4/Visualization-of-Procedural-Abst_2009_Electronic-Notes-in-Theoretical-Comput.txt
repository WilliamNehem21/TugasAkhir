This paper discusses the use of visualization techniques to understand the effects of optimization passes in procedural abstraction. The authors have adapted two procedural abstraction algorithms to illustrate the changes in machine code pre- and post-optimization by highlighting the abstracted sections within the original code. These visualizations assist in comprehending the optimizations more clearly.

Visualizations have been helpful in various scientific fields and occasionally in computer science, especially for understanding complex programs. They can simplify the representation of large program execution traces that are difficult to decode. Software visualization is an active research area, with workshops and symposia dedicated to it.

Through visualization, the authors found that limiting fragment searches to entire basic blocks, as suggested by Debray et al., could severely compromise the effectiveness of their code compactor. Also, previous studies on procedural abstraction optimization have not clearly shown if there's a real-world benefit. This prompted the authors to compare traditional procedural abstraction with tail-merging procedural abstraction through a post-pass optimizer. The results show a slight increase in code reduction with tail-merging over traditional methods across several media programs.

Finally, the paper proposes the creation of an interactive program map, which would be a tool—possibly a Java applet—that allows users to examine program abstractions interactively. This tool would show relationships between abstractions and enable users to dynamically manipulate fragments to observe their impact on code reduction and, given enough profiling data, the estimated runtime of the program.