This work discusses the application of program slicing as a method to mitigate the state explosion problem in model checking of Rebeca models, a technique used to verify concurrent systems. Rebeca (Reactive Objects Language) is particularly suited for modeling concurrent and distributed systems with asynchronous message passing. 

The authors introduce the Rebeca Dependence Graph (RDG), which simplifies the construction of dependency graphs due to Rebeca's asynchronous communication, atomic execution of message servers, and lack of shared variables and procedure calls. This simplicity results in a more straightforward analysis without the complexities associated with object-oriented features like inheritance and polymorphism.

The paper presents four slicing algorithms for reducing Rebeca models: traditional static slicing for general properties, a novel static slicing algorithm for deadlock detection without a specific property, step-wise slicing for refining overapproximated models, and bounded slicing which leverages the semantics of non-deterministic assignments in Rebeca.

Static slicing maintains strong property preservation, meaning that if a property holds or does not hold in the original model, it will similarly hold or not hold in the reduced model. The other techniques overapproximate the behavior of the original model, which may lead to spurious counter-examples that need refinement.

The slicing process is mainly automatic. Bounded slicing and static slicing are completely automatic, while step-wise slicing currently requires some user interaction in the refining step. Future work aims to automate this fully.

The techniques were tested on various case studies demonstrating their effectiveness for reduction. Notably, static slicing was emphasized for its automatic nature and low computational costs, while step-wise slicing benefits from refining the model based on verification results.

The paper concludes that further research is needed to determine which models benefit the most from each reduction technique and how they can be integrated into the Rebeca verification toolset.