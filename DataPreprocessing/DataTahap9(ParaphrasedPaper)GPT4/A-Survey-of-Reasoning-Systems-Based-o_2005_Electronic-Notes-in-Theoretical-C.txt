Euler diagrams have long been a method for visually representing concepts in a simple, accessible manner. Recent studies seek to create structured systems grounded in Euler diagrams to enable diagrammatic reasoning. These advanced systems often add new syntax to enhance their descriptive power. This paper reviews and compares these systems.

While Euler diagrams use zones to symbolize sets with the universal set being their collective union, different semantic interpretations exist. Some require all zones to denote non-empty sets, while others do not. The semantics of Euler diagrams are elaborated in linked discussions.

In the given example, 'spiders' represent the presence of elements; these are known as existential spiders. Spider diagram systems sometimes use 'constant spiders,' which are labeled and reflect constants in predicate logic. Notably, in the SD1 spider diagram system, which is both sound and complete, existential spiders are not allowed in shaded zones, implying non-empty sets but it doesn't permit specifying exact upper limits on set sizes. SD1 is modeled on Venn diagrams, not Euler diagrams.

The paper distinguishes between concrete and abstract syntax, akin to how a graph's physical layout versus its abstract definition are treated in graph theory. Abstract syntax yields precision in the descriptions and is foundational for implementing rules and constructing software tools, while concrete syntax is central to the graphical user interface design.

The SD1 reasoning system is abstract, unlike Swoboda and Allwein's use of directed acyclic graphs (DAGs) at the concrete level for representing and manipulating Euler/Venn diagrams. SD2 expands on SD1 by allowing spiders in shaded zones, introducing the capability to express upper limitations on the number of set elements.

The paper introduces two SD2 reasoning rules: 'splitting spiders' – splitting a diagram with a spider that touches two separate regions into two diagrams with individual spiders; and 'climbing techniques' – maintain a visual resemblance between a premise diagram and its abstract representation after the application of reasoning rules, aiding in automated theorem proving.

For more advanced diagrammatic reasoning, the paper discusses sound (but not complete) rules for a full constraint diagram language and presents CD1 as a sound and complete subset. CD1 imposes syntactic restrictions on arrow endpoints and semantic priority rules, like 'exists' taking precedence over 'for all.'

The paper concludes that although many recent reasoning systems based on Euler diagrams are sound and complete, they vary in expressiveness. Among them, constraint diagrams offer the broadest expressiveness, potentially too broad to be decidable, but they hold practical utility, unlike the full constraint diagram language which is likely undecidable.