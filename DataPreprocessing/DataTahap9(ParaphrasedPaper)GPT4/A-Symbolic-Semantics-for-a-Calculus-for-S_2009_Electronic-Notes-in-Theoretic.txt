The paper discusses the progression from older service-oriented computing (SOC) technologies such as CORBA, DCOM, J2EE, and IBM WebSphere to more contemporary web services. These web services are operations accessible over the web and interact through XML messages adhering to standard formats. To facilitate web services, new languages and technologies have emerged with significant investments from major companies.

However, the authors note that current SOC engineering technologies are largely descriptive and lack a formal, rigorous foundation. A disconnect between practical programming and theoretical methods persists in SOC application design due to complex challenges including asynchronous interactions, concurrency, workflow coordination, and security.

Researchers have proposed using process calculi, key in foundational research on concurrent and distributed systems, to bridge this gap. Inspired by these calculi and the WS-BPEL orchestration language, the authors have developed COWS (Calculus for Orchestration of Web Services), which formalizes service-oriented applications and their behavior.

COWS integrates features from known calculi such as asynchronous communication and pattern matching, capturing web service characteristics like correlation-based communication and compensation activities. The paper introduces COWS syntax, using an Italian-English translation service example to discuss verification problems and illustrate the semantics of COWS.

The paper's main contribution is a symbolic operational semantics for COWS, focusing on suitable semantics for receive activities with placeholder variables. It presents the syntax and semantics of COWS, omitting the precise syntax of expressions but proposing evaluation functions for closed expressions and a function, halt(), to retain only protected activities within a service. The semantics address bound invocations, external communications, and how COWS differs from standard semantics through rules and structural congruence.

Finally, the paper references available analytical tools for COWS, such as type systems for confidentiality checks, model checking for service functionality, stochastic extensions for quantitative analysis, and bisimulation for observational semantics. Examples of these tools' applications to case studies are mentioned to showcase their practical utility.