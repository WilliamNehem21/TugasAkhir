The paper discusses the standard use of the Unified Modeling Language (UML) for modeling object-oriented software systems, noting its semi-formal nature due to the recursive definition of its syntax and natural language description of semantics. UML is graphically represented and supplemented with the Object Constraint Language (OCL) to express constraints not depictable by diagrams. The authors present an integrated formal semantics encompassing several UML diagrams (use case, object, statechart, and interaction diagrams) using graph transformation concepts. The semantics remain consistent with both UML 1.5 and 2.0 despite minor differences.

The authorsâ€™ formal approach facilitates automatic conversion of UML models into graph transformation systems, including OCL expressions. This system represents system states and utilizes graph rules to simulate system behavior, with OCL expressions enhancing rule applicability and attribute calculations. The end goal is to validate software designs before implementation, providing an intuitive and logically consistent method that easily adapts to changes.

The paper outlines a prototype validation system that visualizes the evolution of system state, combining existing tools (AGG for graph transformations and USE tool for OCL expressions). The prototype demonstrates how UML models transform into graph systems, providing an interactive platform to observe system behavior.

In summary, the paper introduces an approach for integrating UML diagrams into a formally defined semantics using graph transformation, complete with a prototypic implementation that allows for validation of software models early in the development process. Future work may include incorporating additional UML diagrams and features, as well as case studies to evaluate the practicality of the approach.