In the main section of the text, the authors describe a specification approach that involves two different systems, namely the writer system and a FIFO (First-In-First-Out) queue. This approach results in the activation of two distinct functions. As part of the explanation, the authors use an "invokes" relationship to connect the `push` function in the main section to a newly introduced function, which, for clarity, is termed `add`. This function corresponds to system components involved in the occurrence of certain events and the observation of specific states within the system model's execution traces. Additionally, they identify two types of properties within the system: 'p2.1' as a safety property and 'p2.2' as a liveness property, both of which are given formal semantic definitions.

The paper then discusses a popular repository of functional property patterns, where the semantics of these patterns are defined using Computation Tree Logic (CTL) and other logical languages. Property specifications utilize a scope, which is optional and comes in six varieties, that determines the part of the model state space where the property should apply. Outside of this scope, the property is not defined. Additionally, the property pattern details how a specific event or state occurrence, or the sequence of multiple events or states, should unfold during system execution.

When it comes to extra-functional properties, the authors reference two works that have expanded on the initial repository by introducing patterns for real-time specifications. They also mention other contributions that have offered different timing property patterns and a repository for probabilistic properties. These patterns address real-world requirements such as reliability, availability, performance, safety, security, and performability.

Lastly, the authors acknowledge that deriving properties is a creative process that relies on different types of system models and the system design process, which can be either top-down or bottom-up. They recognize that, due to the necessity of human involvement in this creative process, it cannot be fully automated. However, they suggest that automation can still play a role and proceed to review notable tool-support proposals found in recent literature.