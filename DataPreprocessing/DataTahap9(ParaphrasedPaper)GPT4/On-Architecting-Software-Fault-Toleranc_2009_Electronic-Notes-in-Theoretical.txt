A well-structured system simplifies complexity and enhances dependability, which is the system's capacity to deliver reliable service. Structuring can happen at various development stages and abstraction levels. Architectural dependability considerations have gained prominence due to complex applications and integration of untrustworthy components like off-the-shelf items and legacy systems that weren't initially designed to work together. A key challenge is the fixed nature of these components, as their design and evolution are often beyond the architect's influence. To guarantee service correctness, architects must focus on component interfaces and interactions rather than internal designs. This shift necessitates new approaches for factoring in faults during architectural design, including the development of notations for non-functional traits and methods for discerning relevant architectural information.

Redundancy is crucial for fault tolerance and can be introduced implicitly or explicitly within the architecture. Implicit redundancy includes mechanisms like error recovery through exception handling, while explicit redundancy involves intentional system structuring, as seen in techniques like n-version programming and recovery blocks. While designing fault-tolerant systems, pinpointing where to introduce faults involves understanding structural and behavioral dependencies among architectural elements, drawing from methods like the B-method and CSP specifications.

Employing architectural abstractions can make developing fault-tolerant systems more efficient. These abstractions help analyze error propagation, detection, management, and fault handling while eschewing system details. The paper provides a rigorous development methodology for formally specifying, verifying, and validating software architectures based on these abstractions. Specifically, two architectural abstractions for constructing fault-tolerant systems are introduced, the Idealised Fault-Tolerant Architectural Element (IFTE) and the Halt-On-Failure Architectural Element (HOFE).