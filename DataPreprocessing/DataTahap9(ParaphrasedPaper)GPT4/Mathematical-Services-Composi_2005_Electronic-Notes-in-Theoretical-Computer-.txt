The paper discusses the concept and implementation of a "plan language" for coordinating mathematical web services. A plan is akin to a program, with most of its function calls executed by these services. Plans can have different states of completeness: abstract (algorithmic descriptions), unresolved (partially matched to web services), or resolved (fully matched to web services for execution). These plans can be eventually transformed into a composition language like BPEL or a mathematical programming language for execution.

The motivation for this work is grounded in the numerous mathematical packages developed over time, which are often specialized and updated regularly, with some transitioning into commercial products. Mathematical web services could streamline integration among these packages, allowing specialized routines to be accessed from general computer algebra systems.

The proposed architecture aims to utilize mathematical web services more fully by allowing the creation and execution of complex algorithms. These user-composed plans enable flexibility in mathematical computing beyond single routine invocations and could be optimized and executed by a designated architecture.

The paper outlines an architecture with an execution manager (EM), which oversees the execution of the mathematical web services. The EM could be as simple as a direct invocation module or as complex as a secured, transaction-compliant system. It handles the execution of the resolved plans, potentially translating them into a third-party composition language for orchestration engines, or directly into a mathematical system like Maple for execution.

The paper also hints at future work to further understand user needs and improve the system, exploring the balance between specificity and plan abstraction in the functionality of mathematical web services.