This academic paper examines how strategy annotations in certain programming languages that employ rewriting rules can influence the efficiency and termination behavior of computations. Strategy annotations are designed to constrain replacements during rewriting in order to boost efficiency and reduce the likelihood of programs running indefinitely. However, these constraints may also inadvertently hinder the process of finding normalized forms of expressions, which are simplified versions that cannot be reduced further.

To address this problem, the paper establishes the criteria necessary to ensure that computation with strategy annotations is both correct (meaning that if a normal form exists, the computation will find it) and complete (ensuring that the computation can always reach a normal form when one exists). After defining these conditions, the paper proposes a transformation technique for programming in languages similar to OBJ that allows for correct and complete evaluation of expressions with strategy annotations.

As an example, the authors specify an annotation for the 'cons' list constructor that prevents replacement in the second argument, ensuring that programs using this annotation will always terminate. This is substantiated with a formal proof.

Previous studies have looked into termination when using strategy annotations, but these restrictions can sometimes make computations incomplete because certain normal forms may become unachievable. The paper aims to resolve confusion in the field by providing a clear definition of what constitutes correct and complete computations with strategy annotations, which they believe has been obfuscated by the mixture of concepts found in existing literature.