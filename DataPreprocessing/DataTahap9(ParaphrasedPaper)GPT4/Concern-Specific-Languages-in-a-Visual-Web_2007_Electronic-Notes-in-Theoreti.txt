The paper describes the development of a visual environment for creating web services, emphasizing the simplicity and reusability of service compositions. It introduces two primary constructs: services and composition templates. Composition templates are essentially service blueprints with placeholders that can be filled with compatible services. Services are checked for compatibility with the template when incorporated into it. The system enhances modularity by leveraging Aspect-Oriented Software Development (AOSD), integrating a general-purpose aspect language called PADUS, and enabling the use of numerous concern-specific languages.

Web services have become prominent for software integration, and their utility is expanded by combining multiple services to craft new, more complex ones. Initially, service composition required manual code-writing, but workflow languages like WS-BPEL have shifted this to more intuitive, visual methods, with Business Process Modeling Notation (BPMN) now serving as a visual notation for WS-BPEL.

The paper progresses to elaborate on the architecture of their visual Service Creation Environment (SCE), which includes aspect-oriented support to isolate and handle secondary management concerns without tangling them with primary workflow concerns. The GUI of the SCE allows for seamless composition, verification, and deployment of services.

The SCE houses a repository of composition templates defined in WS-BPEL, which can be instantiated with various services, and checks for protocol compatibility during composition. PADUS, an XML-based AOSD language, is utilized to express aspects and aspect deployments for web service processes. The PADUS weaver then integrates the specified aspects into the final WS-BPEL processes.

Upon completing and verifying a composition, users can generate and deploy it. The SCE has a built-in WS-BPEL engine for immediate execution, serving more as a preliminary testing tool rather than a final deployment target.

In discussing concern-specific languages (CSL), an example provided is the billing CSL, which enables precise designation of billing segments within a process, interfacing with a charging service and adaptable to various contexts.

Additionally, the paper acknowledges the need for a higher degree of abstraction in defining pointcuts and the limited support for implementing new concern-specific languages. Future work will aim to enhance these aspects, including better integration of aspect-oriented features and more sophisticated tooling for defining CSLs.