Program transformation refers to various related processes such as optimization, compilation, normalization, and renovation, all of which might involve similar tasks. These similarities suggest the potential for reusing software components across different projects. To facilitate this reuse, a collection of libraries and tools called XT has been created, incorporating both existing and novel components.

This paper gives an overview of XT by discussing common program transformation scenarios, describing the targeted development process, detailing XT's components, sharing experiences with XT, and providing a summary with concluding remarks.

Program transformation involves converting one program into another and may involve different source and target languages (translation), or the same language (rephrasing). Key scenarios within program transformation are further divided, and while this paper mentions normalization, renovation, refactoring, and optimization as sub-scenarios, there are many more, often combined in practice like in compilation.

XT encourages a component-based approach for constructing transformation systems, often laid out in a 'pipeline' that includes parsers, pretty-printers, and various transformation phases. Components interact through defined interfaces.

An example using XT is a transformation system for a subset of the Haskell programming language applying the warm fusion algorithm. This case study involved a parser, type checker, the fusion transformation, and a pretty-printer. The goal was to optimize recursive functions with catamorphisms, eliminating intermediate data structures and fusing function compositions.

Several tools and grammars were adapted or created for use in the XT framework, employing the Stratego language and incorporating generic algorithms for common program transformation tasks.

In comparison to the ASF+SDF meta-environment, which bundles tools for a single language in an integrated environment, XT supports multiple programming languages and provides a set of expandable components for diverse language tools.