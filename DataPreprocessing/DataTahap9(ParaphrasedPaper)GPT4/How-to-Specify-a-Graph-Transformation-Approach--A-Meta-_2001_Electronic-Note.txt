In this study, the authors introduce a meta-graph grammar methodology as a means to define complex graph transformations. A meta-graph grammar is a type of graph grammar with a type graph offering a static framework for the structures, rules, and transformations within the transformation approach, akin to the meta-model found in the UML (Unified Modeling Language) specification. The proposal includes detailing graphical embedding rules, which serve to explain how a rule can be embedded within a context and the potential side effects of applying that rule.

Graph transformation approaches are usually expressed with mathematical definitions, which, while critical for developing theoretical foundations, can be less accessible to users unfamiliar with mathematical language. Meta-modeling, a technique prevalent in visual modeling languages like UML, works by defining a language using a simplified subset of itself, avoiding circular definitions.

The paper suggests meta-modeling as a way to define both static and dynamic aspects of graph transformation, employing a UML-like meta-model for the static definition of graph classes, rules, and transformations, and using a meta-graph grammar to generate the corresponding transformations for each rule. They apply this method to the Fujaba graph transformation approach, which includes advanced features like object composition, multiplicity constraints, and inheritance.

The authors discuss implementing to-one associations (like pointers) in an object-oriented context and highlight the challenges that arise, such as conflicts in ownership and ensuring the consistency of pointers. They note that in Java, the creation and deletion of objects and links entail side effects that must be thoroughly specified, informing decisions like overriding links in to-one associations.

The paper also formalizes the static and dynamic aspects of these non-standard features using a meta-graph grammar to define transformations for object-oriented graphs. They showcase how productions in the meta-graph grammar establish the context for pattern application, matching conditions, and transformation effects. The approach is based on the algebraic double-pushout (DPO) method for graph transformation, which uses typed graphs and negative application conditions. The process generates all viable transformations from a given story pattern.

Finally, the study draws parallels between graph transformation rules and UML collaboration diagrams at both specification and instance levels. Embedding rules could potentially standardize the relationship between these levels, providing a bridge between the conceptual and implementation domains.