This paper investigates the link between fault tolerance and a particular computer security analysis technique known as partial model checking. The research explores how integrating possible fault actions into a system model can expose failure modes, enabling the system to either demonstrate the fault or continue normally. The system model exemplified by ‘pf’ incorporates the fault action ‘f’, leading to a fault-tolerant version ‘p#’ employing traditional fault-tolerance strategies.

The concept of fault injection is central to the approach, resulting in a clear delineation between the fault process and the system’s normal operation, and thus facilitating the use of partial model checking. Notably, fault actions within this context are hidden, indicating synchronization on faults alone.

The paper describes the problem of verifying fault tolerance as a validation challenge of logical formulas, utilizing partial model checking as a primary technique, comparable to approaches used in security analysis. Automatic verification is then achievable through theorem proving. The authors highlight that the resulting formula size after partial model checking is polynomial relative to the process and formula, enabling efficient model checking even when certain processes aren't fully specified.

An example used in the paper is a CCS model of a Triple Modular Redundancy (TMR) system, employing value passing style CCS, and representing a simple identity function module dealing with binary values. The paper simplifies the module’s interactions to input and output actions.

Overall, the paper emphasizes the synergy between fault tolerance and security analysis strategies and explores how partial model checking serves as an effective tool for both realms.