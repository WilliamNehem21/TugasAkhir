Today, the majority of universities, organizations, and companies rely on computer networks and internet technologies to deliver services and perform various tasks through web applications. However, this dependence poses a risk because attackers can exploit the internet to gain unauthorized access to networks and steal sensitive information or disrupt resources. Security measures like firewalls, antivirus software, and Intrusion Detection Systems (IDSs) are deployed to safeguard these networks and combat such cyber threats.

The proposed IDS combines the Snort detection system with Bayes' theorem and is designed for deployment in cloud environments. It involves capturing packets from the network and using Snort to sift through them with signature-based detection. Packets flagged as suspicious are logged into a database, while the rest are further scrutinized by a Bayesian classifier to distinguish between normal and intrusive traffic. Any detected intrusions prompt an alert in the database, whereas normal packets proceed to the system. This IDS boasts a high detection rate of 96% and a minimal false positive rate of 1.5%. Despite the processing overhead and potential delay caused by the two-stage filtering procedure, it is thought that these delays could be mitigated through parallel processing techniques.

The system functions with the premise that a network connection can be classified either as normal or as an attack. It simplifies classification into two distinct categories, c1 for normal and c2 for attacks, without specifying exact attack types. Alternatively, the system can generate multiple classes to identify specific attack types beyond just distinguishing between normal traffic and attacks.

As part of its design, the IDS excludes certain irrelevant or problematic data records (e.g., those contributing to false positives or false negatives) to improve its performance. After training and refining, it uses a reduced set of only 20 key features. These features are then utilized in the testing phase to evaluate the IDS using a dataset containing HTTP traffic with matching features, ensuring that the final trained model is effective and accurate in real-world scenarios.