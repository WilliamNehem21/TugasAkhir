Advancements in technology have led to the creation of distributed systems that operate asynchronously, allowing subsystems to send messages and proceed with tasks without waiting for a response. However, real-world systems often face imperfect communication channels that can suffer from losses and delays, unlike ideal channels assumed in theory. Therefore, testing tools must be able to manage non-determinism and imperfect communication.

The paper presents a practical framework to integrate testing theory with real-world application, enhancing current tools for more effective black-box testing. This includes handling asynchronous communication challenges, such as delays and losses, which are often overlooked in literature. Abstract models are utilized to guide the testing process, ensuring that tools can work with the system's interfaces rather than its internal mechanisms.

The framework is detailed in the following structure of the paper:

- Section 2 provides an example system to illustrate introduced concepts.
- Section 3 discusses the notational and definitional groundwork for event structures, modeling asynchronous distributed systems.
- Section 4 outlines the proposed method for asynchronous testing.
- Section 5 details an implementation of this method using existing tools.
- Section 6 offers an example of the testing process on a complex asynchronous system.
- Sections 7 and 8 review related work and present conclusions.

The paper also describes an event structure and two algorithms, a test generator and an execution observer, that function in parallel during testing. They work independently but sync through global structures to manage controllable and observable events.

SmartMBT, a tool taking labeled transition systems (LTS) as input to drive testing, is discussed. It handles actions specified in the LTS, factoring in the unique needs of asynchronous systems, such as differentiating between controllable and observable actions within the model.

The paper introduces an extension of the testing tool enriched with a module that can recognize and process observable actions performed by the system under test (SUT). This tool adaptively works with the extended client module and is responsive to actions executed by the test generator.

In conclusion, the paper describes advancements made to existing testing tools to facilitate automatic testing for asynchronous systems, built upon rigorous theoretical foundations. An example demonstrates the viability of these extensions with a real system, crafting a method that maintains concurrency while testing asynchronously.