This paper outlines the development and evaluation of a novel software model checker framework known as MSILCAD, designed explicitly for .NET programs. The primary objective of this system is to perform automatic, optimized, yet exhaustive state space exploration for programs in high-level languages without the risks associated with manually translating code to fit model checker input requirements - a process that has historically been prone to errors.

With the increasing prevalence of concurrent computation in software development for performance gains and embedded systems, this research is timely. Existing software model checkers either directly translate program code to an established model checker's language or modify the execution environment to incorporate model checking capabilities.

MSILCAD operates by translating a subset of Microsoft Intermediate Language (MSIL), which can represent multiple programming languages in .NET, into Bandera Intermediate Representation (BIR), the expected input for the Bogor model checker. Central to MSILCAD is the MSIL-to-Java bytecode transformation (MSIL2JBC), tailored to handle features common to C# and J# languages and includes facilities for checking assertion violations and detecting deadlocks.

The paper utilizes TXL, a language developed for structural source transformations, to implement the translation rules from MSIL input to a usable form for model checking. The authors discuss the steps involved, from MSIL background, Java assembly via Jasmin, TXL programming, and Bandera toolkit usage. They demonstrate MSILCAD's evaluation through experiments and discuss related work, followed by concluding remarks and future research directions.

The researchers report that the approach, implemented in a prototype, showed promise in tests on small examples and have confidence that it can be extended to cover the complete safe subset of MSIL and potentially other .NET languages like Visual Basic.