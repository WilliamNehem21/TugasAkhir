In this paper, the researchers present generic invariant-driven strategies designed to regulate the execution of systems and ensure compliance with specified invariants. These strategies are adaptable, as they are defined by three parameters: the system being controlled, the logic language used to denote the invariants, and the invariants themselves. Utilizing Maude's versatility as a logical framework capable of representing numerous logics and formalisms, the strategies offer compatibility with different logical systems, although the paper mainly focuses on propositional logic examples.

The authors address the challenge of managing rewriting inference processes in systems that may neither halt nor converge. Typically, maintaining such systems involves embedding invariants directly into the code, which can result in complications such as obscured invariants, difficulty in maintenance, and a disconnection between the program and invariant abstraction levels.

By introducing invariant-based strategies in Maude, the authors propose a separation between invariants and system code that preserves the clarity and maintainability of both. Through illustrative examples using propositional calculus, they demonstrate the applicability of their approaches.

The paper is organized into six sections, beginning with an introduction to rewriting logic and Maude, followed by discussions of strategy definitions within Maude, and the integration of invariants into these strategies. Finally, the authors conclude by acknowledging the advantages of their approach in terms of extensibility, understanding, usability, and maintenance, and suggesting the potential for using other logic systems as parameters within their strategy framework.