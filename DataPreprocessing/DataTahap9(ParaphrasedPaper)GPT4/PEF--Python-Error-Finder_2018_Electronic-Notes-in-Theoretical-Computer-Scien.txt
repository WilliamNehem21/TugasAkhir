PeerCheck is a library-based approach that enables symbolic execution for object-oriented programming languages like Python without the need to change the code being analyzed. It departs from traditional symbolic execution tools by offering symbolic semantics as a separate library that executes concurrently with the target program. This exploit's Python's ability to represent symbolic values as class objects. Initially, PeerCheck was only applicable to primitive types, but this paper presents an extension that allows symbolic execution with user-defined classes.

A new tool, PEF (Python Error Finder), has been developed utilizing this extended approach, incorporating Python's Z3 SMT solver. PEF can verify Python programs and includes a feature for defining contracts specifying preconditions, postconditions, and types. The tool was employed to verify its own codebase, proving its effectiveness and utility for testing production software. It was also used to test well-known algorithms and data structures, demonstrating its capabilities.

To overcome the potential issue of infinite execution trees caused by loops or recursion, the paper outlines a method to bound the tree's depth, preventing scalability issues while ensuring the tool terminates.

The paper illustrates how Python’s object-oriented nature and dynamic type system (duck typing) are leveraged for symbolic execution via proxy objects. These proxy objects mimic real ones while tracing program execution paths. PEF follows a depth-first search (DFS) approach, using Boolean path lists to guide the exploration.

PEF can't fully handle heterogenous list values or classes that modify class or global variables, which limits its coverage. By applying PEF to itself, the authors found and fixed several issues, showcasing the tool's potential for self-validation. For example, the tool’s performance was demonstrated with the quicksort algorithm, requiring only three element lists to achieve full branch coverage.

Finally, the paper compares PEF to Chef, a mature tool for Python. However, Chef requires substantial processing power, often beyond the capability of personal computers. The extension presented in this paper promises to enhance symbolic execution by supporting user-defined classes and lays out future work to potentially incorporate symbolic global variables.

The paper outlines the remaining organization as follows: an overview of symbolic execution, a description of PEF's architecture, details on the implemented contract system, and an evaluation of the tool with various test cases. Discussion of related work and conclusions round out the paper.