This academic paper discusses the application of SysML, a UML (Unified Modeling Language) profile created by the Object Management Group (OMG). SysML is a visual modeling language designed to represent the various components of a system, which may include both hardware and software elements. The language has gained widespread use among professionals and researchers for its ability to facilitate collaboration among different stakeholders in a systems engineering project, enhancing the consistency and quality of the design process.

The focus of the paper is on the integration and formal verification of system components that were initially described using SysML diagrams. The authors propose a method to examine and ensure that the composition of these components is sound by utilizing Interface Automata, a concept introduced by L. de Alfaro and T. Henzinger. Interface Automata are used to define the interfaces of system components through a type of state machine, marked by inputs, outputs, and internal actions, providing details at both signature and protocol levels.

The verification method aims to uncover mismatches at signature and protocol levels by composing and synchronizing the actions shared between different component interfaces.

The paper uses the example of the Cycab car, an innovative electrical vehicle purposed for point-to-point transport within a predefined network of stations. The car operates autonomously, driven by its onboard computer system through various modes. The example outlines the Cycab car system, broken into two primary composite components: the vehicle itself and the station. Subcomponents of the vehicle include the core, starter, and an emergency stop mechanism, while the station consists of sensors and a computing unit.

Previously, the authors noted that the system's architecture was described using SysML block definition diagrams (BDDs) and internal block diagrams (IBDs) to illustrate the overall structure and interconnections between components. Building on this, the paper suggests representing the architecture more formally as a graph where the nodes are the systemâ€™s blocks and the edges represent actions, covering both specification and verification of component assembly.

Additionally, the paper introduces an augmented definition of Interface Automata to account for energy consumption. This involves defining weighted automata in which transitions carry cost annotations corresponding to the energy used during actions, integrating performance considerations into the verification process.