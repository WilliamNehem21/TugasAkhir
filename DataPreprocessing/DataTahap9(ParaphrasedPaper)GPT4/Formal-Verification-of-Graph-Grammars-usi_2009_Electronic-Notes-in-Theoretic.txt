The academic paper describes a method for verifying properties of distributed systems modeled using a type of graph grammar called object-based graph grammars or OBGGs, by translating these graph grammars into Promela and checking them with the SPIN model checker. Additionally, a timed extension of these graph grammars is considered, which can be verified using the UPPAAL model checker for real-time systems.

The paper explores various methods for model-checking different graph grammars and discusses the use of monadic second-order logic for describing graph properties and transformations. However, it notes that other works do not focus on effectively verifying properties of Graph Transformation Systems (GTSs). Alternatively, other researchers have analyzed GTSs with relational logic or set theory, including the use of Alloy for finding model instances and counterexamples within finite scopes defined by users. The paper also mentions Strecker's set-theoretic model for verifying structural properties of GTSs, but acknowledges its lack of a logical approach.

The paper's organization is outlined as follows: an introduction to graph grammars using the Single Pushout (SPO) approach, a representation of graph grammars by relational structures, the definition of rule applications in graph grammar transformations using first-order formulas, and verification of properties through mathematical induction.

An example using graph grammars to specify the token-ring protocol is provided. In this protocol, the access to a shared medium in a network is regulated by the transmission of a token in one direction. Stations wait for the token to send messages and only the station holding the token can transmit at any given time. This model also allows for dynamically adding new stations.

The paper proposes a theory to develop properties and proofs for systems specified as graph grammars, using relational structures consisting only of relations to represent graph grammars. A relational structure is defined to model graphs, including the domain, vertex, and incidence relations for vertices and edges. Relational representations for graph morphisms, typed graphs, and rules are introduced. Conditions are imposed to ensure that relational representations of graph morphisms and rules are properly defined, including existence, commutativity, compatibility, and restrictions on collapsing/deleting vertices or edges.

The main objective is to establish a framework that enables the analysis of asynchronous distributed systems with infinite state space through a relational and logical approach. Future work includes extending this approach to specific graph grammars like OBGGs and timed OBGGs, and possibly implementing the approach using theorem proving tools such as Isabelle.