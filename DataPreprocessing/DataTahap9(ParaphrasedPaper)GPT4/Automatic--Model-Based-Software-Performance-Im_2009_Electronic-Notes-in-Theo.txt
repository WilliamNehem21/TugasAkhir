Software systems often face performance problems, which can be addressed by model-based prediction methods during the design phase, preventing the implementation of architectures that fail to meet performance goals. Architects can use these methods, translating architectural models like UML into formal analysis models, to evaluate performance early on.

Improving performance in isolation can create issues as it might impact other system properties like cost or maintainability. Any architectural changes need to consider such extra-functional properties.

The paper proposes a novel approach for automatically optimizing the performance of component-based software systems by auto-generating and assessing design alternatives. This method utilizes metaheuristic search techniques, such as genetic algorithms and hill climbing, alongside heuristics from domain knowledge, thus facilitating a systematic exploration and evaluation of new architecture configurations. Design alternatives can be generated by identifying and reallocating bottleneck components or resource sizing, and by incorporating randomly generated candidates to widen the search space. The authors present design change operations specific to the Palladio Component Model (PCM) for performance prediction and discuss how additional extra-functional properties can be integrated as constraints or criteria in future multi-criteria optimization iterations.

The paper is structured to introduce the concept of optimizing extra-functional properties, describe the performance prediction approach for component-based systems with the current PCM-based prototype, and demonstrate a proof-of-concept case study. It concludes with related works on model-based software performance improvement and a summary.

Design options in a component-based system include the possibility of replacing a component with others that provide similar functionality but different performance characteristics. Software architects may impose constraints on design options based on factors like company-wide standards (e.g., using SOAP communication protocol).

Metaheuristics guide the search process using heuristic-specific to the problem at hand, enabling navigation through the search space, including areas of suboptimal local performance solutions. The targeted approach starts with a predefined set of heuristics that represent domain knowledge and introduces undirected operations to explore unknown solutions.

The performance improvements discussed are applied to the PCM, which models component-based systems and their performance. Through a discrete-event simulation of queueing networks, PCM predicts performance metrics. PerOpteryx, a prototypical implementation, manipulates and evaluates PCM instances within the Eclipse framework to improve the mean response time through automatic design changes.

Future work will integrate a cost model and multi-objective metaheuristics to help balance different extra-functional properties. Adding further design option support, performance domain heuristics, and a wider array of metaheuristics could enhance the prototype into a framework for optimizing extra-functional properties in component-based software systems.