The paper discusses existing research and tools for analyzing and visualizing Java program execution. Previous systems like Jinsight and the one by Walker et al. support offline visualization of Java program execution traces, focusing on event-based relationships and program execution patterns, but they do not cater to distributed systems.

The JIVE framework offers dynamic, online visualization for Java programs but is limited to non-distributed systems. Snodgrass has introduced techniques for debugging and monitoring distributed systems using relational algebraic queries, enabling real-time analysis.

The paper introduces a new method involving Inter-plugin Agents (IPAs) that permits scalable visualization and monitoring of distributed Java systems. These IPAs gather profiling information, send data to other IPAs or data collectors, and form a hierarchical structure to minimize the amount of information transmitted. Multiple overview plug-ins can utilize this hierarchical data aggregation to visualize distributed systems simultaneously.

The data collector receives events from the IPAs and forwards them to the event mapper. The mapper updates the world view and stores events in historic data, which can later be used for offline event replay. The IPA, event mapper, historic data, and world view components are covered in detail in section 5 of the paper.

The paper describes an event system where events are triggered by entity actions, marked by 'start' and 'finish' to indicate when during a method invocation the event occurs. It specifies that the 'update' function is used for signaling state changes of entities, providing the updated value and the object identifier.

Lastly, the overview plug-in uses JJTree to parse the Event Specification Language (ESL) and instruments Java classes accordingly. Profiling statements, based on the events defined in the ESL, are inserted so that visualization can be performed even when source code is not available, provided that entity specifications exist.