Refactoring is a technique used to enhance the organization of existing code without changing its external behavior. Distinguishing between feature updates and refactorings is beneficial, and these activities are facilitated by detailed refactoring guides as well as essential automated tools. Tools validate refactoring by automating condition checks and performing the refactoring tasks, making the process more efficient and reliable.

The initial version of HaRe provided basic refactorings limited to single Haskell modules. With version 0.2, HaRe expanded to handle refactorings across multiple modules, and version 0.3 introduced data-level refactorings. The latest iteration has been modified to offer an API, which integrates with infrastructure for refactoring and other transformations in Haskell programs.

Within HaRe, functions such as applyTP, onceButP, failTP, and adhocTP, stemming from the Strafunski library, ensure that transformations preserve types. Specifically, onceButP carries out a one-time bottom-up traversal of the Abstract Syntax Tree (AST), stopping when a particular function succeeds at a node. Its failure is hard-wired for all types except for HSExpP, in which case it invokes inexp. This function only transforms the expression to a case expression if it identifies an occurrence that matches the one selected by the user. As a result, only the first instance of the expression is transformed.