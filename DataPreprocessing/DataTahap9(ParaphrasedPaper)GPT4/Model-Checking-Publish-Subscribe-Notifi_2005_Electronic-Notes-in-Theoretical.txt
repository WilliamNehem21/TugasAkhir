The academic paper discusses the classification and design of groupware systems, which enable users to collaborate either synchronously or asynchronously and either co-located or dispersedly. ThinkTeam is an example of an asynchronous, dispersed groupware system, akin to email, workflow, collaborative writing, and version control systems in software engineering.

The paper focuses on design issues such as data sharing, user awareness, and concurrency control within ThinkTeam, employing model checking to verify the correctness of groupware protocols. Model checking has gained popularity for validating the properties of groupware and publish/subscribe (pub/sub) systems.

A pub/sub notification service has been integrated into the ThinkTeam protocol, where users get notified when someone begins editing a document they subscribe to, and updates are published when the document is saved back to the repository. The concept extends to subscribing or unsubscribing to documents, and receiving notifications upon changes.

The correctness of the groupware protocols is ensured through a formal verification process using the SPIN model checker and PROMELA specifications. This process involves checking Linear Temporal Logic (LTL) formulae against correctness properties, which includes strategies to manage state space complexity.

Specific properties related to the ThinkTeam protocol and the pub/sub service were tested for both safety and liveness. For example, ensuring that only one user can hold a file lock at any given time, and file locks are maintained during certain operations. The SPIN model checker confirmed these properties within minutes.

Other properties verified by SPIN include ensuring that a user receives notifications only when registered for a particular file, and that users are not perpetually denied access to files.

The paper concludes by asserting that the ThinkTeam protocol, especially regarding concurrency control and awareness mechanisms, is well designed and verified using current model-checking tools like SPIN. However, it also notes that the protocol cannot force a user to return a checked-out file to the repository, a situation handled by the introduction of a superuser or administrator who can enforce such actions.

Lastly, the paper suggests that there is room for further research, particularly regarding the reduction of message loss in the groupware context, a problem distinct from similar issues in network protocols due to the specific nature of human interactions in groupware systems.