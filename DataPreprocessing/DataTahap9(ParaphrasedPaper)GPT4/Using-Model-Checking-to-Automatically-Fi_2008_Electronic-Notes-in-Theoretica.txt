This academic paper discusses a method for verifying relational data refinement in state-based specification languages such as Z and B, focusing on the use of downward and upward simulations. The authors have previously demonstrated how to check these simulation conditions using a temporal logic called Computation Tree Logic (CTL) with a model checker. They implemented their approach in the SAL (Symbolic Analysis Laboratory) tool suite, which can automatically prove simulation conditions given a retrieve relation.

However, the paper acknowledges that finding retrieve relations is challenging, and introduces a new method that uses the SAL model checkers to generate these relations. The example used to illustrate the approach is a specification of a unique number allocator system, written as a SAL context with definitions for types, constants, and modules.

The paper explains that while a retrieve relation can prove the existence of a refinement, generating such relations is difficult because of the large state spaces involved. The authors suggest exploring optimization techniques supported by the model checkers or alternative methods like data abstraction, predicate abstraction, and data independence to improve efficiency and manage state-space complexity. The principle of data independence, for instance, could help show that certain refinements are valid regardless of specific values for certain types.

Ultimately, the paper presents a way to automatically find retrieve relations using model checking, which is crucial for verifying that the concrete specification is an appropriate data refinement of the abstract one. Despite the current limitations in handling large specifications, the approach looks promising for future enhancements and exploration of more efficient techniques.