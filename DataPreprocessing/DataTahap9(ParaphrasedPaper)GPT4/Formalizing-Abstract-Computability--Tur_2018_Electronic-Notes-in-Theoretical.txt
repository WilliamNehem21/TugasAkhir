The paper discusses the use of type-theoretic formal language to model Turing category computation, which allows for the precise verification and formulation of concepts and theorems in recursion theory. This formalism is motivated by the need for a high level of accuracy and detail in the representation of proofs and definitions that may get overlooked in non-formalized approaches.

Turing category theory describes a model of computation previously lacking a formalized mathematical structure. The paper aims to align this theoretical framework with a formal categorical model to ensure accurate representation of computation as conducted in physical computers.

The authors build upon a category theory library developed by Timany and Jacobs for Coq 8.5, using it as a foundation to specify mathematical definitions, formalize concepts, and prove results pertaining to Turing category computation and traditional recursion theory.

The work includes formalizing various categorical concepts and providing example categories to validate the approach, with the primary example being classical computation on natural numbers as mapped into the formalism of Turing category theory. Restriction categories and the related concepts, like open maps—vital in computer science—are also formalized.

The authors define total subcategories, trivial restriction structures, and cartesian restriction elements such as restriction products and terminal objects. They build a cartesian restriction category to encapsulate these elements within the framework of the source library.

The paper introduces terms like comp(a) and split(comp(a)), which provide instances of cartesian restriction categories when given specific parameters. The process reveals additional insights, such as the characterization of range categories through open maps.

Through integrating their tools into the existing Coq category theory library, the authors enhance the study of abstract computation, making precise all definitions and facilitating future research.

While formalization largely confirms known literature, it also uncovers omissions, leading to new formulations and proofs, such as one regarding ranges in Turing categories that had to be approached using open maps.

The authors identify a significant result in formalizing the constructive version of the category of sets and partial recursive maps, a representation that has not been done before. This work also led to the identification of certain proofs that required the axiom of choice.

The paper suggests considering the Lean proof assistant for future work in formalizing categorical examples of abstract computation due to its different operational modes and compatibility with homotopy type theory.