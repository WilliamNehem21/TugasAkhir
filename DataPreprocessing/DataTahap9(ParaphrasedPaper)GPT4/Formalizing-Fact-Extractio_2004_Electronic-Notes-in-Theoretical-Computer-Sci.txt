Reverse engineering often involves fact extraction, which is the process of converting source code into structured data (factbases). These factbases help analyze specific views or components of a program, such as its architecture or any irregular patterns. Traditionally, fact extraction hasn't been standardized, leading to incomplete or inconsistent methods. This paper advocates for the formal specification of fact extraction to guide those involved in creating or evaluating fact extractors.

The authors suggest that by using formal specifications, derived from the source language's grammar, one can clearly link the source code to the extracted facts.

A schema defines the structure of data, specifying entities, attributes, and their relationships. The Datrix and Columbus schemas are examples of how factbases should be structured and connected to source code, guiding factbase construction.

The paper focuses on fact extractors that parse source code based on context-free grammars, despite other methods existing. Informal specifications of such schemas have proven to lead to ambiguities and inconsistency in factbases. To overcome this, the authors propose a formalization process comprising three parts: a context-free grammar for the source code, a schema for the factbase, and a mapping that keeps the semantics intact for the tools using the factbase.

An Abstract Syntax Tree (AST) is a common internal representation of parsed source code, which can be enhanced with semantic information to form an Abstract Semantic Graph (ASG). In Datrix's case, its factbase represents a variant of the ASG, making it well-suited for this method.

The authors describe their use of TXL, a rule-based language for transforming context-free languages, to input their formal specifications and apply transformations to source code.

Through their work with Datrix, they found it helpful to use a set of transformation steps that convert source code into an intermediary representation, which then gets mapped to the factbase format as defined by the Datrix schema. This intermediary representation can be adapted for various schemas, such as Columbus.

This formal approach requires schema designers to carefully consider the grammar of the source language, leading to more reliable and consistent specifications. The existence of reversible transformations allows for the possibility to reconstruct original source code from the factbase when sufficient information is available, as demonstrated by their verification of the CPPX fact extractor.

Finally, the authors introduce an "oracle" to resolve ambiguities that cannot be determined by context-free grammar alone, like distinguishing variable names from types. They use JLex to automate this distinction.

Their experience suggests that formalizing fact extraction can clarify the relationships between different schemas and provide useful schema specifications. Additionally, because most transformations can be executed by tools like TXL, the specifications not only verify fact extractors but can also function as a prototype for fact extraction when efficiency is not the primary concern.