Esterel is a programming language tailored for developing concurrent systems that are control-driven and reactive in nature, using imperative syntax. The language operates on a synchronous model, where concurrent processes execute simultaneously and exchange signals instantly. Esterel encourages structured programming without the use of goto statements, which it does not support.

Despite the absence of gotos in Esterel's syntax, compilers for Esterel internally convert its control structures into jumps, suggesting that gotos could be feasibly integrated with minimal disruption to the compilation process. However, direct translation of specifications into intermediate forms would not aid in understanding the code.

We improved Esterel by introducing a "gotopause" command, which intentionally delays the destination code following a jump, maintaining the synchronous concurrency principle. This addition enables deterministic jumps with uncomplicated compilation.

For designing state machines with immediate state changes, we presented "instantaneous jumps," blending elements of loops, exceptions, and the "gotopause" command. These jumps are organized by scope and priority, meaning only the highest-priority jump out of several concurrent ones will be executed. The semantics involve unfolding and the existing "gotopause" instructions provided the foundation for this.

The new "catch" instruction was added to improve exception handling in Esterel. Unlike the traditional exception model, which terminates at the end of the exception scope, our extension allows the jump's destination within that scope to be specified, functioning like a label.

Our proposals tweak Esterel's language and semantics modestly, suggesting a basic low-level syntax with potential for more user-friendly syntactic elements. We outlined the syntax and philosophical underpinnings of Esterel and the enhancements, explained our approach through examples, and discussed loop elimination. We also reviewed related literature and concluded our findings.

The elaborate constructs described offer a way to implement jump mechanisms while maintaining Esterel's synchronous semantics, widening the language's capabilities beyond those of similar graphical languages like SyncCharts, and allowing for complex, instantaneous transitions within a synchronous reactive framework. The extended language supports both the existing "gotopause" for non-instantaneous jumps and the new "catch" instruction for instantaneous transitions, both deemed essential for Esterel's flexibility in expressing finite state machines. We posit that implementing these features should be straightforward as they are based on existing constructs and should not raise issues with causality, providing a foundation for further studies into synchronous circuit synthesis.