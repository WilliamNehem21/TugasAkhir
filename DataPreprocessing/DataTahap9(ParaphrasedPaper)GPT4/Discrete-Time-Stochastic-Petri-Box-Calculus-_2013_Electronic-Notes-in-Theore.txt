We propose an extension to the Discrete Time Stochastic Petri Box Calculus (DTSPBC) named Discrete Time Stochastic and Immediate Petri Box Calculus (DTSIPBC), which now includes immediate multiactions. We give it a step operational semantics using labeled probabilistic transition systems and a denotational semantics with labeled discrete time stochastic Petri nets (LDTSIPNs) containing immediate transitions. We prove the consistency between these semantics and analyze corresponding semi-Markov chains (SMCs) to evaluate system performance. A shared memory system is examined as a case study.

Petri Box Calculus offers a process algebra for Petri nets, enabling concurrent programming constructs to be expressed as elementary Petri nets operations. Various timed or stochastic Petri Box Calculus extensions exist, with continuous or discrete time models. DTSPBC is one such discrete time extension; in this paper, we add iteration and immediate multiactions to it.

Compared to classical stochastic process algebras (SPAs), DTSIPBC brings discrete conditional probabilities for discrete time semantics and prioritizes concurrent execution of activities, unlike the continuous time semantics' interleaving approach in traditional SPAs. This allows for a holistic capture of system behavior, particularly for systems with discrete time dynamics.

The paper is structured as follows: the syntax of DTSIPBC is introduced, operational semantics are presented, denotational semantics are proposed, the corresponding stochastic process is analyzed, a case study is explored, and the paper concludes with a summary and future research directions.

DTSIPBC static expressions correspond to the structure of unmarked LDTSIPNs. Regular and dynamic expressions are defined, ensuring that the resulting LDTSIPNs are safe or at worst 2-bounded. We introduce a new rule to capture one-time unit delays and avoid ambiguities by numbering activities that can be synchronized, while immediate multiactions are synchronized preferentially for performance evaluation.

The paper argues that process algebra is more convenient than directly modeling Petri nets due to its compositionality and alignment with programming operations. Though complex, it is suitable for discrete time systems where global time ticks or the need to preserve distributed architecture or concurrency level during modeling and analysis are critical.