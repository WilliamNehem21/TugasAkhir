Paraphrasing the academic paper:

The research paper explores the significance of collecting metadata for a family of visual programs written in a specific domain language called Function Block Language (FBL), which has been utilized by Metso Automation to author automation control programs. Collecting metadata not only facilitates the extraction of statistical data but also aids in future re-engineering and reuse efforts.

The paper presents a case study within an industrial setting, where visual programs are archived in a project library, with accompanying metadata stored in a database. This metadata empowers advanced program analysis by enabling targeted examination of a multitude of programs, focusing analysis on particular types of programs.

It is noted that the majority of software life-cycle expenses are related to maintenance, and metadata can provide valuable guidance for reverse engineering and visualization processes, which support software comprehension and hence maintenance activities. The paper addresses the use of metadata-driven program analysis techniques to maintain FBL programs, which are a type of visual programming language that has been in use at Metso since 1988 for various automation tasks.

As the language has evolved over time, the integration of metadata has been refined to support program analysis, including understanding the relationship between different programs and the overall use of FBL. The paper emphasizes the role of metadata in program analysis, meta-models tailored for specific problem domains, an iterative design process, and presents statistical data collected on FBL usage over time.

The paper briefly describes FBL, discusses the meta-models used, and presents metadata-driven techniques employed in the design, maintenance, and reverse engineering of FBL programs, highlighting the benefits of high reusability and improved program quality. It also details the metrics and types of metadata gathered to aid program analysis.

FBL enables engineers to design visual programs that connect measurement signals to process parameters, forming algorithms for control systems. These programs are depicted using FBL’s visual notation of symbols and lines, where symbols represent advanced functions and function blocks embody subroutines for process control.

The paper discusses how traditional reverse engineering and clustering methods can be supplemented with FBL’s syntax and metadata to construct high-level program models. This blending of program analysis with metadata storage and calculation underpins the presented techniques.

Designing with FBL involves representing real-world devices within a visual language, with diagrams reflecting actual physical system layouts. Abstract views, called function groups, simplify FBL programs for comparison and visualization purposes. For re-engineering, the paper discusses the use of templates, pre-defined general program parts that can be tailored with project-specific data, increasing reusability and decreasing development times.

Project libraries and databases storing FBL programs and metadata facilitate the extraction of statistical program data. Metadata enables refined searches and the finding of reusable program components, with tools analyzing program structures to identify commonly used ones.

Future work aims to enhance the connection between metadata and meta-models to incorporate semantic information, potentially improving the program analysis techniques further by linking real-world information with existing metadata.

Overall, the paper delineates the potential of metadata in enhancing program analysis, reusability, and the re-engineering of visual programs within the domain-specific context of FBL in the automation industry.