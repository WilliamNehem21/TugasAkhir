The academic paper discusses two key applications of using audit logging in combination with preventive security measures:

1) Audit logs provide a resource for detecting security breaches after they occur by reviewing logged actions and ensuring user accountability and deterrence.
2) Audit logs are instrumental in identifying weaknesses within existing security measures and improving those measures.

The effectiveness of these applications relies on generating accurate and efficient audit logs, as well as on their subsequent analysis. Audit logs must accurately record runtime events and include sufficient details as dictated by auditing policies, without excessively logging irrelevant data. These challenges in audit log generation are recognized as critical security risks by organizations such as the Open Web Application Security Project.

The paper also touches on the limitations of existing semantic frameworks for audit log generation, which are often constrained to linear process executions and, therefore, not suitable for systems with concurrent processing. For example, in a medical record system, audit logging is added to a web server program, tracking specific events like "breaking the glass," which are contingent upon a system-wide timing mechanism.

The shift from monolithic architectures to service-oriented architectures (SOAs) and microservices necessitates a focus on whether logs are being generated correctly. Microservices should be minimal, independent, and communicate through message passing or RPCs.

The paper reviews an information-algebraic semantic framework for audit logging, updated to better address concurrency and nondeterministic behavior in systems, and formalizes this with first-order logic. Correct audit logging is defined by comparing the audit log's content with what the specification requires to be logged based on execution traces.

Deadlock-freeness ensures that the instrumentation of the system for logging does not introduce states where the system gets stuck. Bisimulation is used to compare source and target traces, ensuring the system remains deadlock-free after adding logging capabilities.

The paper discusses the syntax and semantics of the source system model, logging specifications for concurrent systems, and systems enhanced with audit logging. It also introduces the instrumentation algorithm and its properties.

Further work highlights the use of logs for recording proof of authorized resource access and the need to extend logging specifications to encompass other system events, like message transmissions between agents. The paper suggests exploring models that handle inter-process communication (IPC) alternatives, like shared memory, for correct audit logging in concurrent systems.