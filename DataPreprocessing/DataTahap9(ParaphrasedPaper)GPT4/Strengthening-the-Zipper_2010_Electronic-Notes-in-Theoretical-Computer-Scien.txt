This paper discusses an approach for enhancing a programming language editor with bookmarking functionality, which allows users to mark certain subterms and easily navigate back to them. The authors are interested in maintaining the validity of bookmarks even after the term is modified, requiring a system to detect and adjust for changes that may render some bookmarks obsolete.

The work introduces Clase, a framework designed to simplify this process for users and make it more natural to perform. Clase's bookmarking capabilities are detailed in Section 5, and related work and conclusions are presented in Section 6.

In the paper's context, expressions are categorized as lambda abstractions (abs) with variable names, types, and expressions, application expressions combining two expressions, and variable expressions with de Bruijn indices to indicate variable bindings. Types are either arrow types (arr) or a basic unit type.

The authors describe a "cursor" as a pair consisting of a subterm in focus and its surrounding context, using it to navigate and reconstruct the entire term. This is likened to the zipper design pattern with constant time movement within a tree structure. Navigation is achieved using a "stack of contexts" linked together by a new data type called a "path."

For a programming language to integrate seamlessly with this framework, it needs specific data types for its contexts and movements, as well as a mechanism (typerep) to reflect on the language's various types. Instances of the language for simple models like the lam language mentioned can be automatically generated using a Haskell template.

Clase offers generalized movement operators for tree navigation, which work without prior knowledge of the cursor's type and use an existential type for the cursor's focus post-operation.

Editors developed with Clase should support persistent bookmarks even after tree updates. For bookmarks that become invalidated, some resolution mechanism is needed. Positions within the tree are reachable by a series of up and down movements, facilitated by the path datatype.

One-holed contexts are a core principle of this and related works, linking data structures and differential mathematics. Hence, the context for simple data structures can be auto-generated with Haskell templates.

Finally, the authors mention an alternate cursor library approach based on the zipper library parameterized by traversal functions and using delimited continuations for tree navigation. This alternate approach also supports a limited number of sub-cursors akin to the route/bookmark functionality but is designed for filesystem contexts without lexical binding considerations.