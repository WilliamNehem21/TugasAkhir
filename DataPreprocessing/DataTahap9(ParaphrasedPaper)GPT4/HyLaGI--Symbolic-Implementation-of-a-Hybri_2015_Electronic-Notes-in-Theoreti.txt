The paper describes HydLa, a constraint-based modeling language designed for hybrid systems, which can smoothly manage the uncertainties associated with such models. Its implementation, named HyLaGI (short for HydLa Guaranteed Implementation), computes trajectories without the errors inherent in floating-point arithmetic by employing symbolic formula manipulation. This non-deterministic simulation algorithm of HyLaGI allows for the computation of all qualitatively different possible trajectories in the presence of uncertainties.

HydLa builds upon earlier work such as Hybrid CC, but unlike its predecessors, HyLaGI ensures result accuracy. Another related approach is CLP(F), which focuses on rigorous simulation through interval constraints but has a significantly different control structure compared to HydLa.

HyLaGI has been developed as a C++ implementation utilizing Mathematica for solving operations such as consistency checking of constraints, differential equations, minimization problems, and manipulating arithmetic expressions and logical formulas. A distinct front-end component has been developed that visualizes the results of HyLaGI simulations through two-dimensional plots and animations.

HyLaGI's advantage is the symbolic representation of state variables, which prevents errors during simulation which are common when using floating-point arithmetic. This is particularly important for hybrid systems, where such errors can produce qualitatively differing outcomes.

The simulation algorithm alternates between point phases, which deal with discrete changes at specific time points, and interval phases, which handle continuous changes over time intervals. Interval phase computations are more complex due to the need to solve ODEs (ordinary differential equations) and minimization problems.

One key approach of HyLaGI is analyzing constraint dependencies, represented as a dynamic bipartite graph, which adapts during the simulation process. This allows for managing the activation and deactivation of constraints and calculating minimal consistent sets of related constraints effectively.