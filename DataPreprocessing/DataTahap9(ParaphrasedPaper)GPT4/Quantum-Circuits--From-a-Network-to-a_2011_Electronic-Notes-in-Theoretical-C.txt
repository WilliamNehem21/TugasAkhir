In this paper, we explore a method for converting quantum computations from the standard network (SN) model to the one-way (OW) model in a way that retains the original computational structures. This is achieved through a compositional translation, meaning it maps the structure of the computation from one model to the other directly.

We thoroughly examine the SN model, a more traditional approach, and the OW model, which relies on one-qubit measurements on an entangled state to progress computation. The translation between these models maintains efficiency and can be easily applied, potentially allowing for optimizations to be shared between models.

A key aspect of the OW model involves managing the probabilistic outcomes of measurements by using a classical post-processing technique to reformulate results into a usable state. Simultaneously, we demonstrate that we can integrate the preparation of quantum states and measurements in a straightforward manner, with examples detailed in the sub-circuits.

In our discussion, we simplify the process by abstracting common elements using the concept of a monad. By specifying two parameters, this abstract model can represent either the SN or OW model, providing a means to interpret and convert quantum computations between the two.

We also offer a critical review of the OW approaches discussed earlier, realizing that variations differ mainly in the representation of their respective realization and correction & synchronization (C&S) procedure. We examine how the definitions of these monadic layers may be improved and what factors might be involved.

Additionally, we identify a set of fundamental criteria for abstraction within the OW model that can influence circuit design and reasoning. Building on these ideas, we propose a graphical representation technique that can facilitate circuit approximation when necessary.

This work benefitted from discussions with and feedback from academics associated with the Quantum Information unit at the Institute for Scientific Interchange and the Programming Languages group at Indiana University, with special thanks to Professors Amr Sabry and Gerardo Ortiz for their guidance and input.