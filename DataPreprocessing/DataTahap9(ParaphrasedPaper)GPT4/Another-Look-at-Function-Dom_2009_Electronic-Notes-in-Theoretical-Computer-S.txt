The paper discusses an alternative strategy for handling partial and general recursive functions in constructive type theory that moves away from inductive-recursive definitions. This new approach begins with an inductive definition of the function's graph, leading to the establishment of the function's domain and type-theoretic representation, which requires an additional argument as proof that the input fulfills the domain conditions.

The authors describe two methods for validating the formal specifications of functions designed with this technique, either through induction over the function graph or by applying an induction principle similar to what is used with domain predicates in the Bove-Capretta method. This alternative method tackles the intricacies of nested recursive calls by dissecting the function's domain, revealing the interdependent nature of the function and its domain.

In systems like Agda, structural induction can be efficiently achieved through pattern matching, aligning with the Curry-Howard isomorphismâ€”the idea that a structural induction proof mirrors a function definition through structural recursion. While discussing Agda's capabilities, the authors argue that the system's design is oriented towards definitions via pattern matching rather than using induction principles, which may lead to less readable proofs.

Additionally, the paper reflects on the broader context of dealing with partial and general recursive functions in total settings, overviewing several methodologies proposed in previous research. This includes the use of co-inductive types for modeling partial functions and potential extensions to type theory to accommodate partial recursive functions.

Furthermore, the paper compares the new approach to related work by McKinna and C. McBride, who utilized graph induction for proving function properties, and by Barthe et al., who created a tool for defining and proving properties of recursive functions in Coq. The tool by Barthe et al. can generate a function's graph, which can be used to define total functions using well-founded induction. However, partial functions still require the Bove-Capretta method due to the limitations of Coq's type system and the inability to formalize nested recursive functions with the discussed tool.

In conclusion, the paper advocates for a more direct and pattern-matching-based method to enhance readability and manage the complexity of verifying recursive functions within type theory, specifically within systems like Agda, where the proposed alternative method can be fully leveraged.