For decades, researchers have advanced two primary approaches for the precise and accurate development of software using formal techniques. One approach, exemplified by languages like Z, emphasizes the data aspects of system modeling but doesn't offer explicit means to model the system's behavior. In contrast, process calculi like Communicating Sequential Processes (CSP) focus on the behavioral aspects of systems, but they lack a comprehensive and straightforward way to describe complex data aspects.

Efforts have been made to reconcile these styles by combining the data specification capabilities of Z with the behavioral modeling strengths of CSP, resulting in mixed formalisms such as Z combined with CSP, Object-Z with CSP, and new notations like RAISE. Despite these efforts, a gap remains: an associated refinement calculus for these combined formalisms is still lacking. To address this deficiency, and to provide calculational-style support for refining state-rich reactive systems, researchers have introduced a concurrent language called Circus, which characterizes systems as processes to describe both data and control. Circus leverages the Z notation for data and CSP to define behavior.

Cavalcanti and Woodcock initially created a semantic model for Circus using the Unifying Theories of Programming (UTP) framework. However, the application of these semantics for proving properties of Circus itself was limited due to its nature as a shallow embedding. To overcome this limitation, the authors have redefined Circus semantics and implemented them using the ProofPower-Z theorem prover. With these new semantics, researchers were able to prove a significant portion of the proposed refinement laws, covering the entirety of the language structure, including all data simulation laws.

The paper explores several key components of Circus:
1. Section 2 presents Circus as a language.
2. Section 3 delves into UTP and reactive designs.
3. Section 4 outlines the revised denotational semantics of Circus based on UTP, which represents the paper's main contribution.
4. Section 5 examines the library of lemmas and theorems built for this work and demonstrates how they are applied using the example of a refinement law proof.
5. Conclusions are drawn in Section 6.

Additional technical details are offered throughout the paper:
- Guards can be associated with actions, and how parallel and interleaving operators differ when avoiding conflicts with variable access.
- The paper defines the semantics of several constructs, such as 'stop' for deadlock, refusal of communications, and divergence in action behavior.
- The details of action name references, unnamed parametrised actions, renaming, and how specification statements are treated in Circus are discussed.

In conclusion, the paper underscores that the semantics of Circus have been rigorously implemented in ProofPower-Z, representing a key step forward for the language. The authors aim for this work to pave the way for the mechanization of refinement proofs, ultimately providing a resource for the formal development of state-rich reactive systems. This would benefit both academic research and practical industry applications.