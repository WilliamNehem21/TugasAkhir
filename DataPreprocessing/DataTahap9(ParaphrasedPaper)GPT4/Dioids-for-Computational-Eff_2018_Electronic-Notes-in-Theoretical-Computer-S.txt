This paper explores different algebraic structures that model computation, focusing primarily on monads and applicative functors, which are gaining popularity lately. These structures can be seen as instances of a monoid in a monoidal category, which provides a unified framework for transferring concepts and optimizations across different structures.

The paper pays particular attention to non-determinism in computational models and how it can be captured by extending monads and applicative functors with additional structure. Depending on the depth of non-determinism required—deep or shallow backtracking—different algebraic structures emerge, such as near-semirings for deep backtracking.

For shallow backtracking, the paper studies dioids and generalizes them to dioid categories, which provide a unified model for shallow-backtracking non-determinism for both monads and applicative functors. The paper also examines the construction of free dioids, which offer a canonical representation of programs with shallow-backtracking non-determinism.

The structure of the paper includes an introduction to monoids and monoidal categories, followed by a deep dive into dioids and dioid categories. It then explores the construction of free dioids, providing a formula for constructing dioids in the category of sets and functions, as well as for free dioid applicative functors. However, it finds limitations in expressing the free dioid monad.

Finally, the paper concludes by acknowledging different instances of monadplus and their axioms, noting that lists, typically used for deep-backtracking non-determinism, do not satisfy the shallow backtracking laws. The paper leverages general conditions for the existence of free monoids and analyzes the case of free monads and applicative functors, drawing on previous work to generalize the solutions to monoidal categories.