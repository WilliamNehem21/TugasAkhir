This paper presents a new method for detecting performance issues when comparing two different versions of a system. It uses a tool called PerfDetect, which operates by analyzing the source code and pinpointing the unit tests relevant to changes between versions. 

Key contributions include:
1. A fresh technique for identifying performance declines using unit tests and code analysis.
2. An empirical study of this technique applied to actual performance regressions within four open-source applications: Agilefant, Apache Commons Math, Apache Commons IO, and Xalan. The study confirms the method's effectiveness at finding both regressions and improvements, with an advantage over previous methods due to its reliance on detailed unit tests.

The study proceeds by outlining the problem and solution, setting up experiments, presenting results, discussing limitations, and suggesting future research.

Common issues with current performance regression detection methods include the time-consuming need to run full test suites, reliance on availability of execution traces which may not exist due to major system changes, and the potential limitation of execution trace analysis.

PerfDetect addresses these issues by focusing only on parts of code that have changed or been added between versions, tracking their associations with relevant test suites without necessitating full system execution.

The evaluation of PerfDetect involves both manual and automatically generated tests against version control system data for the mentioned applications. It demonstrates faster and earlier detection of performance issues compared to existing tools which may require substantial time and could miss specific performance issues due to test input shortcomings.

A limitation of PerfDetect is its inability to account for performance regressions caused by entirely new code, due to the lack of historical performance data for comparison. However, this is acknowledged as an area for future work. 

The paper concludes by affirming that PerfDetect provides an effective method to quickly identify changes leading to performance issues, hence aiding developers in addressing these problems efficiently.