Action Systems, initially defined by Back and Kurki-Suonio, serve as a formalism for modeling distributed systems. Chosen for its effectiveness in modeling reactive systems and its recent application in model-based mutation testing, Action Systems have seen several variations and have inspired models such as Event-B. The version discussed here is more restrictive compared to others, sharing some similarities with Event-B but lacking certain features such as set-theoretic constructs.

Execution of an Action System begins at an initial state, where actions are executed nondeterministically based on their enabled status, determined by satisfiable guards. The process continues until no enabled actions remain.

Translation of Action Systems to Initialized Input Output Symbolic Transition Systems (IOSTSs) is straightforward, and adaptations of the symbolic framework are applied. First-order formulae are used with familiar concepts and notation.

Symbolic execution trees, analogous to those used in program analysis, are employed to encapsulate the outcomes of action executions from an initial state. Trees, rather than traces, are used to emphasize the impact on symbolic states. Internal actions, which lack parameters, do not increment the depth index in these trees, whereas observable actions like quiescence do.

With the consideration of non-determinism in both Action Systems and the ioco conformance relation, the conformance checking process accounts for internal actions and avoids erroneously labeling systems as non-conforming when they actually conform.

Test case generation is implemented using a depth-first search in the product graph for unsafe states, signaling potential non-conformance. A suite of optimizations is introduced to expedite this process, some targeting model-based mutation testing.

The discussed model represents a device measuring exhaust gas particles, featuring a vast number of actions, and was modified from an existing model using a different Action System language.

Symbolic conformance checking is proposed for test case generation, also indirectly covering faults arising from ignored inputs via angelic completion. This work introduces the first fully symbolic conformance checker for ioco, differing from previous efforts that focus on online testing and execution.

Future work could consider modeling message queues as action systems to accurately simulate asynchronous communication without a significant increase in state space, thus enabling faithful testing scenarios beyond the current limitations of synchronous communication assumptions.