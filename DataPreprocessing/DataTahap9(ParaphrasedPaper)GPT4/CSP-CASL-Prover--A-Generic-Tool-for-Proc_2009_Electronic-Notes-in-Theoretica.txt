In our paper, we introduce theorem proving support for CSP-CASL, a specification language that integrates the modeling of processes and data in distributed systems. Our approach utilizes a combination of existing tools such as HETS for CASL and CSP-Prover for CSP, alongside the powerful theorem prover Isabelle/HOL, to effectively address the inherently combined process and data verification challenges presented by CSP-CASL.  

We focus on the concept of refinement in CSP-CASL, which can be parsed into two stages: data refinement, which is well-supported in CASL, and process refinement, which is our primary concern. Our strategy includes automatically transforming CSP-CASL refinements into a form suited for CSP-Prover, benefiting from the established capabilities of HETS and CSP-Prover. Furthermore, we demonstrate the scalability of our method through a case study involving the EP2 standard, indicative of its capacity to tackle complex, industrial-scale problems. 

Our paper is structured to first introduce CSP-CASL semantics using an EP2 system case study, then detail the employed tools, and finally unveil the overall architecture of our tailored prover for CSP-CASL. We also present a novel approach to constructing an alphabet of communications in Isabelle/HOL, which is subsequently used by CSP-Prover for type-checking CSP processes. The feasibility of this approach is supported by the capability to decompose CSP-CASL refinement into distinct CASL and CSP refinement steps, with tools like HETS providing an existing foundation for data refinement, upon which we build the capability for process refinement using automated translations and theorem proving.