This academic paper describes a system designed to monitor and verify the system call traces of a running program (referred to as P), using two virtual machines (VMs) within the Xen virtual machine monitor (VMM) architecture:

1. A monitor VM (mon-VM), which controls the execution environment and can intercept system calls made by the program.
2. An introspection VM (i-VM), which evaluates assertions about the program's state at arbitrary program points when system calls are made.

The system employs several key mechanisms:

(i) A context-free grammar (CFG(P)) is generated to define legal system call traces using a scanner created with Flex. This CFG(P) is represented in Bison syntax and is used to create a parser that checks the legality of program traces at runtime.

(ii) A Parsing Process: The parser breaks down source code analysis into two steps. First, it exports an abstract syntax tree (AST) where internal nodes represent functions, statements, or expressions, and leaf nodes represent system calls. Second, it traverses the AST to build CFG(P) using grammar-guided analysis (GGA).

(iii) Invariant Checking: A set of invariants (INV(P)) is defined for the program, associated with different points in the code where system calls occur. Each invariant is a condition that constrains the system call parameters or relates them to variables' values.

(iv) Introspection: During the execution, when the program makes a system call, the mon-VM transfers control to the i-VM. The i-VM verifies the trace against CFG(P) and evaluates the invariants.

The system assumes:
- The program's source code is known.
- Trust in the VMM is justified because of its comprehensive visibility into the mon-VM and its smaller, simpler, and thus more secure interface and codebase.
- Introspection extends the trusted computing base (TCB) without comprising security.

The practical implementation utilizes Xen technology:

- Psycotrace employs paravirtualization, where operating systems are modified to be aware of the underlying Xen VMM.
- Dynamic tools consist of the HIMOD and Analyst. HIMOD is a kernel module in mon-VM that intercepts system calls and passes information to Analyst, running in userspace in i-VM.
- Analyst checks the system call traces for consistency using a parser generated by Bison and performs invariant checks.
- Himod and Analyst communicate synchronously, with the program pausing for each system call until security checks are finished.

The paper notes that the HIMOD is limited to monitoring a single PID, meaning it does not track child processes created by forking, and that the current prototype needs improvement in this area. There is also ongoing work to develop static tools that extract assertions from the source code.