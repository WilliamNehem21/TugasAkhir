The academic paper discusses the challenges and solutions associated with database reengineering, which is the process of updating an outdated database system to a more current one and modifying software components to work with the new database. The migration involves three key stages: translating the database design (schema conversion), transferring the data (data conversion), and updating the associated application programs (program conversion). The paper focuses on the potential for automating the transformation of application programs using patterns derived from database changes. It introduces a method that links database and program transformations and details a prototype computer-aided software engineering (CASE) tool that was developed based on this methodology.

The process of migrating legacy application programs is complex due to the size and intricacies of the source code, posing difficulties in preserving the code's readability after migration. The paper examines the migration of data-centric applications following the update of their databases and suggests an approach where automatic code transformation patterns, generated from the database transformations, facilitate the program conversion. The authors propose a unified approach to migrate both the database and the application programs together and outline a prototype CASE tool that supports this integrated process.

The paper is structured to define the problem of database reengineering, detail a methodical approach to tackle the issue, describe a transformation-based method for the reengineering stages, introduce the concept of co-transformation in database application reengineering, present the architecture of a supporting tool, and conclude with a section summarizing the findings.

It delves into the concept of database reengineering as creating a new database from an existing one in conjunction with adapting software components, focusing on technology-driven reengineering. The process usually retains existing functionalities, programming languages, and user interfaces while converting the schema, which is often complex.

Comparing two migration techniques, the paper remarks on the ease but long-term unsustainability of a simple conversion approach that results in hard-to-maintain databases and applications. In contrast, a semantic migration approach yields a higher quality database by rediscovering the old database's conceptual schema and designing a new, well-documented database that is beneficial for current and future applications.

The authors discuss DB-MAIN, a CASE environment developed by the University of Namur to support database engineering processes, and ASF+SDF, an interactive development environment for generating tools for program conversion, developed by the SEN1 research group of CWI.

The paper concludes by emphasizing the importance of semantic-preserving transformations in database engineering processes. It also highlights how database reengineering can be represented as a complex transformation, with the structural mapping informing schema conversion and instance mapping defining data conversion rules.

DB-MAIN facilitates the generation of a transformation history log that can be analyzed and transformed, aiding the derivation of mappings between the old and new database schemas.

Lastly, the paper describes a wrapper-based code organization strategy where program conversion is executed through the generation of a data wrapper, providing legacy data management language (DML) operations on top of the new database. This wrapper then allows legacy programs to interact with the new database system, resolving discrepancies related to the data model, application programming interface (API), and schema. Wrapper generators for COBOL-to-SQL and CODASYL-to-SQL migrations are examples mentioned within the DB-MAIN tool context.