The paper discusses an extension to the lambda calculus that includes the concept of "constructors," which are used to handle pattern matching as found in ML-like languages. It acknowledges that some aspects of this extension do not align well with common computational or typing intuitions. Despite this, it's possible to conceive an abstract model for the untyped version of this extended calculus, and a simple instance can be constructed syntactically.

The key issue addressed in the paper is the development of a non-syntactic model for the extended calculus, which had not been resolved prior to the work presented in the paper. The solution involves returning to the original purpose of the lambda calculus with constructors, which was to emulate an abstract machine with two separate stacks. Based on this concept, the paper introduces a continuation-passing style (CPS) translation that maps the extended calculus back to the traditional lambda calculus.

From a semantic standpoint, the CPS translation is shown to convert any continuation model of the untyped lambda calculus into a model that is compatible with the lambda calculus with constructors. This implies that any Scott domain—a type of mathematical model used in the semantics of computation—can be adapted to serve as a model for this extended calculus.

The paper also explores the consequences of further extending the calculus with additional constructs, specifically with something referred to as "cc" (likely meaning control operators such as call/cc, which is shorthand for call with current continuation). It asserts that the model proposed would remain sound even with this additional extension and provides a diagram (referred to as "D3") to illustrate the interaction with this new rule. In contrast, if a certain rule (called "casecase") were removed from the calculus, the interaction of two other components of the model, denoted as "D1" and "D2," would be sufficient to uphold the intended commutation properties. 

This summary simplifies a likely complex and technical paper, which would include rigorous definitions, proofs, and possibly category theory to construct and justify the non-syntactic model for the extended lambda calculus.