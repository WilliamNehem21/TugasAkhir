LR parsing is a vital component in language design, offering a linear-time parsing algorithm for a broad set of context-free grammars. Although extensively studied and included in compiler construction education, parser generators haven't evolved to allow for abstractions over grammar rules, even though grammars can be extensive and challenging to maintain.

The paper delves into formal language theory, presenting macro grammars and languages before detailing a more limited macro grammar concept. Section 3 defines parameterized LR parsing, followed by Section 4, which outlines the parsing algorithmâ€”beginning with a non-deterministic approach and refining it for determinism. Section 5 covers attribute evaluation, introducing a type system with polymorphic types for parameterized nonterminals. Section 6 provides details on the implementation of this approach.

The paper uses a simplified JavaScript expression grammar to illustrate the concept of a restricted macro grammar and distinguishes between traditional LR parsing states, comprised of kernel items closures, and parameterized LR parsing states, based on nonterminals mappings to item sets.

It mentions parser combinators as a way to structure parsers in functional programming, noting their top-down parsing approach and recent efficiency improvements. This work aims to bring some of their polymorphism and flexibility to LR parsing construction.

The paper also references the Syntax Definition Formalism (SDF), which supports all context-free grammars and generates GLR parsers, offering lexical syntax definition and a shorthand mechanism through expansion.

Lastly, the paper touches on van Wijngaarden (or W-) grammars, which are Turing-complete and used to specify Algol 68. These two-level grammars are more conceptual and focus on context-sensitive language features, which, while powerful, lack the direct parameterization's simplicity and practical familiarity.
