Over the past ten years, the significance of representing the architecture of software systems has become increasingly apparent, as evidenced by various studies. To manage the complexity of large-scale software systems, numerous formal methods have been suggested. A key strategy for constructing these systems involves creating smaller, modular components that can be assembled, making the component concept an essential and widely recognized tool in software architecture.

Despite the multitude of approaches available today, only a select few are sufficiently versatile to accommodate different specification techniques. To develop a truly generic approach to component-based software systems, it is essential to concentrate on fundamental aspects such as the interfaces of components, the way components can be combined, and how they can be integrated within their operating environment.

This paper introduces an architectural framework that utilizes both connectors and components. Within this framework, an architecture diagram offers a high-level view of the system based on specifications, while an architecture graph provides a more concrete representation where the nodes are either connectors or components.

For a system comprising binary components and connectors, we employ a succinct infix notation: comp = comp1 + con comp2. For systems with multiple components and connectors, the notation expands to: comp = con(comp1, ..., compn, con1, ..., conn). The principles discussed here can also be applied to connectors that possess multiple import interfaces.