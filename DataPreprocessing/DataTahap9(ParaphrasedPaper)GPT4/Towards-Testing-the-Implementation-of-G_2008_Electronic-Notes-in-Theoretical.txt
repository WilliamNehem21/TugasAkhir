This academic paper introduces a new approach for creating test cases designed to validate graph transformation systems, particularly focusing on graph pattern matching. The authors suggest a model that accounts for typical programming errors and the unique aspects of graph transformations. By combining principles from hardware and software testing—including mutant generation for software and test case generation techniques from hardware—they aim to formulate effective test cases.

Verification and testing are two methodologies employed to identify faults in graph transformations, with verification being more common in the design phase and testing being beneficial during implementation due to its avoidance of combinatorial explosion and ability to run directly on the implementation. The authors put forth a fault model that adapts traditional hardware testing approaches, such as utilizing stuck-at faults, to design tests for graph transformation implementations. This model generates test cases by applying systematic fault injections into a combinational circuit representation, which is derived from the preconditions of the graph transformation rules.

Moreover, the paper discusses the structure of a finite automaton as an example, explaining how states and transitions are arranged, and how transformations are defined by a metamodel and subsequent rules. In pattern matching, logical conditions extracted from the transformation specifications are used to determine the success of a graph transformation rule, which is also represented as a combinational circuit for test generation purposes.

Test generation is carried out by injecting faults into the circuit and applying the method of boolean differences to produce test cases that can reveal stuck-at faults. The paper stresses the importance of optimizing test cases, balancing between detection effectiveness and diagnostic information preservation.

The paper also touches on existing techniques for verifying the correctness of graph transformation systems and compares its proposed method with existing literature on test case generation for graph transformations. The authors conclude with future plans to enhance their testing method by considering rule application and improving the fault model to incorporate control flow faults and to explore the method's effectiveness in fault diagnosis alongside detection.