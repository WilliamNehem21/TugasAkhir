This academic paper discusses the challenges and approaches to verifying and correcting security protocols, which, despite their brevity, are notoriously difficult to design error-free. The authors note how it took an extended period (around 17 years) to discover a flaw in the Needham-Schroeder Public-Key Protocol, highlighting the complexity of the task.

They examine two primary verification tools: model checking (e.g., FDR and OFMC) and theorem proving (e.g., Isabelle's inductive method and Coq). Model checking can quickly validate whether a protocol—typically an abstracted version—is correct and provide a counterexample if it's not. On the other hand, theorem proving might be slower but is more broadly applicable.

The focus of the paper is on a less-studied aspect of protocol verification: the correction of flawed security protocols, which they refer to as mal-formulations. Such flaws are often found through failed proof attempts and may be corrected by analyzing the resulting counterexamples.

The authors present a method that uses observed non-trivial message parts across multiple protocol runs and heuristics to diagnose faults and suggest fixes. They outline their patching method and describe its development and testing. Their proposed method was tested on a set of 21 flawed security protocols from the Clark-Jacob library, producing promising results. Verification of the corrected protocols, to ensure they are not prone to the same type of attack, involves reapplying model checking or theorem proving, for which the paper specifically mentions the use of the AVISPA tool.

Finally, the paper examines the specifics of dealing with interleaving-replay attacks, where a malicious actor, referred to as a spy, monitors parts of a protocol's execution and then impersonates others by replaying messages in different runs of the protocol. The lack of mechanisms for agents within the protocol to verify message origins or timelines can lead to successful deception if the chosen messages for replay contain secrets.