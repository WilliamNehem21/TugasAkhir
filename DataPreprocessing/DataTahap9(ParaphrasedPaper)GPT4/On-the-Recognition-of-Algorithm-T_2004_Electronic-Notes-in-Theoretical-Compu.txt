The paper discusses an approach to hardware-software codesign where code in a program that can be handled by existing hardware, such as coprocessors or IP blocks, is identified and replaced by calls to that hardware. The focus of the paper is to introduce a method to recognize algorithm templates within source code, which is an issue that has not been previously addressed in the context of algorithm recognition. The method builds upon an existing framework and operates by examining the dependencies within single assignment, resource constrained (SARE) codes to determine if a certain schedule is possible. Specifically, the scheduling problem is considered for SAREs that are parametrically bounded, and while it is not decidable in general, the existence of affine schedules can be determined.

The paper looks at two scheduled SAREs, with one being a template, and explores the potential to establish a correspondence between their input and output variables based on domain matching. It aims to determine variable substitutions and validate this matching process, despite its potential to require a parametric number of steps, which poses a termination problem.

To address the problem of termination, the paper suggests the construction of an automaton that represents the matching procedure. The automaton—a Memory State Automaton (MSA)—is designed to compute the set of possible unifiers without actually executing the procedure. The paper claims that the transitions of the MSA replicate those of the matching process, ensuring that it calculates the correct set of unifiers, a fact that is supported by a correction proof provided in a subsequent section.

Overall, the paper offers a novel technique for the recognition of algorithm templates in source code and introduces the concept of an automaton to navigate the computational complexity of the process while still achieving accurate matches.