In the context of the transformer model, the two types of simulation—upwards and downwards—are robust approaches. Notably, upward simulation on its own is considered complete because downward simulation can be represented through a Galois connection, which is the fundamental method applied in this research. The demonstration that the two simulations together capture all data refinements in the relational scenario is simplified in the transformer setting to a more assertive claim. This claim states that upwards simulations, even when composed (which results in another upwards simulation), are sufficient to achieve this goal.

This academic work also compares the distributional model by He et al., which is analogous to the relational model, with the expectation-transformer model by Morgan et al., paralleling the transformer model. Between these two models lies a Galois connection.

Section 3 of the paper focuses on data refinement for probabilistic programs. It lays the groundwork by defining the structure of simulation spaces. Then it reveals that in the distributional model, neither type of simulation is independently complete for data refinement. The pursuit of further development is hindered by the less robust properties that govern probabilistic programming. The section ends with a discussion on this topic.

The paper discusses the properties of the pair (i, f), noting that the functions hi and hf set boundaries for upward simulation. For the sake of simplicity, the paper denotes the set of functions that satisfy a certain refinement condition as [hi, hf], without suggesting that this set is totally ordered.

When it comes to evolving a comprehensive technique for data refinement in probabilistic systems, the paper acknowledges that there is significant work yet to be done. A question is posed regarding what could be the equivalent of the power-set construction in probabilistic scenarios. Theorem 3 indicates that for probabilistic settings, unlike non-probabilistic ones, it is insufficient to only consider deterministic datatypes. The result depends heavily on the chosen semantic model for computations and even the method used to define the semantics of a module. While the underlying semantic model is derived from traditional (non-probabilistic) cases, the approach to module semantics introduces a new challenge.