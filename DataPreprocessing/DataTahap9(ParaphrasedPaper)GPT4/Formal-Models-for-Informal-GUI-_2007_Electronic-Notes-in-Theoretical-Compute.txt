Various approaches to software system design and implementation span from formal to informal practices. Formal methods, like the use of precise languages and systematic refinement, are highly suitable for capturing the technical behavior of systems, whereas user interface (UI) design often adopts informal strategies to accommodate user involvement. The challenge lies in integrating these two methodologies to harness their combined benefits. This paper discusses a hybrid model that incorporates informal design elements into a formal context, highlighting applications of this approach.

Separating a system’s graphical user interface (GUI) design from its underlying behavior is a customary tactic, underscored by the development of User Interface Management Systems (UIMS) that embody this division, like the Seeheim model. The paper introduces a "presentation model" to formally represent informal design artifacts and extends it with the formalism of finite state machines, thus allowing examination of both static and dynamic aspects of UI designs.

Key to User-Centered Design (UCD) is involving users throughout the design process, using various collaborative artifacts such as sketches, narratives, task models, and low-fidelity prototypes. Yet, transferring UCD processes into formal software engineering poses a dilemma due to the intentionally informal nature of these artifacts. The paper suggests the presentation model as a bridge between informal designs and formal processes, providing a formal description of the UI that maintains an abstract and high-level perspective.

An example of the presentation model describes two UI components, P and Q, representing different windows or UI states. The behaviors linked to action controls and selectors within these components are formally defined to provide a comprehensive view of the UI’s potential behaviors.

Applying the presentation model facilitates consistency across different screens and dialogues within an application, ensuring controls with identical functions have matching labels, and conversely, that identically labeled controls perform the same action. Since the model offers a static overview, the paper proposes supplementing it with finite state machines to handle dynamic UI behavior changes. By linking the presentation model to FSM, the resultant "presentation and interaction model" (PIM) allows for verification of UI functionality and dynamic interactions.

The paper concludes by explaining how to demonstrate the reachability of specific UI behaviors within the integrated model using standard FSM techniques, thereby bridging formal and informal elements of software design.