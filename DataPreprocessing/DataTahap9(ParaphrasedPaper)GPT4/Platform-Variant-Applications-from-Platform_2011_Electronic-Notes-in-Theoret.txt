The tool named Democles 5 facilitates the use of the EP language, which is adept at creating platform-independent models to represent various systems. The research paper outlines the capability of EP to delineate a range of related systems and introduces a methodology for generating code from EP using templates.

The Formal Template Language (FTL) is employed for creating templates that can be used across different textual languages without being tied to any particular platform or execution environment. This language has a formal mathematical basis and acts as a generative tool capable of producing sentences in target languages such as Java and Objective-C when provided with specific data for instantiation.

The EP model referenced in Section 6 is not linked to any specific platform, focusing on the general concepts of problem domain, user interface, and data persistence without delving into platform-specific details. The development team, comprising three members, two of whom possess expertise in Android and iPhone operating systems, managed to utilize and interpret the EP platform-independent model (PIM) to create iPhone and Android applications, demonstrating that EP serves as a common communication medium.

Initially, model development can be sluggish due to the need to create and refine numerous templates. However, once a robust set of templates is established, the subsequent development process accelerates, allowing the model developer to work independently from platform specialists.

The experiment conducted indicates the efficacy of the model-driven development (MDD) methodology in enabling developers who are not familiar with a particular platform to produce applications from models. Nonetheless, this approach is not without its limitations and presents several areas that could be improved.

An advantage of this approach is the automatic generation of application variants, effectively abstracting the complexity of variability behind the template structure. Some limitations include the inability to manage variability at the modeling level using the current EP-based method.

Developing applications at the modeling level offers usability benefits such as enabling individuals with limited platform-specific knowledge to partake in the development phase, thereby encouraging the formation of teams with diverse expertise. This division of labor facilitates teamwork, though the downside is that MDD toolkits have not yet reached the sophistication level of modern platform-specific development environments. No known platform-independent GUI editors cater to multiple platforms. The study suggests the necessity to improve approaches for handling larger and potentially more complex EP models.

The described approach is a variant of an FTL-based modeling framework that utilizes catalogs of FTL templates to define semantics for UML notations, with each catalog reflecting a unique semantic interpretation suitable for distinct execution platforms. Previously, FTL templates were instantiated manually due to the lack of tool support.

While other works propose MDD frameworks relying on templates, they tend to use informally defined template languages with basic placeholder constructs, unlike FTL that is a formally defined language with a broader array of constructs.

Balasubramanian et al. suggest a model-driven engineering (MDE) methodology based on domain-specific modeling languages (DSMLs), covering a wider array of system aspects than the EP approach, including architecture and deployment aspects. The approach discussed in the paper does not employ DSMLs, but it does map abstract model concepts to a variety of platforms using template-based intermediate code representations. It is grounded in formal languages, with both EP and FTL being formal, and it adopts statecharts and data-flow diagrams for behavioral descriptions, contrasting with the EP approach where behavior is characterized using EP and the Object Constraint Language (OCL).