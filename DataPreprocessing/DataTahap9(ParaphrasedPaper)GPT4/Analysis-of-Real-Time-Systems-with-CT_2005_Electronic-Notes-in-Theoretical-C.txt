This research presents a novel algorithm that allows model checking of real-time systems by utilizing decision procedures to evaluate various set operations and predicates within timed systems. The algorithm reforms specifications expressed in Timed Computation Tree Logic (TCTL) into the more conventional Computation Tree Logic (CTL), enhancing them with extra atomic propositions to manage the specific constraints of the specification. The authors have developed a TCTL model checker that adapts strategies from classical CTL model-checking while including techniques that abstract constraints found in both systems and properties using the concept of predicate abstraction as a form of abstract interpretation, as cited in references [7,14].

The paper is structured as follows: Section 2 introduces the formalism of timed automata that describes timed systems. Section 3 describes the logic of TCTL and the authors' approach to converting TCTL specifications into CTL, including the proof of correctness for this transformation. Section 4 details the algorithm designed for producing finite bi-similar graphs of timed systems. Section 5 details how these graphs can be applied to CTL model checking and illustrates how the outcomes can be related back to the original timed systems. The conclusion summarizes the paper's contributions.

The authors explain that traditional algorithms for solving bi-simulation problems often rely on partition refinement processes. These processes iteratively refine partitions by splitting blocks based on the distinguishability of states. States are considered distinguishable if transitions differ in label or destination block.

The algorithm presented in the paper also ensures the removal and replacement of edges and "zones" (state space partitions related to timed automata) at the end of each iteration, updating the remaining connections accordingly. The authors clarify that non-zenoness (avoidance of infinite behavior within a finite time frame) and the convexity of the constraints within the timed automaton ensure the resultant partitioned zones remain convex and non-zeno. They also affirm that the algorithm will terminate successfully.

Ultimately, the paper introduces an approach to model checking for dense real-time systems by abstracting the specifications of TCTL to CTL without necessitating any extension to the CTL logic or its model-checking algorithms. Their time abstraction algorithm, leveraging strong bi-simulation, is designed for simplicity, avoiding complex operations, and thus is easily implementable. The resulting finite graph serves as a basis for utilizing various branching-time verification tools for CTL model-checking, and this approach does not require any modifications to the CTL logic or the model-checking algorithm itself.