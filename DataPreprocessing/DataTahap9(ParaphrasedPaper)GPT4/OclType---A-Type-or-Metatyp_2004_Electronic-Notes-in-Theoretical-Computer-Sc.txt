The OCL 2.0 proposal has problems with both consistency and comprehensiveness. Notably, it lacks formal semantics for some new features, like OCL messages, and for elements that were previously introduced in UML 1.5, such as the semantics for state-related operations.

This article addresses semantic issues and proposes improvements in how the OCL standard library models the predefined type OCLType, along with corrections in the specification of its related operations. This is part of the effort to refine OCL for UML 2.0.

OCL constraints require a UML model for reference. In this model, called the referred UML user model, each classifier represents a distinct OCL type and becomes a subtype of OCLAny within the OCL standard library.

OCLType plays a unique role among the predefined OCL types in the standard library, representing all basic types in the OCL type system. OCLType exists on the metalevel M2 but needs to be usable on the user level M1 for expressing constraints about object types, such as type conformance checks.

Issues are present with operation signatures for OCLModelElement. OCLModelElement is considered an enumeration type under the OCL 2.0 proposal, and its operation signatures mistakenly use OCLType rather than OCLModelElement, needing correction.

Further, the paper examines how OCLType is defined and used in literature and the current OCL 2.0 proposal. It introduces the power type concept as a means to integrate user-level types better with the OCL standard library type system at level M1. The paper concludes by underscoring the type-related challenges that arise when trying to model OCLType as an enumeration type and the problems with defining operations like allInstances() to base type OCLAny, as these should only apply to types, not objects.

Addressing these difficulties, the paper proposes leveraging the power type concept, a UML core concept, to provide access to specialized types as instances on modeling layer M1. This approach would allow the operation allInstances() to belong to the power type OCLType rather than OCLAny, which is more appropriate as it is intended for types, not instances or data values.

In summary, while recognizing that OCL 2.0 still has many issues to be resolved, especially concerning its semantics, this paper contributes to the ongoing discussion by focusing on the proper modeling and specification of types within OCL, advocating for the use of UML's power type concept to alleviate some of the observed challenges.