This paper presents a rule-based framework utilizing stochastic semantics to model biological systems. The framework builds on the concept of types, which are blueprints defining objects and their attributes. Objects represent specific instances with actual attribute values. For example, a diffusion model could define a type X(n: int) to represent molecules with position n in an array, leading to instantiations such as X(n=1) for a molecule in the first cell. The rules in this system dictate the addition and removal of objects at the type level, allowing one rule to apply to many objects, thus streamlining the model.

The authors describe a language similar to rule-based colored Petri nets, offering clear textual representation and empowered by embedding in Haskell for added expressive capability. In considering plant growth, they interpret different processes like carbon assimilation and respiration in terms of carbon transfer and leaf mass changes, highlighting interdependent growth dynamics.

The core building blocks of the language are objects or agents, defined by a specific type—including agent name and attributes—that shapes all objects of that type, such as a leaf with mass and age attributes. The state of the system is represented as a multiset of these objects.

Rules guide system transformations, with left-hand sides identifying objects and binding field values to variables, influencing right-hand side outcomes. Variables are restricted to ensure clarity and consistency in rule application. Condition expressions determine rule applicability.

The authors discuss implementing the language within a programming environment like Haskell, advocating for syntax recognizable from abstract descriptions while leveraging Haskell capabilities for expressions.

Queries within the language are structured around basic functions, allowing for object selection and aggregation. The implementation of rule-based elements mirrors colored Petri nets, with an emphasis on offering stochastic versions of these nets.

Chromar stands out by integrating continuous variables and object dynamics through object manipulation rather than traditional differential equation systems. The rule syntax extends beyond simple types to record types with named typed fields, making it possible to dynamically create new species by instantiating new objects with attributes.

Simulation follows a straightforward approach but recognizes potential optimization in reaction generation, reducing overhead by incrementally updating reactions.

Acknowledging variable environmental influences, particularly in plant biology, the authors suggest an extension of their framework to encompass time, thereby enabling the language to account for dynamic environmental changes, such as day-night cycles affecting photosynthesis.