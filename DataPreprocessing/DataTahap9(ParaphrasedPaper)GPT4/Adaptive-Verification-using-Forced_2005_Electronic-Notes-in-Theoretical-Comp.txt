Formal verification is increasingly used in developing and validating reactive systems, including digital hardware and embedded systems with hardware and software components. Precise language constructs with explicit syntax and semantics enable the thorough verification of system attributes such as correctness, reliability, and security. Model checking is a popular technique that automatically confirms whether a system model adheres to specific properties through state space analysis.

Model checking's appeal stems from methods that reduce initial state space, such as symbolic model checking and, more recently, SAT solver-based bounded model checking. However, when a model checking cycle detects a property violation, it returns counterexamples, which require the designer to manually debug the model before rechecking, making automated debugging solutions valuable to practitioners.

Debugging errors caused by unanticipated behaviors in system models is challenging. Recent efforts focus on debugging modeling inconsistencies that lead to false negatives in model checking, and on managing the design of concurrent systems by using temporal logic to navigate state transitions. This paper concentrates on errors that introduce undesirable transitions, necessitating adaptations in forced simulation so that transitions leading to state violations are not enforced.

In this work, models and specifications are derived from SMV (Symbolic Model Verifier) language files using an algorithm implemented in the well-known NuSMV model checker. The algorithm conducts a breadth-first search from the initial nodes of an SMV file, records state details in a text file, and inputs these details into a forced simulation algorithm.

Real-world examples demonstrate how certain protocols and systems can be debugged using fewer states than those in the original descriptions, to meet specific constraints or prioritize sub-processes, illustrating how models can be refined to conform to more specialized requirements.

While formal methods effectively identify disparities between models and specifications, discovering such issues typically precedes a laborious manual debugging process, sometimes iterated multiple times. This underlines the significance of automated debugging for critical specification compliance. The paper introduces a new automatic model debugging technique that uses a weaker form of relation called forced simulation to modify the model so that it satisfies the specification, providing a crucial and sufficient condition for debugging through an algorithm that crafts a modifier guaranteed to adjust the model accordingly.