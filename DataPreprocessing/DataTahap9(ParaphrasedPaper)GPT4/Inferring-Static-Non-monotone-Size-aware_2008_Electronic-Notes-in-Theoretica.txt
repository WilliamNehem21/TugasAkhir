The paper discusses a method to automatically derive exact relationships between input and output sizes for functions in programs, particularly focusing on polynomial relations. The authors describe a size-aware type inference procedure that generates hypotheses based on polynomials of various degrees. These hypotheses are then verified using an existing size-aware type checking procedure, which checks that the function's output sizes match the inferred size-aware types.

If the size-aware type of a function can be inferred and is recognized by a size-aware type checker, the research confirms that the type inference procedure is complete for terminating functions. The paper also examines cases where output sizes strictly follow polynomial patterns, using functions like progression (calculating arithmetic progressions from lists) and cprod (calculating Cartesian products of lists) as examples.

The type system considered includes integers and strictly sized lists (or matrices) with rational polynomial size expressions. The authors also create a procedure for inferring types based on the degree of polynomials, arguing that the procedure is semi-decidableâ€”it terminates when it successfully infers size-aware types.

The paper presents an upper bound on test runs needed for reliable type inference and addresses the challenge of iterating over increasing polynomial degrees when no suitable type is found, potentially resulting in nontermination. Nonetheless, for practical purposes, programmers often use a maximum degree to limit the search space.

Lastly, the authors discuss extending their approach to encompass unshapely programs (ones not strictly polynomial in size relationship). They suggest possible program transformations that change an unshapely function into a shapely one, providing an upper bound for the original function's size relationship. The research concludes with a mention of a demonstrator developed for this size-aware type inference procedure, emphasizing that the inferred types are static and apply to all future executions of the program.