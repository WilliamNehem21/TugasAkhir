The C language uses integers to represent Boolean and enumerated types. These types can be cast to and from integers without explicit distinctions. Verification tools, which analyze potential variable values in a program, could improve much from knowing when variables represent Boolean or enumerated types since these have smaller, finite domains. More efficient symbolic representations like Binary Decision Diagrams (BDDs) are ideal for these finite type variables. In contrast, larger domain integers and floating-point variables are better represented using approximate representations, such as intervals and octagons.

The paper discusses enhancing the ConcurInterproc verification tool, and its pointer extension, PInterproc, to better handle integer variables used as Boolean or enumerated types by representing them using BDDs. The suggested improvements in this paper cover a larger subset of the C language and demonstrate the interaction between value analysis and points-to analysis. However, these improvements come with some assumptions, such as the absence of casts and pointer arithmetic. These assumptions can be relaxed by employing established points-to analysis techniques, such as the one by Steensgaard.

The authors note that if the abstract domains used by analyzers were capable of dynamically adapting the types they work with based on the variables' needs, the proposed work would be unnecessary. Unfortunately, the abstract domains proposed in prior literature tend to be very specialized (e.g., for floating points or numerical arrays), and incorporating more general cases would increase their complexity.