This paper introduces a method for creating abstract interpretations that are adaptable based on different data abstractions, tailored specifically for analyzing C/C++ code. The technique works with code represented by the GIMPLE control flow graph, a format used by the GCC compiler. It processes program changes symbolically and keeps a record of symbolic memory valuations. An abstract interpreter is created by choosing suitable lattices for the data types being considered. The choice determines a specific version of the generic transition relationship. These interpreters can manage complex features such as pointer arithmetic, type casting, unions, and associated aliasing issues. The paper also discusses how changing abstractions can lead to more efficient verification. These ideas have been actualized in the RT-Tester tool, which verifies embedded systems for industries like aviation, railways, and automotive control.

The techniques discussed also include ways for concrete and abstract interpretation of C/C++ programs parsed into GIMPLE format, producing a control flow graph for each function or method. The results of this work are incorporated into a tool used for module testing and static analysis of critical embedded systems software in railway and aviation sectors. There are plans to use it for automotive control with a focus on model-based test case generation. The tool's intermediate representation uses hierarchical transition systems for both code and model items, like UML 2.0 statecharts, allowing the same test case generation approach for both code-based and model-based testing. The paper concludes that a proof of correctness for the abstract interpretation semantics, as outlined in section 5, is being developed to ensure that the application of these rules consistently results in a valid abstract interpretation semantics as per their definition 2.1.