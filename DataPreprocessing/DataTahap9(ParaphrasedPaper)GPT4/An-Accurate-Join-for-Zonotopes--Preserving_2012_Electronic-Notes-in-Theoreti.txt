Zonotopes are an effective abstraction for analyzing programs with numerical variables, offering precision while handling non-linear assignments at a lower computational cost than convex polyhedra. The classical join operator in zonotope abstract domains, however, does not consistently preserve linear invariants, unlike the convex hull. To address this, the paper introduces a new global join operator that retains certain affine relations, demonstrated through experiments on APRON's constrained Taylor1+ domain.

Zonotopic techniques have wide applications, such as image processing, hybrid systems reachability analysis, and static program analysis. Zonotopes perform well when interpreting arithmetic expressions and assignments, but they face challenges with set-theoretic functions like meet and join operations, which lack clear characterization and necessitate overapproximation.

The authors presented a meet operation for zonotopes in prior work. Here, they propose a more precise join operation, improving upon previous time- and space-efficient upper bound operators that lost too much relational information between program variables' possible values. The new global join operator combines a component-wise join with common affine relations to optimally bound other variables in many cases.

For affine sets, minimal upper bounds do not always exist, and when they do, they might not be comparable. Previous upper bound approaches based on per-variable minimal bounds failed to capture inter-variable relations, which led to less accurate results. The paper introduces a global join operator implemented in the Taylor1+ domain of the APRON library. Comparing standard and global joins shows the latter's improved precision when analyzing programs with interproc, a static analyzer that utilizes APRON abstract domains.

The paper confirms the new zonotopic join operator enhances precision without sacrificing speed, maintaining analysis performance, and outperforming the previous join operation. It retains common affine relations between program variables and inputs, uncovering properties that may link program variables to loop counters or reveal disjunctive information. The authors suggest potential extensions to handle inexact affine relations and approximate non-linear relationships in the future.