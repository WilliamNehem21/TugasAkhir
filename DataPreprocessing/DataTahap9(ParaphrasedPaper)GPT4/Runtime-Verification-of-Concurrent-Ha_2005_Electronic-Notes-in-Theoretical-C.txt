In the following research, we discuss the use of model checking to debug concurrent Haskell programs. The debugging process involves verifying Linear Temporal Logic (LTL) formulas that describe desired properties in real-time. When a program execution counters an assertion, the debugger issues an alert and documents the sequence of events that led to the issue. This system enables the addition of new formulas during program execution, providing flexibility that static source code verification lacks. We illustrate the approach by detecting lock-reversal issues in concurrent Haskell applications and introduce templates to define LTL formulas that apply to various threads or communication mechanisms.

The article gives advice on debugging, suggesting that inserting unique markers to trace the programâ€™s state and progress could be beneficial. This can facilitate runtime verification of programs using an embedded verifier. We explore temporal logic, particularly LTL, for its ability to model changing states over time, emphasizing that no formula should evaluate to false at any point of the program execution. New formulas can be added dynamically as the program evolves.

The structure of the article is as follows: Section 2 introduces Haskell and trace recording for debugging purposes. Section 3 provides background on LTL and the runtime verifier. Section 4 demonstrates an example of lock-reversal verification. Section 5 introduces the template system for creating LTL formulas. Section 6 concludes the paper and discusses future work.

We explain how Haskell threads operate with MVar constructs for synchronization and inter-thread communication, and that when a property is violated due to a race condition, traces of concurrent actions are recorded and analyzed through Haskell's debugger to understand bugs.

Traditional model checking, which explores all possible paths from a specification, often faces practical challenges like deriving specifications from source code and dealing with state space explosion. In contrast, runtime verification observes state changes as they occur, focusing solely on the executed path and enabling the use of formal verification methods in practical scenarios.

Our approach allows for a wide range of types as atomic propositions, with LTL defined polymorphically. We address disjunction, negations, and also provide a release operator for the LTL formulas. For debugging assistance, we create a data type that includes thread identifiers and MVar names for tracked concurrency actions.

We optimize the instantiation of templates to avoid redundant formula generation, ensuring efficient verification. Developers can augment the debug trace with annotations for enhanced diagnostics, and our system can display relevant portions of the trace when a property fails. This work extends previous efforts with a template mechanism that enables dynamic instantiation of formulas based on parameters like thread IDs or MVars.