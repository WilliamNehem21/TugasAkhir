Our investigation concentrates on generating test cases for symbolic real-time systems. These systems are symbolic because their specifications include variables and parameters and real-time because their specifications impose timing constraints. We propose a novel strategy by integrating and extending two previously established testing techniques: one for non-symbolic real-time systems and one for symbolic systems without real-time constraints.

Conformance testing is designed to determine if an implementation adheres to its formal specification. This involves creating test cases from the specification and running them on the system being tested. Our focus lies on the test case creation phase and we also suggest a framework for executing these tests. Our interest is particularly in two areas: testing symbolic systems, which considers specifications with variables and parameters and avoids fully instantiating these variables in test cases, and real-time testing, which tests systems with time-dependent behaviors.

Our methodology is illustrated by a transformation technique called "setexp," which turns a real-time system specification (expressed as a Timed Input/Output State Automaton, or TIOSA) into a SEIOSA (set-exp-automaton). This transformation involves incorporating actions that represent the setting (set) and expiring (exp) of timing mechanisms within the system.

The paper argues that you can replace a TIOSA with its input-completed form for conformance checking purposes, although the process isn't straightforward. Moreover, we employ hypotheses to guide the application of the "setexp" transformation, extending it to TIOSAs rather than just timed automata.

To provide intuition for "setexp," we offer a simple example involving task timing, showing how the transformation can capture the essence of a timing constraint.

The paper then claims that from a behavioral standpoint, a TIOSA and its "setexp" transformed version are indistinguishable to an observer who overlooks the set and exp actions. These actions are essentially physical actions in the test system that reflect the system's timing behavior.

A notable point is that our testing architecture only works if internal transitions, which are invisible to an observer, don't reset clocks since the test-controller must observe every action tied to clock resets to generate set actions.

This research melds real-time and symbolic testing into a unified approachâ€”real-time testing verifies timing constraints; symbolic testing avoids explicitly enumerating data values. We claim that the simplicity of our method, which concentrates the main real-time treatment into a single step, broadens existing methods into the real-time domain. We are optimistic about the potential application of our approach, as the individual methods it builds on have been used to develop practical tools. However, we acknowledge that proving applicability with real-world case studies remains.