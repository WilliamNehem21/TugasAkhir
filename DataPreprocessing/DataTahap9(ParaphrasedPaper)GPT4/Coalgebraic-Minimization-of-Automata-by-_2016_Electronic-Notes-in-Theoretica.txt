We present the minimization approach described in Section 2.2 in the context of algebraic structures. Specifically, our discussion is centered on converting it into terms involving (co)algebras. We introduce an example with deterministic automata in Example 6.2 to illustrate this concept in a more concrete manner. This particular example can be understood without prior knowledge of the more generalized theory.

For our broader construction, we include considerations for branch-like structures, referred to as "bras." However, as detailed in Section 8, the abstraction we use cannot directly lead to a minimal automaton due to certain limitations of the theoretical framework. This construction also shares similarities with another approach mentioned elsewhere in the literature, but our treatment is distinct in that we rely on contravariant adjunction, not on duality—a difference that impacts factorization.

We explore the question of whether it is possible to find the "i-reachable" part of an algebraic structure from its "i-minimization." An example (Example 2.1) demonstrates that this is not always feasible. In other words, refining partitions in deterministic automata might conclude before we have finished computing reachable sets using the reverse process.

However, we also find that it is indeed possible to combine both minimization techniques—those based on i-minimizations and those on i-reachable parts—employing Corollary 7.3 as a tool. This suggests a method that iteratively calculates i-reachable parts, as stated in Theorem 5.1, computes i-minimizations alongside, and concludes once the i-minimization itself becomes minimal.

For practical computation, when moving from the i-minimization to the (i+1)-minimization, it is helpful to consider incorporating information from the i-minimization stage. In the case of deterministic automata, this involves updating the partition based on new and previous splitters, which aligns with an abstract computation method involving these elements.

The inductive methodology for calculating i-reachable parts and corresponding i-minimizations for deterministic automata is reminiscent of other established approaches, such as those documented in referenced literature and described at the end of Section 2.2. Nevertheless, our process diverges by allowing for the possibility of terminating the computation earlier when we reach a state where the i-minimization is deemed minimal, instead of insisting on computing until the full reachable part is obtained, as evidenced by Example 2.1.

Lastly, the principles of duality and Theorem 4.4 affirm the direct relationship between factorization in the context of our framework on d and the reverse (opposite) constructs, highlighting the corresponding algebraic structures and the interchangeable concepts of reachability and minimization.