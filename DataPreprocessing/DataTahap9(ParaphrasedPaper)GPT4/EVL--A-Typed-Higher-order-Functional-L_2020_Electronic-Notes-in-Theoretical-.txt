This paper introduces "evl," a concise higher-order functional programming language designed expressly for handling "generic events," an advanced form of the conventional event concept prevalent in databases, concurrency, reactive systems, and cybersecurity. Generic events, which were originally conceived for a meta-model focused on access control systems' obligations, are described using polymorphic record types in evl to facilitate type inference.

The authors discuss the use of evl for complex event processing (CEP), which encompasses a range of techniques for handling streams of events—such as event detection, pattern recognition, filtering, and data abstraction. Thanks to evl's higher-order functions, it can accommodate complex operations typical of CEP.

When describing common operations within an event processing system, the paper outlines a producer-consumer model whereby an event processing agent (EPA) receives events and distributes them to consumers after potentially filtering or transforming these events to match consumer specifications or access control policies. This filtering can also involve the alteration of events for different consumers. EPAs might handle events on an individual basis or in groups, allowing for complex operations such as splitting or aggregating events.

The paper illustrates how evl can program EPAs to manage raw events and generate new, derived events for consumers. These EPAs might operate without state (ignoring previous or subsequent events) or with state (using past or future events to determine processing). The authors also introduce specific transformation events and describe various types such as translation, splitting, aggregation, and composition, along with an example of composing weather data from multiple sensors into a single event.

Furthermore, the paper delves into pattern-detect EPAs, which are valuable in systems like publish-subscribe networks. These EPAs allow consumers to subscribe to events by specifying patterns, which CEPS can enhance to recognize more intricate relationships between multiple events.

The paper also recognizes the practicality of defining an entire class of similar events—e.g., from a temperature sensor—rather than specifying individual event structures, introducing the formal relationship between generic and specific events.

Lastly, the paper acknowledges that while evl is minimalistic, future extension possibilities could include operations like expanding or contracting record fields. The language aims to bridge data stream processing, which involves deriving data from various sources, and complex event processing, which interprets events to generate new ones. Evl aspires to fill the gap between these paradigms and may advance the study of both complex event processing and obligation management in access control systems.