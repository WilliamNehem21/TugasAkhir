This paper introduces an approach to highly modular programming using fixpoint calculations on lattice structures within a dependently typed functional language. The authors propose a Coq library, containing module functors designed to build complex lattices by utilizing efficient data structures. A feature of this library is a proof obligation of well-foundedness within the lattice signature, a crucial aspect for ensuring that generic fixpoint algorithms terminate.

In this paper, the authors highlight the capabilities of Coq's recent module system for handling algebraic structures and converting them into efficient OCaml code. An additional contribution is a general proof, rooted in the concept of an accessibility predicate, which ensures that the combination of relations maintains the properties necessary for accessibility.

The paper is structured as follows: The module signature for the desired lattice type is outlined in Section 2, and Section 3 provides a motivating example for building such a lattice in Coq. Sections 4 and 5 delve into various lattice functors included in the library, focusing on binary functors such as the product functor, and function functors that support different implementations. The conclusion is presented in Section 6.

A key development in this work is the provision of a proof concerning the termination criterion of a widening operator. Unlike the termination of products in noetherian partially ordered sets, which can be shown using classical results, the proof for widening operators necessitates a specific mathematic assertion.

The paper underlines the importance of function functors in static analyses, where the efficiency of data structures for functions is paramount. Establishing proofs of termination for complex data structures can be challenging, but the authors propose an abstract notion of function implementation that simplifies this process. They describe a functor that constructs a partially ordered set with a widening operator for functions, providing termination guarantees.

This framework facilitates programming of fixpoint calculations on lattice structures and is extendable, as demonstrated by the incorporation of narrowing operators into the library. The theoretical result concerning termination criteria, addressed in Theorem 4.6, is underscored as a fundamental aspect of this research, confirming its importance to the authors' ongoing work.