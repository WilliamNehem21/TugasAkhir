Experimental transformation languages for text have spurred practical use of text-based transformation methods. Upcoming Query/View/Transformation (QVT) languages may standardize or offer exchange options for these experimental mediums. However, graphical transformation notations have not seen similar success. We point out the drawbacks of graphical methods and suggest enhancements to the UMLX notation and tools to improve their practicality and alignment with QVT.

Model transformations are advancing in terms of both practicality and rigor due to improved meta-model-based tools like ATL or TEFKAT. Yet, the proprietary nature of their transformation languages limits widespread adoption. The QVT standard, which encompasses three languages, may address compatibility issues by setting a standard or providing translation between different proprietary languages.

This paper explores the reasons behind the lesser success of graphical transformation notations and how to address their shortcomings. We assess the pros and cons of text and graphical notations and investigate why certain graphical notations thrive while others do not. We scrutinize a range of graphical transformation notations, highlighting their differences in formulating transformation rules, despite their common use of declarative patterns. We then present the improvements to UMLX tool support and notation intended to align more closely with QVT.

The scalability of text notations is generally good, with code management facilitated by using multiple files and hierarchical structures. Long lines are easily avoidable. Textual languages, however, struggle to maintain clarity when employed in a declarative manner, making it tough to track all instances of a concept, such as a variable.

Graphics, which naturally lack an imposed layout, are well-suited to the declarative display of interconnected concepts. Using symbols for nodes and lines for edges, it's straightforward to discern all relationships pertaining to a specific node.

In the revised QVT proposal, certain visual elements like class name underlines and line decorations were removed, differing slightly from the UML standard and reducing clarity about the nature of associations.

AGG chose a traditional graph transformation approach, also omitting underlines and line decorations, and substituting instance names with numbers.

GRE and its successor GREAT introduced multiplicity akin to UML, realizing that patterns could represent sets of objects, not just individual objects. GREAT showed multiplicity as an instance stereotype, indicating the absolute size of matched object sets.

UMLX evolved from GRE by replacing creation relationships with declarative preservation and evolution relationships, enriching the classic keep operation in graph theory and introducing a multi-directional relationship that maintains traceability.

UMLX's transformation tool enables design partitioning into separate diagram types. Meta-model diagrams maintain ecore meta-models, which are then instantiated within transformation rule diagrams where UMLX transformations are visualized. A transformation context diagram aggregates various UMLX or QVT rules as part of a QVT-compliant transformation.