The academic paper discusses the role of code similarity in various computer science applications, such as reverse engineering, clone detection, and malware analysis. Recognizing that code can change over time due to factors like evolution, compiler optimization, and obfuscation, the authors argue for the importance of identifying similarities in code beyond mere syntactic differences, focusing instead on the semantics.

To achieve this goal, the paper proposes a framework grounded in abstractions of control flow graphs (CFGs), which visually represent the flow of a program. By abstracting basic components called "basic blocks" in CFGs, the framework aims to compare program similarities based on both syntax and semantics.

The paper explores the use of Symbolic Finite Automata (SFAs) for abstracting the syntactic structure and semantic interpretation of programs. SFAs extend traditional finite state automata by modeling transitions as constraints within a boolean algebra, thereby allowing the capture of an infinite range of inputs.

The paper is structured into several sections. Section 2 reviews fundamental concepts, while Section 3 introduces a similarity analysis framework based on abstract interpretation of CFGs. Section 4 details the implementation of this framework and discusses the results obtained.

An algorithm is presented that extracts CFGs from execution traces, which is valuable for understanding the behavior of malicious or obfuscated code. The paper also describes an abstraction engine that abstracts the instructions in the basic blocks using typed symbolic variables, contributing to the independence from variable names and abstraction of constants.

Experiments in the paper indicate that searching for sub-graph isomorphisms reveals more similarities, particularly between variations of code due to obfuscation.

Ultimately, the proposed approach captures code similarities by abstracting the syntax and semantics of basic blocks, and by computing global similarities based on these abstractions. This method helps in identifying code similarities more effectively than traditional approaches that focus on syntax alone.

The paper concludes with references to prominent literature in the field, including Cousot and Cousot's work on abstract interpretation and Polino et al.'s research on automatic reverse engineering of binary datasets.