The software jGRASP version 1.8.7 incorporates three distinct but complementary methods for users to interact with visualizations of data structures: a debugging tool, a workshop environment, and a newly introduced text-based interaction panel that permits the execution of individual Java statements and the evaluation of expressions. Although each method operates independently, they can be utilized in conjunction to engage with the visual representations more fully.

Significant redesigns were made to the jGRASP visual debugger, workshop, and viewers to harmonize these interaction methods. During this redesign, the structure identifier—which detects and graphically represents common data structures—was considerably enhanced based on examples from 20 data structure textbooks. The outcome is a versatile user interaction system that benefits from a sophisticated structure identifier.

The most frequently used method to view data structures is through the debugger. Users set a breakpoint, run the program in debug mode, and upon reaching the breakpoint, they step through the code until the data structure is instantiated. Dragging the object from the debug tab into a viewer triggers the structure identifier to classify and display the data structure. As the user steps through the running program, the viewer updates to reflect changes in the structure.

Users can also interact with data structures in the workshop interface. Here, objects can be created and manipulated using a combination of menus, buttons, and dialog boxes within the Unified Modeling Language (UML) class diagram or source code editor windows. Actions taken on the objects, such as inserting a node, immediately update the visual representation.

Research has demonstrated that the manner and extent of interaction with software visualizations are crucial for their effectiveness. Active engagement with visualizations, including direct manipulation or responding to prompts, is more effective than purely passive observation. The context of the visualization is also an important factor in its impact. These considerations are now recognized as fundamental to the design of effective software visualizations and are reflected in the interaction capabilities of jGRASP through the use of its debugger, workshop tools, and direct execution of source code in the text-based interactions tab.