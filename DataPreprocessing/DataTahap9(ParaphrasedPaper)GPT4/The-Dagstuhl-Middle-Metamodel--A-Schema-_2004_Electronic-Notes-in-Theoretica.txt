The Dagstuhl Middle Metamodel (DMM) is a flexible framework for creating static representations of software systems. Positioned at a middle-level, it bridges the gap between lower-level models, like full abstract syntax graphs, and higher-level architectural concepts. DMM is versatile enough to model software built in many common object-oriented and procedural programming languages. This document outlines the key characteristics of DMM.

DMM has proven to be practically valuable, having been applied in various settings, such as an industrial reverse engineering scenario by Moise and Wong, and serving as the basis for online tools that convert C++ code into DMM formats using GXL. Multiple projects are also underway to extend DMM's capabilities and integrate it with other schemas.

Although DMM is not designed to encompass entire program structures like abstract syntax trees or to detail higher-level architecture components, such as pipes and filters, it focuses on middle-level abstraction. However, DMM remains open to extensions that might cater to these other levels of detail.

Users of DMM may choose to streamline their models by excluding non-critical source objects. For instance, rather than mapping every model object to a specific location in the source code, users can limit this mapping to top-level objects only, like classes. While this may limit some tools' ability to locate lower-level elements directly, any necessary searches can still be performed efficiently when needed.

One challenge addressed was how to log positions within blocks of source code text in the sourcepart class. Instead of using file-based character offsets, DMM uses a combination of line numbers and character offsets within lines to prevent issues arising from variable line lengths due to differing end-of-line conventions.

DMM achieves language agnosticism by generalizing constructs shared across different languages. Routines, functions, and subroutines, for instance, are treated similarly, with a method being a class-associated routine, and a class being a structured type with additional features like methods. While DMM acknowledges minor semantic differences among languages, it abstracts these distinctions to create a uniform model.

There have been suggestions to blur the lines further between methods and routines as well as between structured types and classes. However, DMM retains distinctions, like keeping methods separate from routines, as it is believed to aid comprehension of the model.

DMM's relational model allows for flexibility in representation and is not strictly enforced, which can accommodate variances in domain and range specifications. Its robust design aims to facilitate widespread tool compatibility without necessitating inconsistent variants. The collaboration among developers from different projects on DMM's creation supports its robustness, as evidenced by its adoption with minimal modification.

In summary, DMM is an adaptable and comprehensive schema that streamlines the representation of software models across a myriad of programming languages without delving into syntactic minutiae or architectural complexities, and without foreclosing the possibility of future extension and refinement.