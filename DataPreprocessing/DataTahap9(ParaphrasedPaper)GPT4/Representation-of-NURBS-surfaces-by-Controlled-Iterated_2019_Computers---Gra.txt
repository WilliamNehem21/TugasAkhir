Iterative processes inspired by fractal geometry are widely used for creating intricate virtual objects such as terrains, clouds, trees, and textures, often incorporating randomness to avoid exact repeats in patterns. Such algorithms are prevalent in computer graphics but less common in Computer-Aided Geometric Design (CAGD), despite the fact that the resulting shapes can have desirable qualities like textured surfaces to optimize heat exchange, porous structures that save material, or aesthetic appeal. This research aims to create a versatile iterative geometry modeling tool for industrial uses in additive manufacturing. One objective is to design lightweight objects with strong mechanical properties as a solution for energy efficiency, which is vital for industries. We propose the use of multi-scale controlled lacunary (incomplete or gapped) structures to achieve this goal.

However, our current CAGD-modeler based on CIFS (Context Iterated Function Systems) does not support NURBS (Non-Uniform Rational B-Splines), and addressing this gap is the main focus of our paper. We demonstrate that NURBS tensor-surfaces of any degree can be modeled with CIFS automata, making them compatible with our iterative modeler. We also discuss the potential for new applications following this integration.

In Section 3 of the paper, we introduce the necessary notations and mathematical foundations. We bridge two distinct fields of study: IFS (Iterated Function Systems) and its extension, CIFS, and on the other hand, NURBS and their blossoming representation. Our work intersects these two fields.

To model free-form shapes with CIFS, we construct attractors in barycentric space and then project them into the modeling space using a set of control points, represented by the equation F= PA, where P=[P0 P1... Pk].

B-splines are a convenient method for creating smooth parametric curves. An nth degree B-spline curve 'C' arises from a control polygon of 'n+1' points, P=[P0... Pn].

We prove that NURBS of any degree can be modeled by a CIFS-automaton. The number of states in the automaton directly correlates with the degree of the NURBS. Initially, we present cases of quadratic and cubic NURBS, followed by a general extension to any degree, supported by mathematical proof involving generative grammar rules.

Upon constructing tensor automata from varying degrees of curve automata, certain properties emerge. Once a state is exited, it's impossible to return to; curves automata have exactly three stationary states (left, right, and uniform), with others being transitory. For tensor automata, the count of stationary states is the product of the stationary states of the constituent automata, leading to 3 states for curves, 9 for surfaces, and 27 for volumes. Despite the quantity, there is always a single "uniform" state that loops upon itself for every transformation. This state generates uniform B-spline shapes (curves, surfaces, volumes).

While integrating low-degree NURBS is relatively straightforward, high-degree integration is more complex. Higher-degree surfaces need to consider a central vertex or face surrounded by multiple nested rings of vertices, leading to combinatorially numerous irregularity possibilities. The approach by Cashman et al. for odd-degree surfaces must be carefully analyzed to provide a solution for this complexity.

The paper outlines a system for matching subwords within generated sequences, ensuring a subsequence of length 2n within a larger sequence such that it either directly matches or can be modified by deleting specific elements to match another subsequence. This construction leads to a subword that is part of the original sequence, with each subword being directly associated with the desired outcome.