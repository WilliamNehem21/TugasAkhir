The academic paper discusses the growing importance of ensuring consistency in UML (Unified Modeling Language) models, especially as the use of UML expands. The writers advocate for tools that can verify UML model consistency, and they emphasize the benefit of such tools to support the Model-Driven Architecture (MDA) approach. These tools can help detect and correct errors during the early stages of software development, leading to lower costs and faster market delivery.

The paper describes how UML models are subject to various rules based on methodology, application domain, and target programming languages, which can be automated and specified using OCL (Object Constraint Language). As the only official textual formalism integrated with UML since its inception, OCL enhances UML diagrams by providing precise definitions of both static and user model semantics.

Although there are numerous UML tools available, each with its own checking mechanisms, the paper highlights the flexibility of those supporting scripting languages, like Rational Rose and Together. Despite this, there are drawbacks, such as the difficulty of grouping and reusing specifications for rules. The paper also notes that some inconsistencies in UML models are hard to detect with current CASE tools, but users must be aware of them to mitigate potential issues.

The Kent Modeling Framework (KMF) is mentioned as a tool supporting model-driven software development, but its current prototype status and accompanying small examples limit its practicality for checking real-world models. Moreover, the provided reports on model well-formedness are not helpful for identifying the reasons behind rule violations.

The paper also assesses USE, another UML tool, which only partially implements the UML metamodel and has limitations in model transfer due to its proprietary format. Despite these limitations, OCL has proven to be supportive in consistency checks across different tools, managing unique tool characteristics and uncovering various types of inconsistencies that other methods fail to identify.

Finally, the paper identifies deficiencies within the UML standard itself, such as the unclear rules around naming model elements. It suggests the need for clearer guidelines on allowed names and elements that can remain unnamed. The authors demonstrate through practical experiments that OCL can effectively check the well-formedness of real-life UML models and argue that OCL's usefulness should establish it as an industry standard.