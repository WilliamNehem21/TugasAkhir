The traditional approach to researching software quality relied on confidential internal studies or external reviews utilizing opaque methods. Open source software (OSS) has transformed this by enabling transparent assessment of both products and development processes. Source code, version control, bug tracking, mailing lists, and wikis from OSS projects provide a wealth of data for scrutiny. The diversity of OSS projects within the same domain also enables comparative quality analyses. Additionally, correlating code evolution with key events like bug reports and patches offers insights into underlying issues.

The paper describes examples, tools, and techniques for assessing the quality of OSS and potentially proprietary software. Various OSS tools examine code quality by addressing different aspects. Tools like PMD identify potential bugs, FindBugs finds Java bugs via static analysis, and CheckStyle checks Java coding styles. Sonar integrates multiple code measurement tools, adhering to the ISO/IEC 9126 quality model.

The authors discuss a specific system, the Cruncher, part of the Alitheia platform, which can replace components without system-wide disruption due to its OSGI framework compatibility. The Cruncher core is an OSGI module with multiple roles, designed as a monolithic unit for easier testing and performance. The connection layer facilitates web services. Metric plugins benefit from OSGI by allowing for extendibility and updates.

Once activated, plugins request services from the Cruncher core, which offers data via a 'thin' or 'fat' service layer, with the latter recommended for its processed, cached data. The system adjusts its performance based on the importance of response time for the metric being calculated.

The paper also explores the alignment of open source practices with agile development methods. An 'mean developer engagement' (MDE) metric is introduced to quantify OSS project agility, tested on KDE and SourceForge projects. It challenges the null hypothesis that projects from both sources exhibit similar agility.

A tool called CLMT is presented, which processes XML descriptions of metrics tasks and outputs results in text or XML format. The authors also examined scale-free networks within large OSS systems by analyzing module dependencies and creating directed graphs to understand module interconnections.

Finally, the paper emphasizes that SQO-OSS isnâ€™t just another metrics system; it's a versatile platform for developing and deploying metrics across projects of any scale. Plans include evolving SQO-OSS to serve as a repository for OSS research.