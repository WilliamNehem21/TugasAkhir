This academic paper advocates for a comprehensive approach to modeling embedded systems by analyzing various aspects of a system in isolation to manage complexity. However, these isolated aspects often interact during integration in ways that can make the desired system unachievable. To address this issue, the paper proposes the use of integrated models with different concerns based on formal methods, supported by tools. CREOL, a language designed for object-oriented modeling of distributed systems, is employed in this approach.

The ongoing work focuses on designing and implementing tools that facilitate modeling, validation, and verification of sensor networks, which are distributed systems consisting of numerous embedded devices with strict limitations on computational power, energy, and timeliness. The tools in development include a compiler for static checks and optimizations, an interpreter that defines formal semantics, and a prototypical model checker for Linear Temporal Logic (LTL).

Object-oriented programming is recommended by RM-ODP as the leading paradigm for concurrent and distributed systems, and model-driven engineering is gaining traction thanks to the maturation of modeling languages and tools. As a result, ad-hoc system models are being enhanced with formalisms like SysML or other architecture description languages.

The paper highlights the importance of considering both local and global aspects such as functionality, timeliness, power consumption, and memory use when modeling embedded systems. It discusses efforts to integrate timing aspects into the language and provide analysis for these aspects.

The complexity of reasoning about multithreaded programs with synchronous method calls is addressed, along with the challenges of potential deadlocks and undesired waiting. CREOL's non-blocking (asynchronous) message passing is suggested as a solution, offering better control without sacrificing the structure and discipline of method calls.

In CREOL, classes are the primary structuring mechanism, supporting multiple inheritance and using interfaces to regulate method accessibility. The paper emphasizes the use of a functional expression language to ensure side-effect-free evaluation of expressions.

To support CREOL model development, a compiler translates models into a runtime syntax used by an interpreter formulated in Maude. This setup allows for simulation or analysis in Maude, including the use of standard data flow analysis to manage resources efficiently and optimize garbage collection.

State-space exploration using Maude's model checker allows verification of LTL properties of CREOL models. However, models in CREOL describe infinite state systems with significant state space, necessitating adaptations for model checking and the introduction of abstractions to reduce the state space.

Partial order reduction techniques and formal automata models are discussed as ways to analyze the properties of communication media and advanced wireless sensor network algorithms. The paper also compares CREOL with another language, KOOL, noting the differences in inheritance and communication.

The holistic approach is realized through the use of a single formalism for modeling all aspects, with composition mechanisms like multiple inheritance integrating different functional aspects. The paper concludes with a reflection on the use of the tools in the CREDO project, recognizing some shortcomings and areas for improvement in interpretation, model checking, and the need to make state space reduction techniques more accessible.

Overall, the paper presents an integrated tool-supported approach that leverages formal methods and language features to tackle the complexity of modeling and verifying distributed embedded systems, with a particular emphasis on sensor networks.