Remark 2.10 indicates that by using the operations previously discussed, it's possible to create systems with intricate geometries. For practical sketching purposes, it is not necessary to adhere strictly to the convention of placing all input and output interfaces on the respective left or right sides of components; they can be differentiated by the direction of arrows instead. However, it's acknowledged that one could rearrange the system to conform to the left/right convention. When an interface cannot be clearly classified as either input or output, arrows are omitted.

Describing discrete-time systems, the paper discusses their geometric nature and aims to illustrate their descriptive power using simple examples. In these examples, initial and final states are straightforward, evident from the single actions considered. While single transitions represent a particular case of actions, it's more accurate to refer to these actions as not-necessarily-atomic because some actions may not be atomic at all.

An approach to desynchronizing a system is also presented, where each transition in a system's component automaton is replaced by a three-stage action. This replacement allows for synchronization with arbitrary durations rather than a fixed duration. The dining philosopher problem serves as an example of this desynchronization process, highlighting that when dividing a philosopher's and fork's actions into a "begin" and "end," it permits variable durations for actions such as taking a fork, allowing for simultaneous, overlapping actions among philosophers.

The paper discusses the concept of "tomata" as a structured geometric representation with three levels of abstraction and a robust algebra for automata composition. Timed automata, in contrast, offer a lower-level representation. While translations to timed automata from structured representations like the real-time process algebra ATP exist, the differences are notable. For instance, an automatic controller for a railroad crossing gate is simpler to understand in the structured automata model, where system components are more transparently represented than in the timed automaton model, where visualizing component interactions is less straightforward.

In the paper's model, specifications and system descriptions are kept distinct from implementations, as evidenced by a subcomponent counter in the train model, which helps detect errors if the train does not pass through the gate in the allotted time, thus allowing for corrective actions.