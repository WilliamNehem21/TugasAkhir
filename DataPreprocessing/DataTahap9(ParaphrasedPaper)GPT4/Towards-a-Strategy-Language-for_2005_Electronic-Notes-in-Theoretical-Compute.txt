This paper introduces and explores a proposed strategy language for the Maude system, with an emphasis on controlling the rewriting process at the object level as opposed to manipulating it at the metalevel, which can be more complex and less user-friendly. The authors developed a prototype based on Full Maude, taking advantage of Maude's existing metalevel capabilities.

The proposed language relies on a clear separation between rewrite rules and strategy expressions. System modules at the object level contain no strategy expressions, which are instead defined within separate strategy modules. These strategy modules can be applied to system modules, guiding the rewriting process. The strategy expressions are designed to control the application of rules, their substitutions, and the search expressions for checking conditions of rules.

The language includes constructs like `l[s]{b1... bn}`, a basic strategy expression that applies a rule 'l' within a given state, substituting variables according to 's', and utilizing 'b1, ..., bn' as search expressions. The paper also discusses controls for applying strategies to specific subterms of a state and ways to achieve recursion within strategy expressions.

The authors discuss various constructs for matching and applying rules and strategies, such as `matchrew` for matching at the top level, and user-defined recursion to create complex strategy expressions. Success and failure of strategies are also represented in terms of the transformations they perform on terms.

The prototype includes a set of functions and modules to manage input/output, a user interface extension for Full Maude, and mechanisms for traversing the computation tree to find successful paths based on the given strategies. Examples, like a number game involving arithmetic means and strategies for map operations, are provided to illustrate the functionality and usage of the strategy language.

Although the prototype already has numerous features, the authors acknowledge that there is much more development needed, including implementing capabilities like breadth-first search and depth bounds, and validating the proposal through additional examples. Future enhancements to the language design could include introducing new combinators, parameterized strategy identifiers, and advanced constructs for composing generic traversals.

In summary, the paper offers a foundational framework for a strategy language in Maude that operates at the object level, simplifies user interaction with the rewriting process, and opens up possibilities for further enhancements and more effective control of computational logic.