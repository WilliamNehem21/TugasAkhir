The paper presents a methodology to help better understand Event-B models through hierarchical visual representations. Event-B is a modeling approach that defines global properties of a system using invariants and ensures these properties remain intact through invariant-preserving proofs. However, after an event is executed in the system, it's not immediately clear which other events may become enabled or disabled, a challenge typically addressed through animations, scenario analysis, and examining state transition graphs.

Current visualization techniques, like those generated by the ProB animator, offer flat, non-hierarchical views making it challenging to simplify complex state spaces. Hierarchical state transition diagrams have been recognized as more effective for managing such complexity.

The proposed solution—Hierarchical Abstract State Transition Machine (HASTM)—organizes the system state space into a tree hierarchy (state space partition tree), where the root represents all valid system states. Each transition within HASTM maintains the same action as corresponding events in the original Event-B model. However, separate HASTM representations are needed for each refinement level in the Event-B model, with no direct links between these hierarchical depictions.

The paper outlines how to develop a primitive HASTM from an existing Event-B model by starting with a simplistic HASTM and enhancing its precision iteratively through partitioning and transition strengthening. The authors suggest partition refining until it hits an obstacle or achieves a fundamental abstract state.

When encountering transitions that cannot be readily partitioned, there are two options: leave them as is or split them to fit the hierarchy. This recursive partitioning should emphasize maximization of event amenability to the partitioning predicate, thereby strengthening pre-state conditions without increasing the transition count.

Lastly, the paper notes that much research has focused on creating formal B models from visual specifications, such as UML diagrams. The work at hand reverses this approach by starting with an Event-B model and creating various hierarchical visual representations to delineate different system behaviors.