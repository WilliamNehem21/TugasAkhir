This paper discusses modeling a portion of a banking system using PVS (Prototype Verification System). It outlines establishing a theory called 'bankingsystem,' which includes abstract types for banks and persons, along with a structured type for accounts. Abstract or "uninterpreted" types are flexible in their implementation, unlike concrete types such as integers, which have fixed properties.

Within PVS, it is possible to define function types, which may represent relations or actual operations. The paper describes two varieties of function declarations: one simply states the types associated with the function's input and output, such as the function linking each bank to its accounts. The other not only names the function but also defines its behavior, embodied by the withdraw function that calculates a new balance for an account after withdrawal.

The 'balance(acc)' term retrieves the balance of a given account, while the 'with' keyword is used to create a modified version of an account with an adjusted balance. Likewise, a deposit or credit operation can be defined using a similar approach.

Additionally, the paper discusses the visualization of the banking system as an object model, where subset relations are expressed with arrows, and particular arrow styles denote whether subsets are disjoint or collectively exhaustive with respect to their superset. In such models, every element of the superset is part of exactly one subset, creating a partition.

The text proceeds to discuss properties of valid views, which ensure consistent mapping between model elements and associated mappings or interpretations. There is an emphasis on maintaining a unique and valid mapping for each distinct name in a model, which helps prevent ambiguities when comparing models.

The paper provides a proof for a theorem about modifying views, specifically the addition of an item to a view. It asserts that the addition must satisfy certain syntactic and semantic conditions to ensure the consistency and validity of the views across model comparisons.

Lastly, the paper clarifies the process for managing views and alphabets, mentioning that altering views requires syntactic rules, while modifying alphabets also demands semantic conditions to ensure that added names have consistent values across different models.