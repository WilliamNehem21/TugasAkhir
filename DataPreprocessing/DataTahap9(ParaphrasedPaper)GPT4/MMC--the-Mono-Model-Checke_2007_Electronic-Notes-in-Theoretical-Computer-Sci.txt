The paper describes the Mono Model Checker (MMC), a tool for verifying CIL bytecode programs, developed on the Mono platform. MMC checks for deadlocks and assertion violations and is influenced by Java Pathfinder (JPF), a similar tool for Java. MMC's performance is on par with JPF. The paper showcases MMC's architecture, acknowledging its design is heavily based on JPF, and it doesn't claim significant novelty aside from providing a checker for CIL bytecode.

The paper goes into the context of .NET and the Mono project, describing key MMC components and exploring its design and implementation. MMC checks for deadlocks and assertion violations during state exploration. Deadlocks occur when no processes can run, and assertions are conditions that must always hold true.

MMC's design includes Instruction Executors (IEs) for each CIL instruction, following the command design pattern, which allows easy addition of new instructions and associated metadata without altering existing code. Transitions in MMC consist of 'safe' instructions (not affecting other threads) combined with one 'unsafe' instruction (potentially influencing other threads). This merging is a form of partial order reduction, similar to "statement merging" in SPIN.

MMC suffers from state explosion, where both the number of states and the size of individual states can become very large. To mitigate this, MMC employs recursive indexing for state storage reduction, a technique used by both SPIN and JPF. MMC's architecture includes a heap for dynamic allocations, classes for static fields, and a thread pool for running concurrent processes.

Preliminary experiments on C# programs and their Java translations (checked with JPF) were performed to assess MMC's performance, using a standard dining philosophers problem as a test case. The results, conducted on an AMD Thunderbird system with 768MB of RAM running Linux, are only briefly discussed.

The paper concludes by stating MMC's design is clear, readable, and extensible, making it a valuable tool in academic settings for experimenting with different implementation strategies.