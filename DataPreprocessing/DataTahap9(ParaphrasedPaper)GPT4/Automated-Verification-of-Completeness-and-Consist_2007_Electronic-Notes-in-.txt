The paper discusses the significance of consistency and completeness in embedded system specifications. Completeness is when the specification provides an output for every potential input, whereas consistency means the specification doesn't contain contradictions or non-deterministic behaviors. Section 3 provides formal definitions of these concepts applied to Abstract State Machine (ASM) specifications.

Traditionally, the verification of these properties was manual, a process typically repeated due to specification evolution during the lifecycle of engineering projects. The research proposes an approach that automates verification independent of the language, by translating specifications to propositional logic, framing the verification as Boolean satisfiability problems (SAT), and using general SAT solvers.

In the ASM community, various ASM language derivatives such as the ASM Workbench and ASML have been developed, and mappings to finite state machines have been proposed for purposes like model checking and test case generation. This paper proposes a mapping that focuses on relationships between rule guards within a single machine rather than computing a global reachability graph, therefore restricting the state space.

Even though the SAT problem is NP-complete, SAT solvers have been efficient for various automated analyses and have similarities to model checkers in benefits (automation of verification and counterexample generation) and drawbacks (potential state space explosion).

Rule application in ASM languages forms update sets that modify the environment atomically. For real-time systems specification and analysis, the TASM language extends ASM by incorporating nonfunctional properties such as execution time and resource consumption.

The paper defines completeness informally for the TASM language as the presence of an enabled rule for each possible combination of monitored variables. Formally, this translates to all rule guards collectively forming a tautology, which can be recast as a SAT problem, enabling counterexample generation when the specification is not complete.

Consistency is informally defined as a state-based specification not having multiple enabled transitions at the same time. TASM defines it as no rules being enabled concurrently. Consistency problems can be formed into SAT problems, allowing counterexamples if the specification lacks consistency.

TASM, as an ASM subset, includes integer, boolean, and user-defined types, but excludes some constructs like the 'choose' construct. Translating TASM rules to SAT involves mapping rule guards to boolean propositions in CNF.

The paper describes translating integer constraints to user-defined types before converting them to boolean formulas, stating that more complex constraints will be addressed in the future. Where significant integer constraints exist, the paper suggests that using Mixed Integer Programming (MIP) solvers may be better, with further investigation in this area marked for future work.

The approach of using a SAT solver for automated verification contrasts with previous language-specific algorithms. Preliminary results suggest that the translation algorithm might be a bottleneck and could benefit from further optimization. Ensuring the feasibility of using SAT solvers for large, real-time system specifications needs addressing potential exponential growth in proposition numbers. Future work will delve into optimizing and thoroughly analyzing the time complexity of the translation algorithm.