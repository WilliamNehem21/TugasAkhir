The Maude LTL model checker provides real-time explicit-state model checking of concurrent systems formulated as rewrite theories, offering performance on par with other existing tools, such as SPIN. This broadens the scope of systems that can be analyzed using model checking, extending beyond typical domains like hardware and communication protocols to new fields such as computational biology models and advanced reflective distributed systems.

Additionally, the Maude LTL checker has the unique ability to model check within systems that manage data types of infinite cardinality, including numbers, lists, and multisets that can grow without bound – encompassing all algebraic data types – provided the subset of states accessible from any initial state is finite. While this paper does not delve into it due to space constraints, Maude also supports potentially infinite-state system analysis for safety properties, using its search function to look for counterexamples.

The paper follows a structured outline, starting with the semantic framework for Linear Temporal Logic applied to rewrite theories, presented in section 2. It progresses to detail the LTL model checker’s functionality in section 3, then discusses tools for checking satisfiability and for identifying tautologies in section 4. The algorithms and technical execution of the checker are explored in section 5. Section 6 offers a comparative analysis of the Maude checker against SPIN in terms of performance, while the final section, section 7, concludes the study.

It explains how state predicates are defined using constants and operators in a given sort 'prop', which is a subgroup of the sort 'formula' for LTL formulas. These predicates can be parameter-free constants or parameterized by operator inputs from the sorts of their parameters to the prop sort.

The paper includes an appendix that models the syntax and semantics of a simple parallel programming language, with constructs demonstrating termination behavior in one case and potentially non-terminating behavior in another. Fairness is discussed within the context of strongly connected components (SCCs) in the model checking process, explaining a method for the elimination of dead SCCs and non-critical fairness information.

Performance comparison between Maude and SPIN was made by specifying the same system in both of their respective languages, followed by comparing the runtime and memory usage of each tool on these specifications. Tests conducted with both model checkers primarily considered properties that held true, avoiding counterexample generation—this approach avoids biases arising from differing search strategies and focuses on model checking speeds as the metric.

The testing was carried out on a 1.13 GHz Pentium III machine with 384 MB RAM, running Red Hat Linux version 7.3. In most test cases, the limiting factor for scalability was memory availability rather than processing time, as both checkers performed promptly when sufficient memory was accessible. The memory benchmarks reported total memory usage, including the code's footprint.