Game playing has historically been a foundational aspect of artificial intelligence research, starting with classic board games like chess. More recent investigations have expanded to include complex multi-agent games that aim to replicate human behavior. 

Contemporary first-person shooter (FPS) games now frequently include sophisticated AI capabilities. For instance, "Half-Life" provides a bot toolkit that utilizes C++ programming language. There are entertainment games that consist entirely of programmable bots without human players; "AI Wars" is one such game that combines unique commands with general programming constructs. The "Robocode" project features robotic tanks that are programmed using Java.

The GameBots project has been influential in AI education and research, offering a versatile testing ground for multi-agent systems through an extension of the "Unreal Tournament" game engine. GameBots stands out because it doesn't impose specific benchmark tasks and offers a variety of tasks and environments that can be customized with UnrealScript, a C++-like scripting language. This setup allows bots to interact with the game server across different programming languages, demonstrated by examples in Java and Soar.

Our research follows the same open-ended design as GameBots but takes a broader approach, enabling the creation of any type of game without constraints. The GameBots project allows for game extension and creation with UnrealScript, but its capabilities are somewhat restricted, and understanding the game rules requires knowledge of the scripting language, which isn't ideal for formal specifications. We propose using abstract state machines, offering a more elegant solution with clear semantics for rule definition.

Our system involves creating a dynamic agent from a module to execute transition rules, with the exception of the main module, which automatically defines an agent. Agents execute transition rules and interpret the function name 'self' as the current agent. We also introduce a "loop action," where the action's transition rule is executed repeatedly until a return command is issued. 

We've built a framework which is discussed in detail later in our paper that simulates a multi-agent artificial intelligence game and examines the interactions between its various components. It's important to show the connection between these components in order to understand the framework fully. In our framework, when multiple bots run the same code, their behaviors are identical.

To illustrate, we present a simplified multi-agent AI game example: the snake game. Here, user bots can indirectly control snake movements by changing their direction. If two snakes behave identitatively, they may be managed by user bots running identical code. Order of execution is vital for visual representation, especially for creating animations.

Different internal bots may move the snakes, and when all bots excluding the display agent and user bots move them, execution proceeds non-deterministically, with agents selected, activated, and deactivated in sequence. Separating game rules from scheduling policy can lead to clearer specifications and ease the proving of scheduling-related properties. 

Moreover, internal bots handle the snake movements, while competitors create user bots to decide movement direction. A main module then generates instances of the user bots. Function specific details explain how derived functions and actions are defined, such as the getlength function returning the length of a snake.

User bots access their respective agents through the function 'self', but cannot interact with other agents. Only the main module permits such interactions, ensuring user bots only influence their corresponding internal bot's movement direction. Through the action 'login', user bots create a new internal bot, which is associated with a new snake and its information descriptor.

Logic languages like Prolog are typically used to define artificial intelligence games, although efficiency issues with resulting code can limit their use in visually animated games.

The framework aims to foster competition among students writing bot programs, encouraging advanced AI techniques application and formal specification methods learning, like abstract state machines, through competition-fueled motivation.