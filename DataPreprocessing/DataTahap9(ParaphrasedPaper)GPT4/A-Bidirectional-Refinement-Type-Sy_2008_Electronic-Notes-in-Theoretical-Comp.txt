In this paper, we introduce a system of refinement types tailored for logical frameworks (LF) that only consider canonical forms as well-typed, in line with recent approaches. Using bidirectional rules for both standard LF typing and refinement type rules, we demonstrate an uncomplicated proof of type-checking decidability that even incorporates intersection types. By focusing on canonical forms, we can derive structural subtyping rules rather than assume them as foundational. Our system's capacity to represent complex ideas is showcased through various examples related to logic and programming languages.

Since its inception, LF has become a key tool for formalizing various deductive systems and has more recently been employed to mechanize the meta-theory of intricate programming languages in its twelf metalogic form.

The paper continues by detailing our system of refinement types alongside numerous examples (Section 2). We examine its meta-theory and offer proof outlines for key findings like decidability (Section 3). We restrict subtyping to atomic types, but our system inherently includes subtyping at higher levels, as demonstrated by proving the typical declarative rules are sound and complete with respect to an intrinsic notion of subtyping (Section 4). We then consider related work (Section 5) and summarize our findings (Section 6).

Moreover, we address the challenges caused by non-determinism in type checking for intersection types, which has been shown to be PSACE-hard. We propose using techniques such as focusing to practically and efficiently handle such scenarios.

As a conclusive example, we revise the calculus of constructions by applying our system to reduce redundancy and oversimplification, achieving a more stratified and concise expression of typing rules.

In our meta-theory discussion, we follow patterns established by previous work that includes hereditary substitutions. Space constraints lead us to omit repetitive proofs, instead providing abridged versions of new results. For those interested in detailed proofs, we direct them to an accompanying technical report containing exhaustive proofs of all theorems.