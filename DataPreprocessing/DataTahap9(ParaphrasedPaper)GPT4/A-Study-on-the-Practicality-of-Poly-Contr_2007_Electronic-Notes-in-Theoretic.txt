The main goal of partial evaluation (PE) is to optimize programs by specializing them based on a portion of their input known as static data. The effectiveness of the generated specialized code heavily relies on the chosen control strategy. Unfortunately, optimal control strategies applicable to every program are not yet a reality. Poly-Controlled Partial Evaluation (PCPE) approaches this issue by utilizing a mixture of global and local control rules, which can differ for various call patterns or atoms, unlike traditional PE methods that use fixed rule combinations. This approach tailors the specialization more closely to individual program elements, achieving performance that traditional methods can't.

PCPE is more user-friendly since standard partial evaluators overwhelm users, especially beginners, with numerous control strategies and parameters to tune for optimal results. By contrast, PCPE allows users to experiment with various parameter combinations more effectively to reach the desired performance, such as reducing code size or execution time.

Moreover, PCPE employs an abstraction operator that ensures the finitude of atoms generated by replacing specific atoms with general ones to prevent infinite loops in programs, thereby guaranteeing termination.

Traditional algorithms lock in a single strategy for all atoms, which is often suboptimal. PCPE, instead, opens possibilities for employing diverse strategies for each atom, but current algorithms haven't supported this flexibility. PCPE fills this gap by allowing different strategies for different atoms.

The control in PCPE also ensures that code is consistently generated for a finite set of independent atoms, avoiding redundant solutions.

Rather than preselecting a control strategy for each atom, PCPE generates various candidate specialized programs and chooses the best after evaluation, which is more resource-intensive but leads to better-informed decisions.

An experiment with PCPE utilizing homeomorphic embedding and other global and local control rules demonstrated how different rules affected program optimization for execution time. PCPE successfully created diverse solutions, some traditional and others hybrid (employing varied strategies for different atoms). Further experiments suggested that careful pruning of the search space is needed to maintain practicality without excluding the best solutions.

Lastly, in cases where programs are already compact, PCPE might not drastically reduce size further, yet it can still offer improvements through hybrid solutions. Overall, preliminary results with PCPE are promising, indicating its capability to generate a range of solutions superior to what is possible with traditional PE.