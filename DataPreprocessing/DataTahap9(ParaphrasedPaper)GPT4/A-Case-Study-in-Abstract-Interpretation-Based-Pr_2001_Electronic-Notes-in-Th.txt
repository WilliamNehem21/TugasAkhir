The paper details how static program analysis is fundamentally connected to program transformation, as initial analyses of the program are required to gather insights into potential runtime behaviors. This information is critical for determining which offline transformations should be applied. Abstract interpretation, a well-established method for static analysis, serves as a theoretical foundation for this process and provides a novel method for constructing program transformations on a formal level.

Abstract interpretation is proposed as a formal technique to design source-level program transformations by generalizing changes made to the semantics of the program. Using abstract interpretation in this way establishes a formal link between changes in program semantics and corresponding syntactic changes. The end goal of this approach is to enable the creation of correct program transformation tools that can hopefully be constructed mechanically and to bring systematic practices to their design.

One particular example given in the paper for such a program transformation is the elimination of 'blocking code,' which refers to the removal of commands that cause a program to block its execution, with the exception of explicit 'stop' commands. The paper describes the development of a final iterative algorithm for this purpose, which is straightforward but serves as a suitable case study for demonstrating the process of using abstract interpretation to design correct program transformations. Despite its simplicity, it illustrates how iterative processes in abstract interpretation are derived from the fixed-point definitions of trace semantics.

The paper also argues that including undesired semantically blocking commands could be viewed as poor program design, indicating the need for a removal function or algorithm to eliminate such commands. Moreover, the authors note that while initial static program analysis can identify a wide range of blocking actions by considering variable values, such as through constant propagation analysis, they have chosen not to delve into more sophisticated offline transformations in this instance. Instead, they focus on presenting the simplest variant to clarify the paper's core idea.