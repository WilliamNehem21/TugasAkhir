In the field of logic, bunched logic is interpreted in terms of resources, where 'additives' reflect conventional propositional logic, and 'multiplicatives' represent how resources are combined. This framework has been particularly beneficial in computer science for creating logics that help analyze programs. The most prominent example is separation logic, which interprets resources as segments of a computer's heap memory. Separation logic has led to multiple applications that can analyze and understand heap memory structure dynamically during program execution, with notable recent instances referenced in the paper. Furthermore, bunched logic has been applied to various other computational challenges, including issues related to polymorphism, tree modification, and the management of typed references and resources.