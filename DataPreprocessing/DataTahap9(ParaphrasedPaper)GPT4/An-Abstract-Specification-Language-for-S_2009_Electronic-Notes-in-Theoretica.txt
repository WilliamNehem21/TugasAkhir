This paper discusses limitations in conventional static program analyzers, which often include fixed checks with limited scope for users to add or customize checks. In response, the authors introduce a novel, flexible methodology, dubbed GPSL/GXSL, for defining new control flow-based checks in a succinct fashion. GPSL/GXSL leverages a CTL-inspired approach coupled with XPath queries to articulate these checks.

Goanna, the authors' tool that incorporates GPSL/GXSL, performs static analysis on C/C++ code using control flow graphs (CFGs) annotated with specific code semantics (e.g., memory operations). Goanna extends traditional CTL with the ability to quantify CTL expressions across code syntax (like variables and loops), elevating its analytical capabilities.

The GPSL part of the language aims to serve end-users by offering common checking patterns and a large library of predefined objects, thus facilitating the definition of new checks. GXSL, serving as a more advanced extension of XPath, allows the integration of variables and functions, empowering users to tailor queries to the specific program elements under examination.

Comparisons are made with other approaches like Metal, a state-based checking language, and MyGCC's Condate, which is less powerful but shares some declarative aspects with GPSL/GXSL. The paper also differentiates from PQL, which combines static queries with dynamic monitoring.

The authors detail the design and functionality of the GPSL/GXSL languages, share their experiences from real-world implementation, and demonstrate that GPSL/GXSL can be as effective, if not more so, than hardcoded checks due to efficiencies like caching.

In summary, the paper proposes a user-defined check specification approach that integrates into the Goanna tool, streamlining the way static analysis is performed, but also stands independently applicable to any programming language analysis.