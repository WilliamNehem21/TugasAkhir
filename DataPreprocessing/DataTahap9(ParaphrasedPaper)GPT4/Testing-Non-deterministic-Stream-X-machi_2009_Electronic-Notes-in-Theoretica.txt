The Stream X-Machine (SXM) is a variant of the traditional Finite State Machine (FSM) used to define a system by its finite number of states and the transitions between these states. What sets SXM apart is the inclusion of an internal storage, or memory, which can be accessed and modified during transitions. Transitions within an SXM are initiated by an input, generate an output, and can manipulate the memory. The transition diagram for an SXM consists of a finite automaton, known as an associated automaton, where the paths are marked with names of relations which are called processing relations. These SXMs are subject to specific conditions that facilitate testing.

This paper delves into the foundational theory behind the Non-deterministic SXM (NSXM) integration testing method. It discusses producing a test suite from an NSXM specification on the premise that system components—specifically the processing relations—are implemented accurately. The Integration Under Test (IUT) is taken to be an NSXM that shares the processing relations of the specification. This discussion modifies existing academic presentations to align with other research in the domain but retains the core insights.

Given that C represents a set of non-deterministic SXMs compatible with a certain criterion Z, and assuming the processing relations are correctly executed, the method focuses on the integration of these relations. Their implementation correctness is verified through other testing systems outlined elsewhere.

However, since the method cannot presume the correctness of the processing relations, they must be tested for implementation as well as integration. Thus, the test suite should be comprised of two parts: one for integration testing and another to examine the processing relations, referred to as a relation test set.

Additionally, the paper explains how Theorems 4.8 or Corollary 4.9 and Theorem 2.3 can be employed to produce test suites that conform to a P system specification. It describes a technique for constructing an SXM from a P system and illustrates using a predefined derivation tree.

The model presented demonstrates how an SXM can represent a P system and how the NSXM testing method can create conformance test sets for that P system. Future research will explore different ways to derive SXM models from P systems and examine the application of NSXM testing to P systems, focusing on designing P systems that satisfy the required testing conditions.