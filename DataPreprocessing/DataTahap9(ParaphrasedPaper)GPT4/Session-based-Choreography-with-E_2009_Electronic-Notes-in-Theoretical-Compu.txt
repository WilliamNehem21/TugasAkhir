A new approach to programming communication in distributed systems centers on choreography, which focuses on providing a global description of the system rather than detailing individual peer behaviors. This global view simplifies the design process by clearly defining communication patterns between participants without worrying about implementation details at each endpoint. Choreography allows for a more straightforward understanding of overall system interactions and supports an automated process for generating endpoint-specific code, known as endpoint projection.

Modern programming languages commonly use exceptions to handle irregularities that disrupt the normal execution flow, but in the context of communication-centered programming, exceptions must be managed differently. Interactions among multiple participants need to be coordinated when an unexpected interruption occurs; these are called interactional exceptions.

The paper presents a simple financial protocol as an example where a buyer and seller engage in a transaction involving price quotes. Utilizing interactional exceptions, both buyer and seller can seamlessly transition to an exceptional stage of the protocol to complete the transaction when the buyer accepts a quote. The protocol demonstrates how the global description includes this mechanism for exceptions, highlighting how it can effectively manage the flow of interactions.

Choreography uses well-threadedness, where thread annotations in the global description indicate which actions belong to the same process. Thread projection and coherence involve generating the endpoint behavior from these global descriptions. Sometimes, threads are involved in multiple nested handlers, which requires merging them to ensure that the projected endpoint behavior can handle all relevant operations.

The authors introduce the concept of exceptions at the choreography level by extending the syntax of a global calculus with an exception mechanism, providing formal semantics. This enables choreography to become a tool for designing endpoint behaviors, where raising an exception coordinates the transition of all endpoints to an exception handling interaction.

Looking forward, the introduced global calculus with exceptions is considered basic and requires expansion to include more complex operators, the passing of service and session channels, and careful consideration at the endpoint level. The endpoint projection method presented is preliminary and needs further formalization and proof of correctness, especially regarding runtime terms like try-catch blocks and queues.