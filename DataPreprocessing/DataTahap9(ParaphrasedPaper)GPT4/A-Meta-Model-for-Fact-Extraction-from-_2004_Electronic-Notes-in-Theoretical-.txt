
The paper discusses the initial stage of analyzing software systems in reverse engineering by extracting facts, which involves using a meta-model to define the elements and relations that should be extracted. The authors propose a new meta-model specifically designed for the Delphi programming language, which they compare with the existing Dagstuhl Middle Model (DMM). They explain the reasons for creating a new model, namely the need to accommodate Delphi-specific features like namespaces and properties, which DMM does not fully support.

The authors also describe their experiences with the development of a fact extractor tool for Delphi, which they have preliminarily tested using two open-source Delphi applications. They provide details on the capabilities of the fact extractor, as well as some unresolved issues and limitations, such as the need to have source code access for library calls.

The paper includes a brief comparison of C++ and Delphi file systems, noting the differences in file types between the two languages and how Delphi combines both interface definition and implementation in a single file type.

The case studies focus on two Delphi applications: a 3D scene editor and an SQL parser, providing insights into the file size and complexity of these projects.

Limitations of their fact extractor, such as missing information when library source code is unavailable, are discussed, along with the necessity to enhance the tool by conducting further case studies and applying it to architecture recovery projects.

The paper is organized as follows: an introduction to Delphi contrasting with C++, a description of the Delphi meta-model they created, early validation results from case studies, a discussion on related work comparing their model with DMM, planned future work, and a concluding summary.