The Java Card programming language is a specialized variant of Java tailored for running on constrained devices, such as smart cards, SIM cards, or security tokens. This adaptation excludes several standard Java features, including certain primitive types and most library classes, to accommodate the limited resources of these devices. To function on such devices, Java Card employs a modified Java Virtual Machine (JVM), known as the Java Card Virtual Machine (JCVM), which is significantly pared down.

This academic paper addresses how Java Card applet safety can be enhanced through a subset of the Java Modeling Language (JML), thus creating a Java Card-compliant specification language called JCML. JCML allows for certain JML constructs that are feasible within the Java Card platform's architectural constraints. The paper describes the process of compiling Java Card applets, converting them into a CAP file format, and how compliance is ensured before installation on a card. Moreover, it highlights the importance of protecting sensitive on-card data from host applications.

JCML aims to maximize JML's specification strengths while eliminating aspects incompatible with Java Card. It involves rigorous constraints to suit Java Card limitations, particularly avoiding constructs the JCVM does not support. The JCML compiler translates assertions into Java Card code, and the limited grammar informs the creation of static and instance invariants to check before and after method execution.

The paper also explores using method inlining as an optimization in the JCML compiler, balancing processing time and code size in the context of restrictive applications. Furthermore, it discusses runtime verification methods, comparing other works that focus on static verification to JCML's dynamic approach. It acknowledges Java Card's inability to handle the intricacy of certain JML operations and opts for simplicity by deeming any uncheckable specification as false.

The paper concludes that while the current compiler can check simple properties, future work involves extending its capabilities, employing optimizations, and managing exceptional behavior to enhance the reliability and correctness of on-card applications.