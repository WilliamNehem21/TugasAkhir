Due to rising complexities in computing systems, there is an increasing use of automated tools to detect bugs in both hardware and software. Two primary methodologies employed for this task are simulation and formal verification. Simulation involves running tests on specific inputs and analyzing outcomes, which can cover control and data aspects effectively but usually encompasses only a subset of all possible states. It can affirm that certain inputs match specifications, but it cannot guarantee correctness across all states.

Formal methods, in contrast, utilize mathematically-founded languages and tools for specifying and verifying systems, which is especially advantageous for complex and critical applications, enhancing reliability. Unlike simulation, formal verification conducts thorough searches across the entire problem domain, thus proving compliance with specifications rather than merely identifying errors for certain inputs.

This paper introduces a model that merges explicit and symbolic representations into a single explicit-symbolic formal verification approach. The goal is to use both explicit and symbolic techniques on the same model, selecting the most effective method for different components of the model. We discuss related work and our objectives, develop the explicit-symbolic model, and demonstrate its generation from labeled state-transition systems. We also explain how formal verification tools can verify systems using our model with the Verimag intermediate format and present algorithms for integrating the two underlying models. Future steps and concluding thoughts are also shared.

Our explicit-symbolic model combines the strengths of explicit-state model checkers like SPIN and JPF with symbolic-state model checkers such as SMV, NuSMV, and Verus. Algorithm optimizations from these tools, like the on-the-fly technique from SPIN, are considered for enhancing model checking.

Our project relates to the SLAM project, which uses both explicit and symbolic models and conducts abstract model extraction from C code to check temporal properties. SLAM utilizes predicate abstractions, symbolic reasoning, and iterative refinement. Bebop, a part of SLAM, performs reachability analysis of boolean programs. However, our model offers more flexibility than SLAM, allowing for a variety of combinations of control-flow and data-flow representations to best meet system requirements.

We generate the explicit-symbolic model in two steps, creating explicit and symbolic models from the original model by partitioning variables, then combining them. This results in a clearer and more intuitive process. We describe the use of the intermediate format (IF) for modeling asynchronous real-time systems with process instances interacting through shared variables and message passing.

We apply explicit-symbolic modeling to IF models, detailing the language's main components and demonstrating the generation of explicit and symbolic models before combining them to replicate the original model's behavior. Our algorithms assume system properties are expressed in Computation Tree Logic (CTL), a branching temporal logic allowing for the specification of safety, liveness, fairness, and deadlock freedom.

We then present parsing of atomic propositions, considering both explicit and symbolic representations, and proceed to detail the algorithm for solving the model checking problem.

In conclusion, we propose a flexible environment for formal system verification that integrates explicit and symbolic techniques, aiming to optimize search space exploration. Our current work involves computational implementation and testing of the explicit-symbolic model and algorithms with systems specified in an intermediate format. This will improve the model conceptually and determine the impact of different representations on verifying systems rich in control and data-flow interactions. Future experiments will seek to validate the assumption that control-flow should be explicitly represented and data-flow symbolically, as in the SLAM project.