This paper introduces a Java API designed for creating animated educational content with AnimalScript as the primary output format. The API is versatile, capable of adopting other notation systems or languages, expanding its utility beyond users of the Animal Animation Visualization (AV) system. Building on previous German-only documentation, this paper delves deeper into the API's features alongside an informal assessment and its recent applications.

The organization of the paper is as follows: Section 3 outlines the Java API's design and showcases an example of an animation created with this tool. Sections 5 and 6 briefly evaluate the API informally and discuss the possibility of extending the API to accommodate different notations or languages. The paper concludes in Section 7 by summarizing the work and highlighting potential avenues for future research.

The API allows for the flexible creation of a wide array of graphical objects (e.g., shapes, lines, and text) and data structures relevant to computer science, such as graphs, arrays, matrices, code blocks, lists, and stack and queue variants. Users can generate these objects with a singular method call, similar to an example provided in the paper.

A key design choice the authors have made is inspired by Cascading Style Sheets (CSS), allowing users to define a set of visual attributes once and reuse them consistently across multiple objects. This is illustrated in an example where the visual properties of an integer array object are specified, and the said properties are then applied to multiple text objects for consistent visualization.

The creation of new visual property objects defaults to preset values, meaning users only need to adjust settings pertinent to their specific needs. Additionally, the paper provides a simple illustration of how the API can animate operations, like moving array values over several frames, to aid in understanding the changes visually.

For users looking to extend the API to other programming languages, the process is straightforward. A new Java package is created for the target language, followed by an implementation of the abstract language factory based on factory design pattern principles. Tools such as Eclipse can aid by pre-populating necessary methods for completion; this currently entails 26 factory methods for the variety of supported objects.

The current implementation for AnimalScript spans 30 Java classes, consisting of a total of 6,336 lines, which, when stripped of comments, blanks, and import statements, reveals a substantially smaller core of functional code.

In summary, this Java API presents a powerful and adaptable platform for the generation of animation content, supporting a broad range of visual objects and data structures, with potential for further extension to support additional languages and notation systems.