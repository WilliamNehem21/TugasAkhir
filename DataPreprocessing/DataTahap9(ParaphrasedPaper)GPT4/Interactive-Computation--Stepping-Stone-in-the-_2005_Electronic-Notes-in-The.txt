This paper provides a comprehensive review and expansion of prior research concerning the domain-theoretic perspective on the evolution of computation, particularly focusing on machine development. It presents an overview of the principles of developmental computation and illustrates how interactive computation serves as an intermediary phase between traditional computation and developmental computation. The authors critique the limitations of classical computing, which could potentially hinder the advancement of computing systems, while also highlighting how the interactive and developmental paradigms address these issues. The paper underscores the notion that developmental computation is a broader concept than interactive computation.

A theoretical outline for developmental computation is proposed, and the paper also gives a brief overview of the current state of research in this area.

In Section 2.5, the authors note that any process capable of producing a sequence of characters or other types of objects, such as the intermediate steps in a counting operation, falls within the scope of their discussion.

The paper distinguishes between 'finiteness' and 'finitarity' in computation. 'Finiteness' refers to the overall resources available for a computational task, implying that a finite computation is limited to a finite amount of resources. In contrast, 'finitarity' relates to the finite resources utilized at each computational step, and despite each step being finite, the aggregate of resources used in a finitary computation could be infinite. Both interactive and developmental computations are designed to be finitary rather than strictly finite.

The authors assert that the crucial progression toward developmental computation (DC) is less about technological advancements—since the requisite technology has been available for decades—but more about a fundamental shift in perspective and understanding within the field. This shift involves replacing foundational concepts in classical computation (CC), such as machines, programs, and algorithmic computations, with the concepts from a general theory of complex, dynamic systems, which emphasize organization, development, and adaptation.

Building upon this notion, the paper argues for the adoption of a general theory to guide this transformation. Specifically, it refers to the general theory of biological organisms as outlined by Jean Piaget, which is more than just a biological theory; it serves as a cybernetic framework for complex, interactive, and developmental dynamic systems—thus justifying its integration into the conversation on machine development.

To exemplify the concept of machine development, the authors introduce a tentative model outlining the various stages of machine development. They admit that this model is preliminary and has many areas that need further elaboration, but they believe it is sufficiently detailed to convey the core idea of what they consider to be essential in machine development.