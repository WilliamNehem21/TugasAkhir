The paper discusses the utility of incorporating an interrupt feature into programming and specification languages. Process algebras have been augmented with an interrupt operator to achieve this. The authors propose a new class known as interrupt event structures, which lend a truly concurrent semantics to process algebras with the added interruption capability. These structures surpass other event structures in terms of expressive power when it comes to event trace execution and can differentiate between simultaneous execution of events and their interleaving.

The paper establishes the consistency between operational semantics, expressed as transition systems, and denotational semantics, expressed through interrupt event structures, using a process algebra that includes an interrupt operator. Consistency is demonstrated based on bisimulation, showing that the operational and denotational approaches align.

The study covers the following structure: Section 2 introduces the concept of interrupt event structures; Section 3 analyzes their expressive power; Section 4 details the authors' process algebra alongside the two semantics and a proof of their consistency; Section 5 reviews related literature.

An additional constraint called approximation closedness is mentioned but not elaborated upon, to keep the paper more understandable. The authors also distinguish between event execution and action execution.

The paper concludes with a discussion on how process algebras can capture the behavior of systems that feature interruption, including the behavior of processes that can be disrupted by other processes, and how these models can encompass recursion, parallel execution with synchronization, and restricted action execution. The authors have developed a semantic framework that extends interrupt event structures to include termination and action labeling, providing a foundation for denotational semantics and demonstrating that bisimulation is congruent within their framework.