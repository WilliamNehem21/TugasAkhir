In this research note, the authors outline a conceptual framework for an abstract file system, which is characterized by a partial function mapping absolute paths to their respective data content. This abstract file system prescribes a set of valid paths and supports read and write operations at these paths. It also accommodates Unix-style modifications such as file removal (`rm`), directory creation (`mkdir`), and file/directory move operations (`mv`). The authors introduce formal axiomatic definitions for these operations.

The aim of the paper is to refine the abstract file system model into a tangible pointer-based implementation to tackle the complexities that partial functions introduce. This refinement process is achieved through two stages: first, by conceptualizing pointer operations with total functions, and then, by introducing partial functions. This methodology ensures correctness, substantiated through a series of invariants that highlight necessary conditions for the model's integrity.

Formal verification, which employs mathematical approaches to ascertain functionality correctness, is crucial in the early stages of design to prevent errors that could propagate and cause significant issues later. In this context, the authors focus on basic hierarchical file system operations such as reading, writing, deleting, creating, and moving files, beginning at a high level of abstraction and progressively incorporating details, such as directory management.

Dealing with partial functions poses a significant challenge but is necessary because it mirrors the real-world scenario of possible unallocated pointers. To execute the formal verification process, the authors use the proof assistant "PVS." The PVS proof scripts that include definitions, theorems, and proofs are made accessible for review, and the paper's notation is inspired by PVS syntax, Haskell concepts, and traditional mathematical notations.

The authors further discuss issues like garbage collection in the context of this file system framework, the process of which cannot be fully implemented since every store in the model is treated as a total function. Nonetheless, garbage collection's impact, or lack thereof, on the overall meaning of the store is established, and operations are proven to preserve certain invariants essential for the integrity of the system.

The paper also touches on permission functionalities (`px`, `pr`, `pw`) vital for execution, read, and write operations, although the specifics of representing these permissions within the data are not delved into. Instead, the focus remains on specifying and verifying that user access and modifications adhere to the granted permissions.

Ultimately, the authors prove the refinement of their abstract model to ensure that the implemented version is consistent with the higher-level specifications. This proof work is extensively supported by PVS. In totality, the authors prove 204 lemmas within PVS, highlighting the efficiency of the proof assistant in comparison to similar efforts done using other tools like Athena, which required a more significant number of lemmas and theorems for a more narrowly defined model. Interested readers can find additional details within the full PVS proof script referenced in the research note.