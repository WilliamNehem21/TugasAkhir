The paper discusses an algorithm for computing the Worst Case Reaction Time (WCRT) of programs written in Esterel—a synchronous language used in reactive systems that require immediate response to inputs. The authors highlight the importance of WCRT in reactive programming, as it provides the longest reaction time of the system, analogous to the notion of Worst Case Execution Time (WCET) for general computations.

Esterel programs are executed on a specialized hardware called the Kiel Esterel Processor (KEP), which is tailor-made for the synchronous execution model of Esterel. Due to the absence of general-purpose computing features like caches and pipelines, the KEP allows for more straightforward WCET analysis.

The authors also describe the Esterel language, which features constructs to manage concurrent execution and preemption, and explain how concurrency is accommodated on the KEP with a multi-threaded architecture without the overhead of context switching costs.

Their proposed WCRT analysis is conducted on an intermediate representation called the CKAG (Control Kernel Asynchronous Graph), which represents the program’s behavior more closely than Esterel’s high-level language constructs. This graph is generated by the compilation process and includes all necessary information for nodes representing control flow elements like delays, exceptions, joins, and forks.

The authors acknowledge the challenges associated with the complexity of reactive programs due to nested exceptions and concurrency, often leading to the re-execution of certain instructions within a single instant—a phenomenon known as reincarnation. However, their algorithm can handle this by computing the WCRT in a structured way that matches the control flow's possible scenarios.

The results of the WCRT analysis can guide the generation of assembly code and contribute to the optimization of Esterel programs. The paper concludes by acknowledging that while the current approach to WCRT analysis is effective, there is potential for further refinement. This includes accounting for the status of signals to exclude unreachable paths and improving the handling of concurrent thread executions within a single instant.

Overall, this research enhances the predictability and reliability of reactive systems, particularly in hard real-time environments where precise timing of reactions is critical.