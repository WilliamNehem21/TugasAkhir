The Event-B method is utilized for system modeling through successive refinement stages, beginning with a high-level abstract specification and gradually incorporating details through refinements leading up to implementation. This technique becomes particularly crucial in software systems that employ concurrency, necessitating detailed concurrent feature specifications before implementation.

The paper introduces an approach for connecting Event-B models with concurrent, object-oriented implementations via an intermediate notation called Object-Oriented Concurrent-B (OC-B). This notation is designed to help specify and reason about concurrent aspects of system development at an abstract level, excluding details such as locking mechanisms. It emphasizes the importance of atomicity through the use of labeled atomic clauses.

The authors have developed a tool, in the form of an Eclipse plug-in, that automates the translation of OC-B notation into Event-B models and Java code. This tool aims to demonstrate the validity of their approach and to gain insights into the methodology.

Key concepts in the paper include transformations that map non-atomic clauses to sets of events and enable the tracking of program counters to guide execution flow. The paper also discusses variable visibility, mutual exclusion policies, and conditional waiting semantics to manage shared data access and avoid interference in concurrent processes.

The OC-B notation extends previous work in UML-B, allowing for non-atomic operations and representing details pertinent to implementation. For example, it includes constructs for constructor procedures and other object-oriented features, which aid in specifying the initial state of a system.

In discussing the translation to Java code, the paper highlights the need to manage interference and enforce constraints to achieve interference-free execution. It details the mapping process, which includes ensuring the return types match and avoiding the use of return variables in certain expressions.

The paper is structured into sections that define processes, program counters, and monitors, gradually extending the model with object-oriented and concurrent features. The syntax is enhanced with syntactic sugar, and the authors show an example of refining an Event-B model to an OC-B model. The process further involves mapping OC-B specifications to Java code, and comparing the work with related approaches such as Object-Z, VDM++, and Circus.

The developed Eclipse-based tool suite serves as both a validation and a practical extension for the proposed approach. Looking ahead, the authors aim to introduce transactional constructs, enhance tool support, and consider using advanced concurrency constructs available in the Java.util.concurrent package to manage locking more effectively. The goal is to facilitate the transition from formal modeling to practical implementation while simplifying reasoning about concurrency.