This paper introduces a new approach to declarative debugging tailored for Datalog programs, focusing on the program's semantic interpretation rather than the computation mechanism. The authors suggest computation graphs as a suitable representation for analyzing Datalog computations, which differs from the traditional computation trees used in declarative debuggers for other languages like Prolog.

Debugging begins when a Datalog programmer identifies an unexpected result to a query and employs a question-answering procedure to identify flawed rules or relations that deviate from the intended semantics. The debugging system, implemented in the DES database system—an open-source project—moves away from traditional methods that rely on SLD resolution trees or procedural transformations that can complicate understanding the program's behavior.

The paper defines Datalog terms and illustrates debugging methods with an example program meant to evaluate the parity of elements in a base relation. The sample program contains a deliberate error to demonstrate how the debugger can identify incorrect relations.

Using computation graphs, the debugger identifies "buggy vertices," which are vertices not valid despite having valid descendants. These vertices indicate the relations in the program likely to contain errors. In cases where multiple errors occur without a single buggy vertex, the debugger can only suggest related incorrect vertices as potential error sources.

The approach deviates from the general declarative debugging framework proposed by Naish and is incompletely compared to traditional declarative debugging. However, it's argued to be practical for Datalog, given that operational features or program transformations can obscure understanding of program execution.

Overall, the paper proposes a semantic-based strategy for declarative debugging in Datalog, emphasizing the suitability of computation graphs over computation trees and acknowledging limitations while highlighting practical benefits.