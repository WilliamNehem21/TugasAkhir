This paper presents an examination of COWS (Calculus for Orchestration of Web Services), a process calculus designed for defining and integrating service-oriented systems and their dynamic behaviors. COWS is distinctive due to its influence from WS-BPEL, a standard for web service orchestration, facilitating the translation between COWS specifications and WS-BPEL code, which could lead to tools that semi-automatically generate WS-BPEL code and verify programs using COWS analytical tools.

The paper outlines the syntax and operational semantics of COWS, then showcases its specification style and utility through a detailed financial case study, which is part of the EU project SENSORIA. The case study begins with an informal description, followed by a more detailed UML (Unified Modeling Language)-based specification and ultimately a formal COWS specification. The paper discusses the potential properties of the application, formalized by the temporal logic SOCL and verified by the COWS model checker CMC.

The paper features UML4SOA, an extension of UML to address Service-Oriented Architecture (SOA) specifications, including new elements like compensation for activity failure. While the case study initially used UML4SOA for modeling, it was then translated by hand into COWS. The paper notes the lack of formal semantics for UML4SOA and compensation activities, calling for future work to systematically translate UML diagrams into COWS.

Furthermore, the authors propose future research into translating COWS specifications into practical implementations, using WS-BPEL's compatibility with COWS for a start, or - alternatively - creating an execution environment for COWS specifications, possibly based on Java.