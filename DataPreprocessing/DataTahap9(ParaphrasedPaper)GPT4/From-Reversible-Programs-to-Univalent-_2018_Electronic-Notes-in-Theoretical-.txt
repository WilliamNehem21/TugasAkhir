Any type can be transformed into a proposition by the addition of arbitrary paths, a process known as propositional truncation, or (-1)-truncation, which can be described using a higher inductive type (HIT). The type constructor takes a type 'A' as an input; the point constructor '|_|' maps elements of type 'A' into elements of the truncated type; and the path constructor 'ident' equates any two elements within the truncated type, effectively making it a proposition. This process must be introduced as a theoretical assumption, since Agda, the programming language in question, does not currently support the implementation of HITs.

As detailed by Christensen, it is uncommon for a type 'U' to be at the base of a univalent fibration. However, Christensen also identifies a specific group of types that indeed always serve as the bases for univalent fibrations. This paper delves into this observation and utilizes it to construct a specialized univalent subuniverse, which will be further discussed in the following section.