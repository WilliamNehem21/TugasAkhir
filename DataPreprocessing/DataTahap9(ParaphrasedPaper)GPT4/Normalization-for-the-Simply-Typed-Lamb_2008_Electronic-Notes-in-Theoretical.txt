A logic program in Twelf can be described as a partial mapping from certain inputs to their corresponding outputs, as defined by the mode declaration. For a logic program to constitute a valid base for inductive proofs, it is important that the corresponding function is total. This implies that it should terminate for all possible inputs and be able to handle every conceivable case. However, within Twelf's system, neither termination nor case coverage can be automatically proven—for example, one cannot provide a proof within Twelf that the function subst_red always terminates. As a result, the totality of functions—ensuring they terminate and cover all cases—requires reasoning outside of the Twelf framework, sometimes assisted by tactics built into Twelf.

The "reduces" declaration is used to maintain certain structural invariants, namely that the type expression c is a subset of the expression a. Twelf is responsible for ensuring that this invariant is respected in every rule that introduces the pattern subst_x a d c e f. For instance, in the case labeled subst_x_x, the invariant is easily maintained because c is directly assigned the value of a. In the case labeled subst_x_app, the maintenance of the invariant is assured by relying on an indirect hypothesis, b=> c as a subset of a.

The paper mentions four type families, indicating that they interdepend in a recursive manner and collectively terminate according to a lexicographic order on pairs of types (a) and typing derivation (e). This setup implies a primary induction process on the type a, accompanied by a secondary induction on the derivation e. To ascertain that termination is guaranteed, Twelf uses the "reduces" declaration. The provided code block labeled wne_var not only aids in termination checking but also ensures that every necessary case has been checked, thus leading to a lemma that is fully verified by the machine.