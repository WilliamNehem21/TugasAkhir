This academic paper has two main objectives. The first is to expand on an existing approach by creating a message algebra with functions that abstract away the intricate details of handler constructs. Secondly, the paper also broadens this mapping to incorporate correlation sets and introduces a theoretical framework for examining how correlation functions in orchestration languages.

The structure of the paper is as follows: an introduction to WS-BPEL with correlation sets is provided, using an example to illustrate its application. The syntax and operational semantics of the extended BP-calculus are discussed, along with the encoding of key BPEL constructs into BP-calculus. The paper also presents a BP-model for the given example.

WS-BPEL is an XML-based language used for defining the coordination of web services. It relies on WSDL for describing web services interfaces, which includes port types, actions, and messages. Process state is maintained through variables containing XML data, messages, and partner links, the latter of which allows for mobility through the WS-Addressing specification.

In WS-BPEL, a receive activity can be associated with the creation of new process instances, with correlation rules ensuring messages are linked to the right process instance. Correlation sets are defined with properties that are matched with message parts to identify interactions specific to a process instance.

When a message is sent, its property-linked field gets assigned the relevant property's value, ensuring received messages align with the process instance's property initialization.

The paper defines the term set 'T', including variables, names, and values, with a message being a closed term (without variables). An input guarded process, noted as 'ig', represents a choice in operation that aligns with a WS-BPEL pick, without encompassing service behavior non-determinism.

Scopes in WS-BPEL are abstracted, serving as containers for processes and handlers. They are activated when their activities start and terminate upon completion of these activities. Two correlated sets, CSI for input and CSO for output, are discussed, explaining how the update function establishes message correlations.

A BP-calculus representation of a trade market example involves three processes (agent, customer, and broker) running in parallel. The paper simplifies the example by omitting handler and scope definitions, focusing on the coordination role of the agent in the BPEL process and its translation to BP-calculus.

The paper concludes by noting the advancements made in BP-calculus to formalize correlation in orchestration languages, specifically BPEL. The authors acknowledge that further analysis is needed to explore model properties and the interaction of correlation sets with more complex constructs. Future work aims to formalize the WS-Addressing standard and integrate these concepts into a validation engine based on BP-calculus that is currently under development.