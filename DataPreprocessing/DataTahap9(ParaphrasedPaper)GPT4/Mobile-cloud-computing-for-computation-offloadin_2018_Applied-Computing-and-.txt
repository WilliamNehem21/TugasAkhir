Recent trends in mobile computing preferences have shifted due to advancements in mobile technologies. Various studies, including one by ABI Research, predict significant growth in the use of mobile cloud computing (MCC), with more than 240 million businesses expected to access cloud services via mobile devices by 2015, generating around $5.2 billion in revenue. Smartphones have become more prevalent across several sectors such as business, education, entertainment, and healthcare. Despite predictions that mobile devices will lead future computing, they are still hampered by issues like battery life, processing power, and memory capacity.

The paper is structured to cover background concepts such as cloud computing (CC), MCC, and computation offloading in Section 2. Section 3 discusses offloading methods, while Section 4 compares different offloading frameworks. General issues and obstacles in computation offloading are the focus of Section 5, and Section 6 summarizes the findings and suggests avenues for future research.

Cloud computing offers vast on-demand computing resources, flexible pay-as-you-go models, and streamlined IT management with services like Windows Azure and Amazon Web Services, presenting different service models for varying computing needs.

Computation offloading begins with application partitioning, separating components for local execution or migration to the cloud. This can be guided by the programmer, source code analysis, or application profiling. Offloading decisions are critical and can depend on the execution context, such as connectivity or energy costs for data transfer. These decisions are part of either static offloading frameworks that decide at design time or dynamic frameworks that make decisions during runtime.

The paper reviews several offloading frameworks, each with different approaches to partitioning, offloading decisions, and execution strategies. For example, Maui focuses on energy savings and conceals the complexity of remote execution, while a VM-based cloudlet framework offers a proximate hosting environment for offloaded tasks, leveraging VMs to support scalability and mobility.

Other frameworks like Jade concentrate on automatic application and device profiling to facilitate energy-efficient offloading, while Mirror Server leverages telecommunications service provider (TSP)-based remote services for offloading, security, and storage functions. Cuckoo dynamically decides at runtime whether to offload, and Phone2Cloud offloads to a Hadoop environment-based cloud.

The paper notes that most frameworks haven't adopted container technology yet, such as Linux Containers (LXC), which offers a lightweight alternative to traditional VMs. It points out that the heterogeneity of smartphone architectures poses challenges for standardizing offloading frameworks and emphasizes the need for security in computation offloading.

Automation in offloading to support a seamless process and rapid environmental adaptation is essential but challenging to implement. Overall, the paper provides an analysis of current offloading frameworks in MCC, examines their approaches and challenges, and suggests that a standardized and lightweight model is needed to simplify the development and management of offloading frameworks.