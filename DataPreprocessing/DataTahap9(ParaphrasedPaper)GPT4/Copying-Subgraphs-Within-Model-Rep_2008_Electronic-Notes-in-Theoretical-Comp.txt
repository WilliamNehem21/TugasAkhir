The paper explores the limitations of current graph transformation tools in the context of model transformation, which are primarily used to manipulate graphs by conditionally adding or removing nodes and edges, as well as initializing or updating attributes. However, these tools lack an efficient way to copy subgraphs within a host graph, which can hinder the expression of model refinements in a concise way.

The paper introduces a case study that demonstrates the necessity for a copy operation in graph transformation and proposes a new syntax and informal semantics for such an operation. Furthermore, it details how this operation was integrated into an existing graph transformation language and discusses strategies for implementing this feature in a model transformation language, leveraging existing language constructs for optimal efficiency.

Model repositories, which store and facilitate the retrieval of models, are also discussed, including their ability to serialize data into standard formats (like XMI) and offer transformation APIs (like OCL and JMI). The paper aims to extend graph transformation with high-level abstractions for model transformation while connecting with low-level APIs provided by mainstream model repositories through compilers.

The need for a copy operator is emphasized in the paper, and its syntax and semantics are presented as an enhancement to the story diagram language. The paper evaluates two methods for extending an existing story diagram engine with this operator and reviews related literature.

The current focus of development is on model-to-model transformation, leaving code templates intact and allowing for transformation between different model profiles through the use of story diagrams. Although this adds complexity, an intermediate layer and the modular features of story diagrams help manage it. This approach also presents portability advantages.

Lastly, the paper touches on a case study of Hoffmann that evaluates method body attributes and links in greater detail using story diagrams. It also considers whether using advanced control structures in these diagrams, such as loops, results in more complex rules compared to those utilizing graph variables. Validation of the work is still ongoing, with Java being a potential tool for future development.