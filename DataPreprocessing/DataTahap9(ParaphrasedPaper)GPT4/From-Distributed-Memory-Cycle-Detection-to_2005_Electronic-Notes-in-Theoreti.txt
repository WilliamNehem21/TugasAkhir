This paper presents a distributed parallel graph algorithm designed to efficiently detect cycles in large directed graphs by leveraging a network of workstations. The algorithm starts with the breadth first search (BFS) concept, identifying back-level edges, which do not extend the distance from the initial vertex, as crucial elements for cycle detection.

The paper elaborates on enhancing the algorithm to serve as a distributed memory linear-time temporal logic (LTL) model checker. It achieves this by incorporating features for detecting accepting cycles, creating counterexamples, and implementing partial order reductions.

The study is broken down into specific sections, with an initial recap of the core graph algorithm ideas followed by separate sections detailing each new feature (accepting cycle detection, counterexample generation, and partial order reduction). A summary of experimental evaluations concludes the study.

At the heart of the proposed method is a distributed system where each workstation manages a subset of graph vertices. When a vertex needs to be explored, but is not owned by the current workstation, the workstation sends a message with the vertex to the owning workstation, which then takes over.

The cycle detection process alternates between two procedures. The primary procedure conducts BFS to find back-level edges level by level, while the nested procedure examines these edges to identify cycles. If any nested procedure succeeds in tracing back to its origin—proving a cycle exists—the algorithm terminates.

For LTL model checking, the authors prevent non-accepting cycles from being falsely reported by tracking an additional 'accepting bit' within each nested procedure. The bit is toggled when encountering accepting states, ensuring that only accepting cycles are detected. This distinction is crucial for distinguishing between non-accepting and accepting cycles within the graph.

Short counterexamples, which are beneficial for error debugging, are obtained by storing the BFS and DFS parent of each vertex as they are encountered, allowing the reconstruction of the path leading to the cycle.

The paper also includes a discussion on partial order reduction, using a similar approach to that found in the SPIN model checker. This optimization focuses on exploring only a subset of transitions at each state, called an ample set, to reduce space and time complexities without compromising correctness.

Experimental results support the algorithm's efficiency, revealing that counterexamples produced tend to be short—favorable for debugging—albeit at the cost of slightly longer times and more states needing exploration to discover these counterexamples. The practical and theoretical improvements signify significant advancements in the field of parallel algorithms for cycle detection and model checking in large distributed systems.