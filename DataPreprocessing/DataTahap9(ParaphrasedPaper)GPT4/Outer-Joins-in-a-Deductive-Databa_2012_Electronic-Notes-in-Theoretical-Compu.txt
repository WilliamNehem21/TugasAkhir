This study presents a method for incorporating null values and outer join operations into the Datalog Educational System (DES), which primarily uses Datalog as its query language but also supports SQL. In this system, SQL views and queries are translated into Datalog programs, necessitating the integration of null-related operations into Datalog to accommodate a broader spectrum of SQL functionality. DES executes queries by performing a top-down-driven bottom-up, stratified fixpoint computation with tabling; this paper describes how to execute outer joins within this framework using source-to-source transformations of Datalog programs.

DES handles Datalog with stratified negation, meaning negation isn't part of recursive computations, although it can appear in recursive rules. Even if a program is not stratifiable overall, it can solve queries based on a query-specific dependency graph, which allows a stratification to be established for that query. SQL Data Query Language (DQL) statements are converted to Datalog programs, and relational metadata for Data Definition Language (DDL) statements are maintained. When executing a DQL query, it is parsed, compiled into a Datalog program (which includes a special relation for the result), asserted, and then queried. After execution, the resulting Datalog program is removed, unless it defines a view, in which case it and its metadata persist. Data Manipulation Language (DML) statements are also translated into Datalog queries and programs to modify base relations accordingly.

DES also handles undefined information, nulls, aggregates, and offers an efficient tabling mechanism. Although it isn't designed to compete with modern implementations, it serves to display the advantages of the powerful logic found in Datalog systems compared to traditional relational databases.

For programs that can't be stratified, the system might infer both positive and negative facts for a call. When contradictions occur, these are replaced with an undefined fact. Current methods for determining undefinedness are incomplete and geared towards educational use on small examples, unlike more comprehensive implementations such as the one found in XSB.

Null values have long been a feature in relational databases due to their necessity in representing unknowns in real-world applications, despite some criticism. To integrate nulls in a Datalog system, built-in functions to handle them, including outer join operations, must be provided. DES incorporates typical outer join operations found in relational databases, applying similar semantics when working with null values.