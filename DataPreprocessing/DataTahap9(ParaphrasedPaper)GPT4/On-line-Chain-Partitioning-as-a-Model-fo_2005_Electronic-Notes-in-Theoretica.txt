Our research examines a series of computations assigned to processors in real-time, with the goal of minimizing the number of processors utilized. We consider each task as part of a set that may have interdependencies, and upon receiving a task, a processor must be irrevocably chosen for its execution. This approach is further complicated by the rule that independent tasks must be processed on different processors.

This scheduling dilemma can be likened to a two-player game where one player assigns tasks and the other allocates them to processors. Mathematically, the tasks are modeled as a partially ordered set (poset), with tasks processed by a single processor forming a chain. Subsequently, scheduling equates to partitioning this poset into the fewest possible chains.

We demonstrate that the online partitioning of gradually increasing interval orders has an optimal solution using the nearest-fit algorithmâ€”a greedy approach. However, for interval orders without a given representation, the nearest-fit algorithm is ineffective, and no online algorithm exists to construct such a representation, requiring the creation of new algorithms. Additionally, we identify a new lower bound for the number of chains required in such online partitioning.

The paper is organized as follows: Section 2 provides foundational concepts about posets and chain partitioning. Section 3 delves into the online version of the problem and the corresponding two-player game. Section 4 explores interval orders, while Section 5 discusses their chain partitioning and an effective nearest-fit algorithm for growing versions. Section 6 addresses the scenario where interval orders lack representation, concluding the impossibility of an online construction for such representation. We propose a lower limit for online chain partitioning of growing interval orders.

Summarily, this research indicates that understanding relations between tasks as posets allows for improved processor scheduling by minimizing processor usage through intelligent task allocation.