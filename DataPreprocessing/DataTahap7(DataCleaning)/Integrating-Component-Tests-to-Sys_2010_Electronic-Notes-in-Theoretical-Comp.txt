in many application domains, e.g., automotive systems or production and automation, embedded software has become the driving force on innovation, leading to an increasing demand for software-controled functionality. to meet this increasing demand for software, a component-based approach to the construction of(software) system has become the foundation of state-of-the-art software engineering. besides reducing the complexity of the overall engineering process, component-based software engineering also supports the construction of customized systems by combining pre-fabricated components with others custom-made for the specific system.



after discussion the context and contribution of the presented approach in the remainder of this section, a formalization of observations about components and networks of components is introduced in section 2 to provide the basics for the applied techniques. as the main part, section 3 introduces a method for generating such test cases on a system level from test cases for components. finally, in section 4 the presented approach is summarized, and compared to other methods of test case generation.



in this section, components are introduced as building blocks for the construction of reactive systems. the behavior of a component is described as a transition system, controlling the interaction of the component with its environment or surrounding system via input and output signals, and formalized as the set of possible observations about the interaction with its environment, described by the history of exchanged signals. finally, the notion of observations is extended to systems described as networks of communicating components.



using these elements, the behavior of a transition system in terms of simple singlestep executions is defined. each transition corresponds to a single step of computation/interaction. when entered through its entry location, it reads the values of its variables; it then changes the variable state by writing new values and terminates by exiting via its exit location.



as introduced in subsection 2.2 in the case of the description of components, the interface inout s of a network s in term of its input and output variables is a subset of the combined interfaces inout ci of its components ci. as in the previous case, non-interface variables from( i=1,...,n inout ci)\inout s are considered to be hidden variables, used only for internal communication.



in this section, test cases are introduced as(sets) of observations, defining the validity of a test case of a component as its containment in behavior of the component. furthermore, the notion of an integrated test case is introduced, demonstrating its ability to test a component behavior of the system level. finally, its automatic generation using model checking is illustrated.



intuitively, a test case and its graphical representation is interpreted as the set of observations about the component under test that correspond to the prescribed behavior, i.e., with either an input differing from the prescribed input or an output corresponding to the prescribed output. thus, a test case characterizes all legal behaviors of that component under test; it therefore is a super-set of all the expected observations of the component.



the previous sections gave a detailed account of the basics and techniques supporting an automated method for integrating component tests into system tests. in this section, a short summary of the presented approach and an outlook into other possible areas of application of the basic techniques are given. furthermore, it is set into perspective to other work on automatic test case generation.



the described technique in this paper is focused on supporting issues of integration testing. other approaches on integration testing include methods based on coverage criteria for integration testing like(data-flow coverage) or(coverage based on component coupling). in mutation testing by mutants of the coupling on the internal interfaces is described as a method for integration testing. gives an overview of various techniques of component testing which are able to be applied by the component user during system integration.



