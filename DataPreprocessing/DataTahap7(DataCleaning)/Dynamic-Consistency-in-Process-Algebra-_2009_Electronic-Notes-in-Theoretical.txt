the coordination modelling language paradigm addresses collaboration between components in terms of dynamic constraints. within a paradigm model, component dynamics are consistently specified at various levels of abstraction. to enable automated verification of paradigm models, a translation of paradigm into process algebra is provided. examples are given and guidelines for a systematic translation into the process algebra acp are discussed. verification results building on the mcrl2 toolset are presented as well.



other bridges from software architecture to automated verification include the pipeline from uml via rebeca and promela to the spin model-checker and from uml via object-z and csp to the fdr model-checker[17,13]. process algebra driven prototyping as coordination from ccs is proposed in. the skeletons generated from ccs-specifications overlap with paradigm collaborations. in the titan framework, ccs is playing a unifying role in a heteorgeneous environment for aspect-oriented software engineering.



structure of the paper. in section 2 the basics of paradigm is given together with two running examples. section 3 briefly introduces process algebra. in section 4,a detailed translation of the paradigm models of the two protocols is given, followed by a general translation of paradigm models in section 5. section 6 concludes the paper.



this section briefly describes the main notions of paradigm. by means of two examples, that will be used as running examples through out the paper, the main aspects of the paradigm approach are explained. we also introduce an uml-style architectural diagram for collaborating components, that sets the stage for various notions of dynamics. we point out where the paradigm notions are relevant and how consistency of dynamics can be guaranteed.



note the difference with the non-deterministic protocol. for instance, in the second consistency rule here, the synchronization between the server step proceed with the global step done of clienti(cs) and the global step triv of clienti+1(cs), exactly expresses the simultaneous events of clienti leaving the critical section and clienti+1 being interrupted to be checked. in contrast, in the previous non-deterministic case, analogous coordination is splitted in two consistency rules, viz. first a return of the server to idling after helping client i, followed by a check of the next client.



the behaviour of the parallel composition of two processes is obtained by interleaving the two separate behaviours. in addition, processes can communicate by synchronizing on certain actions. in acp, action synchronization is user-defined by a so-called communication function. the communication function may involve two or more arguments, enabling multi-party synchronization. as we will discuss in section 4, the synchronization by communication very naturally expresses the consistency rules in paradigm. this will not come as a surprise, as they are both meant to express synchronization between some behaviours.



for the round-robin case, the translations of the clienti stds remain the same. the translation of the global std clienti(cs) changes slightly only. we simply adapt client1(cs), the global process of the first client. this is because this global std will start in phase interrupt. more specifically, its starting state is interrupt[triv].



based on the two example translations presented above, we proceed by formulating how to express a general paradigm model in acp. for clarity, we restrict to the hierarchal case where a component in a collaboration is either a manager or an employee. however, employees are allowed to have multiple roles addressing different managers. furthermore, for ease of presentation, we assume actiondeterminism, i.e. that any two different transitions have different actions. this way, a transition is identified by its label.



as various verification techniques can be applied to a process algebraic specification, via the translation, correctness of paradigm models can now be analyzed. for our experiments, we have used the mcrl2 toolset, which is closely related to the acp process algebra. the acp specifications for both examples of the non-deterministic and round-robin protocols, have been analyzed with the tool. mcrl2 has generated automatically the complete state spaces for further inspection. we have run the model-checker and checked several properties of interest. the results confirmed correctness of the paradigm models. it is noted, the translation into acp, although introducing explicit exchange of state and step information, provides a semantical definition by itself.



