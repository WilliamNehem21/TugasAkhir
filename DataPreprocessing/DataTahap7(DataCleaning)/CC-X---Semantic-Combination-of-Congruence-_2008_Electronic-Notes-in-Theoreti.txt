note, though, that these functions need not be implemented for the algorithm to work: only their existence matters to us,[.] could be computed in any other conceivable way and our algorithm cc(x) will never need to use one of these functions explicitly. the last axiom simply state that substitutions happen at the leaves level of semantic values.



the column valid shows the percentage of the conditions proved valid by the provers 4. the column timeout gives the percentage of timeouts whereas unknown shows the amount of problems unsolved due to incompleteness. finally, the column avg. time gives the average time for giving a valid answer.



cc(x) has been implemented in ocaml as a functor parameterized by a theory module whose signature is the one given in section 2.1. cc(x) is at the core of the ergo theorem prover. since practice often arrives before theory, a number of extra features of cc(x) have already been implemented in ergo. we leave for future work their formalization and correctness proofs:



a functor combinex(x1,x2) combines two theory modules x1 and x2, allowing cc(x) to combine several solvable theories. as shown in, solvers for first order theories almost never combine. however, while this is out of the scope of this paper, we claim that solvers for typed theories(under certain restrictions) can be combined.



