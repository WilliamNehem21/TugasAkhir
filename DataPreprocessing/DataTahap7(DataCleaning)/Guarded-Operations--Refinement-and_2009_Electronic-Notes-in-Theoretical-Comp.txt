the simple adts captured by definition 2.1 are open to several informal interpretations. their operations could be undefined outside of precondition(outside of the domain of the relation they denote) or they could be guarded outside of the precondition. in addition the behaviour inside the precondition could have a totally correct interpretation, i.e. the operation will terminate and will terminate in one of the post-states indicated by the relation or it could have a partially correct interpretation, i.e. the operation might terminate and if it terminates it will terminate in one of the post-states indicated by the relation.



next, we deal with data types with(explicitly) lifted operations. here the only relational semantics we admit as valid are those that are the result of a particular lifting of the operations of a simple abstract data type which is an example of either of the formalisations of must or may terminate from section 2.1.



the standard hoare he and saunders result that forward and backward simulation are sound and jointly complete certainly applies to the data types over lifted state. but as boiten and derrick point out the joint completeness is not valid for what we call operation-lifted data types with the must-terminate interpretation. it should be noted that the result fails because of the restriction placed on what operations are valid in the adt and thus it is not always possible to compute chains of simulation between operation-lifted data types that refine each other. in order to regain the completeness property all we need to do is relax this restriction.



clause(ii) is the preservation of the pre-condition or an applicability condition and clause(iii) is the strengthening of the post-condition or a correctness condition. with data types over lifted operations(definition 2.3 and definition 2.4) the logical and relational styles of simulation are the same. but when we use data



remember there are data types over lifted state that are not data types with lifted operations. by looking at these extra data types we can see that using definition 3.4 is not the same as using definition 3.9 on a data type over lifted state.



