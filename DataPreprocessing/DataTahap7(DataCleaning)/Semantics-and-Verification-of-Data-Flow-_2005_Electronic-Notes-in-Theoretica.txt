2.0 standard by defining a denotational semantics. it covers basic control flow and data flow, but excludes hierarchy, expansion nodes, and exception handling(see[18,19,20] for these issues). the paper shows, where the constructs proposed in the standard are not so easily formalized, and how the formalisation may be used for formal analysis.



as of writing this, the work on the uml 2.0 has reached the finalization stage. the technical work is said to have ended, and voting should be completed late this year, leading to an official endorsement of the new uml version probably early 2005. thus, the currently available specification are already pretty close to what will become the uml 2.0 later this year(or early next year).



in uml 2.0, there are numerous substantial improvements over uml 1.5. the metamodel has been totally reengineered, and is now much cleaner, more complete and orthogonal than it used to be. many details have been improved, and the uml 2.0 is now object-oriented again in some meaningful way.



2.0(cf.). it does not influence the behavior of an activity, however, and may thus be ignored here. subactivitystates have vanished, and nesting is now accomplished by calling subordinate activities from the actions that define the behavior of superordinate activities. data flow is now denoted by objectnodes and objectflows.



second, there are effect, selection and transformation functions in curly braces on activityedges. all we can reasonably know about them is that they work on a given name space, changing the state of some of the objects in it, possibly augmenting or reducing the name space. the modeler must fill in the details, the effect expressions are simply handed down through the translation and mapped into effect expressions attached to the arcs going out of the transition representing the activityedge. in our interpretation, these functions remain at the respective net arc.



third, there are guard functions in square brackets on activityedges. they simply access the name space, and may read states of the objects in it. in our interpretation, they are moved upor downstream to the next net transition. again, the exact meaning is left for the modeler, and the expressions are turned into guards(closed boolean expressions) over the variables defined by the arcs adjacent to the transition representing the activityedge.



2.0 activity diagrams. in the remainder of this section, we assume that a is an activity that is mapped to the cpn n by the semantics above(i.e.[[a]]= n). we assume that there are sensible initial and final markings of n that correspond to initial and final states of a.



in this paper, a formal semantics of activity diagrams in uml 2.0 is defined. it is based on colored petri-nets and covers control flow, concurrency and data flow, but not procedure call, exception handling, and expansion regions(see[18,19,20] for these aspects). by a carefully choice of net formalism and inscription language, the standard analysis techniques and tools for cpns are made accessible for the verification and validation of uml activities.



since the semantics presented here preserves the structure of the original activity diagram in the resulting petri-net, it is very easy to map between activities and corresponding petri-nets, opening the road to easy mapping between an activity and corresponding cpn, and even visualisation of executions of activities. this is very difficult if not impossible for semantics based on a non-graphical formalism, like process algebras. finally, defining the semantics also helped identify a number shortcomings in the standard.



a tool implementation to support industrial case-studies is currently under way, together with extensions and automation of the analysis techniques. this effort is impeded, however, by the current lack of true uml 2.0 tools: despite the marketing promises by many vendors, there are currently no such tools available. with the official adoption of the uml 2.0 standard, we are hoping that this unpleasant situation will disappear.



