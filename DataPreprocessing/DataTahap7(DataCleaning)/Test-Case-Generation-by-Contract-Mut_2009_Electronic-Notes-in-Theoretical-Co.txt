based on c#, microsoft has built the spec# system. spec# extends c# with preconditions, postconditions, invariants, and a notion of ownership. in combination with boogie, a verification condition generator that uses common intermediate language(cil, part of) code as input, and z3 as smt-solver, capable of producing error models, a framework for automatically verifying code has been published. from contracts and implementation code, spec#/boogie is able to generate counter-examples when, e.g., a postcondition can not be proved.(due to the workings of boogie the reported example may be spurious.) one obvious advantage of having a counter-example is that it can be shown to the developer, so he/she understands why the contract can be broken. this approach has been pursued by the author of and resulted in a tool that enables counter-example execution.



and works similar to an event based system(e.g., event-b) where each action(function) has a guard and an update statement. within model programs, the update statement(i.e. the post-condition of the event) is the method body, whereas the guard is built by a slight abuse of the notion of a precondition.(strictly speaking, a violation of a precondition does not forbid calling the method.) using these guards and the postconditions in the method body, specexplorer does a state-space exploration to discover the transition system. note that these model programs lack a contract-like-specified postcondition.



this paper is organized as follows. in section 2 we repeat the most important definitions of the underlying theory and present a formula for mutation-based test case generation. in section 3 we introduce spec# and boogie and show how to link the refinement check of boogie with the test-case generation formula presented before. next, we discuss the proposed methodology, give an example in section 4 and evaluate difficulties arising in more complex environments in section 5. before concluding, we present related research.



we adopt the notion of[1,2] in that a test case is an abstraction of the system specification. within fault-based testing, one tries to cover anticipated faults, hence we are searching for test cases that can distinguish between the correct and an incorrect specification. we adopt the standard notion that faults are results of errors(bugs), while a failure is a wrong behavior caused by a fault.



in order to generate faulty specifications from the correct one, we rely on mutation operations, similar to the work presented in. the underlying assumption is that the developer will create an almost correct implementation and that errors will be minor deviations from the correct specification. thus, by slightly mutating the correct specification and calculating test cases to distinguish the two versions, we cover most of the errors.



boogie is a static program verifier that relies on the smt-solver z3 in order to discharge the proof obligations. boogie defines its own input language(boogie), so different front-end systems can use boogie for automated reasoning. spec# is an extension to c# and adds features for contract based program verification. internally, spec# relies on boogie.



boogie reports several counter-examples when more than one pre/postcondition does not hold. this might be, e.g., due to non-deterministic behavior of cm that potentially violates several conditions, or in the case both, preand postcondition, were mutated. adding mutated preand postconditions at the same time, however, is not recommended, as a mutated precondition may hide contract violations of the postcondition.



from the counter-example we now have observed the input values, and the return value of the mutated method. we still lack the expected return value according to the specification. unfortunately, we can not observe this value directly from the error-model provided. this is because the postcondition is checked within following statement:



one of the main features of spec# is that it is able to work with all data types offered by c#. this includes reference types, value types, as well as generic types. spec# also comes with annotations for some parts of the.net core library. because microsoft seems serious about bringing contracts to the every-day-developer, it is reasonable to expect even better contract coverage of core-libraries in future. taking all this together makes spec# a promising target for automated test case generation. however, the same reasons also make test case generation a complex task, which is also reflected to some part within the reported counter-example.



at different times within the computation process, these functions will return different values. this is reflected by different heap generations in the counterexample:$heap means the initial generation that is followed by$heap@0.(the successorship is encoded elsewhere in the counter-example.)



besides these object-creation issues, there are more fundamental ones. for testcase generation we rely on the solving capabilities of z3: if the solver can not prove a given verification condition, even if it is true, we will try and create a test case. however, given that we start from a proved specification and also have control over the mutation operations being performed, this case seems controllable.



testing, as, e.g., proposed in can be used to generate test cases from preand postconditions. this work has been integrated into the latest version of the eiffel development environment. goal is to provide the developer immediate feedback if an implementation does not adhere to the given contract. failing test cases are stored and re-run during the next compilation cycles. since we can modify our approach to fit the pex methodology, we could also use random testing in order to generate discriminating test inputs. because random testing only guarantees to find specific cases with a certain probability we did not further evaluate this combination.



