the work we present in this paper is based on an approach we have developed to model mobility and performance information at the design level. this approach consists in translating a uml2.0 model onto a process algebra, namely pepa nets, model. once the process algebra model generated, performance analysis of the modelled system can be carried out. in this paper, we show how to use this approach to investigate the performance of a software retrieval service.



in this paper, we show how to investigate the performance of a software retrieval service using our approach. the retrieval service, which is based on knowledgedriven agents, allows mobile users to select, retrieve and install softwares. we show that our approach allows modelling both the service architecture and the service process itself in a natural manner.



structure of the paper: in section 2, after a brief overview of the uml diagrams used and the pepa nets formalism, we present the main lines of the automatic translation of a uml model into a pepa net one. in section 3, we present the case study of a software retrieval service. we first describe the software retrieval service, then its corresponding uml model and the generated pepa net model. finally, the performance analysis of the studied service is developed. concluding remarks and the extensions of this work are discussed in section 4.



semantics of an interaction operator is described informally in the uml2.0 superstructure specification. below we give the meaning of the operators used here: alt designates that the fragment represents a choice of behaviour. at most one of the operands will execute. the operand that executes must have a guard expression that evaluates to true at this point in the interaction. if several guards are true, one of them is selected nondeterministically for execution.



par designates that the fragment represents a parallel merge between the behaviours of the operands. the event occurrences of the different operands can be interleaved in any way as long as the ordering imposed by each operand as such is preserved. loop specifies an interaction fragment that shall be repeated some number of times. this may be indicated using a guard condition. the loop fragment is executed as long as the guard condition is true.



by default the number of tokens that are carried along an edge is one, but an input or output pin can collect several tokens of the same type. it is also possible that a pin can only accept a certain number of tokens. we write{upperbound= n} next to a pin to indicate that the maximum number of tokens that can be stored in that pin is n. if the current number of tokens at the pin is n and the pin is an input pin, then no edge leading to that pin is allowed to fire.



a pepa net is made up of pepa contexts, one at each place in the net. a context consists of a number of static components(possibly zero) and a number of cells(at least one). like a memory location in an imperative program, a cell is a storage area to be filled by a datum of a particular type. in particular in a pepa net, a cell is a storage area dedicated to storing a pepa component of the specified type. the components which fill cells can circulate as the tokens of the net. in contrast, the static components cannot move.



as a pepa net differentiates between two types of change of state, so we differentiate the action types associated with each of these. the set of all firings is denoted by af. the set of all transitions is denoted by at.



several agents take part in the software retrieval process. there are four static agents(knowledge engineer, broadcaster, alfred, software manager), one per place, and four mobile agents(integrator, trader, browser, salesman) who can travel from a place to another. in the following, we briefly describe the behaviour of the different agents in the places of the system.



the user computer agents: the user has at its disposal an efficient majordomo called alfred. this static agent is in charge of storing all possible information about the user computer. moreover, when an agent wants to show/retrieve data to/from the user, it has to do it with the help of alfred who will create the appropriate user interface for each case.



the software place agents: the software manager agent creates and provides the browser agent with the catalogue of the available software, according to the needs expressed by alfred on behalf of the user. the browser agent has to travel to the user place in order to refine the catalogue of software through its interactions with the user. once the user selects a piece of software, the browser agent creates the salesman agent. this new agent carries the program selected by the user to its



for more details about the software retrieval process, we refer the reader to. in the following we show how to model the software retrieval service using our approach. we first present the uml model, then the generated pepa net model.



the software retrieval service can be modelled using an iod. the agents involved in this service are translated into object types. each mobile agent is modelled using a token object type, whereas each static agent is modelled as a local object type to a node. moreover, the behaviour of each object in the iod is described using a state machine diagram. all these diagrams are described and explained in the following.



the communication between object types modelling mobile agent integrator and static agent broadcaster is assumed to occur in the iod node modelling the broadcast place where the static agent is located. thus token type integrator is assumed to travel to this iod node in order to inform object type broadcaster about the new services provided by the gsn before returning to iod node modelling the software acquisition place. this solution takes advantage of the fact that integrator is a mobile agent and the places where it travels are all located in the gsn. this avoids the introduction of an additional token type.



object type browser is first woken up(awake browser/t) by the softmanager which will provide it with the catalogue(provide catalog/t). bringing the catalogue, the browser goes to ucomputer(go ucomputer/r5). once there, either the query is refined(refine query/a3) or the software is chosen(choose info/a2). in the first case, the browser goes back to softplace with a refined query to get a new catalogue. in the second case, it goes back to wake up salesman(awake salesman/b4).



recently several tools have been developed to support uml2.0 features. however the new features of uml2.0, in particular iods, are not all supported by these tools. moreover few tools support the xmi import/export functions. our approach has been implemented using the enterprise architect tool 2 which supports both the iod and the xmi import/export functions.



in the near future, we are interested in addressing crucial issues as design consistency and completeness. in this context, several approaches have been proposed in the literature. however, none of them is based on the iods which are a characteristic of uml2.0. we are also interested in investigating the translation complexity.



