in this paper we investigate how the semantics of a register-based ir can be mapped to stack-code. we introduce a novel program representation called treegraphs. treegraph nodes encapsulate computations that can be represented by dfs trees. treegraph edges manifest computations with multiple uses, which is inherently incompatible with the consuming semantics of stack-based operators. instead of saving a multiply-used value in a temporary, our method keeps all values on the stack, which avoids costly store and load instructions. code-generation then reduces to scheduling of treegraph nodes in the most cost-effective way.



the remainder of this paper is organized as follows. in section 2 we provide background information and survey the related work. section 3 introduces our treegraph ir and the basic treegraph scheduling algorithm. in section 4 we discuss the minimization of overall stack manipulation costs. section 5 contains experimental results. we draw our conclusions in section 6.



generating register-code for arithmetic expressions was first studied by andrei ershov. sethi and ullman used ershov numbers to devise an algorithm that they prove to generate optimal code for arithmetic expressions. aho and johnson used dynamic programming to generate optimal code for expression trees on cisc machines.



instruction fetch k duplicates element k(counted from the top) and pushes the duplicate onto the tos. the stack size is incremented by one. if there are less than k elements on the stack, the machine will go into the error state and will terminate the execution.



proof. the properties of dag g can only be destroyed by adding an edge that introduces a cycle. condensating dag g to a tree-graph h(f, a) does not introduce additional edges, because every tree of forest f becomes a single node representing the root of the tree. the edges of the tree-graph a correspond to the cut-set c. 2



all experiments were performed on an intel xeon 5120 server running linux centos 5.4 with kernel version 2.6.18. we selected 24 c benchmark programs from the testsuite that comes with the llvm compiler infrastructure. our tinyvm backend cannot handle floats and struct args yet, which is reflected in our selection of benchmarks.



in this paper we investigated how the semantics of a register-based ir can be mapped to stack-code. we introduced a novel program representation called treegraphs. treegraph nodes encapsulate computations that can be represented by dfs trees. treegraph edges manifest computations with multiple uses. instead of saving a multiply-used value in a temporary, our method keeps all values on the stack, which avoids costly store and load instructions. values that are in the correct stack slot for(some of) their users are duplicated so that they can be consumed without stack manipulation. all other values are lifted to the top of stack via a fetch instruction. we implemented our treegraph scheduler with the llvm compiler infrastructure for tinyvm, a stack-based embedded systems vm for c.



