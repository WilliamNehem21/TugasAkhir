protocols and standards like soap(simple object access protocol) and http(hypertext transport protocol) are used to construct web services. rest is a description of potential design principles of current web architectures. it focuses on the scalability of component interactions, generality of interfaces and independent deployment of components.



idempotent property. besides, model checker pat(process analysis toolkit) is used to verify the constraints and properties in our model. finally, giving a case study about the process of buying food, we use our achieved architecture to model the whole process and show the constraints and properties fulfilled in the case.



using standard methods. with the uris, the system aims to do something meaningful, so browser should know what to do with the uri. the browser knows it because every resource supports the same interface. the uniform interface between components makes rest distinguished from other network-based architec-



http calls these uniform interfaces(or standard methods) verbs, and the set of standard methods includes get, post, put, delete, head and options. in this paper, we only take the first four verbs into consideration because only these four methods are related to resources. almost all applications which claim to be restful use http methods to communicate, but many of them misuse these four basic methods. so we introduce the whole rest architecture together with http methods in our following model to approach the practical use of rest, with a hope of reducing the misuse of the great and promising architecture. the meanings of these methods are defined in the http specification and are introduced briefly in the following part, along with some guarantees about their behaviors. a method is called safe if it has no effect on the resource. and if a method is idempotent, it means duplicate actions cause no effect.



representations of resources. a resource representation is a description of the state of the resource at a given time. a state may have different multiple representations. for example, a web page can be presented as html, or xml, or just an image of its content. the format of representation is negotiated by the client and server and should be understood by the application. the multiple representations of a resource make it available to anyone who knows how to use the web.



hypertext-driven is the most important principle of rest which makes it distinguished from other architectures. it focuses on the point that all data are linked to each other. and the rest architecture insists on the principle of hypertext being the engine of application state. we give the following failure case of hypertext driven behavior: constraint is proved. the complete codes of this proof will be given in the appendix. we also check the safety and idempotence properties of http methods in our model in similar ways and prove that method get keeps safety, and methods get, put and delete keep idempotence in our model. the result lives up to the http stan-



the customers in the whole process are clients in our model. they can place an order using post method, update an order using put method, ask for the cost of the food using get method and take the food away using delete method. we show each of them in the following part and the mapping of the model can also be found.



in our case, cook is the server in our model. a cook receives orders and returns what customers need. as the resource part, all meaningful things in a system can be a resource. in our restaurant, food are resources, an order of food is a resource too. the mapping of cook and resource are similar to the mapping from customer to client. we do not list the trace of them any more.



for the future, we will go on the research of rest in formal ways and analyze more properties about it. besides, we will apply our model to practical applications. using constraints proposed in section 5, we will check existing restful systems to find out whether they fulfill the basic principles of rest and http.



this work was partly supported by the danish national research foundation and the national natural science foundation of china(grant no. 61061130541) for the danish-chinese center for cyber physical systems. it was also supported by national high technology research and development program of china(grant no. 2012aa011205), national basic research program of china(grant no. 2011cb302904), national natural science foundation of china(grant nos. 61021004 and 91118008), shanghai stcsm project(grant no. 12511504205), and key lab of information network security, ministry of public security(no. c12604).



