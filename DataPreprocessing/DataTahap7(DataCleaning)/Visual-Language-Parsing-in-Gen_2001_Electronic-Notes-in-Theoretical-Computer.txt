unfortunately, lggs are still not convenient enough to de ne a vl in general because of at least missing negative application conditions(nacs) and further conditions for rules. therefore, a new form of lggs, called contextual layered graph grammars(clggs) was developed which support vertex embedding, nacs, and complex predicates. this approach includes the denition of layering conditions guaranteeing termination of the parsing process. furthermore, static analysis techniques like critical pair analysis[10,9,12] are available which can be exploited to identify a maximum set of rules which may be parsed without any need for backtracking.



might be tricky to use in more complex cases. clggs are related to reserved graph grammars(rggs), another restricted and modi ed form of lggs. rggs o er some kind of embedding mechanism, too, but do not support the de nition of predicates(however, not used in genged) and nacs. their rules have to be locally con uent, so that the polynomial naive lgg parsing algorithm in works. backtracking for handling recognized critical rule pairs is not supported.



the genged environment implements concepts for the visual speci cation of vls. a vl-speci cation is given by a visual alphabet and a visual grammar. in the visual alphabet the types of symbols and links occurring in a vl are speci ed. the visual grammar consists of a start expression and a set of context-sensitive grammar rules. originally the grammar rules de ne the syntax-directed editing commands of a language-speci c graphical editor, i.e., the visual grammar does not only comprise language-generating rules but a convenient set of editing rules as well. in the following we show that the concepts of vl-speci cations can be easily extended by the speci cation of parsing.



genged is based on algebraic graph transformation and graphical constraint solving. a visual alphabet is represented by an attributed graph structure signature 2 and a constraint satisfaction problem de ning positions and sizes of visual elements. correspondingly, a visual grammar is represented by an attributed graph structure grammar where the constraint satisfaction problem of each visual expression is satis ed. moreover, we distinguish two syntactical levels, namely the abstract syntax describing the logical part of a vl, and the concrete syntax denoting the layout.



according to the constituents of a vl-speci cation, the genged environment comprises an alphabet editor and a grammar editor. the speci ed alphabet is the input of the grammar editor, where so-called alphabet rules are generated de ning the editing commands of this editor. in this way it is guaranteed that only correct visual expressions can be de ned by a language designer. for the transformation of visual expressions according to the abstract syntax the agg system is used. the graphical constraints are solved by the constraint solver parcon.



the parsing algorithm proposed in(which is based on contextual layered graph grammars(clgg) and critical pair analysis) is now implemented using the agg system, hence we call it agg graph parser. in genged we integrated the agg graph parser such that we yield a parser for visual languages. in this sense, not only syntax-directed editing but also free editing is available in speci c graphical editors generated by genged, similar to. as before, the alphabet editor supports the de nition of visual alphabets comprising the types for symbols and links. based on a visual alphabet, the grammar editor may be used in two ways: for the de nition of comprehensive syntax-directed editing rules as well as for the de nition of a parse speci cation. the latter one is explained in the following.



graph rules occurring in a parse grammar consist of a left-hand side(l) and a right-hand side(r) over typed(labeled) graphs. parts of both rule sides are related to each others. the related parts are preserved during a graph transformation. all non-related graph objects of l are deleted, all nonrelated objects of r are created. moreover, a rule may contain a set of nacs specifying exactly those fractions of matching situations that must not exist for a rule to be applicable.



assigning rules as well as vertex and edge types to layers such that a certain layering condition is satis ed(cf.), the layer-wise application of rules(according to the rule layer) toa given terminal graph always terminates. roughly speaking, the layering condition is ful lled if each rule deletes at least one vertex or edge coming from a lower level(deletion layer) and creates graph objects of a higher level(creation layer).



in the genged grammar editor, the critical pairs are generated automatically from the agg graph parser, but the remaining constituents the language designer has to de ne. for our example of simpli ed uml class diagrams, the parse rules express the deletion of visual symbols such that for each lexical symbol of the visual alphabet there is one parse rule. these rules and the layer function are proposed in the following.



according to the visual alphabet, a class symbol always has to be linked to a package which is expressed by the left-hand side l of the rule. moreover, we expect that the user always inserts a class symbol together with a class name represented by the node x':cn holding the value represented by the variable cn. the nac states that the class name has to be unique in one package.



the layer function for our small example is given below. thereby we use the abbreviations dl for deletion layer, cl for creation layer, and rl for rule layer. note that the rule layer supports the ordering of rule application, whereas the deletion and the creation layer are necessary for the termination of the parsing algorithm. note that the language designer must not de ne creation nor deletion layers for links; those are generated automatically in dependence of the symbols the links have in their domain, i.e., the source vertices of the corresponding link edges.



for the critical pair analysis which must be done only once, the agg graph parser is called with the parse grammar and the layer function. the resulting parse speci cation and the visual alphabet is the input of the graphical editor where the user can manipulate visual expressions(diagrams) in a free editing style. in order to check the visual expression against the visual syntax, the agg graph parser gets the parse speci cation together with the visual expression as input and checks whether the expression is correct or not. the result will be illustrated in the graphical editor.



m. lowe and j. muller. critical pair analysis in single-pushout graph rewriting. in g. valiente feruglio and f. rosello llompart, editors, proc. colloquium on graph transformation and its application in computer science. technical report b-19, universitat de les illes balears, 1995.



