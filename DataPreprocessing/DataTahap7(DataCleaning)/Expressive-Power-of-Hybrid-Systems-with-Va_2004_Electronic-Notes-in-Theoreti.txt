often the systems one wants to model are control systems embedded in an environment from which stimuli may come with different laws. as an example, sensors controlling temperature or water level may have a non-linear evolution law. hybrid systems have been introduced to describe similar situations(see and). a hybrid system consists of a finite number of locations, variables and transitions. in each location variables change their value as a function of the time elapsed, and satisfy, at each instant, a formula called the invariant. the system can take a transition to evolve from a location to another location. the transition is labeled with a formula that gives the values of variables triggering the transition and their new values after the transition has been performed. different variants of this model have been considered. classes are



in and it is proved that the same result holds also for the non classical classes. now the question we answer in this paper is whether the classes introduced in and are effectively an extension of the classical ones, namely we prove expressiveness results. we show that the class of parametric real hybrid systems is a subset of the class of polynomial real hybrid systems, but it extends the class of linear real hybrid systems. we prove that the class of polynomial real hybrid systems is the most expressive among the classical classes, but the class of d-hybrid systems extends it. moreover, the classes of s-hybrid systems and linear mixed hybrid systems extend the classical class of linear real hybrid systems and include cases which cannot be described by d-hybrid systems and hence by polynomial real hybrid systems.



h is in the class p(resp. p ar, l and mix) of polynomial real hybrid systems(resp. parametric real hybrid systems, linear real hybrid systems and linear mixed hybrid systems) if all formulae in h are polynomial real formulae(resp. parametric linear formulae on real variables, linear real formulae and mixed linear formulae).



algorithm rsa for smart cards(see). the array a represents the 128 bits of a key. the real variables x and y and the integer variable h are auxiliary variables. the encryption of a message m with both a public key n and a secret key k consists in computing mkmod n. the algorithm is the following:



in the previous section we have recalled the classes described in,, and. in this section we recall the properties of these classes described in the same papers. more precisely, for each subclass of id considered it is possible to define a notion of symbolic representation and therefore it holds that reachability is semidecidable. another interesting result of closure binds the classes of hp ar and hl.



real variables or coefficients of linear formulae. this is not allowed in the class of l. by the result proved in, if one wants to calculate for which rates or coefficients a linear real hybrid system satisfies a given property, it is sufficient to calculate the set of rational instances for which the parametric real hybrid system which satisfies it.



we consider now the expressive power of polynomial formulae. in the following proposition we prove that polynomial formulae give more expressiveness to hybrid systems. so, parameters of hp ar permit to express languages not accepted by hybrid systems in hl. but, since parameters do not change their value, there exists a language recognized by hp and not by hp ar.



finally, we consider the power gained with arrays. in the following proposition we prove that arrays give memory to hybrid systems, which therefore gain in expressive power. this gain of expressivity is obvious since we have considered arrays with infinite length, but, in the proposition, we prove that to gain expressive power it is sufficient to have arrays with finite parametric length.



therefore the class of hs is more expressive than the class of hmix. moreover, if we consider the intersection of( s) with() the power of arrays permits to prove that there exists a language in the intersection but not in( mix). as an example, the length of the cache of example 1 is not fixed and is expressed with a generic value for the integer variable size. this definition means that the cache is finite but we do not make any assumption on the value of its length. this cannot be simulated without arrays with infinite 5. if a mix or p exists, with l real variables as done in proposition 3.4, then the admissible times of a run with 2 n activity steps and 2 n transitions steps, with n> l, are given by a formula in which we must use a real variable id to express ti= id id= t'i. it means that we need n real variables, but this contradicts the hypothesis n> l.



