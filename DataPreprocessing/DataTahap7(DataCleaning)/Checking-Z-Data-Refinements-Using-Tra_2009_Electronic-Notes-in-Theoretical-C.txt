data refinement is useful in software development because it allows one to build more concrete specifications from abstract ones, as long as there is a mathematical relation between them. it has associated rules(proof obligations) that must be discharged; this is normally performed by interactive theorem proving systems. this work proposes an approach based on refinement checking to automatically check the z data refinement rules. our approach captures the relational semantics of these rules by using the functional support of cspm(the machine-readable version of process algebra csp) and uses the traceability feature of csp to 1 we are thankful to cnpq, which supported us with grant no. 485488/2006-0. we also thank dr. juliano iyoda for suggestions in early drafts of this paper and professor jim woodcock for substantial help on the final version of this paper.



the translation from z to cspm follows the strategy implemented in a support tool. some adjustments are necessary as we deal with refinement rules instead of the behaviour of z specifications. moreover, the translation has limitations because some z constructs might not have a direct correspondent in cspm. nevertheless, all solutions in this direction present similar limitations[2,3,15].



the general contribution of this paper concerns the reduction of user intervention when employing data refinement in the development process. currently, user intervention is necessary only to provide the relation(as a z schema) between the abstract and the concrete specifications, and to translate all schemas into cspm. our specific contributions are:(i) the usage of csp to capture the relational semantics of the z data refinement rules;(ii) the automatic verification of z data refinements given a retrieve relation, and;(iii) the automatic calculation of a retrieve relation, if one exists, to justify data refinement.



each rule in the above definition has an interpretation in the relational semantics. the initialisation(b-init) must be checked once and establishes that for each concrete initial state there is a corresponding abstract initial state. the applicability(b-app) and the correctness(b-corr) rules must be checked for all operations. the former says that whenever it is possible to perform the abstract operation aopi, it must be possible to perform the concrete operation copi on the corresponding concrete state and concrete input. the latter establishes that whenever it is possible to perform the abstract operation, and the corresponding concrete operation



the abstract state space(statea) is determined by the set containing all pairs involving the type status; that is,{(busy,vend)| busy<status, vend<status}. this corresponds to the set{(no,no),(no,yes),(yes,no),(yes,yes)}. another functional feature is local definition(the let... within construct).



note that the traces refinement here does not take into account the existence or inexistence of nondetermism nor undefinedness. they are dealt into the proof obligation rules which were fully translated into cspm. then, the backrules process actually simulates the verification of the proof obligation rules. thus, our approach does not verify a data refinement between z specifications using their corresponding process representations[1,2,4]. instead is performs the real validation of z data refinement into a model checker, like a human being does to discharge the proof obligations.



the relation r is calculated by extension, following the principle behind model checking(exhaustive search). thus, all possible sets of combinations between concrete and abstract states are covered, without user intervention and with the guarantee that a retrieve is found as long as there is a refinement. in order to validate the refinement, we only need to check if the set validretrieves(.) is not empty. to do that, we use the process existretrv and the refinement assertion as follows:



the approach presented in shows the correspondence between data and process refinements using the csp semantics of z. thus, a z data refinement is valid, if and only if, the refinement between the corresponding csp processes is valid. we see our work as complementary, as we follow the relational semantics of z data refinements. we use processes only to establish a behaviour for each proof obligation instead of the behaviour of a z specification. this is more useful to find out, via counterexamples, which rule invalidated a refinement. in principle, both approaches deal with the same class of problems and have the same limitation when domains are infinite.



in the conversion from z to alloy enables the use of sat solvers to verify z data refinements. like our approach the user does not need to provide a retrieve relation a priori; it can be computed automatically. as alloy is very close to z, the conversion used in is, in principle, simpler than ours. moreover, the way alloy deals with finite domains is more efficient than fdr. nevertheless, alloy does not provide traceability features to capture rules and operations that invalidated a refinement. a common limitation of both approaches concerns infinite state space systems. the use of data abstraction[6,9] in both approaches would be helpful to limit the scope of data domains.



in this paper we proposed an approach for automatically checking z data refinements. we consider the relational semantics of z and the functional support of cspm to write the proof obligations as functions that basically check set inclusions. then, we provided template processes whose refinement check is valid if and only if the proof obligations are satisfied. although fdr is not the best tool to check our functions, it provides traceability features that allows one to find invalid rules and discards the use of theorem proving. three immediate results emerge from this:(i) automatic verification of a data refinement between two specifications;(ii) automatic calculation of a retrieve relation that assures a data refinement; and(iii) the use of counterexamples for adjusting the specification whenever the refinement between them is invalid. we used(iii) to detect a subtlety in a common example of the literature.



cannot deal with the state space explosion directly. nevertheless, by integrating our approach with data abstraction[6,9] we can limit the data domains(to finite but sufficient subsets of them) before applying our approach. this is a topic for future work. furthermore, we performed the translation to cspm by hand. however, we intend to add this feature in the tool presented in. currently, the tool is able to translate z specifications into processes. this new feature will discharge the user of manipulating the cspm code of the proof obligations.



