in heterogeneous computing environments, finding optimized solutions continues to be one of the most challenging problems as we continuously seek better and improved performances. task scheduling in such environments is np-hard, so it is imperative that we tackle this critical issue with a desire of producing effective and efficient solutions. for several types of applications, the task scheduling problem is crucial, and throughout the literature, there are a plethora of different algorithms using several different techniques and varying approaches. ant colony optimization(aco) is one such technique used to address the problem. this popular optimization technique is based on the cooperative behavior of ants seeking to identify the shortest path between their nest and food sources. it is with this in mind that we propose an aco-based algorithm, called aco-rnk, as an efficient solution to the task scheduling problem. our algorithm utilizes pheromone and a priority-based heuristic, known as the upward rank value, as well as an insertion-based policy, along with a pheromone aging mechanism which aims to avoid premature convergence to guide the ants to good quality solutions. to evaluate the performance of our algorithm, we compared our algorithm with the heft algorithm and the mgaco algorithm using randomly generated directed acyclic graphs(dags). the simulation results indicated that our algorithm experienced comparable or even better performance, than the selected algorithms.



as computing hardware continues its amazing pursuit into new frontiers, we must be cognizant that the software aspect ought to keep abreast. rapid improvements and technological advances in computer architecture have over the years, continue unabated. the ever presence of heterogeneous multiprocessor systems, no doubt, keep gaining increasing popularity because of their varied yet incredible capabilities. this increased parallelism has brought with it diversity, high throughput, along with the potential of higher and even better performances. so to fully exploit these environments, task scheduling continues to be resolutely pursued in order to reap and maximize whatever benefits these computer systems have to offer. task scheduling, is defined as the assignment of tasks of a parallel application to different processors in a manner that minimizes the overall completion time or schedule length(sl) of the application while ensuring that all constraints or interdependencies are fully satisfied. in a heterogeneous computing environment, scheduling of these interdependent tasks becomes a lot more challenging, because of the different processor speeds



the focus of our research is static task scheduling, where information about available resources is known before execution and scheduling may be done at compile time. whether static or dynamic, task scheduling is classified as an np-hard problem[4,6]. however, it has been well studied and a number of suboptimal heuristic-based solutions have been proposed. these solutions may be categorized as list scheduling, clustering, task duplication and guided random search methods.



tion, and thus reduce the overall schedule length, by duplicating some predecessor nodes. task duplication, like clustering, takes advantage of the zero or negligible communication cost when two dependent tasks are placed on the same processor. the redundancy in task duplication can however, lead to the inefficient use of the processors. guided



given the versatility of aco algorithms, we present an aco-based algorithm. our proposed algorithm incorporates the upward ranking concept, found in the heft algorithm, in our prioritization methodology; an insertion-based policy and a pheromone aging mechanism which seeks to create new opportunities, to produce efficient schedules. our research investigates the application of an efficient solution to the static task scheduling problem in a heterogeneous environment.



contrary to foraging ants in nature which deposit continuous pheromone trails, aco approaches have implemented various alternatives. for example, in the original ant system(as) ants deposit pheromone only to completed solutions. alternatively, the ant colony system(acs) makes step-by-step online(local) pheromone deposits by every agent during the development or building of solutions and introduces a further offline(global) update of pheromones to the best solution of the iteration. furthermore, some kind of evaporation mechanism or technique is implemented, allowing the ants to consider new search areas within the search space. additionally, some aco techniques employ local and global optimization strategies to further increase the quality of their solutions.



the aco mechanism has been applied to various optimization and scheduling problems. it has been integrated with other random search algorithms, for example, the genetic algorithm and tabu search. aco has also been combined or incorporated with list scheduling, for instance, the ant-ls algorithm and the aco-tms. this combination of pheromone trails and list scheduling heuristics further enhances the possibility of good quality schedules.



state transition(stask) rule(1) and a processor using the state transition(sproc) rule(4) to construct a schedule. the selected task is removed from the ready list, and appended, along with the processor, to the ant list. the ready list is then updated to contain those children nodes whose parents have already been scheduled. this process is repeated until all the tasks have been mapped. during the first iteration, our algorithm aco-rnk, does not employ the state transition rules to select either task



lower slr values than both the mgaco and heft algorithms. overall, our algorithm outperformed the other algorithms for graphs in all the ccr value categories. our work performed better than the mgaco algorithm by 5.5% and 19.4% better than the heft algorithm.



the mgaco algorithms. the heft experienced or showed minimal increase in the speedup throughout this experiment. the average speedup experienced by the mgaco was steady however it was not as pronounced as the aco-rnk. this shows, as the number of nodes of the dag was increased our proposed algorithm continue to yield the smallest schedule lengths. overall, our proposed algorithm was better than heft and mgaco by 24 and 4.7% respectively.



incorporates random searches, to further guide the ants toward quality solutions. we compared our proposed algorithm to the heft and the mgaco algorithms using a set of various randomly generated task graphs. our experimental study showed that the aco-rnk outperformed these algorithms yielding better results when it came to the average speedup and average slr for varying dag sizes as well as the varying dag shapes. for future work, our plan is to investigate our proposed algorithm with a least weight or maximum weight, in our ranking strategy; incorporate a downward rank, and use a range of iterations as well a wider range of processors. we also intend to investigate and add both local optimization and stagnation strategies to further increase its efficiency as an algorithm for tackling the static task scheduling problem.



