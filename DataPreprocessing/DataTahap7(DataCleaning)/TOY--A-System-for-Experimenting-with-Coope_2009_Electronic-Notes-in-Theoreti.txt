this paper presents, from a user point-of-view, the mechanism of cooperation between constraint domains that is currently part of the system t oy, an implementation of a constraint functional logic programming scheme. this implementation follows a cooperative goal solving calculus based on lazy narrowing. it manages the invocation of solvers for each domain, and projection operations for converting constraints into mate domains via mediatorial constraints. we implemented the cooperation among herbrand, real arithmetic(r), finite domain(fd) and set(s) domains. we provide two mediatorial constraints: the first one relates the numeric domains fd and r, and the second one relates fd and s.



t oy computations solve goals and display computed answers. t oy solves goals by means of a demand driven lazy narrowing strategy combined with constraint solving. answer constraints can represent bindings for logic variables, as in answers computed by a prolog system. some features of t oy are:



the herbrand solver is always available, and the real and finite domain solvers can be optionally loaded. a beta version of t oy(available soon) now also includes a solver to handle set constraints that allows constraint solving on intervals of sets of integers. the set constraint domain has been implemented in the beta version which has not been yet released.



projection takes place during goal solving whenever a constraint is submitted to its solver. at that moment, projection builds a mate constraint which is submitted to the mate solver(think, for instance, of a finite domain solver as the mate of a real solver, and vice versa). projection rules described in[5,7] relying on the available bridges are used for building mate constraints between the finite and real domains. the next example shows how projection builds and posts new mate constraints.



finite domain solver to drastically prune the domains of x and y. therefore, if we have a huge grid and a tiny triangle and the projection is enabled, then the computation time is notably reduced. note that not all the constraints are projected; for example, the labeling constraint.



the last line in the console panel(toy>) is the t oy system prompt, which allows writing commands, executing goals, and computing expressions. the typical way of using the system is to write t oy program files(with default extension.toy) and consulting them before submitting goals. following this, you write the program in a text file, and then you use the following command in order to compile and load the t oy program:



otherwise, when the file is located at another path, you can firstly change to the new path using the command/cd(path), where path is the new directory(relative or absolute). however, things are much easier from the acide environment since you can simply push the button run and get the file compiled and loaded. in addition, solvers can be activated by pushing the buttons cflpr, cflpfd, and cflpset.



y for its time to complete(duration), and z for the identifier of a machine m(a resource needed to perform task tx). in this case, this problem is solved using the cooperation of solvefd and solves with the program below. the constraint functions and operators that belong to the finite domain are: sum,#=, and#<, and set constraint functions are: domainset, cardinalset, and intersectset. bridges between finite domain variables and set variables are established by the function#--/2 in such a way that a goal f#-s projects constraints involving the variable s into constraints involving the variable f.



this paper demonstrates, via examples, the potential of the cooperation mechanism available in the t oy system, a functional logic language that provides four constraint computation domains(i.e., herbrand domain, real numbers, integersthe finite domain-, and sets of integers), and one domain(i.e., the mediatorial constraint domain), for communicating the computation domains.



