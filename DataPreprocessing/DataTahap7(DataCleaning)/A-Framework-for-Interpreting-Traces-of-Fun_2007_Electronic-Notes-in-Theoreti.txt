this paper is part of a comprehensive approach to debugging for functional logic languages. the basic idea of the whole project is to trace the execution of functional logic programs by side effects and then give different views on the recorded data. in this way well known debugging techniques like declarative debugging, expression observation, redex trailing but also step-by-step debuggers and cost center oriented symbolic profiling can be implemented as special views on the recorded data. in addition, creating new views for special debugging purposes should be easy to implement. this is where the contribution of this work sets in. we describe how the recorded data is interpreted and preprocessed in order to yield an extremely simple yet versatile interface to base the different views on. using this interface, formulating the basic functionality of declarative debugging, for example, is a matter of a few lines.



it is the basic credo of declarative programming that abstracting from certain aspects of program executions greatly improves the quality of the written code: typical sources of errors are principally omitted, like issues of memory management, type errors and multiple allocation of variables. the program is much nearer to the logic of the implemented algorithm than to its execution. this makes code much more readable, comprehensive and maintainable.



visualization of computation a straightforward approach to search bugs is to represent the actual program execution in a human readable form and to provide tools to comfortably browse this representation. such tools, beginning with step-by-step debuggers, have been developed for many languages, imperative and declarative alike. these tools normally depend on a specific backend of the supported language and seldom aim at portability. some very elaborated examples for declarative languages include vimer for the logic language mercury, ozcar for the mozart system 3, a backend for the language oz and teabag



value oriented debugging approaches based on analyzing what values have been computed by evaluating a given expression within the program are for instance declarative debugging(cf. for logic,[22,23] for functional, for functional logic programming), observations for lazy languages(cf. for functional[5,19] for functional logic languages 4), backward stepping and redex trailing(for functional languages only, cf. resp.).



7 the other main thread of formal reasoning about functional logic languages is based on. it is still a desideratum to give the missing prove link between the cln calculus of or one of its further developed successors with the big-step semantics of. a good place to start might be the dn calculus of.



in addition to the points above, we also extended the approach of by recording information about the actual pattern matching performed while executing the program. this information turns out to be crucial when integrating more of the tools described in section 1.2. the hat system of was able to emulate, among others, redex trailing, observations and declarative debugging because these are all value oriented techniques. these techniques are concerned with the denotational mapping between expressions and their values. the other tools mentioned in section 1.2 are concerned with operational aspects of the program execution. as it is not possible to reconstruct the state transformation induced by executing the program from the data recorded by hat, it is not possible to integrate such more operational tools. in our approach, in contrast, the operational behavior of the program can be reconstructed and, thus, at least conceptually, the whole range of tools mentioned can be emulated as special views on the recorded data.



the present paper is concerned with how to provide a simple yet versatile interface to the traces of program executions in the functional logic language curry. it describes on one hand how the traced data is represented in curry(section 2) and proposes a much simpler data structure to represent general computations(section 3.1). in addition, techniques of how to elegantly obtain and process this data structure are described(section 3.2). using this structure it should be easy to implement tools like the ones mentioned in section 1.2, at least as far as the access to run-time data about program executions is concerned.



the basic idea is that representing computations in the framework of functional logic languages can be as simple as categorizing computation steps into a) single step b) subcomputation c) branching. a single step might be further distinguished to be an unfolding, the binding of a variable, the suspending of a computation or perhaps some representation of a side effect. value oriented techniques are then characterized by subcomputation to the most evaluated form whereas operation oriented tools feature subcomputations to head normal form only. these different kinds of subcomputations can be seen as interpreting the program trace in the light of different evaluation strategies. computing the most evaluated form is like employing a strict strategy while stopping at head normal form is lazy evaluation.



as mentioned above, this paper is based on two preliminary works. in, we have extended a semantics for functional logic languages by the construction of a trace graph. in we have presented a program transformation which writes by side effects information into a file from which a graph in the sense of can be produced.



argument arrows have a dot at their origin. a node referred to by an argument arrow represents an expression which was an argument of the function represented by the node from whence the arrow came. in the example, the node labeled add is the origin of two argument arrows both pointing to the node _5, which represents a free variable. this corresponds to the expression(add x x) of the example program.



there are application nodes like the ones labeled with main, add or true. these nodes represent the unfolding of the function(resp. application of a constructor) corresponding to the label. each application node has one position for each argument of the corresponding function(or constructor).



in lazy functional(logic) languages there are possibilities to construct graphs in an elegant way. first, sharing already introduces directed acyclic graphs. for instance, both arguments of the tuple introduced by(let x=e in(x,x)) physically refer to the same memory address at run time. but also cyclic graphs can be constructed where recursive let expressions are allowed. for instance, the expression(let ones=1:ones in ones) introduces at run time a structure with a cyclic reference in the heap. representing graphs in this way has some advantages:



tnode r p par info the node with number r belongs to the computation of path p and has the node with number par as parent. the kind of the node(application, failure, free variable or case, cf. above) is then given in the info part which will not be considered in the following.



then the building of the graph as a cyclic data structure can be implemented as a function manipulating three of these search structures: 1) a mapping of node references to the list of their successor references 2) a mapping of argument references to the list of their corresponding node references and their paths 3) one mapping of node references to trace nodes.(the structure of trace nodes was defined in section 2.1).



the rules for successor and redirectarg only add information to the maps. the last rule contains the recursive let which adds the information of the current trace node to the node map. the elements of these trace nodes depend on the call to cycle on the thus updated map. this ties the loop and makes sure that the result of cycle is a cyclic structure in the heap which directly resembles the trace graph. an elegant definition in this way is only possible in lazy languages.



there are, however, drawbacks to this technique: this definition can only work efficiently if the whole trace fits into memory. this is not to be expected for all applications we would like to be able to debug. therefore there is an alternative implementation to build the trace graph. this alternative implementation represents the graph as a potentially infinite term. each node is upon demand retrieved from the trace file by side effects. this is comparable to lazy file access by the curry standard function readfile. the access to the parents, successors or arguments is not possible in constant time as it involves some kind of binary search on the file for each access. but as there are no cycles in the graph, the degree of heap referencing is much lower and therefore trace nodes can become garbage much more often. this ensures that the program will only have parts of the trace graph in memory at each moment.



the definition of computations above allows to generate, combine and process computations in a monadic programming style. computations are a combination of list and state monads. as is well known, list monads are very expressive for nondeterminism and a state monad is useful to abstract from information which has to be updated regularly during computations. in our case, this information includes for instance the path for which a given subgraph has to be interpreted.(cf. the discussion of the path concept above.)



after describing the representation of computations we gave an account of how these representations can easily be generated and processed in a monadic programming style. overall we have shown how different advanced features of curry can be used to lift the low level information contained in the execution trace to a higher abstraction. advanced programming techniques work together in order to create a framework in which interpretation for traces can elegantly be formulated. future work includes giving an overview of the different strategies and views we realized using this framework.



