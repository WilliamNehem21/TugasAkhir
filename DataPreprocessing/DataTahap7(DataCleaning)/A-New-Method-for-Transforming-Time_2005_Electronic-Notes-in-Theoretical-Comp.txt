automaton(ra). the state space of a ra is finite but can suffer from state explosion. to reduce such a state explosion, several minimization methods have been proposed to transform a ta into an automaton with much less states than the corresponding ra[3,15,5,6,14,1].



hypothesis 2.1 each ta is assumed deterministic, i.e., if tr1 and tr2 are two transitions executing the same event from the same location, and are enabled at the same time, then they lead to the same location and reset the same clock(s).



alarm. it is clear that these two expressions define the same timing constraint. in this example, setexp can be used to obtain the second specification from the first one. the programming of the alarm corresponds to a set event, and the occurrence of the alarm corresponds to an exp event.



setexp, that transforms a ta a=(l, a, c, t, l0) into a sea setexp(a), is realized in two steps. step 1 does not modify the structure of a: it replaces the resets of transitions by set events(substep 1a), and rewrites the guards of transitions in the form of order constraints relatively to exp events(substep 1b). step 2 generates setexp(a) that describes explicitly all the possible orders of events, including set and exp events in addition to the events of the alphabet of a. steps 1 and 2 are presented in sects. 4 and 5, respectively. the results of steps 1 and 2 will be denoted a'= stepone(a) and b= setexp(a)= steptwo(a'), respectively.



lines 3-4: we consider the case where: exp(ci; k) is the expected next expiration of ci, and another exp(ci; k') becomes expected after exp(ci; k). in line 3 the assignment models the fact that exp(ci; k) has occurred and that exp(ci; k') is the expected new expiration.(k' is indicated by kr(ci)[1].) in line 4, k' is removed from kr(ci) because kr(ci) is a sequence that specifies the values to which ci will expire after its next expiration exp(ci; k').



theorem 6.1 states correctness of setexp and implies the possibility to transform a study of a system modelled by a ta a into a non-real-time form(i.e., setexp(a)), and thus, we can adapt non-real-time methods of study. this idea has been used in conformance testing[7,10] and supervisory con-



property 6.2 is more interesting than property 6.1 because it does not restrict the modification of constants of guards by multiplying all of them by the same value. the determination of a class of ta in which property 6.2 holds, is not trivial and we intend to study it in a near future.



properties 6.1 and 6.2, and remark 6.1 show an advantage of using sea instead of ra. in fact, contrary to ra, in practice the state space of sea does not increase with the magnitudes of the constants used in timing constraints.



