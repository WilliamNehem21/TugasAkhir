as explained e.g. in, one can broadly distinguish two approaches to this enterprise: either we take a language as given and look for a mathematical model to fit it, or we take the model as given and look for a corresponding programming language. a possible motivation for the latter approach is that it offers the prospect intuitionistic linear logic. each of these in turn gives rise to a cartesian closed category in the usual way, so including the underlying category itself we have a total of seven models of interest. we summarize the construction and basic properties of these models in section 2.



the mere existence of all these structures on g is in itself an indication of the mathematical fecundity of this model. however, the above definitions may appear rather mysterious, and the precise computational power embodied by the respective exponentials may not be very evident at this stage. the programming language characterizations to be given below will shed more light on this.



one final jigsaw piece is needed. we have seen how the encaps operators provide means to construct non-trivial strategies at types!2g,!3g(that is, strategies that are not merely promotions of strategies for g), but we do not yet possess a way to do this for!1g. the following operator fills this gap.



the grammar for terms may be taken to be identical to that of fpc, but the typing rules differ in three ways. first, the type constructors x,-> are replaced by*,-o respectively throughout the rules for pairing, unpairing, abstraction and application.(the overloading of term constructs here should cause little confusion given that we are keeping the type constructors syntactically distinct.) secondly, as usual in linear type systems, the treatment of contexts in multi-premise rules is



we shall present extensions of the above languages that are complete for each of our models(whence, by the discussion at the end of section 2, the models are also fully abstract for these languages). we give here only a high-level route map of the proofs, omitting many interesting details. a source file containing lingay implementations for most of the programs here claimed to exist is available online.



the methodology of obtaining definability results via universal types has led us to a selection of primitive operators which shed light on the computational power of some natural mathematical models. as we have seen, this approach leads us to a choice of programming primitives related to, but not the same as, those usually encountered in existing languages: we are led to favour data encapsulation rather than store cells as the basic mechanism for stateful behaviour, and coroutining rather than first-class continuations as the basis for a flexible approach to control. moreover, our operators exploit the potentialities of a linear type system to advantage, e.g. offering the programmer valuable runtime security guarantees in the case of lincatchcont. finally, our semantic approach highlights certain combinations of these operators which may coexist safely(for instance, we can combine powerful control operators with certain higher order store constructs without losing runtime safety). we suggest that the primitives we have discussed might serve as a basis for the design of practically useful language constructs(we are pursuing this possibility in our ongoing work on eriskay).



