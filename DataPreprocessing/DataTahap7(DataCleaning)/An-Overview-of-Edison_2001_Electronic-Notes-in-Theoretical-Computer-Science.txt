or through the ghc/hugs cvs repository. in its current state, edison is mostly a framework. that is, i provide signatures, but not yet a full range of implementations. i hope that edison can become a community effort, and i welcome anybody to submit new implementations of the edison abstractions.



but this function is not a method, so there is no hope of substituting something more efficient for a particular implementation of collections. but how could this operation be implemented more efficiently? for example, it is tempting to implement map on a binary search tree by the usual map function for trees. however, besides limiting map to the special case where cin and cout are identical, this implementation is incorrect. there is no guarantee that f preserves the ordering of elements, so the result would not in general be a valid binary search tree. many edison data structures can and do support a function unsafemapmonotonic that assumes that f preserves ordering, leaving this fact as a proof obligation for the user, but this function is not general enough to deserve to be a method.



a library like edison will only be successful if it is embraced by the community. i welcome community involvement at every level from design to implementation. i am especially eager for user feedback, and i repeat my earlier invitation for anybody to submit new implementations of the edison abstractions.



thanks to simon peyton jones for many discussions about the design of edison. thanks also ralf hinze and sigbjorne finne, who have each contributed to the edison infrastructure. finally, thanks to koen claessen and john hughes for their wonderful quickcheck tool.



