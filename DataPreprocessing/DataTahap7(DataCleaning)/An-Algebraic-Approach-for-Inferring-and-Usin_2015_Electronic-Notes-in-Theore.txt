in this paper, we propose a unifying handling of symmetries in kappa. we follow an algebraic approach, that is based on the single pushout semantics of kappa. we model classes of symmetries as finite groups of transformations between site graphs, which are compatible with the notion of embedding(that is to say that it is always possible to restrict a symmetry that is applied with the image of an embedding to the domain of this embedding) and we provide some assumptions that ensure that symmetries are compatible with pushouts. then, we characterise when a set of rules is symmetric with respect to a group of symmetries and, in such a case, we give sufficient conditions so that this group of symmetries induces a forward bisimulation and/or a backward bisimulation over the population semantics.



symmetries play an important role in rule-based modelling. one simple example is the case of symmetric sites, that is to say when two sites in a protein have exactly the same capabilities of interaction. symmetric sites can be handled with in various ways according to the choice of modelling language. some languages propose syntactic solutions to describe them explicitly. in bngl a site can occur several times in the interface of an agent. in the formal cell machinery language and in react(c), one can use hyper-edges to connect several sites of the same kind



in this paper, we propose an algebraic framework for describing symmetries among site-graphs. this framework is abstract enough so that all the kinds of symmetries that we have mentioned so far can be dealt with in a uniform setting. indeed, circular permutations and homogeneous symmetries(in which the same permutation is applied with the sites of all the agents of a given connected component) can easily be defined as subgroups of another(simpler) group of symmetries. then, we show that our notion of symmetry is compatible with the single pushout construction, which we use as a foundation of the operational semantics of kappa. we give sufficient conditions for a model to be symmetric with respect to a given group of symmetries, and give extra-assumptions so that these symmetries induce forward bisimulations or even back and forth bisimulations over the markov chain that is induced by this model.



whenever f is an embedding between two site graphs e and f, the site graph e(resp. f) is called the domain of(resp. the image of) f and is denoted as dom(f)(resp. as im(f)). the number of embeddings between two site graphs g and h is denoted as[g, h]. whenever g= h, f is called an automorphism. we notice that the identity function always induces an automorphism. the identity automorphism of a site graph e is denoted as ie. two embeddings f and g such that im(f)= dom(g) compose in the usual way(and form an embedding between the domain of f and the image of g). moreover, whenever two embeddings f and g satisfy



the constraint i ensures that d is a local greatest upper bound. the constraint ii ensures that when a site gets bound, we know which site it is bound to. the constraint iii ensures that the sites which occur both in the left hand side and in the right hand side of a rule, have a binding state in the left hand side of this rule if and only if they have a binding state in the right hand side of this rule. the constraint iv ensures that when an agent is created, the state of all its sites is documented.



there are several ways to restrict a symmetry to the domain of a weak embedding, because a symmetry can be described as the product of two others or because the weak embedding can be described as the composition of two others. in such a case, it is important to get the same result. thus, we need to strengthen def. 3.3, which is the purpose of the two following definitions.



we notice that any embedding is forward compatible with the set of symmetries that is defined in exa. 3.12. but in general, if an embedding h is g-forward compatible for a given set of symmetries g over site graphs, h is not necessarily



a valid set of symmetries induces group actions over the basic elements of the semantics of kappa. we are going to give the list of them in this subsection. we introduce a valid set of symmetries g that we will use all along the subsection.



def. 3.6 ensures that the image of a fully specified site graph e by a symmetry in ge is a fully specified site graph. thus, the group action of symmetries over site graphs induces another group action over fully specified site graphs, as written in the following proposition.



we notice that transition labels are quotiented according to two criteria. on the first hand, labels are seen modulo symmetries. on the second hand, since we cannot detect whether a model is symmetric without gathering the rules in isomorphic classes(see def. 4.3), we consider rules modulo isomorphism.



our framework captures not only symmetries among sites, but also homogeneous symmetries when the same transformation has to be applied to all the agents of a given type in a same connected component, or in the whole site graph. in these cases, symmetries do not always induce bisimulations. a forward bisimulation is induced whenever any symmetry that can be applied to the domain of a refinement of a rule(in the model) can be extended to the right hand side of this refinement. if additionally, one can extend the symmetries that can be applied to the domain of a refinement of a rule to the left hand side of this refinement as well, then the induced bisimulation is indeed a back and forth bisimulation.



we have not investigated yet which syntactic criteria over the rules would ensure that symmetries over the domain of their refined rules can always be extended to their left hand side and/or their right hand side. it depends on the set of symmetries that is considered. we have not investigated either whether our notion of symmetry is also compatible with the double pushout semantics of kappa.



