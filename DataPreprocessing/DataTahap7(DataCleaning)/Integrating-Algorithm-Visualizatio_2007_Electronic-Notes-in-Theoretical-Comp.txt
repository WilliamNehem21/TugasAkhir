system(or ready-made examples) and to design, create, and integrate the visualizations. thus, teachers need to have easier ways to find and produce visualizations that provide the needed interaction. for meeting these needs, several av systems have been developed. some of the systems that are currently being developed are animal, jawaa, and matrixpro. these systems provide different ways to create the animations as well as different types of interaction. thereby, integrating these systems could be beneficial, for example, by allowing the teacher to select the system based on the level of interaction it provides.



the working group did a lot of good work in coming up with xml specifications for different aspects of av. however, a lot of the work remains on the level of examples instead of concrete specifications. one idea of the working group was to continue the work in the future. the work presented in this paper builds on the specifications and examples provided by the working group and introduces more concrete specifications in the form of a language, xaal(extensible algorithm animation language), defined to be used in data exchange between algorithm animation systems. in addition, this paper introduces a set of tools that will hopefully benefit av system developers. the aim of the tools is to allow data exchange between the current av systems as well as support other useful export formats from the systems.



xaal(extensible algorithm animation language) is defined as an xml(extensible markup language) language by specifying the allowed document structure. xml makes it easy for software to process data using the multitude of different tools and architectures available today. in addition, transforming xml documents to different xml formats or text is relatively simple and flexible using xslt(extensible stylesheet language transformations).



scription languages was made. based on this survey, a taxonomy of algorithm animation languages was defined. this taxonomy indicates that the features of an algorithm animation language can be roughly divided into three categories: data structures, graphical primitives, and animation. problems arise when trying to exchange data between tools that have different approaches to av. for example, animal describes animations using mostly graphical primitives, whereas matrixpro uses only data structures. these different approaches have been taken into account when defining xaal.



in this section, we will briefly introduce the most important features of xaal. the reader should note that this text is merely an overview of the language. for a more detailed discussion, see and for the actual xml schemas, see the xaal website.



the basic graphical components that can be composed to represent arbitrarily complex objects(e.g., a tree data structure) are graphical primitives. the graphical primitives in xaal are as specified by the iticse xmlwg, where the following have been defined: point, polyline, line, polygon, arc, ellipse, circle and circle-segment, square, triangle, rectangle, and text.



other features specified by the working group are the definition of reusable shapes from the graphical primitives and changing the visual appearance of the graphical primitives using reusable styles. both of these are intended to aid the creation of more complex primitives. listing 1 in appendix a gives an example of a shape definition that uses graphical primitives.



xaal supports the usage of data structures to specify the visualizations, lowering the effort needed to produce them. the set of structures is basically the same as, for example, in jawaa: array, graph, list, and tree. the content of these data structures is described using nodes(or indices in case of an array) and edges connecting the nodes. the structures can form arbitrarily complex hierarchies. on the other hand, the simplest kind of structure can be a string or a number. moreover, to support the different approaches of existing algorithm animation languages, all structures support an optional graphical presentation indicating how the structure should be visualized. listing 2 in appendix a shows an example of an array definition.



abstract data structure operations are operations that depend on the semantics of the target structure. in xaal, the available operations are insert, delete, and search. as with the elementary data structure operations, these operations can have an optional part describing how the operation should be visualized using graphical primitive animation. in addition, for systems that do not know the semantics of the abstract operation, the behavior can be optionally described using elementary data structure operations. listing 4 in appendix a shows an example of a delete operation.



we have defined an xml schema for xaal. to make the language more modular, we have divided the schema into several xml schema documents. this kind of modularity makes it possible to more easily change or reuse some parts of this language in other languages.



our objective was to implement xaal in a modular way that could be useful for other av system developers in their aims at implementing the iticse xmlwg specifications. in this section, we will introduce two different processing pipelines to add xaal support into existing algorithm animation systems. in addition, we will briefly describe a prototype implementation of xaal and several transformations.



in this paper, we have introduced an xml language for describing algorithm animations. the language is based on the specifications and examples of iticse xmlwg. in addition, we have described a set of tools for exchanging data between algorithm animation systems. in the following, we will discuss what use this work can have for participants of the iticse xmlwg, developers of av systems, and teachers wanting to use av.



