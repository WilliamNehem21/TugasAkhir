several model-checker based methods to automated test-case generation have been proposed recently. the performance and applicability largely depends on the complexity of the model in use. for complex models, the costs of creating a full test-suite can be significant. if the model is changed, then in general the testsuite is completely regenerated. however, only a subset of a test-suite might be invalidated by a model change. creating a full test-suite in such a case would therefore waste time by unnecessarily recreating valid test-cases. this paper investigates methods to reduce the effort of recreating test-suites after a model is changed. this is also related to regression testing, where the number of test-cases necessary after a change should be minimized. this paper presents and evaluates methods to identify obsolete test-cases, and to extend any given test-case generation approach based on model-checkers in order to create test-cases for test-suite update or regression testing.



the need for efficient methods to ensure software correctness has resulted in many different approaches to testing. recently, model-checkers have been considered for test-case generation use in several works. in general, the counter example mechanism of model-checkers is exploited in order to create traces that can be used as test-cases.



we present different methods to create new test-cases after a model change. these test-cases can be used as regression tests if the number of test-cases executed after a model change should be minimized. they are also used in order to update testsuites created with older versions of the model.



this paper is organized as follows: section 2 identifies the relevant types of changes to models and relates them to a concrete model-checker input language, and then presents our solutions to the tasks of identifying invalid test-cases and creating new ones. section 3 describes the experiment setup and measurement methods applied to evaluate these approaches, and presents the results of these experiments. finally, section 4 discusses the results and concludes the paper.



in practice, the kripke structure is described with the input language of the model-checker in use. such input languages usually describe the transition relation by defining conditions on ap, and setting the values of variables according to these conditions. a transition condition c describes a set of states si where c is fulfilled. in all successor states of these states the variable v has to have the next value n:



in order to use a model-checker to decide if a test-case is valid for a given model, the test-case is converted to a verifiable model. the transition relations of all variables are given such that they depend on a special state counting variable, as suggested by ammann and black. an example transition relation is modeled in listing 2, where state denotes the state counting variable. there are two methods to decide whether a test-case is still valid after a model change. one is based on an execution of the test-case on the model, and the other verifies change related properties on the test-case model.



now the problem of checking the validity of a test-suite with regard to a changed model reduces to model-checking each of the test-cases combined with the new model. each test-case that results in a counter example is obsolete. the test-cases that do not result in a counter example are still valid, and thus are not affected by the model change. a drawback of this approach is that the actual model is involved in model-checking. if the model is complex, this can have a severe impact on the performance.



theoretically, the latter case can report false positives, if the removed transition is subsumed or replaced by another transition that behaves identically. this is conceivable as a result of manual model editing. such false positives can be avoided by checking the new model against this change property. only if this results in a counter example the removal has an effect and really needs to be checked on testcases. although verification using the full model is necessary, it only has to be done once in contrast to the symbolic execution method.



test-cases that are invalidated by a model change can be useful when testing an implementation with regard to the model change. obsolete positive test-cases can be used as negative regression test-cases. a negative test-case is such a test-case that may not be passed by a correct implementation. therefore, an implementation that passes a negative regression test-case adheres to the behavior described by the old model.



once the obsolete test-cases after a model change have been identified and discarded, the test-cases that remain are those that exercise only unchanged behavior. this means that any new behavior added through the change is not tested. therefore, new test-cases have to be created.



alternatively, when checking test-cases using the symbolic execution method, the counter examples in this process can directly be used as test-cases. in contrast to the method just described resulting test-cases can potentially be shorter, depending on the change. this can theoretically have a negative influence on the overall coverage of the new test-suite.



that make up a coverage criterion as properties that claim the items cannot be reached. for example, a trap property might claim that a certain state or transition is never reached. when checking a model against a trap property the modelchecker returns a counter example that can be used as a test-case. we generalize the approach of xu et al. in order to be applicable to a broader range of test-case generation techniques. the majority of approaches works by either creating a set of trap properties or by creating mutants of the model.



the second category of test-case generation approaches uses mutants of the model to create test-cases(e.g.,[3, 2, 11, 8]). for example, state machine duplication combines original and mutant model so that they share the same input variables. the model-checker is then queried whether there exists a state where the output values of model and mutant differ. here, the solution is to use only those mutants that are related to the model change. for this, the locations of the changes are determined(e.g., in the syntax tree created by parsing the models) and then the full set of mutants for the changed model is filtered such that only mutants of changed statements in the nusmv source remain. test-case generation is then performed only using the remaining mutants.



as a third method to create change related test-cases we propose a generic extension applicable to any test-case generation method. it rewrites both the model(or mutants thereof) and properties involved in the test-case generation just before the model-checker is called. this rewriting is fully automated. the model is extended by a new boolean variable changed. if there is more than one change, then there is one variable for each change: changei. these variables are initialized with the value false. a change variable is set to true when a state is reached where a changed transition is taken. once a change variable is true, it keeps that value. the transition relation of the change variable consists of the transition condition of the changed variable is shown in listing 4.



the methods described in this paper have been implemented using the programming language python and the model-checker nusmv. all experiments have been run on a pc with intel core duo t2400 processor and 1gb ram, running gnu/linux. we automatically identify changes between two versions of a model by an analysis of the abstract syntax trees created from parsing the models. we use a simple example model of a cruise control application based on a version by kirby et al.. in order to evaluate the presented methods, the mutation score and creation time of new and updated test-suites were tracked over several changes. there is a threat to the validity of the experiments by choosing changes that are not representative of real changes. therefore the experiments were run several times with different changes and the resulting values are averaged.



suite. this is because the test-suites created with the focus method are bigger than new test-suites for the transition coverage criterion. adaptation generally achieves the lowest mutation scores. however, the mutation score is only slightly smaller than for the update method, so a significant performance gain could justify this degradation.



in this paper, we have shown how to decide whether a test-case is still valid after the model it was created from is changed. that way, it is possible to reuse some of the test-cases after a model change and reduce the test-suite generation effort. different methods to create test-cases specific to the model change were presented. we used the model-checker nusmv for our experiments and as an example model syntax. however, there is no reason why the approach should not be applicable to other model-checkers. experiments have shown that the presented methods can be used to update test-suites after a model change, although there is a trade-off between performance improvement and quality loss.



the main problem of model-checker based approaches in general is the performance. if the model is too complex, then test-case generation will take very long or might even be impossible. therefore, it is important to find ways of optimizing the approach. the potential savings when recreating test-suites after a model change are significant. even for the small model used in our evaluation a large performance gain is observable when only selectively creating test-cases for the model changes. although a model is usually more abstract than the program it represents, the model size can still be significant. for instance, automatic conversion(e.g., matlab stateflow to smv) can result in complex models.



there are some approaches that explicitly use specification properties for testcase generation[3, 11, 2]. this paper did not explicitly cover the aspects of testsuite update with regard to specification properties. however, the idea of test-suite focus directly applies to such approaches, as well as the presented test-suite update techniques. the cruise control example is only a small model, and the changes involved in our experiments were generated automatically. this is sufficient to show the feasibility of the approach. however, actual performance measurements on more complex models and realistic changes would be desirable.



