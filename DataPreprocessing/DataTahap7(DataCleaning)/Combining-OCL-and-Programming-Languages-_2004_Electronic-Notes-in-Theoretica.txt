model processing tasks, like model checking, merging, slicing, and synthesis, need efficient and maintainable mechanisms to define models, as well as to query, compare and manipulate information in them. although the object constraint language(ocl) is primarily meant for expressing constraints for uml models, it can also be used for various model processing purposes. in this paper we discuss the needs for, and possibilities of, using ocl for processing models, and show how we have applied and extended ocl. we also introduce a model processing tool using ocl as an integral part of model manipulation facilities. we especially emphasise the need of combined use of ocl and programming languages in uml model processing.



as a specification language ocl naturally lacks facilities for user interaction and for reading from, or writing to, files. but the biggest problem, from a model processing point of view, is that ocl is defined to be side effect free. it is therefore not possible to change a value of an object or create a link between objects. the restriction is an integral part of the language, affecting many of its aspects, and can not be simply ignored. side effects can be described using



to summarise, we need a mechanism for processing uml models, providing not only primitive access to the model but also high-level support for implementing model processing tasks. in this paper we discuss the needs and possibilities of using ocl for model processing purposes, and show how we have applied and extended ocl. we also introduce a model processing environment, xumli, where we have used ocl as an integral part of model manipulation facilities. we especially emphasise the need of combined use of ocl and programming languages in uml model processing.



the main goal of our research is to provide automated tool support for various software engineering processes, each introducing a set of model processing tasks. we argue that these tasks can be performed by, and composed of, a set of primitive model processing operations. the model operations, in turn, are combined together to form a task using a higher-level composition mechanism, offering constructs such as flow of control(e.g. decisions, guards, flows, synchronization). we refer to the usage of these operations with the term model processing.



perhaps the simplest example of a model operation is searching for, and filtering of, information in given uml models. these operations provide side effect free checking and validation of models. an obvious example of such an operation is enforcing the standard uml well-formedness rules. similarly, an operation could check whether a model follows given process or domain specific heuristics: for example, ensuring that all nodes in an inheritance tree should be abstract classes and all leaf classes should be concrete is a heuristics rule suggested by the open software process[8, pp. 90]. other examples of model operations are transformation operations, projection operations, refactoring operations, and set operations.



diagrams, synthesis of structure diagrams from interaction diagrams, and synthesis of class diagrams from object diagrams. a projection operation produces a new uml model based on an existing one, the new model being a projection of the original one(e.g. abstraction or slicing). as an example of a projection operation especially useful with large models produced during a reverse engineering process, consider generating compressed structure diagrams based on existing ones.



ocl has a set of predefined types and operations for these types. they are defined in what is called the ocl standard library, and it is mandatory for implementations to include them. the predefined types include integer, real, string, boolean, and a very useful set of structured data types. the type structure is also appended by all the classifiers from the current application model. in some situations there is need for more operations, e.g. taking the square root, or even new types. ocl offers powerful extension mechanisms for altering the language.



-directive in c and c++. there is also a stronger mechanism for attaching a variable to a type as a new property or a method. this is especially useful for augmenting a classifier from the application model with a method that simplifies the ocl expressions used. for serious extension needs, it is possible to define new basic types or new methods independent of the application model. these extensions are placed in a namespace and can be used in normal ocl expressions.



since ocl is by definition side effect free, it can be used directly only for operations, which do not modify the state of the modelled system. this rules out ocl as a viable option for many model processing operations, e.g. the transformation operations. the restriction of not being able to modify the model is too inherent in the language to be dismissed lightly. there is more to changing that than simply introducing an assignment operator to the syntax. if it was possible to modify objects, the evaluation of an expression could no longer be considered instantaneous. in order to keep the expressions deterministic, execution order would have to be defined. one might also have to rethink the way failed navigations and other operations are handled, etc. as stated before, the restriction is interwoven deep into the language. in order to change it, one would need to think carefully what other aspects might be affected.



separating the side effect free part from the assignment. the approach could be carefully modified to allow more than one post condition and even loops, but it does take some effort. although it works with the simple example given, in practice operations are much more complicated and expressing them with above mentioned crippled post conditions yields hopelessly illegible operations. it takes a lot of skill and planning even for an implementer with extensive knowledge and experience on ocl to craft the necessary ocl expressions. if the operation is defined in a declarative way, translating it into a normal ocl post condition is often rather straight forward. this is no longer true for the limited post conditions. if the operation is defined as an algorithm, the translation becomes very difficult indeed.



general purpose programming languages can, of course, be used for model processing. they often have a wide variety of structured data types, good selection of flow control statements, and sufficient mechanisms for user interaction, etc. however, for model processing purposes, they are a bit too general. lacking direct support for processing uml models causes even simple queries to turn into long and complicated code. the point gets lost in the middle, and it is no longer clear what the high level idea was. this is the trade off between a general purpose programming language and a high level domain language. by narrowing the scope, a domain language can offer more complicated and better suited operations for specific tasks, but is no longer as useful for tasks outside its scope.



the example, albeit longish and not optimized for performance, shows a convenient way of establishing a constraint. the example also illustrates one nice feature of ocl, the ability to navigate over sets. for example, on line three, navigation stereotype.name refers to the names of all stereotypes of all the fetched classes. this makes it easy to state a constraint for a series of attributes.



approach is to enable authoring small model operations and combining them together, as if they were the primitive expressions of a very high level model processing language. the chaining of operations can be done with traditional programming languages, or by using a special visual language, visiome. visiome provides a very high level, visual programming paradigm that relies heavily on the usage of ocl together with a set of fundamental programming constructs, and is especially useful when defining software process related model processing functionality. the environment is not dependent of any specific case-tool, but offers a plug-in interface for components that



the ocl interpreter was developed in 2001, and therefore follows the ocl 1.4 specification. the interpreter was intended to be used internally by the visiome engine, but was later found very useful for individual model operations as well. due to the close relationship with the visual language and its simple type structure, the interpreter considers all user defined objects to



this section contains observations we have made during our two years of using ocl. we discuss some short comings of ocl as well as areas where it could be improved. the thoughts expressed describe specific problems, but we do not have detailed solutions to propose.



there are probably several factors involved. for example, the users are not as versed in the use of ocl as they are in their preferred programming language. the lack of guidelines for formatting expressions, e.g. indentation rules, might play a role, too, but it is not completely a matter of inexperienced users and badly written ocl. although the clarity can be improved with comments and variable definitions, it seems that the syntax is prone to hiding the structure of the expressions. undoubtedly the obscurity of the ocl 1.4 specification is partly responsible for the initial confusion. the readability and the organization of the specification have been greatly improved in the ocl 2.0 draft.



an example of a different kind of an advanced navigation is the transitive closure according to a specific navigation. this is quite a common expression, even the uml well-formedness rules are littered with them. for example, rule three for generalizableelement[17, pp. 2-59], which forbids circular inheritance, uses a transitive closure of the navigation generalization.parent[17,



if the language contained better support for accessing this type data, ocl could be extended using ocl itself even in the case of advanced generic operations. ability to define extensions in that way would mean that the extensions worked in any ocl interpreter, regardless of its origin. this would further improve portability of ocl expressions themselves. although portability of extensions is not important at the moment, it might become an issue in the near future, if case tools(and software designers) adopt ocl in a larger scale.



even before the eve of ocl 2.0 there have been papers where the writers have found, somewhat similar to us, ocl useful for querying information. for instance, hobart and malloy discuss using ocl queries for debugging c++, and marder et al. propose a uml repository and an api, based on uml metamodel, for managing and querying uml models. in the latter environment, ocl constraints can be used to specify and check uml models. the constraint can, for instance, hold design guidelines or semantic invariants to enforce validity of uml models.



nipulation of uml models. they use the uml action language to specify transformations, and ocl to express the selection criteria of the transformations. they mix an action language and ocl together to better describe both queries to the models and the manipulation of the models. although the approach of umlaut is close to ours, there are also differences. they use a domain specific language, and concentrate on model transformations. we have also a domain specific language for combining the operations, but the operations can be specified with any language supporting com, and our tool allows developing practically any kind of program, including arbitrary user interaction and external repository use.



we have used our environment for couple of years now, and it has proven its suitability for non-trivial model processing tasks and process support. according to our practical experience, using clearly separated ocl expressions for queries, etc. makes the code better organized and easier to comprehend. this improved readability also makes the code easier to maintain, which is very helpful during the early phases of the development.



in addition to using the platform to develop tool support for different processes and performing some case studies, we are also going to further develop the platform in the future. for instance, we will adopt uml 2.0 including ocl 2.0, and develop the ocl support of visiome further.



