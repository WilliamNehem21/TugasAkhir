available in eclipse. these include code browsing, text-editing with indentation, syntax-directed editing, semantic browsing, compilation, debugging, a uml-like case tool and an interface builder. furthermore, other features of modern ides such as syntax colouring and semantic tool-tips should be available.



plug-ins for beta should be implemented in beta. the reason for this is that it will allow for reuse of existing beta code from the mjolnertool. furthermore, if beta developers and users would have to switch to java in order to implement beta tools, the motivation for using eclipse will be smaller.



beta libraries and frameworks should in general be usable together with eclipse. for the non-gui frameworks no problems were expected, but for the gui libraries it is not at all clear to what extent this can be done when e.g. implementing eclipse plug-ins.



below two approaches for integrating beta with eclipse are described. the initial approach is to use jni to bridge java and beta via c. in this way, it is possible, in principle, to write parts of the plug-ins in beta. as said below, this turns out to be tiresome and very complicated to debug.



it is, however, a major task to generate class files from beta. class files are designed to support java and in many ways beta is more general than java. the reason why this was considered a realistic alternative was that the beta.eclipse project was carried out at the same time as a project for implementing beta on jvm 4 and microsofts clr/.net platform.



for eclipse text editing, a so-called indent strategy can be associated. this specifies a default behaviour for indentation of code. a default indent strategy called defaultautoindentstrategy exists in the eclipse class library. implementing a specific language indent strategy is obtained by overriding methods



the jdk 6 library provides an interface to native methods called jni 7. this allows code running in the java virtual machine to access library methods written in c. beta also has a c interface, which combined with jni makes interoperability between java and beta possible through c.



the implementation of the beta indent strategy by reusing beta libraries through jni consists of more than 1000 lines of beta code in several source files. this shows that this technique is possible to use for a non-trivial example. however, it has several disadvantages: one problem is that three different languages are used. this makes the integration tedious and complicated. not only is it complicated to write the code, but more importantly once written and compiled it is far from certain that it will work. loading of the libraries happens at run-time and this late binding of the code makes it impossible for the compiler to make even simple syntactic and semantic checks on e.g. the various method invocations. when a run-time error occurs in external code there is little information from the jvm. often one has to suffice with the error message crashed somewhere outside the vm. debugging such a bug is done by carefully looking at the source code and using print statements everywhere!



note that this paper is not an attempt to present the rationale behind the generality of beta. the purpose is to present some of the issues in mapping beta to jvm. this will be illustrated by more or less useful examples. the rationale behind beta has been presented in a number of other places such as[10,11]. a short summary of beta is given in the appendix.



the calculator pattern has three attributes r, set and add. r is an instance variable holding the current value of the calculator. the attributes set and add describe operations on the calculator. the operation set is used to set the value of r to the value of the enter-parameter v. the operation add adds the value of the enter-parameter v to r and returns(exit) the value of r to the caller.



the above example illustrates how a subset of beta is mapped to java. of the remaining parts of beta, the most challenging ones to map are inner, virtual patterns used as virtual classes, leave and restart(essential goto) out of nested method calls, patterns as variables and coroutines, concurrency and synchronization. the full mapping is described in. also describes the mapping to c#, which at the language level essentially is identical in terms of structure to the mapping to java. one major difference is that.net/clr and thus c# does not support full inner classes, which means that the mapping of nested classes has to include an explicit reference to the enclosing object. at the bytecode level there are of course minor technical differences between jvm and clr.



this pattern calls the indentation library directly, so with an implementation of beta on jvm, it is possible to drop all of the external libraries used for jni. note that the solution could just as well have kept betaautoindentstrategy in java, and accessed the beta library from there. this is up to the programmer.



the beta ide described so far gives the user the possibility to edit, indent, compile and run beta programs. another important part of an ide is the debugger. as mentioned above, the mjolnertool has a native debugger, so there are two solutions for adding a debugger to the beta plug-in: use the classic beta debugger or somehow use the java debugger available in the eclipse java-ide, called the jdt debugger.



what complicates the setting of breakpoints in beta sources, is the type name that has to be specified. as described in section 3, a beta source file is compiled into several class files, i.e. many types. given a specific beta file and a line number it is not trivial to find the corresponding generated class file. in a future version, the beta compiler would, however, be able to supply this information for the beta plug-in 9.



in the proof-of-concept implementation of the beta ide, it is possible to add line breakpoints to the beta source 10. i.e. the debugger can stop execution on specific beta imperatives. it is possible to perform single stepping, and objects may be inspected and modified with full source code information including beta names of classes and variables. this behaviour is mainly a property of jvm, which has complete type information, symbolic names, and source code line numbers for a given program. it is, however, impressive that it is possible to develop generic tools like eclipse and jvm that given a compiler that generates jvm bytecode can support a full symbolic debugger for a considerably different language like beta.



part of the project in porting beta to clr/.net has been to investigate the use of microsoft visual studio.net as an ide supporting beta. visual studio.net(vs) is a powerful ide supporting a number of languages and in this way, it is a possible alternative to eclipse. as indicated by its name, this ide supports the languages of the microsoft.net platform, which in many ways resembles the java platform. unlike java,.net is designed to support multiple programming languages.



the beta ide in eclipse has been used by a small team of people for browsing, text editing, indentation and compilation. this has been a promising experience and in the future increased use of eclipse as an ide for beta is to be expected. furthermore, when a full integration into visual studio has been produced, using beta in visual studio is to be expected as well. time will tell which of the two will turn out to be the preferred ide on windows.



number of new ones. most object-oriented languages have classes, subclasses and virtual procedures and some have procedure variables. since a pattern is a generalization of say class, procedure, function, the notions of subpattern, virtual pattern, nested pattern and pattern variable also apply to these abstraction mechanisms.



the subpattern covers subclasses as in most other languages. in addition, procedures may be organized in a subprocedure hierarchy in the same way as classes may be organized in a subclass hierarchy. since patterns may also be used to describe functions, coroutines, concurrent processes, and exceptions, these may also be organized in a pattern hierarchy.



the notion of virtual pattern covers virtual procedures as in simula, java and c#. in addition, virtual patterns cover virtual classes, virtual coroutines, virtual concurrent processes, and virtual exceptions. virtual classes provide a more general alternative to generic classes as in eiffel or templates as in c++. a nested pattern is a pattern defined textually within another pattern.



nested procedures are known from algol and pascal. in addition to nested procedure patterns, beta also supports nesting of class patterns. java supports nested classes in the form of inner classes. in c++ and c# a restricted form of nested classes is supported, but data-items in the enclosing object cannot be referenced from inner classes.



beta includes the notion of pattern variable. this implies that patterns are first class values, that may be passed around as parameters to other patterns. by using pattern variables instead of virtual patterns, it is possible dynamically to change the behavior of an object after its generation. pattern variables cover procedure variables(i.e. a variable that may be assigned different procedures). since patterns may be used as classes, it is also possible to have variables that may be assigned different classes, etc.



