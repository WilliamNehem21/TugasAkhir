we illustrate this approach by focussing on cows, a process calculus expressly designed for specifying and combining services, while modelling their dynamic behaviour. we present the calculus and one of the analysis techniques it enables, that is based on the temporal logic socl and the associated model checker cmc. we demonstrate applicability of our tools by means of a large case study, from the financial domain, which is first specified in cows, and then analysed by using socl to express many significant properties and cmc to verify them.



in this paper we illustrate this approach by focussing on cows(calculus for orchestration of web services), one of the many process calculi for soc that have then been proposed in the literature(among which we want to mention[8,7,15,13,9,14,5,6,26]). cows is a linguistic formalism for specifying and combining service-oriented systems, while modelling their dynamic behaviour. although all the above mentioned formalisms are inspired to well-known process calculi, the design of cows is also inspired to ws-bpel, the oasis standard language for orchestration of web services. this peculiarity allows to naturally define translations from cows specifications into ws-bpel code and vice versa(see e.g.



), opening the possibility to develop tools for(semi-)automatic ws-bpel code generation and(semi-)automatic program verification by cows based analytical tools. we will introduce the calculus in section 3 by first presenting its syntax and then informally presenting its operational semantics. in section 4, we demonstrate specification style and expressiveness of cows by means of the specification of a significant case study, namely a financial scenario studied within the eu project sensoria and presented in section 2.



hereafter we present a large case study from the financial domain which is currently investigated within the eu project sensoria on software engineering techniques for service-oriented applications. we start by providing an informal specification of the scenario, then a more detailed uml-based one(section 2.1) and finally a formal cows specification(section 4). we also point out(section 2.2) some desirable properties of the application that are later on formalized by socl and checked against the cows specification with the support of cmc(section 4).



send&receive action is represented. the link pin, labelled by link, specifies that service authentication is the partner of the communication, the output pin, labelled by snd, specifies that a message id is sent and the input pin, labelled by rcv, specifies that a message valid is received as an answer. the most important novelty in uml4soa is the possibility to install compensations of executed activities that are executed in case of failure as discussed in the following.



scope are terminated before starting execution of the relative fault handler. in fact, activities forcing immediate termination of other concurrent activities are usually used for modelling fault handling. the same mechanism, of course, can also be used for exception and compensation handling.



the case study we considered has been initially modelled by uml4soa; then, we have elaborated an handmade, ad hoc translation in cows. we leave for future work the definition of systematic and(semi-)automatic translations of uml diagrams into cows. to the best of our knowledge, only the core of uml 2.0 activity diagrams is provided with a semantics(see, e.g.,) and, in particular, no semantics is yet defined for uml4soa profile and uml compensation activities. we aim, firstly, at conservatively extending the semantics of uml4soa activity



on the opposite direction, another line of research we want to explore is to move from cows terms to implementations. a possibility could be to capitalize on the affinity that cows shares with ws-bpel by defining a translation of cows terms into ws-bpel programs. an alternative possibility could be to develop a(likely java-based) running environment for supporting execution of cows terms.



