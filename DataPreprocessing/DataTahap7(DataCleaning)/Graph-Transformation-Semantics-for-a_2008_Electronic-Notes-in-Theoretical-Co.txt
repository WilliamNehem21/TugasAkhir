it has been claimed by many in the graph transformation community that model transformation, as understood in the context of model driven architecture, can be seen as an application of graph transformation. in this paper we substantiate this claim by giving a graph transformation-based semantics to one of the original qvt language proposals; that is, we define a mechanism that will translate any model transformation definition in the qvt language to a graph production system whose effect is to apply that model transformation. the translation has been fully implemented.



unfortunately, as is the rule rather than the exception in language definitions, in the semantics of mtl is not defined formally but just described in natural language. this means that the basis for reasoning about, verifying and guaranteeing correctness of the model transformations, which is also mentioned in as one of the success criteria for a transformation language or tool, is absent. this is the problem we set out to address in the current paper, which is based on the msc thesis by the second author. in the next section we describe the approach we have followed, of which the essence is that we translate model transformation definitions to graph production systems, which do have the desired formal basis. in sect. 3 we show the approach on the basis of an example(actually taken from the qvt submission). in sect. 4 we evaluate the achievements and discuss some related approaches. note that within the scope of this paper it is impossible to describe the actual semantics in any detail. however, see for a full description.



there is already a large body of research that supports the use of graph transformation techniques as a basis for the formal semantics of model transformation, both practical(in the sense of tools, e.g.[12,2,26,3]) and theoretical(for instance investigating confluence and termination properties as in[17,8]). in this paper we also follow that route in order to define semantics of mtl. we will omit most of the theoretical background; see, e.g., for an extensive discussion.



ebnf grammar, resp. an abstract syntax meta-model. an example is given there also, which we use in the next section. unfortunately, here a problem exists, in that the example cannot be parsed according to the grammar and cannot be matched to the abstract syntax; nor do the concrete and abstract syntax seem to be consistent. in we report a host of problems and propose solutions; in the remainder of this paper we follow in actually working from the proposed solutions. 3 as pairs of labelled edges in opposite directions, and attributes as single edges. supertypes are not represented in the models; instead, any rule dealing with a meta-model type has to be duplicated for all(combinations of) subtypes. we discuss this briefly in the conclusion(sect. 4).



the left[a|b]and right[a|b]-production systems extract the aand binstance graphs from the linked graph produced by the rules discussed above. this is done by stripping away the nodes and edges introduced by the(a) and(c)-parts of the rules, as described in(5) above, as well as the elements of the target(for left) resp. source model(for right) that they link to.



related work. although there has been a lot of research on using graph transformation for model transformation, some of which we have reported in sect. 2, we have not seen the question studied in this paper, namely to give a graph transformation semantics to a pre-existing model transformation language, addressed elsewhere. instead, precisely the inverse trajectory has been followed in, where model transformations specified originally in a graph transformation formalism(viz., fujaba) are translated to the language mtl that we have also studied in this paper, after which they are interpreted by the tool tefkat.



gardner, t., c. griffin, j. koehler and r. hauser, a review of omg mof 2.0 query/views/transformations submissions and recommendations towards the final standard, in: first international workshop on metamodelling for mda, 2003.



