we propose a structure for the model of the ocl concepts that facilitates the use of ocl over a number of different metamodels. a carefully specified set of interfaces can be defined as a bridge, which enables a common library of ocl parser, analyzer, evaluator and code generator to be used in the context of a number of different metamodels. we have implemented bridges for three different metamodels, providing ocl for java, for kmf and for the eclipse modelling framework(emf). our kmf implementation will be updated to use uml 2.0 when it is finalised, the architecture proposed here facilitates an easy update path. this architecture provides a clean and well-defined division between the ocl model and the metamodel to which it is attached, whilst still providing the necessary linkage.



appendix a contains the ebnf for an lalr grammar we have used in our implementation. our grammar is distinct from the one defined in the standard in that it is unambiguous. the most noticeable difference is the manner in which we define the rules for the oclexpression non-terminal.



these aspects make it hard for rules to be written that correctly parse the language; we have solved the problem by separately listing the variation in number and style of iterator variable definitions. this would be made simpler if an alternative separator were to be used. a possible alternative could be a semicolon; such a separator is used within iterate expressions, hence it would not be inconsistent in the iterator expressions. without making a change along these lines the language can not include facility for multiple iterator variables



the parser generates an abstract syntax treei.e. a model of the text expression entered. this is of a form where there is a direct association between rules in the grammar and nodes in the tree. the ast is purely an abstract representation of the syntax, modelled as a tree.



before we can interpret the meaning of the syntax, we must provide a semantic context for the expression. this context involves two parts: the uml(or other) user model over which the expression is to be interpreted; and the entry point into that modeli.e. the type of the self variable.



the model defined in the ocl standard and named, incorrectly, abstract syntax model(asm), is such a model. we feel that this model is misleadingly named; it does not contain purely abstract syntax information, it contains a mix of syntax nodes and semantic nodes. a semantic node is a node containing information relating to the user model and context of the expression. we suggest that an alternative name be used. as the model contains semantic information referencing the user defined context model, we refer to this as the ocl semantic model.(not to be confused with a model of the semantics, which is something else not addressed in this paper.)



the classes from(ii) are distinguished in the standard by the definition that they come from various packages in the uml metamodel and they are additionally coloured white as opposed to grey. we redefine these classes to be members of a single package named bridge. they keep the same names as before, but should be considered to map to the classes form the uml model, rather than directly being classes from the uml model.



according to ocl 2.0 proposal collection and tuple types are not considered to be subtypes of oclany. this means that operations specific to oclany cannot be applied to instances of tuple and collection types. we do not find any reason why collection and tuple types cannot be considered subtypes of oclany and in fact we find that it be necessary that they are if we are to enable them to be type cast. for example, consider a set of type animal that we know to contain only objects of type dog, we may wish to perform a cast on the set, as shown in the following expression:



such an expression is not currently accepted syntactically(see above) or semantically, as the oclany operations cannot be used on collections. considering tuple and collection types as subtypes of oclany will increase the expressiveness and the usability of ocl. if such a feature is not available in ocl, the user will have to use other syntactical constructions in order to obtain the same effect(e.g. iterate over the above collection and cast each element).



the following subsections discuss the issues relative to each of our three bridge implementations. each of these bridge implementations provides support for the enumeration, namespace, operation and property classes. the implementation of the other bridge classes is common to each of these three, and we suspect common to most bridge implementations.



kmf version 2.0 is based on the uml1.4 metamodel. kmf uses a uml 1.4 xmi file to build a model implementation; it is this implementation that we wish to use as the user model for our ocl expressions. in order to get the correct type information, irrespective of the model implementation details, the kmf bridge implementation gets all of its information from the same xmi file used to store the model information and generate the java code which implements the model.



the most problematic bridge implementation is the one for java. java does not provide an explicit mechanism for creating enumerations; it does not provide typed collections classes; and its notion of a package does not match the uml package concept. the reflective capabilities of java have proved essential to forming our bridge implementation.



we identify an enumeration in one of two ways. either by looking up the enumeration in a pre instantiated list of enumerations, or by testing if the class extends java.util.enumeration. this is a slight misuse of the java.util.enumeration class, but it provides a nice solution to the problem. such enumerations are assumed to be implemented with each enumeration literal being a static member of the enumeration class and an instance of that class.



the problem with a namespace is that java packages are separately identified by their full package name. although appearing to support the notion of sub-packages, the java reflection features do not hold this sub-package relationship. hence, to lookup an owned element of a namespace by name, we first try and find a java class with the element name plus full path name of the current namespace; if that fails, we assume the name is a sub-namespace, create the appropriate sub-namespace object, and return the sub-namespace. this is not necessarily the best approach, but seems to work in most situations.



there are many case tools supporting drawing of uml diagrams and features like code generation and reverse engineering. however, support for ocl and transformation and mappings between models is rarely found in these tools. there are several tasks that a case tool should offer in order to provide support for ocl. for example, syntax analysis of ocl construction and a precise mechanism for reporting syntactical errors, help in writing syntactically correct ocl statements. the next step could be a semantic analyser, which should report as many errors as possible in order to help the user to develop solid ocl code. if the tool offers both an interpreter and a compiler, the user has the possibility to choose the best approach in order to obtain a high quality software.



probably the first available tool for ocl was a parser developed by the ocl authors at ibm, now maintained at klasse objecten. the parser uses the grammar described in. another toolset was developed at tu dresden. a part of this tool has been integrated with the open source case tool argo. contains a description of an ocl interpreter. it is based partly on a ocl meta-model describing the abstract syntax of ocl. provides also a good implementation for ocl.



demuth b., h. hussman, f. finger, modular architecture for a toolset supporting ocl. in evans a., s. kent, and b. selic, uml 2000the unified modeling language. advancing the standard. third international conference, york, uk, october 2000, proceedings volume 1939(2000)of lncs, pages 440-450, springer 2000.



