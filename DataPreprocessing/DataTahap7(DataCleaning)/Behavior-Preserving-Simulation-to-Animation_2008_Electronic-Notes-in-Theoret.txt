for validation purposes, simulation may be extended to a domain specific view, called animation view, which allows one to define scenario visualizations which are closer to the application domain than the abstract, graphbased model. such an animation view is defined by extending the alphabet of the original visual modeling language by symbols representing entities from the application domain. the simulation rules for a specific visual model are translated to so-called animation rules conforming to the animation view by performing a simulation-to-animation model and rule transformation(s2a transformation), realizing a consistent mapping from simulation steps to animation steps. this visualization of animation steps in the animation view is called animation, in contrast to simulation, where simulation steps are shown as changes of the underlying abstract graph model.



the paper is organized as follows: in section 2, our running example, an animation view for a radio clock statechart, is introduced. section 3 reviews the basic concepts of simulation, animation, and model and rule transformation. in section 4, the main result on semantical correctness of s2a transformation is reviewed. as new contribution in this paper, it is shown that for each s2a transformation there exists a corresponding a2s backwardtransformation. semantical correctness of a2s transformations is shown for the case without negative application conditions(nacs). extensions to cope with nacs are discussed. section 5 discusses related work, and section 6 concludes the paper.



our aim is not only to transform model states but to obtain a complete animation specification, including animation rules, from the simulation specification. hence, we define a construction allowing us to apply the s2a transformation rules from q also to the simulation rules, resulting in a set of animation rules. the following definition reviews the construction for rewriting rules by rules from.



def. 3.3 extends the construction for rewriting rules by rules given by parisi-presicce in, where a rule q is only applicable to a rule p if it is applicable to the interface graph i of p. this means, q cannot be applied if p deletes or generates objects which q needs. in this paper, we want to add animation symbols to simulation rules even if the s2a transformation rule is not applicable to the interface of the simulation rule: case(1) in def. 3.3 corresponds to the notion of rule rewriting in, adapted to non-deleting s2a transformation rules. in case(2), the s2a transformation rule q is not applicable to the interface i, but to the left-hand side of a rule p1, and in case(3), q is not applicable to i, but to the right-hand side of p1. note that it is possible that both case(2) and case(3) can be true for different matches of rule graphs and to the initial radio clock graph. the initial s2a rule qclock adds the root symbol clock to all graphs it is applied to. the remaining s2a rules add visualization symbols depending on the state of the current pointer. we visualize only basic states which do not have any substates. superstates are not shown in the animation view, as they are considered as transient states which are active on the way of the current pointer up and down the state hierarchy between two basic states, but have no concrete visualization graphics themselves.



proof. by theorem 4.3 we have that s2a is semantically correct for rulecompatible s2a and terminating s2am. by theorem 4.10 and theorem 4.12 we know that a2s is a valid backward-transformation of s2a and that a2s is semantically correct. hence, according to def. 4.13, s2a is a behaviorpreserving model and rule transformation.



reactive animation approach by harel, where behavior is specified by uml diagrams. the animated representation of the system behavior is implemented by linking uml tools to pure animation tools like macromedia flash or director. hence, the mapping from simulation to animation views happens at the implementation level and is neither specified formally, nor shown to be behavior-preserving. analogously, different petri net tools also offer support for customized petri net animations in general, approaches to enhance the front end of case tools for simulating/animating the behavior of models are restricted to one specific modeling language.



