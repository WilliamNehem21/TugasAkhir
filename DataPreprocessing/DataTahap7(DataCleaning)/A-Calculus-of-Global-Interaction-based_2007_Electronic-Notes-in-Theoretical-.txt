this paper introduces the formal calculus and the idea of session types with many illustrative examples to those without background of process calculi and their typing systems. section 2 and 3 introduce and illustrate the global formalism(a distilled version of ws-cdl). section 4 illustrates the session types for the calculus. finally section 5 demonstrates its expressiveness by showing a large example inspired from a



the present work shares with many recent works in its use of types for wellstructured communication-centred programming[19,3]. in particular, our work is based on the studies on session type disciplines[20,15,11,10,22,6], and extends them to both global descriptions and intra-session parallel communications. all previous work are based on end-point languages and calculi.



the formal syntax of the global calculus is given by standard bnf. below symbols i, i',... denote terms of the global calculus, also called interactions. terms describe a course of information exchange among two ore more parties from a global viewpoint.



s, s',... range over a collection s of session channels. session channels designate communication channels freshly generated for each session. they can be implemented in various ways: in tcp, the same concept is realised by so-called connection(also called session). in web services, they are realised by sending freshly generated identity information as part of messages.



e, e',... range over expressions, given by the grammar e::= x| v| f(e1,..., ek) where f ranges over an appropriate set of function symbols(including standard arithmetic/boolean operators) and v, w,... range over atomic values such as natural numbers and booleans.



interaction which can be repeated unboundedly is realised by recursion. then the term rec x. i is the standard recursion construct, where rec x is called recursor, with x, the recursion variable, binding its free occurrences in i. finally, 0 is the inaction, representing the lack of actions.



example 3(syntax, 3) a session can have multiple session names for communication. this is the standard practice in business protocols and other interactioncentred applications, and is essential to have multiple parallel interactions inside a single session. as an example, suppose that buyer wants to start a session at a channel acc in which it communicates acceptance of a quote on a session name op and, in parallel, sends its address on a session name data. this can be expressed as:



from an engineering viewpoint, the dynamic semantics pins down a mathematical notion which designers, implementers and users can refer to when they wish to discuss about dynamic behaviour of description with rigour. for example, this would allow us to state with precision whether an implemented program conforms to the description or not. another example usage is in monitoring, where a monitor would check the execution based on the stipulated formal dynamic semantics of a given description.



the purpose of the protocol is for buyer to ask for a quote of a product to seller, negotiates the price, and buys the product if its price is cheap enough. before asking for a quote, buyer asks creditchecker whether seller is credible or not. the negotiation process is done as a loop, which involves not only buyer and seller but also vendor(which only interacts with seller). when the negotiation is successful, seller asks creditchecker if seller is credible, and if the answer is positive, asks royalmail(a shipper) to ship the good. the following illustrates the protocol step by step.



for readability reasons, we will give different threads for each participants which will then be composed in parallel. similarly to the global case, unimportant parameters in inputs and outputs will be omitted, e.g. s d op stands for s d op(x) for some x.



