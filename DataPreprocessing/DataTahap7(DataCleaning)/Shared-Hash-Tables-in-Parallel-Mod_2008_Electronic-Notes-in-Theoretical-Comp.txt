we work with a model based on threads that share all memory, although they have separate stacks in their shared address space and a special thread-local storage to store thread-private data. our working environment is posix, with its implementation of threads as lightweight processes. switching contexts among different threads is cheaper than switching contexts among full-featured processes with separate address spaces, so using more threads than there are cpus in the system incurs only a minor penalty.



processor cache: locality and coherence. there are currently two main architectures in use for level 2 cache. one is that each processing unit has its completely private level 2 cache(for the symmetric multiprocessing case) or there is a shared level 2 cache for a package of 2 cores(designs with a level 2 cache shared among 4 cores are not commercially available as of this writing). in bigger shared-memory computer systems, it is usual to encounter split cache, since they often contain on the order of 8-64 cores attached to a single memory block. in recent hardware, the basic building units are dual-core cpus with shared cache, but among the different units, the caches are still separate. this idiosyncrasy of these architectures has important effects on performance and these will be discussed later in more detail.



shared memory bus. since the memory in smp machines is attached to a single shared memory bus, the ram access from different processors needs to be serialized. this caps total memory throughput of the system and at some point, the available memory bandwidth becomes the bottleneck of computation. this is an important factor for memory-intensive workloads, to which model-checking definitely belongs.



the algorithm is an extended enumerative version of the one way catch them young algorithm. the idea of the algorithm is to repeatedly remove vertices from the graph that cannot lie on an accepting cycle. the two removal rules are as follows. first, a vertex is removed from the graph if it has no successors in the graph(the vertex cannot lie on a cycle), second, a vertex is removed if it cannot reach an accepting vertex(a potential cycle the vertex lies on is non-accepting). the algorithm performs removal steps as far as there are vertices to be removed. in the end, either there are some vertices remaining in the graph meaning that the original graph contained an accepting cycle, or all vertices have been removed meaning that the original graph had no accepting cycles.



theoretical benefits of the first approach are that lock granularity and therefore contention should remain very low throughout program execution. fixed number of locks makes competition for any given lock higher, although in theory, it should remain constant, as long as number of competing threads is constant. the squareroot approach is a compromise between those two. all the methods are evaluated in the experimental section.



shared queue. another possibility is to distribute states not using a partition function, but place them in a single shared bfs queue. this approach should achieve optimum load-balancing, although compromises may be necessary to strike a balance with locking overhead and contention.



both the algorithms we have implemented are independent of order of visits, so can be run in both bfs and dfs order. these are reachability and owcty, although several other distributed algorithms share this property and could be therefore used in this setting. the parallel versions of nested dfs are not considered, since they do not use partitioning at all.



the main testing machine we have used is a 16-way amd opteron 885(8 cpu units with 2 cores each). all timed programs were compiled using gcc 4.1.2 20060525(red hat 4.1.1-1) in 32-bit mode, using-o2. this limits addressable memory to 3gb, which was enough for our testing. the machine has 64gb of memory installed, meaning that none of the runs were affected by swapping.



in an environment with fairly low communication overhead, the different schemes did not vary as much as we have originally anticipated. the motivation behind the research was to improve performance and scalability of our parallel, shared-memory model checking platform based on divine. however, the results have been less than convincing.



