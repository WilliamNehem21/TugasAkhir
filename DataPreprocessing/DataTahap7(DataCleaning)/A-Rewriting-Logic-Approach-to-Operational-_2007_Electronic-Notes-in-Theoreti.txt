this paper shows how rewriting logic semantics(rls) can be used as a computational logic framework for operational semantic definitions of programming languages. several operational semantics styles are addressed: big-step and small-step structural operational semantics(sos), modular sos, reduction semantics with evaluation contexts, and continuation-based semantics. each of these language definitional styles can be faithfully captured as an rls theory, in the sense that there is a one-to-one correspondence between computational steps in the original language definition and computational steps in the corresponding rls theory. a major goal of this paper is to show that rls does not force or pre-impose any given language definitional style, and that its flexibility and ease of use makes rls an appealing framework for exploring new definitional styles.



this paper is part of the rewriting logic semantics(rls) project(see[25,26] and the references there). the broad goal of the project is to develop a tool-supported computational logic framework for modular programming language design, semantics, formal analysis and implementation, based on rewriting logic. any logical framework worth its salt should be evaluated in terms of its expressiveness and flexibility. therefore, a very pertinent question is: how does rls express other approaches to operational semantics? in particular, how well can it express various approaches in the sos tradition? the goal of this paper is to answer these questions. partial answers, giving detailed comparisons with specific approaches have appeared elsewhere. for example, and provide comparisons with standard



mathematical and operational semantics. rewriting logic has both a computational proof theory and an initial model semantics, which provides inductive reasoning principles to prove properties. therefore rls programming language definitions have both an operational rewriting semantics, and a mathematical initial model semantics.



write-only fields i'= v of u are translated as follows: i: l, with l a fresh new variable, is added to upre, and i: lv is added to upost. when dealing with observable transitions, both state records meta-variables and... operations are represented in upre by some variables, while in upost by others.



strengths. context reduction semantics splits small-step rules into computational rules and rules needed to find the redex(the latter are transformed into grammar rules generating the allowable contexts). this makes definitions more compact. it improves over small step semantics by allowing the context to be changed by execution rules. it can deal easily with control-intensive features.



rls specifications can be turned into interpreters for the specified language. to analyze the efficiency of this approach, we wrote the rls definitions above in two rewrite engines, namely asf+sdf 1.5(a compiler) and maude 2.2(a fast interpreter with good tool support), and in several programming languages with built-in support for matching, namely haskell, ocaml and prolog. for each definitional style tested(except small-step sos), we have included for comparison interpreters in scheme, adapting definitions from, chapter 3.9(evaluation semantics) and 7.3(continuation based semantics) and a plt-redex definition given as example in the



prolog yields pretty fast interpreters. however, for backtracking reasons, it needs to maintain the stack of all predicates tried on the current path, thus the amount of memory grows with the number of computational steps. the style promoted in seems to also take into account efficiency. the only drawback is the fact that it looks more like an interpreter of a big-step definition, the representational distance to the big-step definition being much bigger than in interpreters based on rls. the plt-redex implementation of context reduction ran out of memory for the presented inputs(for 9 nested loops it finished in 198 seconds). the rewriting logic implementations seem to be quite efficient in terms of speed and memory usage, while keeping a minimal representational distance to the operational semantics definitions. in particular, rls definitions interpreted in maude are comparable in terms of efficiency with the interpreters in scheme, while having the advantage of being formal definitions.



usefulness of this approach. a first snapshot of the rls project was given in, and a second in. this paper can be viewed as third snapshot focusing on the variety of definitional styles supported. a substantial body of experience in giving programming language definitions, and using those definitions both for execution and for analysis purposes has already been gathered; an up-to-date list of references on rls can be found in the companion tech report.



can encode any computation and have a rigorous semantics, so any programming language can be defined as an asm and thus implicitly be given a semantics. both bigand small-step asm semantics have been investigated. the semantics of various programming languages, including, for example, java, has been given using asms. the chemical abstract machines avoids some of the limitations of sos in defining concurrent programming languages and was introduced in the same journal volume as rewriting logic; as shown in, any chemical abstract machine definition is a rewrite logic theory. tile logic also supports definitions of concurrent languages and has been compared to and translated into rewriting logic[24,15].



as a way of exploring new definitional styles. for highly-concurrent languages, such as mobile languages, or for languages involving concurrency, real-time and/or probabilities, a centralized approach forcing an interleaving semantics is unnatural. we have, of course, refrained from putting forward any specific suggestions in this regard. but we think that new definitional styles are worth investigating; and hope that rls in general, and this paper in particular, will stimulate such investigations.



