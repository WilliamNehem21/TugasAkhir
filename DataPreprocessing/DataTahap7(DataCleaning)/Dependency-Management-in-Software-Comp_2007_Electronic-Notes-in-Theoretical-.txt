the component approach to building systems is gaining audience because of the interesting properties of components. we can imagine that software will soon be very large collections of components and that the reuse and sharing of components will be common practice. however, components are often developed by different groups and their dependencies are not clearly specified. hence installing(or deinstalling) a component is often a gamble since all the dependencies are difficult to find. using current approaches, installation may not achieve success(an installed component does not work) and installation or deinstallation may not be safe and disrupt the system. to face the evolution towards component based systems, our aim is to build a tool with formal foundations ensuring the success and safety of deployment.



this paper is organized as follows. first, section 2 introduces the concept of component deployment and illustrates deployment dependencies using the example of a mail server. next, section 3 presents our description of dependency deployment and section 4 the description of environmental constraints. then, in section 5 and section 6 we present a formalization of the installation and deinstallation of components and the management of their effect on the target system respectively. finally, we discuss related work in section 7 and conclude this article by presenting some future work in section 8.



agent(mta), fetchmail that allows to recover mail by an electronic mail transport protocol(e.g., pop) from a distant host(the messages are redirected to the local transport), procmail, a mail deliver agent(mda) that manages received mails and allows, for example, the filtering of a mail. finally, sylpheed, a mail manager for reading and composing mail called a mail user agent(mua).



once the component is proved to be installable, we need to calculate the effect of its installation on the system. this effect consists of new available services, new forbidden services, new forbidden components and a new dependencies(represented by a dependency graph). before giving the installation rules, we will show how this effect is calculated by defining two operations: calcf that determines forbidden services and components and the dependency graph calculation.



ment predicate of smt a is denoted p). during this phase, the optional dependency is checked to determine whether it provides services(here it contributes the sav service). after the installation of postfix, the mta service(smt a) and the anti-virus(sav) are provided and the component sendmail(csm) becomes forbidden. the dependency graph g corresponds to the union of the dependency graphs deduced



the effect of the deinstallation of a component c on a context ctx involves the set of nodes that must be removed from the dependency graph. this set of nodes contains all provided services of c and all(optional) services depending on them. once the concrete deinstallation is carried out, ctx will be updated by removing c(and its provided services, forbidden services and forbidden components) from c and removing 8 from g all nodes of the effect.



a lot of research focuses on the description and the management of component-based systems. deployment tools such as coach and deployment specifications such as of the omg do not support the description of deployment dependency. the constraint one may express in those framework is limited to constraints on the target environment.



