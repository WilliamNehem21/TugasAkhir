we strongly believe that declarative languages such as logic programming(lp), if integrated with the web, will play a crucial role as computational paradigms in the semantic web vision, as noted, e.g., in. also abduction, as it is a



we could specify a number of rules which any web site for shows should fulfill. for example, we could specify that the right structure of a show tag must admit a showname tag element and a year tag element as its children. in the example, we would have a structural error, due to the lack of a year tag element in the second show. moreover we could specify that showlist must contain only those shows produced since the year 2000. in this case we would have a data error due to the first show being produced in 1998.



in this section we briefly present the checking capabilities of ciffweb, fully addressed in[13,14]. we start with some background notions about web rules and abductive logic programming with constraints. then we give a very brief description of the translation process from web checking rules to abductive logic programs for checking(programs for checking for short) and finally we show a ciffweb run on the theater example.



is exactly how positive rules are mapped into abductive logic programs. the head of i is composed of an abducible predicate abd err/2 whose arguments are(1) the variable list occurring in the error part of the rule and(2) the error message. the body of i instead, is composed of the conjunction of the components occurring in the condition part of the rule, represented as appropriate pg el and data el atoms. the translation of rule1 is the following 5:



in order to run the ciffweb system 6 the web rules in xcerpt syntax and the xml/xhtml pages are needed. the query is always the empty query(also for repair). the system will compile all the rules and the sources, producing the corresponding program for checking. running the system with the three rules and the xml page seen above, the following abductive answer is produced: ing rules and errors arising from missing data: negative rules lead to errors of that type(we denote those errors as negative errors and each error drawn from a positive rule as a positive error). this is very intuitive because the without and the without data statements express the absence of information. for example, each error arising from the negative rule rule2 seen before, represents the absence of a year tag as a child of a show. the idea is that an abductive answer could suggest to insert such a year tag in the xml data. we leave the repair of other error types as future work.



in a program for repairing there is a last issue to cope with: the identifiers of the abduced xml elements. as seen in section 3.3, each element in the original xml data is associated to a unique numerical identifier and these identifiers maintain the original xml tree structure. when a xml element is abduced a unique identifier should be assigned to it in a similar way. obviously, for each pair of abduced xml elements, their identifiers should be distinct and each newly generated identifier should be distinct from each identifier of the original xml elements. this can be done by adding, in a program for repairing, a set of integrity constraints of the form:



then if the year variable(in the example the x), is constrained to be less than 2000 a new error is abduced too. this is general issue and we argue, that, usually, it might be preferable to avoid that abduced xml elements introduce new errors satisfying the bodies of the positive web checking rules. a way to avoid this is imposing that an instance of an integrity constraint obtained from a positive rule leads to a failure in the abductive process if its body is satisfied through(at least) an abduced atom. i.e. we could replace the abductive errors in the head of the integrity constraint by false. in this way, if an abduced atom leads to a new error, then the abductive process fails searching for an alternative abductive answer.



where each abd i represents the abducible version of the correspondent el i atom. it is worth noticing that among the 2m integrity constraints, only one of them does not contain abducibles in its body. for simplicity we say that this integrity constraint is i1. if we want to avoid that the abduced atoms could not generate new errors we simply need to replace abd err by false in each integrity constraint other than i1. adopting this solution, the latter abductive answer would not be returned by the system, because constraining x to a value less than 2000 would lead immediately to failure(since ciff never computes answers containing false).



part of a rule allows for a bit more expressiveness. another key difference is that the gverdi-r system relies upon an ad-hoc computational counterpart for its framework, while our system relies upon the general purpose ciff abductive proof procedure. conversely, the gverdi-r system allows for the use of functions for managing strings and data in a non-straightforward way, e.g. by matching strings to regular expressions or using arithmetic functions on numbers. while the ciffweb system deals with arithmetic functions thanks to the underlying integrated constraint solver, it lacks the use of other types of functions. as pointed out in, this is an important feature for a web verification tool. a more sophisticated use of functions in ciffweb is work in progress.



another interesting approach of modifying web data instances is represented by the xchange framework which is proposed by the same xcerpt authors and form which it derives. it proposes a framework to make the web data aware of events which should lead to changes in the web data. we are currently studying possible interrelations with our repair approach even if the xchange framework is not focused to verify and to repair web site instances but rather it seems to propose new data paradigms which can accommodate event-driven changes.



