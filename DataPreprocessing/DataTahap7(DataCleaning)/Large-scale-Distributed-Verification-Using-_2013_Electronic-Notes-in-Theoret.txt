can become a bottleneck in the verification process. in such case, if the lts is too large to be constructed on a single machine, one may resort to distributed computing infrastructures, such as clusters and grids, which increase by several orders of magnitude the amount of memory available. the cadp verification toolbox exploits this possibility by providing several tools for distributed verification, in particular distributor and bcg merge[13,12]. these tools respectively enable to construct a partitioned lts(i.e., split into several fragments, each stored in a separate file, possibly on a different machine) and to convert it into a monolithic lts(i.e., stored in a single file). to scale up the verification capabilities, it is sometimes beneficial to avoid the construction of a monolithic lts and instead work as long as possible with a partitioned lts.



to represent ltss, the cadp toolbox provides the bcg(binary coded graphs) file format and its associated software libraries. a bcg file stores the states, labels, and transitions of an lts in a compact way using binary encoding and dedicated compression schemes that enable efficient representation and manipulation. bcg files can be handled using the existing cadp tools(e.g., inspection, visualization, label renaming, bisimulation minimization, on-the-fly exploration, etc.) or using custom tools developed using the cadp libraries for reading and writing bcg files.



when dealing with distributed verification tools and ltss stored on several machines, a single bcg file is no longer sufficient. the pbg(partitioned bcg graph) format[7,8] addresses this problem. this format is an outcome of the senva cooperation 2 between the former sen2 team of cwi and the former vasy team of inria grenoble. specifically designed for the purpose of distributed verification, the pbg format implements the theoretical concept of partitioned lts introduced in and provides a unified access to an lts distributed over a set of remote machines. a pbg file gathers a collection of bcg files, called fragments(one fragment per worker), which can be stored either in separate directories located on the(possibly remote) machines on which workers execute, or on a common file system shared(e.g., using nfs or samba) by all workers. taken altogether, these fragments form a partition of the lts, the states and transitions of which are distributed across the various fragments as specified in, each fragment storing a set of states and the transitions going into these states. note that, taken individually, each fragment is meaningless; for instance, it may be a disconnected graph, which is never the case with an lts representing the reachable state space of a concurrent system.



pbg info is a new tool for inspecting pbg files. it currently provides several functionalities, such as consistency checking(i.e., existence and readability of all fragment files), calculation the size of the corresponding lts(number of states and transitions), display of the list of labels, and concatenation of remote log files(this is useful, e.g., to understand the reason why a pbg generation fails, and to compute global statistics about cpu and memory usage by the workers).



the newly developed pbg open tool is an open/caesar-compliant compiler for the pbg format. the main advantage of pbg open is that it can use the memory of several machines to store the transition relation of a partitioned lts. therefore, pbg open can explore on-the-fly large partitioned ltss that could not be explored using other tool combinations.



the initialization phase consists in normalizing the transition labels of the fragments by assigning unique label numbers across all workers. this is necessary because the same label may be numbered differently in different fragments. during initialization, each worker sends its list of labels to the master, which assigns a unique number to each label and then sends back to each worker globally unique numbers for these labels. this preliminary step avoids the performance overhead that would occur if the master had to renumber labels in all transitions.



we presented the latest distributed verification tools recently added to the cadp toolbox in order to manipulate partitioned ltss represented as pbg files. we experimented these new tools, together with the distributor and bcg merge tools previously available in cadp, on a large-scale grid involving several clusters geographically located in different places and different countries. our experiments were intended to push the pbg machinery to its limits by using hundreds of workers and to study how this influences performance and scalability.



