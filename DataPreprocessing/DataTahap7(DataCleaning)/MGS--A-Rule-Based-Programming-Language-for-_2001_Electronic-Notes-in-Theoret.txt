we present the rst results in the development of a new declarative programming language called mgs. this language is devoted to the simulation of biological processes, especially those whose state space must be computed jointly with the current state of the system. mgs proposes a uni ed view on several computational mechanisms initially inspired by biological or chemical processes(gamma and the cham, lindenmayer systems, paun systems and cellular automata). the basic computation step in mgs replaces in a collection a of elements, some subcollection b, by another collection c. the collection c only depends on b and its adjacent elements in a. the pasting of c into a b depends on the shape of the involved collections. this step is called a transformation. the speci cation of the collection to be substituted can be done in many ways. we propose here a pattern language based on the neighborhood relationship induced by the topology of the collection. several features to control the transformation applications are then presented.



the three curves correspond to the cyclic evolution of the system starting from three di erent initial conditions. a point in this plot corresponds to a state(x; y). a curve corresponds to the evolution(x; y)(t). the periodicity of the trajectories of x and y gives a closed curve. there is a fourth curve reduced to a xed point. the image by the evolution function of this point is itself. this point is characterized by dx=dt= dy=dt= 0(no change).



the a priori determination of the phase space cannot always be done. this is a common situation in biology[9,7,8]. such ds can be found in the modeling of plant growing, in developmental biology, integrative cell models, protein transport and compartment simulation, etc. this accounts for the fact that the structure of the phase space must be computed jointly with the current state of the system. in this case, we say that the ds has a dynamical structure. the description of ds with a dynamical structure are especially hard.



one of our additional motivations is the ability to describe generically the basic features of four models of computation: and the cham, p systems, l systems and cellular automata(ca). they have been developed with various goals in mind, e.g. parallel programming for, semantic modeling of nondeterministic processes for the cham, calculability and complexity issues for p systems, formal language theory and biological modeling for l systems, parallel distributed model of computation for ca(this list is not exhaustive). we assume that the reader is familiar with the main features of these formalisms but a short description of these computational models is given in section 5 for the readers convenience.



there is a priori no constraint in the case of: one element or many elements are replaced by zero, one or many elements. in the case of p systems, the evolution of a membrane may a ect only the immediate enclosing membrane(by expelling some tokens or by dissolution): there is a localization of the changes. this is also the case for l systems: the new collection b is inserted at the place of a and not spread out over c. for ca, the changes are not only localized, but also a and b are constrained to have the same shape: usually a is restricted to be just one cell in the array and b is also one cell to maintain the array structure.



now, we come back to our initial goal of specifying the dynamical structure of a ds. a collection is used to represent the state of a ds. the elements in the collection represent either entities(a subsystem or an atomic part of the ds) or messages(signal, command, information, action, etc.) addressed to an entity. a subcollection represents a subset of interacting entities and messages in the system. the evolution of the system is achieved through transformations, where the left hand side of a rule typically matches an entity and a message addressed to it, and where the right and side speci es the entity's updated state, and possibly other messages addressed to other entities. if one uses a multiset organization for the collection, the entities interact in a rather unstructured way, in the sense that an interaction between two objects is enabled simply by virtue of their both being present in the multiset. more organized topological collections are used for more sophisticated spatial organization.



the mgs language is presented informally in section 3 through some examples. we review rst the notions of collections and then their transformations. simple examples of mgs programs are given in section 4. all examples are processed using the current version of the mgs interpreter. then, in section 5, we sketch how the previous formalisms can be emulated in mgs.



mgs embeds the idea of topological collections and their transformations into the framework of a simple dynamically typed functional language. collections are just new kinds of values and transformations are functions acting on collections and de ned by a speci c syntax using rules. mgs is an applicative programming language: operators acting on values combine values to give new values, they do not act by side-e ect.



a type introduced by a type declaration can later be used in patternmatching(cf. section 3.3) or as a predicate to test if a value is of a given type. a monoidal collection type can also be used in the building of a collection by is an expression evaluating to the set of four integers: 1, 2, 3 and 4. the collection kind is a set, and its type is myset. actually, expression\myset:()" denotes the empty myset and\;" is the overloaded join operator: x; x creates a new collection with element x merged with the elements of collection x; and expression x, y creates a new collection with elements of both collections x and y.



the type of a collection is taken into account for several collection operations. for instance, the join of two collections of type a and b gives a collection with type c corresponding to the common ancestor of a and b(with the previous example, set is the common ancestor of myset and anotherset). other example, myset is the common ancestor of anothermyset) and itself.



an mgs record is a special kind of collection. an mgs record is a map that associates a value to a name called eld. the value can be of any type, including records or other collections. accessing the value of a eld in a record is achieved with the dot notation: expression fa= 1; b="red"g:b evaluates to the string"red".



records can be merged with the overloaded+ operator. expression r1+r2 computes a new record r having the elds of both r1 and r2. then r:a has the value of r2:a if the eld a belongs to r2, else the value of r1:a(asymmetric merge).



c. the+ operator between record types emulates a kind of inheritance. the de nition t specializes type s by constraining the eld a to the value 1 and saying that an additional eld d must be present and be a string.



where pattern in the left hand side(lhs) of the rule matches a subcollection a of the collection c on which the transformation is applied. the subcollection a is substituted in c by the collection b computed by the expression in the right hand side(rhs) of the rule. there are also several kinds of rules, as detailed below.



binding: a binding p as x gives the name x to the collection matched by p. this name can be used anywhere in the rest of the rule. e.g., the pattern x; x matches two connected elements with the same value(each occurrence of x in a rule denotes the same value).



a transformation is a set of rules. when a transformation is applied to a collection, the strategy is to apply as many rules as possible in parallel. a rule can be applied if its pattern matches a subcollection. several features are used to have a ner control over the choice of the rules applied within a transformation.



mgs is a functional language with some imperative features. imperative local variables can be attached to a transformation and updated by side e ects in the rhs of the rules. these variables can be used in a rule guard allowing the conditional use of a rule. for instance, the transformation



in addition to the standard transformation step strategy, two other application modes exist. in the stochastic mode, the choice of the exclusive rule to apply is made randomly. the priorities of the exclusive rules are then considered as the relative probability of their e ective application(when they can apply). in asynchronous mode, only one exclusive rule is applied in one transformation step.



(the result of applying function a to m). several reactions happen at the same time. no assumption is made on the order on which the reactions occurs. the only constraint is that if the reaction condition r holds for at least one subset of elements, at least one reaction occurs(the computation does not stop until the reaction condition does not hold for any subset of the multiset).



p systems[17,16] are a new distributed parallel computing model based on the notion of a membrane structure. a membrane structure is a nesting of cells represented, e.g, by a venn diagram without intersection and with a unique superset: the skin. objects are placed in the regions de ned by the membranes and evolve following various transformations: an object can evolve into another object, can pass trough a membrane or dissolve its enclosing membrane. as for, the computation is nished when no object can further evolve.



a cruder and simpler approach just associates a multiset m to the region associated with the skin of a p system. the di erence with is that the elements of m can be multiset themselves, associated to the inner membranes. in this approach, p systems are viewed as a theory of nested(opposed to at) multiset rewriting. we can handle also this approach, because mgs values can be arbitrary combinations of other values.



l systems are a formalism introduced by a. lindenmayer in 1968 for simulating the development of multicellular organism. related to abstract automata and formal language, this formalism has been widely used for the modeling of plants. a l system can be roughly described as a grammar with an axiom and a set of derivation rules. the productions are applied in parallel in a non deterministic manner. 0l systems are context-free grammars. d0l systems are deterministic context-free grammars: given a letter a there is at most one production rule that can be applied. parametric l systems deal with modules instead of letters: a module is a letter associated with a list of parameters. the production rules are extended with side-conditions on the parameters. for example,



cellular automata(ca) have been invented many times under di erent names: tessalation automata, cell spaces, iterative arrays, etc. however, a fair fraction of the computer research on two-dimensional cellular automata has its ultimate origins in the work of j. von neumann to provide a more realistic model for the behavior of complex systems in biology.



the organization of the cells of an array is the natural one(von neuman or moore neighborhood). a rule of a cellular automata is an mgs rule applying on only one cell. the conditions on the neighbor cells can be expressed using guards and the speci c neighbors accessors.



the comments of the anonymous referees have greatly improved this paper. the authors would like to thanks the members of the\simulation and epigenesis" group at genopole for stimulating discussions and biological motivations. they are also grateful to f. delaplace and j. cohen for many questions and encouragements. this research is supported in part by the cnrs, the gdr alp, impg and genopole/evry.



fontana, w., algorithmic chemistry. in christopher g. langton, charles taylor, j. doyne farmer, and steen rasmussen, editors,\proceedings of the workshop on arti cial life(alife'90)", volume 5 of santa fe institute studies in the sciences of complexity, pages 159{210, redwood city, ca, usa, february 1992. addison-wesley.



giavitto, j.-l., and o. michel, declarative de nition of group indexed data structures and approximation of their domains, in\proceedings of the 3nd international acm sigplan conference on principles and practice of declarative programming(ppdp-01)". acm press, september 2001.



