static analysis is an approach to program behavior verification without execution. the approach is particularly useful in identifying program design errors prior to implementation. it has been demonstrated that detecting errors early in the lifecycle greatly reduces the cost of fixing those errors. a number of static analysis techniques



in general all existing approaches appear to be very sensitive to the size of the program being analyzed in terms of the use of concurrency constructs and the number of asynchronous processes. particularly, reachability analysis may cause state space explosion problem since it has to exhaustively explore all the reachable state space to detect concurrency errors. although many techniques have been proposed to combat this explosion, such as state space reductions, compositional techniques, abstraction, the state explosion problem still is the main technical obstacle to transition from research to practice.



current concurrent systems are described as discrete event system models which are suited to model system concurrency. however, the discrete will lead to state explosion problem since model checkers build a finite state transition system and exhaustively explore the reachable state space searching for violations of the properties under investigation. hence, to thoroughly solve the state explosion problem, one solution is that the discrete event system model should be continunized to continuous system model, such that the systems can be described with analytic expressions. therefore, instead of counting states, we can analyze the solutions of the analytic expressions.



petri net seems a good candidate that bridges discrete event systems and continuous systems. on one hand, petri nets have been used extensively as tools for the modeling, analysis and synthesis of discrete event systems. petri nets offer advantages over finite automata, particularly when the issues of model complexity and concurrency of processes are of concern. on the other hand, a continuous system can be approximated by a petri net and a petri net model is used as discrete event representation of the continuous variable system by lunze et al..



as in, we will check two specifications of the architecture. the first one is a critical race, in which one customer pays for gas and the second customer then pays and takes the pump before the first customer gets gas. the second specification is that no customer receives gas without paying for it.



hierarchy and modules: the basic petri-net model does not support hierarchy and composition explicitly. as in most adl specifications, a whole system is normally composed of components and connectors, which are most suitably described as submodules of a whole system. to support this, we introduce the module concept into the petri-net model. we can map each component or connector into a small petri-net module(sub-graph). with all the modules, together with the io-nets concept below, we can model the whole system.



this mapping is actually a conversion of csp operators into petri-net transition structures. a set of conversion rules have been defined to cover the most common csp operations. under these rules, the properties of the architecture, such as deadlock, will be reserved.



definition 3.1 a place/transition chain is a net such that transitions are connected by a head place that has one output arc and no input arc, an end place that has one input arc and no output arc, and places that have one input arc and one output arc. if the head place and the end place are overlapping, then the chain is called place/transition cycle.



the petri net obtained in the last section is discrete petri net, in which the number of marks in the places are integers. a transition is enabled if each input place of the transition is marked with a token. an enabled transition fires by removing a token from each input place and adding a token to each output place.



later, we will prove that the states of each process cycle take values from[0,1]. for a state, if()= 1, then we say that the program is completely in the state, or simply in the state. if()= 0, then we say that the program is not in the state.



all the i defined above are the state measures. so, if new marking is moved into a place, we say that the state is increasing; if some marking is moved out from a place, we say that the state is decreasing. the change rate of state measure can be calculated as the following.



here we use() to represent some other state measures. if more than two processes are involved in sharing, say 3 processes 1 2 and 3, then we will have two parameters: 1 and 2. let 1, 3 and 5 be the input transitions that need resource.



as the next step study, we will check the efficiency of our method applied to the systems that consist of large number of behaviorally similar processes, e.g. in the gas station example there exist lots of customer processes, pump processes and casher processes, and find out how our model complement to those discrete event based models, e.g., that are used to handle the large number of processes.



