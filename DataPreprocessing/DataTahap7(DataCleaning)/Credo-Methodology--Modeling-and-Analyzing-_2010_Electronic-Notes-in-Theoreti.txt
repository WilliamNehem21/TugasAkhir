to model objects and their behavioral interfaces. given a specification of a scheduling policy(e.g., shortest deadline first) for an object, we use uppaal to analyze the object with respect to its behavioral interface in order to ensure that tasks are accomplished within their specified deadlines.



to describe the facade of a component, we declare its ports and the events the component may raise. below, we define two facades, clientside and serverside. the facade peer inherits the ports and events declared in these two and adds another event that is needed when the two sides are combined.



because a network in general consists of a network manager and additional coordination artifacts like channels, as described later in this section. the description of the broker declares the event handlers that it provides. for each event handler, it specifies the facade(representing a component) from which the handled event originated using the keyword with.



the behavioral description for a component facade comprises of specifying the order of raising events and the port operations. this is modeled using constraint automata. in these automata, we denote port operations by specifying the port names. the corresponding action(read or write) is understood from the port type(given in the structural facade description).



in general, the behavior of the sub-type has to be a refinement of the behavior of its super-type. this is achieved by computing the product of the automata describing the inherited behavior(serverside and clientside) and the automaton synchronizing them(peer). in this product transitions with different action names are interleaved while those with common action names are synchronized.



notice that interleaving allows for components to be involved in more than one session at a time. the synchronized product of the broker automaton with the component automata(from the previous subsection) describes the overall behavior of the system. this product constrains the broker such that components are involved in at most one session at a time. we model the system and analyze it with the vereofy tool[14,4], e.g., to ensure absence of deadlock. furthermore, vereofy includes symbolic model checking tools for linear-time, branching-time and alternating-time temporal logics with special operators to reason about the events and data flow at ports of components. due to lack of space, we do not explain the details of such analyses.



channels. we further refine the network model by introducing channels(which are a specific kind of connectors)[2,10]. in general, a channel provides two(channel)ends. we distinguish between input-ends(to which a component can write) and output-ends(from which a component can read). we also describe the synchronization between the two channel-ends by an automaton. for example, the automaton below models a 1-place buffer. it provides an input-end in and an output-end out. in state e the buffer is empty and in state f it is full(for simplicity, we abstract from the data transfered and stored).



we use intra-component interfaces together with the behavioral interfaces of section 2.2 to derive test specifications to check for conformance between the behavioral models and the creol implementation. we also use this specification to simulate the environment of a component while developing the component.



given a c implementation of the system, we use the behavioral interfaces of section 2.2 to derive test scenarios to check for conformance between the creol model and an implementation in an actual programming language. the coverage of these test scenarios is improved by symbolic execution of the creol implementation. finally, we model the real-time aspects of the system using timed automata. in the real-time model, we add scheduling policies to the objects. here, we check for



each peer consists of a client object, a server object and a data-store object. the client interface provides the user with a search operation. the data-store provides the client object with an add operation to introduce new data and the server object with a find operation to retrieve data. we model these two perspectives on the data-store by two interfaces storeclientperspective and storeserverperspective.



creol programs and models can be executed using the rewriting logic of maude. maude offers different modes of rewriting and additional capabilities for validation, e.g., a search command and the means for model checking. credo offers techniques to analyze parts of the system in isolation; on the lowest level, to analyze the behavior of a single(active) object in isolation.



credo offers techniques to analyze, in a black-box manner, the behavior of a component modeled in creol, by interaction via message passing. this allows for the description and analysis of systems in a divide-and-conquer manner. thus the developer has the choice of developing the system bottom-up or top-down.



step to maude. the specification in maude is executed together with the model. with the data-store at hand, we specify via the method parameters that the data delivered along the sans port of the server is actually the data identified by the key. this needs to be done on the level of the maude code.



the conformance testing introduced in the previous section is already a simulation of a part of the system, i.e., the object under test. we use a modified version of the above testing interpreter to eliminate of the error reporting. notice that the maude interpreter of creol is a set of rewrite rules which reduces the modification of the interpreter in this case to the deletion of the rules dealing with the error reporting.



furthermore, we use the facades and behavioral interfaces of section 2 to derive a creol skeleton of the network. by filling in the details of the network manager, we get a creol model of the network. the model of the network and the models of the components together form a model of the entire system, which can be executed in maude.



we use a formal testing process to provide the necessary links between behavioral interfaces, creol models, and the actual implementation. behavioral interfaces provide test scenarios, patterns of interactions between the components. a test case created according to a test scenario represents a functional description, but does not guarantee a good coverage of the model. to optimize the coverage, dynamic symbolic execution is used to analyzes execution paths through the creol model to find representative test cases while avoiding redundancies in the test suite.



we instrument the implementation to record events and use the instrumented implementation to record traces of observable events. then we restrict the execution of the model to these traces. if the model can successfully play back the trace recorded from the implementation(and the implementation produces the correct result(s) without assertion failures), then the test case is successful. the creol model is used as a test oracle for the execution of the test cases on the actual implementation.



in this section, we explain how to model the real-time aspects of the peer-to-peer system using timed automata and the uppaal model checker. an object or component is called schedulable if it can accomplish all its tasks in time, i.e., within their designated deadlines. we demonstrate the schedulability analysis process[7,11] on the broker object in the peer-to-peer model, which is the most heavily loaded entity in this system.



due to the high amount of concurrency in the model, model checking is of limited use. nevertheless, we can use the simulation feature of uppaal to analyze bigger systems. we measure the worst-case response time for each message, which identifies a lower bound for the deadline value in a schedulable system.



