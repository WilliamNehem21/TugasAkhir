a number of formal approaches to component-based software development have been proposed, based on the idea of using formal specifications as a basis for retrieval. these approaches provide good recall and precision when searching for components. more recently, the problem of component adaptation has begun to be addressed, in recognition of the fact that a library component will rarely meet the needs of the user exactly. however the main weakness of the current approaches is they only cater for a single adaptation step.



in practice this approach often involves a number of mundane and tedious steps. in this paper we define search tactics, which can be used to combine multiple matching and adaptation steps into a single step. the idea is analogous to the use of tactics in interactive theorem provers, and indeed we draw much inspiration from this work. with these search tactics we aim to automate common component adaptation steps, allowing the software engineering to concentrate on more important design decisions.



in this paper we define a collection of search tactics used to semi-automate component adaptation and retrieval. it is our intention that the tactics should be applicable to any approach that uses formal-based matching and adaptation techniques. we therefore begin in section 2 by defining a generic model for matching and adapting formally specified components. we consider individual units and modular components separately.



in section 3 we define the general form of search tactics. we also define a collection of basic search tactics from which more complex tactics will be built. in section 4 we define a collection of tacticals, used to combine basic tactics to build more complex tactics. in section 5 we illustrate the use of the search tactics, by looking at a simple example using the care language and tools. section 6 contains a comparison of our approach to other related work.



in this section we present a generic framework for matching and adapting formally specified components. the framework generalises existing approaches to specification matching, capturing the general notion of matching components with respect to adaptations of the components. the framework used here is based on a generic framework presented in an earlier paper; however there are several changes which are noted in the text below. we model the framework using the z specification language.



which consist of multiple units. this separation allows us to focus on matching and adaptation techniques relevant to the particular level of granularity. in developing matching methods for individual units, we do not need to consider how a collection of units will be matched. similarly, when developing methods for matching modules, we can assume there is a method for matching the individual units.



we begin by considering the basic individual units that are contained within modular library components and programs. examples of units include functions, types, theorems etc. we model these units using a generic type, representing a set of values that are not further defined.



we will typically only be interested in supporting relatively straightforward adaptations at this point. by straightforward, we mean adaptations that can be readily computed using automated techniques such as unification of unit specifications. examples of such techniques include identifier renaming(e.g., for variables and type names), and higher-order variable instantiation. in cases where there are different kinds of adaptations that can be applied, we would model adapt as a tuple.



finally a method(or methods if there are different kinds of units) for matching units is defined. the matching method must conform to the matches predicate below, which is defined in terms of the satisfies relationship and the adaptation function. for this paper it is sufficient to define abstractly what it means for two units to match.



the exact nature of these functions will depend on the particular modules in question. for a flat module, they will just return the set of units contained in the module. however for hierarchically structured modules they may represent a recursive function which returns the set of units contained within the nested modules. similarly, in object-oriented programming, the function may need to traverse the inheritance structure.



we generalise this to a series of module matches, where the results from one match step form part of the input into the next matching step. to do this we define the notion of a search tactic, which generalises any combination of module matching steps. a search tactic is analogous to proof tactics used in interactive theorem provers. proof tactics are designed to combine multiple simple proof steps into a single more complicated step, thus automating the more mundane steps. analogously, we aim to combine multiple individual search steps into a single complex search step.



the following tactics are useful when combining a number of search steps. each search step may introduce new subgoals, which are appended to the end of the subgoal list. the tactics below give us a way of searching for matches for the oldest subgoals first, before looking for matches for newly added subgoals. in effect they enable breadth first searching strategies to be implemented.



how more complex search tactics can be constructed using tacticals. tacticals are a mechanism that allow individual tactics to be combined. the tacticals defined in this section are based on those originally proposed for use in interactive theorem provers. however their definition is quite different due to the fact that we not only return the final set of subgoals, but also the search history, at the completion of the search tactic.



