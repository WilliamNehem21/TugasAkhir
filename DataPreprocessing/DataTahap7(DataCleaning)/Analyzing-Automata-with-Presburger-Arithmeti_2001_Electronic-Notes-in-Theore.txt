we study a class of extended automata de ned by guarded commands over presburger arithmetic with uninterpreted functions. on the theoretical side, we show that the bounded reachability problem is decidable in this model. on the practical side, the class is useful for modeling programs with unbounded data structures, and the reachability procedure can be used for symbolic simulation, testing, and veri cation.



the rest of the paper is organized as follows. in section 2 we present the theory of presburger arithmetic with uninterpreted function symbols. in section 3 we de ne a class of extended automata(called pf-automata) with guards and assignments in a decidable fragment of this theory. the initial condition may constrain an unbounded number of function values, and assignments may modify an unbounded number of such values. in section 4 we present a decision procedure for the bounded reachability problem in pf-automata, based on symbolic analysis techniques. the procedure is implemented using the ics decision procedure package from sri international. section 5 presents conclusions, related work, and future work.



consider now the existential fragment of pf(i.e., only existential quanti ers are allowed, and under the scope of an even number of negations). modulo variable renaming, it is possible to move all quanti ers to the outermost level. then, a formula 9x:' has a model if and only if' also has one. indeed, if there exist values of the functions and free variables that satisfy', then the same values satisfy 9x:', and if there exists a model for 9x:', then this model, augmented with the\witness" value of x for the existential quanti er, is a model for'. thus, the fragment is decidable. this reasoning can be pushed further: a pf formula' is satis able if and only if 9f:', where f is a function, is satis able. note that such a formula is not in pf. we use this result in section 4.



indeed, any model of formula(5) is also a model for'0. conversely, suppose' has a model m'0. then, m'0 clearly induces a model m' for'. as# is semi-universal, this means there exists also a model m for such that m' and m agree on the values of the free variables common to' and. now, m can be extended into a model m 0 of: the latter may have more



we build a valuation m#0 for the free variables and functions of formula(5) as follows. the values of the free variables of'0(resp. 0) are taken from m'0(resp. m 0). the values of the functions fj(j= 1::: n) are de ned as follows: at all positions i de ned by the values of t1;:::; tm in m'0 we let fj(i) evaluate according to m'0, and at all positions i di erent from the values of t1;:::; tm in m'0 we let fj(i) evaluate according to m 0.



a valuation is a mapping that assigns, to each free variable appearing in the automaton, a value in z, and to each function symbol, a function from z to z. we denote by v the set of all valuations. a state is a pair(q; v) consisting of a location q 2 q and a valuation v 2 v. note that, for a pf-automaton with at least one function symbol, there is an uncountably in nite set of states. an initial state is a state of the form(q0; v0) such that v0 j=, that is, the location is initial and the values of the variables and functions satisfy the initial condition. the set of states is denoted by s, and the set of initial states is denoted by s0. each transition 2 t de nes a transition relation if the location of s(resp. of s0) is the origin(resp. destination) of, and the variables and functions in s satisfy the guard of. moreover, the variables and functions get new values according to the assignments of.



formally, for a pf formula' and a valuation v 2 v, let'[v] be the truth value of' when the free variables and the function symbols of' evaluate according to v. for a term t, we denote by t[v] the integer value obtained by evaluating variables and function symbols according to v. we now de ne how valuations are modi ed by assignments.



according to de nition 3.3, there are two kinds of assignments: variable assignments and function assignments. let v0 2 v be the valuation obtained from v after an assignment, then, v0 is obtained in the following way. if the assignment is of the form x0= t, where x is a variable, then v0 is the valuation such that for all u 2 f[(v n fxg), v0(u)= v(u), and v0(x)= t[v]. otherwise, the assignment is of the form 8i:(e1 f 0(i)= e2), where e1 is a



here, x; x2;:::; x(k 1) and f; f2;:::; f(k 1)(resp. x and f) are the values of free variables and functions on previous steps(resp. on current step) of the calculation of post(s0).



for the inductive step, consider a transition= hq;;;; q0i of the pf-automaton. for simplicity, we assume without loss of generality that the pf-automaton has only one function symbol f. this means that the function assignments of transition consists of one element, of the form 8i:(e1(i; x; f) f 0(i)= e2(i; x; f)). then, for a state predicate of the form(6), the predicate post() can be written as formula(7)(see example 4.2 for an illustration.) the meaning of formula(7) is that the next control is at location q, that must hold on the values of the variables and the function at the previous step, i.e. on x and f, and that must hold on the values of the variables and the function at all previous steps, i.e. on x;:::; xk and f;:::; fk. moreover, the variables are modi ed by the assignments, depending on their previous values and that of the function, and the function is updated at all positions i where e1 holds of i, x, and f.



what we still have to show is that the formula obtained from(7) after removing the existential quanti ers is a semi-universal formula. by induction hypothesis,# is a semi-universal formula. thus,# is a formula of function depth 1, of the form'^ 8i1 1^:::^ 8im: m, where' is a quanti er-free pf formula, all formulas 1;:::; m are quanti er-free, and the semantic property of de nition 2.2 holds: for every model m' of', there exists a model m of: 8i1: 1^:::^ 8im: m such that the free variables among x;:::; xk that are common to' and have the same values in m', m.



we still have to show that m'0 and m 0 agree on the values of their common free variables. but these are just the variables among x;:::; xk that were also common to' and. by induction hypothesis, m' and m agree on the values of these variables, and, by construction, m'0 agrees with m' on all these values, and m 0 agrees with m'0. the proof is done. 2



the proof of lemma 4.1 shows that checking reachability in m steps involves checking satis ability of a semi-universal formula# with m copies of each variable and function symbol. this, in turn, involves instantiating every universal quanti er from the universal part of# to all the terms in its quanti er-free part(cf. lemma 2.4). finally, a decision procedure for quanti er-free presburger arithmetic with uninterpreted function symbols is used to decide the resulting quanti er-free formula. we use the ics decision procedure package from sri international.



preliminary results with our symbolic analysis prototype are encouraging: for example, a symbolic simulation of a path of about ten thousand steps in a vector-sorting algorithm was completed in about twenty hours. this means ten thousand calls to the decision procedures for checking formulas with thousands of variables and function applications. as optimizations in both ics and our prototype are still being developed, we expect to be able in the future to perform symbolic simulation on real-size programs and speci cations.



finally, it worth noting that a simple extension of pf-automata which consists in letting the guards be universal a pf formulas, is too expressive for symbolic simulation, as reachability even in one step becomes highly undecidable(cf. section 2.3).



