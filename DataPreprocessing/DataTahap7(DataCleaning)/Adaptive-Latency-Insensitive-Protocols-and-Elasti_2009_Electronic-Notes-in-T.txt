in this section we describe the two approaches and, which will be called alip and ecee in the following. we refer the reader to the original papers for a detailed discussion of their properties. alip and ecee are sufficiently different between each other as their static counterparts lip and ec(see), to justify a detailed analysis of their pros and cons.



although we did not make any power evaluation, it might be the case that less power is consumed in eceeat the same performance of alipdue to the possibly higher number of clock-gating events caused by antitokens. but it can also be the case that the extra(possibly long) wires and extra control logic add more power than local counters in alip. more work is needed on this point.



from this discussion it is clear that general rules of better applicability of one protocol with respect to the other are hard to define. in particular cases, like those reported in the next two sections, the supremacy of alip in terms of performance emerges clearly. section 5 will show that the combination of multiple conditions, emulated by means of a set of benchmarks, makes the analysis rather difficult.



in this section we illustrate the cases in which we observed some penalties that affect ecee compared to alip with simple and readily understandable examples. the first one is the classic reconvergent fanout case in which the output of a block is sent to two(or more) branches with different latencies. the second one is representative of the class of problems that arise when state holding blocks are involved.



it is worth mentioning that such phenomenon, for static protocols, can be solved with extra buffers or buffer sizing. however, adaptive protocols might depend on more subtle data-related interaction between the various parts of the system that cannot be as efficiently modeled and optimized out. furthermore, such optimizations could be substantially expensive either in hardware or optimization time.



we implemented an alip and an ecee version of this simplified dlx in behavioral vhdl which allows to vary parameters, such as the mix of instructions, the percentage of data-dependency, the possibility to send instruction bursts(e.g. many consecutive pipelined mul operations followed by many add ones). with this setting we were able to gather many interesting data and compare the behavior of alip and ecee in a rather complex yet still manageable example.



both in case of data dependency and of independence we varied the percentage of instructions that use the pipelined unit from 0% to 100% in steps of 10%. in this experiment, the latency of the pipelined unit was set to 3, while the multi-cycle unit was never used(execution latency of all instructions 0 or 3 cycles). we discuss first the results in the extreme cases(0% and 100%) and then the intermediate ones.



the previous relevant dlx case exemplifies some of the remarks of previous sections concerning the better potential for performance in the alip case. however this does not prevent from possible better performance of ecee in particular cases. complex interactions between blocks in a topology with a larger number of components might favor the ecee case, as next section shows.



