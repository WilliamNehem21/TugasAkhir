many errors in software systems do not manifest themselves until the system has been deployed into production use. fatal errors can have especially severe consequences in such situations as they may completely deny the user any of the service that the program is designed to supply. the standard approach to dealing with errors is to notify the organization that produced the system of the problm, have a developer investigate the problem to discover and correct the error, then issue a patch or new release with the error corrected. a host of issues make this approach suboptimal:



forced recursion termination: infinite recursions are another potential source of fatal errors because they can exhaust the stack space. our infinite recursion elimination technique simply bounds the size of the stack, then immediately returns back out of any procedure call that attempts to exceed this bound. the potential drawback is that it may terminate recursions prematurely; the advantage is that it can eliminate otherwise fatal infinite recursions.



memory leak elimination: memory leaks can cause a program to fail because it exhausts its address space. our memory leak elimination algorithm simply allocates a fixed size buffer for allocation sites that may leak allocated memory. it then allocates data cyclically out of that buffer. the potential drawback is that the technique may overlay live data; the advantage is the elimination of any memory leak at that site.



invalid addressing elimination: out of bounds writes can cause fatal address space corruption; out of bounds reads can cause the program to attempt to access an invalid part of the address space. our invalid addressing elimination technique(also known as failure-oblivious computing) performs bounds checks to discard out of bounds writes and manufacture arbitrary values for out of bounds reads. the potential disadvantage is that the program may be unprepared to operate with the manufactured read values; the advantage is the elimination of out of bounds accesses as the immediate cause of fatal errors.



