state changes(such as communication operations) by explicit transitions. we show how this optimization can be implemented by transforming the rewriting logic specification, avoiding the construction of the full state space. moreover we establish the correctness of our technique by proving that the original and the reduced system are weakly bisimilar, and demonstrate its usability by applying it to the concurrent functional programming language erlang.



the remainder of this paper is organized as follows. section 2 introduces the rewriting logic framework, which is then employed in section 3 to formalize the operational semantics of the erlang programming language. in section 4 we present our abstraction technique, demonstrate its application to erlang in section 5, and establish its correctness in section 6. finally section 7 concludes with some remarks.



in the following we consider a core fragment of the erlang programming language which supports the implementation of dynamic networks of processes operating on data types such as atomic constants(atoms), integers, lists, tuples, and process identifiers(pids), using asynchronous, call-by-value communication via unbounded ordered message queues called mailboxes. real erlang has several additional features such as modules, distribution of processes(onto nodes), and support for robust programming and for interoperation with non-erlang code written in, e.g., c or java.



value of e does not match p, and where this value is returned as the result otherwise. the constructs involving non-functional behavior(i.e., side effects) are e1!e2 which denotes an output operation, sending the value of e2 asynchronously to the process identified by e1, whereas receive cs end inspects the mailbox q of the local process and retrieves(and removes) the first element in q that matches any pattern in cs. once such an element v has been found, evaluation continues analogously to case v of cs end; otherwise, the process waits for a corresponding message to arrive. the expression spawn(e1, e2) dynamically creates a new process in which the function given by e1 is applied to the arguments given by the list e2(and returns



any erlang program consists of a set of modules. each module basically contains a list of function declarations. in our example the system is defined in one module. it is initialized using the start function, which, according to the export declaration, is the only function accessible from outside the locker module. by calling the spawn function, it generates three new processes: one locker and two clients.



the erlang runtime system maintains a set of user processes. any such process consists of three components: an erlang expression which has to be evaluated, a process identifier which uniquely identifies the respective process, and which is internally determined by the system, and a mailbox for incoming messages, which is essentially a list of erlang values. moreover we will attribute a current evaluation environment to a process, which stores the bindings between the erlang variables and the values assigned to them.



finally the following rule handles one of the central concepts of erlang: asynchronous sending of messages. as we shall see the message will be appended to the mailbox of the target process. note that a process can also send a message to itself.



