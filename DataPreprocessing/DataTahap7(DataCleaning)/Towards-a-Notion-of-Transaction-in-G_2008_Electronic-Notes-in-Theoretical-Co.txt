graphs and graph transformations represent the core of most visual languages. in fact, graphs can be naturally used to provide a structured representation of the states of a system, which highlights their subcomponents and their logical or physical interconnections. then, the events occurring in the system, which are responsible for the evolution from one state into another, are modelled as the application of transformation rules. such a representation is not only precise enough to allow the formal analysis of the system under scrutiny, but it is also amenable of an intuitive, visual representation, which can be easily understood also by a non-expert audience.



instead, to our knowledge, scarce attention has been devoted to the idea of extending gtss in order to allow the specification of transactional activities. abstractly, a transaction is an activity, involving the execution of a group of events, which can either bring the system to a successful state or fail. in the last case the partial execution of the transaction is discarded and has no effect on the system. in concrete implementations this is achieved with a roll-back mechanism which restores the starting state when a failure is detected.



developed for dpo rewriting over directed(multi-)graphs, it could have been easily adapted to other approaches to graph rewriting, e.g., to the single-pushout approach and to different notions of graph(e.g., to hypergraphs, which are used indeed in the example in section 4).



