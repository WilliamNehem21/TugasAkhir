over the past few years, there has been considerable effort in developing formal models of the java bytecode verifier. some authors showed that the problem of bytecode verification can be formally understood and described at static time using type systems[3,4,14]. all the proposals are proved to enjoy the type soundness properties(on the bytecode fragments they consider). also, the type inference algorithm can be turned into a correct bytecode verifier, see e.g.[2,5,10].



always pass. the same holds for n18, as its only caller is the privileged n14. nowconsider n11: one of its callers(n4) has permission pdebit, while the other(n6) has not. indeed, the security check at n11 is necessary. also, note that no execution involving clyde will ever pass the check in n11: then the permission pcanpay is always granted to both callers of n8(n3 and n12), and the check at n8 turns out to be redundant, too.



the permissions granted at the entry of a node are those granted at the exit of all its callers. call nodes generate granted permissions only if they are privileged; otherwise they propagate those at their entry points. a check node generates both the permissions it enforces and those granted to all of the callers that may pass the check. as an example of the gp analysis, we compute the set of permissions granted to node n16:



in this paper we developed two control flow analyses for the java bytecode. the first analysis yields a safe approximation of the set of permissions granted to bytecode at run-time, and the second one approximates the denied permissions. the analyses provide us with the basis for reducing the runtime overhead due to stack inspection. here, we focussed on java bytecode, however the same static techniques can be applied to deal with programming languages or systems whose security architecture provides dynamic checking of permissions through stack inspection(e.g. c]).



many authors advocated the use of static techniques to optimize the check of security properties. walker develops a notion of typed compilation schemata: types encode assertions about program security ensuring that no run-time violation of the security properties will occur. another approach is proposed by jensen, le m`etayer and thorn. they formalize classes of security properties(including stack inspection) through a linear time temporal logic. then, model checking is used to prove that local security checks enforce a given global security policy.



