the gradual development of proof assistants contrasts with the more haphazard history of theorem prover user interfaces. a look at the literature of the 1990s reveals several projects which seem to have had little impact. in some cases, the projects produced systems that never advanced beyond rather small groups of users. it is interesting to see that among the more popular survivors are several systems based on(x)emacs, i.e. proofgeneral and the user interfaces for pvs and imps.



most theorem provers have been developed in functional programming languages from the ml and lisp families. compared to other languages such as c++, java or basic, these functional languages are lacking in graphical user interface(gui) toolkits and in some cases provide only poor support for light-weight concurrent processes. these problems have lead to several projects that connect functional languages with frameworks that have better gui facilities, see for example sml tk and recent ocaml bindings for tk and gtk+. still, the resulting development environments are more cumbersome than the direct use of a modern commercial gui builder tool.



for the reasons mentioned above, only few academic institutions have the necessary resources to build and maintain completely custom uis. even these institutions would benefit from more reuse by freeing up developer time. this suggests that it is in the interest of the academic theorem proving community to devise reusable ui components and uis.



an interactive proof is started by posing a logical formula(the main/ initial goal) that is to be proven. this is followed by a number of proof steps. in each step, the user analyses the proof state and then issues some proof command. this is carried out by the prover and leads to the next proof state.



below is a sample use case for a hypothetical proof assistant system. it deals with the addition of a new logical constant to an existing theory. this is a task that typically arises during the iterative development of a theory when one notices at some point that it would be useful to introduce a further constant. the formulation is based on a use-case template by larman.



4 a. the system displays appropriate messages in case of illegal or failed proof commands, a successful completion of a proof by proving all subgoals, warnings during proof step execution, proof step cancellation and abortion of proofs. in case of failed commands, the system should also provide feedback.



used as the basis of further development. in case of functional programming languages, these categories will be implemented as types. in this context, it is instructive to note that the code of modern theorem prover systems is organised around structures that group together types and their associated operations. this is analogous to the organisation of object-oriented programming languages around classes.



auto completion could be used whenever it is necessary to name objects such as theories, theorems, proof commands, etc. completion should be intelligent in the sense that it takes object types and context into account. an advanced implementation could perhaps even consider the likelihood of different possible completions.



hiding of irrelevant information decreases the amount of effort in finding information and making decisions. for example, menus should offer only possible choices. when searching for theorems in a library, it should be possible to do so without being distracted by the proofs of these theorems.



sorting items according to the likelihood of their usefulness is another way of decreasing effort. for example, the user interface could keep track of how often certain menu items are used. rarely-used menu-items can then be hidden and only made visible on explicit demand.



k. eastaughffe has identified further hci design principles for theorem prover support. in particular she suggests complementary views of proof constructions, ease of undo operations, flexibility in the way users can articulate commands to a prover, and support for concurrent proof constructions.



graphical user interfaces(guis) have transformed the use of computers and contribute significantly to their popularity. they are kind to novices and non-experts as they make it unnecessary to learn command languages. guis are based on the direct manipulation metaphor: objects are represented by graphical elements such that a manipulation of the graphical representation induces a corresponding operation on the represented object. a particular strength of guis is the manipulation of complex objects. for example, visual editors have made command line text editors obsolete. the latter are typically only used in emergency situations.



in our view, this controversy suggests that the ui should offer a choice between text-based and graphical interaction whenever there is no clear-cut advantage to use either. this applies, for example, to selections which are often faster by keyboard, at least for expert users. providing such a choice also caters for individual preferences.



customisation should be possible at different levels such as project level, theory level and proof level. settings on a more specific level should override setting on more general levels, i.e. setting the visibility of brackets in the context of a particular proof should override the setting of this parameter on the theory level.



using a standard web browser for reading theories is attractive because of reuse possibilities, hyperlinking and the widespread familiarity of users with this interface. mathml promises to simplify the rendering of mathematical formulas. representing theories as xml documents would allow simple customisation of the presentation via xslt or via a transformation to html combined with the use of css style sheets.



for efficiency reasons, it is usually advisable that the ui performs basic validation of user inputs. it also makes sense for the ui to be aware of the textual commands that might be entered by users. this could help with graphical support as outlined in the hci design section. on the other hand, parsing of formulas is a complex, logic-dependent task. it seems best if these are passed directly from the ui to the proof assistant. having a parser in the proof assistant also supports the batch-processing of theory files.



provide typically only a small number of interfaces over which data encoded as xml documents is exchanged. the validity of xml messages with respect to pre-defined rules is not ensured by the framework. instead, validity can be checked explicitly by the receiver of a message. this results in very loosely coupled, easily extensible and lightweight architectures.



xml processing and web service standards are supported by implementations for different platforms and programming languages while at the same time being completely platform and programming language independent. a downside is that xml messaging is generally slower than the exchange of data via remote procedure calls or remote method invocations. despite this performance drawback, xml messaging appears a promising choice for communication between generic uis and proof assistant backends.



