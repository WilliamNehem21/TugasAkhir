partial information is a central feature of concurrent constraint programming(ccp), a well-established formalism for concurrency. in ccp, processes interact with each other by telling and asking partial information represented as constraints(e.g., x< 42). perhaps the most appealing and distinctive feature of ccp is that it combines the traditional operational view of process calculi with a declarative one based upon logic. in other words, the process terms can be viewed at the same time as computing agents and logic formulas. this combination allows ccp to benefit from the large body of techniques of both process calculi and logic. for these reasons ccp can be a convenient framework to describe and reason about biological systems.



furthermore, ntcc provides reasoning techniques to prove that a given process p satisfy a given property f. in fact, the calculus offers a linear-temporal specification logic and its corresponding proof system in which reachability analysis can be formally carried out. reachability analysis is central in the biological context. consider, for instance, bacterial transcription: it can be seen as a reachability analysis problem in which one wants to know if there is a gene expression possible in a given gene regulatory network.



we shall take advantage of these features by modeling biological systems as processes and their properties as linear-temporal formulas, all in a single framework. that is, ntcc provides a description language for biological systems that is tightly related to powerful reasoning techniques. an additional advantage of using ntcc for the study of biological systems consists in the possibilities of turning this theoretical framework into software tools. as a matter of fact, the avispa research group 1(of which the authors are members) has recently built a prototype tool[2, 3] that admits the description of biological systems expressed as ntcc processes and allows to observe their behavior over time.



the ntcc process calculus is described next: the intuitions given above, regarding the use of ntcc for the modeling and verification of biological systems, are thoroughly explained. section 3 summarizes the main results concerning specification and verification for ntcc processes. they will be used in section 4 where the sodium-potassium pump is presented. in that section, we propose an ntcc model of such a system as well as verify a non-trivial property of this model, using the above-mentioned inference system. section 5 concludes.



store, and when it reaches its resting point, it outputs the resulting store d to the environment. the resting point determines a residual process q, which is then executed in the next time unit. information is not automatically transferred from one time unit to the following.



assume now that we are interested in a process t consisting in the interaction of a large number of identical cells, i.e., t= c1... cm. in this case, as the focus of the analysis has moved from a local level(a single cell) to a global one(a tissue), it is necessary to abstract from the behavior induced by those variables in each xi(associated with ci) that do not participate in the interaction that ntcc provides two basic time operators: next(p) and unless c next(p). let us analyze them separately. next(p) represents the activation of p in the next time interval. hence, a move of next(p) is a unit-delay of p. next(p) can be also considered as the simplest way of expressing the dynamical behavior over time. this is fundamental in ntcc, since information is not automatically transferred from one time interval to the next. building up on next(p), it is easy to think



the operator allows to express asynchronous behavior through the time intervals. process p represents an arbitrary long but finite delay for the activation of p. for example, the process d= tell(enzymereleased= 1) could represent the eventual presence of a particular enzyme in the environment, but without providing an upper bound on when such a thing will actually occur.



somehow opposed to the eventual behavior enforced by asynchronous behavior, persistent(or infinite) behavior serves to express conditions that are valid during every possible state of the system. the replication operator!p represents p next(p) next2(p)..., i.e. unboundedly many copies of p but one at a time. as such, persistent behavior is an appropriate way of enforcing conditions stating ground rules of the systems of interest.



a process illustrating this kind of behavior is d'=! tell(enzymereleased= 1), the persistent version of the enzyme-related signal. d' simply represents the fact that in every future time unit the constraint it involves will be available. persistent behavior can also be understood as a mechanism that allows to move from static descriptions or conditions(valid only in one state of the system) to dynamic statements that are always valid.



the importance of the strong relationship between cltl and ntcc is that a logic-based methodology for verification of properties of biological systems can be adopted, in addition to the observational approach that is induced by the operational semantics given above. that is, simulations of an ntcc process(i.e., its timed observations) could be complemented by proofs of essential properties(stated as temporal formulas).



in this section we show the use of our approach to model and verify biological systems using the sodium-potassium pump as case study. we first give a short biological description of the system and propose an ntcc model representing its behavior. later, we verify a non-trivial property over this model using the ntcc reasoning techniques.



the pumping process in the sp-pump can be divided in six phases. at the beginning there is a pump conformation with high affinity for sodium ions inside the cell(1). this conformation encourages the binding of three sodium ions with the pump. then the alpha subunit is phosphorylated by atp hydrolysis(2), leaving a residual adp molecule in the cytoplasm. this chemical reaction provides the



at this point, there is a pump conformation with high affinity for potassium ions outside the cell(4). this results in the binding of two potassium ions with the pump. hence, the alpha subunit is dephosphorylated(5) and the pump conformation returns to the initial state. at this moment potassium ions can enter the cell(6). the pumping process is always performed regulating the concentration of sodium in the cell.



for the correct functioning of the cell is assumed. such amounts are denoted by n aideal and kideal. finally, the model includes additional variables capturing other details of the pump: opump represents the orientation of the pump(either inside or outside the cell), alpha denotes the current binding of the alpha subunit and p ump represents the current content of the pump. these three variables will be instantiated with constants that can be encoded by integers: for instance, possible values for alpha are p, free and null(note the special font style given to constants). finally, integer variables at p and adp represent the presence of atp and adp inside the cell, respectively.



the inhibition process example also allows us to take advantage of the flexibility of the presented model. we will assume a(malicious) drug that is present in the environment surrounding the pump. the goal of this drug is to take control of the alpha subunit, thus preventing the phosphate from inducing a conformational change in the pump. in turn, this obstruction will lead to a complete inhibition of the active transport mechanism enforced by the pump. we express this in our model by specifying the environment process as follows:



notice how the partial information constructs helped to better describe the behavior of the sp-pump. they allow for flexible and extensible system specifications. moreover, since the associated temporal logic naturally captures the spirit of these constructs, the essential properties to be verified can also involve partial information in an explicit way.



