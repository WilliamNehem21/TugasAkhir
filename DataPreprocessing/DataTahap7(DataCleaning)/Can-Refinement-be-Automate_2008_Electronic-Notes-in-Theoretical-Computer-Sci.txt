in demonic refinement algebra is almost two pages long and the proof search involved and the complexity of the axioms used is substantial. for the sake of readability we do not display all input/output files and the complete machine proofs. they can all be found at a web site.



second, the predicate transformer model underlying the refinement calculus of back and von wright is excluded as well. only universally conjunctive or disjunctive predicate transformers satisfy the kleene algebra axioms. here, universal conjunctivity(disjunctivity) means distributivity of multiplication over arbitrary infima(suprema). this of course implies distributivity over the empty infimum(supremum), which yields the right zero axiom. positively conjunctive(disjunctive) predicate transformers, however, which only distribute over non-empty infima(suprema), do not satisfy the right zero axiom. but they are the appropriate models for demonically nondeterministic programs under the standard weakest precondition semantics.



the particular axioms of demonic refinement algebra can easily be motivated from the predicate transformer model with infinite iteration, cf.. it is also immediately obvious that demonic refinement algebras do not capture the relational semantics, since in the presence of the right zero axiom, the isolation axiom collapses strong iteration to finite iteration. however, all theorems of demonic refinement algebra that do not mention strong iterations are also theorems of kleene algebra.



in the first part of the input, the precedence of operators is fixed. here, the star and strong iteration bind stronger than multiplication which itself binds stronger than addition. the second part is a set of support list that contains the axioms of demonic refinement algebra. the third part is an additional set of support list that contains some useful laws of demonic refinement algebras that have previously been proved. the dual unfold law for strong iteration, for instance, will often be added to this set, too. the third part of the input lists the goal to be proved.



in this section we develop a toolkit of meaningful basic refinement laws in the context of demonic refinement algebra. it is common practice to use such laws for proving more complex refinement laws or for developing and analysing concrete refinements of programs and software systems. these more abstract laws can often replace the more low-level induction or coinduction axioms of kleene algebra or demonic refinement algebra in computations.



we have already developed a toolkit of automatically verified theorems for kleene algebras and several extensions that use the right zero axiom x0= 0. many of these theorems are also valid in the weaker context of demonic refinement algebra. since the prover9 output files present all hypotheses used for proving a particular goal, this can easily be checked. in those cases where



we will automatically verify a basic refinement calculus that support these tasks. many particular refinement laws can be found in. all technical details, including the prover9 and mace4 input and output files, can be found at a web site.



in practice, when starting with a too small set of hypotheses, mace4 usually finds a counterexample. when adding more and more hypotheses, mace4 eventually will not return a counterexample in reasonable time. then prover9 should be started. expensive axioms such as commutativity of addition or the unfold rules should be added as late as possible. if a proof without commutativity is not possible, it often helps to commute terms in the set of support and the goal. handwritten proofs in variants of kleene algebras are usually quite short, i.e., less than ten lines. the number of permutations of terms is therefore strongly limited.



back and von wright have presented several laws for data refinement of action systems in the predicate transformer setting. von wright has already translated one of these laws into demonic refinement algebra. in this section, we provide an automated proof of this law. here, for the first time, we leave the level of pure demonic refinement algebra and predominantly work at the more abstract level of refinement laws introduced and verified in section 6. our hypothesis learning heuristics now becomes particularly important for finding the right set of support for prover9.



the first hypothesis says that b cannot loop infinitely. the second hypothesis expresses that a is data refined by a' with respect to upward simulation z. by the third hypothesis, 1 is data refined by b. the fourth and fifth condition expresses the standard data refinement of initialisations and finalisations.



the proof planning is now greatly simplified in the presence of some experience with data refinement. it can be expected that some forms of denesting and semicommutation will suffice for deconstructing and reconstructing concurrency. for the transformation of interleaving, simulation laws seem highly relevant, whereas the laws of the additive monoid seem avoidable. the effect of the star and strong iteration axioms is hopefully captured by simulation, so that these laws should only be added if necessary. these considerations



this algebraic reasoning can easily be translated into diagrams, as used in term rewriting(cf.) and refinement(cf.). this has extensively been discussed in. in particular, glueing of diagrams along edges corresponds to isotonicity reasoning. therefore, the following diagrams describe the transition from the succedent of the data refinement theorem to the analysis of the infinite loop.



our attempts to prove the atomicity refinement theorem lead us to consider simplified variants. setting r= 0 and l= 0, an automated proof can be obtained in a few seconds. setting only l= 0, theorem 9.1 simplifies as follows.



from the refinement point of view, it seems very interesting to extend demonic refinement algebras to encompass also downward simulations, which is needed in data refinement. as already mentioned, this could be achieved either by adding an operation of converse or through modal operators. more generally, modal demonic refinement algebras would considerably increase the expressiveness of the approach.



we are most grateful to mark schaefer for placing his powerful pc at our disposal for proof search. with our own slow machines we would possibly not have met the deadline. we would also like to thank our referee for interesting pointers to the literature.



