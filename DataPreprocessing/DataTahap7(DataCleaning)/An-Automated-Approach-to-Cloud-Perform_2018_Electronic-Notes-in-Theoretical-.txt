cloud infrastructure has been supplied for many years as an on-demand service across numerous different providers. the different instance types are provided with hardware specifications, but no concrete performance metrics. benchmarking virtual machines is one method to contrast and compare between the different services offered across several providers. this paper presents a tool which permits the automated collection of cloud infrastructure performance information, to compare against the cost of these services.



the motivation for this work is to gain insights into how the performance of cloud infrastructure varies between instance types and providers. this offers an indepth exploration into the real performance of cloud offerings, rather than making assumptions based on the listed hardware specifications and historical performance. with improved estimated execution times for jobs running on the cloud, there should be fewer delays waiting for an instance to become available. jobs with deadlines can be better scheduled by knowing whether the execution time on a higher performance instance type is worth the increased cost. if a particular job is estimated to complete with sufficient available time remaining on a provisioned instance, better estimates could permit another job to be allocated to make the most of this remaining time. to fulfil this aim, a tool is created which can be used to autonomously collect computational performance results from cloud instances across different providers. by handling the entire testing process, from provisioning new cloud instances to extracting results without leaving resources running, the tool is designed with ease of use in mind. the initial implementation stresses the computational power of cloud infrastructure, focussing on cpu and memory performance, however the intent is for the tool to act as a harness for any benchmark suite. whilst others have created similar systems, some are more focussed on data driven applications, and fewer are available for public use. for this reason, we present this tool as an open-source alternative, where it is available in its entirety for others to use. by using this system, performance information has been gathered for many different instance types across the platforms of both microsoft azure, and amazon web services



the performance information collected shows a large distinction between the different vm series from cloud providers. some of the results display a large variance in performance from one instance to the next, whereas others perform very similarly from one run to the other. the different instance series have largely different performance, whilst the cost is not always representative, for example the multi-core instance types within the basic a-series offered by azure in general perform worse than the other series whilst also costing more per hour.



there are several different criteria which are involved in the collection of performance results from a cloud vm. first, we must acquire a new vm to perform our benchmark on, to ensure that we are running with a clean state. the test suite can then be run on the instance, and the results collected. for the initial implementation, specjvm2008 was selected as the benchmarking suite, however it is intended for future iterations to facilitate a selection of testing suites. finally the cloud service must be removed entirely post extraction of result data, to prevent additional cost incursion from leaving any remaining components.



to run specjvm2008, a command must be run from within the installation folder. the python paramiko package was used to connect to the vm over a secure shell(ssh) connection, where the benchmark could then be executed from within the vm. to connect over ssh however, the vm must be setup correctly to accept an ssh key, and the vm must be accessible from the default ssh port(22). to ensure the benchmark runs until completion, a blocking call is made on the output stream from the execution, waiting for the command to exit or the channel to be closed. once this returns the benchmark has completed, and the results file is copied across to the original machine using an sftp session. the final step is to release the virtual machine, by deleting the hosted service and deployments, along with associated data disks.



the basic a2 tier instance score increases by more than a factor of 2 from the basic a1, when the number of cores, memory and price also double. this is unusual, as it shows that doubling the number of threads resulted in an increase in performance by slightly more than double. although the memory on the instance increases also, the amount of memory provided to the jre under test remained at 1gb for both. this may be an erroneous result, and the instances that were provisioned for basic a2 may have simply been slightly faster than those for basic a1, however without running more iterations it would not be possible to substantiate this claim.



each t2 vm receives cpu credits at the beginning of each hour, which allow them to burst above the baseline core usage. the full benchmark run time is approximately 2.25 hours, and is likely to be using near 100% utilization of that which is available at all times. for the first two hours of running, the benchmark will use up the available credits, and run at baseline for the remaining time before more credits are provided at the hourly boundary. for the last hour slot where only 25% of the time is used, the benchmark may be able to burst with the available credits for the remaining duration of the benchmark. if when bursting, the performance of this t2.large instance was greater than that of an m4.large, but far lower when no credits were available and running at baseline, the expected performance would be within the region of that which is seen. the startup and compiler tests which run towards the beginning of the benchmark, while credits would be available to a t2 instance, have greater results for the t2 instance than the m4, whereas others such as scimark and serial, have superior performance on the m4 instance. if the benchmark ran over the entire vm hour slots provided with high utilization, the scores would likely be worse than at present due to running out of credits in the third hour and running at baseline for the remainder of the hour.



some workloads may be single threaded, and therefore unable to benefit from the additional cores that a virtual machine offers. this limits the number of options for these sorts of tasks on current cloud offerings, as the price of multicore systems represents the performance gained from additional cores. however, it may be possible to batch load a number of single-threaded tasks on to a multicore instance type. if the performance of a single thread on a multiple core instance is higher than that of a single core system, and the price per core is the same, it may be worth loading a single threaded job per core on the multicore system to take advantage of the higher performance. specjvm2008 supports running in single threaded mode, and so results have been collected of the performance across the multicore variants of both the d-series and dv2-series. as the previously collected results were not greatly influenced by high memory instance types, the d11-13 vm types have been excluded from the testing process.



the output of the compression test is very similar across the board for this set of tests, with the results deviating by only 6% lower and 4% higher performance than the overall average. some of the instances remained relatively consistent across all 6 iterations, such as instance numbers 3 and 7, with a maximum change in result between runs at 0.84 and 0.81 respectively. others performed more erratically, such as instance 5, where the compression result increases by 2.60 from the first iteration to the second. instance 4 performed particularly poorly when compared to the others, with the lowest score seen in the third iteration, and no scores above 48.81. half of the instances did not produce results that low, and the lowest score of another three were not far below this value. the higher performing instances, 1, 2, and 7, all scored above 50.42, with an average score greater than 51.18.



the intention for this set of testing however is to evaluate how the first test iteration performs in relation to the rest of the results. in 40% of cases, the initial test iteration was the lowest score seen, with the performance increasing by more than 2.00 points in three of them. however, in two of the instance results, the initial test run result was the highest seen over the time period, with a decrease in performance from this result by as much as 1.52.



the difference from the initial result to the average score for the vm across the results ranged from 0.04, where the initial result gave a good indication to the performance of the instance, to 1.60 where the average was greater than the initial result would have indicated. these differences from the initial result show that it is hard to judge an instance from an initial reading; in some cases this can work well, but others it will not. the variability from one instance to the next would make this method impractical to measure a vms performance before making use of it. to refine this approach, the initial test could be run for a longer duration in an attempt to get a better representation of the instances performance. different vm types may also perform less or more variably over time, and so a higher instance tier may produce more useful results.



throughout this research, the intent has been to create a benchmarking tool to collect performance information of cloud infrastructure, which can in turn be used to make superior scheduling decisions. the tool has been designed to permit the direct comparison of compute performance from one virtual machine to another, irrespective of the service provider. at the time of writing, the presented system may only support the specjvm2008 test suite, however the end goal is for the tool to act as a harness for other benchmarking software. whilst others,,, perform similar experiments to those covered here, we aim to provide this tool as an available open-source system for others to use 3. the tool has been used to measure a wide variety of instance type offerings from two different cloud service providers, where it is observed that an increase in cost does not always reflect in higher compute performance.



