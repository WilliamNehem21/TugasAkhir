the operation of expansion on typings was introduced at the end of the 1970s by coppo, dezani, and venneri for reasoning about the possible typings of a term when using intersection types. until recently, it has remained somewhat mysterious and unfamiliar, even though it is essential for carrying out compositional type inference. the fundamental idea of expansion is to be able to calculate the effect on the final judgement of a typing derivation of inserting a use of the intersectionintroduction typing rule at some(possibly deeply nested) position, without actually needing to build the new derivation. recently, we have improved on this by introducing expansion variables(e-variables), which make the calculation straightforward and understandable. e-variables make it easy to postpone choices of which typing rules to use until later constraint solving gives enough information to allow making a good choice. expansion can also be done for type constructors other than intersection, such as the! of linear logic, and e-variables make this easy. there are no significant new technical results in this paper; instead this paper surveys and explains the technical results of a quarter of a century of work on expansion.



in fact, there is no reason why one must use the full power of intersection types; for example, one can choose to use principal typings of the rank-k restriction. in the long run, if one wants to use intersection types, it seems best to view them as a flexible framework for typing with a choice of a wide variety of different levels of precision. however, before attempting to do this, it is extremely helpful to understand type inference for the full system, because it is simpler. hence, it can be beneficial to understand the explanations given in this paper.



here, a ranges over an infinite set of type variables(t-variables). we use lowercase roman letters as metavariables over t-variables, generally those from the beginning of the alphabet like a, b, and c. we adopt the convention that distinct metavariables stand for distinct variables within any single example.



note that type environments contain all and only necessary assumptions. systems with this property are called relevant in the literature, due to the correspondence with relevant logic. in fact, this system has the further property that types are linear; this is further discussed in section 5.2.



this section first demonstrates in subsection 3.1 the importance of expansion in the context of an intersection type system, then explains in subsection 3.2 how expansion works as it was designed historically, and then presents in subsection 3.3 the modern way of doing expansion through expansion variables.



e-variable application in a skeleton acts as a placeholder for unknown uses of other typing rules, such as intersection introduction. filling this placeholder is done via substitution, by replacing the e-variable with an expansion term. we call expansion terms just expansions.



we write[s] x for the application of substitution s to an entity x(such as a t-variable, e-variable, type, skeleton, or an expansion). substitutions apply to type environments pointwise, i.e.,[s] a is the environment such that([s] a)(x)=[s] a(x). we reuse the notation and write[e] x for the application of an expansion e to an entity x. expansion also applies to environments pointwise. the definitions of[s] x and[e] x consist only of very simple cases, but to detail each case we will give the definitions in an incremental fashion. note also that these definitions can be directly translated into programming languages like sml and haskell.



note that unlike definitions of expansion not using e-variables, the two copies of x are not renamed by this case of expansion. as we show in section 3.3.4, this can instead be achieved by e1 and e2. removing the built-in renaming of expansion makes reasoning much easier.



the older definitions of expansion have been a bit hard to understand and implement, leading(in our opinion) people to focus on the easier rank-2 intersection types[43,24,13,14] rather than try to use the full power of intersection types. the key advantage of rank-2 intersection types over higher ranks is that when doing compositional type inference where constraints are always solved as soon as they are discovered, expansion never corresponds to inserting uses of intersection-introduction at deeply nested positions in typing derivations. related to this, expansion never needs to insert uses of the intersection type constructor in typings underneath arrow types. most of the complications of expansion can be avoided when using only rank-2 intersection types. however, because of the recent development of e-variables, expansion is no longer as difficult to understand and implement, and hence we believe there is no longer a strong reason to restrict intersection types to only rank 2.



so far, all uses of expansion correspond to introducing uses of typing rules that operate uniformly on every component of a typing. in the future, expansion may be generalized to introduce non-uniform typing rules(for example, this appears to be needed to handle union types). we expect that e-variables will make this considerably easier than previous ways of doing expansion.



e-variable application may be considered as a restricted form of function application, where the function is determined by the expansion that ultimately replaces the e-variable. in this sense, unification with e-variables and expansion may be related to 2nd-order unification(2u), semi-unification(su), or some restriction of 2u or su. it would be interesting to define a direct reduction between any two of these problems.



we are grateful to mario coppo for useful discussions on the history of expansion. we would also like to thank mario coppo, mariangiola dezaniciancaglini, betti venneri, a. j. kfoury, and adam bakewell for comments on drafts of this paper.



