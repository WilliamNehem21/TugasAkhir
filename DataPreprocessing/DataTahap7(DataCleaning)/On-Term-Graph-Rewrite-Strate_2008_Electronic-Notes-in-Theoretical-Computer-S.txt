then, we investigate the rewrite relation over a particular class of term-graphs called admissible. an admissible term-graph is a term-graph whose cycles do not include defined functions. we give a sufficient(syntactic) condition which ensures that the set of admissible graphs is closed under rewriting and we show the confluence of admissible graph rewriting relation, even in the presence of collapsing rules.



the confluence of a rewrite relation allows one to evaluate expressions in a deterministic and efficient way by using rewrite strategies. such strategies have been well investigated in the setting of finite and infinite orthogonal trss(e.g.,[22,16,18]). in, a strategy that computes outermost needed redexes based on definitional trees has been designed in the framework of orthogonal constructorbased trss. we show how definitional trees can be useful to design an efficient strategy in presence of orthogonal constructor-based tgrss. we particularly state that the resulting strategy is c-hyper-normalizing on the class of admissible graphs and develops shortest derivations.



this extended abstract is organized as follows. in the following section, we revisit the definition of term-graph rewrite systems. section 3 introduces the class of admissible term-graphs and state the confluence property for admissible tgrss. an efficient rewrite strategy is presented in section 4. concluding remarks are given



example 2.5 let g= n: f(m1, m2, m3). let h1= m1: h(m1)[g]. then h1= n: f(m1: h(m1), m2, m3). let h2= n 2 m1[h1]. then h2= n: f(m1: h(m1), m1, m3). let h3= m1 m3[h2]. then h3= n: f(m3, m3, m3)+m1: h(m3).



computing with general cyclic term-graphs is not such an easy task even in presence of orthogonal rewrite systems. in this section we introduce the class of admissible term-graphs for which confluence results can be stated and efficient strategies can be designed. this class is inspired from the imperative style of programming where defined procedures and functions operate over data-structures built using particular constructors such as records, pointers etc. and where cyclic expressions such as n: fact(n), n: tail(n) or n:+(n, n) are meaningless.



remark: the notions of outermost node and outermost redex are well-defined in the framework of admissible graphs: if p and q are two nodes of an admissible graph labeled with defined operations and such that there exists a path from p to q(i.e., p is outer than q), then, by definition of admissible graphs, there is no path from q to p.



and are defined below. nevertheless, our definition is a bit different from the original one proposed in or those used in the context of graph rewriting[3,9,10]. the main difference comes from the use of branch nodes. we actually introduce the possibility to have some sharing in the left-hand sides of the rules. for that purpose, we distinguish in the definition below between position.branch and share.branch nodes of a definitional tree. position.branch corresponds to the branch nodes in whereas share.branch gives another possibility to specialize patterns according to their topological shapes.



our strategy has been successfully extended to parallel rewriting in presence of weakly orthogonal rewrite systems. its has also been extended in order to develop needed narrowing steps[11,9]. recently, the framework presented in this paper has been extended in order to deal with non deterministic functions in declarative(functional and logic) languages[3,2]. we are currently investigating new extensions of the presented strategy in a more general setting like term-graphs with priority.



