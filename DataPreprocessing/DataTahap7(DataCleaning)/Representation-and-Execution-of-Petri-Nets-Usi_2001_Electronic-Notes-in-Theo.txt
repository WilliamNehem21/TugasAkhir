in this paper we give a high-level overview of our recent results which attempt to contribute to the general goal of unifying petri net models by studying in detail the unification of a wide range of such models within rewriting logic. using rewriting logic as a logical and semantic framework, we show how place/transition nets, nets with test arcs, algebraic net specifications, colored petri nets, and timed petri nets can all be naturally represented. our work extends in substantial ways previous work on the rewriting logic representation of place/transition nets, nets with test arcs, algebraic net specifications, and timed petri nets.



colored petri nets, a more syntactic, finitary version of colored nets based on an underlying programming language, are proposed in. a point worth remarking is that this definition leaves open the particular choice of the underlying programming language. we use cpnl to abbreviate the class of colored petri nets over a programming language l.



this section illustrates how an important class of timed petri nets(see e.g.[1,53,31]), namely interval timed petri nets(itpns), can be given a rewriting logic semantics. we define itpns similarly to the interval timed colored petri nets(itcpns) proposed by van der aalst. itcpns appear in the context of colored nets, but to simplify the exposition and focus on real-time



in this paper we have given a high-level overview of how rewriting logic can be used as a semantic framework in which a wide range of petri net models can be naturally unified. specifically, we have explored how place/transition nets, nets with test arcs, algebraic net specifications, colored petri nets, and timed petri nets can all be naturally expressed in rewriting logic, and how well-known semantic models often coincide with(in the sense of being naturally isomorphic to) the natural semantic models associated to the rewriting logic representations of the given nets. the general way of representing petri nets within rewriting logic that we propose is by no means limited to the net classes explicitly discussed in this paper. although a careful study still has to be carried out, we briefly discuss in some ideas about how similar representations could be defined for other petri net classes, such as colored petri nets based on higher-order programming languages, colored net specifications over higher-order logics, nets with macroplaces, nets with fifo places[35,25,23], object-oriented variants of petri nets[61,38], and object nets[63,64,24,65], where nets are viewed as token objects.



