this paper focuses on a major improvement on the analysis of reachability properties in large-scale dynamical biological models. to tackle such models, where classical model checkers fail due to state space explosion led by exhaustive search. alternative static analysis approaches have been proposed, but they may also fail in certain cases due to non-exhaustive search. in this paper, we introduce a hybrid approach aspreach, which combines static analysis and stochastic search to break the limits of both approaches. we tackle this issue on a modeling framework we recently introduced, asynchronous binary automata network(aban). we show that aspreach is able to analyze efficiently some reachability properties which could not be solved by existing methods. we studied also various cases from biological literature, emphasizing the merits of our approach in terms of conclusiveness and performance.



with increasing quantities of available data provided by new technologies, e.g. dna microarray, there is a growing need for expressive modelings and their related high-performance analytic tools. among them, works on concurrent systems have been of interest in systems biology for over a decade[4,5,35]. if model validation is a major concern, one of the main challenges nowadays is predicting the behavior of these systems.



reachability problem on formal models is a critical challenge where both validation problems(whether the model satisfies the a priori knowledge) and prediction problems(properties to be discovered) meet. from a formal point of view, numerous biological properties in computational models can be transformed to reachability properties. for example, the reachability of state 0/1 of a could represent the activation/inhibition of certain gene or synthesis of a protein, while initial state could represent initial observation in an experiment. if the reachability of a certain state contradicts with the a priori knowledge, one can modify the model and/or design a new experiment to verify whether there is an error in the a priori knowledge or former observation. also, reachability analysis is of help to medicine design: for example if one wants to prevent the carcinogenesis of a cell(target state), one possible solution is to find the critical pathways towards the target state and design a medicine to cut them in order to keep the cell healthy.



in the domain of model checking, reachability has been of great interest for over 30 years[10,11]. various modeling frameworks and semantics in bioinformatics have been studied: boolean network, petri nets[23,14], timed-automata[12,36]. these approaches rely on global search and thus face state explosion problem as the state space grows exponentially with the number of variables. in, it has been shown that the reachability problem of petri net is exponential time-hard and exponential space-hard, and this conclusion does not change even under some specific conditions. for 1-safe petri nets, the complexity of reachability analysis is generally pspace-complete. li et al.[20,21] investigated theoretically the stability, the controllability and the reachability of switched boolean networks, but their method remains computationally expensive; saadatpour et al. researched only the reachability of fixed points.



beside these approaches, abstraction is an efficient strategy to deal with such models of big scale. it aims at approximating the model while keeping the most important parts influencing the reachability. abstract methods often have better time-memory performance but with a loss of information. they solve usually a simplified version of the original model, i.e. the results from these approaches are not necessarily compatible with all the properties of the original model. while studying reachability problems, the system dynamics is abstracted to static causalities between states and transitions.



our work shares similar concerns but we combine static analysis and bounded model checking. we have developed a heuristic approach permreach to attack reachability problem which is more conclusive than pure static analysis but timeconsuming and still not able to solve reachability problems under certain conditions. in this paper, we propose a hybrid approach aspreach based on the former lcg reasoning and a non-exhaustive search in the lcg to obtain a more conclusive solution of reachability problems. aspreach allows one to solve the cases where other static methods fail. furthermore, it can also solve the reachability of a set of states which to our knowledge has never been done in static way. we assess the value of our contribution using benchmarks on biological examples from the literature.



to identify cycles, we search instead strongly connected components(scc) of size greater than one. because cycles may interlace and there is no such problem in scc. in other words, a scc may contain several nested cycles which connect to each other. shows that the detection of sccs can be done in o(|v|+|e|) time, with|v| the cardinality of the vertices and|e| the cardinality of the edges. lcg is usually a sparse graph, as in biological systems, the components mostly interact with only a part of the system, hence the out-degree can be considered of o(1) and the detection of sccs 4 can be done in o(|v|), i.e. linear time.



lcg illustrates the causality between necessary transitions to be fired to reach the target state; the tentative of removing cycles simplifies the lcg and keep the reachability unchanged; pseudo-reachability allows one to filter some unreachable cases based on the topology of lcg. the heuristic approach is the core of our algorithm. stochastic choices avoid combinatorial explosion on different or gates. the asp part searches thoroughly the result but does not traverse the whole state space(asp solver starts from constraints, finds one consistent order and terminate the search).



algorithm 2 provides the detailed pseudocode of the algorithm taking an lcg l as input whose detailed construction is given in algorithm 1. lines 4-8 delete all cycles with at most one incoming edge. after removing cycles, the lcg may contain nodes without successor. such nodes can be pruned since they do not lead to initial state(line 9-18). this preprocessing reduces the search space of the stochastic search performed in step 4. now l is pruned and might be cyclefree. static analysis of l can then be used as heuristics to check pseudo-reachability(definition 2.8) in order to detect some unreachability cases(lines 19-21) which may conclude before searching. lcg shows the dependencies between local states and



the rough idea is: if different states of one automaton a appear, e.g. a0 and a1. one of them must be in initial state(suppose a0). the transitions with head a0 have to be fired before a0 flipping to a1, otherwise there is no solution node in the lcg which allows a1 return to a0. in other words, the predecessor of a0 must appear before a1. core rule describes this constraint.



these models are originally boolean networks. according to the approach in appendix a, bns are transformed into abans. here, we ran the same test as in. in the tcr model, we take 3 automata as input(cd4 cd28 tcrlig), varying exhaustively their initial states combinations(23), take the reachability of states of 5 automata(sre ap1 nfkb nfat sigmab) as output. similarly we carried a bigger test on egfr model with 13 automata as input and 12 automata as output. we first tested the performance of traditional model checkers, mole 7 and nusmv 8, in which mole turns out to be memory-out for 6 in 12 outputs, and all memory-out for nusmv in model egfr. due to the big state space, traditional model checkers are not applicable. in the tcr tests, our approach gives exactly the same result as pint did. as for egfr tests, aspreach returned no inconclusive output.



in this paper, we present the aban modeling framework and its model-related reachability analyzer aspreach. facing the two critical challenges: complexity and conclusiveness, we combine static analysis and answer set programming for a good performance on both criteria. aspreach performs normally on models with 1000 automata while traditional model checkers fail to compute and static analyzer pint also fails to give conclusive results on certain instances.



