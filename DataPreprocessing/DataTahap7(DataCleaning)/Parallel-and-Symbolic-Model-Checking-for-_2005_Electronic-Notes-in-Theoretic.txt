we consider the model checking problem for flc, a modal fixpoint logic capable of defining nonregular properties. this paper presents a refinement of a symbolic model checker and discusses how to parallelise this algorithm. it reports on a prototype implementation of the algorithm in glasgow parallel haskell(gph) and its performance on a cluster of workstations.



nowadays, model checking for(temporal) logics is commonly accepted as one of the key methods in verification. a major limitation to the usefulness of model checking for verification purposes is the state space explosion problem. to tackle this problem one employs symbolic methods that work on process descriptions directly and usually achieves better performance there.



the implementation of gph models a virtual shared heap, i.e. all program variables are accessible as if residing on the same processor. the runtime system arranges for automatic data transfer between processors if this is not the case. a virtual shared heap facilitates the development of architecture independent programs that are able to exploit large numbers of processors. in contrast, the number of processors in physical shared memory machines is bounded by hardware constraints, usually to a few dozens. for applications wanting to exploit only small amounts of parallelism such a simpler shared



one important language feature for this application is the ffi interface provided in haskell. this enables us to use existing, tuned c-code for basic bdd operations. however, since the long bdd library that we use, manages its own heap, interaction between the haskell heap and the c heap is necessary. on haskell side this means that a bdd is represented as a foreign object, i.e. a data-structure that is constructed outside the haskell heap. this data structure is represented by a pointer into the c heap and a finaliser routine that is executed once it is not used from the haskell heap anymore.



the main advantage of this source of parallelism is its coarse granularity, turning the entire test set generation into a parallel thread. the form of parallelism exploited here is producer-consumer(or pipeline) parallelism, where producer and consumer work in parallel on the same data structure. this parallelism could be combined with the massive amount of divide-andconquer parallelism in version pmc1. additionally, we could also compute the test set itself in parallel. this is possible since there are finitely many functions under which the closure of a set of bdds needs to be computed.



one important goal in our design of the parallel algorithm is to achieve scalability, i.e. to ensure that a larger number of processors than those currently used can be exploited without changes to the code. unfortunately, this property also triggers more data transfer between heaps than necessary. an implementation that uses laziness to avoid these operations unless parallelism is definitely exploited should improve the one processor performance, but is tricky to implement. hardwiring such explicit order of evaluation into the code is the main reason for its complexity in an otherwise simple model of parallelism. we therefore now work on an approach where the structure of a foreign object is extended with a marshalling function, that will be automatically started as part of the graph packing algorithm used by the runtimesystem to transfer computations between processors. this ensures that data transfer between heaps is only done when needed for parallel execution, and eliminates this complexity from the parallel gph code.



