conformance testing is a kind of functional testing where a formally verified specification is considered and test cases are generated so that conclusions can be established regarding the possibility of acceptance/rejection of conforming/non-conforming implementations. if the focus is on a complete specification, test suites may be impractical and even infinite with unclear relations between test cases and the specification. property oriented testing focuses on particular, eventually critical, properties of interest. the specification of one or more properties drives the test process that checks whether they are satisfied by an implementation. properties are often stated as test purposes, targeting testing at a particular functionality. this paper presents an overview of approaches to property oriented testing for reactive systems, focusing on labelled and symbolic transition systems.



property oriented testing is a kind of conformance testing where the selection criteria is associated with a given property, verified on the specification, that needs to be checked. the goal is to focus on particular, eventually critical, properties of interest of the system, possibly not previously checked[10,8]. the specification of one or more properties drives the test process that checks whether they are satisfied by an implementation. properties are often stated as a test purpose, targeting testing at a particular functionality.



approaches for test case selection from test purposes have been developed, focusing on algorithms and tools, mostly based on labelled transition systems as specifications[6,16]. more recently, approaches based on more abstract views of a system are being considered[4,11]. in both cases, the approaches are usually inspired by the model checking technique, where a given(temporal logic) property is verified over a model. model checking algorithms are adapted to test case generation and temporal logic properties are the basis of test purposes[8,28].



reactive systems where properties are stated as test purposes. there is no intention to be exhaustive, but to present different and representative ones. section 2 presents theoretical background on conformance testing and test purpose. section 3 presents approaches for test purpose and test case selection based on labelled transition systems, whereas section 4 presents approaches based on symbolic transition systems. finally, section 5 presents a comparison of approaches and section 6 presents concluding remarks and perspectives.



a test suite that is e-complete can distinguish among all exhibiting and nonexhibiting implementations, such that, iut exhibits e if and only if iut hits e by te. a test suite is e-exhaustive when it can only detect non-exhibiting implementations(iut exhibits e implies iut hits e by te), whereas a test suite is e-sound when it can only detect exhibiting implementations(iut exhibits e if iut hits e by te). note that there is a similarity in purpose between sound test suites and e-sound test suites, even though the implications are relatively inverted. the former can reveal the presence of faults, whereas the latter can reveal intended behaviour.



conformance and exhibition can be related. the goal is to consider test purposes in test selection to obtain test suites that are sound and e-complete. on one hand, e-soundness guaranties that a hit result always implies exhibition. on the other hand, e-exhaustiveness guaranties that implementations that exhibit are not rejected. soundness provides us with the ability to detect non-conforming implementations. contrary to complete test sets, e-complete test sets are more feasible. for instance, an algorithm is present in for labelled transition systems.



labelled transition systems(lts) are defined in terms of states and labelled transitions between states, where labels often represent observable interactions of the system. a test case is usually defined as an lts that is deterministic and has finite behaviour, contains pass and fail as terminal states and any non-terminal state has either an input action or output actions or an action that observes quiescence. such restrictions are often made to make the definition of sound and e-complete test cases possible.



lts approaches to property testing are presented in the next subsections. these approaches are based on the specification of the visible behaviours of reactive systems. specification consists of an lts representing the iut behaviour, in general, through input and output actions. analysis over specifications, e.g. performed by traversal techniques, make possible the specification of the properties to be tested against the iut and the establishment of the conformance relation w.r.t. the iut.



tgv(test generation with verification technology) is a black-box testing tool that provides automatic synthesis of conformance test cases for non-deterministic reactive systems. it has already been applied to industrial experiments. the test cases synthesis is based on verification techniques such as synchronous product, onthe-fly verification and traversal algorithms.



concluding the process, the so-called controllability conflicts are suppressed to obtain the test cases. these controllability conflicts are represented by the presence of choice between outputs or between inputs and outputs in some states. these conflicts are solved by pruning some transitions. in this case, either one output is kept and all other inputs and outputs are pruned, or all inputs are kept and outputs are pruned. optionally, a test graph tg may be constructed during the selection phase by suppressing some conflicts on-the-fly.



the abstract test cases generated by tgv are sound and exhaustive with respect to the ioco relation. however, since the generated ctg may contain infinite test cases and the tool does not provide a mechanism to select the tests to be implemented, it is difficult to achieve soundness and exhaustiveness of test suites in practice. the tool does not provide mechanisms to implement and execute the test cases either. however, tgv is part of a wide project, called agedis, which aims at the development of a methodology and tools for automated model driven test generation and execution for distributed systems.



of properties over model and implementation. a case study was performed with the mobile ip protocol. the model checker adapted to generate the test purposes was the veritas. test cases were generated with the tgv tool from the test purposes generated from the mobile ip and some ctl formulas. some analysis were performed comparing the ctg provided by tgv and the mobile ip model, allowing us to conclude about the e-exhaustiveness of the generated test suite.



symbolic transition systems(stss) extend ltss by treating data symbolically, that is, by incorporating the explicit notion of data and guarded transitions using first-order logic, bringing the specification to a more abstract level. the idea is to cope more effectively with the state explosion problem and provide more understandable representations of test purposes and test cases. the semantics of stss is given in terms of ltss that can be even infinite. therefore the theoretical testing framework for ltss can be extended to stss, even though further challenges need to be faced. approaches based on stss are presented in the next subsections.



stg is a tool for the generation of symbolic test cases for reactive systems. the underlying model to represent the system and test purpose specifications is a special kind of lts, called input-output symbolic transition systems(iosts), which takes into account variables and parameters. the ioco theory is adapted to cope with the iosts model. however, the quiescence is not considered in this new approach.



the stg tool was applied to simple case studies for testing versions of the ceps(common electronic purse specification) and of the file system of the 3gpp(third generation partnership project) card. the main contribution of this technique is a set representation of states rather than an enumeration of the state space from the explicit representation, solving the state space explosion problem. due to the symbolic representation of the generated test cases over variables and parameters of the specification, a single test can be applied to implementations based on different specification parameters values, which need to be instantiated only at the test execution time. the test cases are also more readable by humans.



in, the authors propose an algorithm to symbolic test generation based on the ioco theory. the underlying model of lts is extended with the concepts of location variables and data, allowing to specify data dependent behaviour. this extended model is called symbolic transition systems(sts). the test generation algorithm for the sts model treats data symbolically, with data types represented by sets of values(algebras) and first order formulas specifying values or predicates. the concept of gate is added to the sts definition, aiming at data communication. to cope with the observable behaviour at the interfaces, the gates are partitioned into two sets: input and output gates. the use of algebras and first order logic allows to combine stss with any formalism for the specification and data manipulation. test purposes are not used, and the test cases are generated



the proposed algorithm is sound and complete w.r.t. the ioco theory. it aims at combining the test generation from stss with an on-the-fly execution of the test cases. thus, only the part of state space corresponding to the observations made while testing is generated. a function to decide whether the currently executed trace is a visible trace of the specification is assumed to be implemented. such function is aimed at guaranteeing the ioco relation and gives verdicts. there is no tool implemented based on this approach.



an overview of approaches to test purpose and test case generation and current research towards a discipline of property oriented testing for reactive systems is presented, focusing on lts and sts. in both cases, theoretical background and tools have been developed along with case studies. lts approaches may demand simpler algorithms for test case generation, but they have to deal with the state explosion problem due to the explicit representation of data values when complex data structures are involved. on the other hand, sts approaches focus on more concise and abstract representations of the system, but decidability and computability of data specifications are of concern when generating test cases. in both cases, test case selection is still a challenge. appropriate techniques for selecting effective test cases/data leading to feasible test suites among the mass of generated ones are object of current investigation. as the problem is hard, it is likely that solutions will be connected with specific kinds of properties.



