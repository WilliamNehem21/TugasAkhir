in this paper, we consider symbolic model checking of safety properties of linear parametrized systems. sets of con gurations are represented by regular languages and actions by regular relations. since the veri cation problem amounts to the computation of the reachability set, we focus on the computation of r() for a regular relation r and a regular language. we present a technique called regular widening that allows, when it terminates, the computation of either the reachability set r() of a system or the transitive closure r of a regular relation. we show that our method can be uniformly applied to several parametrized systems. furthermore, we show that it is powerful enough to simulate some existing methods that compute either r or r() for each r(resp.) belonging to a subclass of regular relations(resp. belonging to a subclass of regular languages).



many protocols dealing with distributed systems are de ned in a parametrized way. it is then important to be able to model check these protocols in their parametrized version, i.e., independently of the number of processes in the system. the problem of verifying these parametrized systems being undecidable, we must either identify decidable subclasses[11,12,10], or provide semialgorithms for which termination is not guaranteed. in this work, we restrict ourselves to the model checking of safety properties of linear parametrized systems and propose a semi-decision procedure that solves this problem.



several works have been done in this direction[8,4,3,5]. in particular, abdulla et al. have introduced a class of unary regular relations 2 for which they characterize r by a nite transducer. in, we have identi ed a subclass of regular languages called alphabetic pattern constraints(apc) which can naturally be used to model parametrized systems such as mutual exclusion protocols. we have provided an algorithm that computes r() for every apc language and every semi-commutation relation r(i.e., a relation corresponding to a set of rewriting rules of the form ab! ba). this kind of existing constructions of either r or r() for each r(resp.) belonging to a subclass of regular relations(resp. belonging to a subclass of regular languages). indeed, we prove that it simulates the construction of r presented in



outline. in the next section we present the main contribution of this paper: the regular widening techniques. an application of our method to the veri cation of the burns protocol and a brief description of our tool prototype are given in section 3. in section 4 we show that the widening can simulate the computation of r given in, and prove that it computes r() for every apc language and every semi-commutation relation r.



access the critical section is represented by a token that the processes pass from the left to the right. the state of a process is then a if it has the token, and b if not. in the beginning, the leftmost process has the token, the initial con gurations are then represented by the expression= ab. the action that consists in passing the token from the left to the right can be represented by the relation r= copy()(ab; ba)copy() where for each l 2, copy(l) denotes the set f(x; x) 2() j x 2 lg. let us try to compute the reachability set r() of this system. it can be seen that for each k 0, rk()= bkab, and thus there exists no index k such that rk+1() ri()



in this section, we describe a new technique, called regular widening, that allows the automatic computation of an upper approximation of the e ect of the iteration of a regular relation an arbitrary number of times. this mechanism is based on the comparison of and r() and on the detection of some patterns that will be added at each application of r and which will nally produce loops in the limit language. to show the intuition, we will present gradually di erent widening principles: the rst one is the most elementary and can be used only in the cases where r and are such that r can be applied in a unique position in. the second widening principle is useful when contains several positions where r can be applied, but r can change only one position at a time. finally, the last principle, which is an extension of the two previous ones, is the most general and can be applied to di erent classes of systems.



each step, the e ect of the application of r is the addition of a\" in the middle and we add 1:: 2 to the set of reachable states. we continue the application of r to the new set until convergence. at the end, if this procedure terminates, we are sure that the computed set is an upper approximation of r() since all we have done is adding 1: 2. we will show later how this



bab, we detect the addition of the letter b to the left of and compute b ab. notice that we have computed the exact set r(ab)= b ab. we can see that the intersection of the reachability set with the bad con gurations(a+ b) a(a+ b) a(a+ b) is empty. we have thus shown, using widening techniques, that the token ring protocol is correct. we will see in section 3 that the widening principles presented in this section allow the model checking of numerous mutual exclusion protocols.



in this paper, we extend the previous widening principle so that we could compute r()(or an upper approximation of it) if we detect several growths between and r(). indeed, the applicability of the last widening principle depends on both and r, since the situation= 1: 2 and r()= 1:: 2 may occur only when r can be applied in a unique position in as it is the case in the previous example. let us consider for instance= a ba and r= copy()(a; c)copy(), then r()= a ca ba+ a ba ca. our widening principle cannot be used here since there are two di erent growths(the underlined parts) due to the fact that r can be applied either to the left or to the right of b(i.e., there are two possible positions in where r can be applied). thus, we need a more general widening principle.



valid anymore. take as an example r= copy(c+ e)(a; c)copy()(b; d)+(a; e)copy()(b; f) copy(d+ f) and= a b, then r()= ca b d+ ea b f. we can see that our above principle is not applicable. we need then to strengthen it.



obviously, the e ect of r is always to add one\c" to the left and one\d" to the right or, one\e" to the left and one\f" to the right. it follows that r() is the set fw 2(c+ e) a b(d+ f) j jwj= jwj^ jwj= jwj g, where jwja denotes the number of occurences of the letter a in the word w. since we are restricted to regular languages(so that we could easily test inclusions and compute unions and intersections), we can consider as an upper approximation of r() the regular language(c+ e) a b(d+ f).



0= r ri1(); ri2() to the reachability set and continue our exploration by computing ri2+1( 0). if it is already included in the reachability set then we are done and the computation terminates, otherwise, we check whether the widening can be applied,:::etc. for instance, consider r= copy(c)(b; c)+(a; c) copy(a) and= ba, then r()= ca, and r2()= cca, we see that between and r() no extrapolation can be done whereas between r() and r2() we can extrapolate and obtain r+()= c+a.



we have implemented our widening principle in a tool based on mona. for the time being, only the elementary principle has been considered. regular languages(resp. regular relations) are represented by nite automata(resp. regular transducers) using the library of mona. this tool has been used to model check in a fully automatic way several mutual exclusion protocols, namely the burns, the dijkstra, the szymanski, the bakery and the token ring protocols.



proof we only sketch the proof idea(see the full version of the paper for the complete proof). we compute the transducers of r, r2, r3 and r4 successively. we detect several growths between r3 and r4. our new widening principle yields exactly the transducer r given in.



de nition 4.3 let be a nite alphabet. an atomic expression over is either a letter a of or a star expression(a1+ a2++ an), where a1; a2;:::; an 2. a product p over is a(possibly empty) concatenation e1e2 en of atomic expressions e1; e2;:::; en over. an alphabetic pattern constraints(apc) over is an expression of the form p1++ pn, where p1;:::; pn are products over. a single semi-commutation relation is a relation of the form copy()(ab; ba)copy(). a semi-commutation relation is a



in the following, we are going to show that the widening techniques are able to compute the closure of apcs under semi-commutations. to obtain exact results, we use widening with test(3). the proof can be found in the full version of the paper.



we have described a technique called regular widening that allows, when it terminates, the computation of an upper approximation of the reachability set of a linear parametrized system. more precisely, our technique allows the computation of an upper approximation of either r or r() for a regular relation r and a regular language. we have shown that our method can be uniformly applied to several parametrized systems. moreover, we have shown that our technique is powerful enough to simulate several existing constructions of either r or r() such as those presented in and.



