the need to store data beyond relational structure has become more and more apparent over the years. many new and different data models have been introduced. first, so called semantic data models have been developed[18,30], which were originally just meant to be used as design aids, as application semantics was assumed to be easier captured by these models[5,19,44]. later on some of these models, especially the nested relational model, object oriented models and object-relational models, the gist of which are captured by the higher-order entity-relationship model(herm,[42,43]) have become interesting as data models in their own right.



this paper continues to take on these two challenges. in order to find a unifying framework and capture several data models at a time our work is based on an abstract approach in the context of types for nested attributes and subtyping. recall that in the rdm, the set of all subsets of a relation schema forms a boolean algebra with respect to inclusion and the set operations of union, intersection and difference. this simple, yet powerful tool is the basis for the success of relational dependency theory. we follow a similar algebraic approach in order to extend these achievements to complex object types.



furthermore, we formally demonstrate that the algorithm works correctly and in polynomial time. finally, the paper shows that the algebraic approach based on nested attributes seems to be very natural. that is, established results from relational database theory can be carried over to complex object databases. the nesting of attributes can be easily extended to sets, multisets, unions, references etc. therefore, our work might serve as a unifying framework for the foundation of dependency theory in advanced data models.



this section introduces a data model based on the nesting of attributes and subtyping. it may be used to provide a unifying framework for the study of complex object types such as records, lists, sets, multisets, unions and references. this article, however, focuses on records and lists only.



derivations not using the brouwerian-complement rule are of particular interest, see for instance for an explanation why the complementation rule is of particular interest in the rdm. in the relational case it is possible to decide in polynomial time whether a given fd or mvd can be derived from a given set of fds and mvds without using the complementation rule. we are confident that this decision procedure can be extended to databases supporting various types.



there are many ways of continuing our research. for the future, we would like to explore richer type systems containing sets, multisets, unions and even references leading to rational trees. the class of fds in the presence of base, record and finite set types has already been studied in and has led to a more sophisticated set of inference rules since the extension rule is no longer valid in the presence of sets. we have also looked at extending this result to lists and multisets. fds can be quite easily captured in the presence of base, record and finite list types only. on the other hand, mvds show an interesting behaviour in the presence of finite set types, in the sense that theorem 4.4 is no longer valid. that is mvds deviate from binary join dependencies.



