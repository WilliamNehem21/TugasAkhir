smv, spin and uppaal work on models described in their proprietary specification languages. re-modeling existing systems in these proprietary formalisms is a huge effort. for existing systems, model checking of higher level programming languages(e.g., c, c++ or java) is the more efficient approach, but when it comes to embedded software, many problems arise when model checking c programs.



microcontroller programs written in c usually contain direct hardware accesses or embedded assembly statements. these constructs are not handled by existing c code model checkers(see). moreover, c code is first compiled into assembly code before it is deployed to the hardware. hence, the c code is only an intermediate representation. the compiler could introduce errors that cannot be found in the original source code. in assembly code all errors introduced during the complete development process are present. moreover, in contrast to c code, assembly code has a clean, formal and well documented semantics. hence, model checking of assembly code(machine code) gets into focus of research, see[1,12,13,17,20].



however, when model checking assembly code state spaces tend to be bigger and the analysis is no longer hardware independent. in order to tackle these problems, we have developed[mc]square 4, which is a discrete,(mostly) explicit state, on-the-fly, computation tree logic(ctl) model checker. it is capable of model checking assembly code written for certain microcontrollers(atmel atmega and infineon xc167). we did not restrict the set of supported constructs. hence,[mc]square can handle arbitrary assembly programs for those microcontrollers, supporting both low-level features such as direct or indirect memory access and sourcelevel constructs such as recursion or functions. to address the disadvantage of being hardware-dependent, we developed an extensible architecture, which is described in. to deal with the state explosion problem, we implemented different abstraction techniques in[mc]square. in this paper, we will show how prioritized interrupt levels can be used to abstract away from the concrete state of the interrupt bits of a microcontroller.



a simulation relation between the concrete trace of the system and the abstracted, nondeterministic traces, thus yielding an over-approximation of the real system behavior. however, while over-approximating the concrete behavior, it is true that for every trace in the abstract space, there is a concrete system which will exhibit this behavior. as interrupts depend on the behavior of an external environment which is not under the control of the processor, this means that all errors found in the over-approximation can in fact also be traced back to the real implementation. after that, a case study is summarized which demonstrates the effect of interrupt nondeterminism on the state space size. in the end a conclusion is drawn and some potential directions for future improvements are shown.



motivated by the observation that usually memory is the limiting factor in the application of model checking, many approaches have been developed to combat the state explosion problem(see for an overview). the abstraction technique presented in this paper, interrupt nondeterminism, is dynamically applied at runtime. to the best of our knowledge, no comparable approach has been developed so far to control the effect of interrupts in modeling embedded systems.



symbolic simulation is another technique that is similar to the technique applied in[mc]square. here, symbolic values are used in place of explicit values. in our approach parts of the states used can be symbolic, but whenever the simulator or the model checker needs to access symbolic parts of a state, these parts are instantiated, and hence, become explicit. all parts of a state that are not accessed remain symbolic. in, a symbolic simulator is used to verify hardware systems. whenever an x(denoted by* in our approach) is accessed and a value is needed, new symbolic variables are added and simulation has to be repeated. in our approach a dynamic refinement is conducted. there are some approaches combining explicit and symbolic executions(cf.[6,22]), but these approaches employ explicit execution and symbolic execution in parallel.



then, the static analyzer component starts inspecting the assembly program. during this analysis, it uses information from the formula object(registers, variables and memory locations used within the atomic propositions) to preserve validity of the results. in the first step of the static analysis, a control flow graph(cfg) of the assembly program is created. this cfg is inter alia used by the counterexample generator to present counterexamples or witnesses. in the end, the static analyzer adds annotations to the assembly program which are used by the simulator to reduce



during state space building[mc]square uses different abstraction techniques to minimize the size of the state space. it is important to notice that all these abstractions lead to a safe over-approximation of the concrete state space, establishing a simulation relation between the concrete and the abstract states(and thus preserving the validity of actl formulae). one of these abstraction techniques is interrupt nondeterminism, which is detailed in this paper.



now we will show how to use the general framework to model the atmel atmega16 microcontroller. the atmel atmega16 has a 16k flash memory for program code, which corresponds to the location set q. all special purpose register of the atmel are embedded into the data space, which has an address length of m:= 2. as we focus on interrupt handling here, we will briefly describe the interrupt handling of the atmel and identify the special purpose registers within a that are essential for the interrupt handling.



in order to reduce the effort in model checking which comes from introducing nondeterminism, we will show that for the interrupts, it is safe to make all interrupt bits below the current interrupt level nondeterministic. assuming three interrupt levels stored in the lower three bits of the interrupt register, this means we can identify all states where these bits have the values 100, 110, 101, 111, which is a reduction of a factor 4 for the interrupt handling. in the general, we gain a factor or 2n for n interrupt levels, so for the atmel we gain a factor of up to 220.



to show this, we look at a fixed microcontroller mc=(a, q, ins, env, ih, q0, v0). the interrupt handler and the environment handler are defined as sketched above, thus implementing the interrupt handling model of the atmel. the instruction space can hold an arbitrary program.



this case study was first described in. here, we summarize the important details and reconsider the results under the aspect of dnd for interrupts. in only dnd for values was considered. dnd for interrupts was activated in all runs.



as dnd for interrupts cannot be deactivated in[mc]square because its operation is essential for the model checking of programs using interrupts, we can only show the differences obtained by dnd of values. these three programs all use interrupts. without using dnd for interrupts the number of states would be considerably higher and model checking of these programs would not be possible.



we can give some comments about the size of the state space when not using dnd of interrupts. when using dnd for interrupts, only enabled interrupts are fired by writing only possible value combinations into the flag registers. when not using dnd for interrupts, all interrupts would be fired that have an active interrupt source by writing all value combinations into the flag registers.



the plant program consists of 225 lines of assembly code and uses two interrupts and one timer. the traffic light consists of 155 lines of assembly code and uses the same number of timers and interrupts as the plant program. the window lift has 289 lines of assembly code and uses again two interrupts and one timer. as all program use the same number of timers and interrupts, we only detail one of them. the plant program uses one timer interrupt and one external interrupt. when using dnd for interrupts, at most three combinations are written to the flag registers: timer interrupt occurred, external interrupt occurred, and no interrupt occurred. this is only done when the corresponding interrupts are enabled. when not



using dnd for interrupts more combination are written. in this case all interrupts are fired that have an active interrupt source. the interrupt source for the timer used in the plant program is actually the source for two different timer interrupts.



for interrupts, it would be fired. as all value combinations are written into the flag registers, at least nine combinations would be written. these nine combination would be created in every line of the program where the sources of the interrupts are active. the sources are active in almost all parts of the program including interrupt routines(in interrupt routines, other interrupts are usually deactivated). if nondeterminism of values is involved(e.g., input from the environment) additionally, the



in this paper delayed nondeterminism for interrupts, which is an abstraction technique implemented in[mc]square, was detailed and it was proven that dnd for interrupts preserves a simulation relation. this is an important result as dnd for interrupts cannot be deactivated by the user because this abstraction technique is too essential for[mc]square. without this abstraction techniques, even small programs using more than one interrupt could not be model checked. as[mc]square is a ctl model checker, simulation is needed to preserve the validity of formulas. the dnd of values preserves a simulation relation(see) and hence, the validity of actl formulas is preserved. nevertheless, dnd of values can be deactivated by the user if the over-approximation is too coarse.



in the future, we want to investigate if we can establish a bisimulation relation for dnd for values. the copying of values destroys the bisimulation relation. if we introduce instances of nondeterminism and copy these instances, instantiation such an instance would have an effect on all the instances and preserve the bisimulation. however, we have to observe the effects on the size of the state space and the number of different nondeterminism instances. another thing that we want to implement is a model checking algorithm for a three-valued logic. this would make it possible to make propositions about registers used within the dnd abstraction technique.



for embedded systems.[mc]square can already handle programs of interesting size. delayed nondeterminism is an abstraction technique that helps to tackle the state explosion problem. it can be combined with other techniques implemented in[mc]square(e.g., path reduction and dead variable reduction). this technique can also be used for model checking software for many other microcontrollers. as we have experienced with delayed nondeterminism or path reduction(cf.), there are abstraction techniques which perform better when model checking assembly code. hence, we will focus future research on domain specific abstraction techniques.



