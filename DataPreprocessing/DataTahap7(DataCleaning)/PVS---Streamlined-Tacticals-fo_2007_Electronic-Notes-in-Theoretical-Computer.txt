the semantics of a proof language relies on the representation of the state of a proof after a logical rule has been applied. this information, which is usually meaningless from a logical point of view, is fundamental to describe the control mechanism of the proof search provided by the language. in this paper, we present a monadic datatype to represent the state information of a proof and we illustrate its use in the pvs theorem prover. we show how this representation can be used to design a new set of powerful tacticals for pvs, called pvs#, that have a simpler and clearer semantics compared to the semantics of standard pvs tacticals.



in a previous attempt to formalize the semantics of the pvs proof language, the state of a proof was recorded by flags that were plainly added to the representation of the proof tree. in this paper, we show how the proof state information can be elegantly modeled by a simple monadic datatype. the datatype and its properties are defined in section 2. in section 3, we illustrate the application of this framework to the design of a new set of tacticals for pvs, which we call pvs#. finally, the implementation of the monadic datatype in pvs# is described in section 4.



monads are a popular way to describe imperative features, such as side effects and exceptions, in functional programming languages. the main idea is to view a program p, not as a pure function, e.g., from a to b, but as a morphism from values a to a datatype mb, where mb represents the conjunction of side-effects in p and its return value, which is of type b. monadic operators, that obey monad laws, are associated to the datatype and provide a way to build and compose programs.



we call proof object the concrete representation of a possibly incomplete proof tree. the formalism presented here makes use of a coarse abstraction of this representation: we only assume that proof objects provide means to distinguish the set of current goals among all open goals. we take x as the type of the proof objects, and x, y, z as inhabitants of x, i.e., proof object variables. we define the monadic datatype mx as follows:(#catch t1&optional tag t2) this tactical behaves as t1 if t1 does not raise an exception. otherwise, if the result is an exception named tag then it evaluates t2. if tag does not correspond to the name of the exception, then the exception is propagated.



the topic of this paper is the subject of ongoing work, including, in particular, the development of new tacticals for pvs#, the meta-theoretical study of monads in proof languages, and its application to other theorem provers. in particular, another implementation of the monadic datatype was already carried out in the fellowship proof assistant. in the long term, we believe that the concept of monads will play a central role in the design and semantics of proof languages for procedural theorem provers.



