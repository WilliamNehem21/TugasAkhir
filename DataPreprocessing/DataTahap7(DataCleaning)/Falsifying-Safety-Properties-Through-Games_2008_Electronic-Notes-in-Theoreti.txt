the rest of the paper is structured as follows: section 2 sets out the notions of programs, models and safety properties we use. section 3 shows how to use twoplayer games to falsify safety properties without performing any of the usual tasks listed above. section 4 presents an illuminating example of falsification. section 5 shows how our approach supports the easy incorporation of must information when it is available. section 6 concludes and discusses related work.



the preceding example only works because we distinguish f and p nodes, and use different rules for them; if p controlled the choice of n, he could force n= 0 and then error is not reached. the example also illustrates the style in which we intend to deal with nondeterminism, which is needed to ensure that the program is tested over all inputs. instead of using atomic nondeterministic statements such as havoc(e.g.), we propose to encode them using small control flow graphs consisting of choice edges and deterministic statements, and then analyse these with over-approximation in the same way as the rest of the program. the game structure will take care of making sure that all the possible choices are explored.



