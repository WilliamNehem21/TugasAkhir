this paper describes how a diagram language can be specified, based on graphs, graph grammars, and transformation rules, and how the diagram editor generator diagen generates a diagram editor from such a specification. diagen can be applied to practically every visual language, and to visual process modeling languages in particular. this is demonstrated with an editor and animator for statecharts.



instance, are well-accepted for modeling reactive systems[2,3] and have become part of uml. petri nets, another visual notation for process modeling, lend themselves to proving lifeness or deadlock-freedom by model checking. however, it is still far from easy to implement tools for visual languages from scratch, and statecharts and petri nets are no exception with this respect.



it has already been shown that both statecharts and petri nets can be modelled by graph transformation systems[4,5]. here we show that graph transformation systems can be useful for more than just conceptual meta modeling: graphs, graph grammars, and graph transformations may be used to define visual(process modeling) languages, and this forms the basis for generating tools that implement such languages. this is demonstrated by specifying and implementing a statechart editing and animation tool with the diagram editor generator diagen.



section 3 summarizes the specification of the statechart editing tool, and the major steps of diagram analysis. section 4 describes how the editor has been extended by an animation that models the semantics of statecharts. section 5 reports on related work, and section 6 concludes the paper.



the developer of a diagen editor may also specify compound operations for syntax-directed editing. each of these operations is geared to modify the meaning of the diagram(e.g. for statecharts, a state could be deleted, with all its incoming and outgoing transitions).



automatic layout is another optional feature of diagen editors. it is obligatory when syntax-directed editing operations are specified. the automatic layout mechanism adjusts the layout of a diagram(i.e., position, size etc. of its components) after any modification. automatic layout also assists free-hand editing: after each layout modification by the user, the layout mechanism updates the diagram so that its structure remains unchanged. diagen offers constraints for specifying the layout mechanism in a declarative way, and a programming interface for plugging in other layout mechanisms.



charts. the starting hypergraph of the grammar consists of a statechart hyperedge which does not visit any node. please note the implicit representation of and-states which have not been mentioned in the paragraph on the reduction step: each of the parallel compartments of an and-state is represented by a nestedstateset hyperedge, and all these hyperedges are linked by next hyperedges. it is the task of the reduction step to create this hgm structure from the srhg. but this is beyond the scope of the paper. moreover, note the special arrows which are labelled with p1 resp. p2 which are



diagen is related to other approaches for specifying and generating graphical editors. these approaches can be classified according to their supported editing modes: as mentioned in section 1, diagram editors may support free-hand editing or syntax-directed(or structured) editing. free-hand editing allows to create and modify diagrams unrestrictedly, but these diagrams may contain errors; syntax-directed editing provides a set of editing operations which transform correct diagrams into other correct diagrams. however, the user is restricted to these operations and the way of editing as it is defined by these operations. most tools for creating free-hand editors analyze diagrams directly and avoid to create an internal model like a graph. typical examples are vlcc and penguins. the first utilizes positional grammars and an lalr(1)-like parser for specifying resp. checking diagram syntax, the latter constraint multiset grammars and a prolog-like parser. graph transformation systems, however, are a popular formalism for creating syntaxdirected editors. two of the more recent tools are genged which allows to visually specify editing operations by graph transformation rules and vispro which uses special graph grammars for syntax specification. there are many other approaches for specifying visual languages and creating ed-



recently, there has been some other work which integrates approaches for specifying and generating visual editors with animation concepts. bardohl et al. have proposed an idea of using graph transformation rules of the genged tool not only as specifications of editing operations, but also of animation steps. this approach is of course quite similar to the one described in this paper. however, genged editors are syntax-directed whereas diagen editors are free-hand as well as syntax-directed.



