in this paper, we introduce a monad of random choice for domains that does not suffer from the main two drawbacks of the probabilistic powerdomain. it is not known whether any cartesian closed category of domains is closed under the probabilistic powerdomain, but the cartesian closed category bcd is closed under this monad of random choice. also, there is no distributive law between the probabilistic powerdomain and any of the nondeterministic powerdomains, but there is a distributive law between the monad of random choice and the lower powerdomain. in order to work with the convex powerdomain, an alteration to the monad of random choice is made, so that the cartesian closed categories rb and fs are closed under this construction. then, in these categories, there is a distributive law between this monad and the convex powerdomain. this work is based on the uniform continuous random variables of goubault-larrecq and varacca, which do not form a monad. this paper gives motivation for this model and changes the definition of the kleisli extension of goubault-larrecq and varacca so that it is monotone, which was the problem with their definition.



mislove built upon this work, using an indexed valuation model to define a monad of finite random variables. the cartesian closed categories rb and fs were shown to be closed under this construction. later, goubault-larrecq and varacca proposed a model of continuous random variables over the cartesian closed category bcd, but the model did not form a monad in this category. the model that this paper describes is based upon these continuous random variables, in particular, the uniform continuous random variables. in this construction, computation is allowed to take different branches based on the flips of an unbiased coin.



a nonempty subset is directed if each pair of its elements has an upper bound also within the subset. a poset is directed complete if each of its directed subsets has a least upper bound. a dcpo is a directed complete partial order. maps between



we are interested in three particular cartesian closed categories of domains: bcd, rb, and fs. the maximal cartesian closed categories of domains were characterized by jung. here are descriptions of the cartesian closed categories of domains we will need. note that in each case, the morphisms in the category are the scott-continuous maps.



randomized computation first gained prominence when rabin introduced a randomized algorithm for finding the nearest pair in a set of n points. this algorithm had a linear average runtime, faster than the n log n runtime of the fastest known deterministic algorithm. more well known are the algorithms of solovay and strassen and rabin for determining if a number is prime. these algorithms run in polynomial time(with a small error probability), and they were discovered over 20 years before the aks primality test, the first known deterministic algorithm for recognizing prime numbers in polynomial time.



this work is inspired by a model of uniform continuous random variables first proposed by goubault-larrecq and varacca. in their paper, it was shown that the category of bounded complete domains(bcd) is closed under a similar construction. however, their assertion that the construction forms a monad in bcd was incorrect, since the proposed kleisli extension failed to be monotone, thus not scott continuous.



the basic idea of a random variable model is to separate the random choices from the domain itself. in the probabilistic powerdomain, the probability distributions are placed on the underlying domain. in a model of random variables, random bits are generated by coin flips, and then a random variable is defined from these random outcomes to the underlying domain. in the probabilistic powerdomain, for an element d, making a choice between d and d is the same as just d, since the probabilities are the same. in the model described here, there is a distinction between choosing d or d and d itself, even though the probabilities are the same. in the first case, a random bit is still chosen, so programmatically, this is distinct from the latter case where no such choice is made.



the above construction is a monad in the category bcd. however, only two of the nondeterministic powerdomains(the upper and lower) leave bcd invariant. bcd is not closed under the convex powerdomain, but the cartesian closed categories rb and fs, which contain bcd, are. the monad rc is not believed to stay within these categories, since we see no way to construct the deflations needed to show that an object is in one or the other of these categories. in bcd, infima can be used, but outside of bcd, infima are not guaranteed. one way to repair this is to not only define our functions on antichains, but instead to define them on the scott closure, or lower set, of these antichains. this way, there is no need for infima to project down to smaller trees, since the function is already defined on the lower set. in our first monad, antichains are used, representing the possible outcomes of a random computation. now we change this monad to include not only antichains of words, but also the prefixes of these words. these prefixes represent intermediate



these random variables can be thought of as using an oracle that randomly gives a element of[0, 1], and then the function of the random variable uses this number to output an element of p(n). notice that in the above definition for application, both random variables receive the same t. thus, the oracle is consulted only once instead of giving a different random number to each random variable. this exactly mimics the concurrent operation of our kleisli extension. but instead of an oracle giving an entire real number at once(which has infinite information), the oracle gives one bit at a time.



in this paper, we have a presented two monads for randomized computation in cartesian closed categories of domains. computational motivation is given for the structure of these monads. in a program, random choice results in the branching of computation, so the possible outcomes form a tree. our first monad separates random choice from the underlying domain and confines it to the leaves of a binary tree. this is the main difference between our construction and the probabilistic powerdomain. we have shown that this monad captures the randomized behavior found in algorithms such as the miller-rabin primality test. we have given a new kleisli extension that satisfies the monad laws and presented a distributive law with the lower powerdomain, all within the category bcd. in order to work with the



there is much work to be done concerning these monads. some work has already been completed that is beyond the scope of this paper. another alteration can be made to the monad to obtain a distributive law with the upper powerdomain. furthermore, an operational version of the monad has been developed and implemented in functional programming languages such as scala and haskell. the proof that the monad laws hold for this operational version has been formally verified using isabelle. finally, randomized pcf(rpcf), a programming language that adds random choice to pcf, has been designed, and the miller-rabin algorithm has been implemented within the language. an operational and denotational semantics for rpcf have been developed using the monad presented in this paper. this is a proof of concept to show how this monad can be used to augment other languages with random choice.



the author thanks michael mislove for the guidance and the many fruitful discussions that made this work possible, along with several much-needed suggestions for the preparation of this paper. the author also thanks jean goubault-larrecq and dana scott for email correspondence regarding the model of continuous random variables and the stochastic lambda calculus, respectively. finally, the author acknowledges the support of the afosr under award no. fa0550-13-1-0135 during the preparation of this work.



