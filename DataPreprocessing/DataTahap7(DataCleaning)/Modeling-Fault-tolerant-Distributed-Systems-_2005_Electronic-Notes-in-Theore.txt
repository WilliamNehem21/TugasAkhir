an embedded system being intrinsically critical, it is essential to insure that it is tolerant to processor failures. this can even motivate its distribution itself. in such a case, at the very least, the loss of one computing site must not lead to the loss of the whole application. we are interested in formal methods to model systems with guarantees on their fault-tolerance. among the various existing formal methods, we investigate the use of discrete controller synthesis(dcs). the advantages of using dcs are the correctness of the resulting system and the easy modifiability of the controller(thanks to automatic tools), i.e., the possibility to study and test several fault-tolerance objectives or failure hypotheses on the same system model, without the need to re-design the system. specifically, our objective is:



the technical context of our work is the synchronous approach 2 for the design of reactive systems. this choice is motivated by the existence of a corpus of available results(laguages, compilers, formal tools) and technologies, which already have an industrial impact. our method is compatible with synchronous models, and this influences some of our choices in the ltss and composition, as well as in already existing dcs, applied as such.



we assume the following failure hypothesis: only the processors can fail, with a fail-silent model. that is, a processor is either active and works fine, or faulty and does not produce any output. to tolerate such faults, we are going to make use of the intrinsic hardware redundancy offered by the distributed architecture: i.e., we do not wish to add extra processors but to use only the existing ones. our goal is to apply error treatment techniques, such that whenever a processor will fail, the tasks that were active on it will be dynamically restarted on some other non faulty processor. the new state of the system reached after such an error treatment is degraded in the sense that less processors are now available, but the functionality is maintained since all the tasks are still being executed.



in our approach, p is specified as a lts, and d is an objective to be satisfied by the controlled system, typically making a subset of states invariant in the controlled system, or keeping it always reachable. the controller c obtained with dcs is a constraint restricting the transitions of p, i.e., inhibiting those that would jeopardize the objective. the key point is that the set of inputs i is partitioned into two subsets, ic and iu, respectively the set of controllable and uncontrollable inputs. the principle of dcs is that the controller c can only constrain those transitions of p for which the guard contains at least one controllable signal, i.e., in ic.



an invariance constraint, because the latter might compromise the former by removing paths and breaking reachability. on the contrary, considering reachability after invariance does not jeopardize the invariance, as it will not result in paths going out of the invariant set. optimization should be considered last, as a choice among correct solutions; even after reachability, it will keep only some paths, which should always satisfy it.



the real-time aspect of such systems comes from the time costs of the periodic tasks. the time cost of each task is measured thanks to a wcet analysis. then, each task being periodic, we consider that, when executing on a processor, it uses some cpu load, computed by dividing its wcet by its period. enforcing real-time constraints amounts thus to assigning to each processor a cpu load maximal bound, which should never be overtaken.



resource. also, related to the weights and particularly costs in power and load, individual tasks weights are to be additive: on a given processor, the global load is the sum of that of all the active tasks. each processor i has a quantitative bound bi, specifying its maximum power capacity.



the model consists of the composition of all ltss as above. in the example, we have three of them, one for each of the processors p1, p2, and p3, for which capacity bounds bi w.r.t. power consumption are, respectively, 5, 3, and 6.



result in a total failure of the system, with no possibility at all to ensure the fault-tolerance of the system. no one expects a system to tolerate a failure of all the processors it is made of. therefore, we need to specify the way the failures do occur in the patterns that we consider.



providing such an environement model is up to the designer. his choice will depend on his knowledge of the system and the related failure assumptions. for instance, if it is unlikely for two failures to occur simultaneously, he will remove from the automaton 4(a) the three transitions from b to fi,j. alternatively, if he wants to consider malicious attacks, he will keep them.



implicitly, each state has an additional self-loop labeled with the complement guard w.r.t. all its other outgoing transitions. for instance, state ij has a self-loop labeled with rj, which enables the lts to remain inside ij until the occurrence of the signal rj.



the fault-tolerance policy is specified declaratively by a set of properties and objectives. the fault-tolerance specificity of these properties is twofold. on the one hand, they are meant to be considered upon models as described above, where all faults, recoveries or failures behaviors are represented. on the other hand, they characterize failed states(e.g., consistent placement constraints characterize states where the system is not viable), as well as the tolerance, meaning the notion of fulfilling functionality whatever the faults.



property 1 is contradicted whenever a task t j is active on processor pi(i.e., in state aj) while pi is in erri. the synthesis objective is to make it invariantly true. if the system, as modeled by the designer, is such that in each state there exists a transition to a safe state(i.e., one where property 1 holds), then the synthesis will succeed and the controlled system will allways be able to react to a processor failure by moving to a safe state. otherwise the synthesis will fail, indicating to the designer that her/his system cannot be made fault-tolerant.



taking this transition means that a later processor failure, specified in the environment model, will not be tolerated without bounding problems. here, the dcs computes the most permissive controller such that all failures are guaranteed to be tolerated without bounding problems. a terminating task can then release another waiting task.



as the environment model says, the remaining processors with the smallest capacity are still able to host all the active tasks. this constraint can also block the system in the ready states, because the path is not clear and wide enough for execution. here, as well as for the previous objective, the environment model can have a determining influence: if it excludes pathological fault patterns, then a solution can be found.



we first considered simple tasks, and consistent execution objectives, and then extended our objectives with functionality fulfillment and optimization. our method is limited by the technological state of the existing dcs tools, basically the same limitations as with model checking tools. given the current trend in this domain(symbolic state space exploration, abstract interpretation, widening operators...), we believe that future improvements in dcs



we have shown how to model a real-time distributed system, its heterogeneous architecture, and its environment in order to produce automatically a controller enforcing fault-tolerance. it reacts to the occurrences of failures by migrating tasks according to the fault-tolerance policy. for this, we have applied dcs to lts models of the whole system, with objectives regarding consistent execution, functionality fulfillment, and optimizations.



example, an image processing coder/decoder sub-system in a system-onchip, can be embedded into different devices, e.g., a home dvd player, where power supply is not at all an issue, or a cell phone or cam-recorder, where power is indeed crucial; reusing the same model submitted to different synthesis objectives opens perspectives in further applications of these techniques, in the framework of platform-based design.



