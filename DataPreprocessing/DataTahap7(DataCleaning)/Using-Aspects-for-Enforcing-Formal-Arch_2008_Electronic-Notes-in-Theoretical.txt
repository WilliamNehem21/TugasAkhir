first, the control code that implements the constraints is written manually in these approaches. second, this code is not well-modularized as it is tangled with the functional code of the application and scattered across the implementation of different components, which makes it non reusable. third, the code that implements the constraints may not be conform to the formal specification. this is accentuated especially by the scattering problem. fourth, if the formal specification changes, it is necessary to change the code that implements the constraints manually.



the remainder of this paper is organized as follows. in section 2, we introduce the z specification language, petri nets, and aspect-oriented programming. in section 3, we present our approach for controlling the architecture evolution of component-based applications. section 4 describes our case study collaborative authoring system. section 5 reports on some related work and section 6 concludes this paper.



the z notation, as presented in, is a formal specification language. z defines a mathematical language, a schema language, and a refinement theory between abstract data types. the mathematical language is based on the set theory and on mathematical logic i.e., first order predicate logic. the schema language allows to describe the state of a system and the manners according to which this state can change. the refinement theory allows to develop a system by building an abstract model from a system design.



a z specification can be defined as a collection of state schemes and operation schemes. the state schema state describes the system state and the invariant relationships, which are maintained when the system is updated. this schema consists of two parts: a declaration part and a predicate part.



according the separation of concerns principle, aop provides language means to separate the code implementing a crosscutting concern from the functional code of a software application. using aop, an application consists of two parts: the base program, which implements the core functionalities, and the aspects, which implement the crosscutting concerns. aspects are new units of modularity, which aim at modularizing crosscutting concerns in complex systems by using join points, pointcuts, and advices.



join points are well-defined points in the execution of a program. in aspectj, which is an aspect-oriented extension to java, join points correspond to method calls, constructor calls, field read/write, etc. the pointcut allows to select a set of join points, where some crosscutting functionality should be executed.



the advice is a piece of code implementing a crosscutting functionality, which can be associated with a pointcut. the advice is executed whenever a join point in the set identified by the pointcut is reached. it may be executed before, after, or instead of the join point at hand; this corresponds respectively to the advice types before, after and around in aspectj. with an around advice, the aspect can control the execution of the original join point: it can integrate the further execution of the intercepted join point in the middle of some other code(using proceed).



architectural style(i.e. definition of component and architectural constraints) using the z notation and model the coordination protocol using petri nets. the base code implementation phase consists in implementing the functional code of the application using any java-based component model. the aspect code implementation phase is the verification phase which allows the connection between the formal specification and the application.



in our approach, we can define constraints in the architectural style and coordination protocol without modifying any functional code of the application. to do that, we just model a new z specification and a new petri net. in this way, we can provide a better control and a strong reuse of code. using aspects in our approach allows us to separate the control and coordination code from the functional code of the application, which reduces the complexity of distributed applications, and bridges the gap between the application implementation and its formal specification. moreover, if the formal specification changes, a few well-defined modules need to be changed in a non invasive way, namely the aspects.



system specification: the system specification consists in defining the types of components, the types of relations between components, and the architectural properties specified in terms of first-order predicates. the system structure is specified using the following z schema. ci, rij define respectively the component and the relation between them, cstri represents an architectural constraint. each component defined in the system schema must be already specified using a z schema and include the internal behavior bhri in terms of predicate logic.



to verify that our system does not contain any contradictions between the defined constraints, we should verify the system consistency by ensuring that at least one valid state exists. this verification is specified by the following consistency theorem. systeminit corresponds to a z schema which describes a valid state of the system. in order to validate and reason about the architectural style, we use the tool z/eves, which supports syntax and type checking as well as theorem proving.



in this section, we explain how the collaborative authoring application is built according to our three-phase approach. the authors can have two roles: the writer role can modify, create, and delete sections of a document, whereas the reviewer role can correct a section and add annotations to it. problems such as overlaps between sections that are accessed by different actors cannot occur because appropriate constraints that hinder such problems are specified formally and enforced by appropriate control aspects.



our collaborative authoring application is implemented as a client/server application. the functional level comprises only code providing the core functionalities such as editing, i.e., access control to the shared documents and control of the architecture evolution is out of scope. for instance, in this phase two writers can modify simultaneously the same section of a document.



control module: the control module manages the evolution of the architecture since new users can connect and/or disconnect to the documents during the execution of the application. in the architectural style of our application, we specified a static constraint expressing that each client can modify one section only at a given point of time(constraint[c5] in the system schema). therefore, an aspect is necessary to prohibit clients from locking more than one section simultaneously.



in addition, we have specified a dynamic constraint on the connection of a new writer. before a new writer can connect, an aspect interprets the formal pre-conditions generated from the operation schema connectwriter and the style schema collaborativeauthoringsystem. this aspect defines a pointcut that selects all calls to the method connectwriter, which allows an actor to access the shared document as writer. the aspect uses an around advice to allow/disallow a new writer to connect.



in the following, we present a skeleton of an aspect which checks whether a section can be executed using the corresponding transition in the petri net. the aspect sectionaccesscontrol defines a pointcut, which selects calls to the method connectwriter(lines 2 and 3 in listing 1). the around advice of this aspect checks according to the xml representation of the petri net if the transition connectwriter is enabled(line 7). if that is the case, the actor gets access to the document, i.e., the operation is executed(using proceed as shown in line 10) and the advice saves the new marking describing the new system state. if not, the aspect prohibits the execution of the method connectwriter(lines 13-16).



constraints(i.e. static aspect). however, they do not propose any formal solution to check if the architectural constraints specified in z are preserved when the architecture evolves. in our approach, we can specify and prove the pre-condition theorem by using the z/eves theorem prover. petri nets and colored petri nets 5 were combined with different type of temporal logic[10,28] in order to define the architecture constraints and architecture evolution using temporal constraints and specify coordination constraints using petri nets. however, z, which is based on predicate logic and set theory allows a low-level description of architectural invariants. to support the temporal properties in our approach, we plan to combine linear temporal logic and z notation.



the main contribution of this paper is the control of software architecture evolution in component-based applications in modular way using aspects. our approach combines aspect-oriented programming and formal methods and enables a reliable and modular verification. the reliability of our approach is ensured by the formal specification and validation of architectural constraints using z and petri nets. the use of an aspect-based control module in our approach, improves the modularity and the reusability of control code, as this code is well-modularized using aspects and separated from business logic.



as future work, we will study expressive pointcut languages such as[3,6,25], which allow the expression of temporal relationships in the pointcut to, e.g., express that a certain operation must be called before another. we will also investigate whether and to what extent the usage of such pointcut languages would replace the usage of petri nets in our approach. we will also target automatic generation of control and coordination aspects.



