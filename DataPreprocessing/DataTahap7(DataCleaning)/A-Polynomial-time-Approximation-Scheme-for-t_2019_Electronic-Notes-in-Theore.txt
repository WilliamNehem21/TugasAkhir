many websites(such as google, yahoo!, facebook and others) offer free services while displaying advertisements, or simply ads, to users. often, each website has a single strip of fixed height which is reserved for scheduling ads, and the set of displayed ads changes on a time basis. for such websites, the advertisement is the main source of revenue. thus, it is important to find the best way to dispose the ads in the available time and space while maximizing the revenue.



the revenue from web advertising grew considerably in the 21st century. in 2013, the total revenue was us$42.78 billion, an increase of 17% from the previous year. it is estimated that the u.s. web advertising reached us$77 billion in 2016, and comprised 35% of all advertising spending, overtaking television advertising. in 2016, ads in banners comprised 31,4% of internet advertising(considering banners and mobile platforms), which represents a revenue of us$22.7 billion. web advertising has created a multi-billionaire industry where algorithms for scheduling advertisements play an important role.



considers the idea of release dates and deadlines. an ad has a release date that indicates the beginning of its advertising campaign. analogously, the deadline of an ad indicates the end of its advertising campaign. for example, ads for christmas must be scheduled before december, 25th.



in section 2 we define the notation and concepts used in this work. in section 3 we present an algorithm to schedule small ads and in section 4 we present a ptas to the whole set of ads. in section 5 we discuss the results and future works.



for the sake of contradiction assume that there is an optimal solution opt to a with f(opt)< 1/2 and the first-fit heuristic does not schedule the whole set a. now, let s be the solution returned by the first-fit heuristic and let aj be the set of ads scheduled by s. we claim that aj= a. if not, then the algorithm must have stopped when trying to schedule an ad ai. since the algorithm respects the release date and the deadline, it must be the case that ai could not be added to some slot bj without exceeding capacity. since in this case f(bj)+ si> 1, and si< 1/2, it follows that f(bj)> 1/2. but then again f(s)> 1/2> f(opt), which is a contradiction. 2



consider then a maximum xy-flow f in h, which can be obtained in polynomial time and notice that f induces an assignment from ads to types. in this assignment, if the maximum flow is such that fai,t units flow from ad ai to type t, then we say that ad ai is fractionally assigned to t by an amount of fai,t/(wisi). observe that this ratio is at most one. the set of all types t for which fai,t> 0 is called the support of ai and is denoted by sup(ai).



this paper presented a ptas for maxspace-rd, which is a generalization of maxspace that deals with release dates and deadlines. to our knowledge, this is the first approximation scheme to this maxspace variant. when the number of bins is given in the input, we can show that maxspace-rd is strongly nphard, and thus does not admit an fptas. we left open the question of whether the problem with a constant number of slots admits an fptas. in future works, we will consider the variant in which the value of an ad is given in the input, and may be unrelated to its size. this variant is a generalization of the multiple knapsack problem, which is strongly np-hard even for k= 2.



