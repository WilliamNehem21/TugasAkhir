when modelling complex interactive systems, traditional interactor-based approaches suffer from lack of expressiveness regarding the composition of the different interactors present in the user interface model into a coherent system. in this paper we investigate an alternative approach to the composition of interactors for the specification of complex interactive systems which is based on the coordination paradigm. we layout the fundations for the work and present an illustrative example. lines for future work are identified.



interactive systems can be seen as a special case of the more general class of reactive systems. however, interactive systems have specificities that present new challenges when considering modelling and reasoning about them. one major aspect is the need to consider interaction with the user, and not only between components of the user interface.



managing the coordination between the different interactors is typically achieved by the introduction of additional interactors to express the control logic for their communication. this, in turn, adds to the complexity of the models. ideally we should be able to express the logic of the coordination between the different interactors in an as natural and simple way as possible. in this paper we explore the application of the coordination paradigm to model architectures of interactors. the approach is based on previous work by some of the authors(see,[5,6]).



the coordination paradigm[13,18] offers a promising way to address issues related to the development of complex systems. since the coordination component is separate from the computational one, the former views the processes comprising the latter as black boxes, whose internal implementation is hidden from the outside world. instead, the composition of components is defined in terms of their(logical) interfaces which describe their externally observable behavior. by hiding all system computation in the components, a system can be described in terms of the observable behavior of its components and their interactions. as such, component-based software modelling provides a high-level abstract description of a system that allows for a clear separation of concerns between the coordination and the computational aspects.



an interactor can generate data in two directions: towards the user, and towards the application. this means that interactor behaviour is divided into two distinct parts: the external one, which contributes to the definition of the appearance, and the internal one, which consists of sending data to other interactors or application processes. hence, an interactor is defined by a couple of functions: fi is associated with the internal behaviour(the information flow from the user towards the application side); fo is associated with the external behaviour(the information flow from the application towards the user side).



in exogenous coordination models, like or, components are black box entities accessed by purely syntactic interfaces. the role of an interface is restricted to keeping track of port names and, possibly, of admissible types for data items flowing through them 6. such a notion of components interface is perfectly extensible with the notion of cnuce interactors. so, let us define an interface as



the model provides a set of basic connectors and combinators which allow us to construct more elaborated connectors and define more complex patterns of coordination and interaction. in the following let us consider some of these basic connectors. for more connectors and a more formal treatment of them we refer to[5,6].



its effect is to plug ports with the same polarity. the aggregation of output ports is done by a right join(c i> z), where c is a connector, and i and j are ports and z is a fresh name used to identify the new port. port z receives asynchronously messages sent by either i or j. when messages are sent at the same time the combinator chooses one of them in a nondeterministic way. on the other hand, aggregation of input ports resorts to a left join(z<i c). this behaves like a broadcaster sending synchronously messages from z to both i and j. formally, at a behavioural level, both operators effect is that of a renaming operation activated synchronously. it should be noted that, since we are not considering timing issues at this stage, this synchronicity does not meant that the ports are activated concurrently. in the current context, what we are stating is that if one port is activated, then all the other must be activated, before the connector can engage in a new interaction.



as a final remark is important to note that this work reports on the main ideas of this approach only. the full specification of the calculi involved in the development of the examples was not demonstrated in this paper. we refer to for a complete view of this approach applied to another kind of application.



as a final note, it should be point out that, when modelling complex interactive systems, the need arises to express dynamic aspects of the user interface, such as user interface components being created and destroyed, or the interconnections between components being changed in runtime. this is a complex area which we have not addressed here. a very preliminary work in this direction was presented in. in that work the basic connectors are enriched with a special connector called orchestrator which is responsible for handling the mobility and the dynamism of the system. we plan to explore this aspect further, as it is one of the main drives for our research in identifying alternative modelling notations for interactive systems.



