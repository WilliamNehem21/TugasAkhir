on a copy of the object: there is no side-effect. the calculus is called distributed because it ensures absence of sharing between activities(processes) allowing them to be placed on different machines, and features asynchronous rmi-like communications. from the original actor paradigm[16,2], several languages have been designed. some languages directly feature actors, distributed active objects(like the proactive library), or other derived paradigms. the calculus aspfun provides a simple model for such languages. we can prove strong properties about it and, since the calculus is abstract, our semantics and mechanisation can be a basis for the analysis of related languages. for example, aspfun enables the correlation with the imperative asp with respect to communication strategies and static analysability. typing is a well studied technique; we prove here a classical typing property, progress, in unusual settings, distributed active objects.



in, additional rules ensure that the typing environment is well-formed. we simplified it here by defining environment as a mapping. also, a rule for correct formation of object types is introduced in, mainly ensuring that there is no infinitely nested object type. this last assumption has been omitted here as it did not seem necessary and, indeed, the properties shown below have been mechanically proved without any additional assumptions on type formation.



more recently, in, the authors suggest a communication model, called ambienttalk, based on an actor-like language, and adapted to loosely coupled small devices communicating over an ad-hoc network. the communication model is quite similar to the asp calculus, but with queues for message sending, handlers invoked asynchronously, and automatic asynchronous calls on futures. the resulting programming model is slightly different from asp and aspfun because there is no blocking synchronisation in ambienttalk. in ambienttalk, the flow of control might be difficult to understand for complex applications, because one can never ensure that a future has been returned at a precise point of the program. ambienttalk should be dead-lock free, but unfortunately as no formalisation of the language has been proposed to our knowledge, this has not been formally proved. our framework could be relatively easily adapted to prove the absence of dead-locks in ambienttalk by transferring our progress property.



