however, if the objective is not on-the-fly verification, but simply an analysis of a program through its runtime behavior, it is reasonable to try to collect and combine as much information as possible about it. this implies, in particular, that one should try to combine several traces in order to gain a better understanding of the underlying program. this kind of idea is pursued in a number of works for various specific purposes.



it is important to note that the technique presented here might not actually be appropriate in other contexts, such as when one wishes formal guarantees concerning the presence or absence of software defects. as it will become clear, our method depends on some assumptions and can only generate approximate models, which might elicit wrong responses from a model checker(i.e., false positives and false negatives). nevertheless, in many situations it is better to have such an approximate understanding of a system rather than no understanding at all. moreover, the quality of our approximations can be easily improved by adding more and longer traces.



we assume that the program traces are available and, thus, we do not provide a method for collecting them. in this respect, we just define a trace file format that our proof-of-concept tool can read. this way, we do not restrict the possible applications of our method to any particular kind of program.



establishes the formal foundations upon which the merging algorithms are defined. in section 4, these algorithms are given. then, in section 5 we show how to actually perform model checking in the merged traces. section 6, in turn, presents some illustrative experiments employing a simple economic simulation. finally, section 7 reflects about what was achieved and discusses what remains to be done.



sumption. so, in fact, they assume the existence of a structure similar to the one we try to create(i.e., directed graphs). second, the quality of their approximations is given by the choice of the depth to employ when performing calculations in certain subtrees, while we give specific algorithms to create approximations and which yield different kinds of state-spaces.



with similar purposes, lo et al. investigate how to mine temporal logic formulae, ernst presents techniques to extract program invariants, and ernst et al. introduce daikon, a system to extract such invariants. while our present work does not aim at discovering such information from traces, it will be clear that the resulting state-spaces from our algorithms can be used to such an end.



model checking is traditionally employed as an exhaustive verification method, which demonstrates the presence or absence of some property on a formally specified system. however, this also results in efficiency problems, which motivates the development of approximate model checking algorithms, in which only a part of the possible execution paths are explored, such as the work of cho et al.. our work is similar to this approach, but whereas their approximations are derived from formal analysis of the system, ours relies on the collected traces at runtime.



this change-preserving method is of interest only if the traces to be merged present a significant amount of segments that can be eliminated. the worst case scenario, however, is even worse than that of time-preserving merging. this happens because, unlike time-preserving merger, change-preserving can connect extended states that are not temporally consecutive. let us outline its worst case complexity. again, define m to be the length of the largest trace and let us have m sets of extended states, each containing the extended states that appear in some particular instant. hence, again we shall have mn extended states to consider in the worst case. now, however, each set of extended states may connect to all sets that come after it, except the one that comes immediately after it. therefore, the total number



once the traces are merged, we have a state-space that can undergo model checking, using either ltl or ctl. theoretically, there is not much more to be done. on the other hand, from a practical stand point, it is still necessary to provide an actual implementation that performs the model checking. to this end, we simply translate the state-spaces to the input language of an existing model checker, nusmv. the translation specifies a finite state machine(fsm) whose states and transitions are those in our state-space, with the addition of a few new transitions to account for a technicality. then, nusmv can be used directly to investigate the temporal properties of the fsm.



while limiting the verification to a particular number of states might seem a crude mechanism in general model checking, in our case it is a reasonable approach, since the traces we have access to are themselves subject to such limitation. so if we want to cover all available information, it is sufficient to fix such a maximum instant as the size of the largest trace(e.g., in the above example, 200). and though it is always desirable to cover all the available information, for efficiency reasons one might need to give up part of it, thus making this kind of instant limitation useful.



our model has the following variables of interest: inflation, economic activity and standard of living. at each simulation step, their values are updated according to some rules. the simulator simply runs the model several times, collecting traces and, in the end, producing a trace file that can be read by our trace merger.



to answer these questions, we open the nusmv file we have just generated and append them to it. then we just run nusmv with this input. as it turns out, only the second and the third propositions above are true. but, of course, if the simulation had being implemented in a different manner, different results could arise. furthermore, since the state-space employed is an imperfect approximation of the actual system, it is necessary to assume that the answers given by the model checker might be wrong. hence, one may wonder how these answers are useful at all. to address this concern, two things must be understood. first, these uncertain answers are indeed valuable if more rigorous methods are not available, since they do reflect the behavior of the system, albeit in an incomplete manner. and, second, the technique is not supposed to assert infallible propositions, but only to suggest possible behaviors, given the available data and the suppositions concerning the simulated system. the user is expected to use such suggestions as guidelines for further scrutiny, either by providing more and longer traces to our algorithms or by employing other methods(e.g., writing specific test cases for the detected behavior, inspecting the source code).



we highlighted the merging techniques which seem most interesting to us. but they are not the only ones possible, and perhaps for different problems other manners may be more appropriate. for example, the change-preserving algorithm of section 4.3 also preserves the instant that a change takes place, but maybe this is not necessary for some applications. furthermore, we purposefully disregarded techniques in which no merging would take place and every trace would be analyzed independently, since these would not belong to the core subject of the paper.



finally, the state-space produced by merging traces can also be useful to other things besides model checking. as an approximate representation of an underlying program, it might be interesting to apply machine learning algorithms to it, in order to extract new information about its behavior. for example, it might be the case that every time a particular state comes up, another state never appears, but we are unaware of this relation. a machine learning algorithm could, perhaps, reveal it to us.



