a choreography specifies activities and interactions among a set of services from a global point of view. from this specification, local implementations or peers can be automatically generated. generation of peers that precisely implement the choreography specification is not always possible: this problem is known as realizability. this paper presents an encoding of the chor choreography calculus into the fsp process algebra. this encoding allows to:(i) validate and verify chor specifications using the fsp toolbox(ltsa), have already been proposed to specify choreographies: ws-cdl, collaboration diagrams, bpmn, srml, etc. from such specifications, local implementations, namely peers, can be automatically generated. however, generation of peers which exactly implement the choreography specification is not always possible: this problem is known as realizability.



recent works on this topic[7,12,4,2] advocate techniques to check realizability of a choreography, or define well-formedness rules to be applied while writing the choreography specification in order to ensure its realizability. however, most of these approaches focus on theoretical aspects and lack of tool support. in addition, these works mainly focus on the realizability issue but do not allow to check choreographies(in order to verify that the overall goal of the composition is achieved) or generate code from such specifications.



the rest of this paper is organized as follows: section 2 introduces the chor and fsp calculi. section 3 presents the encoding of chor into fsp. section 4 extends the fsp encoding to take the peer generation into account, and focuses on the realizability issue. section 5 sketches the prototype tool that supports our approach and the java code generation. section 6 compares our proposal to related works, and section 7 ends the paper with some concluding remarks.



chor is a simple process language, and a simplified model of ws-cdl, for describing peers from a global point of view. from this global specification, behavioral specifications of peers can be generated by projection. in this section, we will overview both the chor language(global view) and the peer language(local view) introduced in. first of all, let us define the trace operators which are used throughout this paper.



differs from chor by the description of interactions. peer specifies them from a local point of view. therefore, at the peer level, an interaction activity is either an emission or a reception, and peers interact together by handshake communication(same channels, opposite directions).



example 2.2 we will use throughout this paper a metal stock market as a running example. there are three peers in our example. first, peer broker selects one of two metals, namely iron and steel, then look at the market as many times as needed until a sale on the selected metal becomes available. broker sends his/her bid on the selected metal to the second peer(market) of our example. after receiving a bid, market performs the following two tasks concurrently: saving the bid in its own database, and checking to see if this bid is better than the best current one or not. then, market sends the result of this check and the name of the broker to the announcement board(third peer of our example). if this bid is the best so far, board will change the current winner and notifies the broker. otherwise, board does nothing(skip). in the chor specification below, bk, mk, bd respectively stand for broker, market, and board:



in this section we introduce our encoding of chor into fsp, which allows to use existing tool support for fsp. thus, the resulting fsp specification can be compiled into lts(labeled transition system), and checked using ltsa(animation, ltl model-checking). this encoding, will also be used to generate peers and check for realizability(see section 4).



c2fpi is a one-to-one function of type chor~ processidentifier generating fresh identifiers(the same ones for identical chor specifications) as output, which obey naming rules 6 of fsp process identifiers. t.c2fpi returns a process identifier which is obtained by prefixing the result of c2fpi by t.



generation of fsp processes for an arbitrary chor specification is performed using function c2f, defined in section 3. the behavior of each peer p in the choreography c is generated by hiding in the corresponding fsp(c2fpi(c)) all actions to which p does not participate(definition 4.1).



indeed, after broker sends his/her bid to the market,(s)he should decides if(s)he will be notified by the board or not. on the other hand, board also makes this decision according to the result which is received from the market. so if peers broker and board make different decisions, a deadlock occurs. to make our specification realizable we slightly change it as follows: whatever value is received from the market, board always notifies the broker about the result. thus, the specification of the system becomes as follows: created one separate thread, and used class cyclicbarrier(the java utility class) to guarantee that the execution of both threads must be finished before the next activities are performed(cb1.wait() and cb2.wait()). also, synchronousqueue used in class channelimpl is another java class which synchronizes its read/write operations, therefore our communication mechanism remains synchronous.



as regards tools automating the realizability test, wsat takes conversation protocols as input, and checks a set of realizability conditions on them. another tool-supported approach was presented in and showed on an example how realizability can be checked using a lotos encoding. however, in the choreography language, namely collaboration diagrams, was less expressive than chor(no choice and a loop operator restricted to a single message), and the proposal focused only on abstract languages(no relationships with implementations or real code).



to sum up, first, most of these approaches focus on theoretical aspects. our contribution is a tool-supported yet formal approach tackling the realizability issue for choreography, but considers a different choreography specification language compared to[5,13], and therefore deals with its own specificities. second, the works presented in this section focus on the realizability issue but do not allow to check choreography specifications or generate code from such specifications, whereas our fsp encoding makes it possible.



in this paper, we have presented an encoding of the choreography calculus chor into the process algebra fsp. this encoding allows to generate a set of peers corresponding to the choreography, and in a second step to check that(i) they realize the original choreography, and(ii) they ensure some expected properties(by animation and model-checking with ltsa). if the choreography is not realizable or erroneous, the chor specification can be corrected and the process started again. our approach is completely automated by a prototype tool we implemented and applied to a large number of examples.



our main perspective plans to extend our approach to consider asynchronous communication. in this paper, we have focused on synchronous communication, and it makes the realizability computation and model-checking easier. dealing with asynchronous communication is a realistic assumption with respect to implementation platforms, however it complicates the analysis and verification stage. asynchronous communication can be specified using queues. in this context, realizability results depend on queue size, and some theoretical issues are still open problems such as the relationships of realizability results for queues of size one, queues of size k, and infinite queues.



