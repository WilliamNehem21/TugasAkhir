processes. in a number of situations, however, transformations based in signature morphisms are too rigid to be useful. this is the case in the context of software reuse. but also the emergence of new computing paradigms entails the need for more flexible approaches to what is taken as a valid transformation of specifications(see, for example,).



and paving the way to the formulation of refinement by interpretation in such a general setting in sections 3 and 4. additionally, section 4 presents a number of examples and discusses further properties of this notion of refinement. finally, section 5 concludes and suggests some problems deserving further attention.



defined as a multi-function, in definition 3.1, a translation maps a formula into a set of formulas. this is exactly what makes translations interesting to establish relationships between specifications and the main source of flexibility of the approach proposed in this paper. recall that, on the other hand, a signature morphism maps a formula into just another formula.



the special case of functional translation with k= l= 1, i.e., between sentential languages, has been intensively studied by feitosa and ottaviano, where the interpretations were called conservative translation. based on their work we have the following sufficient condition for a translation to be an interpretation, quite useful in practice.



a lot of questions, however, remain to be answered. for example, one can intuitively accept that a refinement via signature morphism, in the usual sense, can be regarded as a refinement via interpretation. however, in the framework introduced in this paper, this is not achieved in a straightforward way since signature morphisms implicitly define a translation of the variables. thus in order to accommodate in our framework the classical refinement procedure, a logic has to be parameterized by the variables used to generate its formulas.



