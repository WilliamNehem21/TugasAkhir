we propose a new methodology for automated testing of real-time applications in general and robotic applications in particular. the starting point is a high-level specification which can be automatically translated into a network of timed automata. analog or digital-clock observers are then generated from the timed automata specification. the system under test(sut) is instrumented to export observable events and corresponding time-stamps. the traces generated by the sut are fed to the observer(on-the-fly or off-line). the latter checks whether each trace conforms to the specification. the approach has been applied to the k9 martian rover executive of nasa.



computer-aided verification of programs has been studied for decades by the formal method research community. different models and specification languages have been proposed to describe systems and express desired properties about them in a precise way. the expressivity and the applicability of such models to various domains has been studied. it has been realized quite early, however, that the approach suffers from two fundamental problems of intractability. first, undecidability, because of turing-machine expressiveness of many infinite-state models. second, intractability because of state-explosion, that is, prohibitively large state spaces to be explored. a large effort then concentrated in tackling these problems, resulting in a number of significant advances. powerful theorem-proving techniques,(semi-)automatic abstractions,



in this paper, we propose a new methodology of dynamic testing for realtime applications. it is dynamic in the sense that it makes use of instrumentation of the sut and of run-time verification technology. the class of systems we are targetting includes all systems where a specification exists and can be translated into(or given directly as) a network of timed automata(ta). many instances of such systems can be found in the domain of robotics. there, a plan defines the steps to be performed to achieve a mission, and also gives detailed information about order, timing, etc., of these steps. the plan is fed as an input to an execution platform(the term includes software, middleware and hardware) which must implement it, by performing the specified steps in the specified timing and order. thus, the plan can be taken to be the specification and the platform executing this plan to be the sut.



the main advantage of our method is that it is potentially fully-automatic. plans can be automatically translated into networks of ta. observers for ta can be generated automatically, as we show here. for the case study reported in this paper, we relied on the help of klaus havelund and rich washington at nasa, for the instrumentation of the execution platform and the generation of the traces. however, it should be possible to automate this part as well, in the general case, by identifying a mapping between platform events and specification events, and automatically scanning the code, adding event/time-stamp exporting commands to the identified platform events. finally, the observation/testing process is automatic as well.



the rest of the paper is organized as follows. section 2 presents the methodology in detail. section 3 gives a short review of the model of timed automata. section 4 describes plans and their translation to networks of ta. section 5 shows how observers can be generated automatically from ta. section 6 discusses the application of our method on the k9 rover case study. section 7 contains conclusions and plans for future work.



report work very much related to ours. their scheme is also based on the instrumentation of the sut and the runtime analysis of the instrumented sut using an observer. the starting point of their method is a test-input generator, which generates inputs to the instrumented sut. these inputs are also fed to a property generator, which generates properties that the sut must satisfy on these particular inputs. the properties and the execution traces are fed to an observer, which checks whether the former are satisfied by the latter. the test-input generator and the property generator are specifically written for the application to be tested, while the instrumentation package and the observer are generic tools used on different applications. in one of the two case studies reported in, namely, the k9 rover controller, the inputs are plans like the ones we use in this paper(see section 6). the test-input generator generates all possible plans up to given number of nodes and bounds on timing constraints.



in our work, plans are translated into networks of timed automata. this is a fully-automatic and efficient process, which captures the full semantics of a plan. notice that, once generated, the ta corresponding to a plan can be also used for other purposes than generating an observer. for instance, to check whether the plan meets certain properties, measure delays of various sub-stages, and so on.



our methodology is mainly focused at testing robotic applications, such as the nasa k9 rover(see section 6). such applications are often structured in two layers. a high-level planning layer and a low-level execution layer. the planning layer follows an input plan, which is a detailed description of the steps needed to accomplish the mission at hand. the planning layer issues commands to the execution layer, which tries to implement them and returns the results, including status information about success or failure. the planning layer then plans the next steps depending on this feedback and the instructions in the plan.



the third step is the instrumentation of the execution platform. it aims at interfacing the latter with the testing device(the observer). two possibilities exist here. either testing is performed on-the-fly(or on-line), that is, during execution of the platform, which is connected to the observer at real-time. or it is performed off-line, that is, by first executing the platform multiple times to obtain a set of log-traces, then feeding these traces to the observer. in both cases, the instrumented platform must be able to expose a set of observable events to the observer. in the case of testing off-line, the platform must also record the time-stamps of these events. for testing on-line, time-stamping can be done by the platform or by the observer. in the latter case, possible interfacing delays must be taken into account.



instrumentation can be done manually or automatically. depending on the complexity of the sut, it can be a non-trivial task. care should be taken so that the instrumentation does not itself alter the behavior of the system. for instance, the overhead of added code should be minimal, so as not to affect execution times of the tasks in the system. these are problems inherent in any instrumentation process, and are beyond the scope of this paper.



the final step is the testing procedure per-se. the traces generated by the instrumented platform are fed to the observer, either in real-time(for on-thefly testing) or off-line. the observer checks conformance of each trace. if a trace is found non-conforming to the specification, the sut is non-conforming. otherwise, no conclusion can be made. however, confidence to the correctness of the sut is increased with the number of tests. obtaining a representative set of tests, so that some coverage criterion is met is an issue in any testing method(e.g., see), and is beyond the scope of the present paper.



in this section we describe how to obtain ta models from plans. we give the construction for the concrete language of plans performed by the k9 rover executive, which is actually our case study(see section 6). nevertheless, ta models are general enough to capture most of the constraints expressed in plan languages.



we present now the semantics of nodes and plans in terms of timed automata. the semantics is constructive in the sense that, automata can be effectively constructed, depending on syntactical description of the nodes. the semantics is also compositional in the sense that, the semantics of the plan is obtained directly by composing of timed automata associated to nodes.



state estimation is not more expensive than reachability analysis. in fact, in some cases it is cheaper. 1 as shown in[25,19], state estimates can be represented using standard data structures for ta, such as dbms, and can be computed using various versions of symbolic successor operators, depending on the desired estimator(analog or digital).



1 the worst-case complexity of the membership problem in timed automata is studied in. there, it is shown that for automata without epsilon-transitions(i.e., fully observable), the problem is np-complete whereas for automata with epsilon-transitions the problem is pspace-complete(i.e., as hard as reachability).



we have implemented a prototype observer generation tool, called ttg, on top of the if environment. the if modeling language allows to specify systems consisting of many processes communicating through message passing or shared variables and includes features such as hierarchy, priorities, dynamic creation and complex data types. the if tool-suite includes a variety of tools for simulation, model checking and test generation. ttg is written in c++ and uses the basic libraries of if for parsing and symbolic reachability of timed automata with deadlines.



ttg takes as main input the specification automaton, written in if language, and generates an off-line observer. the observer takes as input a trace and the set of unobservable actions of the original if specification. the observer can function either as an analog observer(default) or as a digital observer(-d option).



the rover executive is a software prototype written in c++ by researchers at nasa ames. it is a multi-threaded program that consists of approximately 35,000 lines of c++ code, of which 9600 lines of code are related to actual functionality. the c++ code was manually translated into java and c to experiment with tools using three technologies: static analysis, model checking and runtime analysis[11,4].



a main coordinating component named executive. it provides the main control over how the plan is executed. executive waits for a plan to be available, and signals at the end of the plan execution. so, the planwatcher signals when a plan is ready, and waits for end of execution to send a new plan.



the actionexecution thread is responsible for issuing the commands to the rover. it consists of a list of methods internaldoaction, doaction, stopaction, and abortaction. actionexecution runs the internaldoaction method, the other methods are just called by the executive on its own thread by simple calls.



due to intellectual property restrictions, we did not have access to the execution platform of the k9 rover. however, nasa provided us with a set of one hundred plans and traces, generated by the k9 rover execution platform. we applied our method, using the plan-to-if translator to obtain if models for each plan, and ttg to generate an observer for each if model of a plan. the observer was then used to check the traces.



we have proposed a methodology for testing conformance of an important class of real-time applications in an automatic way. the class includes all applications for which a specification is available and can be translated into a network of timed automata. in particular, the class includes robotic applications where specifications are considered to be the plans describing the robot mission. such plans can be automatically translated to timed automata.



the method relies on the automatic generation of an observer from the specification, on the one hand, and on the instrumentation of the system to be tested, on the other hand. the testing process consists in feeding the traces generated by the instrumented system to the observer, which is a testing device, used to check conformance of a trace to the specification. we have validated the approach on the nasa k9 rover case study.



we also plan to study the representation of observers as finite automata(timed or untimed). this is not always possible, because timed automata are non-determinizable in general. moreover, checking whether a particular ta is determinizable and determinizing it is algorithmically impossible in general. identifying classes of ta(e.g. those generated from plans) for which the above problems are solvable is a possible step in this direction.



