the remainder of this paper is organized as follows. section 2 introduces the background of this work. section 3 presents our motivating case along with an illustrative example which we use as a running example throughout the following sections. section 4 details our formal model, including the necessary definitions and specifications. section 5 describes the automated reasoning that we currently provide. section 6 discusses related work. finally, section 7 sets out conclusions and outlines future work.



in, ibm researchers kephart and chess introduced an architectural approach to realize autonomic computing based on independent elements capable of managing both external resources and their internal behavior. in light of this, autonomic systems are compositions of these autonomic elements, constantly interacting in accordance with high-level policies. each autonomic element is composed of an autonomic manager, an implementation of the generic control feedback loop from control theory, and a managed element, a hardware or software resource, such as a server, a service or a set of interconnected software components.



a great variety of combinatorial problems can be expressed as searching for one or several elements in a vast space of possibilities. in general, the search space is defined as all combinations of possible values for a predefined set of variables. elements to be searched for are particular values of these variables. in most cases the desired values of the elements are implicitly specified by properties they should satisfy. these properties are known as constraints, which are usually expressed as predicates over some set of variables. roughly speaking, a problem formulated in this frame is known as a constraint satisfaction problem(csp).



solving a csp consists of two steps: modeling the problem(logical specification) and finding its solutions through a form of search(in this paper we perform a basic backtracking). modeling involves basically the specification of the variables, their domains and the constraints among them. solving the csp through backtracking is an attempt at trying to incrementally build resolution candidates by assigning possible values to the variables. partial candidates that cannot become a valid solution are discarded. if all variables are bound, a resolution candidate has been found. if, after exploring all possibilities no resolution candidate has been found, then the problem does not have a solution.



to illustrate the problem of adapting an ea, while at runtime, when the set of quality agreements changes, we use the case of a large-scale e-commerce application. we use this case as a running example throughout the following sections. the following sections give the details regarding how the planner element of the shift framework captures adaptation constraints and reasons upon them to determine possible adaptation plans to satisfy changing context conditions.



the previous e-commerce application provides an interesting example of the decisions that need to be taken when planning an adaptation to satisfy changing quality scenarios. manually evaluating all component compositions, their relationships to quality scenarios and quality scenario interactions are costly, time consuming and error-prone; even more when the software system is already operational. in this section we propose an approach addressing dynamic adaptation planning built on the principles of constraint satisfaction.



this section presents how automated reasoning is provided in the planner element. due to interactions between quality scenarios, and since different component compositions may be available; conflicts between componentsets may arise. automated reasoning seeks to cope with this issue by providing additional information to get the best possible selection of componentsets when determining an adaptation plan. the proposed approach is able to answer the following questions.



flexible componentsets. a flexible componentset is a componentset that can be applied in self-adaptation plans for the same quality scenario with different combinations of other componentsets. given a set of possible resolution models, there should be a way to find the componentsets appearing more than once in such set.



matches the criteria of an objective function. two objective functions were taken into account. on the one hand, the function that outputs the resolution model with the greater number of applicable componentsets to self-adapt an enterprise application; namely max. on the other hand, the function that outputs the resolution model with the least number of applicable componentsets to self-adapt an enterprise application; namely min.



as future work, we will extend the model for reasoning on the process of binding components while they are redeployed on system infrastructures. we will also implement a support tool for the model and integrate it into a self-adaptation infrastructure. other challenges to face in the near future are to perform a validations of our implementation with a case study.



