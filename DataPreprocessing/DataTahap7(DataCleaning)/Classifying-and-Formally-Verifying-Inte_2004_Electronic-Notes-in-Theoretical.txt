constant folding is a well-known optimization of compilers which evaluates constant expressions already at compile time. constant folding is valid only if the results computed by the compiler are exactly the same as the results which would be computed at run-time by the target machine arithmetic. we classify different arithmetics by deriving a general condition under which a target-machine arithmetic can be replaced by a compiler arithmetic. furthermore, we consider integer arithmetics as a special case. they can be described by residue class arithmetics. we show that these arithmetics form a lattice. using the order relation in this lattice, we establish a necessary and sufficient criterion under which constant folding can be done in a residue class arithmetic that is different from the one of the target machine. concerning formal verification, we have formalized our proofs in the isabelle/hol system. as examples, we discuss the java and c integer arithmetics and show which compiler arithmetics are valid for constant folding. this discussion reveals also potential sources of incorrect behavior of c compilers.



as a rather amusing motivation for the importance of the compiler arithmetic consider the following presumably true story[poo94]. in 1994, a major city bank in the uk wanted to find out which of their pentium processors were afflicted with the pentium bug. they compiled a test program and checked all their pentium machines with it. surprisingly, all of them had the bug. just to double-check, they also tested their other machines and, even more surprisingly, discovered that they also showed the pentium bug. after some confusion, they came up with this explanation. the compiler did constant folding, computing the expression intended to reveal the pentium bug already at compile time. this compiling processor was a buggy pentium which hardwired the wrong result into the translated machine program. hence, in turn, the mistake showed up in each run of the program, independently of the arithmetic of the executing processor. this story demonstrates that the arithmetic of the compiler is important and needs to behave exactly as the arithmetic of the target machine in order to guarantee that the optimized target program behaves exactly as the unoptimized target program would do.



with our results in this paper, we introduce a general framework for the substitutability relation between arithmetics. we specialize this general setting for integer arithmetics, yielding an efficiently decidable criterion for substitutability between different integer arithmetics. in section 2, we recall some notations and results from universal and abstract algebra. in section 3, we



at first sight, one might think that the integer and floating point arithmetics in programming languages are rings and fields, resp. for the modulo-arithmetic on integer numbers, this is true. but already for saturating integer arithmetic, we do not have arithmetic on rings any more. analogously, floating-point arithmetic behaves like the arithmetic in a field only as long as no rounding errors or overflows occur. in this section, we define the notion of arithmetics and derive the notion of substitutability between algebras. furthermore, we define substitutability with respect to one specific constant expression.



the german verifix project[gz99] has the goal of constructing correct compilers. this project has achieved progress by establishing the claim that it is possible to build provably correct compilers within the standard framework of compiler construction. in[nec00], it is shown how some backend optimizations of the gcc can be validated. proof-carrying code[nl98] is another weaker approach to the construction of correct compilers which guarantees that the generated code fulfills certain necessary correctness conditions. pnueli[pss98,zpl01] also addresses the problem of constructing correct compilers.[ggb02] investigates verification of compiler optimizations specific for embedded processors. none of these works addresses the problem of dealing with different arithmetics in programming languages and their compilers. in particular, none of these works establishes a general substitutability criterion between different arithmetics.



