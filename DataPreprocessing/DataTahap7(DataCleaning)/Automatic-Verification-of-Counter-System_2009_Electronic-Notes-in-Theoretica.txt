indeed, the final termination property is undecidable in the general case, and one has to consider some strong hypotheses to automate its verification. this termination problem is classically solved by exhibiting a ranking function; it has been actively studied in the last three years in the context of code analysis for imperative programs containing loops with integer variables. in this context, presents a complete method for the synthesis of linear ranking functions on the restricted class of single path loops. this result has been recently extended in to(single path) nested loops and is implemented in the tool terminator, devoted to the analysis of c code for hardware device drivers. a complementary approach is presented in. a semi-algorithm based on region graphs is proposed; it applies to exclusive multiple-path loops and is implemented in the pones tool, devoted to the verification of java programs. synthesizes linear ranking functions for a larger class of systems: integer-variable loops with multiple paths with non-exclusive guards. the synthesis is based on an enumeration of all linear functions(represented as presburger formulas). the method is complete(if such a linear function exists, the procedure will eventually exhibit it), however, this work does not consider parameters.



from this result, we derive a procedure to automatically synthesize either presburger-definable ranking functions or lpds-definable ranking functions. the procedure will enumerate potential ranking functions and check them. the procedure terminates if and only if a presburger-definable or a lpds-definable ranking function exists. the proposed approach is used to verify a final termination property of the protocol zcsp. the method extends the aforementionned works since our hypothesis are as general as(which are larger than and), and the class of ranking functions we synthesize is larger than.



protocol zcsp(for zero-copy secure protocol) is a communication protocol implemented in the mpc parallel computer. in essence, zcsp protocol is a variant of brp protocol that has been extensively studied(for instance, see). in zcsp several messages may be emitted before the respective acknowledgments are received; the acknowledgements may be received out of order; emitted messages have to be stored up to the reception of their own acknowledgment and those of their predecessors. this storage induces a greater complexity than brp.



proof.(sketch) the abstraction represents an overapproximation of the set of behaviours of zcsp: files are represented as counters and bounds on files are relaxed. moreover, messages are now atomic. this coarser representation does not miss any interleavings since in zcsp, packets of a given message are sent atomically.



this last result may suggest to enumerate(fairly and efficiently) all presburger functions and to test whether every presburger function is a ranking function. this strategy will find a ranking function if there exists one presburger ranking function. in the other case, the computation will not terminate. in particular, it may exist a non-presburger ranking function.



we denote by flp ds the set of lpds functions. for example, f(x)= ci.x+ dj with ci in zk[p]c and dj in zk[p] is a lpds function. let us remark that every(integer) linear function with a polyhedral convex domain is a lpds function without parameter. the converse is obviously false.



n= 0. we prove that s ranked at 0 has all its successors in f inal: ts is deadlockfree, hence s has at least one successor s'; assume s' not being in f inal, then s' is associated with a rank given by f(s'), and by definition of the ranking function, f(s')< f(s); as the co-domain of f is n, this is a contradiction. it follows that every successor of s is in f inal, and s|= af final.



