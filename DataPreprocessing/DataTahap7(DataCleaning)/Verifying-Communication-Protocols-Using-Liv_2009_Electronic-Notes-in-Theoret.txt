system on chip(soc) designs are fast moving towards a development environment that incorporates third party intellectual property(ip) cores and blocks. due to the use of such heterogeneous ip cores, multiple communication protocols are required to achieve the desired interactions, behavior, and functionality. with this diverse development environment comes not only the burden of verifying the system under development, but also the third party modules and communication protocols, to ensure the correctness and compliance of the complete system with respect to the system specification. this need is especially important for vendors looking to market and promote their products in new markets and development environments. to reduce the verification costs and redundancy of verification(verified twice: once



the paper is organized as follows. section 2 presents an overview of related work in the field of lscs and verification using lscs. section 3 gives an overview of the lsc constructs and provides an example of an lsc that is explained in detail. section 4 presents an overview and examples of the lsc to automaton translation method. section 5 discusses the case study and presents results of verifying promela models against the bvci lsc specification followed by conclusions in section 6.



lscs have been used to model and specify a variety of systems such as air traffic control systems, radio based communication systems, and train systems. their use in these case studies has shown their effectiveness in specifying and verifying complex behaviors of a system. lscs and plscs have also been used in the past to specify soc communication protocols and formally verify aspects of the protocol on the system. additionally, they have also been used for automatic synthesis of systems as well.



another aspect of lsc based verification deals with the verification of systems against the lsc specifications. two primary methods have been proposed to perform verification of systems against lscs. the first deals with temporal logic. one approach converts the lsc specification to multiple small temporal logic properties that are verified on the system. these individual properties are easily verified on a system but are insufficient to establish a formal relationship between the specification and implementation itself. other approaches translate the complete chart to temporal logic, which is then used as the specification input to a model checker such as spin or nusmv[13,11]. the primary limitation of these approaches is the exponential explosion encountered in the generated temporal logic formula(number of nested temporal operators), which severely reduces the scalability of the approach.



the second method for verifying systems against lscs does so by converting the lsc to an automaton and using the automaton in language containment based verification techniques. this method supports a greater subset of the lsc grammar and scales to much larger specification sizes. although the verification results and performance using the automaton approach for verifying systems are very promising, the research does not deal with constructs such as subcharts, hierarchical charts, and kleene stars, which are essential to the specification and verification of soc interface and communication protocols. the work presented in this paper innovates upon previous work by extending the translation of lscs to the complete grammar of lscs.



locations: the life-line of each process is marked with locations that are points where events and other constructs may be described. locations are unique to each process and start at location l1. for each new event or construct placed on the process life-line, the location number is incremented for the respective process. for example, the address message is sent from the initiator process at l3 and target evaluates the cmdack== 0 post condition at l17.



messages: messages are a form of communication between processes in the lsc. each message has a sender and receiver process attached to it. messages are annotated with a message label that identifies the message. messages can be simultaneous or asynchronous. simultaneous messages are drawn with a solid arrow head and occur instantaneously when both the sender and receiver are ready for the communication. asynchronous messages are drawn with an open arrow head and can be received any time after sending(we force the send event to occur before the receive event). in the example lsc, the address message is an asynchronous message and the cmdackhigh message is a synchronous message.



conditions: conditions are placed in the chart by drawing hexagons around the life-lines of processes evaluating the condition. the condition label describes a predicate that must be satisfied at the current location(s) of the process(es). conditions spanning multiple process life-lines act as synchronizing points for the involved processes and the condition is not evaluated unless all the processes are at the respective condition locations. conditions attached to a message are called bonded conditions. conditions placed on their own location and not attached to a message in the chart are called non-bonded conditions. non-bonded conditions are evaluated continuously until they are satisfied. in our example lsc, all conditions(the cmdack== 0 precondition and the cmdack== 0 postcondition) are non-bonded. invariants are conditions spanning over multiple locations in the chart.



coregions: coregions are drawn with a dashed vertical line parallel to the lifeline of a process and are used to describe behavior that can occur in any order. all messages in the dashed vertical line(address, be, clen, etc.) next to the initiator and target processes are in a coregion.



additionally, we incorporate the delayed choice semantics when dealing with subcharts, hierarchical charts, and cold constructs. the delayed choice semantics allow the chart to resolve a choice by waiting for relevant input before committing to a certain path in the lsc. since we are using the chart as a specification language rather than a modeling language, delayed choice semantics help avoid non-determinism(reduce false positives). if the lsc were to be used as a model rather than a specification, delayed choice semantics would be removed to allow non-determinism in the model.



our verification approach uses lscs as the specification and verifies the system by detecting accepting cycles on the synchronous composition of the system automaton and the negative automaton of the lsc. the negative automaton of the lsc is the automaton that enables detection of unwanted behaviors in the system(using accept cycles recognized by the lsc automaton). the automaton is similar in nature to the never claim used in spin and has been shown to be an effective method of using lscs for verification. we first present an overview of the lsc to automaton translation for basic constructs as discussed in and then present the translation for extended constructs that have not been explored in previous work: the kleene star operator, subcharts, and hierarchical charts. to conserve space, we restrict our discussion to universal main charts only.



from a given cut, enabled transitions lead to successor cuts. the enabled transitions correspond to the set of events that can occur from a given cut without violating the partial order induced on the events by the instances in the chart. each unique cut of the lsc corresponds to a unique state in the automaton. the unwinding algorithm as presented in provides a method to unroll the lsc and all possible cuts of the lsc; thus, it gives the basic structure of the lsc automaton. this basic structure of the automaton is then transformed to a negative automaton using the transformation algorithm presented in. it should be noted that the unwinding algorithm presented in does not support kleene stars, subcharts, and hierarchical charts. additionally, the basic structure generated from the lsc is not as efficient as the transformed automaton presented in.



the general structure of the lsc automaton can be split into two parts: the prechart automaton and the main chart automaton. additionally, a special state in the automaton is the safety state, qs: an accepting state that contains only one outgoing transition to itself labeled with true. the prechart automaton contains only non-accepting states since the prechart is responsible for the detection of the activation condition of the main chart. additionally, the prechart states do not contain transitions to the safety state since the prechart does not detect errors or incorrect behavior. the first state of the prechart contains a special outgoing transition to itself that is labeled true to ensure that all possible instances of the charts in the system are checked for errors(corresponds to globally).



kleene stars can be placed on messages or subcharts to indicate repetition. when a kleene star is placed on a construct(message or subchart), the construct may be observed in the system zero or more times(finite). we first show how kleene stars attached to messages are translated to automaton and discuss the translation of subcharts with kleene stars in section 4.2.



the dashed transitions in the automaton are introduced to incorporate delayed choice semantics. such dashed transitions are introduced from every possible legal exit(last state and states corresponding to cold constructs) of a subchart to the entry points of other subcharts or higher scopes. for example, if at a legal exit of subchart a, the letter y is observed, progress is made by exiting chart a and entering chart b. similarly, from a legal exit of chart a, progress can be made to the beginning of chart c by observing a z. the dash-dot transitions from the legal exits of b to the beginning of b are introduced to incorporate delayed choice for



a. additionally, the dashed transitions from a to b and a to c are introduced to handle cold constructs. a similar set of transitions is introduced from c to a for cold constructs in c. these transitions can only be introduced to the successor charts of a given chart. for example, such transitions are not introduced from chart b to chart a or c since b has no successors. in the presence of multiple messages at the end of a chart, the translation is always guaranteed to have a final state, which is used as the starting point for joining successor charts.



it should be noted that in accordance with delayed choice semantics the minimal common prefix is chosen to identify the next chart that is to be executed(one message in the example, but could be more than one when complex precharts are specified). in the case of complex precharts(more than one message/condition), each legal exit of a chart leads to a new instance of prechart detection where it is possible to detect progress in the prechart of a successor chart or in the current chart itself(by observing the cold construct). for multiple successor charts, multiple prechart detections are introduced from each legal exit of a chart.



the basic virtual component interface(bvci) protocol is part of the virtual component interface(vci) standards family that was developed to specify point to point communication protocols. we use the bvci protocol as our specification for case analysis because of the complex nature of the specification as well as the past research that has been performed on verifying systems against the bvci protocol. we now describe our modeling and verification approach, and present results of verifying our models against the lsc specification.



we have shown how additional constructs of lscs such as subcharts, kleene stars, and hierarchical charts can be translated to a negative automaton. we have also presented a case study of using our translation technique to create an automaton from the bvci protocol and perform verification of promela models against the resulting specification, which has not been done before. our results and experiences indicate that using the lsc language as a specification language is extremely useful for writing and developing specifications that can be used during formal verification. additionally, their use as a modeling language further strengthens their applicability in the initial stages of the protocol development process.



bontemps, y., p. heymans and h. kugler, applying lscs to the specification of an air traffic control system, proc. of the 2nd int. workshop on scenarios and state machines: models, algorithms and tools(scesm03), at the 25th int. conf. on software engineering(icse03), portland, or, usa(2003).



