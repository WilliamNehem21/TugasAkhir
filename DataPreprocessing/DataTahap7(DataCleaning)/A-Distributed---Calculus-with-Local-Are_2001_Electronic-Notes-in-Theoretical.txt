introducing levels distinguishes between the different uses of concurrency and communication in a single system. for example, within a host there might be several applications, represented by areas at level app; or between host and net there could be a subnet level. communication between two threads within an application will typically have a very different character to that between two hosts on a network, and a total order of levels allows us to express this concisely.



definition 2.3 a process p is well-formed at level l if for every top-level agent m[q], level m<1 l, and q is itself well-formed at level m, recursively. an agent l[p] is well-formed if p is well-formed at level l.



a single name may have several disjoint local areas within its scope. it is also possible for a name to occur outside any local area of the right level; in this case it can only be treated as data, not used for communication. we shall see how the operational semantics, and later the proposed type system, enforces this behaviour.



the type service for finger and daytime expands to(string@net)@host. this means that the channels can be used only for host-level communication, but the values carried will themselves be net-level names. the host-level communication is between inet and finger or daytime; the net-level communication is the response sent out to the original enquirer, in this case machine carp.



the local area calculus provides a reasonable setting to explore the use of names that are known globally but act locally. we have given an operational semantics and proved that it correctly captures this intuition. illustrative examples include an internet service protocol and a pair of distributed agents.



