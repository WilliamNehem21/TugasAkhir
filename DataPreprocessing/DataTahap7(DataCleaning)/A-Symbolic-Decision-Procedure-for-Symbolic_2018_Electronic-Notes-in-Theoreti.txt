we illustrate the limitations of classic automata with the following spam detection example. spam detection is a notoriously hard task and spam filters are continuously modified to handle new malicious behaviours and to relax overly restrictive conditions. while machine learning is the typical choice for spam detection, many companies prefer using custom filters created using regular expressions. the number of filters can be very large and redundant expressions that cover already considered behaviours are often mistakenly added to the set of filters. efficiently processing all such expressions can become complicated and it is therefore desirable to avoid adding redundant filters to the list of processed ones.



accepted from state p if a1 is a lower-case letter and the string a2... an is accepted from state q1 or it is accepted from both q2 and q3. using alternation, s-afas obtain boolean operations with linear complexity, which is in sharp contrast with the quadratic intersection and exponential complementation of s-fas.



(i.e., the set of states, set of final states, and transitions of the union/intersection s-afas are just the union of the component s-afas; they differ only in the initial state, which is either the disjunction(union) or conjunction(intersection) of the initial states of the components).



for computing satisfiable boolean combinations of a set of predicates, and also the representative character enumeration algorithm in section 3). normalization may(in the worst case) cause an exponential blow-up in the number of outgoing transitions of any one state in an s-afa. note, however, that the exponential factor does not depend on the number of states.



proposition 3.8 yields a simple candidate algorithm for the congruence problem: simply check whether the pair of positive boolean formulae belongs to the logical closure of a relation using a sat solver. the following proposition states that we cannot hope for an asymptotically superior algorithm.



proof. membership in np follows immediately from proposition 3.8. we prove np-hardness of congruence by giving a polytime reduction from sat. the key insight is that the relation r can be used to axiomatize negation, so that arbitrary boolean formulae can be encoded into positive boolean formulae.





2 we have separately evaluated the use of a priority queue for our worklist and our tool also has implementations for fifo and lifo. the use of a priority queue consistently outperforms the other heuristics. concretely, on our benchmarks fifo and lifo time out approximately twice as often as the priority queue implementation. we will report data only about the priority queue implementation because it is consistently faster than the other two.



we consider three sets of ltl formulae: 1) counter contains 15 formulae describing counters for which satisfiability is notoriously hard. 2) lift contains 8 parametric formulae describing a lift system of increasing complexity. 3) more than 10,000 random formulae appearing in. these formulae have size varying between 10 and 100, and number of atomic propositions varying between 2 and 4. we set the timeout at 60 and 5 seconds for the non-random and random formulae respectively.



satisfiability of ltl-f formulae using a bdd-based variant of alternating automata. after observing that mona consistently outperformed alaska, we decided to only report the comparison against mona. we do not compare against non-symbolic automata libraries as these would not support large alphabets. moreover, most libraries only support nfas, which would force us to choose a way to encode the ltl formulae into nfas. we also do not compare against model checkers such as nusmv and spin, since they only support ltl over infinite traces.





alternating automata: alternation is a classic concept in computer science and and the notion of alternating automata dates back to the 80s[5,6]. vardi recognized the potential of such a model in program verification, in spite of their high theoretical complexities. alaska was one of the first practical implementations of alternating automata. in alaska, the alphabet and the set of states are both represented using bit-vectors and this allows to model the search space using bdd.



lar because they support arbitrary alphabets and alphabet representation(not just bit-vectors and bdds) and arbitrary state representations(again not just bdds). alaska performs state-space reduction using antichains while checking afa emptiness. as shown by bonchi and pous, bisimulation up to congruence strictly subsumes antichain reduction.



