for interactive theorem provers a very desirable property is consistency: it should not be possible to prove false theorems. however, this is not enough: it also should not be possible to think that a theorem that actually is false has been proved. more precisely: the user should be able to know what it is that the interactive theorem prover is proving.



we argue that a good interactive theorem prover should be pollack-consistent. we show with examples that many interactive theorem provers currently are not pollack-consistent. finally we describe a simple approach for making a system pollack-consistent, which only consists of a small modification to the printing code of the system.



1 thanks to randy pollack, mark adams and christian urban for the inspiration for this note. thanks to james mckinna and josef urban for valuable advise. thanks to makarius wenzel for the isabelle examples from section 4. thanks to the anonymous referees for helpful comments.



computer science and from mathematics. the technology of interactive theorem proving gives an almost 100% chance of getting all of the details of a proof right. 2 it is much better in this respect than any other method of proof development. furthermore, although the technology is still in its infancy, already impressive formal theories have been constructed[6,7,12,14,16].



these lcf kernels are sufficiently small that they can be inspected manually to get a very high confidence in their correctness. for example, the hol light kernel only has about 400 non-blank lines of code. for some of these systems the code of the kernel even has been formally proved correct[1,2,10].



these issues are closely related to a system not being able to parse what it printed itself. often, a message from a system will contain a term or formula, that the user would like to copy/paste into the proof development. generally this works, but regularly it does not. the system then gives error messages about its own output or sometimes, worse, will silently interpret it in a wrong way. this again is about the parsing and printing part of the system. a system that exhibits this behavior also might be called incorrect.



the first generally is a partial function(not all strings represent a term), while the second generally is total. often there will be different variants of the printt function, possibly selected by setting parameters of the system. in the rest of the paper we only consider the default version of this function, the one that is used when running the system with all parameters having their default value.



the print functions in this definition should be the default print functions of the system. no printing of extra type annotations, hidden arguments, coercions, etc. should be turned on that normally is turned off. however custom notation is not excluded. this feature is such an ingrained part of most systems that excluding it does not make sense. we do not consider custom notation to be a deviation from the default printer, as well as a special form of definition.



1. the pretty-printer of the system does not realize that something strange is going on with these variable names. but when parsing these names, they of course will be read as the numbers 0 and 1. again, we have strong pollack-inconsistency here. by playing with variable names like this, one can make this example even more extreme:



the lines prefixed by> are the input processed by isabelle, while the lines without that prefix are the output from the system. in the first example it is shown that isabelle omits types in quantifiers in exactly the same way as hol light does. in the second example isabelle proves a statement that reads false by changing the notation for true in the system.



the mizar system[20,23] in a strict sense does not have a printing function. all it prints are error numbers associated with specific locations in the source files. therefore the notion of pollack-inconsistency does not apply to it. however, there is an interface for mizar by josef urban, built on top of emacs[24,25]. this is installed by default with the system, and it does contain code to print mizar formulas



the number 0 both has the types natural number and real number. the second definition of[x] hides the first, hence the value of is 0. however, if one removes the type natural number using the qua construction, the second definition does not apply anymore, and the value becomes 1. of course these numbers are different, and hence the theorem is accepted without error messages.



it is much easier to show that a system is pollack-inconsistent than to show that it is pollack-consistent. in the first case it is sufficient to exhibit an example of one or more pollack-axioms that imply a contradiction, while in the second case one needs to prove a relationship between rather complicated parsing and printing functions. generally for a serious system that will be quite difficult.



when discussing pollack-inconsistency with users of interactive theorem provers, often they appear to consider it a non-issue. they agree that the printing function of their system sometimes can be a bit quirky and misleading, but then they argue that if it really is needed then one can turn on more information in the printing function. the fact that on the inside of the system everything is guaranteed to be meaningful seems to be sufficient for them.



the main task ahead of us is to convince the makers of interactive theorem provers that these issues are worth looking into. that is, to convince them to modify their parsing/printing functions to make their systems pollack-consistent. or at least to make these functions closer to being well-behaved than they are today.



