we have used the proof assistant abella for this task. our choice is motivated simply by our familiarity with the tool. as of now, the encoding does not use any exclusive feature of abella and can be reproduced in any other proof assistant supporting induction(we have also an implementation of the multiset library and some of the meta-theorems with proofs in coq).



z, leaving us with the obligation plus z z z, which is easily proved by the first clause of plus. in the second case, we would obtain x= s x1 where x1 is a new variable for which we know is_nat x1. the goal now is plus(s x1) z(s x1), which we can unfold using the second clause of plus to reduce it to plus x1 z x1. thus, we are left with the obligation of proving plus x1 z x1 from the assumption is_nat x1.



where the annotation@ indicates that its size is such that every*-annotated instance is strictly smaller. unfolding the assumption is_nat x@ reduces its size strictly, so that in the case of its second definitional clause we get a new assumption is_nat x1*(where x= s x1). this can now be fed to the ih to obtain plus x1 z x1, which is what we needed to finish the proof.



in this case, we want to induct using the lexicographic ordering of the sizes of is_nat x and is_nat y, i.e., the inductive hypothesis may be used if the size of is_nat x is strictly smaller, or it stays the same and that of is_nat y is strictly smaller. in abella we write this using the following invocation: where... in each case is exists k, is_nat k/\ ack x y k. the hypothesis ih1 is familiar from before: it just means that is_nat x* is strictly smaller than is_nat x@. the hypothesis ih2, on the other hand, has is_nat y** which is strictly smaller than is_nat y@@. this hypothesis also has an assumption is_nat



the proof of plus_is is by straightforward induction on plus x y z. note that we could have sprinkled more is_nat conjuncts in the bodies of the definitional clauses, but the above choice is sufficient. we will opt to alter the natural definitional clauses as minimally as possible to yield the necessary inversion lemmas.



