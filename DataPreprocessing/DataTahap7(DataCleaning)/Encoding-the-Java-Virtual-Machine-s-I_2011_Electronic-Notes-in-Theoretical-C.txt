the development of programs that parse and analyze java bytecode has a long history and new programs are still developed[2,3,4,7,13]. when developing such tools, however, a lot of effort is spent to develop a parser for the bytecode and for(re-)developing standard controland data-flow analyses which calculate, e.g., the control-flow graph or the data-dependency graph.



opal spl does not have a hard-coded type hierarchy. instead, each specification written in spl contains a description of the type system used by the bytecode language being described. the only restriction is that all types have to be arranged in a single, strict hierarchy.



in opal spl, the stack is modeled as a list of operands, not as a list of slots as discussed in the jvm specification. while the effect of an instruction such as dup2 is more easily expressed in terms of stack slots, the vast majority of instructions naturally refers to operands. in particular, the decision to base the stack model on operands rather than slots avoids explicit modeling of the higher and lower halves of category-2-values, e.g., the high and low word of a 64 bit long operand.



based on the specification, we have developed two generators which are both implemented using xslt. the first xslt transformation generates the classes to represent all instructions and is 350 lines long. each generated class represents an instruction as a java object and offers the functionality to get an xml and a prolog representation of the concrete instance of an instruction. the second xslt transformation generates the parser for a code array which creates the instance of the instruction classes on the fly. this transformation is another 300 lines long. we compared this with the bytecode code engineering library(bcel) which uses a similar approach for representing and handling instructions. when compared to the instruction-related code of bcel, the generator is between 15 and 20 times smaller.



another advantage of the approach is that changes that affect all instructions are localized. for example, in case of the prolog representation we tested several different representations which often affected all instructions. nevertheless, in general less than 40 lines of code of the generator needed to be changed.



