in the new and exciting open-world software paradigm, the environment changes continuously and the software must dynamically react and adapt its behavior. the world is open to new components that the environment can dynamically provide and the software discover and bind. so, in an open-world, software is no longer created from scratch but integrating already developed third-party services. currently, there exist approaches, standards and technologies partially supporting open-world software assumptions, among them, publish-subscribe middleware, grid computing, autonomic computing or service oriented architectures(soa)[2,3] and their underlying implementations such as web services. in this context, software services are abstractions that should be flexible enough to mix technologies(e.g., sensors, gps



open-world software distinguishes the roles of service provider and service integrator. the former develops and deploys, probably in heterogeneous environments, services to be executed in unforeseen manners, and the latter creates service-based applications invoking those external deployed services. service integration needs, among others, that deployed services: describe their functional and non-functional properties; provide and negotiate qos levels(sla); can be dynamically discovered and bound at runtime; allow their real behavior to be monitored. this paper mainly deals with the last two topics.



at the same time different workloads can be managed. these works consider that the qos values of the third-party providers are negotiated and hence well-known and reliable. however our work prefers not to blindly trust in such values but to track the providers to predict the current qos, then our results would not be so precise. indeed, our solution was inspired by the works[9,22,35]. also in is addressed the problem of guaranteeing the qos of untrusted third-party services. they propose a framework to choose the better services in terms of qos, but in contrast to our work the workload is balanced among several providers to support some kind of fault tolerance.



