by proposing alternative movement capabilities. we may mention mobile safe ambients(sa)[13,14], robust ambients(roam), safe ambients with passwords(sap), the push and pull ambient calculus(pac), controlled ambients(ca), and the version of boxed ambients with passwords(nba). we shall use the term ambient calculus(ac) to refer to all of these variants.



the major question left open by previous work is whether pure ac without the open capability which dissolves ambients can be turing complete. this question is of particular interest in view of the decision which bugliesi, castagna and crafa took to dispense with ambient opening when proposing their calculus of boxed ambients[2,17,3,7]. they advocate communication between ambients where one is contained in the other, rather than the sameambient communication of mobile ambients. a similar model of communication is employed in.



we give an encoding of counter machines into pure ma without restriction, and without the open capability(theorem 3.6), showing that this fragment is turing complete. the encoding also demonstrates that both termination and the observation of weak barbs are undecidable problems. as far as we are aware, turing completeness has not previously been shown for any pure ambient calculus without the capability to dissolve ambients(although we note that an encoding of pi-calculus into boxed ambients with communication is given in).



robust ambients(roam) is another calculus where ambients must synchronise to perform an entry. for m[ p] to enter n[ q], p must name n and q must name m, which is a symmetrical blending of subjective and objective movement. turing completeness results for either ma or pac will extend to roam(since our encodings use only a finite set of names).



we are interested in finding minimal turing complete fragments of ac. this entails showing that smaller fragments are too weak to be turing complete. busi and zavattaro have shown that in the fragment of ma with the open capability, but without movement capabilities or restriction, it is decidable whether a given process has a non-terminating computation. we show the same decidability property for fragments with capabilities allowing movement in one direction only(either entering or exiting). we also show that in certain smaller fragments(where replication is only allowed on capabilities) every computation terminates.



the paper is organised as follows. in section 2 we recall various operators and capabilities of the ambient calculus, together with their associated notions of reduction. in section 3 we discuss various turing complete languages, with and without the open capability. in section 4 we show that certain fragset of capabilities. when we consider languages with capability in, we shall always have capability in as well, and we shall adopt rule(safein) and not rule(in). clearly, if a language has capabilities in, in and replication on these capabilities, then the effect of rule(in) can be simulated; every ambient can be made perfectly receptive to entering processes by converting n[ p] into n[! in n| p]. similar considerations apply to capabilities out and out.



a basic measure of the computational strength of a process language is whether turing machines, or some other turing-complete formalism, can be encoded in the language. cardelli and gordon established that pure mobile ambients can encode turing machines. busi and zavattaro improved this result by showing that counter machines(cms) can be encoded in pure ma without restriction. they also showed that the fragment of pure ma with no movement capabilities(but with restriction) can encode cms.



it is striking that empty ambients with no movement capabilities are enough. there is an essential use of restriction to obtain the effect of mutual recursion. nevertheless, this result shows the strength of the open capability. we wish to investigate whether we can achieve turing completeness without open.



time they are used, as the code for either decrement or jump is left unused. we therefore parametrise our encoding by the index l of the stage we have reached in the computation. let dec(i, l)(resp. jump(i, l)) be the number of decrements(resp. jumps) performed by instruction i during the computation of cm up to, but not including, stage l.



an instruction process[ii]]l is triggered by the presence of sti at the top level; the instruction starts by consuming sti. the execution of[ii]]l finishes by unleashing the sti ambient corresponding to the next instruction. throughout the computation, at most one sti ambient is present. the encoded machine terminates if and when the ambient sta+1 appears at the top level. there are various cases depending on the nature of the instruction ii.



an instruction process of the form[i: inc(j)]]l creates a new register rj[ s[]], which already contains the successor ambient needed to perform the increment. the new register pulls the existing rj into its core, and strips off the outer casing. the instruction then signals completion by pushing out the trigger for the next instruction. computation is entirely deterministic. we have:



clearly lio is a sublanguage of lop as defined earlier. the major difference is that lio does not have the open capability. also, replication is only applied to the capabilities. we shall see in sections 4 and 5 that the computational strength of a language can depend on whether replication is applied to capabilities or to ambients.



registers consist of a series of double skins s[ t[...]] with z[] at the core. we use a double skin rather than the more obvious s[ s[ z[]]] style. this is to help with decrementing, which is done by stripping off the outermost s and then in a separate operation stripping off the t now exposed.



as the computation proceeds, inert garbage accumulates in both the instructions and the registers. we handle this much as in the proof of theorem 3.4, letting the encodings of the instructions and the registers be parametrised with the current step in the computation.



we would like to know whether the language lio of subsection 3.4 is a minimal turing-complete language. as a partial answer to this question, we shall show in this section that if we remove one of the movement capabilities(either in or out) then the resulting language is in fact terminating, i.e. every computation terminates.



and we let rd(m[ p])=df rnd(p cap). this is well-defined with respect to structural congruence. notice that the degree of an ambient is unchanged throughout a computation. it is unaffected by other ambients entering of whatever degree. also, no capability can ever disappear.



remark 4.4 if we combine replication with the open capability we can create non-terminating processes such as n[]|! open n.n[]. busi and zavattaro showed that termination is decidable for processes built with replication and open(see theorem 5.2 in section 5).



busi and zavattaro showed that termination is decidable in a language without restriction, and with open but no movement capabilities. they are able to allow unboxed recursion rather than merely replication. their proof relies on the facts that any process has only finitely many names(since restriction is absent), and that there is a finite bound on the nesting depth of ambients. these properties remain true if we add the out and push capabilities, since these cannot increase nesting depth of ambients.



processes, under which, for instance, p is below p| q, is a well-quasi-ordering. they then use the theory of well-structured transition systems to deduce that termination is decidable. we make appropriate changes to their ordering on processes to incorporate the added capabilities.



matters are different when it comes to the in capability and full replication(rather than replication on capabilities, as considered in section 4). even such a simple process as! n[ in n] can have a computation with unbounded ambient nesting depth. the proof method of theorem 5.2 is therefore not available.



here p' is got from p by removing the capability component of p, i.e. any in or replicated in capabilities which n[ p] can exercise. we replace all replicated ambients after unfolding them exactly once. the replacement![ p] is not an



notice that![ p] can engage in at most one reduction, and that div has no reductions. therefore we can adapt theorem 4.2 to show that every computation in ld terminates. furthermore, every process has a finite computation tree which can be constructed effectively. then a process p of lin has a nonterminating computation iff there is any occurrence of div in the computation tree of pd.



