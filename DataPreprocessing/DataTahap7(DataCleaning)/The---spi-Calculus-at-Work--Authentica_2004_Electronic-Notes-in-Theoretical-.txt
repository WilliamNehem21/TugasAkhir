in, we introduce a process calculus for describing security protocols and we propose a static and compositional analysis of entity authentication. in this paper we apply such a technique on well-known shared key authentication protocols. the analysis helps clarifying the protocol logics, suggests simplifications and reveals some attacks. moreover we discuss how our analysis scales up to multi-protocol systems.



in this paper, we apply the above mentioned technique to some well-known protocols: iso symmetric key two pass unilateral authentication protocol, the nonce-based version of the wide mouthed frog protocol, the woo and lam authentication protocols and the amended needham schroeder shared-key protocol. our aim is to show that the analysis is applicable to a wide set of authentication protocols. based on our analysis, we prove the safety of correct protocols for an unbounded number of sessions and, in some cases, we propose simplifications. on the other side, our analysis fails in validating flawed protocols suggesting possible attacks. moreover, we show that our analysis helps clarifying and formalizing the logics behind the protocols. we give also an example of a multi-protocol system, where entities run multiple sessions of different protocols. we analyze the interleavings among different sessions and discuss how our analysis guarantees their safety.



the reading of the process forms is as follows. process 0 is the null process that does nothing, as usual. process new(n).s generates a fresh name n local to s. the constructs for input, output, new and decryption are essentially the same as in the calculus lysa. in particular, as in lysa, we presuppose a unique(anonymous) public channel from/to which messages are read/sent, a technique that models well the worst-case situation of an intruder with a complete control of the network. similarly to lysa, our input and decryption constructs may test part of the message a message composed of m parts matching the respective di and continues as s, where all the variables instantiated by the pattern-matching are replaced by their actual values. process out(d1,..., dm).s outputs a messages composed of m parts and then continues as s. the pattern-matching mechanism is so defined as to en-



receiving x, it signals the start of a new authentication run with b, encrypts x and m with the long term key kab, and then sends out the encrypted message. similarly, responder generates a fresh nonce nb and sends it out. then, it reads y from the net and decrypts it with the long term key kab, checking the nonce nb(through the pattern-matching mechanism of decryption). if the match is successful, the variable z gets bound to a message(from a) and the principal commits through



notice that this trace represents only one of the possible interleavings of initiator and responder actions. in this particular trace, commit(b, a) is preceded by run(a, b). according to the woo and lam idea of correspondence assertions, this trace is safe, since b is convinced to communicate with a(action commit(b, a)) and a is indeed running the protocol with b(action run(a, b)).



we conclude this section by formalizing the definition of safety based on correspondence assertions. as in, we say that a trace is safe if every commit(b, a) is preceded by a distinct run(a, b). a protocol guarantees entity authentication if all of its traces are safe.



technique, is to suitably tag it: nb is used for checking the freshness of a message where the identity label b specifies the intended verifier. thus b is tagged as id and nb by verif. notice that tags makes clearer the role of message components.



is the intended verifier of the current authentication session. rule(verifier) can be also used by a to inform a ttp t that b is the intended verifier. in that case the ciphertext is encrypted with a long-term key shared between a and t(see sections 4.2 and 4.3).



finally, the protocol uses no session keys and long term keys are neither sent on the net nor encrypted. thus both the initiator and responder code are key safe and, hence, can be judged correct. by theorem 3.3, we directly obtain that every trace of protocoliso is safe, thus no authentication attack is possible. this example clarifies how direct authentication protocols are analyzed by our proof system: the been previously decrypted. that ciphertext must have been encrypted by following one of the principles, in this case(verifier). this guarantees that a run(a, b) has been previously asserted. since nonces can be checked only once, in every trace generated by the protocol, every commit(b, a) is preceded by a distinct run(a, b).



kij represents a long term key shared between entities ii and ij. we assume that kij= k ji(and correspondingly define the key assignment only for keys kij with i< j). initiatoriso and responderiso are arbitrarily replicated for every pair of entities ii, ij, using the appropriate long-term key. the proofs of correctness of



= key(kab, a, b). a d initiatoriso(kab, a, b) and for let kab= key(kab, a, b). b d responderiso(kab, b, a), up to a renaming of identities and keys. as specified by definition 3.2, replicated identical processes do not need to be re-proved correct.



(authenticate verif).(authenticate claim) states that a may legally commit(hence authenticate) b only if a has previously generated a nonce n and decrypted a message{b: id, n: claim...}k(with the same nonce) with k shared either with b,



latter part consists of the parallel composition of principals and trusted servers. every principal is parameterized by a specific session partner. also, every trusted server is parameterized by a specific pair composed of a claimant and a verifier(with the respective keys).



notice that the attack is possible only on the untagged version of the protocol: when messages are tagged, the ciphertext sent in(3.b) differs from the one that b expects to receive in(6.b) because of the different tag. this shows how tagging solves message ambiguities. indeed, we assume that protocol messages are nonce received with her own identity(here is the problem: a wants to authenticate herself with b, but in the ciphertext there is no information regarding b) and sends the ciphertext to c. the ciphertext is captured by the attacker and routed to b,(3.b).



the identity label a. by this ciphertext, b communicates to t he is willing to authenticate himself with a. in(3), a sends to t the ciphertext received by b and, as cleartext, also a fresh nonce na and the two identity labels a and b. the server distributes, by means of two ciphertexts, a session key kab to a and b,(4). the identity label b is inserted in the ciphertext encrypted by kat for communicating to



a that b is the owner of the session key kab. similarly the identity label a, in the ciphertext encrypted by kbt, informs b that a is the owner of kab. thus na and nb are tagged by owner and kab by key. in(6), a receives a ciphertext encrypted with kab. by the nonce-check performed on the ciphertext received in(4), a knows that kab is fresh. since a has not generated any ciphertext encrypted with kab before, that ciphertext has been originated by b. thus b is alive and a can authenticate him. similarly, in(7), b receives a ciphertext encrypted with kab, different from the one encrypted in(6). thus that ciphertext has been originated by a and b is(ttp distribute) is used for checking the safety of the server. the rule allows a ttp t to declare new session keys through messages of the form{i: id, x: owner, ks: key...}k.(ttp distribute) is trivially satisfied since it has no side conditions.



(owner) is used for checking the safety of both the initiator and the responder. the rule allows a to send a message{d1,..., dm}y for confirming to have received the fresh session key y, provided that she has previously decrypted a message



{b: id, n: owner, y: key...}kat, declaring that y is a fresh key shared with b, and she has previously performed a run with b. both the conditions are satisfied in initiatorns(ki, ii, ij) and responderns(kj, ij, ii).



sage{b: id, n: owner, y: key...}kat, encrypted by a ttp, including a fresh session key y owned by b and a nonce n that a previously generated; and(ii) at least one message{d1,..., dm}y that she did not generate 6.(authenticate owner) is satisfied in initiatorns(ki, ii, ij) as well as in responderns(kj, ij, ii).



a is running as initiator in the wide mouthed frog protocol, while b as responder in the woo and lam. b intercepts the message sent by a to t and exploits it for completing the authentication session. the interleaving arises since the second message of the two protocols has the same structure: an identity label, a payload and a nonce. also the tags are the same. the corresponding trace is(authenticate owner) after receiving{b: id, n: owner, y: key...}kat and checking the nonce n, a authenticates y as a fresh session key owned by b. the reception of{d1,..., dm}y authenticates b. see section 4.4.



cation protocols, e.g., protocols based on public-key encryption and other kinds of nonce-challenges[18,19]. we are basing such an extension on a type and effect system. this should allow us to formally compare our approach with the type and effect systems proposed by gordon and jeffrey in[16,17].



