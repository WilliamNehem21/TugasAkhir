the flow of business information is made explicit in a manual top-down analysis step, e.g., it means that one annotates the input and outputs of the subprocesses with data abstractions such as claim, policy, customer information, and these inputs and outputs are possibly connected to model the data-flow inside the process.



puts it into a data store visualized by a repository symbol(which can also represent a variable in the target programming model, e.g., bpel), and then triggers the loop via a control-flow edge. once the loop has terminated, another map activity receives the modified claim message and the control-flow from the loop to pass the message on to the process interface.



our methodologies also address specific questions that result from the use of different forms of models. historically, business processes have mostly been represented by flow diagrams. today, there is a trend to link them with business objects and business state machines. the semantic relationship between the various forms of models and their role in business-level and programming models are a very interesting and wide field for research.



process models. many academic solutions have been developed to describe model transformations declaratively, e.g.,[17,22], but the industrial reality is usually plain code. to speed up and improve the quality of our own transformation development, we developed a model transformation framework that provides a convenient api to business-process models represented in ibm websphere business modeler and a set of elementary transformations for reuse.



our transformations often contain many lines of code that validate the source and target models of the transformations, i.e., they check whether the model is eligible for the transformation and whether the target model that was produced satisfies a set of given design constraints. the management of these validation and design constraints at the code level creates a huge software maintenance problem, which is even aggravated by the fact that models evolve further with each new version of a software product and that transformations must consider numerous dependencies between models at the business and it level.



quality assurance for models is another fundamental question that is also related to the management of design constraints for models. there seems to be an intuitive feeling of what constitutes a good model in contrast to a bad model, but so far no really practical and user-friendly solutions to improve the quality of process models by enforcing design constraints exist. similarly, scalable(perhaps incomplete) algorithms to detect typical design errors in process models that would lead to poor runtime code are not yet part of any business-process modeling tool.



