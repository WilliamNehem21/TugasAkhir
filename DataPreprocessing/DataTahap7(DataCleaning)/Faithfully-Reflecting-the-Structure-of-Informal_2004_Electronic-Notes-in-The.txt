reliability in the second phase, we need to have a small, manually-verifiable proof-checker to control the proofs. the proof-checker is independent of the possibly very complex machinery that actually constructs those proofs. therefore, by using a proof assistant that conforms to the criterion of de bruijn we can achieve a fairly high degree of reliability.



the derivation system is syntax-driven, in the sense that for each sub(goal) in a derivation, only one rule is applicable. a book constructed with our derivation system is transparently structured and in general less ambiguous than cml texts. the derivation rules for example enforce that all parameters of a constant that is used are spelled out and that there are no free variables in a book.



wtt can be used as a starting point in the translation of mathematical texts into type theory. we show how the use of a wtt version extended with logic(i.e. wttl) can be used to obtain a type theoretical translation of cml texts that clearly preserve the structure. thereto we have to add definitions for all logical operators and rules to the context of the judgement in type theory.



one way to do that is to formulate the theorem in the language of a proof assistant and use its facilities(tactics) to prove it. but then of course we are creating a different proof whose structure is dictated by the proof assistant. eventually, when we finish the proof, we have a proof term and a proof script that generated it, but their relation to the original proof is not clear.



in severi and poll describe how to introduce definitions in a pure type system. their work is extended by bloo et al.[15,13], kamareddine by considering also parametric definitions. the rules presented in section 3 are derivable from those works. most of the current theorem proving systems support definitions of some sort. one of the well-known application of definitions there is to simulate a form of forward reasoning. it is interesting in our case that we only need to introduce global definitions in order to reflect the declarative aspects of proof-representation.



in our tiny case study we have shown that within currently available systems it is possible to choose an alternative representation of proofs that faithfully represents the structure of the informal arguments formalized in the proof. this gives us an increased level of confidence that the formal proof is the one the author meant. it also allows tracing back which parts of the formal proof correspond to which part of the informal one and therefore increases the maintainability of the proof. by starting the formalization as close as possible to the informal representation, we reduce the chance of formalization errors.



in recent years, we have seen a successful implementation of several different proof checking systems(e.g. coq, mizar, pvs, lego, nuprl, agda, hol, isabelle, etc.). although many of them have evolved to mature systems, wide acceptance of proof assistants by mathematicians outside the theorem proving community is still to come.



now that their foundations have been sufficiently developed, the time has come for the proof assistants to become an accepted research tool for mathematicians. to achieve this goal we need to lower the threshold for using them. therefore the formalization process needs to be made easier so that also mathematicians who are not type theory experts can use a proof assistant. we hope that with this paper we have shown how some of these goals could be achieved within the existing systems.



