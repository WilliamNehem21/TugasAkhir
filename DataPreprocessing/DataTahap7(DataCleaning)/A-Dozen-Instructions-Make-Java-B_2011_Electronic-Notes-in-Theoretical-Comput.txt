where p is a program, h, hj are heaps and ts, tsj are states of the threads. the semantic domains of these values are defined in the following way. first, we provide the description of programs: prog=[cnames~fin cdesc]. programs are partial functions with finite domain that associate class descriptions from cdesc with class names from cnames. the class names are just appropriately defined identifiers, the class descriptions are defined as cdesc=[mnames~fin mdesc] i.e. partial functions with finite domains that associate method descriptions mdesc with the method names. again the method names are just appropriate identifiers while the method descriptions are somewhat more complicated and defined as



note that the value written by put does not have to be accessible by other threads immediately. in fact, any part of heap may be synchronized with the thread cache at any point of program execution, with java memory model constraints preserved. in particular, the two halfs of a category-2 value may be synchronized independently.



this instruction can modify the state of threads by trying to acquire or release a monitor. the operation itself is done by modifying an object on the heap. the monitor instruction expects one location on the operand stack: the object with which the monitor in question is associated. the general form of the instruction is monitor(op), where op is either enter or exit.



this instruction returns from the current method. it reads the operand stack and modifies the method frame stack by removing the current frame and updating the previous frame: moving the pc to the next instructions(usually over an invoke instruction) and updating the operand stack by pushing the return value, after the floating-point value set conversion[12, section 3.8.3]. the general form of the instruction is return(l) where l is a list of kinds of length at most 1.



this instruction takes no parameters, it reads and removes the location of the exception form the stack and changes the evaluation state of the current thread(the rule ex-throw). the way the exceptions are handled in our semantics is the following. the evaluation state(est) component of each thread says if the execution is in the normal state, when est= null, or in exception handling state otherwise.



note that the switch to the latter state can be done not only by executing the throw instruction but also by throwing an exception(e.g. nullpointerexception) by other semantic rules. if est= e is a location of a valid exception, the remaining rules ex-in-handle, ex-out-handle or ex-term-handle can be fired, depending on the fact whether the exception is handled inside the current method or provokes its abrupt termination. in the latter case, the ex-term-handle rule handles the special case where the current method is the last on the method frame stack. this rule does not have a direct correspondence in, just like the rule n-term-return.



the feature which is not handled is the release of monitor when a synchronized method is abruptly terminated by an exception. note however that this can be simulated by adding a catch-all exception handler which would execute the instruction monitor(exit) and then rethrow the exception. see also the discussion at the end of section 3.9.



the functionality of a few instructions cannot be expressed by semantical transformation of the runtime structures as their meaning is not described in jvm specification. these are breakpoint, impdep1, impdep2, and the instruction with the opcode 186. 7 therefore, they are omitted from the paper. the opcode wide is taken into account along with the non-wide operations.



we have presented a concise formalisation of jvml which turns out to be factorisable into 12 instruction mnemonics. this was possible because we separated generic operation of many instructions and tabularised particular behaviours of individual opcodes. in this way we rigorously reduced the overall complexity of the whole language without significantly sacrificing its features.



