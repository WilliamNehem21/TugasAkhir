it is difficult for a tenant application to share service or data with other tenant applications. often, a saas platform provides security mechanisms to isolate tenant applications so that tenants cannot access data that belong to other tenants. even though tenant code and data are stored in the same database, the saas security mechanism isolates a tenant from other tenants.



service-oriented saas: this is an approach to implement mta by soa(service-oriented architecture). saas domain knowledge is separated from saas infrastructure to facilitate different domains. easysaas proposed a development framework to simplify saas development by harnessing both soa and saas domain ontology. azeez



variation points are locations where variation occurs, and variants are the alternatives that can be selected. software product families introduce variability management to deal with these differences by handling variability. kang described a method for discovering commonality among different software systems. coplien presented how to perform domain engineering by identifying the commonalities and variabilities within a family of products. webber described a systematic method for providing components that could be extended through variation points, which allowed the user or application engineer to extend components at prespecified variation points to create more flexible set of components. mietzner presented a variability descriptor and described that its transformation into a ws-bpel process model to guide customizations. in addition, mietzner explained how variability modeling techniques could support saas providers in managing the variability of saas applications and proposed using explicit variability models to derive customization for individual saas tenants.



crowdsourcing: it is the process that tenant assigns tasks to tenants with domain knowledge. in other words, tenants do not need to develop applications by themselves but outsource some tasks to experts. crowdsourcing is the center of all seven steps. all tasks in each step can be outsource to tenants in the same saas environment.



there are two layers to compute goodness and importance, batch layer and real-time layer. in this paper, batch layer means sta does the calculation after certain period of time and does it in a batch way. realtime layer means sta does the calculation when tenants and components need to change their rank scores.



batch based calculation can compute a large number of tenants or components and obtain accurate results as it can take long time to finish calculation. in this layer, static ranking model is applied. after passing this layer, all tenants and components have static scores. as the number of tenants and components can become huge, wellestablished big data frameworks such as hadoop and spark can be applied to accelerate computation.



realtime based calculation can do calculation fast but can only obtain proximate result. only those tenants and components need to update their scores that have relationships to tenants who implement or subscribe components and become sub-tenant to other tenants. therefore, dynamic ranking model is applied in this case. to apply dynamic ranking model, the first step is to retrieve the most relevant components and tenants by searching sta database and fetching tenants and components with changes. this set is called the root set and can be achieved by taking the top n tenants and components, where n can be huge. a base set is generated by augmenting the root set with all the tenants and components that subscribe, implement or refer to those components and tenants in root set. the tenants and components in the base set and all subscription, implementation and reference among those components and tenants form a subgraph. the subgraph can become large and complicate when the numbers of tenants and components are huge. therefore, key words based search engine such as solr and elastic search can be introduced when searching tenant and component candidates to find augmenting information. in addition, graph databases such as neo4j can be used to save subgraph information of the base set. in realtime environment, the time of computation must be short. hence, well-establised realtime big data framework such as apache kafka and storm can be integrated.



this paper inherits those approaches proposed by tsai in[42,24,43] to build application templates. when tenants or sub-tenants build application templates, the key words of those templates can be indexed by both elastic search and solr. by combining the relevance algorithm of elastic search and solr with components' rank discussed in section 4.2,



this paper proposed a tenant centric sta to assist tenants to rapidly and easily build and publish customized components and data. to make use of public wisdom, crowdsourcing is introduced to be the core of sta component development life cycle. in addition, static and dynamic models were developed to rank tenants and components. furthermore, a ranking architecture is presented to handle the cases when the number of tenants and components becomes huge. finally, experiments were conducted to demonstrate that the static model, dynamic model and rank computation architecture.. the results showed that they work as expected.



r. mietzner, a. metzger, f. leymann, k. pohl, variability modeling to support customization and deployment of multi-tenant-aware software as a service applications, in: proceedings of the 2009 icse workshop on principles of engineering service oriented systems, ieee computer society, 2009, pp. 18e25.



yinong chen received his ph.d. from the university of karlsruhe(kit), germany, in 1993. he was a postdoctoral research fellow at kit in 1993 and at the laasecnrs, france in 1994. from 1994 to 2000, he was with the wits university at johannesburg, south africa. he was the funding director of the highly dependable system research program at the university and a rated research fellow at south african national science foundation. dr. chen joined arizona state university in 2001. he is a senior lecturer, a ph.d. student advisor in the computer engineering program, the director of the internet of things and robotics education laboratory, and an honors faculty in the barrett honors college of the university. dr. chen is an area editor of the elsevier journal: simulation modeling practice and theory, an associate editor of the international journal of simulation and process modelling, and an editorial board member of the journal of systems& software. dr. chen's



