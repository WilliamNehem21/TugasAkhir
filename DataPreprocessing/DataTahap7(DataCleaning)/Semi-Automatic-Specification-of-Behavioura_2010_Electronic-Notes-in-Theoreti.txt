mismatches may appear at different interoperability levels that are usually distinguished in interface description languages: signature level(operation names and types), behavioural level(interaction protocols), quality of service level(nonfunctional properties such as security or efficiency), and semantic or conceptual level(functional specification of what the service actually does). recently, many academic approaches and industrial platforms have integrated behavioural descriptions in interface models and programming languages such as bpel or windows workflow foundations(.net 3.0) in the context of web services. indeed, the behavioural interoperability level is essential, because even if services match from a signature point of view, their composition can lead to erroneous behaviours or deadlock situations if the designer is not aware of their execution flows, and does not take them into account while building a new system.



the rest of this paper is structured as follows: section 2 presents our service model and contract specification language, as well as a case study which will be used to illustrate the different issues introduced throughout the remaining sections. section 3 first describes the automatic contract generation algorithm that we use in our approach, and then presents how it is extended with an interactive environment for semi-automatic contract specification. section 4 presents some experimental results that we used to assess the benefits of our approach. finally, section 5 reviews related work, and section 6 draws up some conclusions.



this formal model has been chosen because it is simple, graphical, and it can be easily derived from existing implementation languages(see for instance[13,18,12] where such abstractions for web services were used for verification, composition or adaptation purposes). for space reasons, in the rest of the paper, we will describe service interfaces only with their stss. signatures will be left implicit, yet they can be inferred from the typing of arguments(made explicit here) in sts labels.



this section first presents our automatic generation process for adaptation contracts. although this process is capable of generating correct contracts from the behavioural point of view, it cannot control the semantic constraints present on service interfaces. hence, in the second part of this section we present a semi-automatic approach to contract specification as a solution to this problem. rather than pursuing a fully automated approach by making use of semantic technologies(which may not be enough to infer complete interface operation semantics and their relations), our solution is based on extending our automatic generation process with an interactive contract specification environment that helps in customizing and constraining automatically generated solutions.



the heuristic function(see for more details) is based on the direction of the operations and the matching between their arguments. it represents a measure of the suitability of the contract for service adaptation since it ranks first those contracts which synchronize compatible operations and avoid incompatible branches of the service behaviour. this function imposes a total order among the contracts and those which assume the minimum number of mismatches, i.e., contracts where every operation corresponds to another and all the parameters match, are placed first.



provide fully automated techniques:(i) simulation. our environment implements an algorithm able to determine how the different behavioural interfaces evolve stepby-step as different vectors in the contract are executed; and(ii) trace-checking. potential system execution traces are first generated, and then traversed to detect those leading to deadlock situations or infinite loops.



the user considers the given vector valid or not. env input vectors returns a set of vectors composed by the user. env select stss returns a pair of stss. env select returns a set of vectors selected from a set of contracts. gen contracts(detailed in algorithm 1) receives a pair of service stss and a partial contract that will be used as restrictions(may be empty), and returns different contracts connecting the interfaces. env edit v lt s receives the current vlts, and returns an edited version, and the new active vlts state selected by the user. env edit vectors receives a set of vectors, and returns its edited version.



in order to assess the benefits of our approach to contract specification in terms of development effort and contract accuracy, we conducted an experimental study with the help of a group of volunteers who were divided in three categories(expert, average, novice) according to their expertise and familiarity with behavioural interfaces and software composition. the tests consisted in handing over to the volunteers adaptation problems which included the graphical description of the behavioural interfaces to be reused in the composition and a short specification in natural language of what was the intended functionality of the system. since we measure user productivity in our experiments, the automatic approach as an independent tool is left out of our study. the three different approaches for contract specification included in the experiments were:(i) manual contract specification(m), where the user had to write down the contract without further assistance;(ii) interactive contract specification(i), where volunteers made use of our interactive environment; and(iii) semi-automatic contract specification(a+i), where the user specified the contract using the approach presented in this paper.



happened in the case of time, in problems where multiple small services have to be adapted, this improvement is lost since the user must modify or create additional bindings to integrate all the pairwise bindings returned by the automatic approach. it is worth observing that in the case of online-med-003, the general trend between the interactive and the semi-automatic approach is reversed since users always solved the problem correctly in the first attempt using the interactive approach but, in the case of the semi-automatic approach, they need to modify two bindings on the contract returned by the automatic approach to integrate the third service of the example. in easyrest-005, the semi-automatic approach hardly improves(5.3%) the result of interactive specification since the problem contains two main interfaces



automatic contract specification. the authors of outlined a methodology for the automatic generation of adaptors capable of solving behavioural mismatches between bpel processes. in their adaptation methodology they use yawl as an intermediate workflow language. once the adaptor workflow is generated, they use lock analysis techniques to check if a full adaptor has been generated or only a partial one(some interaction scenarios cannot be resolved). they solve protocol incompatibilities but their approach does not address signature mismatch since they assume same operation names(and arguments) among the services. in, the authors address the enforcement of certain behavioural properties(namely liveness and safety properties expressed as ltl properties) out of a set of already implemented components. starting from the specification with mscs of the components to be assembled and of the properties that the resulting system should verify, they automatically derive deadlock-free adaptor glue code for the set of components in order to obtain a property-satisfying system. however, although this approach enables a precise specification of the desirable behaviour of the system, it works by pruning branches of the behaviour which are incompatible or do not satisfy the specified properties. hence, the range of situations where mismatch can be reconciled is limited compared to other approaches.



