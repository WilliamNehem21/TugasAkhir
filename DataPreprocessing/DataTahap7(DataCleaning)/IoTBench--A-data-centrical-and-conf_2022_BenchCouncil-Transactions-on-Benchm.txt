the rest of this paper is organized as follows. section 2 presents the related works. section 3 describes the iotbench design and implementation. section 4 shows the experiment settings. section 5 provides the analysis of the experimental results. section 6 draws the conclusions and introduces future works.



coremark was developed by shay gal-on of eembc in 2009 to replace dhrystone as the industry standard. coremark has become popular, and its features provide a strong competitive advantage. first, its code is small, easy to understand, and has good portability to ensure it runs on all platforms. second, coremark introduces data that cannot be pre-computed at compile time to avoid code elimination due to compilation optimization, making all computations driven by values provided at runtime. third, coremark provides rules on how to run the code and a uniform reporting format to facilitate inter-processor performance comparisons.



iotbench is comprised of list processing, matrix processing, and convolution. list processing is a kind of basic operator which is widely used in iot scenarios. when the sensor receives the data, data cleaning and preprocessing are often performed first, and then some simple statistical analysis is carried out. in this process, search and sorting based on lists are widely used. typical iot scenarios, e.g., smart cities, smart homes, smartphones, and smart medical care, involve tasks such as voice control, image processing, text processing, and face recognition. those tasks heavily depend on machine learning and deep learning. as a result, we selected the most basic operators of machine learning and deep learning, namely convolution and matrix processing.



data. the processed image is two-dimensional data in computer vision and image processing scenarios. the processed data is threedimensional in medical imaging, video processing, and other scenarios. different iot scenarios also deal with different data types. for example, in order to save computing and storage resources, ai inference on end devices often compromises between machine precision and prediction accuracy; that is, low precision, such as int, could be used instead of high precision, such as float, for calculation. similarly, the scale of data generated in different scenarios is different. for example, wearable devices need to monitor human body data in real time, which will generate large-scale data.



list sort is realized by merge sort and can sort the list based on value or index. merge sort is implemented in a non-recursive way. first, every two elements in the list are divided into a group for sorting. after the group is in order, every four elements in the list are divided into a group for sorting. expand the range of sorting to twice the present size after sorting each time until it reaches the size of the whole list.



gem5 simulator is a modular simulation platform for computer system architecture research, including system-level architecture and processor micro-architecture, which has been widely used in academia, industry, and teaching. gem5 was originally formed by the merger of m5 and gem, where m5 mainly studies cpu simulation, while gem mainly studies memory systems. gem5 aims to create a community tool focused on architecture modeling, with flexible modeling and wide availability.



we evaluate iotbench based on gem5 simulator. we compare two common instruction set architectures(isa) in iot systems, arm and risc-v. in the aarch64 execution state, the a64 instruction set is used, which is a fixed-length 32-bit instruction set. we use rv64gc,



we chose arm and risc-v because they are mainstream isas used in iot. also, in-order and out-of-order are two typical architectures of processors. in addition, we set the cache size according to some commercial processor manufacturers like sifive. these settings are implemented through the command line according to the documentation of gem5.



