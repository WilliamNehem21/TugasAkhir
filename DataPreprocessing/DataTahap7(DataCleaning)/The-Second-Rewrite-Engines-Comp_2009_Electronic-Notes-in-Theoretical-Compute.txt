the second rewrite engines competition(rec) was celebrated as part of the 7th workshop on rewriting logic and its applications(wrla 2008). in this edition of the competition participated five systems, namely asf+sdf, maude, stratego/xt, termware, and tom. we explain here how the competition was organized and conducted, and present its main results and conclusions.



the main goal of the first rewrite engines competition was to explore the viability of such competition, and to evaluate the interest from the community in it. they started rolling the ball, and given the interest shown we decided to go on. in the second edition we have gathered more systems and a bigger set of problems. we will present in this paper its main results, some conclusions and future challenges. the first competition focused on efficiency, specifically speed, memory management and built-ins use. there were only two participants, asf+sdf, represented by mark van den brand, and maude, represented by steven eker. for the competition, a number of test examples were compiled, all of them using features supported by both systems. the examples were written in a mathematical and intuitive notation, and then translated, by hand, by an independent researcher(the developers helped and revised the specifications to make sure that the best code was written



once we had settled on the selection of engines, we opened a discussion on the way the competition should take place. as in the first edition, the participating systems were hard to compare. we had compilers and interpreters, we had general purpose engines and others more specific,... asf+sdf is very good at parsing; asf+sdf, stratego, and tom are very good at program transformation; maude is good at rewriting modulo and has a powerful formal environment; tom is an extension of java, and termware is a rule processing engine intended for embedding into java applications; etc.



we selected a bunch of tiny and small problems, organized in four categories(unconditional rewriting, conditional rewriting, rewriting modulo, and context-sensitive rewriting/rewriting with local strategies). the various categories include many classical rewriting problems for their class of rewriting systems, e.g.: the trs category includes computation of fibonacci and factorial numbers; the crts category includes towers of hanoi and merge/quick/bubblesort; the modulo category includes specifications of a 3-value logic and a permutations calculation; and the cs category includes the sieve of eratosthenes. most of these tests were used in the first competition.



one suggested approach was to use non-trivial examples. small programs or even complex problems, like a small theorem prover, an exploration of a search space, a transformation of xml(or a tree), etc. it was not clear though whether this would evaluate the systems or the application developers. time was also a major concern.



given the capabilities of some of the engines involved in the definition of languages and transformations, we came up with the idea to define a very simple rewriting language, which we called rec, in which all the problems were written. then, as an additional, mid-size problem in the competition, we proposed writing programs transforming the problems in this rec syntax to the syntax of the corresponding tools. once we have this program running, handling the other small programs should be simple. for those systems in which this was not easily doable, we still have the possibility of writing scripts or programs in other languages to get the codes to execute. of course, we always have the option of doing it by hand. in fact, we wanted to have the option of providing alternative versions of the specifications for those cases in which an optimized version was possible. the rec language and the problems proposed are relatively simple, and do not assume any built-in or other features that could improve the specifications, like fancy syntactic facilities, memoization, default rules for handling untreated cases, etc. an optimized version of the problems, using any advanced feature provided by a system, could additionally be provided.



each of the participants was asked to build a program transforming the problems in this rec syntax to the language of their corresponding tools. however, not all of them were able to make it. only the maude, stratego/xt and tom representatives provided the translators for their systems. the lack of time was with no doubt responsible for not having translators for the others. we are sure that it can be done, and that with some more time it would have been. next time perhaps.



we thought that by comparing the translators provided, we could draw conclusions about their complexity, development time, and efficiency doing the transformations. however, the approaches followed in maude, stratego/xt and tom to implement the rec translators were very different. while in maude a programming environment was built, able to read rec programs and commands and give outputs, stratego/xt and tom representatives built programs that transformed the original programs and commands, and were later loaded and executed. as such, we were not able to draw such conclusions from the translators themselves: the translators were implemented by experts in each of the systems, in separated locations, and without a clear previous criterion. however, we must say that the facilities provided by the three systems, for this kind of applications, is quite good, and that the development times were small. regarding parsing, we must say that asf+sdf and stratego/xt are very good at defining syntax of languages, and stratego/xt did a very good job in the competition. tom and maude also, although they presented a few limitations at the lexical level: tems, general-purpose systems and specific systems, etc. it is commonly accepted that the performance difference between a compiler and an interpreter may be in an order of magnitude, but it is not easy to measure the other circumstances. moreover, although we have tried to consider problems not handled by all the systems, so that some of the capabilities not in the intersection could be shown, much more needs to be done. we have shown some of the capabilities for defining programming languages, and for transforming their programs. we cannot give any conclusion on this other than what has already been said in section 3.



in, some remarks were given by s. eker and m. van den brand explaining the results of maude and asf+sdf in the first engines competition. taking into consideration the increased scope of the current edition of the competition, and the heterogeneity of the systems involved, we cannot offer an in-depth analysis of all the results. instead, we limit ourselves to highlight some of the them.



since we do not have asf+sdf versions of the mergesort and quicksort problems, and the stratego/xt developers did not optimize their codes, no conclusion can be given from the results for these problems, but notice how the optimizations introduced in the maude code allows it to outperform the other systems. this was not the case when considering the automatically generated ones, were the tom compiler is much faster. the stratego/xt system seems to have some problems handling these tests.



