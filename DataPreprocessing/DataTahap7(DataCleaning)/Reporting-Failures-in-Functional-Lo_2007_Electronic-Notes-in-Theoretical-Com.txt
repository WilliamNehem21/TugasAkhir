functional logic languages(see for a survey) integrate the most important features of functional and logic languages to provide a variety of programming concepts to the programmer. for instance, the concepts of demand-driven evaluation, higher-order functions, and polymorphic typing from functional programming are combined with logic programming features like computing with partial information(logic variables), constraint solving, and nondeterministic search for solutions. this combination, supported by optimal evaluation strategies and new design patterns, leads to better abstractions in application programs such as implementing graphical user interfaces or programming dynamic web pages[21,23].



since functional logic languages, like curry[19,28] or toy, support both functional and logic programming styles, functional logic programs often contain parts that are evaluated in a purely deterministic manner and other parts where search for solutions is involved. these parts are sometimes combined by encapsulating search[10,27] so that the search results are processed by a deterministic part of the program. thus, computing with failure is a typical programming technique in nondeterministic computations whereas a failure in the deterministic parts is a programming error in most cases. in the latter situation, the programmer is interested to see the failed function call as well as the context of the failure in order to analyze its reason.



functional logic programs into prolog programs in order to exploit the implementation technology available for prolog. actually, there are various approaches to implement functional logic languages with demand-driven evaluation strategies in prolog(e.g.,[2,4,14,18,29,30]). since modern functional logic languages are based on the non-strict lazy evaluation of functions, the main challenge of prologbased implementations are efficient techniques to obtain this behavior. since the computation to a head normal form(i.e., a constructor-rooted term or a variable) is the central task of lazy evaluation, a common idea of such implementations is the translation of source operations into predicates that compute only the head normal form of a call to this operation. thus, an n-ary operation could be translated into a predicate with n+ 1 arguments where the last argument contains the head normal form of the evaluated call. for instance, the list concatenation conc defined in example 2.1 and the function head defined in section 1 can be translated into the following prolog predicates:



thus, failure puts its argument into a list which will later be stepwise extended to the list of all failed function calls from the main expression to the innermost failed call. the function failure is explicitly used whenever some function call might fail due to missing pattern combinations. 5 for instance, the operation head is not defined on empty lists. therefore, we complete the definition of head with a call to failure in case of an empty list as argument so that we obtain the following extended definition of the predicate head_1:



note that all predicates implementing pattern matching in source programs can be automatically completed in this way due to the typed nature of the source language curry. 6 however, this code contains a slight problem. since curry is a functional logic language, head can be also called with a logic variable as argument. in the new implementation, the logic variable can be bound to[x|xs] as well as to[]. in the latter case, failure is called to report a failure although this was not present in the original program.



as mentioned above, fail is a new constructor to pass the information about failing computations. therefore, it is a new value that must be considered in all pattern matchings, i.e., if the actual argument is a fail value, it is directly returned to the caller. thus, we obtain the following final code that implements the pattern matching of head:



note that all pattern matching predicates must be extended by a fail clause. however, the varcut clause needs only be inserted in case of partially defined functions. our extended translation of pattern matching for failure reporting causes only a slight increase in the code size but has no negative influence on the execution of these predicates. thus, we can compile all curry modules in this extended way independent of the fact whether we want to report failures or not. this property is important to support separate compilation, e.g., usually system libraries cannot be recompiled by individual users of an installed curry system. all the logic about the treatment of fail values is contained in the implementation of the predefined operation failure and hnf clauses which we discuss next.



checkfailvalue but does not introduce new choice points. hence, this scheme is compatible with the execution of large applications. the predicate checkfailvalue checks whether its second argument is a fail value. if this is the case, it extends the argument by the current function call which is passed as the first argument, otherwise it just returns the second argument:



enter an interactive mode for failure tracing. this mode is useful if the complete trace is too large to show it on a screen. in this mode the programmer can explore different regions of the complete trace, show calls with arguments up to some depth(useful for large argument terms) etc.



our implementation scheme causes only a small overhead in case of non-failing computations and has a behavior substantially different from the standard execution only if a failure occurs. although the returned structure can be large if considered as a term, it fits well into main memory even for larger applications since most parts of the structure(in particular, the arguments of the function calls) are already created in the heap when the failure occurs. thus, our implementation is a viable and more generally applicable alternative than failure reporting based on backtracking(section 4.2) or tracing the complete execution[9,11,15].



as mentioned at the beginning, computing with failures is a typical programming technique in functional logic programs. however, in practical applications one has to restrict the search for solutions in order to avoid a nondeterministic behavior of the entire program in i/o operations(such a behavior is considered as a run-time error in curry). thus, the programmer usually encapsulate nondeterministic search by specific search operators that return the solutions to some constraint[10,27]. since reporting failures is usually not intended in these parts of the programs, failure reporting is disabled during encapsulated search(which is controlled by a simple flag in the run-time system), i.e., the predicate failure always fails inside an encapsulated search. if the programmer is still interested to see failures in these parts of the program, he can just execute these parts at the top-level of pakcs without the search operators.



for future work, it might be interesting to explore whether it is possible to generate more structural information in case of errors. since the structure of the call stack is oriented towards the lazy evaluation of expressions, the order of calls might not be the best one for presentation to the programmer. further practical experience is necessary to develop appropriate presentation structures.



