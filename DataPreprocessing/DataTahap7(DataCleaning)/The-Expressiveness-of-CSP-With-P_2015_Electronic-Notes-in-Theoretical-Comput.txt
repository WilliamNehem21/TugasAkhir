positive: some other process can perform a specific action. this other process is determined from the syntax of the process p whose transitions we are calculating. in our setting these other processes are, except in the case of recursion, arguments of the operator whose semantics we are defining.



in any other case we do need to record the state that the process moves into. this will always be a piece of syntax with place-holders for the active and inactive arguments. the form of this syntax has to be restricted so as to prevent either the cloning or suspension of the active arguments of the original operator. the syntax can, however, do what it likes with the inactive arguments, and discard any argument it wishes.



theorem 4.1 suppose the operator f q(p) is pri-csp-like together with all other operators reachable(transitively) through the t third components of its combinators. then for any arguments p and q, f q(p) is expressible in pri-csp in the sense that the simulation is strongly bisimilar to f q(p).



as in[16,15], our proof is to construct the(pri-)csp implementation. this is even more complex than the one without negative premises. for the issues in common with the earlier result, the constructions we use have a lot in common, though we do find several simplifications.



suppose for the moment that no combinator has both positive and negative premises for the same argument. then we can get the argument process if necessary to contribute one or other to the firing of the combinator. we know how to achieve this for positive ones. for negative premises we can use priority to deliver an event just when some set of actions is not possible.



there are two ways of handling the activation of inactive arguments: one each is described in and. the first dynamically generates new argument processes each time one is activated. the second is possible where the overall number of active arguments has an upper bound, and works by recycling them: letting the zombies created by turning arguments off be reborn in a new form.



