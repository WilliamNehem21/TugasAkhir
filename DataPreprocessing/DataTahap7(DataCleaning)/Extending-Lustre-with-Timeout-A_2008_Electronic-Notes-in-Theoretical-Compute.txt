this paper describes an extension to lustre to support the analysis of globally asynchronous, locally synchronous(gals) architectures. this extension consists of constructs for directly specifying the timeout automata used to describe asynchronous communication between processes represented by lustre nodes. it is implemented using an extensible language framework based on attribute grammars that allows such extensions to be modularly defined so that they may be more easily composed with other language extensions.



there are many more domain-specific features that would make lustre easier to use in new domains. for example, lustre has been used for the analysis and code generation[5,6] of gals architectures. our interests here are in using lustre to specify and analyze(but not generate code from) the behavior of gals architectures. previous explorations of this idea, such as, assume that users manually construct a scheduler node and use it to manage the clocks of all of the asynchronous processes in the model. however, a scheduler could be automatically derived using a language extension, given the rates and drift of the asynchronous processes in the model. to support this process, we add to lustre a timeout condact construct that defines the behavior of an asynchronous process within the architecture as follows:



this construct(defined in section 2) specifies that node channel representing a periodic process within the architecture is to be executed every rate milliseconds subject to clock drift in the range min drift..max drift. like a condact expression, if the node does not evaluate, then the result of the expression is the value from the most recent evaluation, and before the first evaluation, the values init a and init b are used. using this construct, a scheduler(implemented in the kernel lustre language) can be automatically derived.



ditionally high cost of language development. we proposed an extensible language framework for lustre based on attribute grammars as a possible alternative approach to language development that satisfies the two criteria mentioned above. this approach is used to implement timeout automata as language constructs in lustre. the primary contributions of this paper are the specification and implementation of timeout automata as first class language constructs in lustre. section 2 describes the gals approach to development and defines the timeout automata construct. section 3 describes some aspects of the implementation of the timeout automata as a language extension in our extensible languages approach. section 4 discusses related work and concludes.



the fgs system has two physical sides corresponding to the left and right sides of the aircraft. these provide redundant implementations that communicate over a cross-channel bus. normally, only one fgs instance(the pilot flying side) is active, with the other fgs instance operating as a silent, hot spare. a transfer switch button on the flight control panel(fcp) can be used to toggle the pilot flying side. in some critical flight modes, both sides are active and independently generate guidance values for the autopilot, so that the autopilot can verify that they agree within a predefined tolerance value. 5



this construct specifies that node node representing a periodic process within the architecture is to be executed every rate milliseconds subject to clock drift in the range min drift..max drift. like a condact expression, if the node does not evaluate, then the result of the expression is the value from the most recent evaluation, and before the first evaluation of the node, the initial values init vals are used. it is assumed(and checked by the compiler) that timeout condact expressions are not nested within other clocked expressions; this matches the expectation within gals systems in that the asynchrony occurs at the global level and synchronous clocking mechanisms are local to one of the modeled processes.



assert(((init_time_1>= 0.0)&&(init_time_1<=(100.0+ 1)))); assert(((drift_2<= 5)&&(drift_2>=-5))); assert(((init_time_2>= 0.0)&&(init_time_2<=(20.0+ 5)))); assert(((drift_3<= 1)&&(drift_3>=-1))); assert(((init_time_3>= 0.0)&&(init_time_3<=(100.0+ 1)))); assert(((drift_4<= 5)&&(drift_4>=-5))); assert(((init_time_4>= 0.0)&&(init_time_4<=(20.0+ 5))));



although tmocondactexpr explicitly defines some attributes, it does not do so for attributes such as ctrans(or attributes for translating to the input languages of different model checkers). these attributes are implicitly defined using forwarding through translation to a condact(condactexpr) in the host language by using the forwards to clause. when a tmocondactexpr node in the ast is queried for an attribute that is not explicitly defined by an attribute definition, it forwards that query to the forwards-to construct. the value defined there is returned as the value of that attribute for the timeout condact. thus, the value of ctrans on a timeout condact is the value of the ctrans attribute on the generated(translatedto) condact construct. therefore, all back-end tools only see the generated condact calls while lustre programmers see the timeout condact calls they write.



our initial efforts in extensible languages were in the domain of programming languages. we have built an extensible specification of java 1.4 and specified a number of non-trivial language extensions. one extension embeds the database query language sql into java so that queries can be written naturally and syntax and type errors in sql queries can be detected at compile-time, instead of run-time, as is the case in library-based approaches.



there have been many other efforts to extend lustre with new language features. many of these features can also be implemented by translation to the a kernel lustre language. for example, recent work to add state machines to lustre translates the state machine constructs into a kernel lustre language and the addition of modules and generics proposed for lustre v6.



more generally, several approaches have been described for extending languages with new features. macros systems(lexical, syntactic, hygienic, etc) do allow new languages constructs to be specified but they lack an effective means for performing the static analysis used to, for example, generate domain specific error messages. note that some modern macro systems(e.g. however do a some limited facilities for error processing. object-oriented frameworks, such as polyglot, have also been proposed for building extensible languages, but they do not support the automatic composition of language extensions that is provided by the attribute grammar-based approach.



