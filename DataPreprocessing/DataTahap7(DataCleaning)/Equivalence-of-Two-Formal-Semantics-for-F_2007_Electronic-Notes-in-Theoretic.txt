a distinctive feature of modern functional logic languages like toy or curry is the possibility of programming non-strict and non-deterministic functions with call-time choice semantics. for almost ten years the crwl framework[6,7] has been the only formal setting covering all these semantic aspects. but recently an alternative proposal has appeared, focusing more on operational aspects. in this work we investigate the relation between both approaches, which is far from being obvious due to the wide gap between both descriptions, even at syntactical level.



the rest of the paper is organized as follows. sections 2 and 3 present the essentials of crwl and flc needed to relate them. section 4 sets some restrictions assumed in our work and gives an overview of the structure of our results. section 5 relates crwl to crwlf lc, a new intermediate formal description introduced as a bridge between crwl and flc. section 6 is the main part of the work and studies the relation between crwlf lc and flc. section 7 gives some conclusions.



the following algorithm performs it. it proceeds with each function f defined in the program, and works on a set of program rules(initially pf, the whole set of rules for f) and a linear call-pattern f(t1,..., tn)(initially the pattern f(x1,..., xn)) which is compatible with the rules, i.e., the call-pattern subsumes the left-hand side of all the rules.



as we have pointed out in section 4 one mayor difference of flc with respect to crwl it that the first one only provides head normal forms for the expressions to reduce, while crwl allows to obtain any approximation to the denotation of such expressions. nevertheless flc can be enforced to provide a normal form for an expression by introducing an auxiliary function in the program. this is better seen with an example. consider again the program of example 2 and the expression heads(repeat(coin)). for checking if this expression(the corresponding normalized one) is reducible to the normal form(0, 0) in flc, we can enlarge the program with the following predicate(i.e, true-valued function):



we did not expect proofs to be easy. despite of that, we are a bit surprised by the great difficulties we have encountered, even with the imposed restrictions over expressions and programs. this suggests to look for new insights, not only at the level of the proofs but also in the sense of finding new alternative semantical descriptions of functional logic programs.



proof.[for lemma 8.4](sketch) using lemma 8.3 we know that there must be a binding for x, all that is left is ensuring that this binding never changes. the only way a binding for a variable changes is through the rule varexp, but this rule cannot be applied if e is constructor-rooted, and that is the case because e= c(y), so the binding for x remains the same.



