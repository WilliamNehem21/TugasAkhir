unfolding is a semantics-preserving program transformation technique that consists in the expansion of subexpressions of a program using their own definitions. in this paper we define two unfolding-based transformation rules that extend the classical definition of the unfolding rule(for pure logic programs) to a fuzzy logic setting. we use a fuzzy variant of prolog where each program clause can be interpreted under a different(fuzzy) logic. we adapt the concept of a computation rule, a mapping that selects the subexpression of a goal involved in a computation step, and we prove the independence of the computation rule. we also define a basic transformation system and we demonstrate its strong correctness, that is, original and transformed programs compute the same fuzzy computed answers. finally, we prove that our transformation rules always produce an improvement in the efficiency of the residual program, by reducing the length of successful fuzzy sld-derivations.



logic programming has been widely used for problem solving and knowledge representation in the past. nevertheless, traditional logic programming languages do not incorporate techniques or constructs in order to treat explicitly uncertainty and approximated reasoning. fuzzy logic provides a mathematical background for modeling uncertainty and/or vagueness. fuzzy logic relays on the concept of fuzzy set, the theory of fuzzy connectives(t-norms, t-conorms, etc.) and the extension of two-values classical predicate logic to a logic where formulas can be evaluated in the range of the[0, 1] real interval(see or for a comprehensive introduction of this subject). fuzzy sets



fuzzy logic programming is an interesting and still growing research area that agglutinates the efforts to introduce fuzzy logic into logic programming. during the last decades, several fuzzy logic programming systems have been developed, where the classical inference mechanism of sld-resolution is replaced with a fuzzy variant which is able to handle partial truth and to reason with uncertainty. most of these systems implement the fuzzy resolution principle introduced by lee in, such as the prolog-elf system, fril prolog system and the f-prolog language.



on the other hand, there is also no agreement about which fuzzy logic must be used when fuzzifying prolog. most systems use min-max logic(for modeling the conjunction and disjunction operations) but other systems just use lukasiewicz logic. other approaches are parametric with respect the interpretation of the fuzzy connectives, letting them unspecified to obtain a more general framework. recently, it has been appeared in a theoretical model for fuzzy logic programming which deals with many values implications. finally, in we find an extremely flexible scheme where, apart from introducing negation and dealing with interval-valued fuzzy sets, each clause on a given program may be interpreted with a different logic. in this paper, we



the outline of this paper is as follows. in the next section, we summarize an extension of the fuzzy prolog dialect described in. in the new extension, that we call f-prolog, each program clause can be interpreted under a different logic. section 3 presents the operational semantics of our language. moreover, in section 4, we also adapt the concept of a computation rule and we prove a result which is the fuzzy counterpart of the independence of the computation rule theorem demonstrated in. in section 5 we define two unfoldingbased transformation rules for a labeled mark variant of f-prolog whereas in section 6 we prove its main theoretical/practical properties. finally, we show our conclusions in section 7.



rule can be applied to obtain[[et1]](q,[[et2]](r1,..., rn)), the truth degree of the goal g. we need a mechanism in order to remenber that a program rule was applied in former steps, since it is necessary to distinguish when to apply[[et1]] or[et2]]. in a context grammar was introduced to solve this problem. this



as for the classical sld-resolution calculus, we assume the existence of a fixed selection function, also called fuzzy computation rule, deciding, for a given goal, which is the selected lf-expression to be exploited in the next fuzzy sld-resolution step. for instance, when building the f-derivation shown in example 3.3, we have used a computation rule similar to the left to right selection rule of prolog but delaying the application of the[[et1]] and[[et2]] resolution rules until all atoms have been resolved. given a fuzzy computation rule r, we say that a fuzzy sld-derivation is via r if the selected lf-expression in every step is obtained by the application of the mapping r to the corresponding goal in that step. in the following section, we stablish in our fuzzy setting the independence of the computation rule proved in for the pure logic programming case.



extension of unfolding, by considering the complete set of fuzzy sld-resolution rules in definition 3.1(when performing symbolic computation steps) in order to generate all alternative clauses. however, a deeper look at definition 3.1, reveals us that only rules 1 and 2 reproduce the essence of classical logic programming by exploiting atoms and generating unifiers and, in this sense, they are more appropriate to be used during the unfolding process to simulate the original definition. on the other hand, rules 3 and 4 neither reduce atoms nor produce unifiers, but simply perform numerical manipulations to produce truth degrees(what, in some way, reflects the fuzzy component of this enriched context). therefore, rules 3 and 4 should be more appropriately used for defining other kind of transformations(as we will see in definition 5.3).



in this paper we adopt this new point of view and in the next two sections, we define a set of program transformations based on(fuzzy variants of) the classical unfolding operation for pure logic programs defined in. we also prove their strong correctness, i.e., they are sound and complete w.r.t. the semantics of fuzzy computed answers obtained by fuzzy sld-resolution.



of including marks and real numbers in the body of lf-prolog clauses(which intuitively have the same structure of any initial, intermediate or final goal appearing in fuzzy sld-derivations). this implies that any f-prolog program is also a lf-prolog program, although the contrary is not always true(i.e., the set of f-prolog programs is a proper subclass of the set of lf-prolog programs). apart from this simple fact(which, on the other hand, is mandatory to define the fuzzy sld-resolution principle) both languages share the same operational semantics.



the t-norm replacement of kind 3 has never been considered in the literature, neither implicitly nor explicitly(although it was proposed as future work in), and its application is able to transform a non unit program clause into a fact(i.e., a clause with empty body). observe that no other transformation has this capability, which indirectly imply that, in the best case, although programs to be transformed by this transformation must necessarily belong to the lf-prolog superclass, once transformed by t-norm replacement of kind 3, they may recover the f-prolog syntax.



derivation for g in p' that we plan to simulate by constructing a new derivation d in p. the construction of d is done by induction on the length of d', n. since the case base, i.e. n= 0, is trivial, we proceed with the general case when



now, and similarly to the previous theorem, we are going to simulate d in p' by constructing a new derivation d' using the clauses of p' and following an schema perfectly analogous to the one used in theorem 6.2, but inverting now the use of terms p and p'(and related ones). the construction of d' is done by induction on the length of d, n. since the case base,



after an inspection of the main proposals for the inclusion of fuzzy logic into a logic programming setting, we have selected an extension of the language described in, that we call lf-prolog, since we think it is the best suited to deal with the problems that may arise in the transformation process of logic programs. it is remarkable that lf-prolog is provided with a labeled mark language. inspired in, we have extended this language in order to be able to code different fuzzy logics inside the same program, which greatly enhances the expressive power of the former language. also, as an auxiliary result, we have established the independence of the fuzzy computation rule for lf-prolog programs and goals(theorem 4.4).



