many existing performance prediction approaches are based on analytical models such as queuing networks, stochatic petri nets, or stochastic process algebras. although multicore systems can be modelled with these formalisms, reality is often inaccurately reprensented by them because of hard underlying assumptions. for example, most of these formalism assume exponential distributions for execution times or only compute response times as mean values. because of the many influencing factors on performance in large enterprise systems, mean response times are often not useful. predicting response times as distribution functions can be more useful to support design decisions.



the contribution of this paper is an initial approach to include multithreaded behaviour in component-based performance predictions. we report on a first case study to validate our approach in specific situations. in the case study, we have compared predictions of our method with measurements of an implemented example system. although simple, the case study was suited to reveal more challenges for the prediction of the performance in multicore systems, such as cpu hopping and cache thrashing. we have summed up lessons learned from measuring a dual-core system and provide directions for future research.



during early development stages of a component-based software system, reasoning about the quality attributes of the system has to be based on models, since an implementation is often not or only partially available. it is an established practice in the software performance engineering community to use a design-oriented model for specification and transform it into an analysis-oriented model to predict performance attributes. the design-oriented model is often based on uml as the de-facto standard modelling language and uses extensions like the uml spt profile and self-defined semantics to include information related to performance. we follow the approach outlined above and base our design model on uml keeping in mind that component-based development usually involves several developer



to predict the response time of a service, the design model is transformed into an analytical model. we use stochastic regular expressions(sre) for this purpose and extend them with an operator for parallelism. the transformation maps the structural elements of activity charts to regular expressions. performance relevant information present in the design model, like branching probabilities, loop iteration functions, and random variables for time consumption, are passed to the corresponding elements of the resulting stochastic regular expression.



bility to each option. for each loop, a probability mass functions characterises its number of iterations. the new operator parallel extends the usual regular expressions to model the parallel execution of two independent tasks. it can be interpreted as the forking of two threads or processes and their joining. for sake of simplicity, we omit synchronisation mechanisms like semaphores and monitors.



the parallel operator combines the computation times of its child nodes to optimally use the available processing resources. each child expression might itself contain concurrent parts(e.g. it can be a parallel operator itself) and can thus contain multiple computation times. the mapping of all incoming computation times to the available processing resources should be optimal meaning that the maximum of all time consumptions is minimal for all possible mappings. in other words, the execution time of the parallel expression is minimised by using as much parallelism as possible.



to sort a list of n computation times and determine the pmfs of the new random variables, we proceed as follows. for each incoming computation time xn, the new pmf is set to pn(x= t), which contains the probability that up to time t at least n tasks are computing. in the unsorted set, each random variable is specified by a pmf qn(x= t). from this pmf, the probability that the task is still computing at time t q(xn> t) is determined as well as the probability that



for the behaviour of the system, we assume that a task cannot switch the cpu. additionally, scheduling is assumed to be optimal, as tasks are immediately scheduled to free cpus. furthermore, we neglect the overhead created by task switching. so far, we do not model locking or synchronisation mechanisms, since we are focussing on the influence of the concurrent execution of independent tasks on performance. we consider only cpus of the same type and do not include other resources, such as memory, disks, or networks.



the case study described here intends to analyse the validity of the new parallel operator, and thus does not model an industry size architecture. instead, we use a rather simple architecture employing concurrency. we are planning larger case studies in the future.



by different algorithms. two computationally complex, but less memory intensive algorithms were implemented. of those algorithms, one calculated an array of prime numbers larger than a given integer(primes). the other one calculated a fractal(mandelbrot). furthermore, two algorithms were using a large amount of memory. the first algorithm generated a large array of random numbers and sorted them(sorting). the second algorithm performed a fast fourier transform on a probability mass function(fft).



we implemented the architecture and the four algorithms described in the previous section in java. the measurements discussed in the following were performed on a dual-core pentium d with 3 ghz and windows server 2003 as operating system. during measurement the provided service of the client component was called repeatedly 500 times for all scenarios, and the response times were saved as probability mass functions.



we adjusted the parameters of the algorithms(e.g. number of generated random or prime numbers) so that their response time for a single execution with one active core was about 50ms(short) or 500ms(long).we chose the following independent variables for the experiments:(a) memory intensive vs. cpu intensive algorithms,



interestingly, some of the measured execution times exactly match the predicted ones. these values are outliers and form a second peak in the distribution function of the measurements. this behaviour could be observed for completly different algorithms(mandelbrot and primes), and is thus not related to characteristics of the code. the scheduling algorithm of the operating system is a possible explanation for this behaviour. the outliers are measurements from tasks that have not been moved among the processors. in these cases, the actual execution time matches our prediction. in general, our prediction match the worst-case execution times in this scenario, and thus should nevertheless be suited to make rough estimations and support early design decisions.



coming back to the initial questions of the case study, we can state for the first question, that for algorithms with a low memory footprint, we can make accurate predictions(even if they only reflect the worst case behaviour). however, for algorithms with a high memory footprint our approach would yield inaccurate results. first, we did not include memory access in our model. thus, we would have predicted similar execution times for memory intensive algorithms as in the first scenario. as we have seen in the second scenario, the memory bus can become a bottleneck and, thus, has to be modelled for accurate predictions. second, we did not include internal information about the cpu, like cache misses or pipeline invalidations. however, we can predict the response times for the parallel execution



on the analytical side, queueing network models, stochastic petri nets, and stochastic process algebras like pepa are among the most established analytical performance prediction approaches. even though these models provide completely different formalisms for system specification, they are mostly transformed to continuous time markov chains for analysis. this is followed by a lot of well known mathematical assumptions that limit the applicability of these models. exponential distributions for time consumptions and the markov property(transition probabilities/rates depend on the current state only and are independent of the history) are the most important ones.



it utilises design models in uml provided by component developers and system architects and transforms them into an analytical model based on stochastic regular expressions. we introduce a new parallel operator to analyse multithreaded behaviour. a case study shows that the approach is able to predict accurate response times if threads do not change cpus, the scheduling is optimal, no synchronisation is necessary, and the effect of cache thrashing can be neglected.



our case study shows that the approach is still very limited in predicting multithreaded behaviour. the effects of cpu hopping and cache thrashing vastly distort the results and need to be included into our analytical model in the future. moreover, synchronisation mechanisms such as semaphors or monitors do have an important influence on the performance of a component service and have been neglected so far. larger case studies with industrial size component-based systems on multicore processors are needed to validate the approach further.



