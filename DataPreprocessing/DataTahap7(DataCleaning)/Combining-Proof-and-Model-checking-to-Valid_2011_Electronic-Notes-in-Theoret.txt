the remainder of the paper is organised as follows. after giving a motivating example in sect. 2, the b method and its tools supports are introduced in sect. 3. we formally define a generic b model of component architectures in sect. 4. this model is then instantiated to validate a particular architecture in sect. 5. to automatically verify temporal properties, section 6 introduces ftpl and gives its translation into ltl. finally, section 7 concludes before discussing related work.



b is a formal software development method used to model systems and to reason about their development. when building a b model, the principle is to express system properties which are always true after each evolution step of the model, the evolution being specified by the b operations. the verification of a model correctness is thus akin to verifying the preservation of these properties, no matter which step of evolution the system takes.



tool supports, such as b4free or atelierb 3, automatically generate proof obligations(pos) to ensure the consistency in sense of b. some of them are obvious pos whereas the other pos have to be proved interactively if it was not done fully automatically by the different provers embedded into atelierb. another tool, called prob 4, allows the user to animate b specifications for their debugging and testing. on the verification side, prob contains a constraint-based checker and a ltl bounded model-checker with particular features; both can be used to detect various errors in b specifications[18,19].



the add(subcomponent,composite) operation must establish that the both components are instantiated components, composite is a composite component(i.e. a component without parameters). moreover, subcomponent is not a sub-component of another composite nor is already used: none of its interfaces is bound or delegated. finally, the modification does not introduce a cycle into parent.



the unbinding primitive operation is specified as follows: this operation expresses as precondition that the considered interface is provided by an instantiated component. this provider must be stopped. moreover, a required interface bound with the considered interface, must exist. then, the considered interface is removed from binding.



the ftpl property presented in example 1 has been translated into the ltl formula below. this formula has been partially checked with prob in 126 milliseconds. the model checker generates 2002 atoms and 16064 transitions when the maximum number of new states is 1000.



in the fractal-based framework, the work in has defined integrity constraints on a graph-based representation of fractal, to specify the reliability of componentbased systems. unlike, our model lays down only general architectural constraints, thus providing an operational semantics to other component-based systems. on the integrity constraints side, the ftpl logic allows specifying architectural constraints more complex than architectural invariants in.



to enforce software robustness while adding adaptive behaviour, the work in proposes a formal framework for the fractal component model, named fracl. like our b-based proposal, the fracl static approach allows verifying the consistency of the application architecture. however, our proposal allows checking the model consistency and monitoring temporal properties, both fully automatically.



