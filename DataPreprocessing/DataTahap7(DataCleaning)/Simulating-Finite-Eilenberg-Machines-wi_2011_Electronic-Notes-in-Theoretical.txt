x. the set x abstracts data structures common in language theory such as tapes, counters, stacks, etc, used by automata on words, push-down automata, transducers etc. moreover binary relations give a built-in notion of non-determinism. many translations of usual computational models such as automata, transducers, realtime transducers, two-way automata, push-down automata and turing machines can be presented as eilenberg machines.



the proof of correctness uses an inductive principle based on the multiset ordering over three mutually recursive predicates. due to the subtlety of the termination argument we find necessary to formalize the simulation in a proof assistant. using the coq proof assistant and its program extension, we provide a specification of finite eilenberg machines along with mechanized proof of its termination and correctness.



first omit parameters h1, h2 and h in this definition. the function react checks whether the state is terminal and then provides an element of the stream delaying the rest of the exploration calling the function choose. this function choose performs the non-deterministic search over transitions, choosing them in the natural order induced by the list data structure. the function continue manages the backtracking mechanism and the enumeration of finite streams of relations; it always chooses to backtrack on the last pushed value in the resumption. remark that these three mutually recursive functions do not use any side effect and are written in a pure functional style completely tail-recursive using the resumption as a continuation mechanism.



the three functions ensure that arguments computed are well formed as a postcondition if arguments are well-formed as a pre-condition in the predicate h1. the predicate h2 ensures a part of the well-formedness of the list of transitions in function choose. the termination is ensured using the accessibility predicate on list of chi in the predicate h; the property wfrext is used to ensure that all recursive calls are performed with structurally less argument of h.



the formal development above used as specification language the calculus of inductive constructions, a version of higher-order logic suited for abstract mathematical development, but also for constructive reasoning about computational objects. here the sort prop is needed for logical properties, when the sort set is used for computational objects. this allows a technique of program extraction which can be evoked for extracting an actual computer program verifying the logical specification. thus, using ocaml as the target extraction language, the coq proof assistant provides mechanically the following program:



we have presented a complete specification of the finite eilenberg machines model. we have designed and formally specified a restriction of the multiset ordering. it has allowed us to implement the reactive engine simulating finite eilenberg machines into the coq logic of total functions. thanks to those formalizations we have been able to prove formally the correctness(soundness and completeness) of the reactive engine with regard to finite eilenberg machines. the reactive engine presented here has taken benefit from the program extension of coq. its definition is very close to the one presented in ocaml in the article introducing the finite eilenberg machine model.



