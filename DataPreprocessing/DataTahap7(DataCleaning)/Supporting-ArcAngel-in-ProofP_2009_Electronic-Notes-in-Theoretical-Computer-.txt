we observe that followassign(x, e) can only be applied if the program is of the form w, x:[pre, post]. the tactic robustfollowassign(x, e) above, on the other hand, may be successfully applied to specification statements that may not have x in their frame. operationally, this results in followassign(x, e) failing after the first choice skip is taken, and the execution backtracking to explore the second choice of the alternation in attempting to find a successful path of continuation.



the angelic nondeterminism embedded in the choice supports a concise and general description of many robust tactics of refinement and proof. several examples are presented in. the implicit backtracking manifests itself in the following law which is valid for arcangel(and angel):(t1| t2); t3=(t1; t3)|(t2; t3).



the ergo theorem prover, which is implemented in prolog, was extended to use angel as a tactic language. arcangel is incorporated in the refinement editor refine, which however does not provide facilities for theorem proving. in this paper, we present an implementation of arcangel in proofpower, a flexible and extensible theorem prover based on hol. it has an open architecture and has been successfully used on industrial-scale projects. proofpower also provides an embedding and formalisation of the z language. this is useful in defining a semantic



we also address several issues that led to a generalisation and in parts unification of arcangel with its kin angel, as well as the more specialised derivate arcangelc, a variant tailored for refinement in the circus language. whereas angel deals with proving general theorems, arcangel(c) are methods for constructive refinement. a by-product of this unification is a framework that fosters the development of other derivatives of angel, and we explain how we support their embedding.



the structure of the paper is as follows. in section 2 we introduce the relevant preliminary material; more specifically, we give a brief account of the syntax and semantics of arcangel, and the proofpower theorem prover. section 3 discusses the fundamental design of our implementation and its relationship to the arcangel semantics. the following section illustrates the use of the tool through an example, and in section 5 we draw our conclusions, address some aspects of extensions and generalisations, and identify future work.



the most basic tactic is law name(args); it assumes name, the law, to be a priori defined and to have parameters that are suitably instantiated by args. if name with arguments args is applicable, the application of the tactic succeeds and returns a new program, possibly generating proof obligations for the provisos of name. if, on the other hand, the law is not applicable, the tactic fails. an analogous construct exists to invoke a declared tactic. its syntax is tactic name(args) where name is the name of the tactic, and args the list of arguments passed to it.



two further unary tactics are the assertions succs t and fails t. the first terminates without changing the program(that is, behaving like skip) if t succeeds, and otherwise fails. the second terminates without changing the program if t fails, and otherwise fails. both are strict with respect to abort too.



the semantics of law name(args) is a singleton list with the refinement cell containing the transformed program and possibly additional proof obligations, or otherwise an empty list if application fails. the law definition is inferred from the law environment. similarly, tactic name(args) executes the tactic name by inferring its definition from the tactic environment.



a design objective of proofpower was to facilitate the semantic embedding of other languages. in particular, the z language has been embedded and formalised, producing the proofpower-z package and dialect. it is in essence an extension of proofpower that provides additional syntactic constructs, parsing facilities, rules, theorems and tactics specific to transforming and proving theorems about z expressions. the open architecture and flexibility of proofpower encouraged the development of several tools that promoted its use on industrial-scale projects[4,2].



to accommodate nondeterminism, which surfaces when the application of a tactic can produce more than one possible result, we have to keep track of all possible outcomes of tactic behaviours. for example, t1| t2 can have two possible outcomes if both tactics are applicable to the program. in order to determine which execution path leads to success and realise backtracking, if necessary, we have to keep track of both outcomes. we therefore characterise tactics as functions mapping refinement theorems to lists of refinement theorems. this characterisation closely resembles the semantic model of arcangel presented in section 2.1 that modelled tactics by functions mapping refinement cells to(infinite) lists of refinement cells.



for law applications via tlaw the implementation essentially carries out the steps discussed in the previous section. it has to do a bit more work, however, to substitute meta-variables occurring free in the arguments, and move implications in the conclusion of the law theorem into the assumptions to make them provisos. for laws to be applicable, they first have to be declared using the tlawdecl function. it expects the name of the law, its formal arguments as a list of typed



the tfun argument provides the body of the recursion: a function on arcangel tactics. the local constant trec is introduced as a recursively-defined value which is used to determine the result of trec. in defining trec it is vital that the recursive unfolding takes place incrementally and application of the tactic to the goal is deferred in each step. this is achieved by the function defertaceval which defers the application of one unfolding(tfun trec) to the program p.



we also provide an alternative implementation(aasolvetac atac) that evaluates all outcomes of tactic applications to a, and selects one that discharges the goal or otherwise fails if none exists. such a behaviour is faithful to the angelic interpretation of nondeterminism at the top level since the notion of success is clearly defined here as discharging the proof goal. this is also compatible with the mechanics of angel which explores all possible paths of tactic executions.



for readability, the assumptions of the theorem have been omitted. most of them carry constraints regarding the well-definedness of operator applications which were accumulated through application of the laws and monotonicity theorems. in practice, we anticipate that most of these assumptions are provable automatically without any user intervention. the remaining assumptions encapsulate the provisos of the laws. for example, we find the following assumption encoding the first proof obligation of the law, that is, the provisos of the strpost law.



when applying arcangel tactics outside the subgoal package of proofpower as above, tactic applications usually increase the number of assumptions of the generated refinement theorem. in backward proofs we use the refinement theorem to simplify a refinement goal, and in this case the assumptions contribute as additional subgoals of the proof and need to be discharged separately. fortunately, proofpower offers a lot of flexibility in implementing programming utilities and tactics to automate proofs, and for this purpose we have already developed a collection of specialised(proofpower) tactics that can automatically discharge most of the well-definedness constraints encountered so far so that the only real proof effort that has to be invested is in discharging the provisos of the laws.



tion as well as decisions made in its design, and illustrated it by virtue of an example. notably, we managed to realise a very direct translation of the arcangel semantics in which refinement cells in the semantic model are identified with refinement theorems in the implementation model. a faithful representation of partial and infinite lists was achieved through the use of lazy evaluation, and recursive arcangel tactics are directly supported through recursive ml functions on tactics. hence, the encoding of particular tactics is mostly trivial and amenable to automation.



