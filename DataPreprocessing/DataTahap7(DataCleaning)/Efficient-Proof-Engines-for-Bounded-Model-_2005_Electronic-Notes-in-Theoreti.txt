rewriting arbitrary propositional formulae to conjunctive normal form(cnf) yields a worst-case exponential blowup in formula size if the number of propositional variables is to be preserved. to avoid this, all practical verification environments take advantage of satisfiability-preserving transformations that yield linear-size encodings through introduction of a linear number of auxiliary variables[27,25,28]. the price for introducing a linear number of auxiliary variables is, however, a worst-case exponential blow-up in the size of the search tree upon backtrack search. yet, it has been observed that both causes of blow-up can often be avoided, as the davis-putnam-loveland-logemann search procedure for satisfying valuations generalizes smoothly to zero-one linear constraint systems(zolcs), which are the constraint parts of zero-one linear programs[7,29,2,16]. zero-one linear constraint systems are expressive enough to facilitate a linear-size encoding of, e.g., gate-level netlists without use of auxiliary variables.



there are various ways of doing this, all with specific strengths and weaknesses. yet all the reasonable ones share the property of featuring a plethora of structurally similar sub-formulae stemming from the iterated application of the transition relation and from the iterated continuous evolution in the k-fold unrolling. in order to exemplify this, we present here one particular form of such an unrolling which is very similar to the one used by audemard et al. for mathsat-based bmc of linear hybrid automata and by bemporad et al. for milp-based bmc of linear hybrid automata.



like all pure backtracking algorithms, the classical dpll procedure suffers from thrashing, i.e. repeated failure due to the same reason. to overcome this problem, modern sat solvers implement a technique called conflict-driven learning, which attempts to derive sufficiently general reasons for conflicts being encountered and stores them for future guidance of the search. the standard scheme traces the reason back to a small(ideally minimal) number of assignments that triggered the particular conflict, and stores this reason by adding the negation of that assignment as as clause, termed conflict clause, to the clause database. besides learning, state-of-the-art sat solvers, as the one being integrated in hysat, enhance the basic dpll procedure by sophisticated heuristics for selecting the assignment performed at decision steps[22,24], and add various algorithmic refinements, among them non-chronological backtracking[23,24], random restarts and lazy clause evaluation, to accelerate the proof search.



after each deduction phase in which no boolean conflict was encountered, the sat solver checks if new constraints have been added to the linear programm since its last evaluation. if so, the linear programming routine is called to decide the feasibility of the set of constraints residing in its database. if the linear program turns out to be inconsistent, a conflict is reported to the sat solver. otherwise the sat solver can proceed with the next decision step.



note, however, that bmc is not fully symmetric because of the initialization properties of runs(clause(v) of the translation scheme of section 3) and perhaps the verification goal. this implies that only conflict clauses inferred from facts which are independent from such asymmetric formula parts may be soundly replicated. such dependency can be traced cheaply by marking initialization/goal predicates and dominantly inheriting such marks upon all inferences, inhibiting isomorphy inference whenever a mark is encountered.



when carrying out bmc incrementally for longer and longer unrollings, the consecutive formulae passed to the solver share a large number of clauses. thus, when moving from the k-instance to the(k+ 1)-instance, we can simply conjoin the conflict clauses derived when solving k-instance to the formula for step k+ 1. however, this is only allowed for conflict clauses that were inferred from clauses which are common to both instances. we do currently decide this based on simple syntactic criteria, namely that the conflict clause was inferred purely from clauses stemming from the automaton. i.e. the inference may not involve the verification goal, which tends to become a weaker predicate on longer instances, as it usually entails reachability or recurrence. more elaborate schemes have, however, been investigated for propositional bmc in.



