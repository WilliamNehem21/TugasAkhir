in brane calculi, presented in, several operations(pino, exo, phago, mate, drip, bud) involving membranes with embedded proteins are considered and formalized in the framework of process calculi. the important difference with membrane computing is that the evolution of the system happens on the membranes and not inside the compartments(regions) delimited by them. the computational power of several brane calculi operations has been investigated in where universality has been obtained for systems using phago and exo. in these operations from brane calculi have been represented in the membrane computing framework and then studied by using tools from formal language theory.



as usual in membrane computing, a membrane is represented by a pair of square brackets,[]. to each membrane[] we associate a multiset u(over a certain alphabet v) and this is denoted by[]u. we say that the membrane is marked with u(u is called a marking). the objects of v are called proteins or, simply, objects. the contents of a membrane can consist of proteins and/or other membranes.



first we investigate ppp systems using the non-cooperative versions of the pino and of the drip rules. in this case the power of the system is still very limited: the family of the so generated sets of vectors is strictly included in the family of parikh images of context-free languages. then we will study ppp systems using only pino and drip rules; in this case the power of the system increases: one can generate now at least the family of parikh images of the languages generated by programmed grammars without appearance checking.



