bicategories have a well-known sound and complete graphical calculus[6,11] involving points, lines and regions, which we make use of almost exclusively for presenting our formalism and proving our results. the reason is that the basic axioms we impose have a direct topological interpretation which are cumbersome from an algebraic perspective, but which the graphical calculus naturally absorbs and makes trivial. why this should be is far from clear; it provides evidence of a deep relationship between topological structures and the theory of information which deserves to be explored further.



a full description of the components of these diagrams must wait for section 3, but we can summarize the basic features here. the shaded regions represent public information, and the vertices represent computational processes. lines represent computational systems which carry information: if the line borders a shaded region then the associated system carries a copy of the associated public information, but otherwise it carries private information. the dashed vertical lines, which are not a part of the mathematical formalism, imply a separation of the components involved between alice and bob which is convenient for our interpretation.



we assume that a single, isolated computational system is located at any moment at a single point in space, so that over time its history traces out a line in spacetime. in the absence of shaded regions, our diagrams are simple representations of such a scenario, with vertices representing points at which multiple systems interact. this part of our graphical formalism is the standard notation for morphisms in symmetric monoidal category. our string diagrams are valued in rel, the symmetric monoidal category of finite sets and relations. this forms the endomorphisms of the 1-element set considered as a 0-cell of 2rel. in this way the ordinary string diagram calculus for rel embeds into our surface diagram calculus for 2rel in a natural fashion. we will interpret an object of rel as representing a classical computational system, with a particular finite set of internal states. morphisms are arbitrary nondeterministic computational dynamics, transforming states of the domain into states of the codomain.



in the first of these one region splits into two, each carrying a copy of the original public information. in the second two regions fuse to become one, which carries the same information as the initial regions in the event that the data in both initial regions is the same. otherwise, the computation halts; in this sense, this second vertex can be interpreted as the assertion that two data values compare successfully.



our formalism allows us to prove results about the protocol based on only its abstract form, and hence draw conclusions which will apply for any implementation. many of these results can be naturally interpreted as describing security properties. the generality of our results means that we can presume an attacker with arbitrary computational abilities, as long as their actions are constrained to those that can be described using our formalism(i.e. arbitrary nondeterministic processes.)



proof sketch. the result is established by construction. from a description of a space of messages, a family of one-time pads, and secure encryption and decryption procedures, a solution to(20) can be directly constructed. by theorem 4.5, the converse is also possible.



on the left, we begin with some pre-existing public information. this is the information to be communicated by the procedure. we prepare two correlated systems using a one-time pad, and then manipulate the first copy by a procedure d that depends on the value of the classical data. the result is a pair of ciphertexts. both are then consumed together by a process e, producing public information. this is successful when the result is to copy the original public information.



