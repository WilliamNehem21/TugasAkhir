on the other hand, some security properties cannot be proved to hold by mere inspection of the current state. this is the case of history-dependent properties. an example of scenario in which this happens is when in order to access a resource, a process needs to have been given prior permission to use it.



however, in the latter case, this is not possible, as errors are not a property of a single state, but of the whole computation. the most natural way of performing the necessary trace analysis is by somehow remembering along the computation the information that is needed for the characterization of the considered kind of error, tagging the processes with this information. in the previous papers on the subject, such as or, the corresponding enriched semantics is defined in an ad hoc way, not relating it in an explicit way with the original semantics, thus making necessary specific non-reusable proofs for the corresponding relation between the original and the enriched semantics.



we propose in this paper a systematic methodology for the treatment of these errors, that begins by defining a tagged language and a unary relation on tagged processes. we will characterize such tagged languages as being quotients of the reachability tree defined by the computations of the original language. from this fact we can conclude that the property characterized by each tagged language is indeed a property of the original one. in this way, we can work in a common framework, instead of defining an ad hoc semantics for each property. in particular, we could again use a type-based analysis to guarantee that no erroneous tagged state is ever reached along the computation.



the first condition is a correctness property for tagged systems: they do not introduce new transitions, that is, all their transitions come from untagged ones. the second is a completeness condition: we have a unique tagged version for each original transition. besides, uniqueness states that we cannot separately remember different things about the same past.



