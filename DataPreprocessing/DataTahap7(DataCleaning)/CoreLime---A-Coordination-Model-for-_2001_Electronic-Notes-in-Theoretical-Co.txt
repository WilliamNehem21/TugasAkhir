lime is a middleware communication infrastructure for mobile computation that addresses both physical mobility of devices as well as logical mobility of software components by providing a rich set of primitives for local and remote operations. the original lime speci cation is surprisingly complex and tricky to implement. in this paper, we start by deconstructing the lime model to identify its core components. in a second step we attempt to reconstruct a simpler model, which we call corelime, that scales better to large and rapidly changing con gurations of agents and hosts.



traditional computational models are based on the assumption that devices as well as software components are deployed before being used and that once deployed con gurations are static. in the emerging eld of wireless computing, in which pdas or java-enabled phones can establish ad hoc network connections and application software may control its own deployment, these assumptions do not hold. instead new computational models are needed to ease the task of developing application codes in such uid environments.



in the last few years a number of theoretical models, from ambients to seal have been put forward as foundational models for mobile computation. each of these models centers around some concept of migratory computation, or mobile agent, which is used to abstract both physical and logical mobility. in practice, dealing with mobile hosts is much more challenging than with software mobility. thus mobile agent systems, such as aglets, javaseal and many others, mainly focus on providing a host execution environment along with support for logical mobility. support for physical mobility is, as of this writing, mostly lacking and the communication primitives provided in these systems are left overs from traditional static computational models. the latter is arguably the largest obstacle to success of mobile agent technologies.



designing communication mechanisms for mobile environments is a challenging task. mobile systems have markedly di erent characteristics from traditional distributed or concurrent systems. communication in a mobile system is transient and opportunistic, applications need to take advantage of available resources without assuming their continued connectivity, but considering the possibility of sudden interruptions. communication in mobile systems is also anonymous, relying on the services being o ered and not on identity of the entity providing those services.



this paper documents our attempts to understand lime and to provide a scalable implementation of its key ideas. our rst contribution is a formalization of the core concepts of the model as a process calculus. this gives us well understood starting point for reasoning about lime programs as well as a speci cation for implementers. our second contribution is the de nition of corelime, a simple and scalable basic calculus. this yields a variant of lime without some of its potentially costly features which we intend as a basis for building next generation lime implementations.





on top of the standard linda primitives, lime introduces the concept of reactions. a reaction can be viewed as a triple(t, s, p) consisting of a tuple space t, a template s and a code fragment p. the semantics of a reaction is that whenever a tuple matching s is deposited in t, the code fragment p should be run. the main di erence between the blocking rd and reactions is that all matching reactions are guaranteed to be run when a matching tuple is found. furthermore, lime speci es that reactions are atomic; in other words while p executes, no other tuples space operation may be processed. atomicity ensures that reactions always execute in a consistent state. the code of a reaction is allowed to perform tuple space operations and may thus trigger other reactions. lime executes reactions until no more reactions are enabled. to avoid deadlocks reactions are not allowed to issue blocking tuple space operations such as in or rd. by default, reactions are red once, but it is also possible to specify that a reaction be red once per tuple. continuing the previous example, the producer agent inserts new tuples only when receiving an acknowledgment from the receiver.



by default, the tuple spaces of di erent agents are disjoint and agents can not use tuple spaces to communicate. the key innovation in lime is to support a exible form of tuple space sharing referred to as transient sharing. an agent can declare that some of its tuple spaces are shared. the lime infrastructure will then look for other spaces, belonging to di erent agents, with the same name and silently merge them into a single apparently seamless space. the sharing remains in e ect as long as the agents are co-located.



the last and most ambitious part of lime is the support for federated spaces. a federated space is a transiently shared tuple space that spans several hosts. federations arise as a result of hosts issuing the engage command. hosts can leave a federation by issuing an explicit disengage command. the semantics of lime operations are not a ected by federations, it is up to the implementation to provide the same guarantees as in the single host case. this complicates the implementation and imposes some constraints on the use of lime primitives. in particular, limeimp limits strong reactions to a single host and introduces weak reactions. a weak reaction may be scoped over multiple hosts, but it adds an asynchronous step between identi cation of the tuple and execution of the reaction code.



agent is running. in this model all agent tuple spaces are modeled by a single global tuple space t. additional information attached to each tuple will let us distinguish ownership and current location of tuples. similar to limespec, agents can have multiple private tuple spaces. in the lime calculus these are represented by disjoint views over the global tuple space t. these private tuple spaces are identi ed by names, and any two private tuple spaces with the same name are considered to be transiently shared. the names used over several hosts in the system are recorded in the set x, ensuring their unicity.



processes are ranged by p and q. the rst four process primitives(inert process, parallel composition, replication and name creation) follow the asynchronous-calculus. the inert process 0 has no behavior. parallel composition of processes p j q denotes two processes executing in parallel. replication of processes! p denotes an unbounded number of copies of p executing in parallel. the restriction operator( x) p generates a fresh name x lexically scoped in process p. in our model, names are used to denote agents, hosts, tuple spaces, as well as primitive values.



output(out) is asynchronous in lime, and thus has no continuation. each output tuple hv a si is rst transformed into a lime value tuple, i.e. hv a a0 si, and added to the global space. the lime value tuple format has two agents names, a is the current agent that\owns" the tuple and a0 is the destination agent. we say that a tuple for which a 6= a0 is misplaced. this can occur only if the destination is not connected 3. the auxiliary function mkt makes a new lime value tuple. if it can not locate the destination the tuple will be misplaced otherwise the tuple will be delivered.



the second set of three rewrite rules de nes the semantics of reactions. in the lime calculus, reactions are stored in the tuple space, as distinguished tuples hidden from normal user code. thus to evaluate a reaction, we need only have a tuple space as it contains both normal data and the reactions de ned over that data. the rules are of the form where t is a tuple space and s is the multiset of tuples that are candidates to trigger a reaction. all candidates in s will be examined. when all reactions have completed executing, the new tuple space t 0 is returned. in the simplest case, if there are no candidates the global tuple space is left as is:



reaction is removed from the global tuple space. a dummy agent is created under a fresh name to run the reaction's body. once the process terminates, the resulting tuple space t 00 is used to recursively look for other reactions that are ready to re. we assume that move commands may not occur in the body of the reaction. the rule is:



in limeimp hosts joining a federation must be brought to a consistent state. this boils down to making sure that all of the weak reactions that hold over the federation be enforced for the new host. for each weak reaction, a strong reaction must be registered on the incoming host. the current engagement procedure is atomic which is awkward as it means that new hosts must be serialized and that other tuple operations are blocked while they are being added to the con guration.



the semantics of the lime calculus speci es that moves are atomic. there is no clear statement about moves in limespec. making moves atomic has pleasant properties, for instance we are guaranteed that in the following con guration the non-blocking inp will succeed.



because regardless of scheduling, the inp will always be run in an environment where agent a is connected, either from host h or host h0. in practice, this is of course not the case as there will be some time when a is in transit between hosts. thus, in lime implementations, the inp in the above program may not succeed. a simple way to model this behavior is translate every move into a two-step operation, the agent rst moves to a distinguished host which is disconnected, in the lime sense, from the every other host and then, in a second step, moves to its destination.



where agent b is assumed to be remote. if the input operation is selected rst, should the implementation wait for the input to complete before allowing the move. since this is a blocking in, the wait time is unbounded. on the other hand if it allows the agent to move then it must be ready to handle the additional complexity of messages sent from b's host while a is in transit.



and semantics of most lime operations is retained, the main restriction is that operations are scoped over the local host only. the second part of our research will be to de ne semantics for the remote operations provided in lime. for these we plan to give a translation to corelime using agent mobility to specify remote e ects. in this paper, we present corelime and hint at the translation.



we are currently working on an implementation of corelime in java. the interface of limeimp will be mostly retained with some additional constraints to enforce the local semantics of corelime. we are using the secos implementation of as an underlying tuple space engine.



the operational semantics presented in this paper resemble the ambient calculus of cardelli and gordon. however, in the ambient calculus the primitive used for reading messages is not based on pattern matching and thus communicating processes must know each other's identity. moreover, processes cannot transparently read messages located in sibling ambients.



as future work we plan to add security mechanisms to corelime. since in a mobile environment communication is anonymous, entities do not trust each other. in a real setting there are situations where features like secure channels, the possibility to authenticate communicating parties and to restrict access to resources are desirable. we will add capabilities to control access and security lters to authenticate and restrict rights. capabilities will provide granularity at the level of tuple spaces, by encapsulating secret tuple space names. legitimate users will not be given the right to distribute them, and the addition of rights will be forbidden. security lters will be wrappers around c. bryce and j. vitek. the javaseal mobile agent kernel. in d. milojevic, editor, proceedings of the 1st international symposium on agent systems and applications, third international symposium on mobile agents(asama'99), pages 176{189, palm springs, may 9{13, 1999. acm press.



