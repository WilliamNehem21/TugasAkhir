secret sharing resolves the tension between the availability and the secrecy of a secret by distributing a secret to multiple servers in such a way that it is disclosed only if some of these servers are compromised. one particular scheme is(n, t+ 1) secret sharing, defined by the operations split and reconstruct. split generates from a secret a random set of n shares, called a sharing, while reconstruct obtains the secret from any subset of a sharing with more than threshold t shares.



this first protocol assumes a benign environment. it is an asynchronous protocol that has no bound on either the server speed, the message delay, or the local clock drift. its goal is to proactively replace one sharing of a secret, collectively held by n servers, with another sharing of the same secret. a sharing is produced during one run or instance of the protocol and destroyed during the next run. to know the secret an adversary must obtain enough shares of a sharing to reconstruct it. thus, the window of vulnerability is the duration



to abstract the replication from the secret-sharing part of the protocol terms of sort aid are used to represent one or more concrete objects, which are identified by terms of sort oid. above, all is used to represent all the servers. abstract messages will be translated into messages to concrete objects by the replication meta-object.



is introduced. an a2c-map is a mapping from aid to setofoids. the messages of the protocol have associated a msgtype;a quorummap maps a msgtype to a quorum, a machineint. a resprecognizer is a set of pairs consisting of an expected response, of sort message, and a setofoids identifying those that have sent that response. a2c-map and responses-quorums depend on the parameters n and t of the system; response-recognizer is initially empty, and it is built and modified as messages move up and down.



the link adversary can eavesdrop on links, while the server adversary gets access to local information of a crashed server. since passiveserveradversary is not a subclass of activeserver it may not impersonate its victim. a server compromise is modelled by a rule that replaces the meta-tower representing the server by a passiveserveradversary object with the state of the server at the time of the crash.



this second version of the protocol assumes that a coordinator too may crash and be vulnerable to a passive server adversary. a coordinator p and a server p are regarded as processes of the same host; one is compromised if and only if the other is. under this assumption there must be at least t+ 1 coordinators, each of which may initiate a run.



the protocol is modified so that one of the competing runs succeeds in installing a sharing. only the specification of the base layer needs to be modified. servers act as coordinators, yet both roles are kept as independent as possible. a coordinator in this protocol is of the class activecoordinatorserver, a subclass of activeserver and activecoordinator. a sharing label must now identify the coordinator of the run that generated it, and sharing-label, that of the current sharing, replaces current-version-number. server has an extra attribute, finished, to store the latest finished message received, which ends a run. when a server receives a message from a coordinator of a competing run, it will forward the stored finished message in response. when a coordinator receives a finished message it aborts its run, and forwards the message to all servers. one special rule is needed to handle the case when a coordinator has ended or aborted its run and is informing itself, as a server, to end its run.



the next version of the protocol defends against active link adversaries. these can insert, modify, delete, reorder or replay messages. the most difficult against which to defend is the deletion of messages. this section sketches very briefly elements of the specification of this version.



servers-shares(conf) is the set of all shares and subshares held by active servers; adversaries-shares is the analogous set for adversaries. there are three representations for sharings, depending on whether a sharing was obtained from a split; from the refreshment process; or was installed at the end ofa run. all-secrets transforms a set of secrets by recursively recovering secrets from sharings.



the availability and secrecy correctness criteria of the apss protocol are violated if there exists some run of the protocol in which at some point the servers cannot recover the secret or the adversaries can. maude is a reflective language that supports an arbitrary number of metalevels. any specification can be meta-represented at the next metalevel, and thus manipulated from it. in particular, maude can be used to specify strategies, specifications to control the rewriting process. this section considers some of the properties of the specification of the apss protocol. it motivates and describes a strategy that exhaustively generates all computations of a specification with such properties, which can be used to formally analyze the protocol by searching for runs that violate the availability or secrecy property.



both protocols assume a benign environment in which adversaries may only access local information from crashed servers. under this assumption encryption is unnecessary. thus, the search space may be reduced somewhat by having initial states with two-meta-object towers, with no encryption metaobjects.



the behavior of the replication layer is described by four conditional rules. two consume upward-moving messages; two, downward-moving messages; and in each pair the condition of one rule is the negation of the condition of the other. thus, any message consumed by a replication meta-object determines a unique transition. the application of a replication rule may produce zero or more messages to be exported up, down or in both directions, enabling out and down transitions, with the out transitions enabling in transitions by other replication meta-objects. in an apss instantiation of the parameterized replication layer only the filter attribute may have its value changed. it is implemented as a set of tuples. an upward-moving message may add a new tuple to the filter. a downward-moving message may replace a tuple, just to change a component that is a count of downward-moving messages. since importing attributes(in and up) are multisets, and downward-moving messages may only change the value of a count, internal transitions of a meta-object are incomparable.



the availability and secrecy properties are predicates on the state of the secretsharing layer. therefore, the computation tree that needs to be explored is the one whose nodes are states of the secret-sharing layer. the transitions of the replication layer should be hidden.



given a state of the secret-sharing layer, a child in the computation tree is obtained by the application of an internal secret-sharing rule, or the immediate delivery of a message sent, which hides the replication transitions. since the replication layer is church-rosser, it is convenient to use the function meta-rewrite of the predefined module meta-level. this function takes a module m, a term t and an integer n, and uses a default, fair strategy to obtain a term t'. for n= 0, the resulting t' cannot be further rewritten. in order to provide meta-rewrite with an appropriate module for this purpose the specification is modified as described below.



some versions of the asynchronous proactive secret-sharing protocol have been described. the specification has been factored into three layers: secretsharing, replication and encryption. a general parameterized layer for the replication of messages and collection of quorums of responses was instantiated for an(n, t) instantiation of the apss protocol. a strategy that exploits the structure of the specification to reduce the search space was developed.



thousands of complete runs of length 40 are found, none shorter. since the period of vulnerability is the duration of two consecutive runs, a search tree should be at least of depth 80. thus, further ways of reducing the space search will be sought. this work was done using maude 1.0.5. continuing work will exploit the more powerful features of newer versions of maude in better analysis techniques and a more complete specification of the protocol.



