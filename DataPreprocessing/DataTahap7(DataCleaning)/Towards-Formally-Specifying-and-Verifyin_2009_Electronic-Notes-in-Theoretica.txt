we describe ongoing work in which we aim to formally specify a correctness condition for transactional memory(tm) called weakest reasonable condition(wrc), and to facilitate fully formal and machinechecked proofs that tm implementations satisfy the condition. to precisely define the wrc condition, we express it using an i/o automaton. we similarly present another condition, called prag, which is more restrictive, but more closely reflects intuition about common tm implementation techniques. we sketch a simulation proof that prag implements wrc, allowing ourselves and others to focus more pragmatically on proofs of such implementations. we are working on modeling these conditions in the pvs language so that we can construct and check such proofs precisely and mechanically. we are also working towards proving that some popular tm implementations satisfy the prag condition, starting with simple coarsegrained versions and refining them to model realistic implementations.



because tm implementations aim to hide some of the complexity of concurrent programming in system software, it is important that they be correct. we are therefore pursuing a long-term goal of developing formal and machine-checked correctness proofs for tm implementations. we hope to follow an approach that we have already used to verify a range of concurrent algorithms[2,3,5], specifying both the permitted behaviour and the behaviour of the algorithm using i/o automata(ioas), and using simulation proof techniques to show that an algorithm implements a given specification. we construct these proofs using the pvs verification system, so our proofs can be entirely machine-checked.



in defining a correctness condition for tm, we have several goals beyond providing an unambiguous and precise definition that supports formal machine-checkable proofs: the condition must make sufficient semantic guarantees to be useful to programmers using tm. it should be easy to understand and reason about, so that researchers and implementors can prove that tm implementations satisfy the condition. and it should be as permissive as possible to avoid arbitrarily excluding implementation techniques, including ones not yet invented.



in section 2 we describe i/o automata, proof techniques, tm interfaces, and notation used in the rest of the paper. sections 3 and 4 introduce the wrc correctness condition and relate it to two previous conditions. we present the prag condition in section 5, and then sketch a simulation proof that it implies the wrc condition in section 6. we briefly discuss our ongoing and future work in section 7.



most tm implementations assume a specific type of object called a read-write memory. for this reason, our prag automaton is specialised for a read-write memory. a read-write memory maps a set l of locations to a set v of values. when used by a set t of transactions, its interface is:



these actions, together with actions of internal(tm(o)), determine the behaviour of a tm system modeled this way. in sections 3 and 5, we use such models to specify two notions of correct behaviour for a tm system. in our ongoing work, we also use such automata to model tm implementations. we can then use simulation proofs to prove that one correctness condition implements another(see section 6 for a sketch of one such proof), or that a tm implementation implements a condition.



we were working towards our wrc condition to overcome what we saw as shortcomings of opacity(see below) before we became aware of vwc. at first we thought that our condition would be strictly weaker than both opacity and vwc. however, as it turns out, wrc excludes behaviours exhibited by both opacity and vwc, while capturing the best features of both. we explain below.



finally, an interesting subtlety of opacity is that it is not prefix-closed. for example, a read executed by one transaction may not be justified until later when another transaction writes the value it read. in this case, the prefix of the execution up to the read does not satisfy opacity, whereas later, when the write has occurred in a transaction that has invoked its commit operation, it can.



the interfaces and assumptions used to define vwc differ in several ways from those of wrc and opacity, which leads to significant differences in what conditions can be expressed, and what executions are allowed. vwc is defined only for the limited case of a read-write memory in which no two writes ever write the same value. furthermore, unlike the interfaces of opacity and wrc, vwc does not model transaction commit as an interval with an invocation and a response, which prevents it from allowing the flexibility of opacity and of wrc to allow executions in which a read is justified by a write of a transaction that ultimately does not commit. finally, vwc allows aborted transactions to ignore committed transactions that precede them in real time. this appears to derive from an assumption that transactions are the only means of communication, which we do not assume.



because t2 reads 0 from x, t2 must be ordered before t1, which opacity allows. however, the prag automaton must commit t1 before ok1, and therefore before t2 invokes commit. thus, when t2 executes its docommitwriter action, its validation will fail, as its read set is not consistent with the last state installed by t1. thus, prag does not allow this execution.



we believe that every execution allowed by prag is also allowed by opacity, but we have not formally proved this. it may be interesting or useful to express opacity(restricted to executions whose prefixes all satisfy opacity, of course) as an automaton, and to formally prove these relationships. however, we are more interested in identifying conditions that are useful in practice than in precise characterisations of relationships to previous conditions.



we now describe the proof. the correspondence between initial states is immediate. for the inductive part of the proof, the choice of wrc action(s) for a given action of prag is fairly straightforward. for an internal action, the prestate and the poststate of prag map to the same state of wrc, so no step is taken by wrc. for external actions other than respt(v) and respt(ok), we take the same action in wrc. for respt(v) and respt(ok), we choose a snapt action followed by the respt action itself.(although prag does not exploit the flexibility afforded by having a separate snapt action, we need a snapshot to satisfy the preconditions of the respt action, so we take one immediately before such actions.)



that the validation conditions hold for commitokt and abortedt follows from observation a) above. because the commit-index order is consistent with extorder, there is some serialisation that is consistent with both orders. furthermore, because a transaction executing the commitok action is in ect, and one executing the aborted action is not in ect, such a serialisation satisfies the appropriate validation condition for each of these actions.



we are starting with a simple version of the popular tl2 tm algorithm. this simple version, called tl2-cg, uses coarser-grained synchronisation than is consistent with current multiprocessor architectures, but allows us to illustrate some key ideas in our approach. future work includes refining tl2-cg to successively more realistic implementations, ultimately proving a realistic model of the tl2 implementation correct. we aim to make it easy to reuse parts of the proof, for example to prove variants on the algorithm, of which there are many.



one important aspect of our work is to eliminate the need to prove backward simulations, which are particularly challenging, and are necessary for many tm implementations. to this end, as in our previous work[3,5], we plan to identify one or more general intermediate automata that we can prove(using backward simulation proofs) implement prag. the idea is that we and others can then prove the correctness of a tm implementation by proving that it implements one of these intermediate automata using only forward simulation.



