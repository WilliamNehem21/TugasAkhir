b. the processor is an(almost complete) implementation of a java virtual machine in hardware. thus, refinement-based verification of the score processor begins with a formal specification of java bytecode. traditionally, b has been directed at the formal development of software systems. the use of b in hardware verification could provide a means of developing combined software/hardware systems, i.e. codesign.



the motivation for this paper is to demonstrate initial results from an ongoing collaboration between awe and sandia to model and verify the score processor using an established formal method. we choose the b method, in particular the event-b subset, for this purpose because it is a method with exceptional tool support which incorporates a dedicated refinement technique. we aim to prove that bytecodes are correctly implemented by microcode instructions.



the next section gives an overview of the event-b language and its notion of refinement. this is followed by a demonstration of our approach via an example analysis of the jvm instruction iadd. our approach is then put into context with other formal approaches, after which we draw some conclusions. we also discuss how this work could fit in with another awe-funded project to produce formally verified hardware. this would address the issue of proving correctness with respect to actual(clocked) hardware. it is hoped that the results presented here can be generalised to support the entire lifecycle of



an abstract event-b specification comprises a static part called the context, and a dynamic part called the machine. the machine has access to the context via a sees relationship. this means that all sets, constants, and their properties defined in the context are visible to the machine. to model the dynamic aspects, the machine contains a declaration of all of the state variables. the values of the variables are set up using the initialisation clause, and values can be changed via the execution of events. ultimately, we aim to prove properties of the specification, and these properties are made explicit using the invariant clause in the machine. the tool support generates the proof obligations which must be discharged to verify that the invariant is maintained. it also has interactive and automated theorem proving capabilities with which to discharge the generated proof obligations.



details in favour of a more mathematical representation. refinement is the means by which the artefacts of an implementation can be incorporated into a formal specification whilst maintaining the correct behaviour of the abstract specification. a demonstration of event-b refinement will be given in the next section.



to illustrate our approach using event-b, we present the arithmetic operation iadd which pops two numbers off the stack, adds them together, and then pushes the result on to the stack. this example presents the kind of analysis that would be undertaken for all arithmetic and logical bytecode operations because, in all cases, operands are popped off the stack and the result is pushed back onto the stack. in the interest of simplicity, we only consider the effect of the operation on the data path. for example, we do not model the program counter, nor do we consider how the instruction gets called. in addition, we assume the operands are put on the stack by other instructions that are not considered here.



in addition to stack, we have defined two further sets: bytecode and status. at this stage, only one element of bytecode is declared, namely iadd. further elements can be added via context refinement when necessary. the set status(and its two elements active and inactive) is introduced as a consequence of event-b refinement. we will see below why this set is necessary.



the variable iadd status is introduced in anticipation of refinement. this is also the reason for two events: iaddini activates the execution(but only when there are enough elements in the stack), and iadd performs the necessary state update. one could imagine an event that would capture the behaviour of iadd in one step, i.e.: without the need for a status variable. however, events with nontrivial guards and generalised substitutions such as this serve two purposes: the guard says what should hold at the beginning of an execution, and the generalised substitution says what should hold at the end. a refinement that introduces new events would force us to choose between executing the existing event first(to exercise the guard at the appropriate place), or last(to position the generalised substitution appropriately). since event-b does not allow events to be split, we are forced to define(at least) two events: one with the nontrivial guard, and another with the generalised substitution. we will say more about this when we consider the refinement itself.



ing the iadd operation into 7 pseudo-microcoded instructions. this description ignores some features of the processor, but it still incorporates many of the actual implementation details. this compromise allows us to demonstrate the refinement technique involved. by proving this lower-level model is an event-b refinement of the abstract model, we demonstrate that the low-level behaviour is faithful to the isa specification of iadd. although we only present one refinement here, the approach is similar for all bytecodes.



however, before we do this it is necessary to address a number of proof obligations that arise in the refined model. these concern the guards of the events iaddini and iadd. the theory underlying the b method dictates that the guards of refined events must be at least as strong as the guards that they refine. in the case of iaddini, we have to prove:



the most substantial body of work in this area to date has been done by panagiotis manolios. his technique for modelling and verifying hardware motivated the investigation undertaken in this paper. the general purpose theorem proving system acl2 provides the mechanical support for his approach. lisp is used as the modelling language, in which models of a similar level of abstraction to our own are constructed. in particular, instruction set architecture(isa) models and microarchitecture(ma) models are defined using lisp primitives.



in this paper we have applied event-b refinement to the verification of a java processor. in particular, we have demonstrated a proof of an example bytecode with respect to its microcoded instruction implementation. we have chosen to use event-b in this investigation because it has an off-the-shelf(and free) formal development tool with a dedicated refinement technique. hence, our proposed approach has been tailored to make full use of the tool.



