according to the interactive view of computation, communication(input/output) happens during the computation, not before or after it. this approach, distinct from either concurrency theory or the theory of computation, represents a paradigm shift that changes our understanding of what computation is and how it is modeled. interaction machines extend turing machines with interaction to capture the behavior of concurrent systems, promising to bridge these two fields.



most theory books left the restriction unstated(though implied). yet other early textbooks, usually those in non-theoretic fields, such as, explicitly broadened the notion of algorithms to include problems beyond those that can be solved by tms. two of their examples, that can supposedly be solved by an algorithm, are making potato vodka and filling a ditch with sand; driving home from work would fit right in, too.



a recent acm sigact newsletter acknowledges that of all undergraduate cs subjects, theoretical computer science has changed the least over the decades. while the practical computer scientists have long since followed the lead of and broadened the concept of algorithms beyond the computation of functions 1, theoretical computer science has retained the mathematical worldview that frames computation as function-based, and delimits our notion of a computational problem accordingly. this is true at least at the undergraduate level, despite advanced complexity theoretic work that ventures outside this worldview, such as on-line and distributed algorithms, arthur-merlin games, and interactive proofs.



while this notion is not intended to suggest an absence of control, some application contexts offer no alternative to autonomous software. in practical developments, web services, for example, now offer fundamentally new ways of doing business through a set of standardized tools, and support a serviceoriented view of distinct and independent software components interacting to provide valued functionality. in the context of such developments, agent technologies have become the primary weapons in the arsenal aimed at addressing the emergent problems, and managing the inherent complexity.



new paradigm for software development since object-orientation. the concept of an agent has found currency in a diverse range of sub-disciplines of information technology, including computer networks, software engineering, object-oriented programming, artificial intelligence, human-computer interaction, distributed and concurrent systems, mobile systems, telematics, computer-supported cooperative work, control systems, mining, decision support, information retrieval and management, and electronic commerce. because of the horizontal nature of agent technology, it is likely that the successful adoption of agent technology in these areas will have a profound, long-term impact both on the competitiveness and viability of it industries, and also on the way in which future computer systems will be conceptualized and implemented.



what is an agent? agents can be defined to be autonomous, problemsolving computational entities capable of effective operation in dynamic and open environments. agents are often deployed in environments in which they interact, and maybe cooperate, with other agents(including both people and software) that have possibly-conflicting aims. such environments are known as multi-agent systems. agents can be distinguished from objects(in the sense of object-oriented software) in that they are autonomous entities capable of exercising choice over their actions and interactions. agents cannot, therefore, be directly invoked like objects. however, they may be constructed using object technology. these notions find application in computer systems relation to several distinct aspects, considered below.



forming and managing coalitions. moreover, the adoption of agent-based approaches is increasingly influential in other domains. for example, multi-agent systems can provide faster and more effective methods of resource allocation in complex environments, such as the management of utility networks or logistics scheduling, than any human-centered approach. similarly, the use of agent systems to simulate real-world domains may provide answers to complex physical or social problems which would be otherwise unobtainable, as in the modeling of the impacts of climate change on various biological populations, or modeling the impact of public policy options on social or economic behavior. agents offer a new and often more appropriate route to the development of complex systems, especially in open and dynamic environments.



interaction is a key problem in designing large scale systems that depend on shared knowledge(and semantics) in order to support large communities of people with complex activities and goals. examples of such systems(all currently in their inception) are semantic web systems, some forms of computational grids and large multi-agent systems. despite the scale of these systems(or perhaps because it) many fundamental problems of interaction remain unresolved. let us consider seven of these below, with the aid of an abstract, idealised, conceptual model that covers this class of system.



