slicing is a program analysis technique which can be used for reducing the size of the model and avoid state explosion in model checking. in this work a static slicing technique is proposed for reducing rebeca models with respect to a property. for applying the slicing techniques, the rebeca dependence graph(rdg) is introduced. as the static slicing usually produces large slices, two other slicing-based reduction techniques, step-wise slicing and bounded slicing, are proposed as simple novel ideas. step-wise slicing first generates slices overapproximating the behavior of the original model and then refines it, and bounded slicing is based on the semantics of non-deterministic assignments in rebeca. we also propose a static slicing algorithm for deadlock detection(in absence of any particular property). the applicability of these techniques is checked by applying them to several case studies which are included in this paper. similar techniques can be applied on the other actor-based languages.



model checking is a formal verification technique for verifying concurrent systems against a number of specifications and can be used for developing more reliable systems. the main problem of model checking is the state space explosion problem and many techniques are developed to overcome this problem. these techniques include: abstract interpretation, data abstraction, predicate abstraction, slicing, partial order and symmetry reductions.



for slicing rebeca models a dependency graph should be constructed first. for this purpose we introduced a special dependency graph based on rebeca semantics. this graph is less complicated than existing dependency graphs, due to the asynchronous nature of communication, atomic execution of message servers, absence of shared variables and absence of procedure calls(hence there is no need for interference or summary edges discussed in). in addition, although rebeca is an object-based language, we should not deal with complexities of dependence graphs designed for object-oriented languages, as features like inheritance and polymorphism are not included in the language. in the case of component-based models the corresponding subgraph of each component can be saved and reused when a component appears in another model.



for computing the slice from the resulted graph, four different algorithms are presented in this paper. the first one is the traditional reachability algorithm which is used for static slicing. the second algorithm is based on a simple novel idea and is used when we want to check a model against deadlock(unlike regular slicing algorithms there is no need to specify a property here). the idea is eliminating the statements that have no effect on any other statements.



in the third slicing algorithm, step-wise slicing, an overapproximation of the original model is computed and then based on the verification result, the reduced model is refined if needed. this algorithm starts by including the property variables in the model. variables which have a direct effect on the value of the property variables, are also included in the model. these variables take a value using a nondeterministic assignment, in the reduced model. the other variables are eliminated from the model. then, the reduced model is verified and if a spurious counterexample is found, the model is refined by including more variables in it.



although the reduced model overapproximates the behavior of the original model, but the possibility of finding a spurious counter-example is reduced. the reason is that the variables are eliminated heuristically by the user(and not as an adhoc manner). however in the case of finding a spurious counter-example the model should be refined by adding more variables to it.



automatic processing: the static slicing process is completely automatic and does not involve the user in the reduction process, comparing to the compositional verification approach in which the user should make a decision in selecting a number of components. bounded slicing is applied automatically on a rebeca model which uses non-deterministic assignment for assigning value to some variables. however the user can specify more variables(with non-deterministic values) for the bounded slicing algorithm to get a smaller slice. step-wise slicing is not fully automatic in this work because the refinement process needs user interaction. but it can be improved to a fully automatic process and it is one of the future works.



property preservation: static slicing is characterized by strong property preservation. this means that satisfaction and violation of a property in the original model can be directly concluded from the reduced model. in contrast, compositional verification overapproximates the model and the violation of the property in the reduced model does not necessarily implies the violation of the property in the original model. both of the step-wise slicing and bounded slicing techniques overapproximate the model, however when bounded slicing is used, the possibility of finding spurious counter-examples is reduced.



this paper is structured as follows. the next section presents an overview of the related works. section 3 briefly introduced the rebeca language and program slicing technique. in section 4 the rebeca dependence graph is presented and in section 5 different slicing algorithms are discussed. section 6 explains the result of applying the slicing techniques to two case studies and the last section concludes the work.



static slicing has been used as a reduction technique in[1,6,21,13,2,24] for model checking purposes. in an evaluation of using this technique for model reduction is presented. the result of shows that slicing concurrent object-oriented source code provides significant reductions that are orthogonal to a number of other reduction techniques, and that slicing should always be applied due to its automation and low computational costs.



an approach named abstract slicing is presented in which is based on abstract interpretation. abstract slicing extends static slicing with predicates and constraints by using the program model as an abstract state graph, which is obtained by applying predicate abstraction to a program. for controlling the state space explosion problem, the abstract slicing is formulated in terms of symbolic model checking. in this abstraction technique, it can be determined under which conditions one statement might affect another. but for verification we may need to find out whether some condition might hold at all or not.



one of the ideas presented recently is incremental slicing. it starts with a small, minimal part of the specification and successively adds further parts until either the property under interest holds on the slice or a real counterexample is found. this technique is applied to csp-oz. the step-wise slicing technique presented in this paper uses the idea of overapproximating the behavior of the model and then refining it. however because of the different nature of the languages the way of applying the idea is different. in addition, in the technique is applied to a simple automaton(comparing to our work in which the technique is applied to the dependency graph), therefore further comparison between these two techniques is not possible.



in[11,20] a technique is proposed for slicing synchronous reactive systems by introducing a new notion of slicing. in, this technique is applied to argos language which is based on finite state machines. in the esterel language is considered which has a rich set of control constructs. the concentration of is on modeling these constructs by defining new dependencies. the main difference of our work and this technique is the actor-based and asynchronous nature of rebeca language.



rebeca is an actor-based language for modeling concurrent and distributed systems as a set of reactive objects which communicate via asynchronous message passing. a rebeca model consists of a set of reactive classes. each reactive class contains a set of state variables and a set of message servers in which the body of the message servers is executed atomically. in a rebeca model there is a set of rebecs(reactive objects) which are concurrently executed. rebecs are encapsulated reactive objects, with no shared variables. each rebec is instantiated from a reactive class and has a single thread of execution which is triggered by reading messages from an unbounded queue. each message specifies a unique method to be invoked when the message is serviced. when a message is read from the queue, its method is invoked and the message is deleted from the queue. each rebec has an initial message server, and in the initial state the queue of the rebec is empty and its statement to be executed is the first statement of the initial message server.



in, components encapsulate tightly coupled reactive objects which may have synchronous communication. the behavior of each component is like a reactive object and in the simplest case each reactive object is a component itself. in this paper we abstract from the internal synchronous communication as this is not natural behavior for actors.



in this example there exists a sender which sends a number of messages to a receiver. according to the non-deterministically chosen value of variable y, the sent message may be a new message or the previous message. after sending the last message this scenario starts over again. on the receiver side, after receiving the last message the value of a boolean variable named b is set to true. a possible property for this example is g(f(b== true)) which checks whether the last message is finally received by the receiver. the property is an ltl(linear temporal logic) formula in which g denotes globally and f denotes finally.



in general, slicing is an analysis technique which is widely used in debugging, testing, maintenance and program comprehension. program slicing, is first introduced as a decomposition technique that extracts statements relevant to a particular computation, from a program. a program slice consists of the parts of a program that potentially affect the values computed at some point of interest(referred to as a slicing criterion). in general, it is undecidable if a slice is minimal and one of the attempts of slicing algorithms is to make the computed slice more precise.



for slicing programs without procedures, a reachability algorithm is performed on the program dependence graph(pdg). the pdg mainly consists of nodes which represent the statements of a program and two types of dependence edges: control dependence edge that exists between two statement nodes if one node controls the execution of the other node. data dependence edge that exists between two statement nodes if assigning value to a variable at one statement might reach the usage of the same variable at another statement.



in slicing programs with procedures, a two phase reachability algorithm is performed on the system dependence graph(sdg). the system dependence graph is a collection of procedure dependence graphs, one for each procedure. a procedure dependence graph contains nodes representing the procedure statements and control and data dependence edges. in addition, it contains an entry node representing entry to the procedure and a set of formal-in and formal-out nodes for modeling parameter passing. in each call site there is a call node and a set of actual-in and actual-out nodes. a call edge connects a procedure call site node to the entry node of the related procedure. parameter-in edges and parameter-out edges connect the formal-in and formal-out nodes to the actual-in and actual-out nodes, respectively.



when slicing is used in model checking for model reduction purposes, the definition of a slice slightly differs from the original definition which is used in software testing, debugging and maintenance. the reason is that in model checking the slicing is applied with respect to a property instead of a particular computation in a certain location of the program. therefore the slice should be computed with respect to all of the points in which the involved variables in the property are taking a value.



message passing: putting a message in a queue is represented through an activation node. in addition an activation edge is used for connecting the activation node to the entry node of the related message server. the parameters of the messages is modeled using formal-in and actual-in nodes as well as parameter-in edges.



for each component in the model, the related subgraph can be extracted from the rdg for further reuse. this can be done by selecting the reactive classes entry nodes related to the component and finding all of the nodes reachable from them. when finding reachable nodes, all of the edges are followed, except activation and parameter-in edges going to other reactive classes.



in this section we describe slicing-based techniques which can be used for model reduction. as mentioned in the previous section, the intra-rebec data dependency edges are not transitive and precise slices can be computed by considering realizable paths. the purpose of the algorithms, presented in this section, is showing the main ideas of the slicing techniques, therefore for simplicity, we do not discuss the computation of realizable paths in these algorithms, in this paper.



the main purpose of proposing this technique is the gap exists between the traditional static slicing method and step-wise slicing. the weakness of static slicing is that it usually generates a large slice and its advantage is that it preserves the property strongly. one the other hand step-wise slicing generates small slices(at least at the first stages of the algorithm) but it overapproximates the model. additionally, it may take several rounds for getting a result, especially in large models.



in the bounded slicing technique we used the idea of non-deterministic assignments in rebeca. however this technique can be applied to any other language supporting non-determinism. a non-deterministic assignment statement is not data dependent to any other statement so there is no data dependence edge, intra-rebec dependence edge or parameter-in edge that could be followed by the slicing algorithm. thus, the algorithm is bounded by these assignments.



the proposed techniques were applied to a number of case studies. this section presents the results of reducing these case studies. the model checking is performed using modere on a computer with a 1.80 ghz cpu and 2038 mb of ram.



leader election problem(le): a node should be selected as a leader in a ring of n nodes. it is supposed that each node knows the nodes next to it only. the leader is selected through the messages sent among the nodes.



in this paper we use slicing-based techniques for reducing the rebeca models. a dependence graph named rebeca dependence graph(rdg) is introduced for modeling the asynchronous nature of rebeca. three slicing-based techniques are used to compute the slices and each of them had a different reachability algorithm for computing the slice. in addition, a technique is proposed which reduces models that should be checked against deadlock.



in future work, we planned to find the main characteristics of the models which are best reduced by applying each of these techniques. also, further investigation is ongoing to find more specializing techniques for rebeca. integrating these techniques with rebeca verifier tool set is one of the other future works.



