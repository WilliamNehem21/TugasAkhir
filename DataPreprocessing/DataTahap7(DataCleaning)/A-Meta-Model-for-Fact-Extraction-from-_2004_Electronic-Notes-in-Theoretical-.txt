fact extraction by parsing is often the first step when analyzing a software system in a reverse engineering context. essential to a fact extractor is the underlying meta-model, which specifies the elements and relations to be extracted. in this work we will introduce a meta-model for the delphi programming language. the meta-model will be compared against the dagstuhl middle model(dmm) and reasons for the development of an additional meta-model will be given. furthermore, we will report on our first experiences with a fact extractor currently under development. we evaluate our fact extractor with two software applications that were developed in the open source community. in particular we give numbers and examples to point out the capabilities and the not yet resolved open issues of our fact extractor and we will reflect our experiences made during the case studies.



reverse engineering and especially architecture recovery aim at extracting higher-level representations(e.g., the software architecture) directly from the software system(i.e., the source code) in order to support developers in assessing, maintaining, and evolving large-scale software systems. to produce such architectural views current reverse engineering tools process various artifacts available for the system under study such as source code, scenario profiles, documentation, domain information and expert knowledge.



fact extraction from source code aims at the finding pieces of information about the system(e.g., a fact is that a class is named class-1 or that functiona calls function-b). it is a fundamental step for reverse engineering techniques and often has to be performed as a first step[4,7,8,11,13]. that means, before performing any high-level reverse engineering analysis or architecture recovery activities, available information in the source code has to be extracted and aggregated in a fact base or repository. such a fact base then can be the basis for further analysis or recovery tasks.



the remainder of this position paper is structured as follows: section 2 gives a short overview about the delphi programming language and compares it against the well-known programming language c++. section 3 describes our delphi meta-model, which underlies our fact extractor. the entities and relations, which we want to extract, are presented there. the fact extractor(although still in development) is validated preliminarily with two case studies in section 4. then section 5 discusses related work by comparing our work against a language independent meta-model, namely the dagstuhl middle model. section 6 presents our future work in this area. finally, section 7 summarizes our work and draws some conclusions.



c++ has two different types of files: implementation(.c or.cpp files) and header(.h or.hpp files) files. header files specify interfaces and data structures that can be imported by other files. in delphi, there is only one type of file,.pas files, which contains sections for interface definition and an implementation, both only separated by special keywords.



in our case studies, we analyzed a model scene editor(mse) anda sql parser(sqlp) both are open source projects of the delphi community. mse is a 3d scene editor supporting povray v3.1 and other formats such as vrml and directx. it consists of 113 files and approximately 37 kloc. sqlp(version 0.01 alpha) is a string parser that is capable to parse sql statements into tokens, to change these tokens and to rebuild(modified) sql statement. it consists of 32 files containing about 7 kloc.



our fact extractor only recognizes calls to libraries and third party software when we have access to the source code of this software. there might be situations in which an entity in the source code depends somehow upon some other entity defined in a library(e.g., inheritance). this leads to a lack of information. for this reason, it is also possible that some information(elements and relations) could be missing, unless the source code of such a library is available.



the dmm does not fully support the delphi programming language, which is needed for our work. in detail, dmm supports neither namespaces(units in the delphi context) nor properties. we consider these two elements as important concepts of the delphi language, which are supported by our underlying meta-model. therefore we miss as well the distinction between application units and third-party library or system units.



since the dmm is aimed to be language independent, it has to take care of elements and relations that are not needed for fact extraction from delphi source code. the three hierarchies allow more details to be represented, but this brings an increased complexity into the meta-model. our meta-model is targeted directly to delphi and has to support only our needs so that we have sufficient information for our future reverse engineering tasks.



we will conduct further case studies to validate the abilities of our fact extractor, and since the fact extractor is based on the introduced meta-model, this will be checked as well. and it is already planned that we apply the fact extractor in architecture recovery projects. we will use the low-level information about the software system to facilitate the recovery and documentation of the software architecture.



