the unified modeling language(uml)[1,12] has unquestionable advantages as a visual modeling technique, and this has meant that its applications have multiplied rapidly since its inception. to the characteristics of uml itself must be added numerous tools that exist in the market to help in its use(rational rose, argo uml, rhapsody...). however, unfortunately, none of them guarantee specification correctness.



the rest of the paper shows the functionalities of the tool illustrated through a case study. it is analysed in terms of two main aspects of the tool: how to obtain a formal specification from the uml diagrams, and how the assistant helps and guides in verifying properties. this is followed by a review of the work in the same field from the literature and, finally, the conclusions are presented along with possible future work.



the tool input is a uml specification which has been formatted using the xmi exchange syntax. from this input, a smv specification is automatically generated. three kinds of diagram are taken into account when transforming the active behaviour from uml into smv: class, state and activity diagrams. the first provides information concerning the elements that make up the system and their relationships, while the second and third provide information about the behaviour, through time, of each of those elements.



the following is the basic description of the system. first of all, the user introduces the credit card followed by a pin number. the system checks whether it is correct and, if not it allows the user to try again. if the user introduces three consecutive wrong pin numbers, the card will not be returned to the user. once the right pin is introduced, the user will be allowed to push the operation button. this operation updates the card information including the available left-over. at any time, the user can push the cancel button that will make the card to be returned and an error signal to be generated.



the fundamental concept taken as our starting point is that of the active class. the system is specified in terms of active classes which are associated to the reception of signals. the behaviour of each active class is reflected in a different smv module, which in turn is instantiated in the main module by each of the class objects.



behaviour of each of the active objects is reflected through state machine and activity diagrams. to correctly control the evolution of a state machine, the state it is in at any given moment must be known. this is achieved by using a separate variable to store this information for each machine.



where tr_g_9, tr_g_7, tr_g_4... represent the firing of transitions tr_g_9, tr_g_7, tr_g_4... the block default represents the behaviour where there is no change of state, that is, when no transition present in the machine is fired and it remains in the same state during the following step.



a class operation control flow can be modeled using activity diagrams which, fundamentally, show the control flow between activities. its smv specification can be found in the module that reflects class behaviour. these activity diagrams are activated whenever a call to an activity is produced within a state using the notation do<activity>.



activity diagrams can be considered as a special case of state diagrams where the majority of states are activity states and most transitions are fired by termination. so the mechanism used to represent them is similar to that used for state machines. the only difference is that, for concurrent evolution, the special states of division and union(fork and join) are used. they are activated whenever any state which has a call to this activity inside it is activated. likewise, they are deactivated whenever a transition is produced



the property must be expressed in a temporal logic present in smv 7, ctl(computation tree logic) or ltl(linear temporal logic). this property writing is not a trivial problem. to write them correctly, advanced knowledge of logics and the type of specification obtained from the system is necessary. our tool overcomes this problem as it has an assistant that guides the user through the writing of properties until the property to be verified is finally obtained following the appropriate syntax.



occurrence patterns describe properties with respect to the occurrence of a state or signal during the evolution of a system. these include absence(never), universality(always), existence(sometimes) and bounded existence(appearing a certain number of times). order patterns establish properties with respect to the order in which they occur. they include: precedence(s precedes p), response(s responds to p), and combinations of both: chain precedence(s and t precede p or p precedes s and t), chain response(s and t respond to p or p responds to s and t), and constrain chain(s and t without z respond to p).



vuml[9,13]. vuml is a tool for the automatic verification of uml models, focusing on state diagrams. it is easy to use, generating automatically a representation of the system in spin and performing an automatic verification to check that states of error are never reached and that states catalogued as desirable are reached.



hugo[14,7]. this project includes a set of tools to apply model checking to uml state diagrams and collaborating ones. the latter are used to check whether the interaction represented in the collaboration diagram can be performed using state machines. that is, for the verification. the step from uml to spin is carried out automatically using xmi.



tcm(toolkit for conceptual modeling), is a set of tools developed by r. eshuis which allows only activity diagrams to be verified by converting them to transition systems that can be verified using nusmv. the transformation is automatic, although it is not based on xmi.



if a comparison is made between the work presented in this paper and the above-mentioned work, it can be concluded that the main characteristics of this paper focus on the possibility of performing an automatic verification of the behaviour of a uml specification in which the said behaviour is reflected through state and activity diagrams and is also semi-transparent for the user. most works do not carry out an automatic verification and vuml[9,13], which does, does not use the potential of temporal logic, implementing a limited verification based on checking that it is impossible to reach error states. these error states are introduced by the user in the diagrams, so the diagrams are more complicated.



it should also be pointed out, though it has not been discussed here through lack of space, that the representative elements of both state and activity diagrams are included in this approach(except for synchronization states, events with parameters, and the dynamic creation and destruction of objects), something that cannot be said of other contributions in this field, in which few of the characteristics provided by uml(history states, deferred events, transitions fired by termination...) are dealt with.



this paper presents a tool whose main aim is to integrate formal methods with non-formal ones in such a way as to be transparent for the user. to be precise, it verifies the uml active behaviour using smv. although this is not a new idea, as far as we know at the present time, nowhere are activity and state diagrams jointly verified, using the former to represent the behaviour of the class operations.



