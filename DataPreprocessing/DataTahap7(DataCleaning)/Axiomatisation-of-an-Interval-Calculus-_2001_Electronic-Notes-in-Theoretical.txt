we provide an axiomatisation of the timed interval calculus, a set-theoretic notation for expressing properties of time intervals. we implement the axiomatisation in the ergo theorem prover in order to allow the machine-checked proof of laws for reasoning about predicates expressed using interval operators. these laws can be then used in the machine-assisted verification of real-time applications.



in recent years formalisms based on time intervals have been increasingly used for specifying real time systems. however, the complexity of proofs by hand makes their use in verification hard. there is thus the need to express such calculi in an environment that provides a reasonable automatisation for theorem proving. the only work in this direction we are aware of is an early attempt at implementing the duration calculus in the pvs theorem prover.



in our work we have defined an axiomatisation of the timed interval calculus(tic), a set-theoretic notation for expressing properties of time intervals based on work by mahony and hayes. many useful laws for reasoning about predicates expressed in tic have been developed[5,4,15] and used in verifying a wide range of real-time systems[2,4,15]. however, these laws need a more precise characterisation to allow their implementation in a theorem prover. our axiomatisation gives the infrastructure for such an implementation. the actual implementation has been carried out using the ergo theorem prover[14,1].



axiom i5 ensures that all the time points that are greater than the left endpoint and smaller than the right endpoint belong to the interval. i6 ensures that an interval is left-closed iff the left endpoint belongs to the interval. i7 is analogous for right endpoints of right-closed intervals.



the central feature of tic is the use of functions from the time domain(t) and from the time interval domain(i) to model the dynamic behaviour of observable system properties. in order to elide most explicit references to these two domains, functions may be used in a lifted form within predicates. however, to avoid ambiguities in the theorem prover, these uses must be made explicit.



since tic is an interval calculus, lifting a function defined on intervals is more critical than lifting a function defined just on times. when performing proofs we would like to extend properties of intervals to subintervals. however, if the interval is defined through the special brackets from a predicate p that contains lifted forms of functions defined on intervals, p might not be true on the subinterval we are interested in. in order to extend properties to subintervals, which is a very powerful proving mechanism, we introduce another form of special bracket that instantiates all lifted forms of functions defined on intervals.



this command defines a quantifier called name, denoted by!!name. ovl is a list of object variables, body is a prolog variable and term can be any legal term of the current theory, provided it has no free object variables or meta-variables except for body. also, all occurrences of body in term must be within a binding of all object variables in ovl.



theories time, intvls, intvlsets, predintvls and lifting are implemented respectively by the files time.thy, intvls.thy, intvlsets.thy, predintvls.thy and lifting.thy with a total of about 1000 lines of code, plus additional code to extend lifting.thy depending on the application domain.



the relationship between union and disjunction is weaker than the relationship between intersection and conjunction because we can distribute the universal quantification on the conjunction of predicates, but not on the disjunction of predicates. in fact, if the disjunction of two predicates is true on an interval, it is not necessary that one of the two predicates is true on the whole interval. law4 allows the insertion of a predicate that is true everywhere(i.e. at all points in time) within the special brackets as a conjunction. let us suppose



lawd1 are applied in the proof, together with some simple properties of the real numbers. therefore, a user can perform proofs using only tic laws, without any knowledge about the axioms used to implement tic. any change to the axiomatisation would be transparent to the user, provided the laws are still valid.



i would like to thank tony cant, colin fidge, ian hayes, brendan mahony and luke wildman for helpful discussions. colin also suggested the example used in this paper and reviewed a draft of this paper providing many useful comments. this research has been supported by the information technology division of the defence science& technology organisation, and by a university of queensland ecr grant.



