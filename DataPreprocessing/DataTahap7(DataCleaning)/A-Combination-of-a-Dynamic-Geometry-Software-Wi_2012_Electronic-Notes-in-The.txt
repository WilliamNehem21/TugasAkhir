this paper presents an interface for geometry proving. it is a combination of a dynamic geometry software, geogebra with a proof assistant, coq. thanks to the features of geogebra, users can create and manipulate geometric constructions, they discover conjectures and interactively build formal proofs with the support of coq. our system allows users to construct fully traditional proofs in the same style as the ones in high school. for each step of proving, we provide a set of applicable rules verified in coq for users, we also provide tactics in coq by which minor steps of reasoning are solved automatically.



we aim at constructing a tool for students to prove geometric theorems interactively. students can reason step-by-step in the style taught in high school. this style may involve backward and forward proof reasoning, it may also involve the construction of auxiliary lines. we present geocoq, an interface for interactive geometry proving which is a combination of geogebra with coq. reasoning steps are built by mouse clicks and are sent to coq. for its part, coq executes the reasoning steps, the response is sent back to the user to continue their proof. the logical steps and the knowledge are given by a library that was developed with the help of a high-school teacher.



we also developed automatic tactics that help users solve minor steps of reasoning. users do not have to delve into details that lead to technical proofs and are not adapted to their level of abstraction. in addition, with the formalization of automatic proof methods as tactics in coq(such as the area method which is formalized by j.narboux), users can use these methods to check the fact before proving it, or alternatively use them in steps of constructing proofs.



this paper is organized as follows. in section 2, we give a short description about geogebra. the coq system, the communication using pcoq, and a brief description about the library for geometry are described in section 3. section 4 presents the interface and provided features for proofs. the next section deals with our implementations. we mention some related work in section 6 and the last section is for our conclusions and perspectives.



coq is a proof development system, which allows users to define functions or predicates, state mathematical theorems and interactively develop formal proofs. coq is not an automated theorem prover, however it provides a tactic language letting users define their own proof method and it also includes tactics for automatic theorem proving and decision procedures. so coq is adapted to our needs in interactively constructing proofs.



some integrated development environments(ide) can be used to communicate with coq. here, we are interested in pcoq which is a graphical user-interface for coq. using pcoq to communicate with coq offers some benefits. pcoq is implemented in java, the same programming language as geogebra, so this makes it easy to be integrated in geogebra. pcoq manipulates all formulas and commands as tree-like structures(also known as abstract syntax trees) rather than plain text. this makes it easy to attach special mathematical notations to some functions, and to attach sentences in natural language to geometrical statements. furthermore, this provides an easy access to the structure of information(hypotheses, goals) that we receive from coq.



two main sub windows of pcoq are the command window and proof window. the command window is used to display all coq commands which state and prove theorems. the proof window allows users to construct proofs, they can see hypotheses, and goals need to be proved for each step of geometry reasoning in this window.



in addition, other sub windows are used to display applicable rules for a goal, to apply rules by giving values for their parameters, and to announce errors... we detail the interface and its features by showing how users can state and prove theorems. the following theorem will be used as an example for the rest of this section:



geogebra provides common geometry construction tools for users to construct diagrams. geometry objects are created one by one by using appropriate construction tools and selecting existing objects. users can move free points, and dependent constructions will be updated, this can help users discover conjectures.



searching applicable rules in our interface is implemented using search commands. it is strong enough to find out all rules in a database which lead to a goal given by a pattern. from the proof window of the interface, users can search all applicable rules for the current goal. a list of applicable rules will be displayed, allowing users to select an appropriate rule. after giving values for parameters of this rule which usually are points, lines..., users can update statement of the rule



sometime, users need to add lines, ray, segment... to a diagram during their proofs. it is quite important to ensure the existence of these objects. in the theorem proving phase, each created object exists only under some conditions. so when users create a new object, they need to verify its conditions before using this object. the following commands are sent to coq when users create the intersection point m of 2 lines l1 and l2.



while proof-by-pointing in pcoq relies on analyzing formulas and understanding the meaning of logical symbols, this notion in our system is realized by the geometric signification of formulas. for each reasoning step, by finding out the signification of subgoal, hypotheses that users selected, the system can provide appropriate tactics in a popup menu to guide users to solve the problem. for example, we determine if the selected goal has the format of(= line),(= perpendicularline) or(= parallelline), in this case the system provides replace auto lines tactics to solve it.



dgss are more and more used in education. many works have been performed to provide combinations of dgs and gtp. some of them use automatic methods, allow users to prove geometry theorems. we will cite here several systems that can generate readable proofs.



geoproof is very close to our system. reasoning in geoproof is performed by coq and based on formalization of the area method in this proof assistant. since geoproof also uses coq, so we will have some similar points in stating phase. the main differences lie on theorem proving phase and the way the system connects to coq. geoproof only allows users to construct theorem statements, send them to a coqide and check this fact by apply the area method. it does not allow users to construct their own proofs step-by-step and does not provide interactions between dgs and coq.



in this paper, we present our interface which allows users to interactively construct traditional proofs in geometry. reasoning methods at high school level such as forward method, backward method, and drawing auxiliary lines as well are provided. steps of reasoning are verified by a proof assistant hence the correctness is guaranteed.



integrating a proof assistant in a dynamic geometry software offers a novel way in learning geometry. it allows users to additionally have a logic view in solving geometric problems. users know what they have in hypotheses, what they have to prove, which rules they can apply... by which, they can take good decisions and thoroughly understand reasoning steps.



