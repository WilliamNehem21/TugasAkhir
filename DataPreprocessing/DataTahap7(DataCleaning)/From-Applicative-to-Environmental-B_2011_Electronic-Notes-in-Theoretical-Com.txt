we illuminate important aspects of the semantics of higher-order functions that are common in the presence of local state, exceptions, names and type abstraction via a series of examples that add to those given by stark. most importantly we show that any of these language features gives rise to the phenomenon that certain behaviour of higher-order functions can only be observed by providing them with arguments which internally call the functions again. other examples show the need for the observer to accumulate values received from the program and generate new names. this provides evidence for the necessity of complex conditions for functions in the definition of environmental bisimulation, which deviates in each of these ways from that of applicative bisimulation.



calculi, and languages with i/o. however, several recent bisimulation semantics of languages(stateful and pure) with higher-order functions are based on environmental bisimulation[31,32,27,15,5,14,16], a definition with significantly more complex conditions. despite its applicability to numerous higher-order languages, the additional complexity of environmental bisimulation has not been sufficiently justified. the question we ask in this paper(which we answer in the affirmative) is whether this complexity is necessary.



in a stateful language(or a language with names), the necessity of the first deviation is quite plausible. accumulation is needed because a function may return a different value the second time it is applied. but the necessity of resourceful arguments appears more questionable. even more so in a language with exceptions and polymorphism.



in this paper we investigate two versions of environmental bisimulations, one with no accumulation and one without resourceful arguments. we emphasize the bisimulation without resourceful arguments since it is the more subtle. we show by examples that these bisimulations are unsound in an array of languages that use state, exceptions, names, and polymorphism. in this way we identify common aspects in the behaviour of higher-order functions in all of these languages, and to generate fresh locations, which we call private since the context of the term has no direct access to them. the particular selection of the gensym operation leaves the semantics unaffected. thus, without loss of generality, we assume that there is a countably infinite set of locations that is disjoint from the range of gensym. we call these locations public and use them in the following section as the domain



when the context calls a function, the public state provides additional communication between a function and its context, besides the argument and the result. it is essentially another argument to the function and, when the function returns, it is another result which needs to be ultimately pattern-matched. note that this is not the case for private state since the context has no access to it.



as in the applicative setting, a relatee is organized in three zones(separated by semicolons), representing public information and the two situations that we want to relate. here the public information contains the type of the public state, besides the types of the functions. the other two zones contain the private state(and its type) that may be used in the functions.



so that c4[m4] returns false and c4[mj] returns true. note that the context c4 employs accumulation: it uses the function f, obtained before the application of g, as an argument to h, obtained as a result of the application of g. the terms m4 and mj are no-accumulation bisimilar, because by the time a non-accumulating context has obtained h by applying g, it has discarded the function f.



evidently c5[m5] evaluates to true while c5[mj] evaluates to false. on the other hand, m5 and mj are closed-argument bisimilar, because a closed argument cannot know about n. in particular, it cannot store n when applied to it, for future use, because the language does not allow storage of names. 2



jeffrey and rathke showed the unsoundness of an accumulating but closedargument form of bisimulation for the nu-calculus. the addition of infinitely many global name references makes their bisimulation sound and complete. that language is unaffected by ex. 4.3 because names may be stored, and unaffected by ex. 3.4 because there are no local references. on the other hand, their notion of bisimulation for a fragment of concurrent ml both accumulates values and uses resourceful arguments.



