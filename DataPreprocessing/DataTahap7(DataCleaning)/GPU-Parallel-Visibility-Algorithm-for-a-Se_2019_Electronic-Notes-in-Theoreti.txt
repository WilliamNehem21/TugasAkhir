visibility is one of the most important problems in computational geometry, and it is a subproblem of many others, such as finding the shortest path in a plane with obstacles or the hidden line elimination problem. diverse applications like video games and robotic motion planning have to deal with visibility. in this paper, we will focus on visibility from a point into a set of segments. our goal is to provide an efficient parallel algorithm for modern parallel architectures such as the ones presented in current gpus.



the visibility problem on gpus has already been seen by shoja and ghodsi. in their work, they give a parallel algorithm to solve the point visibility problem on a simple polygon in o(log n) time with o(n) processors. our algorithm will solve the problem for a less restricted set of obstacles, a set of non-intersecting segments, taking the same computational time, which is optimal for the visibility of line segments.



our algorithm is based on the technique given by atallah et al. for solving computational geometry problems on a divide and conquer paradigm for the crewpram computational model. we also take several visibility concepts from the work of asano et al. where they build a data structure to find a visibility graph in o(n2).



let s be a set of n arbitrarily oriented segments on the plane p allowed to intersect only at their endpoints, and let q be an arbitrary query point. the visibility region vs(q) is the set of all points on p that are visible from q. a point p is visible from q if the segment pq does not properly intersect any of the segments in s. we say two segments properly intersect if they share exactly one point and this point lies in the interior of both segments.



x-axis. if a segment with endpoints a and b crosses the positive x-axis on point c it is going to be divided into the segments ac and cb. we will call this new set of segments sq and let nq=|sq|.



in the cascading divide and conquer technique we model the solution process as a binary tree. each node represents a sorted list of some type. for the inner nodes, the list is the sorted merge of their two children in a rather complex way. the starting lists of the leaf nodes depend on the nature of the problem. we find the solution of the problem by merging the nodes in a bottom-up fashion. the root of the tree represents the final solution.



in this section, we propose an algorithm based on the cascading divide and conquer technique for the point visibility problem. for simplicity we will assume that the segments have already been translated so the query point is the origin, the collinear segments with the query point have already been removed, and the segments that cross the x-positive axis have already been broken in two. then we explain how we can query in logarithmic time whether a point is inside the visibility region or not using the resulting data structure. the section ends with an insight on how parallel merge works and how can be used for the parallel version of the algorithm.



since the additional operations take constant time to compute, the time complexity for the visibility merge algorithm is the same as a regular merge, o(n). as in mergesort, in order to merge all the elements we need to do o(log n) passes, each pass taking a total of o(n) time. the final time complexity to find the visibility region is o(n log n).



given that this algorithm is so akin to mergesort we can use parallel merge to parallelize it. the way parallel merge works is by splitting the lists to be merged into non-overlapping sublists. each processor then does a serial merge of the two sublists assigned to it.



the problem with parallel merge is that the workload is not evenly divided and processors have a different amount of elements to merge. this is not efficient for gpu architectures because threads are grouped in warps that must execute the same instructions, and it could lead to idle threads while others are working. this problem is solved by gpu merge path. merge path divides the lists into sublists



the cuda programming model is described in. basically, we can invoke c functions on the gpu, named kernels, that are called n times on n threads in parallel. the threads are organized in blocks. one block is a group of threads that have access to a shared memory. multiple blocks reside in a stream multiprocessor(sm), which has hardware limitations in the amount of shared memory and number of threads that can be executed concurrently.



visibility regions are then computed at two levels. first at a block level where we independently compute the visibility region of the nv segments assigned to each block. we use gpu merge path to partition the lists and assign them to the nt threads. after log2 nv passes we get the visibility region of the nv segments.



at the next level we compute the visibility region of all segments. we merge the n/nv visibility regions cooperating between blocks. just as at the block level we use merge path to partition the lists and assign the sublists to the blocks. the blocks then again divide their sublists and assign them to their threads. we do this for log2(n/nv) passes and finally obtain our result.



cuda code was compiled with cuda toolkit 9.1 and c++ compiler g++ 5.4.0. the compute capability version set for compilation was 3.7 to target the tesla k80 gpu. additional flags were-std=c++14,-o2 and-use fast math. the serial version was compiled with just the-std=c++14 and-o2 flags.



