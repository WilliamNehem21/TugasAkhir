benefits of a fully automatic, highly optimized, yet exhaustive state space exploration should be brought to bear on programs written in standard, high-level languages such as java, c/c++, or c#. second, the pitfalls of an error prone manual translation of the programs into the input language of established model checkers such as spin and smv should be avoided. with the growing trend towards more concurrency in everyday software(e.g., to reap performance benefits or to implement embedded systems) this research seems particularly timely. existing software model checkers either translate the program into the input language of an existing model checker(e.g., bandera, or feaver), or augment the execution environment of the language to carry out the model checking(e.g., java pathfinder, verisoft, or zing).



in this paper, we investigate the development of a software model checker for.net. more precisely, we show how a common representation like msil can be leveraged for analysis purposes in general, and model checking in particular. in principle, msil allows the analysis of multiple languages with only a single transformation: the transformation of msil to the input language of the analysis tool. the contribution of this work is a framework(msilcad) for the automatic transformation of a subset of msil to bandera intermediate representation(bir), the input language of the bogor model checker. at the core of our framework is the microsoft intermediate language-to-java bytecode transformation(msil2jbc). the msil2jbc transformation has been designed to support a subset of msil that is the result of a reasonably sized subset of both c# and j# programming languages. the framework also contains tools that support assertion violation checking as well as deadlock detection. to the best of our knowledge, the only other model checker for msil is zing. in contrast to zing, our framework is translation-based, and leverages the capabilities of the bandera toolset.



we have chosen to implement the msil2jbc translation with txl, a programming language specifically designed to support structural source transformation. the txl program responsible for the msil2jbc translation applies a number of transformation rules to the msil input, which are separated into rule-sets, each with its own specific transformational purpose. for instance, one rule-set handles the creation of threads, while another rule-set provides the ability to support method invocation, and so on.



in the remainder of this paper, we provide background on msil, the java assembler format jasmin, txl and bandera in section 2, and a complete overview of msilcad in section 3. section 4 explains the evaluation of msilcad and example experiments, and section 5 discusses related work. finally, in section 6 conclusions are given followed by future work.



more complex due to the fact that it is designed specifically to be the target of many languages. source code is compiled to this intermediate language before it is justin-time compiled to native code for some target platform. the work presented in this paper is concerned with a restricted subset of this language and the remainder of this section will focus only on that subset.



msil is a stack-based language. the subset of msil that we have focused on has instructions to load literal values onto the stack(ldc), to create arrays(newarr), to load and store values between fields(ldfld, ldsfld, stfld, stsfld), to load method arguments(ldarg), as well as some others. instructions handling standard arithmetic and boolean comparisons are supported. moreover, instructions to do nothing(nop), to branch conditionally(br), or unconditionally(brfalse, brtrue), and to return from a method(ret) are handled. finally, limited support has been included for concurrency and object synchronization by allowing thread and monitor objects.



jasmin is a java assembler interface that takes ascii descriptions for java classes, written in a simple assembler-like syntax using the java virtual machine instruction set, and converts them into binary java classfiles. since its creation, jasmin has become the de-facto standard assembly format for java. our work uses the jasmin syntax as the target language of our transformation so that we can leverage the jasmin assembler to produce java binaries.



bandera is a component-based model extractor and model checker for java programs. its current implementation handles all of java, including object synchronization, multi-threading, and assertions. its component-based architecture for model extraction is designed for scalability, flexibility and extensibility. our framework utilizes bandera for extracting optimized models from java code, and model checking these models for assertion violations and deadlock.



then disassembled to msil code and is passed directly to the msil2jbc translator. the msil2jbc translator produces java bytecode and java source code, both corresponding to the msil code the translator was passed. finally, the java bytecode and source code are passed to the post-transformation processor where bandera is prepared for analysis, assertion code is finalized, a bir model is extracted from the java source, and bandera is used to check for assertion violations and deadlock. details for all steps of msilcad are given in the remainder of this section.



the msil2jbc translator does not handle the use of assertions at the bytecode level due to the complicated nature of producing assertions in the java source during the assembly from bytecode. the assertion pre-processor replaces assertions in the source code with something that the msil2jbc is able to translate such that it is flagged for later discovery. afterwards, during the post-transformation processing stage, these replacements are located and assertions are realized. this step is achieved with a simple visual basic script.



the java source code and bytecode have already been produced at this point, but the session file needs to be created. we have implemented a script in visual basic script that updates a template bandera session file with the locations of the java source code and bytecode, as well as which class contains the main method. the session file contains commands to invoke bogor for deadlock detection and assertion violation checking, as well as a tool to output the bir model of the program to a file. when the bandera pre-processor completes, the result is a fully functional bandera session file, and a verifiable bir model of the program.



the assertion post-processor scans the java source files for any indication of user defined assertions created by the assertion pre-processor(as discuessed in section 3.1.1). if the use of assertions is detected, what has been located is replaced by valid java assertion statements. this step is achieved by a simple visual basic script.



ation involved programming the algorithms in c# and j# languages and verifying(by hand) that our transformation to java was performed correctly. we demonstrated that semantics were well preserved across all of the transformations by checking that the execution and model checking behavior of the target matched the original semantics of the source. finally, we applied model checking for deadlock detection and inserted assertion statements to test for assertion violations.



at the time of writing a new approach to model checking is in development for java bytecode. the authors of bogor and bandera have introduced an early prototype of bogorvm, a model checker aimed directly at model checking java bytecode, and not source code. bogorvm is in the early stages of development and has limitations, thus we used bandera for our purposes.



bytecode. the bandera toolset is then used to optimize and analyze the resulting bytecode. we have implemented the approach in a prototype and evaluated it with promising results on several small examples. txl proved to be a convenient vehicle to realize the translation. while there are a few language features currently not handled by our prototype, we do not see a reason why it cannot be extended to not only support the entire safe subset of msil, but also other.net languages such as visual basic.



