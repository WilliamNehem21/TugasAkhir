an important missing link in the construction of secure systems is finding a practical way to establish a correspondence between a software specification and its implementation. we address this problem for the case of crypto-based java implementations(such as crypto protocols) with an approach using automated theorem provers for first-order logic, by linking the implementation to a specification model. in this paper, we present details on an application of this approach to the open-source java implementation jessie of the ssl protocol. we also shortly comment on how these results can be transferred to the standard java secure sockets extension(jsse) library that was recently open-sourced by sun.



of work reported in the current paper(which was started in[13,12]) is targeted to legacy implementations of crypto protocols. it is motivated by the fact that so far, crypto-based software is usually not generated automatically from formal specifications, or even created in ways under control of the security analyst. thus, even where the corresponding specifications are formally verified, the implementations may still contain vulnerabilities related to the insecure use of cryptographic algorithms. an example for a crypto protocol whose design had been formally verified for security and whose implementation was later found to contain a weakness with respect to its use of cryptographic algorithms can be found in.



our goal is not to provide a full formal verification of java code but to increase understanding of the security properties enforced by crypto protocol implementations in a way which is as automated as possible. for the moment, we assume that the cryptographic algorithms called in the crypto protocol implementations have been implemented correctly(and our goal is to verify that they are used correctly in the crypto protocol). also, because of the abstractions introduced for efficiency reasons(as explained below, for example abstracting from the identity of the sender of a message), the approach may produce false alarms(which however have not surfaced yet in practical examples).



