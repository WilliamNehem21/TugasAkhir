state space explosion is a fundamental obstacle in formal verification of concurrent systems. several techniques for combating this problem have emerged in the past few years, among which the two we are interested in are: partial order reduction and distributed memory state exploration. while the first one tries to reduce the problem to a smaller one, the other one tries to extend the computational power to solve the same problem. in this paper, we consider a combination of these two approaches and propose a distributed memory algorithm for partial order reduction.



concurrent systems are composed of systems that can cooperate concurrently and communicate with each other. concurrent systems typically exhibit an extremely large number of different behaviors due to the combinatorial explosion resulting from all possible interactions between the components and many possible race conditions that may arise between them. model checking based on state space exploration is a common technique for determining that all possible behaviors of the system are compatible with the given property. it



distributed methods cope with the state explosion by distributing the state space among several workstations in a network with the aim to increase the computational power(especially random access memory) by building a powerful parallel computer as a network(cluster) of workstations. the workstations communicate through a message passing interface and in mutual cooperation explore the whole state space. there is an extensive interest in building distributed verification tools(e.g.[1,2,3,5,6,10,22]). in[4,13,14] a combination of symbolic model checking and distribution has been considered.



for the distributed computation we assume a network of collaborating nodes(workstations, computers) with no global memory. communication among the nodes is realized by sending messages only. in the distributed computation the state transition system is divided into parts, one part per each node.



in the case the state s is fully expanded, every successor s' of the state s is inserted into the set waiting. if owner(s') differs from owner(s) a message is sent to the owner of s' to do so. the depth first search then backtracks from the state s.



after the depth first search ends, all incoming messages are processed. then a state from the set waiting is picked and a new depth first search is initiated from it. this step is repeated until the set waiting is empty. once the set waiting is empty and there are no incoming messages, the node starts to idle. if all nodes idle and there are no pending messages the algorithm terminates.



proof. the computation without the heuristic explores every state and all its out coming edges exactly once. moreover, the incoming messages have to be maintained which takes time o(e in). in the case the heuristic is employed a state and its out coming edges are explored every time its history has been changed. since the history monotonically increases, the number of re-explorations is at most p.



mutual exclusion problem parametrized by the number n of processes(denoted as pa(n)). the second group consisted of models corresponding to the token ring algorithm parametrized by the number n of processes(tra(n)). the third group consisted of models corresponding to the alternating bit protocol parametrized by the number n of bits which can be lost in a row(abp(n)). finally, the fourth group consisted of models corresponding to the simple



s is fully expanded whenever a transition from ample(s) points to the search stack. this algorithm is widely used and as it is implemented in the spin model checker we denote it spin. then the reduced state transition system is generated using our algorithm fdfs(an abbreviation of fragmented depth first search).



in comparison to these two approaches the algorithm we have proposed can increase the reduction by considering not only singleton ample sets and by using less conservative cycle closing condition. at the same time the algorithm for generating the reduced state space can be easily combined with distributed ltl model checking algorithms[7,8,1] when the reduced state space is generated and at the same time checked for correctness with respect to a given ltl property. however, up to now we experimentally tested our algorithm only for scalability and reduction effectiveness and testing its effectiveness in the full ltl model checking is a future work.



