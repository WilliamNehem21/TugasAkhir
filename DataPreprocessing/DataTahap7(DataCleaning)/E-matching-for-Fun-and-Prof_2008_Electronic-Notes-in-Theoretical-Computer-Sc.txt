efficient handling of quantifiers is crucial for solving software verification problems. e-matching algorithms are used in satisfiability modulo theories solvers that handle quantified formulas through instantiation. two novel, efficient algorithms for solving the e-matching problem are presented and compared to a well-known algorithm described in the literature.



because we do not treat boolean formulas as terms, it is sometimes not possible to designate a single trigger containing all the variables that are quantified. a classical example is the transitivity axiom. in such a case we use a multitrigger, which is a set of triggers, hopefully sharing variables, that are supposed to match simultaneously.



this section describes a novel matching algorithm, optimized for linear triggers. a linear trigger is a trigger in which each variable occurs at most once. most triggers used in the program verification problems we have inspected are linear. the linearity means that matching problems for subterms of a trigger are independent, which allows for more efficient processing.



which yields{[x:= a, y:= f(c)],[x:= a, y:= f(d)],[x:= c, y:= c]}. the ordering of terms used in the example is a< b< c< d< f(a)< f(c)< f(d). we now define an analogous for s-trees of the operators h and h we defined earlier for sets of substitutions. formally, the operators are defined so that



during performance testing, we found that most triggers shared the head symbol and matching them was taking a considerable amount of time. moreover, the triggers had a very simple form: f(x, c) 11. this form is a specific example of something we call flat triggers. a flat trigger is a trigger in which each variable occurs at most once and at a depth of one.



flat triggers with a given head can be matched all at once by constructing a tree that indexes all the triggers with the given function symbol in the head. such a tree can be viewed as a special kind of a discrimination tree, where we consider each child of the pattern as a constant term, instead of traversing it pre-order. unlike in discrimination trees used for matching our index has non-ground terms and queries are ground.



we have implemented all three algorithms inside the fx7 smt solver 12. fx7 is implemented in the nemerle language and runs on the.net platform. in each case the implementation is highly optimized and only unsatisfactory results with the simplify match algorithm led to designing and implementing the second and the third algorithm.



an important point to consider in the design of matching algorithms is incrementality. the prover will typically match, assert some facts, and then match again. the prover is then interested only in receiving the new results. the simplify technical report cites two optimizations to deal with incrementality. we have implemented one of them, the mod-time optimization, in all three algorithms. the effects are mixed, mainly because our usage patterns of the matching algorithm are different than those of simplify: we generally change the e-graph more between matchings due to our proof search strategy. to achieve incrementality we memoize s-trees returned on a given proof path and then use the subtraction operation on s-trees to remove substitutions that had been returned previously. the subtraction on s-trees corresponds to



the tests were performed on a 1 ghz pentium iii box with 512 mib of ram running linux and nemerle r7446 on top of mono 1.2.3. the memory used was always under 200 mib. we ran the prover on a randomly selected set of verification queries generated by the esc/java and boogie tools.



the e-matching problem was first described, along with a solution, in the simplify technical report. we know several smt solvers, like zap, cvc3, verifun, yices and ergo include matching algorithms, though there seem to be no publications describing their algorithms. specifically, zap uses a different algorithm that also relies on the fact of triggers being linear and uses a different kind of s-trees. zap, however, does not do anything special about flat triggers.



triggers. we, on the other hand, exploit sharing in the bottom parts of triggers, and the flat matcher handles the case of simple triggers that share only the head symbol. the z3 authors also propose an index on the ground terms that is used to speed up matching in an incremental usage pattern. such an index could perhaps be used also with our approach. of course, the usefulness of all these techniques largely depends on benchmarks and the particular search strategy employed in an smt solver.



during the 2007 smt competition there were four solvers participating in the arithmetic, uninterpreted functions, linear integer arithmetic and arrays(auflia) division. the auflia division includes software verification problems and is the only one involving heavy use of quantifier reasoning. z3 was first and fx7 was second, with the same number of solved benchmarks but much worse run time. both solvers used improved matching algorithms, while other participants(cvc3 and yices) did not, which is some indication of importance of e-matching in this kind of benchmarks.



kiniry, j. r. and d. r. cok, esc/java2: uniting esc/java and jml: progress and issues in building and using esc/java2 and a report on a case study involving the use of esc/java2 to verify portions of an internet voting tally system, in: construction and analysis of safe, secure and interoperable smart devices: international workshop, cassis 2004, lncs 3362, 2005.



