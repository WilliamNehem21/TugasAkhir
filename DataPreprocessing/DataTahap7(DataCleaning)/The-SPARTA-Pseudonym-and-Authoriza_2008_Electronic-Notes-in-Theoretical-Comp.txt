the infrastructure in charge to assign and revert pseudonyms is reduced to a simple distributed infrastructure whose only goal is to provide valid pseudonym certificates. this allows us to rely on widely accepted and standard-based certificate formats(x.509), and on the efficient and mature means to handle them in a pki(public key infrastructure). the proposed approach is distributed and user-centric, meaning that the user has the freedom to decide which, and how many, entities composing the infrastructure will be involved in her assigned pseudonyms(possibly multiple). while no single entity involved in a pseudonym assignment is capable to trace the user, the system retains the possibility to determine the real identity behind a pseudonym through explicit interoperation(e.g., triggered by an authority) among all the entities involved in its assignment. in other words, rather than being forced to trust a specific and single third party, the user needs only to trust that two or more entities selected by the user herself will not collude against her privacy rights.



s. this agreement may be further based on supplementary information eventually presented by the user at registration time, as well as procedures, such as payment of a flat fare, performed(or documented) at registration time. no anonymity or privacy protection is provided, in our framework, for data presented during this phase.



3 we remark that the extension to federated identity management systems, e.g. liberty alliance is conceptually straightforwardthe difference being that in such case a further indirection exists between the provider that offers the service, which we referred to as sp, and the central entity that manages the user identity. in the provided description, for ease of presentation, we non restrictively assume coincidence between these two entities.



during such registration phase, the user will receive one or more authorization permissions through which she will be able to access s at later times. an authorization permission consists in having the sp signing, with a signature key specific for each service or resource s, a pseudonym certificate blindly submitted to the sp(pseudonym authorization). as such, an authorization permission is accountable, i.e. reuse of a same access permission implies reuse of the same authorized pseudonym. clearly, the user may prevent linkability by asking the sp to authorize more than one pseudonym during registration phase, and then change pseudonyms, among the authorized ones, through different access sessions.



the procedure to assign a pseudonym certificate p to an user is done offline, i.e. before the actual access to the service, and as such does not add extra time and/or and/or computational burden to the service provision. since a pseudonym p shall be submitted by the user at registration time(see section 2), the pseudonym assignment procedure is performed after the real identity certificate u is issued and before the registration time.



then carried out. finally, if all checks are successful, the ir embeds the provided public key ei into a new token certificate ti. as final pseudonym p, the user simply choses the last token in this chain(where we stress that such chain is freely decided by the user).



despite its extreme simplicity, this approach is indeed effective and may be extended to give raise to a full-fledged identity management pki driven by the user decisions. in fact, it is up to the user to decide which irs to use, and whether to use a single ir or a multiplicity(for improved robustness of the reversion of this process). this makes all the framework strongly user centric.



in parallel, the set of deployed irs form a pki infrastructure. this means that the ir must maintain a list of trusted cas(both irs and sps), and accept certificates issued by other cas depending on deployed policies(regulatory, etc). for instance, this allows the user to derive tokens(pseudonyms) from a chain of irs involving different administrative domains or even states, which they may be later on accepted as valid by the sp depending on the specifically issued service(in other words, for some services it is possible to impose that the pseudonym must be issued by a subset of irse.g. from a same state). we point out that the choice of obtaining a pseudonym through a given chain of sp/irs clearly affects the regulatory conditions under which the pseudonym may be reverted. for a trivial example, the fact that a pseudonym has been obtained by chaining two irs from two different states means that the authority capable of reverting it must be a trans-national one.



as shown in the next section, the revocation of an authorization permission for a single misbehaving pseudonym is locally managed by the sp itself. in fact we will show that an authorization permission is a credential issued by the sp only, with no involvement of the described pseudonym pki. a more elaborated problem is the revocation of all the pseudonyms associated to a same real user identity. this can be accomplished in a distributed way by the pki components through the usual revocation approaches(management of certificate revocation lists). particularly, each ir server shall periodically check that its issued certificates are not included in the crl. if an issued certificate is found to be revoked, we can take advantage of the mapping internally hold by the ir, and accelerate the pseudonym revocation procedure by selectively informing the parent ir in the chain.



the detailed security analysis of the proposed signature mechanism is outside the goals of the present paper, and it is object of work in progress. some preliminary considerations follow, with the double goal of i) understanding the rationale behind the proposed approach, and ii) describing how the proposed approach is devised to defend against some simple forgeability and traceability attacks. in the following discussion we assume that the communication channel is secure and the communicating peers authenticated(i.e. no mitm attacks).



the transmission of the server side random value y occurs at step(1). due to the discrete logarithm hashing, it is computationally hard for the user to obtain y. note that this random value must remain unknown to the user during the handshake as, otherwise, it would be trivial for the user to forge a value r' and vanish the desired properties of this signature mechanism. this would be obtained by sending



an integrated implementation approach has been followed. rather than implementing each different server as a separate entity, a general multi purpose server(mps) integrates the server side logic for the pseudonym assignment handshake(section 3) as well as the authorization credential issuing handshake(section 4). the mps is implemented as a multithreaded server thus allowing the management of several clients in parallel without significant performance impairments. the server stores the transactions log in a back-end database. we used the mysql database, which is well known by the open software community and guarantees good performances while processing logs of many concurrent clients. on the user side, we developed a pseudonym manager tool to assist the user through the various token/pseudonym assignment, registration and verification procedures. we choose to develop a command-line tool, for ease of integrability in other softwares, with a gui commander for standalone user friendly operation. as regards the credential verification at the time of service provisioning we also developed a standalone command-line verification tool, with the intent of being easily integrable in the logic of the service application.



all the messages are conveyed over tcp sockets. as discussed in section 5.1, we assume the presence of an underlying security protocol to secure all the communications, and our implementation choice was tls, mostly for ease of implementation and the possibility to deploy the proposed solution in a web service scenario(section 5.4).



