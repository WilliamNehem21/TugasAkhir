3 there is currently no unanimous vision on cbse. for example, several different approaches exist that motivate why black-box, grey-box or white-box component composition is the better choice. in this paper, we assume the szyperski vision on cbse with black-box component composition.



the main claim of this paper is that a specialized aspect module should not exist. instead, we would like to apply aspect-oriented composition mechanisms to existing module constructs. as such, software components do not need to be adapted in order to alter the composition mechanism. to support this claim, we propose both a modeling framework, called cocompose, and a programming language, called fusej. both approaches allow separating the composition mechanism from the behavior specification. cocompose employs model driven development(mdd) in order to apply different composition mechanisms on generic design elements. cocompose allows to refine a model with non-typed, generic concepts to a model that uses components, methods and events. generic composition concepts can also be refined to both regular and aspect-oriented composition mechanisms. using these mdd refinements, it is possible to postpone the choice for a specific implementation construct to the lowest level design.



fusej is a programming language that recuperates aspect-oriented ideas and allows implementing all concerns as java beans. in addition, fusej provides a strong composition mechanism that is able to describe both aspectoriented and component-based compositions. as such, new composition mechanisms are made as unobtrusive as possible, e.g. when representing a software



the next section introduces the cocompose modeling framework and motivates why an explicit aspect-oriented composition mechanism is better than a separate aspect module at the design level. afterwards, the fusej programming language is introduced that maps seamlessly onto the cocompose ideas. in section 4, we present the tool support we are currently implementing for supporting the cocompose/fusej approach. section 5 discusses related work that also avoids introducing an extra modularization construct for aspects. finally, we state our conclusions.



cocompose is a model driven development framework that can be used for the stepwise refinement of software designs. in addition, cocompose can automatically determine which refinement alternatives to use. current oo design approaches, such as uml, do not explicitly support refinement alternatives. a refined version of the design is made, thereby prematurely eliminating other feasible refinements. uml already starts halfway the refinement process, since it forces the developer to choose one of its specific constructs to represent a design element(e.g. class, operation, package, attribute,...).



that represents an implementation language construct. the java implementation generator for a class concept, for instance, generates java class skeleton code and pastes in an implementation pattern, if any. while the class concept itself does not have any implementation patterns, a concept inheriting from class may have one and can reuse the class implementation generator.



communication of one(or more) gate(s) with the incoming communication of one(or more) gate(s). connectors are responsible for describing both regular and aspect-oriented compositions between components, as this description is omitted in both the component and the gate implementation. connectors which specify regular component compositions are quite similar to the connectors found in most component models. they are used for glueing together the gates of two components by resolving mismatches between method names or argument types. connectors are however also able to specify aspect-oriented composition between components. in this case, their corresponding gates are glued together in an aspect-oriented way.



deferring the aspect-oriented interaction specification to the component composition mechanism, in this case the gates and the connectors, has multiple advantages at the implementation level. the reusability of a component is increased, as a component developer does not need to decide at development time whether a component is supposed to interact in a regular or an aspect-oriented way with the other components which are available within the software system. all concerns are implemented as regular components, and it is the connector that is responsible for specifying how the interaction between components takes place. as a result, the features of a component can be reused in both regular and aspect-oriented compositions at the same time. this concept even allows existing components to be reused within an aspect-oriented context.



a gate specification typically consists out of two parts. a pattern part which describes the mapping of the gate upon the internal implementation of the component and an expose part which exposes the gate properties(input arguments, return value,...). the gate-interface of the bookingservice component for instance provides two gates. the pattern part of the bookhotel-gate(line 4 to 6) maps this gate upon the bookhotel-method of the bookingservice component(line 5). the bookhotel-gate exposes the inputhotelname property(line 8) that represents the name of the hotel that is given as input. the outputprice property(line 9) exposes the return value of the bookhotel-method upon which the gate is mapped. likewise, the chargeforhotel-gate is mapped upon the event which is thrown in order to charge the customer for the hotel booking(line 13 to 20).



the bookingdiscount-connector is responsible for specifying the composition between the bookhotel-gate of the bookingservice-component and the discount-gate of the discountservice-component. the bookingdiscount-connector is responsible for specifying an aspect-oriented composition. an aspect-oriented connector is specified in a similar way as a regular component composition connector. the connection-part now specifies an aspect-oriented interaction between the related gates. in this particular case, the after-clause specifies that the return value of the bookhotel-gate should be replaced with the return value of the discount-gate. again, a mapping-part is provided which maps the inputprice-property of the discount-gate upon the outputprice-property



in section 2, generic compositions between concepts are introduced which can be refined towards regular or aspect-oriented composition mechanisms. however, the decision of whether a concept should be mapped upon an aspect or a component still needs to be made at the lowest level of design. in fusej, all concerns of a software system are described as regular components, and an expressive composition mechanism is employed for combining them. as a result, fusej eases the refinement process at the lowest level of design.



recently, the object management group has introduced the model-driven architecture(mda) standard. mda forms an abstraction layer to specific implementation platforms. it uses model transformations to refine a high-level design(described using a platform-independent model or pim) to a platformspecific design(described using a platform-specific model or psm). several layered psms can be defined to gradually refine the design. cocompose fits in the mda vision as it also uses several layered refinements, which are described using meta-level solution patterns. these form the intermediate platform models(pms) that define the transformation from a platform independent model(pim) to a platform specific model(psm).



in generative programming and step-wise refinement, features and feature models are used to create a family of software systems instead of a single system. features can be optional or mandatory for a software system, depending on the presence of other features. cocompose can model optional features through solution pattern roles, which can be left unfilled. alternative features can be modeled by alternative concept refinements.



in this paper, we claim that a specialized aspect module should not exist. in order to support our claim, both a modeling framework and a programming language are proposed that do not introduce a specialized aspect module. instead, a powerful composition mechanism is provided that supports aspectoriented composition. the cocompose modeling framework is based on mdd and allows step-wise refinement from a high-level design to the lowest level design or code level. using these refinements, cocompose allows postponing the decision concerning the modularization construct that is chosen for a particular concern. the drawback of targeting traditional aspect-oriented programming languages in a refinement is that a specific aspect module has to be selected in order to modularize certain concerns at this refined design level. therefore, the fusej programming language is introduced as a better target for implementing cocompose designs. the fusej programming language allows to implement all concerns as regular components and provides an explicit composition mechanism that supports aspect-oriented composition



the proposed fusej gate and connector language is only a first prototype of our ideas. at the moment, the expressiveness of the fusej connectors does not cover the complete aspect-oriented composition possibilities, as only simple aspect compositions, such as before and after are supported. identifying whether and how other aspect-oriented composition mechanism can map in this model is subject to further research. a possible problem with the cocompose approach is scalability. because every design element can have multiple refinements, a multitude of possible refinement combinations are available. experience with the first version of cocompose that targets java, concernj and jasco already suggests that scalability issues can be overcome. in the future, real-life experiments of cocompose/fusej have to reveal whether this approach is feasible.



