in this tool demonstration paper, we present a plugin for the eclipse tool platform which provides support for jasco. jasco is a dynamic aop language focused at component-based software engineering. the jasco eclipse plugin provides a visual integrated development environment for jasco that guides developers to program jasco artifacts using visual wizards. the plugin also supports running jasco enabled applications and offers an extensive range of debugging and introspection facilities.



are available, such as aspectj, hyperj, adaptive programming and composition filters. the jasco aop approach has recently been introduced to overcome some of the limitations of these approaches and aims at combining the ideas behind aspect-oriented and component-based software development. jasco is currently supported by a set of command-line tools and a run-time infrastructure. although these command-line tools allow a developer to unleash the full power of jasco aop, the development process of a jasco enabled application is split up in two distinct phases as no integration is provided with the development environment in which the base application is written. to this end, we present the jasco eclipse plugin, which offers an integrated development environment for jasco aop, as it guides developers with writing, running and debugging jasco enabled applications.



jasco is a dynamic aop approach that aims at combining the ideas of aspectoriented and component-based software engineering. the jasco language itself is an extension of java and stays as close as possible to the regular java syntax and concepts. jasco introduces two new entities: aspect beans and connectors. an aspect bean is an extended version of a regular java bean and is specified independent of concrete component types and apis. an aspect bean contains one or more logically related hooks that describe the crosscutting behavior itself. the main difference with approaches such as aspectj, is that jasco aspect beans are described in terms of an abstract context. a connector is used for deploying one or more aspect beans within a concrete context and allows to explicitly instantiate and initialize hooks. in addition, connectors are able to specify explicit precedence and combination strategies in order to manage the cooperation among several applicable aspects.



at the technological level, a new component model is proposed where traps that enable aspect interaction are already built-in. each trap refers to the jasco run-time infrastructure that manages the registered connectors and aspect beans. for each encountered trap, the run-time infrastructure evaluates which hooks are applicable and executes their advice. because of this dynamic architecture, it is possible to add, change and remove aspects at run-time. in order to optimize the trapped component model, it is also possible to add and remove traps just-in-time using the novel java hotswap functionality.



the jasco eclipse plugin provides two extensive wizards which assist a developer with describing jasco aspects and connectors. the aspect bean wizard is mainly used to generate a template in which the crosscutting behavior of an aspect can be described. a user specifies the name of the aspect and one or more hooks. additionally, the developer is able to define the advice that has to be generated by default. using this wizard, a jasco aspect bean is automatically generated. only the advice, which are essentially described using plain java, need to be filled in for obtaining an useful aspect. the aspect bean wizard also contains an extensible library of aspect beans that implement a range of typical aspects. the aspect beans are categorized using keywords and some aspect beans can also be customized for the concrete context at hand.



the connector wizard is employed for describing connectors and allows to automatically generate a complete connector. using this wizard, a developer is able to instantiate one or more hooks. for each hook separately, the concrete context can be defined by making use of the native eclipse type and method selection dialogs. in addition, a developer is able to specify which advice to execute as well as the precedence strategies between the instantiated hooks. as such, a developer is able to specify the order in which advice need to be executed for each connector separately. the connector wizard also contains an extensible library of combination strategies that can be integrated in the connector at hand.



also, when developing an aop application, keeping track of which aspects are applicable at which joinpoints(i.e. the concrete context of an aspect) is a difficult task. therefore, as debugging support, a joinpoint lookup feature is included in the jasco eclipse plugin which allows one to statically determine the possible concrete joinpoints of a hook instantiation.



at the moment, the jasco plugin provides support for the basic jasco language and technology features. jasco however provides many other features which are not supported by the plugin at this time. several extensions to the jasco eclipse plugin are being considered: improved syntactical checking of aspect and connector code, automatic support for moving existing java project towards jasco projects and aspect-oriented refactoring support which allows one to extract crosscutting behavior out of an existing application into a set of jasco aspect beans and connectors.



