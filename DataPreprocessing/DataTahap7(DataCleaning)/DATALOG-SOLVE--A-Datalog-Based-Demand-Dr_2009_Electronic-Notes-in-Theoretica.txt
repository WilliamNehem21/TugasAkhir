static program analysis extracts semantic information from a given program without running it. an example of such an analysis is the definition-use analysis that is used to analyze data-flow program dependencies. the analysis is run on an abstract representation of the program that contains the variable definitions as well as their use at each program statement.



recently, a very efficient datalog program analysis technique based on binary decision diagrams(bdds) has been developed in the bddbddb system, which scales to large programs and is competitive w.r.t. the traditional(imperative) approach. the computation is achieved by a fixed point computation starting from the everywhere false predicate(or some initial approximation based on datalog facts). datalog rules are then applied in a bottom-up manner until saturation is reached, so that all solutions satisfying each relation of a datalog program are exhaustively computed. these sets of solutions are then used to answer complex formulas.



able atoms, our approach focuses on demand-driven techniques. in the context of program analysis, note that all program updates, like pointer updates, might potentially be inter-related, leading to an exhaustive computation of all results. therefore, improvements to top-down evaluation remain attractive for program analysis applications. recently, zheng and rugina showed that demand-driven cfl-reachability with worklist algorithm can compare favorably with an exhaustive solution, especially in terms of memory consumption. our technique to solve datalog programs based on local bes resolution goes towards the same direction and provides a novel approach to demand-driven program analyses.



the datalog approach to static program analysis can be summarized as follows. each program element, namely variables, types, code locations, and function names, are grouped in their respective domains. by considering only finite program domains, datalog programs are ensured to be safe(i.e., query evaluation only generates a finite set of answers). each program statement is decomposed into basic program operations, namely load, store, assignment, and variable declarations. each kind of basic operation is described by a relation within the datalog program. a program operation is then described as a set of tuples satisfying the corresponding relation. in this framework, a program analysis consists in either querying extracted relations or computing new relations from existing ones. let us show an example of analysis specification in our approach.



the last part of the program specifies which kind of information are we able to infer by using the information extracted from the program. in this case, the four rules infer possible points-to relations from local variables and method parameters(datalog variables of the domain v) to heap objects(datalog variables of the domain h), as well as possible points-to relations between heap objects through field identifiers(datalog variables of the domain f). in summary, the rules model the effect of the input relations over the heap.



the datalog program, e.g.,:vp(x,y)., where x and y are variable arguments of vp. this goal aims at computing the complete set of variables x that may point to any heap object y at any point during the program execution. the datalog query is not specified in the datalog program, but provided independently by the user.



