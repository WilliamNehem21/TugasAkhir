in this paper, therefore, a popular data mining tool called the backpropagation learning neural network is implemented as an application running on graphics hardware. since the recent graphics hardware has many vector processing units and high memory bandwidth, it is promising to accelerate the backpropagation learning task involving a lot of data-parallel computations. the evaluation results have demonstrated the great potential of our prototype implementation for massive backpropagation learning tasks. the graphics hardware can efficiently work especially if the task is implemented so as to use data-parallel instructions supported by the hardware.



today, enormous amounts of data are being produced and accumulated everyday, at all times. as a result, it is very difficult to manually retrieve valuable information and useful knowledge from a huge sea of data. because of the social demand, the computer technologies for knowledge discovery in databases, so-called data mining, have been receiving increasing interests. although data mining is helpful to limit the scope of our information search, a data mining system has to process a large number of data in a practical time. as the database is growing rapidly, we need more and more computing power for future data mining.



the seti@home project has demonstrated the tremendous potential of volunteer computing, which uses idle computing resources on the internet, to realize a large-scale data mining system. furthermore, the latest game consoles have excellent computing power. in the near future, hence, a huge number of idle game consoles will ubiquitously exist on the internet. effectively using such idle game consoles, volunteer computing is expected to realize an unprecedented scale data mining task.



in this paper, the learning task of a backpropagation neural network, which is one of the most popular tools for data mining, is implemented as an application running on gpu. as the backpropagation learning algorithm involves massive data parallelism, gpu is promising to accelerate the learning tasks. as the first step to establish such an effective implementation scheme, therefore, this paper shows the great potential of the gpu implementation for massive backpropagation learning tasks.



the outline of this paper is as follows. sections 2 and 3 briefly review the backpropagation learning algorithm and gpu, respectively. then, we propose an implementation scheme of the backpropagation learning task using gpu. section 4 shows our experimental results to evaluate the performance of the gpu implementation. finally, section 5 gives concluding remarks and our future work.



artificial neural networks are the basic tools for data mining. their learning algorithms can roughly be categorized into supervised learning and unsupervised learning algorithms; supervised learning assumes that a set of ideal input-output vector mappings, a training data set, is given, while unsupervised learning does not. the backpropagation algorithm being discussed below is a typical supervised learning algorithm for multi-layered feed forward neural networks.



an mi-dimensional input vector in a training data set x={x1, x2,..., xn} is denoted by xl={x1l, x2l,..., xmil}. each component of an input vector, xil, is given to an input neuron, and propagated to hidden neurons via weighted links. the output value of a hidden neuron, ojl is calculated by



non-graphics applications on gpus usually exploit the programmability of the fragment shader. the fragment shader can operate colors of multiple fragments in parallel. the fragment shader can also fetch data from texture images on the video memory; the texture images can be used as the source operands of computing on the fragment shader. moreover, simd instructions of the fragment shader are available to simultaneously operate four color channels: red, green, blue and alpha(rgba) channels 6. therefore, we can see the fragment shader as a multi-grain simd parallel processor that can calculate multiple fragment colors in parallel, and further can use fine-grain simd parallel instructions for the calculations. as a result, the fragment shader can efficiently execute the component-wise matrix operations that independently determine each matrix component in a simd parallel fashion, such as addition of two huge matrices.



one texel is called data packing. data packing is necessary for multi-grain parallel processing by the fragment shader. since data packing can reduce either the number of fragments or rendering passes to quarter, it can significantly accelerate many gpgpu applications.



as the backward propagation of errors at one output neuron to all the hidden neurons is performed in a single rendering pass as with the forward propagation, the backward propagation needs mo rendering passes in total. updating all the weights between the input layer and the hidden layer also needs n rendering passes. accordingly, gpu can execute one learning step of the backpropagation learning algorithm in total(mi+ mh+ mo+ 2n+ 4) rendering passes.



data packing stores four signals into one texel. in our prototype implementation, this packing is used to reduce the size(the number of fragments) of each matrix in the forward and backward propagation phases to quarter, and the packing also allows each per-fragment program to fetch four matrix components by sampling a texture once. furthermore, it can reduce the number of rendering passes to(mi+ mh+ mo+ n/2+ 4), because the numbers of rendering passes in the weight updating phase is reduced to quarter. therefore, the packing is significantly effective to improve the computational performance of the gpu implementation.



generally degrades as the texture size decreases, even though the total execution time decreases with the texture sizes. accordingly, these experimental results clarify that the reduction in the number of rendering passes can accelerate the gpu implementation more significantly than the reduction in the texture sizes. for improving the efficiency, the data packing should be used so as to reduce the rendering passes rather than the texture sizes, if possible.



the goal of our project is to realize a large-scale data mining system by volunteer computing of game consoles with high-performance gpus. as the first step, this paper has discussed the gpu implementation of one popular data mining tool, the backpropagation learning neural network. then, our prototype implementation has clearly demonstrated the high performance of the gpu implementation especially for large-scale learning tasks.



