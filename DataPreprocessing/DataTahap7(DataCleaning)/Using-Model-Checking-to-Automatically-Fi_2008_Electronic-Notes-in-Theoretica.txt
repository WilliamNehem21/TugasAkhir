downward and upward simulations form a sound and jointly complete methodology for verifying relational data refinement in state-based specification languages such as z and b. in previous work, we showed how both downward and upward simulation conditions can be discharged using a ctl model checker. the approach was implemented in the sal tool suite. given the retrieve relation, each of the simulation conditions can be proven fully automatically. it has been recognised, however, that finding retrieve relations is often very hard. in this paper, we show how it is feasible to use the sal model checkers to also generate retrieve relations.



sal is a tool-suite for the analysis and verification of systems specified as state-transition systems. its aim is to allow different verification tools to be combined, all working on an input language designed as a format into which programming and specification languages can be translated. the input language provides a range of features to support this aim, and can, in fact, be used as a specification language in its own right. the tool-suite currently comprises a simulator and four model checkers, including ltl and ctl model checkers which we use here.



a specification is given as a sal context. for example, below we have a context alloc representing the specification of a unique number allocator. a context groups together a number of definitions which include types, constants and modules for describing the state transition system. in our example we declare a type nat, a subrange of the naturals whose maximum element is defined by the constant max. the module main declares a local variable as, a set of nat 3, and an output variable out of type nat(representing the--> assignments. the guard is an arbitrary predicate which may refer to primed(i.e., post-state) variables. a guarded command is able to occur whenever there exists values of the primed variables which satisfy both the guard and the assignments. the assignments may be nondeterministic as illustrated by the assignment to out' in the transition aop. any variables not explicitly assigned a value are unchanged.



data refinement is a formal notion of development, based around the idea that a concrete specification can be substituted for an abstract one as long as its behaviour is consistent with that defined in the abstract specification. an example refinement of the z specification in section 2.1 is given below.



takes a more incremental approach, building the abstract and concrete transition systems as it executes. one of the reasons for developing this second algorithm was to avoid the need to supply the complete transition systems in advance. however, the approach is limited to downward simulation.



the fact that a retrieve relation exists is enough to know that we have a refinement. however, if we wished to know the retrieve relation, we could simply negate the property. then, if a retrieve relation exists, the model checker will provide us with a counter-example which ends in a state with a retrieve relation. it will, in fact, be the weakest retrieve relation.



the sal encoding is straightforward. we provide types as and cs denoting the set of abstract and concrete states respectively. these types are generally tuple types, each element being the type of a state variable. for example, if the abstract state has two variables, one of type x and one of type y, then in sal we would have:



then we can define the type of r as a set of tuples of type[cs, as]. we can also define the initialisation of r, the condition rok, and the deletion transition directly as above. a complete encoding for the unique number allocator refinement of section 2 is shown below.



as shown in our previous work, the simulation conditions for data refinement can be encoded in sal. specifically, the branching time temporal logic ctl can be used to encode the standard downward and upward simulation conditions under both the blocking and non-blocking interpretations. given a retrieve relation, these encodings can be used to automatically verify data refinements.



consider the two z specifications of the unique number allocator of section 2. to check the refinement with a ctl model checker, we begin by combining the abstract and concrete specifications into one specification by merging their state variables and operations. in general, we assume the variable and operation names of the abstract and concrete specifications are disjoint as in this example(if they were not, they could be made disjoint by a systematic renaming).



to check applicability we use the transitions corresponding to the abstract and concrete operations. the applicability condition holds if whenever an abstract operation can be performed, the corresponding concrete operation can be performed from any related concrete state. thus the ctl check is as follows.



in the approach above the ctl property must hold on all initial states of the system, i.e, all possible pairs of abstract and concrete states. it relies on the fact that the same retrieve relation(that captured by the state variable r) is used when checking the property for each such pair of states.



thus in our example sal encoding described above, we add types as and cs corresponding to the abstract and concrete state spaces allowing us to declare r as a set of pairs of concrete and abstract states(as in section 3.2). since chooser is always enabled, we remove the skip transition. we also



in this paper, we have shown that temporal logic model checking can be used to automatically find retrieve relations between abstract and concrete statebased specifications. the existence of such a retrieve relation implies the concrete specification is a data refinement of the abstract one. hence, the approach enables fully automatic checking of data refinements.



while we have shown this is feasible, we have not yet provided a practical method. the size of the state spaces, and hence specifications, we can handle is quite limited. this is mostly due to the fact that we need to include the retrieve relation(a set of abstract and concrete state pairs) as part of the state-space of our model. in our previous work where we provided, rather than calculated, the retrieve relation, it could be represented by a boolean variable, rather than a set, resulting in much greater efficiency.



the efficiency of the approaches in this paper could be improved using the optimisation features supported by the model checkers we have used. we have not investigated this possibility, using only the basic functionality of the tools. however, it seems likely that this will not solve the problem for any but the smallest of specifications.



a more promising way forward would be to use a technique which allows us to reduce the size of our models while maintaining the verity of the properties we wish to prove. such techniques include data abstraction, predicate abstraction[5,28] and data independence. for example, data independence is based on the fact that sometimes properties we wish to prove are independent of the values associated with particular types. by these means it is possible to show that the refinement between the abstract and concrete unique number allocator specifications in this paper are independent of the maximum number allocated. hence, verifying the refinement when this value is 2 infers the refinement for any other value. exploration of this is left as future work.



