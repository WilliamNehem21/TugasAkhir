in this paper we define a new verification method based on an assertion language able to express properties defined by the user through a logic program. we first apply the verification framework defined in to derive sufficient inductive conditions to prove partial correctness. then we show how the resulting conditions can be proved using program transformation techniques.



in this paper we propose a new verification method based on an assertion language able to express properties which are not given once and for all, but can be defined by the user through a logic program. this yields a very powerful assertion language, which allows us to verify different properties for a wide class of programs. given any property expressed as a formula built on user defined predicates, by applying the verification framework defined in, we derive sufficient inductive conditions for partial correctness. since the assertion language is very powerful we can not hope to have an effective way to decide whenever the resulting conditions are verified. however, we will show that such conditions can be proved by using well-known program transformation techniques. program transformation is a methodology which allows one to syntactically transform formulas while preserving its(chosen) semantics. some examples of transformation rules are fold/unfold transformation rules. in our case we prove assertions on the user defined predicates by means of transformations on the user program.



it is worth noting that assertion languages which allow one to express properties defined by means of user programs have already been defined in the literature[14,15,2,16,7]. however our approach is substantially different. in[14,15,2], in fact, assertions are associated to program points. at run time such assertions will be executed using the logic programs defining the assertion language and the run time values. in this approach the logic implementation of the specification language is used to check by execution that each result of the actual program verifies the specification, while in our approach the same program is used to syntactically prove sufficient conditions for partial correctness.



in order to prove that a program behaves as expected we can use a semanticsbased approach based on abstract interpretation techniques. this approach allows us to derive in a uniform way sufficient conditions for proving partial correctness w.r.t. different properties of interest. the ideas behind this approach are the following:



following the above approach, verification techniques inherit the nice features of abstract interpretation. namely, we can define a verification framework, parametric with respect to the(abstract) property we want to model. given a specific property, the corresponding verification conditions are systematically derived from the framework and guaranteed to be indeed sufficient partial correctness conditions.



(1)(in the case of logic programs) was initially used in abstract diagnosis, a technique which extends declarative debugging[16,8] to a debugging framework, parametric w.r.t. abstractions. a similar approach is taken in, where different approximations(modeled by abstract interpretation) can be used in the semantics and in the specification.



more general specifications(including pre and post conditions) are considered in, which defines a verification framework, where well known verification methods can be reconstructed, by simply choosing different abstractions. the approach can be explained in terms of two steps of abstraction. the first step is concerned with the derivation of a semantics which models a specific aspect of the computation which allows us to derive the sufficient verification conditions through(1). the second step performs the abstraction needed



as already mentioned, the second abstraction step is concerned with the choice of an abstract domain to approximate the properties. of course we can make available to program verification all the abstract domains designed for the static analysis of properties such as modes, types, groundness dependencies, etc. as is the case for static analysis, in general we lose the precision, however we succeed in getting finite specifications.



although decidable, the class of properties which can be expressed in these languages are given once for all. furthermore the expressiveness of such assertion languages is limited. a more interesting case would be to let the user to be able to define its own properties through the definition of logic programs. as already mentioned, assertion languages which allow one to express properties defined by means of logic programs have already been defined in the literature[14,15,2,16,7]. in particular in such a language is used to



in all these approaches the role of the user defined logic programs is to allow to extensionally derive information on the intended behavior, i.e. the specification. they are in fact used to execute the assertion on run time values and therefore to check that each single program answer also satisfies the assertion. in this paper we propose an approach where the user defined logic programs are used to intensionally derive information on the intended behavior. this is obtained by using the user defined programs to syntactically transform the verification conditions and to prove them.



the approach proposed in this paper considers a language where assertions are formulas built on user defined predicates. the meaning of such predicates is specified by some user defined logic program. once the verification conditions are derived they can be proved using the program and transformation techniques as the ones described in.



depending on the property we want to verify, different versions of these techniques can be used. for example if we want to prove partial correctness of a program w.r.t. computed answers we should be careful to use transformations preserving the computed answers semantics.



this paper essentially presents some examples which show how our verification method works. as the following programs will show, most of the verification conditions are very easily proven by using a few unfolding steps. this suggests that the process of proving the verification conditions can be automatized or at least semi-automatized.



the concrete semantics of such a system has to model partial answers in order to be able to express the infinite behavior. however(1) on the assertion domain boils down to the same sufficient conditions presented on page 5. thus the interpretation i models the partial answers of the program.



we conclude that the program is partially correct w.r.t. the specification. note that if we had used a stronger verification condition with call correctness, we would not succeed in proving it, because we have no guarantee that every procedure call verifies the preconditions.



it is worth noting that here we need a semantics which models arithmetics over naturals. this is just to shorten notation because we should have chosen to use a first order representation of numbers(0, s(0),...), implement sum as a user defined predicate and then use the computed answer semantics.



as the examples presented in this paper have shown, most of the verification conditions can very easily be proven by using some unfolding steps while other transformation techniques, such as goal replacement, are necessary to prove more complex properties. as we have already discussed, also the generation of the intermediate lemmata needed for goal replacement, can often be obtained by using an unfold/fold proof method, as shown in. these considerations suggest that the process of proving our verification conditions can easily be semi-automatized by using, for example, some of the recently implemented systems for the transformation of logic programs.



