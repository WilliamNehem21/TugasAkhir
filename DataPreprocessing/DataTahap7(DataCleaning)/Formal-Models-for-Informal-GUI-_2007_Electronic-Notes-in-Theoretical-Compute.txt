many different methods exist for the design and implementation of software systems. these methods may be fully formal, such as the use of formal specification languages and refinement processes, or they may be totally informal, such as jotting design ideas down on paper prior to coding, or they may be somewhere in between these two extremes. formal methods are naturally suited to underlying system behaviour while user-centred approaches to user interface design fit comfortably with more informal approaches. the challenge is to find ways of integrating user-centred design methods with formal methods so that the benefits of both are fully realised. this paper presents a way of capturing the intentions behind informal design artefacts within a formal environment and then shows several applications of this approach.



separation of the design and implementation of a graphical user interface(gui) of a system from what we will refer to as the underlying system behaviour is a common and pragmatic approach for many applications. the development of user interface management systems(uims) based on the logical separation of system functionality and user interface(ui) is exemplified by the seeheim model. the separation allows us to not only focus on the different concerns which different parts of the system development present, but, more importantly, allows for different approaches and design techniques.



in this paper we will introduce a way of formally describing informal design artefacts, called the presentation model. we will give some examples of the use of the presentation model within a formal design context and then show how we can extend this model with another formalism, finite state machines. we can then begin to explore both the static and dynamic meanings of the designs which form the basis of the model.



the key to ucd, therefore, is to ensure that the actual users of the system are involved at all stages of the design process. the sorts of artefacts that are generated during such processes reflect this collaborative way of working and will include things like white-board design sessions with post-it notes used to represent interface elements, textual narrative descriptions of things like domain information and scenarios, task analysis models, user descriptions and paper-based prototypes. one of the problems we face when trying to capture ucd processes within a formal software engineering context is that the artefacts produced are intentionally informal. they aim to encourage users to feel able to participate and change the design, and lo-fidelity artefacts, such as paper prototypes for example, have been may be that some, or all, of these tools could be adapted or extended to support the sort of work we are currently doing. however, as our focus is currently on existing commonly used design techniques and artefacts, we have deliberately chosen not to consider such tools here. instead we focus on lo-fidelity artefacts like paper-based prototypes.



integration of different languages and models within formal methods is not unusual(indeed this activity has at least one whole conference devoted to it, namely ifm). the central idea is to use the differing features and strengths of the different methods as appropriate. sometimes it is enough to just use different formalisms to specify different parts or different properties of the system, but the best effect is seen when methods are fully integrated so there are formal links between them allowing for a fully rigorous development.



using formal methods in gui design is not a new idea, and many different approaches to this have been taken. these may be along the lines of formalising particular parts of the design process, such as task analysis, or describing guis in a formal manner, or deriving implementations from formal models,. however, what we are trying to do is to look at an existing design methodology, i.e. user-centred design, examine the types of processes and artefacts that are used and find ways of incorporating these into a formal process.



when a designer shows a prototype to a user, there is a discussion about what the prototype will do when the parts shown are interacted with. this forms what we call the narrative of the prototype, the accompanying story which allows the user to understand how it will work and what the various parts do. this allows a simulated interaction to take place which enables the user and designer to evaluate the suitability of the proposed design. the presentation model is a formal model which describes an informal design artefact in terms of the widgets of the design and captures their meaning. it is deliberately abstract and high-level. the presentation model is not intended to replace the informal design artefact, rather it acts as a bridge between the meaning captured by the design and the formal design process



this model describes a ui with two components, p and q(where these may be different windows, or different states of the ui). the entire ui(i.e. the combination of p and q) is described by r and the: operator acts as a composition. p has two widgets, actrol and bctrl, which are both actioncontrols. the behaviours associated with actrl are eaction and faction and for widget bctrl the associated behaviour is daction. q has one widget, csel, which is a svalselector with the behaviours eaction and faction. presentation model r, therefore, is the combination of all of the widgets of p and q and describes the total possible behaviours of the ui.



the following example is an adaptation of an example given by calvery et al. in and. the example involves a home heating control system which is accessible via several different devices, namely a home-based, wall-mounted control panel, a webserver running on a standard pc, a pda and a wap-enabled mobile phone. the control system supports the monitoring and control of temperatures in a number of different rooms as well as overall adherence to ambient temperature levels. for the purposes of our example we use an amended version of the mobile phone application ui which allows us to illustrate our particular points.



our first use for the presentation model is to enable us to include the design of the ui in our formal refinement process. we have previously given a detailed account of this process and it is not our intention to repeat these details here. however we will give an outline of the process and direct the interested reader to.



an application may consist of numerous different screens and dialogues, so maintaining consistency throughout is not a trivial task. one of the things we can ensure, using the presentation model, is that controls which have the same function have the same name(so the user does not have to remember that in one part of the interface they use quit to exit the interface and in another they use close). conversely we can also check, again using the model, that controls with the same name have the same function and this ensures that the user always knows what to expect when they encounter such a control.



the problem with trying to capture the idea of dynamic change of the ui via the presentation model is that that the model gives us a static view of the design. it describes a total environment given by the design(which we can consider to be all of the possibilities of that design), but the(deliberately) simple use of a triple for each widget does not hold enough information to extend its use to dynamic behaviour. one possible solution to this would be to extend the model with additional information. however, we want to avoid making it so complex that it becomes a burden upon designers or formal practitioners to learn and use. we have decided to use another common formalism, in conjunction with the presentation model, in order to be able to prove these more dynamic properties. the formalism that we have chosen is that of finite state machines(fsm).



from the behaviour sets of the presentation models. in this way we can associate the ui functionality of parts of the design with the dynamic behaviour which makes available different parts of the interface to the user. we call the combination of presentation model and fsm in this way a presentation and interaction model(pim).



now, in order to show that a particular behaviour is reachable we first need to show that the part of the ui it is in(i.e. the component presentation model which includes this behaviour in its set of behaviours) is itself reachable in the fsm, and this can be shown using standard fsm methods.



