and the calculus of mobile ambients in a uniform semantic framework. the encodings are bisimulations. a tool for supporting distributed system design and analysis is presented. the tool, which adopts the slender shr as intermediate language, integrates model checking techniques within the framework of(distributed) program development.



synchronized hyperedge replacement, shr, is a graph rewrite system for modelling process interaction in a network environment. in this framework, inspired by, hyperedges are to represent agents, or software components, while nodes are thought of as channels, synchronisation points or, more generally, network communication infrastructure. in shr has been used to provide a labelled transition system semantics of the calculus of mobile ambients.



in the present paper we propose a slender version of shr based on a single, rather intuitive rule of parallel composition. while drammatically reducing mathematical complexity we do not loose in expressive power. two case studies are presented where the mobile ambients and dccs, the distributed ccs of, are encoded in the proposed version of shr. in particular, both models adopt a common recursive graph architecture whose components we call ambient graphs. interpretation maps dccs terms to flat ambient graphs, while mobile ambients are trees. both encodings are proven to be bisimulations(thus improving the result obtained for ambients in).



in section 3 and section 4 we develop two case studies where shr, in the version proposed above, is used to model dccs, the distributed ccs of, and the calculus of mobile ambients. both models adopt a common recursive graph architecture whose components we call ambient graphs. interpretation maps dccs terms to flat ambient graphs, while mobile ambients are trees.



ambient graphs feature two kinds of edges: l(u, v, w, z), called location managers, and p(v, w) representing processes running at specific locations. we use the metavariables u, v, w and z= z1... zn consistently to denote nodes attached to specific hyperedge tentacles. hence, u always denotes a node where the first tentacle of a location manager is attached, and so forth. local processes and location managers are represented graphically by the following in dccs it is possible to move to a dead location, or to kill one. hence we must allow the edges representing such locations to respond to move and kill messages. besides that, they must answer the question whether they are alive(the else action of rule 17). note that a process is allowed to move to, as well as to kill, the same location where it resides(rules 13 and 9 respectively).



this transition is performed by the parent ambient. node zi is shared with the entering ambient m, while node zj is the node shared with ambient n. both nodes are labelled with the same fresh node y. when the actions on zi and zj are matched by their co-actions node y is unified with the nodes passed by m and n. hence, these are unified as well. the node zi does not appear in z1, because m is no longer a child of this edge.



ated by the system may be saved and manipulated by the visual shr editor or, in some cases, translated back into the original calculus. within the editor it is possible to write productions or design system architectures graphically. the visual editor feeds back to the murphi rule generator thus closing the cycle from implementation to testing and back.



