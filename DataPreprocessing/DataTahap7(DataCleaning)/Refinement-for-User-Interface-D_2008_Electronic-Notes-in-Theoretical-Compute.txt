this then is our motivation for investigating refinement for uis, to make sure that what we implement is what we intended. we want all of the guarantees of correctness for the ui that we have for the rest of the system. we therefore need some structured and formal way of transforming our designs into implemented uis, that is we need a refinement process.



this reflects the incremental approach to system implementation we refer to as stepwise refinement. irrespective of what the intermediate steps are(paper designs, mock-ups, partially functioning uis, full implementations etc.) we want a way of maintaining correctness. this approach to ui refinement is different from that proposed in works such as and in that we are not starting from a single system specification which formalises the ui behaviour as one part of the system, but rather extending traditional ui design methods in a non-traditional, formal manner.



this paper consists of two parts. we start by examining some traditional notions of refinement to see how conceptually they may be applied to ui designs. we will use this as the basis for an informal description of ui refinement and show via some small examples how this may be applied. in the second part we will look at how



different refinement methods exist for different formal languages, but generally they can be categorised by a common understanding of what the underlying principles of refinement are. we are interested in how these general principles may apply to the concept of ui refinement. that is, how well do they fit with our intuitions about what refining uis(and ui designs) actually is? we next look at some principles of refinement individually to consider their suitability as principles for ui refinement.



usually when we talk about substitution we are considering observable behaviours of systems in terms of either input/output traces, or interaction with other parts of the system, i.e. behaviour devoid of any notion of visual appearance or cognitive awareness of differences. for uis, however, such visual and cognitive differences are important; if we substitute one ui for another and they are visually different then the user(who in this case is a real person and not some computer process) will be able to tell that the substitution has taken place. rather than considering substitutivity we consider the principle behind this concept, namely that of considering programs as contracts.



through a refinement process our descriptions become less abstract as we add more information, i.e. we become more precise about how data is stored or how operations are carried out. this must be done in a manner which avoids inconsistency, so by making more precise decisions about data and operations we must preserve previous correct interactions. the new version should therefore be a specialisation of the previous, more abstract one. formally, information change must be monotonically increasing(or a least non-decreasing).



another way in which our uis may become less abstract is in their appearance. we may describe in more detail exactly where the widgets are located and what appearance properties they have(shape, colour etc.), so our description becomes more precise.



a pim on the other hand shows the dynamic behaviour between different states of the ui. it consists of a finite state automaton with a relation between states and component pmodels within a presentation model(a pmodel is a component description of one part of the ui). when the pim is in a particular state it indicates that the ui represented by the presentation model related to that state is currently active, and all behaviours of that presentation model are available to a user.



in order to maintain our contract with the customer the new ui needs to at least provide all of the functionality of the previous ui(and any new functionality has to be consistent with the old). we start by considering the system functionality of the ui, that is the s behaviours. if we provide a ui which enables a user to interact with the system in n ways, then any replacement ui must at least provide the same n ways of interacting. in fact, we make a stronger statement than that and say that it must provide exactly the same n ways to interact. we will discuss this shortly.



this concept relates to the position and style of the widgets as well as the overall layout appearance(such as background colours, window size etc.). these are the low-level details of the ui which are not included in the presentation model and so we cannot use these, or pims, to check that a ui is more defined than some other ui. however, in cases where the only refinement said to have taken place is that of defining appearance, we can check, via the presentation model and pim, that this is really the case.



there are some things we have identified as being desirable for ui refinement which relate to parts of the ui not covered by the models. for example, visual aspects of making appearance less defined(by deciding on colour schemes, appearance styles etc.) cannot be checked using presentation models or pims. the formal models are concerned with behavioural aspects of uis, types of widgets of uis(by which we mean their category) and dynamic movement within the ui, which determines availability of behaviour. if we wish to create a formal definition of ui refinement based on our existing models we must accept that there will be some limitations.



we could argue that those things which we cannot test for are not important considerations, and that the functionality of a ui is the same regardless of whether its background is blue or yellow for example. however, we are mindful that usability considerations are important, and these are things which may be affected by aesthetic decisions. we accept that these remain outside of our work and maintain our belief that our methods should be used in conjunction with more traditional design methods, which includes usability testing designed to ensure we do not reduce usability.



(by which we mean from outside of the chart and for our considerations we can imagine this to be the user) and responded to by the chart. the set of signals given in the rectangle at the right hand side of the chart(which in this example is empty) represents the output interface. only signals in this set will be visible outside of the chart. the rectangle at the bottom of the chart contains the set of signals which the two parts of the composition can use to communicate with,



