wireless sensor networks(wsns) are distributed computer systems composed of a large number of small sensor nodes. there are many potential application areas. the nodes have three main tasks: sensing their environment, processing the data and communicating with the other nodes. all the nodes are identical, except one or several sink nodes. a sink monitors the network. it collects the data and sends



the lustre model is 1500 lines long. it has been developed by k. baradon and a. vasseur, two master students of the telecom department of inpgrenoble. it includes detailed energy models for all hardware parts that have a significant energy consumption. the connection to validation tools has been established.



in an accurate sensor network model, the various modes of the radio and their associated consumption should be detailed. moreover, the way the mac protocol triggers mode changes has to be described. this is because we want to observe properties related to energy consumption. other properties like latency, throughput, bandwidth utilization or fairness are secondary.



even if the radio consumes a lot, the energy used to process data cannot be neglected. according to yuan and qu, the processor is responsible for a consumption of 30 percent of the total consumption of the node. moreover for some mac protocols the micro-controller can be responsible for more than 90% of the total energy needed to receive one data packet. a technique used to optimize the energy consumed by the micro-controller is dynamic voltage scaling(dvs). dvs consists in adapting dynamically the voltage of the micro-controller according to the load. this modifies the tradeoff between the consumption and the efficiency of the mcu. when the voltage is low, the consumption is low too but the micro-controller works slowly. this idea can be used in sensor networks.



the consumption of the memory is less important but researches are conducted on this topic[5,15]. if we want to take memory consumption into account, we should include the description of the memory consumption, depending on the type(ram, flash,...). some memories can have a standby mode in which they cannot be read or written to, but consume less. in order to read or write, one has to put the memory in normal mode first. such a mechanism may also be driven by explicit operations in the object code of an application program, if a static analysis has identified pieces of the program during which some variables need not be accessed.



some of them need random values(e.g., the protocols). all the random values needed in the components are exposed as explicit inputs, connected to global inputs of the model, and then to an external generator. we could use a call to an external c function locally, but exposing the random value as an input is better for analysis purposes, because explicit abstractions can be made on its value.



is the right modeling since the physical node itself is a synchronous circuit. between the sensors however, it is not the case. although the physical nodes of a sensor network do have a physical clock, these clocks cannot be assumed to be synchronized during the whole lifetime of the network. modeling the whole network is therefore



the model should describe what happens precisely in the communication medium, i.e., the air in which the radio transmission occurs. we could even include electromagnetic perturbations, or other similar phenomena. all these modeling aspects are grouped in a lustre node called channel that knows about the topology of



exploiting the various energy modes of hardware devices may be done in several ways. our global model should provide a way to model any solution. consequently, we provide a coordination between the model component that represents the application code, and the energy models of the cpu and the memory(see also section 4.3).



the state is encoded by an integer or by a vector of boolean values, depending on what we want to do with the model. for simulation purposes, it is better to use an int, but for validation purposes it is usually better to exhibit boolean encodings wherever it is possible(because the exploration of the model becomes decidable). the transformation between the two forms can be done automatically in lustre.



to switch between modes, because of its very small order of magnitude, compared to other times in the global model. but it could be done easily(see the principle on the radio model). the consumptions to be attached to the states are taken from the documentation of the stmicroelectronics sram ds2016.



in this paper we consider that the protocol layers are implemented in software. in order to include them in our global model, with the appropriate level of detail, we need to consider their object code. indeed, when some software element drives the energy-saving mechanisms of the hardware, it is visible at the granularity level of the machine instructions. an assembly-line code can be easily described by an automaton(the control graph of the program), and that is what we do here. the automaton is then encoded into lustre.



the mac protocol implemented in lussensor is a preamble mac protocol(see, for instance, wisemac). each node periodically checks whether the channel is free. if the channel is busy, the node will let its radio on to get the packet that follows the preamble. otherwise, it goes back to sleep mode. to avoid collisions we implement a back-off: the sender has to wait for a random time before emitting anything, then it scans the channel and if the channel is clear(clear channel assessment, cca), it sends the preamble and then the message. otherwise, it delays the emission by setting a timer at random between 0 and cwmax. a preamble precedes each data packet for alerting the receiving node. all nodes in the network sample the medium with a common period.



the application code is a simple algorithm that emits the value sensed on a regular basis. it has 8 control states, and computes the commands mode sensor, mode cpu, mode flash and mode ram to be connected to the corresponding inputs of the hardware device models. for the moment, the values of these commands are entirely defined by the control state. the effect of any static analysis that would insert such commands in the object code of the application can be easily included in our model. in lussensor, the channel is the part of the global model that takes care of the air where communications take place, and knows about the topology of the



because network simulators are extensively used in the network community research, many relevant simulators have been developed. ns-2 is a packet-level simulator that was first designed for wired networks. ns-2 is a discrete event simulator. the interest of having one single simulator is to enable comparisons between different protocols without the need to implement the protocol we want to compare with. indeed, ns offers a large protocol library. however, ns is not really scalable: it is convenient for simulating a few hundred nodes only. because one of the key issues in sensor networks is power consumption, people began to develop simulators that take the energy consumption into account.



avrora is written in java and is cycle-accurate. it is able to execute the binary code of an application. the efficiency of the simulation relies on a quite complex synchronization pattern which in fact constitutes the model of the radio. for the environment, models are still needed, and the interaction between a model of some component and the exact description of another component is not formalized. it would be hard to use this framework to play with various abstractions.



tossim is the simulator dedicated to tinyos applications. tossim does not provide a model of the consumption. to overcome this limitation, it has been extended with powertossim. in powertossim, each state of the cpu, radio and eeprom is associated with a cost. running the simulator computes the energy consumption of each node.



none of these simulators uses a formal model that could be used for validation. on the other hand, the formal validation community does not seem to have started working specifically on sensor networks. to our knowledge, there is no other approach for the formal and global modeling of sensor networks, for which we can hope to use validation tools. some experiments in modeling and analyzing sensor networks have been made with tools like hytech or uppaal, but the



lucky[10,11] belongs to the lustre toolbox. it allows to describe non-deterministic reactive behaviors as sets of parallel communicating automata with weights representing probabilities. a lucky component may be used in our global model to replace any of the lustre components, provided it has the same input/output interface.



abilistic modelings that have been proposed for these phenomena in the network community. the lustre model is an appropriate platform for these experiments. a similar use of lucky would be to replace a part of the network(a subset of the nodes) by a traffic generator, i.e., a non-deterministic process that generates the states of the channel for the remaining nodes. this is related to the next point,



details on the behavior of the computing parts. indeed, as mentioned in section 5, the mathematical models used for the performance evaluation of protocols are too simple when it comes to representing complete protocol stacks or complex radio channel behaviors(i.e., collisions).



samper, l., f. maraninchi, l. mounier, e. jahier and p. raymond, on the importance of modeling the environment when analyzing sensor networks, in: proceedings of international workshop on wireless ad-hoc networks 2006(iwwan 2006), new york, united states, 2006, p. 7.



