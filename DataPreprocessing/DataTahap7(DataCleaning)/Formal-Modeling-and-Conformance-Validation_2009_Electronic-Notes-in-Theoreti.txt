in this paper, we use reo and constraint automata with state memory(casm) for modeling choreographies and conformance validation. reo is an exogenous coordination model wherein complex coordinators, called connectors, are compositionally built out of simpler ones. constraint automata and its variations, e.g., casm, are proposed as operational semantics for reo. the advantage of reo is that reo circuits can be used for modeling both communication and coordination of web services[18,27,28]. in we proposed a mapping from bpel to reo and ca(simple form of casm). regarding to this merit of reo and our previous work, in this paper our goal is to build up a unified formalism for both choreography and orchestration, and use it for automatic analysis of conformance in choreography and orchestration. we present a slightly modified version



casmchcompositionally. then, we define end-point projection on casmch which results in the behavior of a given party in a choreography in the form of casm. then we present the simulation relation in casm and use it for conformance analysis of choreography and orchestration.



the structure of this paper is as follows: section 2 contains a brief description of reo and casm. an overview of ws-cdl and our proposed model for wscdl components are provided in section 3. the theory of addressing the endpoint projection and the conformance problems are presented in section 4, while its practical example appears in section 5. finally, the previous related works and our conclusions can be found in sections 6 and 7, respectively.



a choreography can be recognized as a container for a collection of activities that may be performed by the participants. in our model, each participant is considered as a reo component. in order to make the casm proper for modeling activities, we impose a convention on its name set to include two parts: component name and port name instead of just one part, port name. on the other hand, in ws-cdl, variables which are used for holding information and values of states are uniquely identified



formally, a complete ws-cdl model is described by a set of choreographies. a ws-cdl choreography description is essentially a container for a collection of activities that may be performed by one or more of the participants and consists of three parts: choreography life-line, choreography exception blocks and choreography finalizer blocks. the choreography life-line expresses the progression of a collaboration through enabled activities and enclosed choreographies. activities describe the actions performed within a choreography. the basic building block of a choreography is the interaction activity which results in an exchange of information between participants while the control-flow among activities is described by ordering structures activities.



or abstract organization. a roletype enumerates potential observable behavior a participanttype can exhibit in order to interact. a relationshiptype identifies the mutual commitments that must be made for collaborations to be successful. in our model, participanttypes can be considered as components in a reo circuit, a roletype is a group of ports which implements its observable behaviors(each behavior can be implemented by a port in components) and the relationship type will be the connections in reo circuit which determine which components can interact with each other.



a channel realizes a point of collaboration between participanttypes by specifying where and how information is exchanged. within ws-cdl, channels are abstractly modeled as channeltypes. as channels in ws-cdl may be one-way or two-way, and in reo each channel can only have two ends, we modeled each ws-cdl one-way channel by a sync channel in reo and the ws-cdl two-way channel is modeled by combining two one-way channels.



activities describe the actions performed within a choreography. ordering structures combine activities with other ordering structures in a nested structure to express the ordering rules of actions performed within a choreography. in our model, each basic activity is modeled by a component whose behavior is specified by a casmch. the ordering structures of activities(control flow activities) are modeled and visualized by reo circuits coordinating the activities.



in order to investigate the conformance of a given party or orchestration to a choreography, end-point projection must be performed. in this operation, the desired behavior of a party(end-point process) is extracted from a choreography(global description). in our approach, each choreography can be modeled by a reo circuit. in order to extract the behavioral interface of a choreography with respect to a certain participant, we shall hide all the nodes in the reo circuit except the nodes of the desired component. accordingly, the external behavior of a component can be extracted from the ca of a reo circuit by applying the hide operation defined for ca. therefore, as an advantage of our approach, we can use the already defined operator in our formal model, the hide operator, for end-point projection. after end-point projection, the conformance problem is reduced to comparison of the behavior of the given party(implementation) with the specification extracted by end-point projection. again, the simulation relation defined for ca can be a satisfactory definition in this regard. although, in comparison to ca, some changes in



according to each orchestration described by bpel can be specified by a reo circuit and its corresponding ca. in our reo circuit extracted from a bpel code, we can also hide the internal behavior and only keep the observable behavior(abstract bpel process). since each ca can be considered as a special case of casm, we can have the behavior of each orchestration in the form of a casm. thanks to this unified formalism, after end-point projection, the conformance problem is reduced to the examination of the casm obtained by end-point projection and the casm of the orchestration.



in ca, the input and output actions and also termination and deadlock states are not distinguished. on the other hand, as mentioned before, we abstract away from internal actions of a web service by hide operation and use abstract bpel processes. after hiding, we have no information about the internal actions of web services and the casual relationship between messages. in our conformance definition, we assume a web service conforms to a choreography if every action allowed by the web service is also allowed by the behavioral interfaces extracted from choreography by end-point projection, i.e. an orchestration that performs actions which are not foreseen and desired by the choreography, may disturb the communication of web services. hence, there should be no action in the web service that is not foreseen by the choreography. this is obtained when in each state all possible actions of the web service(all possible transitions in the casm that can be traversed) are a subset of the possible actions desired by the choreography. in other words, conformance is obtained when the satisfaction of the data constraints in each transition in each state of the web service implies the satisfaction of the data constraint of the corresponding transition in the casm of the behavioral interface. this examination can be implemented by utilizing the predefined concept in ordinary ca, the simulation relation. but here, we need to customize the simulation definition of ordinary ca with respect to the notions in casm. in the following, we define the simulation relation in casm and show how to exploit that for conformance validation.



now as an example, we consider bartering protocol used in[4,25] with some changes. in this system, the buyer repeatedly asks for a quote from seller until he agrees with the quote and places an order. for this purpose, a workunit is used in which there is a condition that governs the repetition, namely barteringdone= false and accept= false. for the sake of simplicity, instead of its ws-cdl code, its pseudo-code is shown in the following(a@r means variable a of role r):



busi et al design a simple choreography language cl whose main concepts are based on ws-cdl. this language covers a few constructs, nevertheless it offers a starting point for the design and analysis of choreography. gorrieri and others give a deep analysis of interaction patterns in the ws-cdl specification by taking into account the alignment property, whose meaning is related to the possibility to control when the interaction completes. the work in proposes a small language, cdl, and its operational semantics as a formal model of simplified ws-cdl. verification of some properties are also presented in a choreography sample using spin model-checker. a more complete work on formal specification of ws-cdl can be found in in which the semantics of ws-cdl is presented in terms of process algebra csp.



the end-point projection operator on casmch whose outcome is in the form of casm. regarding to our previous work in which the bpel orchestration language is modeled by reo and ca(the simplified form of casm), both of the orchestration and end-point projected choreography can be presented with a unified formalism through which conformance problem is resolved by defining the simulation relation. the practical application of our work is illustrated in a bartering protocol.



