experience in the area of test and verification of avionics controllers all kinds of faults, errors and anomalies have been observed and detected by our workgroup. the obvious next step is to classify the encountered faults. based on the fault models commonly used in semiconductor fault diagnostics we applied these models and methods and provide a complete strategy for locating faults in distributed embedded systems within their environments. the methods, techniques and tools illustrated here rely on preceding investigations, which have been documented in.



grey-box tests with respect to inter-controller communications: during system integration testing, network monitors are typically available to record at least a portion of the data exchange between communicating controllers. for example, afdx monitors and arinc 429 monitors can be used to record snapshots or specific types of data packages. some communications, however, often cannot be observed, such as, for example, the data exchange between redundant faulttolerant controllers.



the fault tree[11, pp. 43ff] constructed in step 3 depicts the possible error hypotheses, together with the boundary conditions which must hold in order to make a hypothetical error cause the observed failure on the interface between sut and testing environment. the error classification used for each component follows the fault models introduced in[7, pp. 13ff] and the fault tree construction technique described in[7, pp. 6ff]. in the diagnostic procedure described here we omit the possibility of an external intruder(see) because we are dealing with a closed system whose components are well-known.



if the hypothesis holds, an additional test stimulating v0 can be executed. if it passed then this implies that v1 was not lost within the sut. in our case, the hypothesis is fulfilled by the sut implementation. therefore an additional test can expected to mark the sensors as failed. if this occurs, we have proven that sensor state changes of sd5,6 are not lost within the sdcu. since the sut implementation really shows the expected messages, a signal deletion error can be excluded.



in our case, we perform a test where sd5 stays continuously in state alarm, while the state of sd6 is toggled between standby and alarm. then, in a correctly operating sut, an output compalarm=1 should occur if and only if sd6 is in state alarm. in the following test log, it can be seen that no compartment alarm for comp2 is raised because only sensor sd5 is in state alarm whereas sensor sd6 remains in state standby. this is the expected behaviour.



in our case, all fault hypotheses but the potential stuck-at-0 fault can be falsified by means of additional tests. the internal structure of the sdcu must be taken into account, so that the global input variables sensorsdsalarm[] of the processmessages() method become visible. an additional unit test of this method reveals the presence of a stuck-at-0 fault within this method.



our experience has shown that it is possible to locate any kind of fault when following the presented procedures(and refinements). being state of the art for semiconductor error diagnostics, to our knowledge the presented strategy for fault detection is not yet commonly used within the area of distributed embedded systems. through the tight integration of the procedures with the tool chain a reliable and efficient way of testing is introduced. the tool chain, consisting of the rt-tester, its user interface(rttui) and the interval analyser, can be supplemented by tools 10 like relex fta or isograph faulttree+ for fault tree analysis.



