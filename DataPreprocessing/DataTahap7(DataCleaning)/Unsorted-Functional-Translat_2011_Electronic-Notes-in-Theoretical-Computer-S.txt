the functional translation is often introduced using a many-sorted first-order language to simplify presentation. this means, in practice, that we need to either use a theorem prover that handles many-sorted first-order logic(e.g., spass) or simulate sorts in unsorted first-order logic introducing additional one-place predicate symbols. both alternatives might have an impact on performance when we attempt to carry out automated theorem proving.



in sections 2 and 3 we introduce the basic and the optimized functional translations. to make the article self contained, we include the original proofs of soundness, with minor corrections and adaptations to accommodate nominals and other hybrid machinery. based on these proofs, we develop in section 4 our main result: when reasoning over any modally definable class of models it is safe to erase sort annotations from formulas obtained using the(optimized) functional translation. in section 5, on the other hand, we prove that sort erasure is not sound when reasoning over a class that is definable by a pure, hybrid axiom, by providing a concrete counterexample.



ohlbach and schmidt take advantage of this observation and prove that it is sound, in terms of satisfiability, to swap two consecutive quantifiers. therefore one can take a formula obtained using the basic functional translation and simply make all the existential quantifiers come before universal ones, effectively avoiding the introduction of skolem functions. this is exactly what the optimized functional translation does.



the proof is analogous to the one for theorem 3.5. proposition 2.5, which states that in the many-sorted case we can assume every satisfiable formula to be satisfied by a maximal model, is a key ingredient in the proof of correctness of the optimized functional translation. for the basic case we have an analogous for g-maximal models:



when dealing with functional translations, many-sorted first-order logic is undeniably useful for presentation reasons. in this article we discussed in which cases many-sorted logic is needed also for technical reasons. we proved that as long as reasoning is confined to classes of models closed by disjoint unions(e.g., modally definable classes) sorts can be eliminated.



of course, the empirical advantages of eliminating sorts need to be assessed. one could in principle pick an off-the-shelf automated prover and benchmark its performance on a number of functionally translated formulas(generated at random or from a given domain), both with and without sort annotations. however, it is not at all clear if one is warranted to extract meaningful conclusions from this sort of black-box experiments. e.g., absence of noticeable differences may be due to a bottleneck in the clausification process, or even a prover implementing an heuristic that amounts to erasing sorts; better execution times for the unsorted case may be due to a deficient handling of larger formulas, etc.



this article shows that the functional translation adapts surprisingly well to the hybrid case(see, for comparison, the case of the layered translation in). schmidt established in that, when restricted to the basic modal case, any refinement of resolution plus the(eagerly applied) condensing rule is terminating for the output of the optimized functional translation. most first-order theorem provers have factoring and subsumption deletion rules, and hence condensing is in fact implicit when the implementation is fair. this means that any standard(complete and fair) resolution theorem prover used along with the optimized translation constitutes a decision method for the basic modal language over the class of all models. termination conditions for some frame classes were also investigated. as future work, it would be interesting to see if termination can be achieved in the case of h(@).



