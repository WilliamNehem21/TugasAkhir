the development of common exchange formats for graphs and graph transformation systems is an ongoing initiative within the eu working group appligraph(applications of graph transformation). the author is reporting on the current state of this format discussion. the formats are based on the extensible markup language xml developed to interchange documents of arbitrary types. graphs are basic structures in various areas of computer science. a common format for graphs supports the interaction of software developers building tools wrt. graph layout, graph algorithms, graph transformation, reengineering, etc. moreover, within the graph transformation community tool builders can even gain from a common exchange format for graph transformation systems.



graphs are a very general data structure used in various fields of computer science and other sciences. to support interoperability between various graphbased tools an ongoing initiative on the development of common exchange formats for graphs and, further on, graph transformation systems has been founded within the eu working group appligraph. these formats are based on the extensible markup language xml developed to interchange documents of arbitrary types. a first outline of an xml-based exchange format for graphs together with a detailed motivation for such a format has been given in.



the main purpose of the extensible markup language xml is to provide structured interchange facilities for documents and is meant as a replacement for ascii. documents described by xml have tree-like structures and consist of certain entities which contain parsed or unparsed data. originally xml has been designed to store text documents, nowadays it is more and more used to exchange well-defined data structures between software tools. in this sense, we want to use xml to exchange graph structures and graph transformation systems.



an xml document is valid if it has an associated document type definition(dtd) which describes the abstract syntax of the document and if the rest of the document is structured according to this dtd. a dtd provides a grammar for a class of documents. the grammar consists of markup declarations for elements, their attributes, entities or notations. examples for dtds are given in subsections 3.2 and 4.2. it is an ongoing activity in various areas of computer science and further fields to define dtds for certain classes of document structures. a survey of already defined xml applications and industry initia-



similarly to dtds the purpose of xml schema is to define a class of documents, in fact xml schema provides functionality which goes above and beyond what is provided by dtds. the specification of xml schema is still work in progress. it can be assumed that dtds will be translated into xml schema after standardization. the following features of xml schema should be mentioned: unique name spaces for each element, types which can be extended, restricted and redefined as well as abstract elements and types. after standardization of xml schema we intend to translate the dtds and logical models developed for graphs and graph transformation systems so far into xml schema. a first approach can be found in.



two common application programming interfaces(apis) for xml parsers have been developed: dom(document object model) defines the logical structure of well-formed xml documents and its manipulation. a dom model is ideally used as abstract syntax structure of a document serving as a basis for appropriate textual or graphical representations. another api interesting for xml parsers is sax(simple api for xml) to be used for event-based parsing of xml documents. several xml-based parsers implementing the interfaces sax and dom are available now, see e.g. xerces. xml parsers also support the validation of a document against a certain dtd, similarly there is initial support for xml schema.



graphs are very general data structures which occur in various fields of computer science. but there are lots of different graph models, dependent on their application context. considering graphs as they are used for graph layout, graph transformation and reengineering, the exchange format should be able to deal with directed and undirected graphs, hypergraphs, hierarchical graphs, graph types and attributes. in the following discussion, the concrete layout of a graph does not play a role, since there is already the markup language svg(scalable vector graphics) for this purpose. furthermore, there is graphxml another xml based graph interchange format used for graph drawing and visualization. moreover, we will not go in details concerning graph attributes. such a general data structure can be attributed with nearly everything. a first outline of gxl(graph exchange language) together with a detailed motivation for such a format has been given in.



each graph element is an attributedelement which can have a set of attributes. each attribute has a name, a type and a value. the value can be a primitive value, a container or a complex value which might be located in another document.



hierarchical graphs can be stored in several ways: by refinement of graph elements, by attributes or special edges. a complex attribute value could be a graph again such that hierarchical graphs can be described. here, it is not possible to have edges between graphs in different compound nodes. another possibility to store hierarchical graphs are special refinement edges(to be distinguished by member kind of an edge). in this case, hierarchical graphs with edges between nodes and compound nodes can be described very generally. another possibility to store hierarchical graphs is to allow graphs to be graph elements again. this solution is rather restrictive, since it does not allow to refine edges by edge bundles. but it seems to be a good idea to incorporate this possibility into the model to increase the readability of simple hierarchical graphs.



building up on gxl as exchange format for graphs we consider the exchange of graph transformation systems now. such a format, called gtxl in the following, is of interest within the graph transformation community to interchange not only graphs but also graph rules, control structures, etc. of graph transformation systems. the graph transformation tools available so far put their main emphasis on different aspects. for graph transformation convenient interpretation, analysis of rules and transformations, or code generation is supported, but not by one and the same tool. a common exchange format



the operations can be grouped in an opgroup which is a certain controlstructure being again an operation, e.g. rules can be grouped in transformation units which are operations themselves. each operation can have a list of parameters where each one contains a name and a ptype. a special operation is a rule which consists of two rulegraphs and a mapping. a rulegraph contains not only a graph, but also a set of conditions which may be used as preor postconditions. these conditions can be attrconditions containing boolean expressions on attributes or graphconditions. each graphcondition contains a mapping and a rulegraph again such that graphconditions may be nested. each mapping consists of a set of mapelements running between two graphelements. a rule may have an additional embedding part where the embedding of the right-hand side rule graph into the context graph is specified.



several graph transformation approaches support negative application conditions. this kind of conditions can be describe as graph condition with a mapping from the left-hand side of the corresponding rule to another graph containing additional graph parts expressing what is not allowed. moreover, the logical model allows to nest graph conditions such that implications are possible.



gtxl is intended to function as an exchange format for all the main graph transformation approaches such as node replacement, hyperedge replacement, single and double-pushout approaches, algorithmic approaches, etc. as presented in. the main concept of graph transformation systems is that of rules. though it would beinteresting to compare the format definition of gtxl with the rule markup language(ruleml) developed in the area of artificial intelligence.



finding a common xml-based exchange format for graphs and graph transformation systems is an ongoing initiative within the eu working group appligraph. currently, common logical models are discussed and we plan to fix a kernel of the format in march 2001. preliminary versions of the formats are already implemented in several graph-based tools to gain experience with the xml technology. moreover, the new xml-based formats can be used as new storing formats for graphs and graph transformation systems which are human-readable. it is our hope that the common formats we decide on soon will be supported by various graph-based tools and increase their interoperability heavily.



