a wireless sensor network(wsn) is an ad-hoc wireless network made of sensor nodes which are able to monitor events(e.g. seismic activity, animals moving in a forest, enemies or intruders entering a monitored area, chemical agents), to process the sensed data and to communicate these data to a central node, the sink. the sink is a powerful base station which gathers data sensed in the network and either processes them or acts as gateway to other networks.



sensor nodes are typically battery powered, making sensor networks highly energy constrained. replacing batteries on hundreds or thousands of nodes, often deployed in inaccessible environments, is infeasible or too costly. therefore, a key challenge in a wireless sensor networks is the reduction of energy consumption. for this reason most of the research in this field is focused on the development of energy efficient media access control(mac) and routing algorithms.



nowadays security architectures for sensor networks(see for example[6,9]) implement ciphers such as rc5 or skipjack. these algorithms can be considered secure and efficient in some environments. nevertheless the current de facto advanced encryption standard(aes) is rjindael which is not usually adopted on sensor nodes. indeed the limited processing and memory resources on sensor nodes, make the rijndael implementations not efficient and thus slow in running time.



we observe that the performance provided in are in contrast with those provided in. indeed in, rc5 is reported to have a speed higher than rijndael. all the above experiments have been performed in standalone mode, namely without interaction with the os. most of the ciphers code used in, has been taken from openssl as it is, without any particular optimization for the eyes platform. this justify a further effort in implementing a rijndael algorithm for eyes hardware which is smaller in size and provides reasonable speed performance.



in the authors use an aes implementation, but they do not provide any performance evaluation. in the authors quantify the energy cost of authentication and key exchange based on a public-key cryptography on the 8-bit atmel atmega128l microcontroller platform. they also used an aes assembly implementation for symmetric encryption/decryption.



the paper evaluates tinysec performance by experiments. tinysec energy consumption, even when used in the most resource-intensive and most secure mode, is a modest 10%, and the low impacts on bandwidth and latency prove that software based link-layer security is a feasible solution for sensor networks. the same authors recognize, however, that end-to-end security mechanisms are still useful in sensor networks and may effectively complement tinysec.



single shared key. in this case all the nodes in the network are provided with a single shared key. key distribution is simple, indeed a common assumption is that the shared key is loaded into nodes before deployment. however this mechanism cannot protect against tampering. in other words if an adversary can break a node and access the shared secret, she can eavesdrop on traffic and inject messages in the network.



per-link key. in this case two nodes share a key if and only if they can communicate, namely if they are neighbors. thus, each couple of nodes share a distinct per-link key. this implies a quite challenging key distribution mechanism, but enforce an higher security level. indeed, even breaking a node, an adversary can only eavesdrop traffic directed to the broken node and possibly inject traffic to its neighbors. an evolution of this scheme is group keying which also allows passive participation and local broadcast.



in this paper we present an end-to-end security system based on rijndael. our system can run on top of tinysec; at the moment, we demand message authentication and integrity, to the underlay link-layer protocol. we stress that while tinysec is fully implemented, our work is focused on ciphering messages at application level with rijndael and generating and exchanging keys.



in the previous sections, we have motivated the choice of rijndael as our reference encryption algorithm. rijndael guarantees high security, but in order to build a secure system, we must prevent adversaries from learning even partial information from an enciphered message. the initialization vector(iv) and the mode of operation, have a great impact on the quality of a secure system. in the following, we briefly discuss the use of these two elements in our system.



on the contrary, in our solution we do not modify the message size. we use a standard tinyos packet, just using two bytes of the payload to store the iv(16 bits). this solution has the benefit of minimizing the impact on the communication layer. indeed all the operation on the iv are performed at application layer. furthermore observe that since we only work on the payload, we are fully compliant with tinysec.



in our opinion, en-decryption speed is not the main constraint for a secure wireless sensor network scenario. indeed as long as latency of the wsn communication protocols will be so high(few seconds), we will be allowed to spend few millisecond to encipher a message with the aes algorithm. in this work we have presented an implementation of rijndael smaller in size than previous implementations(from about 1/3 to about 1/5). however our aes implementation shows reasonable speed performance(slower than rc5 by a factor 2). we plan to extend our work in order to define a fully implemented end-to-end solution and to investigate the energy efficiency of rijndael.



