quadtrees have proved popular in computer graphics and spatial databases as a way of representing regions in two dimensional space. this hierarchical data-structure is flexible enough to support non-convex and even disconnected regions, therefore it is natural to ask whether this data-structure can form the basis of an abstract domain. this paper explores this question and suggests that quadtrees offer a new approach to weakly relational domains whilst their hierarchical structure naturally lends itself to representation with boolean functions.



to be able to capture some higher dimensional relationships as well. although the quadtree domain elements are purely spatial, intuitively, these elements derive from collections of quadtrees, each quadtree in a collection being over a pair of variables. the pairs of variables are not necessarily disjoint, therefore the various quadtrees in a domain element interact via their intersection in higher dimensional space. the domain is weakly relation since the higher dimensional relationships are induced by two dimensional relationships over quadtrees.



this section spells out how quadtrees can be represented in terms of their two dimensional projections. it then gives spatial definitions of the domain operations that reduce to operations on each two dimensional projection. however, there are several possibilities as to how a two dimensional quadtree might be realised, and this choice is delayed until the following section.



assignment can be handled as in the tvpi domain by introducing a fresh variable. consider, for example, the assignment x:= x+1. this becomes x'= x+1, which is abstracted and the meet of the result with the current domain element is calculated. x is then projected out and x' is renamed to x. note the importance of variable elimination to this approach.



as noted by the choice of widening is key to getting a domain to perform well in an analysis. one widening for quadtrees naturally suggests itself: increase the granularity as the number of iterations increases. formally this is as follows(and is parameterised by a function associating an iterate with a granularity).



a quadtree over x and y, qn, has associated with it 2n variables. that is, one variable for each dimension and each permitted square size. these variables will be referred to by xi and yi, where i is the power describing the width of the corresponding squares. it is important to note that when the same axis occurs in different quadtrees, the same boolean variables are used. satisfying assignments over these variables then correspond to the region of interest described by a quadtree.



the encoding of a quadtree as a bdd is straightforward. the four children of a node in the quadtree become four leaves of a bdd over two variables. that is, the nodes correspond to(xi, yi) pairs as follows: ne to(1, 1), nw to(0, 1), sw to(0, 0), se to(1, 0).



the counterpart of the reduced disjunctive normal form of bdds is conjunctive normal form, here not reduced. the clauses can be thought of as each describing a region of the grid not captured by the quadtree. that is, a counter-model to each clause describes a region not in the quadtree.



the work contained in this paper can be viewed as a weakly relational domain that is to finite powersets of intervals, as tvpi is to polyhedra. the use of finite powersets of intervals has received some attention recently. in the authors are concerned with widenings for powerset domains in general, whilst in the focus is on how to analyse across paths(something that powerset domains are well suited to) whilst retaining the more attractive computational properties belonging to the base domains owing to their path summarisation.



in the context of bounded model checking quadtrees have been used to model electrical fields as part of a system to diagnose spirals of electrical activity indicating cardiac abnormalities. note that spirals are particularly suited to the widening presented in section 4.8. finally, the paper uses quadtrees with back arcs in order to define fractals, which suggests that quadtrees can have dense representation akin to bdds with back arcs.



quadtrees have a vast literature. they have been generalised to higher dimension(octrees) and applied in diverse applications. they do not necessarily have to represent a square grid structure which offers another degree of expressive freedom. exploiting the quadtree literature is one avenue of future work. in tandem with this existing implementations of quadtrees will be investigated for their suitability in program analysis. theoretical questions such as optimality of the operators presented remain open, and such questions will be subject to further enquiry.



in it is noted that successful analyses result, in part, from careful selection of component domains. this motivates research into new domains that might earn their place in the toolkit. it is not yet clear how effective quadtrees will be for program analysis, therefore the advantages and disadvantages of quadtrees are given by way of summary. advantages include:



the authors would like to thank sagar chaki and arie gurfinkel for making available ahead of publication. they would also like to thank karl newman-smart for discussion and his help with the diagrams. finally they would like to thank the anonymous referees for helpful comments.



