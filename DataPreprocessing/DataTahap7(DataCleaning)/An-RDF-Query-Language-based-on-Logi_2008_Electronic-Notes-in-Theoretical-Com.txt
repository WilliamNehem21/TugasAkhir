in this paper we investigate an extension of xquery for querying(and inferring) from rdf documents. following a graph based approach for specifying queries against rdf, xquery is extended with construction of answers and boolean predicates for rdf entailment relationship inference. we will also study how to implement it in logic programming by using logic rules for executing rdf/xquery queries.



xquery[27,8] is a typed functional language devoted to express queries against xml documents. it contains xpath 2.0 as a sub-language. xpath 2.0 supports navigation, selection and extraction of fragments from xml documents. xquery also includes expressions to construct new xml values and to join multiple documents.



in recent papers[2,3,1], we have proposed a logic programming based implementation of the xpath and xquery languages. such implementation allows to express xpath and xquery queries in logic programming. with this aim xml documents are translated into a logic program by means of facts and rules, and an xpath/xquery query is executed by specializing the logic program representing the input xml document and generating one or more specific goals for the query. from the computed answers for the goals we are able to rebuild the output xml document.



it allows the querying of rdf/xml documents but also the construction of the answer by means of an xml document. in particular the answer could represent the serialized version of a rdf document. therefore we are able to work with xml/rdf documents as input and as output.



in addition, we will present how to implement such extension of xquery in logic programming. with this aim we have to represent rdf documents in logic programs, and we have to define logic rules for inferring information from rdf statements. finally, we have to describe how to translate xquery expressions involving rdf queries into logic programming.



xquery can be adapted to the handling of rdf documents by means of some kind of serialization of rdf documents in xml. such serialization allows queries on rdf documents to be expressed by means of(extensions of) xpath. this serialization has been followed in previous proposals[18,28,9,21,13] on extensions of xpath, xquery and xslt for rdf. however, in our opinion, we can define an extension of xquery by using triple based syntax for representing rdf queries, similarly to sql-style proposals for rdf[15,16,12]. the advantage of such triple based syntax is that queries do not depend on the selected serialization. moreover, in most of proposals serialization makes queries are too sophisticated.



on the other hand, one of the advantages of our proposal is that xml/rdf documents can work as input and as output. some proposals about rdf query languages lack on the construction of the output as new rdf triples. however, our approach generates xml documents as output of rdf queries and therefore it allows the composition of queries. xquery allows to specify the xml format of the output document and therefore the output can be expressed as an xml document and also as a serialization of rdf.



finally, we will describe how to implement such extension of xquery in logic programming. we have described in our previous works[2,3] how to implement xpath and xquery in logic programming. therefore we have now to describe how the extension to rdf is achieved.



firstly, rdf documents can be represented by means of facts. we follow a different approach to, because our formalism represents triples with a predicate called triple and a fact for each triple(subject,property,object) of rdf. however, the representation contains only the basic triples and therefore specific rules has to be defined for those entailed by the rdfs semantics.



each fact for triple represents each triple of rdf. in addition, we have to number each triple(according to the rdf semantics there is no order between rdf triples and therefore any numbering identifying each triple is enough). the use of the numbering will be explained later. with this representation we can write logic predicates for computing rdf(s) relationships. for instance, the transitivity of the rdfs:subclassof relationship can be computed as follows:



in[3,2] we have shown how to translate xml documents into logic programming by means of logic rules representing the inner nodes of the xml document(called schema rules) and facts representing the leaves of the xml document. the translation of xpath and(non-rdf) xquery into logic programming consists of the specialization of the schema rules w.r.t. the given query, and the generation of(one or more) specific goals from the given query.



let us remark that previous queries have been expressed by using the previous syntax. now, let us proceed with a key point of our translation: the translation of xml documents into a logic program, and analogously, the reconstruction from a logic program of an xml document. with this aim, the following section will show the proposed translation of xml documents in logic programing in the quoted papers[3,2].



now, the translation of the xml document into a logic program is as follows. for each inner node in the type and node numbered xml document< tag att1= v1,..., attn= vn, nodenumber= i, typenumber= k> elem1,..., elems</tag> we consider the following rule, called schema rule:



ntagi1,...,ntagit are variables(used for representing the last number of the node number of the children); ntag is a variable(used for representing the node number of tag); k is the type number of tag; and finally, r is the type number of the tagged elements elem1,..., elems 6.



the previous translation has the following peculiarities. in order to specify the order in an xml document each fact is numbered from left to right and by levels in the xml tree. in addition, the hierarchical structure of the xml records is expressed by means of the identifier of each record(the number of the parent) and the length of the number(the children has a larger number). the type number



let us remark that the output xml document is built using the node and type numbering in which the parent is numbered with a larger number than children. in the example, the essays label is numbered as and the children as[3,1],[8,1],[9,1],[10,1]. with this aim we have numbered rdf triples in prolog facts.



in the case of query 4 two attributes have been added to the output document: the namespaces for rdf and books. they are represented as attributes of the schema rules and facts of the output document, following the criteria of the translation presented in section 4.1.



s. schaffert and f. bry. a gentle introduction to xcerpt, a rule-based query and transformation language for xml. in proc. of international workshop on rule markup languages for business rules on the semantic web, page 22 pages, aachen, germany, 2002. ceur workshop proceedings 60.



