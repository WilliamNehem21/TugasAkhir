informally, an untangled action 2 is a special action in a discrete event system of causality and conflict. at any state of the system the action, if enabled, shall not be entangled through any conflict with the rest of the system, and its only contribution to the system dynamics is by causality. therefore, if an untangled action is not observed(due to hiding or other operations), its occurrence becomes time irrelevant 3. this gives us the opportunity to reduce the search space by considering only one possibility of its occurrence time.



this work is motivated by our experience in using process algebra(e.g. csp and fdr2) to verify asynchronous circuits, where high concurrency in gate-level circuits induces serious state explosion problems. a well-known example is the tree arbiter. a tree arbiter consists of a tree of arbiter cells. each arbiter cell behaves as a two-way arbiter for its sons while at the same time acting as one of the clients of its father node. in this way, a tree arbiter implements multi-way arbitration through a hierarchy of two-way arbitration cells.



the state space of tree arbiters blows up exponentially with the increase of tree size, and it is not readily amenable to reduction due to the conflicts inherent to arbitration. previously, petri net unfolding techniques and partial-order reduction enhanced bdd methods had been applied to it, with limited success. in this paper, we will propose untangled actions as a viable solution to verify this and similar systems.



untangledness is a simple idea. we will defer the theoretical justification to later sections. for the arbiter cell example, it is not difficult to see that only two actions are entangled in conflicts, i.e. a1+ and a2+. these tangled actions coincide with so called output choice signal transitions. with this information, it is straightforward to give a state-space reduction algorithm by prioritising untangled actions(similar to the chase reduction in fdr2) in the exploration of the state space. that is, in a depth-first search, given a state with a non-empty set of untangled outgoing transitions, we use some strategy to pick and prioritise one from the set to explore; all the other transitions from the same state, untangled or tangled, will be completely ignored in the exploration. in case a state has no



in this paper, we propose a compositional technique for concurrent systems such that untangledness analysis is done at a local level. a compositionality theorem automatically calculates global untangledness information from the local information. using thus obtained results, state space reduction can be applied on-the-fly on the global systems.



structure of the paper. after the introduction of basic notations(section 3) and concurrent systems(section 4), two important(partial) determinacy notions on ltss with lvgi actions, one stronger than the other, are proposed in section 5. the former is compositional on the lvgi actions without synchronisation potential and induces a simple and efficient on-the-fly reduction procedure(section 6). the latter removes the synchronisation restriction and becomes compositional on all lvgi actions, and thus enables compositional reductions(section 7). preliminary experiment results are given and the paper is summarised in section 8.



this insight leads to the state space reduction algorithms in many processalgebraic frameworks[14,11,2,6]. the algorithm simply makes arbitrary decisions on invisible choices and ignores the other alternatives completely in the state space traversal. it also forms the basis of our reduction algorithm in section 6. we call



with ai={e}, p and q are both detachable, although p contains an autoconflict in the sense that one branch needs two e actions to enable e' while the other needs just one. the parallel composition of the two, however, is not detachable since one branch will lead to the occurrence of e' while the other will not. therefore, to make compositionality work fully, conflicts must be ruled out completely on ai actions. this gives us the notion of untangled actions.



like the previous one, the acceptor controls the order and the occurrence of ai actions. thus rule 3 and the parts of rule 2 and 4 not involving reject remain the same. unlike the previous one, ai actions become visible in the fed behaviours(rule 1 and 5) and the acceptor is more sensitive(the parts of rule 2 and 4 involving reject). for instance, once the right type and number of actions have occurred(i.e. removed from the fed behaviours), a new action will be enabled on top of the current suffix(i.e. the pending e). e cannot be delayed by any other a action; if it is not simultaneously enabled on lts, it may result in the immediate issue of reject(the



untangled actions are compositional; global untangled actions can be calculated from local ones. the compositionality theorem will be given in section 7, where a new compositional reduction technique enabled by it is also proposed. the new technique feeds the global untangledness information to a specially designed onthe-fly reduction procedure called chase+, which reduces state spaces by exploiting detachability(c.f. theorem 5.9).



therefore, we can adopt a scheme similar to that in to implement chase+ as an on-the-fly procedure integrated in refinement or model checking. note also that round robin strategies are local strategies. that is, the definition only depends on the pending action and the top elements of the history and the exit points can be calculated by simply following the strategy. therefore, the exit function need not be explicitly constructed. it enables a simpler and more efficient implementation of the chase+ reduction procedure.



some extra lvgi actions. this will not result in any loss of expressiveness, e.g. w.r.t. sbdf models. moreover, these lvgi choices need to remain so during the verification process, unless they are detachable, in which case they can be hidden and removed



we have checked the system using fdr2. the results are very encouraging compared to previous works[1,10]. the checking time is nearly linear in the size of the tree arbiter. more intriguingly the memory used is negligible(below 100mbyte) and is sub-linear relative to the tree size. thus, it is fair to say that the state explosion has been avoided.



it gives an accurate treatment of divergence despite the interference between divergence and compositionality. that is, a divergent process can delay other parallel processes indefinitely. our solution is to keep lvgi actions visible and use fairness to guide the state space traversal out of unprogressing loops.



the output of the above procedure, say u', is in ft and its first element is the same as u. continue to use the procedure on the second element and so on... it eventually leads to the output u'= ue. therefore, contradiction.



order with any other action and can only be the last element in a trace. if check(ai, av, dct(lts n)) is unsuccessful and deadlocking on e after a trace te on the generator and a trace u on the acceptor(deadlock on forcing e). since d is not in t or u,(t, u) satisfies c0' when e= d, and(te, u) satisfies c0 when e/= d.



