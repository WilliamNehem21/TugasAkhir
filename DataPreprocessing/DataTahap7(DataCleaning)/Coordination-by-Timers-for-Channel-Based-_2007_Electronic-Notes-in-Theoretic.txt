time has been investigated also for data-driven coordination models. a form of timeouts can be expressed in javaspaces or tspaces. in timed linda a global clock is considered and the basic actions(in, out or rd) take no time to execute, i.e., one time unit means the execution of such an(atomic) action. a new action is introduced which makes possible to wait for a tuple only for a predetermined number of time units; the process changes its state after this number of time units. several extensions of linda with different notions of time are introduced in. most recently, an extension with time of the tuple-centre based model respect is presented in.



well-typedness of processes is defined by a set of static rules(a detailed presentation of the static typing rules is given in). these rules express the behaviour of a process with regard to its types. if a process wants to communicate on a channel for which it has no capability, it can still be well-typed if the alternative process q is well-typed. q is called the safety process.



soundness: we follow a method introduced in. this is a syntactic approach in contrast to other approaches based on denotational or structural operational semantics developed by authors like abadi, cardelli or milner. we omit the proofs which can be found in.



a coordination protocol cp is given by a set of rules providing some conditions when we have more than one communication choice in a reduction step. an example is the choice among the processes which can send or receive messages along a common channel named a. a coordination rule can be defined to select the sender or receiver which has the lowest channel timer value; such a rule could be extended to type timers too.



in coordination. the set cp of rules becomes more important in coordination languages, when the algorithmic aspects are predominant in the strategies of controlling the computation. the aspects described by cp are visible at the implementation of a coordination language according to its coordination model.



a channel is made up of two ends(source a and sink b) and denoted ab. at each end there can be at most one entity connected at any time. channels and entities are considered mobile. on the source end it can be written messages and on the sink end the messages can be read. there are a set of operations on channels like creation, or movement of one end to another location, or read according to a read pattern. a take operation also removes the message from the channel, as opposed to a read operation.



the process uses the two channels a and b differently located by moving from one location to another. note that if we use a discrete value for the timer, then we transform the simple reo channels into timed channels. messages can be transmitted through the channel only for a restricted period of time.



