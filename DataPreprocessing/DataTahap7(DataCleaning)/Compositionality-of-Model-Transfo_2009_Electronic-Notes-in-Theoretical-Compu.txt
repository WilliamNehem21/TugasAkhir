model transformations can be used not only for code or platform-specific model generation, but also for denotational semantics definition, e.g. using process algebras as semantics for visual modeling languages. denotational semantics of programming languages are by definition compositional. in order to enjoy a similar property in the case of model transformations, every component of the source model should be distinguishable in the target model and the mapping compatible with syntactic and semantic composition. since typed graphs are a natural representation of visual models, model transformations are often described by typed graph transformations. this paper proposes a formal definition of compositionality for mappings from typed graphs to semantic domains. to verify compositionality, syntactic criterion has been established for the implementation of the mappings by graph transformations with negative application conditions.



spatial composition is similar to the compositionality property of denotational semantics. as for simple mathematical expressions, we assume that the meaning of expression 2+ 5 is determined by the meaning of 2, 5 and the semantics of the+ operator, i.e.[[2+ 5]]=[][].



models and denotational semantics can be represented as instances of metamodels. a mathematical model is provided by type and instance graphs. model transformations can be described by graph transformations. in this paper we present a notion of compositionality for any total functions defined by graph transformations between sets of graphs(representing models). conditions are also provided and proved which guarantee compositionality for simple graph transformations and graph transformations with negative application conditions.



the paper is organised as follows. in section 2 related approaches are summarised. compositionality is formally introduced in section 3. in section 4 a condition for compositionality is given for simple graph transformations, generalised to graph transformations with negative application conditions in section 5. in section 6 a case study of compositional model transformations is introduced. section 7 concludes the paper.



to ensure uniqueness of results the concepts of confluence and critical pair analysis were presented in. a working implementation can be found in agg for checking critical pairs. criteria for termination were introduced in[6,17]. an implementation for termination checking is also provided in agg. these definitions are applied to graph transformations with basic control conditions in through the introduction of transformation units. compositionality in bidirectional transformations discussed in.



the concept of context is central to compositionality. in set-theoretic terms a context c of graph d in graph g is given by c= g\d. context c is not necessarily a graph due to the possible dangling edges. to have a correct separation of context and included graph, we need a special set of contexts sc and set of graphs sg.



context graph c through an initial pushout. the boundary graph is the smallest subgraph of g0 which contains the identification points and dangling points of m0. the next definition is ipo compatibility of semantic mappings. while compositionality was defined through an unknown context e, ipo compatiblity defines it



since t is initial-preserving the consistency diagram above can be used with initial pushout(2). g0 replaces d as it is preserved throughout the transformation. hence m0 is consistent with respect to sem and there is an extension diagram over sem and m0. transformations sema only denotes particular rule application order of sem.



terminating. the parts of h0 not present in g0 were not transformed to the semantic domain by the rules in sema, but the reasoning above holds for c0 as well. the extension diagram over c0 is pushout(4) and sem(c0)= cm. the termination of



it is possible that the b nodes are alwaysif presentgluing points in every production rule of the graph transformation system. this means that the node type b is such a special type that its instances are never deleted. this observation leads to the definition of constant types that are already present in the start graph are not deleted throughout the transformation.



proof the proof is based on the basic compositionality theorem. in order to apply the embedding theorem in the proof of theorem 4.8, it is suffice to show that the extension diagrams over m0 and c0 exist in the presence of nacs.



formally, the uml models are instances of metamodels represented by attributed typed graphs. the abstract syntax of csp can be also represented as a typed graph. the typed graph based metamodel for csp is defined in. this way, the semantic mapping can be defined as a typed graph transformation.



to prove separablility the sets sc and sg need to be defined. we define on set of graphs sad that represents both. sad is a set of subgraphs of h0 such that if an activitynode is present in g, then all incoming and outgoing activityedges connected to the node should be present as well. since every transformation rule in sem transforms a single activitynode into the semantic domain, every node type has a related production rule in sem. as activityedges are transformed to processes, they form a frame around the activitynodes, enabling their transformation. thus, boundary graphs consist of only activityedges. if all the incoming and outgoing activityedges are included with the relevant node, all corresponding rules are triggered in the subgraph. hence no new structures are created during the merge process that enables a previously disabled rule. thus if c0 and g0 are of sad, then if c0 and g0 are terminating, then h as well.



