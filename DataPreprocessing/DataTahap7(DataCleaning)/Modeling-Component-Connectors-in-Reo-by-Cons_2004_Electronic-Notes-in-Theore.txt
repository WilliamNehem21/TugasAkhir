model for the behavior of connectors in reo. constraint automata can be thought of as conceptual generalizations of probabilistic automata where simple constraints, instead of probabilities, influence applicable state transitions. the single most important composition operator in reo, join, amounts to a product of automata in this model.



reo defines a number of operations for components to(dynamically) compose, connect to, and perform i/o through connectors. atomic connectors are channels. the notion of channel in reo is far more general than its common interpretation. a channel is a primitive communication medium with exactly two ends, each with its own unique identity. there are two types of channel ends: source end through which data enters and sink end through which data leaves a channel. a channel must support a certain set of primitive operations, such as i/o, on its ends; beyond that, reo places no restriction on the behavior of a channel. this allows an openended set of different channel types to be used simultaneously together in reo, each with its own policy for synchronization, buffering, ordering, computation, data retention/loss, etc.



it follows that every channel represents a(simple) connector with two nodes. more complex connectors are constructed in reo out of simpler ones using its join operation. joining two nodes destroys both nodes and produces a new node on which all of their coincident channel ends coincide. this single operation allows construction of arbitrarily complex connectors involving any combination of channels picked from an open-ended assortment of user-defined channel types. the semantics of a connector is defined as a composition of the semantics of its(1) constituent channels, and(2) nodes. the semantics of channels are defined by the users who provide them. reo defines the semantics of its three types of nodes, mentioned above.



the simplest channels used in these connectors are synchronous(sync) channels, represented as simple solid arrows. a sync channel has a source and a sink end, and no buffer. it accepts a data item through its source end iff it can simultaneously dispense it through its sink. a lossy synchronous(lossysync) channel is similar to



the semantics of reo connectors can be defined in terms of relations on timed data streams(tdss) as presented in. in this section we introduce the notion of constraint automata and show how they can serve as operational models for the behavior of reo connectors by relating the languages of these automata with timed data streams. here, like in, we do not consider the dynamic behavior of components in creating and composing connectors. our focus is on the reo circuits, built from basic connectors(channels and merger) via join and hide operations, without considering the further possibility of join or split. we use constraint automata to specify the operational semantics of reo because this allows us to adapt the known methods for the analysis of finite state automata to work with constraint automata. ordinary finite automata are not rich enough to represent the semantics of reo. constraint automata allow us to model subtle timing and input/output constraints of reo connectors, specifically their combined mix of synchronous and asynchronous transitions. this is reflected in our definition of constraint automata and we will show it further in our examples.



constraint automata can be viewed as acceptors for tuples of timed data streams that are observed at certain input/output ports a1,..., an of components. the rough idea is that such an automaton observes the data occurring at a1,..., an and either changes its state according to the observed data or rejects it if there is no corresponding transition in the automaton. we use constraint automata as a semantic model to describe the tds-language induced by reo connector networks.



b. the time streams a and b contain for each of them the times at which these input and output actions take place. the relevance of this timing information is restricted to the particular connector, in this case the channel, at hand: what matters is only the relative order of the initial values a0 and b0, which determines which channel ends will be active next. a pair of timed data streams is a timed run for a state



if a is understood from the context, we simply write dc(q, n, p). intuitively, dc(q, n, p) is the weakest dc that ensures there is an n-transition from state q to p. note that dc(q, n, p)= false if there is no n-transition from q to a p-state. we use dc(q, n) as an abbreviation for dc(q, n, q).



