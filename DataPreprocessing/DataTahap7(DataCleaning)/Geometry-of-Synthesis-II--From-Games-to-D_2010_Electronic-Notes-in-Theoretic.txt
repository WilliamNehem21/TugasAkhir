this paper extends previous work on the compilation of higher-order imperative languages into digital circuits. we introduce concurrency, an essential feature in the context of hardware compilation and we re-use an existing game model to simplify correctness proofs. the target designs we compile to are asynchronous event-logic circuits, which naturally match the asynchronous game model of the language.



the proof of correctness. finally, the third problem is that the semantic model used is essentially asynchronous while, for pragmatic reasons, the circuits which are the target of the compiler are synchronous. this leads to further problems with proofs of correctness, problems which were addressed in a rather ad hoc way. a principled method for the synthesis of synchronous circuits from asynchronous specifications is now studied separately.



any sci term is an scc term in which all free identifiers have bound 1. note that the reverse is not true. the fact that sci is an instance of scc means that we can use its fully abstract game semantic model as a basis for our circuit semantics. the scc game model is constructed from the game model of idealized concurrent algol(ica), which we present below.



moves are basic observable actions for some type. the labelling function distinguishes between opponent and proponent moves, as well as question and answer moves. enabling establishes a fundamental causation relation between moves, subject to some conditions: only opponent questions can be without an enabler, an enabling move and an enabled move have distinct opponent/proponent labels and only question moves can be enabling moves. for more detailed intuitive explanations of game semantic concepts the reader is referred to the literature[3,5].



the basic observable actions for commands are q, running the command, and a, finishing execution. for boolean expression the actions are evaluating the expression q then producing either true t or false f. for variables, we can either query the variable q or write true wt or false wf; the answers to the query are t true or f false, and for wt, wf an acknowledgement a, respectively.



the game model for sci can be represented using only the xor, c, call, wire and fork fragment of event logic. we represent arenas as sets of ports, with a distinct port corresponding to each move. an o move is an input and a p move is an output. constants are



additionally, we show that taking into account the same assumptions about the behaviour of the environment, the circuit will have no failed traces. this is important because the notion of composition of def. 3.6 only tells us what correct traces are produced, not that no bad interactions occur.



