in the present paper, we propose our development strategy which differs from that of the cookbook in some key aspects(see sect. 5). we start in sect. 2 by offering a summary of the event-b notation; in sect. 3, we explain our strategy and apply it to a control problem in sect. 4. finally, we discuss our results in sect. 5.



event-b is supported by a specialized notation for abstract machines, the central object of the development method. it supports both the formulation of formal specifications and their refinement. we give a brief overview of some essential aspects of event-b in this section. for a full details of event-b, we refer our readers to.



consistency has to be proved between a concrete machine and its abstract machine. in practice, this is done on a per event basis. an event of the concrete machine is a refinement of an abstract event if the guard is strengthened and the action of the concrete event can be simulated by the action of the abstract event.



the trains. in the last refinement of the environment model, we introduce the trains into the system. the safety properties concerning the trains all concern their position so this is a good candidate for a new variable. pos is thus introduced to map each train to the only block where it is located(as stated by inv3 0), consistently with env1. to rule out the possibility of collisions, i.e. to enforce saf5, we can now introduce inv3 1 which states that each train is alone on its block 6. finally, for the sake of consistency with the variable occ, we introduce inv3 2 so that only trains can occupy a block 7.



a specific platform(env13). we focus on the actuator of the in-switch. two new variables act in sw and act in sw plf are used to model the actuator: the former is a boolean to indicate whether there is a pending command for the device, the latter specifies which platform the switch should change to.



event turn in sw is refined accordingly using the command from the actuator. the concrete guard specifies that there is a command from the controller for changing the in-switch. as a result, the in-switch is set to the specific platform as commanded. the actuator is reset after the switch changes.



event ctrl trigger in sw specifies that the actuator act in sw can be set to instruct the switch to change to any platform p, when the entry signal is red and both actuators act in sw and act ent sgn are unset. event ctr chg ent sgn models the fact that the actuator act ent sgn can be set to command the entry signal to change to grn, when the in-switch point to unoccupied platform and both actuators act in sw and act ent sgn are unset. notice that the guards of these events guarantee that the newly introduced invariants are maintained.



finally, since in sw is used in the guard of ctr chg ent sgn, the controller needs to know the status of the in-switch when sending the command for changing the entry signal. the controller keeps a copy of status of the in-switch with its variable ctrl in sw. note that variable ctrl in sw does not necessarily reflect the current value of in sw. indeed, we only need them to be the same when there is no actuator command for the in-switch. ctrl in sw is updated when the controller commands the corresponding switch to change with event ctrl trigger in sw.



we have presented our development strategy for developing control systems together with a model of their environment. our strategy starts with the modelling of the environment, followed by the introduction of the actuators, before the controller and sensors are modelled. finally, further scheduling details are imposed on the controller as an optimisation step for the system. applying our development strategy reduces the difficulty in modelling this type of systems, results in models which are easy to understand and verify. we illustrate our approach by developing a simplified signal control system. even though there are not yet any code generators for event-b, the controller variables and events in our final model are concrete and clear enough, and can be used as a software low level design.



the validation of control systems have been studied using other formal methods. hansen validated a railway interlocking model using vdm. however, the paper only establishes a model of the environment without the controller. haxthausen and peleska presented an approach using raise for developing a distributed railway control system. their approach consists of two stages. in their first stage, the model of the environment and controllers are developed globally together. their second stage focuses on the design of a distributed controller corresponding to the model in the first stage. our development strategy can be seen as a guideline for developing the model in their first stage.



