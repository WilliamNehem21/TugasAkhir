this paper argues that computational grids can be used for far more types of applications than just trivially parallel ones. algorithmic optimizations like latency-hiding and exploiting locality can be used effectively to obtain high performance on grids, despite the relatively slow wide-area networks that connect the grid resources. moreover, the bandwidth of wide-area networks increases rapidly, allowing even some applications that are extremely communication intensive to run on a grid, provided the underlying algorithms are latencytolerant. we illustrate large-scale parallel computing on grids with three example applications that search large state spaces: transposition-driven search, retrograde analysis, and model checking. we present several performance results on a state-of-the-art computer science grid(das-3) with a dedicated optical network.



next, the paper will discuss how algorithms and applications can be optimized to run in such an environment. we focus on applications that search large state spaces. as an introductory example, we will summarize earlier work and describe how a communication-intensive heuristic search algorithm can be optimized to run on a grid. as a more recent case study, we have implemented a retrograde analysis application that solves the game of awari, which has 900 billion different states. several optimizations were needed to obtain high performance on the das-3 grid. finally, the paper discusses some preliminary results in using the divine model checking toolkit on das-3. as we will show, divine has many characteristics in common with the awari solver, making it an interesting application for further research.



we think das-3 is representative for future grid systems. it is hierarchical and consists of multiple clusters with a fast local interconnect and a higher-latency wide-area interconnect. the wide-area network has a high bandwidth. in summary, the system can be characterized as hierarchical, high wide-area latency, and high bandwidth. in the rest of the paper, we discuss how to design parallel applications for such an environment, which are called distributed supercomputing applications.



the das systems are excellent testbeds for studying wide-area parallel algorithms, because they can be used for controlled experiments. unlike on very heterogeneous production systems, it is feasible to do clean speedup experiments on das. we have produced many papers on this topic(e.g.,[11,15]).



however, we have learned that many applications can be optimized to deal with the high latency of the wide-area network. the key idea is to be latency-tolerant. the bandwidth of wide-area networks is increasing very fast(much faster than cpu speed increases), as can easily be seen by comparing the bandwidths of the three das systems.



heuristic search algorithms recursively expand a state into successor states. if the successor states are independent of each other, different processors can analyze different portions of the search space. during the searches, each processor maintains a list of work yet to be completed(the work queue). when a processor completes all its assigned work, it tries to acquire more work from busy processors, which is called work stealing.



all communication is asynchronous(nonblocking). expanding a state amounts to sending its children to their destination processors, where they are entered in the work queue. after sending the messages the processor continues with the next piece of work. processors never have to wait for the results of remote lookups.



the network latency is hidden by overlapping communication and computation. this latency hiding is effective as long as there is enough bandwidth in the network to cope with all the asynchronous messages. with modern high-speed networks(like light paths) such bandwidth usually is amply available.



the algorithm also can have good load balancing, because it distributes the work randomly. however, the advantages of good load balancing should be balanced against loss of locality and additional network processing. also, the highly asynchonous algorithm described does assume a homogeneous execution environment.



in this section we will summarize our more recent work on using distributed supercomputing for large search-applications. we will discuss how we implemented a retrograde analysis program that solves the game of awari on the wide-area das-3 system. the original program ran on a single cluster and was extremely communication intensive: it sent one petabit of data over the local area network in 51 hours. we will discuss how such a communication-intensive application can be run efficiently using light path technology.



with the advance of optical networking technology, it becomes feasible to even run this type of application on a grid. we therefore studied the performance of the awari ra program on the wide-area das-3 system. we initially just ported the original c/mpi program and tested it on das-3. the(small) differences in cpu speeds in das-3, however, caused flow control problems, resulting in the faster cpus to overwhelm the slower ones with work. this effect resulted in unrestricted job queue growths and thus memory problems. in awari we solved this problem using global synchronizations(an alternative, proposed in a memory-limited, se-



divine uses a linear temporal logic(ltl) approach to model checking, where a verification problem is reduced to cycle detection in a graph representing the state space. the toolkit contains several parallel cycle detection algorithms designed to run efficiently on a cluster. in addition, the toolkit implements on-the-fly distributed state-space generation for error detection and deadlock discovery. the divine toolkit supports specifications in both its native modeling language dve and in promela, the modeling language of the popular model checker spin.



for our initial performance analysis we took two representative benchmark problems from the beem model checking database: anderson and elevator. the anderson specification concerns the correctness of a mutual exclusion algorithm for a varying number of processes. the elevator specification determines the correctness of an elevator controller, given a certain number of floors and persons waiting for the elevator. for each problem we let divine check the ltl specification of a correctness property using the maximal accepting predecessors tool(distr map). in both cases the entire state space must be searched, since there is no violation of the given property.



with retrograde analysis and model checking. even the performance characteristics of these applications are similar. we therefore think it is interesting to study further optimizations of distributed model checkers, similar to the ones we describe for our awari solver. also, it is important to develop programming environments that simplify programming and deployment of grid applications, which is the topic of our ongoing research on ibis.



