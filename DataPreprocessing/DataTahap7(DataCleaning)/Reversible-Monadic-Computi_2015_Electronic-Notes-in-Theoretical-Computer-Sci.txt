this is brought to a head in quantum computing, where any deterministic evolution of quantum bits is invertible, unlike the eventual measurement that converts quantum information to classical information. another novelty in quantum computing is that it is impossible to copy or delete quantum information. this leads to a linear type theory of resources rather than a classical one: quantum computing takes semantics in monoidal categories, rather than cartesian ones.



led by quantum computing, this article extends the categorical semantics of monadic programming to reversible computing. to allow for a linear type theory we consider monoidal closed categories. to allow for reversible computations, we consider dagger categories; in general these correspond to bidirectional computations rather than invertible ones, which in the quantum case comes down to the same thing. to allow for monadic effects, we introduce frobenius monads. in the presence of a dagger, any monad gives rise to a comonad; a frobenius monad is one that interacts with its comonad counterpart via the following frobenius law: 4 we often need to reason simultaneously about morphisms in a monoidal category and endofunctors on it. unfortunately there is no sound and complete graphical proof calculus that would handle this yet. therefore we cannot use the graphical calculus exclusively and also have to use traditional commutative diagrams.



frobenius monads have been studied before[46,32], and monads have been used as semantics for quantum computing before[15,4,3], but not in a dagger setting, except for that deals with the commutative case abstractly. conversely, reversible programming has been modeled in dagger categories, but not using monads. daggers and monads were combined before in coalgebra[20,24], quantum programming languages programming languages[14,45], and matrix algebra. the current work differs by systematically starting from first principles. we intend to fit probabilistic programming in our setup in future work.



example 3.2 frobenius monoids in fhilb correspond to finite-dimensional c*algebras[50, theorem 4.6]. these play a major role in quantum computing, but also as semantics for labelled markov processes with bisimulations[35,43,30,37] and as operational semantics of probabilistic languages[12,13]. commutative frobenius monoids in fhilb therefore correspond to orthonormal bases when special.



one of the standard categorical constructions when given a monad t is to consider the category ct of its kleisli algebras. in monadic programming, this category gives semantics for computations with effects modeled by t, whereas the base category c only gives semantics for pure computations. in this section we show that if t is a frobenius monad, then ct is a dagger category. in fact we also show the converse, under a natural condition about cooperation with daggers. thus effects modeled by a monad can be added without leaving the setting of reversible computations precisely when the monad is a frobenius monad.



