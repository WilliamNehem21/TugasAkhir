the b method manages to successfully span the development process from modelling down to the algorithmic level. however, to cover the remaining steps towards a running implementation, one needs to synthesize the algorithmic model to some programming language and then compile the resulting code into the target platform assembly language. these last two steps cannot be verified using the formal verification approach provided by the b method. indeed, code synthesis maps constructs of languages that do not have common semantic underpinnings. compilation is even more troublesome, since, in addition to the semantic gap, there is also usually a deep transformation of the code structure caused by optimisation and other transformations, and the effort put in the b-based development may be jeopardized by a bug in the compiler. to increase the confidence on the generated code, industrial adopters of the b method employ a redundant tool chain, using two distinct implementations of code synthesis and compilation. this pragmatic approach however does not provide a theoretically satisfying evidence of the result correctness and comes at the cost of having to deal with the execution of redundant programs.



the paper is structured as follows. section 2 provides a general introduction to the b method and briefly outlines the proposed approach, comparing it to a classical application of the b method. section 3 presents the main lines of the definition of a b model for the instruction set of a simple, yet computationally representative, micro-controller. section 4 presents the mapping of the main constructs of the algorithmic language b0 to assembly constructs, through a series of simple examples, and introduces thus the structure of an assembly program as a b implementation. experimental results of the application of this approach to commercial micro-controllers are also reported in this section. finally, section 5 draws preliminary conclusions on this work and an agenda for future research in the direction of constructing a production-level verifying compiler based on the b method.



the b method for software development is based on the b abstract machine notation(amn) and the use of formally proved refinements up to a model sufficiently concrete that programming code can be automatically generated from it. its mathematical basis is first order logic, integer arithmetic and set theory, and its constructs are similar to those of the z notation. its structuring constructs are more closely related to imperative modular programming language constructs. also, its more restrictive constructs simplify the job of support tools, and industrial software for the development of b based projects is widely available[8,3].



finally, so-called implementation modules form a special case of refinement where the abstraction level is similar to that of a programming language. this paper uses the term algorithmic model to qualify such modules. the part of the b notation that may be used to define implementations is called b0(e.g. it does not contain non-deterministic constructs). using as input an implementation module, it is possible to generate source code in a conventional program language such as c or ada.



essentially, a b module contains two main parts: a state space definition and the available operations. it may additionally contain auxiliary clauses in many forms(parameters, constants, assertions), but those are essentially for practical purposes(i.e. to promote modularity, reuse, etc.) and do not extend the expressive power of the notation. in the remainder, we will restrict our discussion to the core clauses of the module specification.



the specification of the state components appears in the variables and invariant clauses. the former enumerates the state components, and the latter defines restrictions on the possible values they can take. if v denotes the state variables of a machine, the invariant is a predicate on v. verifications carried out throughout the development process have the intention of checking that no invalid or local) variables to which they are applied. the semantics of the substitutions is defined by the substitution calculus, formalizing how the different substitution forms rewrite to formulas in first-order logic. let s denote a substitution, e an expression, then[s]e denotes the result of applying s to e. for instance, an operation that would increment a counter variable v can be specified as v:= v+ 1. indeed, the basic substitution is very similar to the side-effect free assignment construct



the target platform may be modeled with the b abstract machine notation: the state of the machine represents the state of the platform(i.e. registers and memory), and each operation represents an assembly instruction. this only needs to be performed once for a given target platform. further details are provided in section 3, where a model of the random access machine model of computation is



the algorithmic model has to be further refined into an assembly-level model. the latter model is defined on top of the target platform model discussed previously. a general strategy for this refinement is to map the state variables of the algorithmic model to different addresses of the platform memory, and to translate the algorithmic-level operations to combinations of operations defined in the platform model corresponding to the assembly language instructions. the resulting assembly-level refinement needs to be proved compliant with the corresponding functional model. we then obtain a software artifact at the assembly level that formally refines the initial functional model.



this strategy needs a loop construct that halts when the program counter reaches the end marker. we call this the fetch loop: it associates each possible value of the program counter with the corresponding assembly instruction. the local variable pc maintains the value of the program counter of the ram machine. the local variable end stores the end marker of the program and remains constant. both variables are employed in the formulation of the variant and invariant of the loop. as the algorithmic model does not jump backwards, the variant can be expressed as the distance between the end of the program and the value of the program counter. the invariant of the fetch loop establishes the relationship between the variables of the ram machine and the local variables of the operation and the state of the ram memory for each possible valuation of the program counter:



this assembly model follows the same pattern as the previous example. instructions 0 and 1 codify the preamble, 2 to 6 the increment loop, and 7 is the end of the program execution. note that we need a variable, here called i, to keep track of the number of times the increment loop has been executed. its value is initially zero and it is incremented whenever the program counter is 6, i.e. when the algorithm jumps back to the evaluation of the loop condition. also, observe that the invariant of the fetch loop states that when the value of the program counter is two, the algorithmic loop condition shall hold.



all the examples only manipulate simple integer or scalar values. a full-scale project would certainly involve more complex data structures that can be described in the b0 language. on the other hand, it is worth noting that, in order to avoid certain classes of bugs, software in safety-critical projects is often restricted so that it does not use features such as dynamic memory allocation and pointers.



micro-controllers provide a number of facilities(i.e. dedicated hardware), such as input/output and interrupt pins for interfacing directly the processor with its environment, timers, etc. in the presented examples, such facilities have not been taken into account. future work include modelling and using such facilities in the b development.



however, much work remains to be done to meet the goals of building a fullfledge tool chain based on the b method and targetting an assembly-level industrial platform. we shall define and implement formal rules for the construction of assembly level models from algorithmic models. the application of such rules would result in a set of proof obligations that would need then to be verified. in order to address expected scalability issues in this verification effort, different solutions may be investigated. first, the restrictions imposed by b method on refinements could be relaxed, so that the translation may be realized in small steps, using intermediate models mimicking intermediate representation of compilers, where issues such as register allocation and code optimization are more easily implemented and verified(in a way similar to that of, e.g.). also, some proof obligations need manual assistance with the current tool support for b. another line of work is to investigate if and how the automation of these provers can be improved(by developing and applying additional proof rules). another solution would be to generate proof scripts corresponding to these proof obligations along the translation process. more work also needs to be done from the modelling viewpoint. on the one hand, more elements of the b0 language need to be addressed, allowing for richer data structures. in order to cater to designers of safety-critical systems, one also needs to provide support for facilities such as interrupts, timers and input/output.



