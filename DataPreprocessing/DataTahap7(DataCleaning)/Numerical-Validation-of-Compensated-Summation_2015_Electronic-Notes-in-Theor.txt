the power of computational resources continues to increase. exascale computing(1018 operations per second) is planned to be reached within a decade. in floatingpoint arithmetic, each operation is likely to produce a rounding error. these errors can accumulate and at the end of a computation, the computed result can be very far from the exact one. moreover, the more operations are performed, the more the accumulation of rounding errors is likely to be important.



but if the accuracy of the computed result is not sufficient, it is necessary to increase the precision of the computation. a well-known and efficient technique for that is the use of compensated algorithms. these algorithms are based on the fact that it is often possible to compute exactly the rounding errors of some elementary operations like addition and multiplication. we now assume that we work with a floating-point arithmetic adhering to the ieee754-2008 standard. in that case, if we use rounding to nearest, then the rounding error of an addition is a floating-point number that can be computed exactly. the algorithms that enable the computation of rounding errors are called error-free transformations(eft). an algorithm that relies on eft to increase the accuracy is called a compensated algorithm(see).



we aim at analysing the effects of the random rounding mode on algorithm 3. in, the impact of directed rounding on compensated summation is presented. however the algorithm considered in is slightly different from algorithm 3. moreover in, the summation is assumed to be performed using one rounding no detection of instabilities. with this mode, the execution time can be considered the minimum that can be obtained whatever instability detection chosen. this mode is usually not recommended because it does not enable the self-validation of dsa. however, as previously mentioned, using summation algorithms, no instability can invalidate the estimation of accuracy.



in this article, we have shown that we can validate compensated summation based on the fasttwosum algorithm with discrete stochastic arithmetic even if eft are not valid as we use directed rounding modes. in a future article, we will generalize this analysis to other eft like twosum and twoproduct. then we will see if we can still use discrete stochastic arithmetic for validating compensated algorithms for dot product and polynomial evaluation(compensated horner scheme).



