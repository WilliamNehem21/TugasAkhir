this paper addresses the graphical representation of static aspects of b specifications, using uml class diagrams. these diagrams can help understand the specification for stakeholders who are not familiar with the b method, such as customers or certification authorities. the paper first discusses some rules for a preliminary derivation of a class diagram. it then studies the consistency of the concepts preliminarily identified from an object oriented point of view. a formal concept analysis technique is used to distinguish between consistent classes, attributes, associations and operations. the proposed technique is to incrementally add operations to the formal specification which automatically result in evolution of the class diagram.



in order to bridge this gap, several research teams have proposed approaches to integrate formal and graphical specifications[14,15]. a possible integration strategy is to give graphical syntax to existing notations, e.g. in the early 90s dick and loubersac proposed a graphical syntax for vdm. another approach is to design industrial languages which integrate formal concepts. this approach underlies the development of several uml notations. for example, uml state transition diagrams are deeply influenced by several state machine languages, and in particular statecharts. also the object constraint language includes concepts from model-based specification languages such as z.



a significant effort has been devoted by the research community in order to establish links between uml and formal methods. in particular, several approaches provide translations from annotated uml diagrams to formal methods[6,11,13,16,18,19]. these approaches aim to take advantage of formal methods tools while remaining integrated in a standard industrial process based on uml.



this paper investigates the reverse approach: using graphical notations, such as uml diagrams, as a way to document formal developments. it starts from the fact that several significant formal developments are mainly based on formal methods. for example, the b method has been used in industrial railway and smart card applications. such critical applications must usually be accepted by independent certification authorities that are not necessarily expert in formal methods. therefore, it makes sense to construct graphical views from the formal developments as an additional documentation. it is expected that these more intuitive representations will be easier to accept by certifiers.



tools that represent the behaviour of the specifications. is the first proposal for the derivation of a visual representation of the behaviour of a given b specification. this behaviour is described using finite labelled transition systems(lts). starting from a user-guided choice of significant states, proof techniques are used to explore all the valid transitions of the system. the resulting lts can then be further reused to verify temporal logic properties by model-checking. in the same context[22,8] proposed some derivation rules for the generation of statecharts from b specifications. finally, in a tool assisting the animation of b specifications is presented, it also helps in the construction of state transitions diagrams. in these diagrams states are valuations of b variables and transitions are some operation call.



this paper studies the first kind of tools which extract a structural view from existing formal specifications in order to ease their understanding and maintenance. the extraction of structural information is a classical problem in the software maintenance community. in fact, understanding how an application is organized is a major factor when maintaining it especially when its structure is complex and documentation is unavailable or outdated. most of program comprehension techniques aim to give a modular restructuring of software which eases its maintenance. we believe that similar techniques can be applied to formal specifications.



while the first step is only concerned with the variables of the b specification, the second step(sect. 3) also takes into account the operations. a concept dependance technique is used to help locate the appropriate class for each operation.



uml class diagrams and b share similar concepts such as the encapsulation of operations and variables, or the notion of association. this motivates several researches to translate one language into the other. this section will highlight how this overlap of concepts can be exploited to automatically translate b specifications into a uml class diagram.



sources and addresses. the network resources are essentially computers identified by their ip addresses(variable ipaddress). users must have a permission to access to a given resource(variable permitted). a user can only use one resource at a time. the variable assigned means that a user is using a resource. finally, the subset of resources called unused gives the set of unused resources. we consider three basic operations:



an association is a bidirectional connection expressing a relationship between classes. it is an abstraction of the possible links existing between objects instances of classes. as we translated abstract sets into classes, associations will be every relation existing between these sets.



in uml some constraints should be expressed on a relation or a group of relations. for example in the accesscontrol machine invariant properties define a constraint between the two relations permitted and assigned. this constraint could be seen as the traditional subset constraint between two collections(also called roles).



the rules given in generate classes for every machine, set, and relation of the b specification. moreover, these classes are linked by numerous associations. only boolean and integer variables become attributes of these classes. this results in many more classes than our approach and hence in more complex diagrams.



the previous section has identified a set of class candidates. in this section, we will try to sort out these candidates into potential classes or attributes. in order to evaluate the pertinency of a class candidate, a concept dependance context will be built which relates the class candidates to the operations of the specification.



our study is focused on the dependance between b operations and data identified in the preliminary class diagram. first, we study the relationship between b operations and classes and associations of the preliminary class diagram in order to determine their pertinence from an object oriented point of view. then, we decide about the distribution of those elements over the pertinent class diagram entities. finally, we add the other data of the b specification as attributes of the definitely identified classes.



pertinency is thus defined on basic of operation pertinency. in order to measure operation pertinency, we use a concept dependance graph. elements of the preliminary structure and operations form a context called concept dependance context. in the defined context we consider only concepts from the preliminary class diagram which are manipulated by the operations. concepts correspond thus to either classes or associations.



although permitted was a maximal part, it is not a pertinent association because it does not satisfy definition 3.6. also, following rule 6, users can either become an attribute or a type. since it is a constant set, we felt it should be modelled as a type.



the approach of systematically groups operations of the b machine in the class corresponding to the machine. in the section 4, we will see that our method does not always result in grouping all operations in a single class. we feel that this ability to share operations amongst several classes is definitely needed when b machines get larger.



although formal methods provide excellent techniques for the precise description of systems, understanding these descriptions is often restricted to experts. this paper has presented a technique that helps build a graphical representation of the static aspects of b specifications. these diagrams are expected to be more intuitive and readable than the original formal specification.



this paper has proposed a two-step approach to the construction of a class diagram from a b specification. the first step applies systematic transformation rules to the b specification and produces a preliminary class diagram whose goal is to identify candidate concepts. the second step relates these concepts to the b operations and keeps the most pertinent ones. this second step is original with respect to existing approaches such as[7,21]. we have led several case studies with the three approaches, including the one presented in this paper. in each case, we felt that our approach gave at least as good results as the other ones.



