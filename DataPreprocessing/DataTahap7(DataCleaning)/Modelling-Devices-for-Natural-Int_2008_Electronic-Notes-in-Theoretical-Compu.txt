we do not interact with systems without first performing some physical action on a physical device. this paper shows how formal notations and formal models can be developed to account for the relationship between the physical devices that we actually press, twist or pull and their effects on systems. we use state diagrams of each but find we have to extend these in order to account for features such as bounce-back, where buttons or other controls are sprung. critical to all is the fact that we are physical creatures and so formal models have to take into account that physicality.



a critical method for us has been to analyse in detail ordinary commonly used artefacts such as an electric kettle or minidisk controller(already looking very dated!). we assume that when such devices appear easy to learn and use the designers have often embodied, either explicitly or implicitly, their own understanding of what makes interaction natural. so by detailed analysis we gradually mine the experience, often tacit, of successful designers.



physical feedback from the device(e.g. force feedback); in other cases, such as the on/off indicator light, it is clearly not a physical effect, but still proximity in space and immediacy of effect may make it feel like part of the device.



the sensed input(i) will also cause internal effects on the logical system, changing internal state of logical objects; for a gui interface this may be changed text, for an mp3 player a new track or increased volume. this change to the logical state then often causes a virtual effect(iii) on a visual or audible display; for example an lcd showing the track number(iii). when the user perceives these changes(d) we get a semantic feedback loop(c). in direct manipulation systems the aim is to make this loop so rapid that it feels just like a physical action on the virtual objects. finally, some systems affect the physical environment in more radical ways than changing screen content. for example, a washing machine starts to fill with water, or a light goes on. these physical effects(iv) may then be perceived by the user(e)



actually even this is not that simple as the kind of press you give the switch depends on whether it is up and you want to press it down or down and you want to press it up. for most switches you will not even be aware of this difference because it is obvious which way to press the switch... it is obvious because the current state of the switch is immediately visible.



also immediately perceivable. in the case of turning on an incandescent light bulb in the same room as the light switch, this is a moot point as the semantic feedback itself is immediate and direct. however, in some cases there may be a delay in the semantic response(e.g. neon lights starting up, kettle when first turned on) or it may be hidden(e.g. external security lighting); in these cases the feedback inherent in the device is not just very obvious, but may be the only immediate feedback.



note that this relation is n-to-m, that is the same user action may have an effect in several states(with different effect) and a single transition may be caused by several possible user actions(e.g. pressing light switch with left or right hand). in addition neither side is surjective, some physically possible transitions may not be directly controllable by the user(e.g. lifting large weight, pulling out a push-in switch) and some user actions may have no effect in the device in any state(e.g. blowing your nose). however, for exposed-state devices we will normally expect that the states are completely controllable by the user within the physical constraints of the device:



we can inherit much of the same machinery from simple exposed-state devices. however, in addition to transitions controlled by the user we have bounce-back transitions. we label them z(after zebedee and the fact that z and s are used for leftand right-handed helices). in the example here there is only one action leading to the states and thus it is clear what kind of user tension needs to be released in order for the bounce-back to happen. sometimes(and we will see an example later) there is more than one tension simultaneously for a state, so we need to label the bounce-backs by the kind of release of tension(in terms of user action) that is being released.



examples and the relationship between the physical and logical stns could be dealt with using standard notations and certainly could be translated into state-charts or similar notations. however, as we looked at more complex properties such as bounce-back we had to extend standard state-transition networks to represent the additional effects. this exposes design issues such as the appropriate use of tension states.



