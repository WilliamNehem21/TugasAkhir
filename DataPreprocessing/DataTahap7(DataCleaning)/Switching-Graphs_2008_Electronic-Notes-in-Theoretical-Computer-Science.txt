as switching graphs are a natural extension to ordinary graphs and a natural abstract domain for representing concrete problems, we expected switching graphs to be widely studied, but this appears not to be the case. in a slightly different notion of switching graphs is used essentially omitting switches, unifying nondeterminism with switches. in proof nets are proposed which closely resemble switching graphs, except that here switches move in pairs. other notions in the literature(like switch graphs, bidirected graphs and skew-symmetric graphs) also deal with choices excluding other options, but appear to be of a different nature than switching graphs.



solving bess. as we found switching graphs to be interesting in themselves as a natural abstract model for many problems, we list a number of problems of which the complexity is unknown(at least to us) in sect. 5. it should be obvious that these are only a fraction of the interesting questions that exist about switching graphs.



in this section we investigate the complexity of several problems on a fixed dlsg g=(v, e, s, l). for many problems there are straightforward and efficient algorithms. therefore, we often only state the complexity and sketch the algorithm without further explanation.



proof. a straightforward depth-first search suffices where both branches of each switch are taken as ordinary edges. when a path from v to w is found, no vertex, and hence no switch, occurs on this path more than once. the switch setting f is set accordingly, where those switches not on the path can be set arbitrarily.



proof. mark vertices backwards from w in a breadth-first fashion. a vertex u is marked if an outgoing edge leads to a marked vertex, or if both branches of a switch with root u lead to marked vertices. this marking algorithm will terminate in linear time. answer yes if v was not marked and no otherwise. the switch setting is obtained by setting the switches such that they point to an unmarked vertex. switches that point to vertices that are both marked or unmarked can be set arbitrarily.



lemma 3.4 consider two switches s and s'. if for all switch settings f with f(s)/= f(s') with l(f)= 1, then there are no switch settings g and h such that g(s)= g(s')= 0, h(s)= h(s')=1 and l(g)= l(h)= 0.



proof. assume the contrary, i.e. there are switch settings g and h such that g(s)= g(s')= 0, h(s)= h(s')= 1 and l(g)= l(h)= 0. consider a g-loop reachable from v that has an odd value m as lowest label. this loop must pass through both s and s', as if it does not go through s, then g[s:=1] also has a loop with m as lowest number, contradicting the assumption of the lemma. similarly, if the loop does not pass through s', then g[s':=1] has a loop with m as lowest label. using the same line of reasoning, there is an h-loop reachable from v with lowest odd label n going through both s and s'.



the parity loop problem is the question whether a switch setting f exists such that all f-loops in g have an even number as lowest label. this problem is very similar to the v-parity loop problem. in particular no polynomial algorithm is known, and it is also not possible to synchronise switches in this setting.



the parity loop-through-v problem is the question whether a switch setting f exists such that all f-loops through v in g have an even number as lowest label. a particular property of this problem is that it allows switches to be synchronised using a rather contrived construction. we therefore expect that it will even be harder to find a polynomial algorithm for this problem than for the v-parity loop problem.



a simplification of the parity loop problem is the 1-2-loop problem where the labels are restricted to the values 1 and 2. for this special case we are able to provide a polynomial time algorithm. it is a weight improvement algorithm inspired by[8,16].



in this section we provide reductions from the bes problem to the v-parity loop problem and vice versa. for the proofs we need to be able to remove every disjunction from a bes in 2cnf by selecting one of the disjuncts and eliminating the other one, resulting in a conjunctive bes. the operation resembles that of obtaining the f-graph gf from a dlsg g and a switch setting f.



