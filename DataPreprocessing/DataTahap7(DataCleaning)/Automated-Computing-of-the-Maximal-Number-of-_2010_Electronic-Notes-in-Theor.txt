in the paper we propose an algorithm which answers the type of questions which is mentioned above. the algorithm comes out from formal verification. the clientserver system under the study is described using a formal language. we model separately the client part and the server part of the system. the model of the server can be composed from any fixed number of subparts modelling individual servers in the original system. the algorithm works with the model composed of an arbitrary number of client models and one model of the server. for this model, in the literature called parameterised system model, the problem of finding the maximal number of clients can be reduced to the problem: compute the maximal k such



example 2.6 as a running example we present a part of a model of the prototype implementation of a payment system for public internet access on airports. it models a system where clients(represented as instances of the component token) of several air-carriers can have access to the internet. clients have to authenticate themselves or pay for the service before the system permits them to establish communication with the internet. there are two types of sessionsthe prepaid session and free session(for clients with a valid fly ticket for first class or business class).



the payment system(control component) models three independent methods and hence its model consists of three independent parallel parts. the first of them is able to receive an information that a token is invalid(the terminating phase of an internet session is successfully finished). the second is for changing the prepaid time during the invalidation of the token. the last is for creating a token(it represents the start of an internet session) and for starting of invalidation of the token(it represents termination of the session). an lks model of the control component



remark 2.7 note that systems with more than one type of users can be modelled as c-u models as well. more precisely, the c-u model can represent an arbitrary system with a control part and a finite number of distinct types of users. the model of a user is an lks which in the initial state non-deterministically chooses one of the given behaviours and after that it behaves like the choosen type of user. for example in the model of internet payment system a token(user component) first chooses whether it will behave as a client with prepaid or free access to internet.



it is clear that this c-u system should satisfy that the number of clients which can be connected to the internet simultaneously is not bounded, or it is bounded by an integer greater than a number of possible clients(e.g. 1010).



the main purpose of this paper is to propose an algorithm which efficiently finds bound for c-u models of real client-server systems. the algorithm which we describe is an improved version of the algorithm from. for a comparison of the two algorithms see related work.



example 4.2 for example to the tuple((p1, q0, r3), 0, 2, d, g, 1, a, b) where cex, uex is described in example 2.6 are assigned 3+ 1-tuples((p1, q0, r3), 0, 2, d),((p1, q0, r3), d, 0, g),((p1, q0, r3), b, a, d), etc.



