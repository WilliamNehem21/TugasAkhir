the engineering of systems that are acceptably correct is a hard problem. on the one hand, semi-formal modelling approaches that are used in practical, large-scale system development, such as the uml, are not amenable to formal analysis and consistency checking. on the other hand, formal modelling and analysis requires a level of competence and expertise that is not common in commercial development communities, and formal approaches are not well integrated with the rest of the development process. this paper advocates an approach to building engineering environments(or frameworks) for rigorous model-driven development



mainstream software engineering uses semi-formal techniques for mdd. 4 these are based on diagrammatic notations, which are used to describe different aspects of systems. it is their graphical nature and their pragmatic approach to development that makes them popular. in fact, semi-formal notations are intuitive and provide easy to read sketches of different aspects of systems. furthermore, some semi-formal notations, such as uml and entity-relationship diagrams, are de facto modelling idioms among software engineers. however, it is in the details that we find their weaknesses. semi-formal notations lack a formal semantics, thus: models are likely to be ambiguous, inconsistent and not amenable to mechanical semantic analysis. the semantics issue is aggravated by the fact that semi-formal notations have many semantic interpretations: the choice of semantics becomes a matter of convenience, developers use one semantics or the other depending on the kind of problem at hand. moreover, not all properties of systems can be expressed with diagrams; usually, developers resort to textual notations to describe detailed system constraints.



to tackle these problems, in we draw on the ideas of pattern-based development and problem-driven methods to advocate an approach based on frameworks for rigorous, but practical mdd. our mdd frameworks are environments for engineers to construct, analyse and refine models of software systems that are designed to address the needs of a specific problem domain. they use diagrams and formal modelling languages, with the diagrams acting as a graphical interface for the formality that lies beneath. the aim is to hide the formality completely, but this is not always possible.



this paper gives an overview of the general approach to build generative frameworks advocated in and the uml+ z framework in particular, also developed in. it illustrates a generative model development with the uml+ z framework, where the z model is generated from templates of the uml+ z catalogue. the paper shows how published results related to the research reported here can be used in the wider context of the uml+ z framework. in particular, it shows how the language ftl developed in[2,6] can be used to build a catalogue of templates and meta-theorems for uml+ z, how the catalogue can be used to generate a z model with the object-oriented(oo) style developed in[2,3] by applying uml+ z to a simpler version of the case study developed in, and how the resulting uml+ z model can be formally analysed by using the snapshot analysis technique developed in[2,5].



the following starts by giving a brief overview of ftl and its meta-proof approach. then, it gives an overview of the method proposed to build frameworks in general and the uml+ z framework in particular. next, it illustrates the uml+ z framework by applying it to a simple problem. finally, it discusses the results of the research presented here, compares it with related work, and makes the conclusions.



any formal sentence or sentences of some formal language(here z) can be represented as templates expressed in ftl. is it possible to reason(or do proof) with these template representations? if it were possible, that would have substantial practical value. it would mean that reuse could be brought to the level of proofs: meta-theorems for certain templates would be proved once, but could be applicable every time those templates are instantiated. this approach of proof with templates is called meta-proof. first, the practical value of meta-proof is motivated with an example.



the argument outlined in this meta-proof is rigorous and valid, but it is not formal. to follow a formal approach towards meta-proof, a formal semantics has been given to ftl. this allows the definition of proof rules for z template expressions, which are proved by appeal to the semantics of ftl.



in the uml+ z framework, there is a z semantic domain to express oo models so that every diagram of a uml+z model is represented in this semantic domain. there is also a catalogue of templates and meta-theorems related to model consistency, which capture the structure of the z semantic domain; every z sentence of a uml+ z model is generated by instantiating one of the templates of the catalogue. the formal definition of the semantic mapping of uml+ z is left for future work; currently it is performed by hand.



this technique is based on drawing snapshots(object diagrams). a snapshot describe one state of the modelled system. snapshots can be used in pairs to describe the effects of an operation upon the state of the system: one snapshot describes the before state, the other the after state. the analysis consists of representing snapshots in the z semantic domain, and then proving, in the z world, that the snapshot or snapshot pair is satisfied by the model of the system. in the examples used here, these proofs are performed using the z/eves theorem prover.



the refinement component of uml+ z is left for future work. the aim is to define a strategy to refine uml+ z models, based on the theory of refinement for z, and some example model transformations. the idea is to use ftl to capture refactorings and to explore meta-proof to reduce the proof overhead associated with these refactorings. the process is similar to the one followed in modelling:(a) refactorings and associated correctness conjectures are captured with templates;



this section illustrates the uml+ z framework with a use case of a trivial system to track orders that are placed on products. this use case is a simpler version of the one modelled in. for reasons of space, only illustrative parts of the model are given. further details about a model for this case study can be found in. first, we build a model of the system, and then we analyse it with snapshots.



the following presents a partial z model of the ordering system for each view of the oo z style(structural, intensional, extensional and relational; see[3,2] for further details). the z model is generated from templates of the uml+ z catalogue, by instantiating them with information coming from the diagrams and extra information coming from the user. appendix b presents the templates used to generate the z presented here. the templates use z generics from the uml+ z toolkit(the ones used here are given in appendix a).



this view defines the system as a whole. the state space and initialisation of the system is generated from template t9. in this case, as there are no global constraints, this is fully generated. there is a schema representing all the system constraints, as there are no global constraints this includes just the association link schema:



our pattern-based approach, based on ftl and meta-proof, contributes to make formal methods more practical. ftl allows the representation of structural patterns, so that they can be reused(or adapted to a context) by instantiation. metaproof allows reasoning at the level of patterns to establish meta-theorems so that the same reasoning effort can be reused. in uml+ z, all z is generated by template instantiation, and the proof effort associated with consistency-checking is reduced by applying meta-theorems.



tool support would bring mdd frameworks into full bloom. currently, templates are instantiated by hand and users need to switch from the uml tools to z tools. however, we envisage a tool that could automate most of the process, minimising the exposure of developers to z tools.



our approach differs from these works in that it is fully formal. our frameworks are designed to integrate formal and semi-formal modelling languages for the purpose of rigorous development. uml+ z for instance is designed for the combined use of uml and z. another key feature is that our approach is based on ftl, a formal language to express patterns, which is used to build a catalogue of templates for a a framework. such a catalogue has been illustrated above in the context of uml+ z.



