multiformalism modeling has shown to be a valuable technique to cope with the complexity of the constraints that apply to specifications of computer-based systems state of the art. multiformalism techniques help modelers and designers by providing a more(natural and) convenient approach in the specification process and in analysis of performance. although their application does not necessarily provide an advantage in the solutions of the models, this paper shows how a compositional multiformalism modeling approach can leverage the power of product-form solutions to offer both efficient solution and specification of models for complex systems.



state space based model analysis techniques suffer from the so-called state space explosion problem. modularity has been exploited differently in literature to confront this problem, suggesting that a proper management of submodels composition can generate solutions efficiently. simulation can play the role of the silver bullet at the cost of possibly longer computing time. in a number of cases it is possible to generate efficient analytical solutions either by relying on specific characteristics of the composition structure, or by introducing proper artifices. this is the case for product-form solution techniques, that offer a number of known cases in which the analysis of a complex model can be obtained by analyzing its components.



in this paper we show how product-form solution theory easily couples with multiformalism compositional modeling techniques, to obtain a modeling and analysis framework that offers modeling flexibility and efficient solutions. the contribution of this paper is founded on the design and implementation of an extensible modeling and solution framework, supported by a tool solving multiformalism markovian models with a threefold solution mechanism. the tool automatically verifies and performs a product-form solution. if this is not available it provides a state space based analytical solution or a simulation as final backup tool. the research extends the simthesys framework and



the approach proposed in this paper leverages the existing modularity in multiformalism models and the possibilities of the simthesys framework to exploit markov chains product-form solutions detection in a multiformalism solution process. the simthesys framework supports the design and development of user-defined formalisms, for which a proper(multi)formalism solver is automatically generated. the framework defines a formalisms design technique, based on metamodeling and on a mechanism to specify the structural and dynamic characteristics of every element of a formalism[4,6,5]. solver generation is based on the analysis of the formalism description and on a set of basic solving engines, where basic should be intended as able to implement fundamental solving techniques. in this paper, the markov chain solving engines(analytical and simulative) are used, together with a new solving engine that benefits from the inap algorithm and the marcat theorem.



the state of the sub-models is simply defined by the occupancy of the queues. the local events are used to account for ends of service in a queue, and for an arrival to the system. active events are used to consider departures from the system from sinks that have an associated label(active sinks), and arrivals to the system coming from an active source. passive events are used to model both passive arrivals and passive departures: the former corresponds to arrivals in the system triggered by the firing of an active transition belonging to a different sub-model. the latter to customer immediately leaving a system due to an interrupt coming from a different source. moreover, queues, sources and sinks can be blocked when the total queue length of neighbour stations(but always in the same sub-mode) become larger or smaller than a given trheshold thanks to test and inhibitor arcs.



the queueing network semantic is implemented in this way. first enabled events are determened by looking at the size of the queue of the various stations. all source and active source primitives always generate an event(a local event for the former, and an active event for the latter). passive sources generate passive events. queue primitives generate events if the corresponding queue has at least one customer. the event is local if the destination of the queue is another queue or a sink, it is active if the destination is an active departure, and passive for passive departures.



the stochastic petri nets formalism has four node elements: the place element, characterized by its marking; the transition element, characterized by its rate; the active transition element, characterized by its rate and the label it exports; the passive transition element, the rate of which depends on the bound label. the formalism has arc elements analogously to the queuing network formalism. active transitions behave exactly has standard spns timed transition, but they also expose a label when they fire. passive transitions instead, are completely governed by the active events happening in other sub-models. petri nets are implemented by generating an event for each enabled transition. in particular, the type of the event generated corresponds to the type of transition: local events for standard transitions, active events for active transitions and passive events for passive transitions.



provide a formalism independent cooperation scheme that allows the synchronization among sub-models, specified using different modeling languages. the sub-models are connected using cooperation arcs in the enclosing main model. each cooperation arc has associated a set of labels and it is directed from a source sub-model to a destination sub-model: whenever an active events, with the corresponding label, happens in the source sub-model, it triggers enabled passive events, associated with the same label, in the destination sub-model.



a data stream processing system for the detection and monitoring of seismic phenomena is structured in two main subsystem: a pre-processing subsystem and a critical detection subsystem. the first is composed of two stages, each of which processes batches with a temporally variable computation, whose duration is exponentially distributed. both the stages receive different jobs to be processed, with an exponentially distributed rate. in addition, the second receives part of the output batches of the first and some of the jobs processed by the second are sent back to be processed by the first, while the others constitute the output of the subsystem. each of the stages can buffer a number of timestamped jobs. a stage that is not allowed to dispatch a job to the next one has to reprocess the data, to account for the time elapsed.



the second subsystem processes the output jobs of the first one, together with additional jobs that are sent to it. to protect this critical subsystem, a protection mechanism can shut it temporarily off when the number of jobs is greater than a fixed threshold and an overload condition is detected. in such cases, the arrival of new jobs is blocked and losses occur. the protection mechanism is supplied by a proper subsystem.



the product-form analytical solution of the case-study model depends on the choice of some rates as illustrated by proposition 3.1. although this is somehow disappointing from a modelling point of view, the importance is not only theoretical. for instance, a product-form parameterisation of the model could be applied to validate the simulation results, or in case the rate conditions are not satisfied, an approximated analysis could be carried out.



for what concerns stochastic automata networks and product forms, this topic has been addressed in several works, such as for example[10,12]. the topic of our work is however quite different: instead of exploiting relations among tensor algebra and product forms, using sans as an tool to express the dynamic of the cooperating models, we are interested in exploring the relations among product forms and the evolution of a submodel as determined by an high level tool such as simthesys. in our approach, the san-like structure has been mainly used as an interchange format to interface the model analysis tool with the underlaying solving engine.



in this paper we have presented a technique to identify product form solutions in a multiformalism framework. the check for the existence and the computation of the solution is performed during the generation of the state space of the submodels that composes the main model under study. state space is generated using behaviors that are associated with formalism specification. this provides a greater flexibility and allows the application of product form solutions to new formalism without the development of new tools.



