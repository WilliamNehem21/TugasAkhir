lscs allow us to distinguish between possible and mandatory behaviour, and express forbidden behaviour also called anti-scenarios. since they were first introduced in several aspects have been added including time, symbolic instances and classes. we do not consider these special features here but focus on basic lscs with assignments, conditions, subcharts and forbidden elements. a detailed description of lscs and their(partial) implementation in a tool called the play engine can be found in.



there are several ways of achieving synchronisation in lscs. the beginning of a prechart and the main chart are default synchronisation points. all instances enter the prechart simultaneously, while the main chart can be entered only after all the instances have successfully completed their activities in the prechart. in the same way, the beginning and the end of a subchart are synchronisation points for all participating instances. as a result, a subchart can be entered only when all the instances that participate in it arrive at the subchart initial location and can be exited only when all those instances have completed their activities(or if it contains a condition that evaluates to false).



in general, there is no partial order between the events and the condition in the chart body. therefore, as soon as an instance reaches a condition, if this evaluates to true, the instance can progress beyond the condition. lscs allow to synchronise the progress of one or several objects with the evaluation of a condition, that is, none of the synchronised instances may progress beyond the condition until all of them reach it and it is actually evaluated.



lscs allow the definition of anti-scenarios corresponding to scenarios that the system should not be allowed to execute. this is achieved through universal charts where the forbidden scenario is specified in the prechart and the main chart consists only of the hot condition false. if the forbidden scenario is successfully executed, the main chart is activated and the hot condition evaluated. since this condition is always guaranteed to fail, it causes a violation.



a message is a communication between two instances that conveys information with the expectation that action will ensue. a message will cause an operation to be invoked, a signal to be raised, or an instance to be created or destroyed. messages are shown as a horizontal arrow from the lifeline of one instance to the lifeline of another instance. a message specifies not only the kind of communication between instances, but also the sender and receiver event occurrences associated to it.



tween the behaviours of the operands, i.e. the ordering of event occurrences within each of the operands are maintained whereas event occurrences on different lifelines from different operands may come in any order, and event occurrences on the same lifeline from different operands are ordered such that an event occurrence of the first operand comes before that of the second operand.



it should be noticed that the above description taken literally from is incomplete and ambiguous. for example, it is not clear whether it should be possible to have several guard expressions in an alt operator evaluating to true, and in such a case how to determine or enforce a particular operand to be executed. further, using a neg operator it is not clear when a trace becomes invalid(negative), though one could expect that a prefix of the negative trace is still valid and therefore positive.



in the previous versions of uml, it was not possible to express that, at any time, a specific scenario should not occur. however, as mentioned at the beginning of this section, a new operator called neg has been introduced for this purpose in uml 2.0. therefore, to model what is called an anti-scenario in lscs, we simply place it inside an interaction fragment within the scope of a neg.



the diagram shows an interaction between a user and three system instances. the interaction is triggered by the user sending message m1 to instance i. the intended meaning of the diagram is that after m1 and m2 have been sent the system must continue as described in the assert fragment. whilst in the assert fragment, the user is not allowed to resend message m1 at any time(this is indicated by the neg fragment containing message m1 within a par fragment, whereby the intended execution is described in the first operand. semantically it means that m1 is not allowed to occur interleaved with whatever happens in the first operand). after messages m3 and m4 are sent 4 an alt fragment is entered, where the condition is given by k.n>0(where n is for instance an attribute of instance k). in the second operand of alt, ready is a state invariant over instance i. recall that if a state invariant is evaluated to false the whole trace is invalid. the valid execution finishes with instance i sending message m9 to the user.



it should be noted that message expressions in ocl 2.0 can only be used in a postcondition of an operation/method(say o) and have the underlying meaning that the message must have been sent during the execution of o. our usage within an ae template is not incompatible with this intention because messages are always sent between instances while executing certain operations. further, the ocl 2.0 specification document does not include a formal semantics for message expressions. a recent paper describes an extension of the usual semantics given to ocl expressions for message expressions. our approach is in accordance with the semantics of.



for liveness constraints of case 2 we mainly need to refer to different locations in the lifeline of one instance, which is the contextual instance of the constraint. several situations are possible depending on what either of the locations are: message send event, message receive event, condition, assignment, state invariant, entering or exiting an interaction fragment. notice that state invariants are also considered interaction fragments(see page 433) but they should be treated differently as they only concern one instance.



condition(d) basically states that the messages m1 and m2 constitute a precondition for the assert fragment. both messages have to be sent before any instance is allowed to progress and reach the assert fragment or any location thereafter. we can add here the constraint that the instances have to synchronise when entering the assert fragment. condition(d) is described by the following constraint



further, we can now describe also that an assert fragment must finish, i.e., after all instances are at the beginning of the interaction fragment, eventually all instances must reach the end of the(same) fragment and synchronise. this refers to condition(c).



finally, in case(e) we are imposing that m8 has to be received before instance i enters state ready. the constraint is global, because message m8 is exchanged between instances k and j whilst the state invariant refers to instance i. without this constraint, instance i is allowed to enter state ready before m8 was sent and received. there are two possible ways to deal with this case. either we use ocl as described below or we enclose the messages and the state invariant within a strict combined fragment.



