the remainder of the paper is organized in the following way. in section 2, we describe some formal preliminaries. in section 3, we describe e-cooperatives in more detail and we informally describe our ewe model. in section 4, we give the logical axioms that define the ewe model. in section 5, we describe the applicationspecific, non-logical axioms and we discuss their use in ewe policy formulation. in section 6, we describe an implementation of our approach. in section 7, we discuss the related literature. in section 8, conclusions are drawn and further work is suggested.



in order to act on behalf of a client, a server agent s must have an intention to act either individualistically(in f-mode) or cooperatively(in c-mode). the intentions that an agent s of the e-cooperative has to act often depends on whether s is acting in f-mode or c-mode(e.g., for an act of buying, the minimum value of a purchase that is allowed by an agent s in f-mode may be less than s allows in c-mode).



all server agents must respect the principle of maximal individualistic satisfaction, the shared group ethos. other forms of group ethos are, of course, possible(e.g., to allow for group competitiveness); these alternatives are the basis for different ethoses that can, nevertheless, be naturally represented in our framework.



the notion of an event is of primary importance in our approach. the importance of the concept of events is emphasized by their widespread use in linguistics and knowledge representation(e.g., in verb nominalization). events provide a categorically homogeneous basis for representing change, a feature that is an essential aspect of our ewe model.



we interpret events as happenings at an instance of time. we adopt a onedimensional, linear, discrete view of time, with a beginning and no end point. that is, the model of time that we choose is a total ordering of time points that is isomorphic to the natural numbers. in the ensuing discussion, we represent times



ewe policy conditions will often need to be specified with respect to the current time extracted from the system clock. for that, we utilize the auxiliary predicate current time/1, which gives system clock times and has a fixed interpretation such that current time(t)= true if t= now and false otherwise. the semantics of now is defined in.



the meaning of permission/3 is that a client c has the option of performing the action a on resource r if c is assigned the status l(as defined by sla/2 where sla is short for status level assignment) and some server agent s of the e-cooperative(acting in f-mode) or some(finite) subset{s1,..., sn} of the set of server agents of the e-cooperative(acting in c-mode) specify that clients with l status have the option of performing the action a on r.



