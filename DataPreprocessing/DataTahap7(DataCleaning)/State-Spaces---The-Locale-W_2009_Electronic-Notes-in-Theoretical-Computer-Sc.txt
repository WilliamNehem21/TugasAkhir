verification of imperative programs means reasoning about modifications of a program state. so proper representation of state spaces is crucial for the usability of a corresponding verification environment. in this paper we discuss various existing state space models under different aspects like strong typing, modularity and scalability. we also propose a variant based on the locale infrastructure of isabelle. thus we manage to combine the advantages of previous formulations(without suffering from their disadvantages), and gain extra flexibility in composing state space components(inherited from the modularity of locales).



this short discussion already shows that we cannot expect a single solution that fits best to all possible applications. our particular motivation for this work was reasoning about c0 programs(a type-safe subset of c), within the verisoft project. 4 here the state was represented as a record in a general hoare logic environment, implemented in isabelle/hol. it turned out that the main limitation of this record representation is a lack of compositionality and scalability in the large verification tasks of verisoft.



lookup and update. the most basic features of a state space is the lookup and update of a variable, as they appear in programming language expressions, assertions, or in statements. to reason about a global state it is also crucial to express so-called frame conditions, the parts of a state that do not change during certain operations. putting those aspects together we need means to access an individual variable and also its complement(all other variables).



typing. typed programming languages structure the program state by assigning different types to the variables. programming language types can either be mapped to hol types or hol terms(e.g. as sets). if the programming language is type-safe and the hol type system is expressive enough it is desirable to map the program types directly to hol types. thus strong typing of the underlying logic is directly employed to support verification of imperative programs.



modularity. when composing a system from several components the question of modularity of the reasoning framework appears. immediate compositionality demands a uniform representation of the state space of the different components. otherwise intermediate steps may have to be introduced to lift a component and a property to the combined state space. if components are replicated, renaming may also become important for compositionality. e.g. consider a library for linked heap lists that regards only a next pointer for operations like append, reverse, etc. this basic structure may appear in various kinds of lists, like strings or queues. then it is desirable to verify the library only once for an abstract next-field, and instantiate it later for various kinds



the different representations for integers(int), booleans(bool) and arrays(value list) are injected into the type value by the constructors intg, bool and array. by modelling arrays as lists of values also nested arrays can be expressed. an example array of array of integers is array[array[intg 1, intg 2], array[intg 3, intg 4]]. a drawback of this approach is that a mixed array like array[intg 1, bool b] is a perfectly legal value but is typically ruled out by the type system of the programming language. this issue carries on to expressions, where we have to explicitly deal with programming language typing within hol. consider the simple statement x:= y+ 1. such an assignment boils down to a function update in our state space. to handle the addition we somehow have to lift the hol addition that is defined for type int to type value. there are two possibilities: project the arguments or lift the operation. even in case of a deep embedding of the expression and statement language the evaluation function implements one of those two possibilities(or maybe a mixture of both of them).



since the set of possible operations is made explicit by the datatype bop, the evaluation function eval can take care of typing issues and implicitly perform the projections from value. however, primitive values like 1 have to be injected into type value now. moreover, basic properties of the operations only hold for correctly typed expressions. e.g. commutativity of addition: eval(add, n, m)= eval(add, m, n) only holds, if we know that both arguments are of the form intg i. in this case we can reduce the addition on type value to the ordinary integer addition and inherit its properties. we need to insert those explicit type constraints into the assertions about the program to be able to lift the logical properties of the operations for types int or bool to type value. this basically means that we prove type safety of evaluation every time we reason about expressions. this is annoying, since for a type-safe programming language this can be shown once and for all.



projections and injections cancel each other in individual programs. e.g. if variable i is supposed to store an int, every update introduces the constructor intg and a lookup(as it may appear in an assertion) uses the corresponding destructor the-intg, but not the-bool etc. the abstraction level on which assertions are formulated is the-intg(s i) and not something like s i= intg



n. this uniform view on a state as holding atomic entities in the projected form the-intg(s i) avoids implicit type constraints that would have to be discharged later. this is exactly the same view as provided by the other state space representations discussed below.



the restriction to one common universal type of values is another(theoretical) burden. we need to know in advance which values are embedded. this contradicts the very idea of truly modular development of components. however, as long as all the different values of the programming language can be embedded into an inductive datatype once and for all, this is not a practical issue.



poor compositionality is also caused by the lack of a uniform state for all components. if we attempt to combine two components we can first build the cartesian product of the underlying state spaces and try to rerun the old proofs. however, this will only work if the variable names occurring in the proofs are distinct to begin with. elsewise we could try to come up with a calculus for composition, that lifts components to the cartesian products.



records are similar to tuples, but additionally allow us to give proper names to variables. they were proposed by wenzel as state space representation and successfully used by prensa for the verification of parallel programs and by paulson for the formalisation of unity. records enhance tuples by supplying selection and update functions for each constituent. for example, a calculus for record composition, by defining an operator that transforms the state space by lifting all operations and assertions from a component state to the compound state. this approach is implemented and elaborated for a hoare logic, but it gets technically tedious to implement in the tool and is rather heavyweight. paulson has developed a theory of program composition for unity, experiencing similar inconveniences.



scalability of records is better than for raw tuples. by using lookup and update functions the record is not explicitly split in every expression. moreover, the representing type for records may be grouped according to the structure of record extensions, not individual record fields. this reduces the number of nested tuple constructions. however, the 2008/2009 version of the record package in isabelle/hol still decomposes records internally to prove some auxiliary theorems, e.g. in the simplification procedure that proves that an update of a field x does not affect the value of another field y. hence the performance of records also suffers from their size. in isabelle/hol records are defined as an abstraction on tuples nested to the right. better results may be achieved by balanced nesting of tuples as a binary tree, as for example implemented in hol4. 5



apart from such purely logical assumptions and conclusions, the context may also hold additional non-logical information(type constraints, concrete syntax, hints for proof tools etc.). thus the content of a context may be understood as arbitrary data that is abstracted over logical entities(types, terms, theorems).



locale expressions compose existing locales via merge and rename operations. multiple inheritance between locales can be expressed here. a new locale definition may add assumptions to a locale expression. locale interpretation transfers results stemming from one locale into another context. interpretation works between locales, within a proof body, or at the outer theory level.



this specification of procedures on heap lists follows mehta and nipkow. from the pointer structure in the heap we(relationally) abstract to hol lists of references. the predicate list p next ps expresses that we obtain the(hol) list of references ps by starting at reference p and following the next heap.



we can now use ordinary locale operations to merge and rename locales to create two instances of the list reversal procedure. one for strings, named revs and one for queues named revq. the only thing we have to do is to rename the next component and the procedure name accordingly. this can be done with the following locale operations(new parameters are listed after for):



the aforementioned procedures command ensures, that any procedure using one of the procedures revs or revq imports the locales revs-impl or revq-impl, respectively. within this setup both instances of the procedure specification are immediately available for the further program verification. e.g.



our approach of representing state spaces for imperative programs is a combination of basic logical concepts with an extra-logical layer for type-checking and notation. the latter is based on existing locale infrastructure in isabelle, which happily supports arbitrary declarations in proof contexts(such as program variables with their types). this careful arrangement in different layers allows to return to a simple logical model of states spaces as functions(as already seen in early experiments in hol and in informal mathematics).



tomatically by our syntax layer. we did not need to consider the more complex notion of dependent function types, which are beyond hol anyway. instead, the isabelle infrastructure is able to support a kind of user space type system outside the logic.



