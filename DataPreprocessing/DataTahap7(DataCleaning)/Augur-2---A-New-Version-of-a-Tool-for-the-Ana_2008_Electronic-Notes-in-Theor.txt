we describe the design and the present state of the verification tool augur 2 which is currently being developed. it is based on augur 1, a tool which can analyze graph transformation systems by approximating them by petri nets. the main reason for the new development was to create an open, flexible and extensible verification environment. also, compared to the previous version, augur 2 will include more functionality and new analysis techniques.



we started with a small tool that reads gtxl files and produces gxl files(gxl respectively gtxl are xml standards for the encoding of graphs and graph transformation systems). afterwards we faced the constant necessity of adding new features and new functionality. more specifically, we added analysis algorithms for petri nets based on coverability graphs and backward reachability. furthermore we established an interface to graphviz 1 for visualization purposes. we also added the possibility to specify forbidden paths in graphs using regular



the architecture of augur 1 was strongly oriented towards the concrete task of approximated unfolding of gtss. this made all changes mentioned above hard to implement and led to several versions of the tool, each with a different functionality. hence the new version of augur(called augur 2) will have a more general and extensible software architecture and will have more functionality concerning analysis and visualization methods.



another new feature of augur 2 will be the possibility to work with attributed graphs, i.e., graphs with(integer and string) attributes assigned to nodes and edges. as a future research topic we plan to extend existing analysis techniques accordingly. support for input and output will also be extended, for instance we are currently working on an interface to agg. also, we defined a simple pointermanipulating programming language, which can be translated into graph rewriting, as an additional means of input.



we use hypergraph rewriting where left-hand and right-hand sides can be(almost) arbitrary hypergraphs. compared to the double-pushout approach our gtss have to observe some restrictions: especially, the interface graph of a rule must be discrete, no nodes can be deleted and rules must be consuming, i.e., at least one edge is deleted. while the last two restrictions are essential for the unfolding-based approach we are following, the first restriction(the interface is discrete) will be lifted in augur 2.



since gtss are in general turing-powerful, over-approximation techniques are needed for their analysis. in our case we abstract gtss by petri nets, which are a conceptually simpler formalism and for which several verification techniques have already been developed. more specifically, the tool is based on an approximated unfolding technique for gtss, presented in. compared to a standard unfolding technique we are additionally using folding steps which over-approximate, but guar-



the petri graph is an over-approximation in the following sense:(i) every reachable graph can be mapped to its hypergraph component via a(usually non-injective) graph morphism and(ii) the multi-set image of its edges corresponds to a reachable marking of the net. for instance the five edges of the initial graph correspond to the five tokens of the initial marking of the net. more generally there exists a simulation relation between the reachable graphs and the reachable markings of the net, obtained by firing enabled transitions. more details can be found in[3,6].



erty, techniques for refining the approximation are available. one such technique is counterexample-guided abstraction refinement which starts from a concrete counterexample found by coverability checking on the petri net. another possibility is to use depth-based refinement which constructs an over-approximation exact up to a pre-defined depth in the unfolding. counterexample-guided abstraction refinement usually results in smaller approximations and faster verification.



the central part of the software design is the concept of algorithms, which are implemented as classes. each program module working with the common data structures should be realized as an algorithm and new algorithms can be added during the whole life time of the system. as examples of algorithms we mention here different operations on petri graphs(firing of transitions, building the coverability graph, searching for matches of left-hand sides, performing folding/unfolding steps, etc.) and input/output operations(readers and writers from/to different data formats).



several tools are available for the analysis of graph transformation systems. while some groups[22,9] pursue the idea of translating graph transformation systems into the input language of a model checker, others attempt to develop new specialized methods for graph rewriting. work from our side goes in this latter direction, as well as, which led to the tool groove for verifying finite-state gts. properties different from reachability(such as termination and confluence via critical pair analysis) can be analyzed using agg.



in this paper we have summarized our plans for the development of augur 2, a new version of an analysis and verification tool based on unfolding techniques. some functionality is already present in the current version augur 1, furthermore the core part of augur 2, including the database management, has already been implemented. this tool will enable us to conduct further case studies, which will give us valuable stimulations for the future development of the verification techniques.



