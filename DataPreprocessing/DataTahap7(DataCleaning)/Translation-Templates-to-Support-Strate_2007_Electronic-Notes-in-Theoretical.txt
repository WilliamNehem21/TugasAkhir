the task of developing strategies for proving classes of properties in a theorem prover divides naturally into at least two phases. the first phase is the formulation for the prover of problem specifications, i.e., of settings and assertions to be proved



in the formulation phase, a tension arises between convenience for the formulator and the ultimate convenience for the theorem prover. in particular, the specification formulation most natural to a user may not be the ideal formulation for reasoning about properties of the specification in a theorem prover. one way to alleviate the tension is to provide an intermediate layer between the specifier and the prover that translates specifications expressed in a form natural to the user into a form more convenient for the prover.



in this paper, we focus on the integration of the theorem prover pvs into the tioa(timed input/output automata) system development framework. a combination of pvs features make pvs a good choice for theorem proving support in tioa. first, the higher order nature of pvs allows the use of function-valued state variables in representing the state of an automaton. this is useful, for example, when there are state variables parameterized by a parameter whose type is uninterpreted(e.g., in a concurrent or distributed system, a parameter of type process). as will be seen below, the higher order constructs in pvs also provide a convenient method of treating periods of continuous state evolution in an automaton analogously to atomic state transitions. second, as described in[2,1], the fact that pvs saves rerunnable proof scripts and supports automated assertion labeling and proof comments facilitates the implementation, as pvs strategies, of proof steps using which users can create pvs proof scripts of properties visibly, if roughly, isomorphic to high level hand proofs. this paper describes how the translation scheme central to our integration of pvs into tioa produces pvs specifications structured by templates to support the creation of pvs strategies of this nature implementing reasoning steps suited to proving invariant and simulation properties of tioa specifications.



the paper is organized as follows: section 2 discusses how the work described in this paper relates to other work. section 3 provides some background on the tioa toolkit and on the pvs interface tame used to integrate pvs into the toolkit. section 4 describes the tioa framework and its specification language. section 5 describes a set of templates we designed for use in the tame representations of tioa specifications, and explains how they facilitate reusing old and developing new pvs strategies for tame for reasoning about specification properties. section 6 discusses how the tioa-to-pvs translator in the toolkit has evolved from producing nearly literal translations of tioa specifications to producing translations that



various tools have been previously developed for translating specifications in the ioa(input/output automata) language[8,10], the predecessor of the tioa language, into the language of different theorem provers, including the larch prover[6,11], isabelle[28,24,22,23], and pvs. a previous translator from tioa(and hence ioa) to pvs is described in. the translator described in this paper, which is derived from the translator in, is the first tioa-to-pvs translator designed especially to support strategy development.



mechanized proof steps that correspond to reasoning steps typical in high level hand proofs of automaton properties including invariant and simulation properties. the proof steps are implemented as pvs strategies. through building automatic translators of specifications to pvs specifications that instantiate tame templates and implementing additional, setting-specific tame proof steps as pvs strategies, tame has been adapted to provide theorem proving support in several settings.



for the specification, analysis, and refinement of distributed and concurrent systems. tioa specifications model a system as an automaton with a set of states, one or more initial states, actions that cause state transitions, and trajectories. the tioa specification language extends the ioa(input/output automata or i/o automata) language[8,10], which has been in use(initially informally) for nearly two decades(see, e.g.,[19,12,22,26]), by adding constructs for defining trajectories that describe how a system state can evolve as the result of time passage. complex systems can be modeled as a composition of automata; like i/o automata, timed i/o automata can be composed by joining output actions to input actions.



a tioa specification consists of the definition of one or more automaton models, together with the definition of properties of interest of these automata and, if needed, a vocabulary in which types, constants, and operators referred to in the automaton definitions are declared. with some exceptions(such as enumerated types), the semantics of the declarations in a specification vocabulary used in analysis of the specification is provided by way of the analysis tool being used. thus, when pvs is applied to proving that certain properties of interest hold for automata specified in tioa, the vocabulary takes its semantics from some appropriate pvs theory.



declaration of each variable of fischer specifies its name, type, and initial value. specifying the initial value of a variable is optional; the tioa language also allows initially clause to constrain, or further constrain, the variable values in a start state. no initially clause is needed in the specification of fischer.



this section begins with an overview of the current translation scheme employed by the tioa-to-pvs translator. it then discusses the issues involved with previously used(or considered) translation schemes and, for each issue, discusses how it was solved by updating the translation scheme to follow templates updated to improve strategy support(including those discussed in section 5). an important goal of the tioa-to-pvs translator is to avoid forcing the user to change the form of a tioa specification to support adherence of its pvs translation to a particular template. as will be seen below, with some minor exceptions, we have achieved this goal. for a more complete description of the translator and the translation scheme, we refer the reader to.



this scheme asserts the start state condition using a conjunction of clauses, and asserts the initial values of function(i.e., array) valued state variables in terms of assertions universally quantified over their arguments(indices). thus, when(as is often the case) there are state variables of function type, reasoning about the start state at the state variable level is not supported, and automated support for the reasoning about the start state is complicated by the presence of quantifiers.



initial solution; new issue. to solve this problem, we embed the trajectory as a functional parameter of the time passage action. this approach allows us to use the functional parameter f to assert properties throughout the duration of the trajectory using a forall quantifier.



this translation scheme, however, poses problems in proofs and strategies when we only want to reason about a specific component of the trajectory definition. for example, when we only want to reason about how the evolve clause of the trajectory affects the state variables, we still have to deal with the entire universally quantified expression covering all three clauses. in addition, we have to identify the evolve clause component of the expression under the quantifier, which may not be straightforward to do, as this expression is not guaranteed to be a conjunction of three subexpressions.



the issue. in an earlier version of the tioa to tame translation scheme, the where clause stating the relationship among the automaton parameters was translated as an additional clause conjoined to the start predicate. then, an invariant duplicating the where clause is specified, proved, and used in other invariants requiring the use of the assertion about the automaton parameters. this invariant is trivially proved 5, because it is by definition true in the start state, and because the values of the automaton parameters are never modified by any transitions. in particular, applied to the automaton fischer, the earlier translation scheme produces the following form of the start predicate, which has an additional clause conjoined:



solution. to relieve the user from having to prove the additional invariant lemma for every parameterized automaton and to apply the invariant to introduce the constraints in other proofs, the translation scheme has been modified to translate the where clause as a separate axiom named const facts. this decision allows the user to invoke the axiom directly with a standard tame proof step(also called const facts 6) rather than introducing the information by applying an invariant lemma. it also allows separation of concerns between constraints on the start state and the parameters.



the use of explicit substitution tends to be more efficient in terms of theorem proving, because the translator has done the work of computing the final value of each variable, allowing reasoning about individual variables to be performed easily. for short programs, the explicit substitution method also produces more compact code. on the other hand, for longer programs which might have deep levels of dependencies among variables, the explicit substitution method may yield more complicated expressions. in such cases, translation using the let keyword may produce a simpler translation which corresponds more clearly to the original program.



the issue. in our current translation scheme, the preconditions and transitions are defined separately, in the enabled predicate and the trans function respectively. this is done first, because it is a natural separation of concerns, and second, because it allows proofs of properties to reflect which preconditions, if any, are actually used. but a side effect of this separation is that some unprovable type correctness conditions(tccs) may be generated by pvs as a result of the translation. as an illustration, consider the following tioa transition, where z is some state variable:



the issue. when an invariant of a tioa specification contains two or more consecutive universal quantifiers, a direct translation of these quantifiers into pvs can complicate automatic reasoning in pvs. for example, it makes it difficult for the tame strategy auto induct to coordinate the skolemization of the inductive conclusion with the instantiation of the inductive hypothesis in the induction step.



the tame strategy base case is not normally invoked directly by the user; rather, it is invoked by the strategy auto induct(see section 5) that does the initial steps of the induction proof of an automaton state invariant. in operation, base case first computes the assertion representing the base case of the induction. the hypothesis of this assertion is that the start state predicate start holds for some state s. the template form of start is a conjunction whose first component associates explicit values with some state variables and whose second component provides additional constraints on the values of the variables(see section 6.2). using standard pvs steps for decomposing conjunctions and labeling the new formulas that are produced, base case breaks the hypothesis into two parts labeled start-state and start-constraints. this allows auto induct to continue by substituting for s based on the formula start-state and then attempting to complete the proof by applying simplifications. this discharges the base case automatically in many cases.



with traj substituted for a and prestate(the pre-state of the trajectory action) substituted for s. the strategy apply traj evolve is then able to compute the value of f(t)(representing the state after time t) by instantiating the above formula with t and then using the pvs definition expansion command to expand traj evolve. finally, apply traj evolve uses a pvs command to replace f(t) by its value wherever it occurs.



the strategy deadline reason, when given an absolute time deadline d as a parameter, tries to prove that, on the current trajectory traj, absolute time cannot pass beyond time d. it does this by first applying apply traj stop to time t= dnow, and then using apply traj evolve to compute f(t) so that traj stop(traj)(f(t)) can be evaluated.(if it evaluates to true, the trajectory traj must stop after time t, i.e., at absolute time d.)



in this paper we have considered a particular case of a general problem: how to provide efficient theorem proving support in an interactive, higher order logic prover for establishing properties of a model of some given class, without forcing the user of the theorem prover to specify the model for the convenience of the prover rather than in a form natural to the user. in the case of automata models of systems, we have shown that this can be done by translating specifications written in a language designed for specifying automata(tioa) into the language of a theorem prover(pvs) while adhering to a set of templates governing how various aspects of the automaton model are represented in the theorem prover. we have discussed how both the structural and naming conventions captured in these templates can be used to advantage in developing efficient domain specific proof steps aimed at interactive reasoning about the aspects of an automaton model for which there are templates.



