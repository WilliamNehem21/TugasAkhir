most large-scaled software systems are structured in distributed components to manage complexity and have to cope with concurrent executed threads. system decomposition and concurrent flow of execution are orthogonal. a sound semantic model that is powerful enough to handle distributed concurrent components but also realistic enough to provide a foundation for component technologies actually in use is still missing. therefore, the paper introduces such an operational semantics for distributed concurrent component-based systems. based on this formal model, uml-based modeling techniques are introduced. tool support for modeling, code generation, and system execution is provided.



software engineers are confronted with steadily increasing complexity of the software systems under development. on the other hand, we depend more and more on these software systems in our daily life. hence, software engineers have to guarantee their dependability. nevertheless, the development of software systems still includes a high level of uncertainty. more than 70% of the development projects are not successful.



to implement those kinds of software systems with distributed concurrent components usually an object-oriented programming language like java or c++ is used. programming languages like java offer basic constructs for concurrent programs, like for instance the util.concurrent library. developing large-scaled distributed and concurrent systems based on these primitives is error-prone. higher-level abstractions are needed. to cope with distribution and network communication, component technologies like corba, j2ee, and.net are broadly used. these technologies basically provide a component model and a remote method call. thereby they lift the structuring of systems from objects to components and the concept of a blocking synchronous method call within a single process to a distributed environment.



in practice, before programmers start coding different specification artifacts have to be created to model the system under development. the primary focus is on the description of the component structure of the system using description languages like the uml. uml provides diagrams for static and dynamic behaviour. these techniques may be extended with elements describing more precise aspects of behaviour, such as jml and ocl. when it comes to integrate and refine these different parts of the models towards an implementation a clear semantical model of the relationship between the concurrent control flow and the component structure is missing, yet.



various approaches have been elaborated to extend uml and to come up with a precise semantics for distributed and parallel systems[5,6,7]. all these approaches are based on active objects. each concurrently executed thread belongs exclusively to a single object. thereby, the established modelconcurrent threads jumping from one component resp. object to anotheris simply ignored.



. in the theoretical foundation of object-oriented languages provided by martin abadi and luca cardelli, in focus, and in*-calculus concurrency is modelled in the sense of active objects resp. components or agents. but again, it does not support concurrent threads jumping from one object resp. component or agent to another.



the rest of the paper is structured as follows: the next section introduces a simple program to show the most important behavioral aspects of distributed concurrent component-based systems. in the following sections 3 to 6, an operational semantics for distributed concurrent component-based software systems is elaborated. in section 7 we show how this kind of distributed concurrent componentbased software system can be modeled using uml. in section 8 a short introduction into the modeling, code generation, and system execution tool environment for the presented approach is given. a short conclusion rounds the paper up.



finally, the class fourwins could serve as an observable which can be observed for visualization or analyzing purpose 2. other components may add themselves as observers. thereby object instances may be created and deleted. moreover the connections between these objects represented by references and pointers may be changed during system execution like for instance by adding a new observer to the list of observers within the class fourwins. thus, the operational semantics introduced in the next section has to support those kinds of dynamically changing structures.



the instance leveldescribed in the sections 3 to 6is the reliable semantic foundation of the description level. it provides an operational semantics for distributed concurrent componentsit is an abstraction of existing programming models like corba, j2ee, and.net. thereby, it defines the universe of all possible software systems that may be specified at the description level and implemented using the mentioned programming models.



furthermore, we assume an observation synchronous model because of the resulting simplicity and generality. this means that there is a global order of all observation points and thereby of all method calls and returns. note that this is not a critical constraint. existing distributed component environments like corba, j2ee, and.net control and manage all method calls and returns. such a component environment may transparently force a global order of all method calls and returns.



hence, such a run-time system is similar to a virtual machine. it observes and manages the execution of all threads. again, this is not a critical constraint even in a concurrent and distributed environment. existing distributed component environments like corba, j2ee, and.net control and manage all executed components within the environment. in section 8 we show how the proposed approach can be implemented by extending such an existing and widely used component environment like corba, j2ee or.net.



for instance, assume that a thread performs a method call. the value of an attribute is 5 as the thread has started the method call execution and the thread wants to change the value to 7 as it returns from this method call. at the observation point where the thread returns from the method call the value of the attribute is already 6, as another thread has changed the value in the meantime. hence, a possible inconsistency caused by concurrent thread execution occurs.



next system snapshot. thereby it can observe this consistency predicate and verify whether such a possible inconsistency situation occurs or not. if the run-time system detects such a possible inconsistent situation it may stop the system execution for reliability reasons. note that this formal consistency concept for concurrent threads is similar to optimistic locking techniques in databases.



asynchronous message update() to all interfaces observer which are connected via a connection observation. additionally to the normal observable functionality, the interface observable provides the method deploy(). calling deploy() results in creating a new component view with a corresponding interface observer and attaching the interface to the observable interface of the called component data. in order to specify the behavior of methods and message processing for each method and for each message, an uml activity diagram is provided. here, we use an extended version of uml activity diagrams or alternatively a textual representation



thread 1 and thread 2 could be the same thread. this depends on the caller. either both have the same caller, then thread 1 and thread 2 are identical, or the callers are different, then thread 1 and thread 2 are not identical. moreover thread 3 and thread 4 are newly created threads to process the received asynchronous messages update().



software engineers can use designit to model the component-based software system. to do this, the software engineer uses a case tool to develop a umlbased model of the desired component-based software systems. in doing so, the description techniques presented in the previous section should be usedcomponent diagrams for the static structure and syntax, and activity diagrams to model the behavior of methods and messages.



xslt transformations are used to generate the complete java program code out of the xml files(step 2). the resulting java components are then executed and debugged within the run-time system(step 3). when defects are detected in this step, the program can be debugged and analyzed.



the execution and debugging environment of designit is distributed itself. it is implemented using corba as distribution and network communication technique. the execution environment is a corba server. for each component type, a separate corba server is started. even the debugger is started within an own corba server. hence, the execution environment, the debugger, and each component type can be executed on a separate computer.



using this debugging environment, asynchronous messages or method calls from outside the system can be initiated. once the messages resp. method calls are stored in the run-time environment, the whole distributed and concurrent system can be executed step by step. each step represents an observation point in the sense of our operational semantics. once an inconsistency appears, the debugging environment stops the system execution and informs the software engineer about the presence of a possible inconsistency situation as discussed in section 6. the software engineer then can analyze the situation and fix the model until it is correct.



the ability to develop and maintain distributed concurrent component-based software systems is essential for modern software engineering. to bridge the gap between the vertical component-based decomposition of software systems and the horizontal concurrent execution flow in software systems, an operational semantic for distributed concurrent components has been elaborated. this model also includes hierarchical componentssoftware systems that contain components which are again composed out of so-called sub-components. this has not been presented in the paper but it is included in the complete formal semantics in.



execution. the overall system behavior can be calculated from the concurrently executed threads and their behavior relations. based on the operational semantics inconsistent system states, especially caused by the concurrent execution, can be detected during run-time and further system execution can be stopped.



moreover, textual and graphical description techniques have been presented to describe this kind of concurrent component-based software systems. a complete and formally founded semantically mapping of the description techniques to the operational semantics has not been presented in the paper. this has already been elaborated in.



based on this semantics complete code generation and execution within the runtime environment is supported. tool support for modeling, code generation and system execution has been implemented and used in small case studies. however, further improvement has to be done.



moreover tool support for reasoning on the specifications could be addressed. currently in concepts for reasoning about the changes of component composition in case of component evolution are already elaborated and implemented. further tool support concerning the consistency between specification and code may be a worth full improvement.



