the key idea in a time-dependent network is that the time-delay of a link depends on the point in time the link is used. this model is natural in several other situations, for example data-packets on the internet or cars on a road network. this models the phenomenon, that the delay a link induces depends on the path that is used to reach this link. in general shortest path questions on such networks are hard to answer, but important special cases allow for fast algorithms. these kind of networks have been considered in the literature, see for example[7,8] for a survey. the use of this type of modeling for routing passengers is described in, where the focus is on travelers using cars on the road network.



in the authors address the question, whether it is feasible to compute optimal itineraries for the german railway system. this question is also the example in. they propose several heuristic running time improvements that allow for sufficiently quick answers. our modeling is compatible to these heuristics, they can immediately be applied in the time-dependent algorithms as well. we expect that our modeling and algorithmic approach will lead to significant running time improvements that allow for a bigger or more detailed network(including local busses, extending to all of europe). for our lack of real world data the analysis of our approach is a theoretical comparison against. the modification of the network considered in also modifies only the station-aspect of the used graph, our algorithms proposed here can easily adopt the speed-up techniques of.



some simple calculation about problem sizes and modern hardware shows that it can be feasible to precompute the answers to all possible queries and store the result on a hard-disk. if the network size allows this, it can be a viable alternative to an algorithmic solution. this should be the case if the network is not too big. of course this approach still needs to find fast itinerary in a preprocessing step.



we assume that we have a set t that represents time, like the real numbers, the integers(e.g. seconds since 1.1.2000), or the set{0:00, 0:01,..., 23:59}. we only assume that we have a total ordering of the elements in t. sometimes we additionally assume that there is an addition operation defined over t.



these definitions have some severe restrictions. at a station we can not distinguish between continuing in the same train and transfer. we also disallow the traveler to use any other means of transportation like walking 200 meters from one station to another. in section 5 we will address these issues, allowing us to impose restrictions on the maximum number of transfers or accounting for the time it takes to walk inside the station as part of a transfer.



be aware that there are some obvious alternatives to this model. for example, one could deviate from the cycle of edges at one station and explicitly have an edge if a passenger can actually change trains as suggested by a combination of arrival/departure events. this model uses in general a lot more edges, but it allows for a much more detailed modeling. we could for example make sure that the walking inside the station actually allows the transfer.



in this section we develop the terminology for time-dependent networks(or graphs, which is precisely the same) and proof the correctness of a fastest path algorithm, that works in the situation we have here. we omit a discussion of the feasibility of shortest path questions in the more general setting, allowing negative delays and/or non-monotonic functions. in this more involved setting, it is important to specify a waiting policy. see[7,8] for a discussion of this type of network.



the domain of time is a linearly ordered set t. in this section we do not assume that there is an addition operation defined on t. typical examples for the set t are the real numbers and the integers, but also finite sets are interesting.



the earliest arrival question for a source node s, a destination d, and a departure time t asks for a timed path p from s to d of which the arrival time is minimal. similarly the latest departure question is well defined if we fix an upper bound for the arrival time, i.e. we ask for a path that has the latest departure time at s under the constraint that the arrival time is not after the specified arrival time.



let i be an itinerary. then we find a timed path p in g that is never later at a certain station than i is. the path p is therefore a timed path that does not arrive later at the destination than i does.



one well known potential technique is to modify the value that is used in the priority queue by a lower bound on the remaining path-length to the destination. if the network is embedded into the plane, this can be an appropriate multiplicative of the euclidean distance to the destination. one way to convince oneself about the correctness of this method is to think of modifying the edge weights of the graph according to some potential, i.e.



another, more direct way to reduce the size of the inspected part of the graph is to remove edges and nodes that are not relevant, i.e. not on a shortest path for the current s and d. in the extreme, again, we might have precomputed a shortest path for all possible choices of s and d, and stored the resulting path. now we can on the fly disregard all the edges that cannot be on the current path. the algorithm will then only explore the path itself. again, in this situation there is no need to run an algorithm anymore. the interesting versions of this method are those where we do not need a lot of memory to store the result of the precomputation, and where evaluating whether a link can be disregarded is easy. a good example is the pruning technique used



here we do not consider the time the algorithm spends maintaining the priority queue. there are several results in the literature discussing how to obtain fast priority queues in this context, for example using the fact that edge weights are integers. this kind of priority queue can be used for the timedependent networks as well, if we restrict time to be integers. we note that even a more substantial change to the shortest path algorithm as proposed in can easily incorporated into the time-dependent algorithm.



if we take a modular approach, we will implement the link-traversal functions completely independent of each other. that is, we will have a procedure that produces the value fuv(t) given t. this can easily be achieved with log2(k) comparisons if k is the number of connections from u to v, i.e. k=|cuv|.



let d be the out-degree of the node in the time-dependent network corresponding to a. to avoid the space-overhead, we can put all the outgoing events of a station a into one array a sorted by their departure time. we can do this in the following way: we place d such events(so called primary entries), then we leave d empty spaces, then the next d events, and so on. let t'' be the time of the last event before some empty spaces. then we put for every outgoing direction the next event after t'' into the so far empty entries of a(secondary entries). we put all primary entries into one balanced search tree.



even so the last presented algorithm is the fastest algorithm if we consider asymptotic worst-case running time on the unit cost ram, it might not be the fastest in practice. one thing is that the possibility to save constant factors in the running time is hard to foresee and an important factor in actual running time. more importantly we should also consider that the running time on a real machine can be heavily influenced by cache-faults. in this respect the last algorithm might not really be a good idea: it could lead to one cache miss for every item we place in the priority queue, whereas the lookup in the list could use the locality of the used entries. if additionally the the priority queue is small enough to fit into cache, we would expect the list-lookup to be faster.



instead of using an array with primary and secondary entries we can consider the list of next events as a persistent linked list that(in the preprocessing) changes as time progresses. see for details on this idea. this construction gives the same asymptotic behavior. it has the additional advantage that it can easily carried over to the exploration saving idea of section 4.6.



the algorithmic problem discussed so far made the unrealistic assumption, that transfer between trains is assumed to take no time and no cost. it seems, that we do not get a more realistic modeling of transfer for free. for a start we try to include some time for the walking inside the station in the itinerary, extending the network by as little as we can. we consider every platform to be a station of its own right. then we connect the platforms by walking links, either following the geometry of the station or with a star to the concourse of the station. the link traversal functions for the walking links have constant delay, i.e. they are of the form f(t)= t+ c for some constant c that reflects the walking distance.(this assumes that we have addition for our set t.)



the above modeling of train changes can also be used to count the number of changes. without extending the network further we do not consider a change of trains, if it does not involve moving from one platform to another. if we want to be more precise, we can introduce virtual platforms, one for every train-line. then we do not capture changing of trains within a train line, which is no restriction, as it can always be avoided. note that we basically return to the explicit network if every train has to be considered as a train line of its own.



