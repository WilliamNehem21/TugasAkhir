rule struc is introduced to take structural congruence into account. this also simplifies the transition system rules. since commutativity laws are defined for summation and parallel composition in the structural congruence, there is no need to define the dual rules of sum and par.



a name is semantically inactive for an agent if it is unable to change such agent from the external context point-of-view. bound names can play a role on internal actions of agents(they are thus unable to interfere on the external context). besides that, certain actions are never performed due to names restriction. so, agent names exclusively involved in either internal actions or actions never engaged(useless actions) are the so called inactive names.



compound agents can engage into internal communications and communicate with the external environment using the same actions because there is no restriction on the top of expression. as a result, no scope extrusion is made and all actions in the expression can be engaged. for agents with no restricted names, active names can be calculated directly from expressions.



rules[r1] to[r5] come all from structural congruence definitions. rule[r1] reduces any agent composed with the stop agent to itself. rule[r2] eliminates the restriction combinator whenever the restricted names do not appear free in the agent 4. rule[r3] is about scope extension. differently from the previous rules, its application keeps the expression size instead of reducing it. nevertheless, all restrictions are pulled up as much as possible and the reduction procedure stops when the rule is no longer applicable.



rules[r4] and[r5] are about replicated agents. in[r4], an agent is removed if composed with a replicated copy of itself. in[r5], a replicated agent is removed when composed with itself. note that these rules are only possible because all replicated agents are guarded by an action; this is not true for arbitrary replicated agents, as noted by milner in. all other rules from structural congruence definitions with no ability to reduce expressions are denied.



even with the new rule([r6]), the rewriting system is unable to remove all inactive actions from expressions(bisimilar agents have the same set of active actions). agents having a prefixing action unable to communicate with its context due to port name restriction has already been captured by rule[r6]. cases other than prefixing actions, however, may also lead to agents unable to communicate with their contexts, as shown in the following example.



action a(x)(agent q6) is neither able to communicate with the external environment(a is restricted) nor with the other compound agent(bc). as a result, a(x).x(w) could be removed from q6 without affecting its behaviour. if so, q6 would become identically written to agent q7(they are bisimilar).



inactive names can be split into the set of free and bound names. all inactive free names exclusively appear in inactive actions. on the other hand, the inactive bound names may participate in engageable and unengageable actions. the set of engageable bound names is made of all bound names that appear in the calculation of active names. bound names not appearing in such a calculation belongs to actions never engaged(inactive actions). one



here, rules to reduce agents expressions as a restricted action is found and the agent cannot communicate with its context are defined(situations shown in section 5.1composition). in fact, this extends the rewriting system to also handle useless subexpressions in composed agents.



a prototype has been developed to implement the rewriting system by hirschkoff and the new rules. rules from[r1] to[r7] are already implement and[r8] is in progress. the system has been successfully applied to toy examples, but no accurate data on performance has been taken so far.



