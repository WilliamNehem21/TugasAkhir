in the context of test-driven development for object-oriented programs, mock objects are increasingly used for unit testing. several java mock object frameworks exist, which all have in common that mock objects, realizing the test environment, are directly specified at the java program level. though using directly the programming language may facilitate acceptance by software developers at first sight, the entailed syntax noise sometimes distracts from the actual test specification, speaking about interaction traces.



we propose a java-like test specification language, which allows to describe the behavior of the test harness in terms of the expected interaction traces between the program and its environment. the language is tailor-made for java, e.g., in that it reflects the nested calls and return structure of thread-based interaction at the interface. from a given trace specification, a testing environment, i.e., a set of classes for mock objects, is synthesized.



testing is of prime importance in assuring the quality of software. in contrast to exhaustive methods for system verification and validation, testing aims at detecting faults, thereby increasing confidence in the system under test. to manage the complexity of modern software, testing should be systematic and integrated into the software development process. test scripts should be generated automatically from the specification and tools should take care of the automation of the several aspects and levels(e.g. unit, integration, or system testing) of the testing framework.



the paper is structured as follows. section 2 defines the specification language, used to describe the trace-based behavior of the observer. section 3, the core of the paper, describes the code generation from the abstract specification. in section 4 we discuss briefly the extension of the specification language to the multi-threaded case. finally, section 5 concludes with related and future work.



after initialization, the actual interaction is described. first, a new instance of the component class census is created by calling its constructor method and waiting for the return value which is assigned to the local variable c. in the specification language, we view the instantiation of a component class as a particular case of a call of a method of the component by the tester as explained in detail below. next, the tester calls the method census of component object c. it passes a copy of the set of voters to the component(note, that passing on the set of voters itself would give the conjunction, the component has to find out the votes of the voter objects of set voters. this is modeled by a call of a method of a voter by the component. note that this method belongs to the tester. such calls we indicate by question marks. after having received all this calls, census returns to the tester the final result.



ning and end of a block construct. 6 these different block constructs are denoted in the syntax by sin and sout. in a single-threaded setting, the flow of control between the component and the tester is reflected by alternating nested block statements sin and sout. these block statements form the basic building block of the language. of particular interest is the use of sin statements in the context of a callswitch:, which allows the specification of non-deterministic choice between incoming calls.



apart from the interactions between the component and the tester, the specification in general also will involve internal computations. for example, for computing values for communication and driving the test execution. in the syntax these statements are denoted by sint. note that such an internal computation assumes that the tester has control. thus, we cannot specify internal computations right after an outgoing call. the above example shows, however, that in practice it is convenient



a terminating execution of a test specification is successful if not generating a failure report. in general, failures are caused by violated assert statements and where-clauses and unspecified incoming method calls and returns. as an example of the latter kind of failures consider the following specification fragment.



this example can give rise to two kinds of failures. first, the constructor of component class c returns without calling any method of the tester. second, the constructor calls a different, unexpected method of the tester. the implementation of the specification language generates automatically appropriate failure reports.



which, after instantiating a test class t, calls the constructor of component class c and then expects an incoming call with the newly created instance of t as parameter. as the instantiation of a tester class by the tester itself is an internal action this newly created object is unknown to the component unless the tester communicates it. of particular interest are thus techniques which identify such failures. as it is impossible to identify all such failures statically, we provide a runtime check by recording all identities of tester objects known to the component. if a test execution leads to a situation where a tester object, which actually cannot be known by the component, is expected in an incoming communication, the tester reports an invalid test and aborts.



note, that!c and?r are used here as abbreviations for an outgoing call and its corresponding incoming return. moreover, l is a new label and the assignment next:= l says that the next expected incoming communication is the incoming return labeled with l. the statement snxt describes the expectation of the next incoming call according to sin.



occurrence. e.g., the outgoing call x!m' is preceded with the update of next with label l of the next expected incoming call of method m''. after the outgoing call we check whether next refers to the label of its return. right before we return from this call of method m next is updated to the next expected occurrence of an incoming call or return.



tion presented in listing 6. here, we have two nested incoming calls of the same method m. however, the outer method call uses x as its formal parameter whereas the inner method call uses y and also has access to x. therefore, we model these formal parameters as static variables of the tester class which are globally accessible. to describe the scope of the variables we annotate them with the label of their occurrence. for the above specification, the implementation fragment is given in listing 7.



| while(ebool) do stmt| callswitch:(cin: stmt)+ statements sint::= x: t| x:= e| e.f:= e| assert(ebool)| x.m(v,..., v) internal stmts sext::= cin| cout| rin| rout stmts ext



graphical specification formalism used for the generation of test cases. the focus of mscs, however, is on the timed order of message exchanges and often many test suite details are hidden, like expression evaluation and data generation. this differs from our approach where a test suite is specified in more detail. proposes a specification-based(i.e., black-box) testing method for object-oriented software. the desired interface behavior is described in the object-oriented specification lan-



