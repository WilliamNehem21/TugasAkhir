recursive descent(rd) parsers are popular because their control flow follows the structure of the grammar and hence they are easy to write and to debug. however, the class of grammars which admit rd parsers is very limited. backtracking techniques may be used to extend this class, but can have explosive runtimes and cannot deal with grammars with left recursion. tomita-style rnglr parsers are fully general but are based on lr techniques and do not have the direct relationship with the grammar that an rd parser has. we develop the fully general gll parsing technique which is recursive descent-like, and has the property that the parse follows closely the structure of the grammar rules, but uses rnglr-like machinery to handle non-determinism. the resulting recognisers run in worst-case cubic time and can be built even for left recursive grammars.



it is this observation that lead us to apply the techniques that we developed for rnglr and riglr parsing to give a general recursive descent-style algorithm. in fact we can organise the algorithm so that the parsing schedule either mimics a depth first backtracking recursive descent parser(except that recursive calls are terminated early) or so that all putative parses are synchronised with respect to reading the input. the latter synchronisation is more glr like and causes the call stacks to be constructed in levels, and that allows a memory efficient approach to the construction of both the stacks and the associated parse trees in a full parser implementation. in this paper we focus on the former organisation.



as we mentioned above, to implement a gll algorithm in a standard programming language the goto statement in the main for loop can be replaced with a hoare style case statement. we associate a unique integer, n rxj or nlxj, with each label and use that integer in the descriptors(so l becomes an integer variable). of course, we could also substitute the appropriate lines of the algorithm in the case statements if we wished, removing the goto statements completely with the use of break statements.



elements are only added to r once so the set r can be implemented efficiently as a stack or as a queue. as written in the algorithm r is a set so there is no specified order in which its elements are processed. if, as we have done, r is implemented as a stack then the effect will be a depth-first parse trace, modulo the fact that left recursive calls are terminated at the start of the second iteration. thus the flow of the algorithm will be essentially that of a recursive descent parser.



common stack. the riglr algorithm can be tuned by selecting which non-terminal instances in the grammar generate an automaton call, trading execution time for automaton space. in the most space efficient version, which we call sriglr, all nonterminal instances generate a call. we have used gtb to build sriglr recognisers which we have compared to the corresponding gll recognisers.



we have shown that gll recognisers are relatively easy to construct and are also practical. they have the desirable property of recursive descent parsers in that the parser structure matches the grammar structure. it is also possible to extend the gll algorithm to ebnf grammars, allowing factorisation, and the use of iteration in place of recursion, to make the resulting parsers even more efficient.



the version of the gll algorithm discussed here is only a recogniser: it does not produce any form of derivation. however, all the derivation paths are explored by the algorithm and it is relatively easy to modify the algorithm to produce tomitastyle sppf representations of all the derivations of an input string. the modification is essentially the same as that made to turn an riglr recogniser into a parser, as described in.



