as shown in[29,31], like separation logic, matching logic can also be used as a program logic in the context of conventional axiomatic semantics, allowing us to more easily specify structural properties about the program state. however, this way of using matching logic comes with a big disadvantage, shared with hoare logics in general: the formal semantics of the target language needs to be redefined axiomatically and the tedious soundness proofs need to be done. here, we take the different approach in[28,27,26], which allows us to use the operational semantics of the language for program verification as well, as shown next.



in this section we discuss how to use k in the context of program verification: section 4.1 briefly presents the programming language we use for illustration, section 4.2 describes how to use k for symbolic execution, section 4.3 shows how to use k in checking matching logic formulae implication, and section 4.4 presents abstraction patterns.



pattern can be rewritten with rules from both s and c, the verifier only uses the rules from c. in particular, only a loop without a specification is unrolled, and only a function without a specification is called. also, if the current pattern implies that the application of an abstraction axiom would result into a more concrete pattern, the tool applies the respective axiom(for instance, knowing the head of a linked list is not null results in an automatic list unrolling).



tree data structures. for each function, the tool checks that it maintains the data structure invariant and that the multiset of elements is as expected. we mention that the avl insert and delete programs take approximately 3 minutes together because some of the auxiliary functions(like balance) are not given specifications and thus their bodies are being executed, resulting in a larger number of paths to analyze.



9. schorr-waite: the schorr-waite graph marking algorithm computes all the nodes in a graph that are reachable from a set of starting nodes. to achieve that, it visits the graph nodes in depth-first search order, by reversing pointers on the way down, and then restoring them on the way up. its main application is in garbage collection. the schorr-waite algorithm presents considerable verification challenges[17,21]. we analyzed the algorithm itself, and a simplified version in which the graph is in fact a tree. for both cases we proved that a node is marked if and only if it is reachable from the set of initial nodes, and that the set of nodes does not change.



shape analysis allows one to examine and verify properties of heap structures. it has been shown to be quite powerful when reasoning about heaps. the ideas of shape analysis have also been combined with those of separation logic to quickly infer invariants for programs operating on lists. they can likely be also combined with matching logic in order to infer patterns.



in this paper we have presented matchc, a matching logic verifier for a deterministic fragment of c based on the k framework. we have described the implementation of the key components of the verifier, and have argued their soundness based on the matching logic reachability proof system. we have evaluated matchc on a large number of programs, some quite challenging from a verification point of view.



