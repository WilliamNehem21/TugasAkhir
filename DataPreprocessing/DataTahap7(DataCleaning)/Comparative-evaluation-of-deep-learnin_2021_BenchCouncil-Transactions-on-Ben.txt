deep learning(dl) workloads and their performance at scale are becoming important factors to consider as we design, develop and deploy next-generation high-performance computing systems. since dl applications rely heavily on dl frameworks and underlying compute(cpu/gpu) stacks, it is essential to gain a holistic understanding from compute kernels, models, and frameworks of popular dl stacks, and to assess their impact on science-driven, mission-critical applications. at oak ridge leadership computing facility(olcf), we employ a set of micro and macro dl benchmarks established through the collaboration of oak ridge, argonne, and livermore(coral) to evaluate the ai readiness of our next-generation supercomputers. in this paper, we present our early observations and performance benchmark comparisons between the nvidia v100 based summit system with its cuda stack and an amd mi100 based testbed system with its rocm stack. we take a layered perspective on dl benchmarking and point to opportunities for future optimizations in the technologies that we consider.



the share of deep learning(dl) scientific applications has steadily increased in the allocation portfolio among high-performance computing(hpc) centers. in recent years, it has reached a tipping point that the procurement of next-generation hpc infrastructures has to take the performance of the dl stack into consideration. in the case of doe leadership class platforms, a collaboration of oak ridge, argonne, and livermore(coral) has established a set of benchmarks to gauge the hardware/software competitiveness. for the first time in the coral2 benchmarks suite, dl workloads are included in the evaluation for the acquisition of the systems: frontier at oak ridge, aurora at argonne, and el capitan at livermore. ranging from dl kernels to distributed training, the coral-2 dl benchmarks consist of microbenchmarks, such as deepbench, and dl suites including both resnet50 on imagenet and application benchmarks such as the cancer distributed learning environment(candle). comparing to the industry-led benchmarking effort, mlcommons hpc(also referred to as mlperf hpc), the coral-2 benchmarks focus more on throughput and fundamental building blocks.



regardless of the increasing complexities of deep neural net(dnn) models, the compute operations essentially boil down to three types of mathematical kernels, i.e., general matrix multiply(gemm), convolution, and recurrent operation. considering that distributed training at scale has became a common practice at data centers, the communication operation has to be taken into account as well. the overall performance of dl applications is hence mostly determined by the hardware/software stack for the aforementioned three mathematical and one communication operations.(while i/o is also an important determining factor, the benchmarks we consider here do not face an i/o bottleneck when high-performance node local storage, e.g., ssd, is used for the data and proper pipelining practices are followed.)



the rest of the paper is organized as follows: section 2 provides general background on differentiating aspects of traditional simulationbased hpc workloads versus emerging dl workloads, as well as an overview of dl benchmarks proposed for the coral systems. section 3 details a layered approach, methodology, and metrics we will use for performance evaluation and comparison. section 4 presents our results based on the proposed methodology covering compute kernel, model and workloads, frameworks, and applications, which aims to provide an end-to-end perspective on key performance metrics. section 5 presents our conclusions and discusses opportunities for future work.



roofline model in addition to flops, another important metric to gauge the compute and memory performance is the so called roofline model, which can visually demonstrate the bottleneck of the benchmark and hardware, i.e., whether it is compute or memory bound. to that end, the arithmetic intensity i, i.e., floating operations per memory load, needs to be calculated. for single-precision gemm, this is given by,



resource utilization another important way of understanding the performance of deep learning applications is by tracking resource utilization. this is typically used to find bottlenecks of the workload and identify operations that need optimization. in this work we use the nvidia-smi for the v100 gpus on summit and the rocmsmi for the mi100 gpus on spock to monitor the memory used and the gpu utilization for the framework and application benchmarks. specifically the memory.used and the utilization.gpu flags were used for the nvidia-smi, and the showuse and showmemuse for the rocm-smi.



communication kernels given that distributed training has became common practice to manage ever-growing data and model sizes, the communication kernels play increasingly important roles. for the popular data parallel training(each device has a model replica working on different data batch, and the gradient information is exchanged periodically), allreduce is the dominant communication pattern that is executed each(synchronized) or a few(stale or asynchronized) batch steps. depending on the implementation, the allreduce can be realized via a single api or a combination of allgather and reducescatter, or reduce and broadcast. the performance depends on device communication libraries(e.g., n/rccl) and the specific network topology of the platform.



we have presented a layered methodology and metrics to benchmark dl workloads at scale, involving kernels, models, frameworks, and applications. from the perspective of hpc facilities, we argue that understanding kernel and model level performance, and framework level scalability are more important than application flop counts given current scientific dl use cases and patterns. using the coral-2 dl benchmarks, we evaluated the performance of spock, an early-access testbed system for frontier. compared to the v100 based summit system with cuda dl stack, the mi100 based spock with rocm dl stack shows an edge in single precision performance for most kernel and model benchmarking tasks. however, there is currently a gap in its half precision performance, specifically for tensorflow. roofline modeling also indicates rooms for improvement in the rocm stack, which is still maturing.



we also explored and demonstrated using machine learning an approach to model the relationship between input parameters and benchmark performance outcomes. and through a one-on-one comparison of the resource utilization for the two dl stacks on the same dl workloads, we are able to comment on the sources of performance differences. although these two ways of gaining insight into performance comparisons are not conclusive in deducing underlying implementations or bottlenecks, our data does shed light on the direction for future optimizations in the dl stacks.



finally, we do note that spock is a testbed early access system. our benchmarking results and comparisons are most useful to concretely present our systematic approach to dl benchmarking. the kernels and frameworks are maturing and will continue to evolve(particularly for the rocm ecosystem) and, therefore, specific observations reported in this paper are likely to change even if it does not affect the overall methodology that we have presented.



this research was sponsored by and used resources of the oak ridge leadership computing facility(olcf), which is a doe office of science user facility at the oak ridge national laboratory supported by the u.s. department of energy under contract no. deac05-00or22725.



