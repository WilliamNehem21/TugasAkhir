fault-based conformance testing is a conformance testing strategy that relies on specific fault models. previously, this mutation testing technique has been applied to protocol specifications. although a practical case study of web-server testing has been conducted, we observed several issues when applying this method in a large industrial project. in this paper, we discuss the foundations, techniques and tools to overcome these shortcomings. more specifically, we show a solution to the problem of state-space explosion in generating mutation tests for industrial scale applications. furthermore, the previous approach used the counterexamples of a bisimulation check(between the original and the mutant) as test purposes. with respect to



nowadays software and software-enabled systems are becoming increasingly complex. model-based testing techniques assist in systematic testing of such systems. by starting from a formal model test cases are derived automatically in order to test the conformance of implementations with respect to their specification.



however, given a formal specification there is a huge, possibly infinite, number of test cases that can be derived from that specification. there are different ways of selecting a finite set of test cases. one possibility is the use of coverage criteria on the level of the specification for test case selection. another way, is the use of anticipated faults for the generation of test cases. this approach of test case selection, which is subject to this paper, is also known as mutation testing and was conform implementations. however, there are test cases for faults that can not be detected using the ioco-relation. thus, using bisimulation results into more test cases than needed. second, the original approach relies on the construction of the complete state spaces of both, the original specification and the mutated specification. for industrial specifications with huge state spaces this is often infeasible. in this paper we address these two problems.



this paper continues as follows. in section 2 we review the underlying testing theory. in section 3 we develop the foundations for a new ioco-based test case selection approach. section 4 shows how to deal with large specifications and section 5 outlines the overall approach. section 6 shows our experimental results. in section 7 we briefly review related work. finally, we conclude in section 8.



basically, we use mutation operators at the specification level in order to generate faulty versions of a specification. the mutation of the specification affects the underlying formal model, which is an input-output labeled transition system in our case. not all mutations represent faults. a fault can only be defined with respect to a conformance relation. in the following we show the meaning of faults in the context of ioco.



the theory highlights a further important clarification in fault-based testing: in presence of non-determinism, there is no guarantee that an actual fault will always be detected. the reason is that non-conformance only means that there is a wrong output after a trace of actions, but the implementation may still opt for the correct one. in that case we rely on the complete testing assumption, which says that an implementation exercises all possible execution paths of a test case t, when t is applied a finite number of times.



note, that we rely on lotos specifications for our discussion. since lotos does not distinguish between input and output events, i.e. lotos has an lts semantics, input-output information is added during test case generation. however, our approach is applicable to any other specification language with(io)lts semantics.



up to 77% of our 252 test purposes can be generated within reasonable time(i.e. 1000 seconds per test case). the other 23% test purposes are regarding complex scenarios of our specification(e.g., client registers and removes its registrations afterwards). these complex scenarios push the average up.



the incremental slicing technique, which has been evaluated in, failed on some complex mutants of our specification. more precisely, incremental slicing failed on approximately 14% of the evaluated mutants. in difference to that, using the cadp on-the-fly model-checker allows to generate sliced state spaces for all of our mutations.



thors of present a modified model-checking algorithm that allows to transform properties, given in computational tree logic(ctl), to test purposes. henniger et al. automatically generate test purposes by identifying significant behavior of a system. each signification behavior is converted to a test purpose. however, both articles do not consider testing for specific faults.



petrenko and yevtushenko showed how to use partial, non-deterministic finite state machines(fsm) for mutation based test case generation. this work makes fsm based testing more amenable in industrial applications where specifications are rarely deterministic and complete. the difference to our approach is the used model. fsms assume that a system cannot accept a next input before producing an output as a reaction to a previous input.



in this paper, we have developed a new ioco-based test case generation technique focusing on faults. it has been shown that this represents an advancement to previous approaches[1,3], from both a theoretical and an experimental point of view:(1) in contrast to the previous approach we generate ioco-relevant test cases only. in the case of our session initiation protocol(sip) registrar experiments this means a reduction of 36% in the overall number of test cases.(2) furthermore, we pushed the limits of this technique by developing an improved slicing technique. in the case of our sip registrar experiments the incremental slicing technique runs out of memory for complex scenarios which did not happen for the presented modelchecker based slicing technique. we strongly believe, that these advancements make fault-based conformance testing more amenable to industrial-scale testing.





