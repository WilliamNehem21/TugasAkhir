in the last years, the number of applications of timetabling has grown spectacularly. timetabling refers to the allocation, subject to constraints, of given resources to objects being placed in space-time, in such a way as to satisfy as nearly as possible a set of desirable objectives(also known as the cost function). timetabling problems are np-complete and, therefore, these problems have been usually tackled with four techniques: evolutionary computing[25,15], integer programming, constraint programming, and constraint logic programming. evolutionary computing is based on rules simulating natural evolution and solutions are stochastically looked



in this paper, we perform a programmed search based on the knowledge about the solution structure. it amounts to generate a seed, as a case of local search space pruning[5,29,4,7]. this search consists of a fast generation of a seed which will be used as a starting point for the classical propagation and labeling techniques present in constraint solving(see also[20,8]). in contrast to other approaches, as stochastical(such as evolutionary computing and simulated annealing), we will be able to quickly find a first solution but retaining the ability of searching the whole solution space by using the efficient constraint solving classical techniques(i.e., propagation and labeling). we can apply this technique for those problems in which solutions are close to the seed because of the problem structure itself.



this paper is organised as follows. section 2 presents the specification of the timetabling problem in the concrete real case we faced. in section 3, we describe our approach to the programmed search. section 4 and 5 introduce, respectively, an outline of the implementation with both opl 3.7 and t oy 2.1.0 systems. section 6 resumes the performance results during a calendar up to one year, comparing and analysing the results from both systems. finally, in section 7, we summarise some conclusions and propose future work.



each worker works during a time slot. with respect to worker qualification, we find two levels: workers with level 1 are experienced and can be workers in charge on all time slots. workers with level 2 are apprentices and cannot be in charge of a team. in every team there is a worker with qualification level 2 and two workers with qualification level 1. a worker which has been working during a night must rest during the next two working days, at the least. the number of working hours during a year is established by a working calendar, and there are maximum and minimum limits, both monthly and annual, over working hours which cannot be violated. in every team, only one worker can simultaneously enjoy holidays.



workers have to be assigned to time slots during the working calendar, which usually extends to one year, although plannings can observe shorter time intervals. usually, a team works every four days. in a working day, there should be three workers available. every worker has to be assigned to a different time slot(t1, t2 or t3). the joker has assigned the time slot t6 in absence of incidents. saturdays and holidays feature two workers available with time slot t1 and the extra worker does not work. time slots rotate for the workers in a team each time they complete a time slot. december 24th and 31st are special days without continuous service in which there must be two workers available, every one gets the time slot t5, and at least one worker must have a qualification level 1. when an incident happens because a worker is absent, and if the joker is available, then the joker replaces the absent. otherwise, only two workers will cover the absence with time slots t1 or t4.



as stated in the introduction, in order to gain performance in the search-forsolutions process, we quickly generate a seed which is not expected to fulfill all the constraints imposed by the problem, and then we apply classical propagation and labeling techniques. the idea is to generate an assignment for the decision variables present in the implementation of the problem such that the solution structure is observed. this means for our particular problem that we assign rotating time slots to each member of all the teams each four days in a consistent way with the working calendar, and ignoring some other constraints. although this seed may not meet all the constraints, such as the limits imposed on the maximum number of working hours during the planning, it behaves as a good starting point for the classical constraint solving techniques to find a first solution.



the procedure to develop the seed is to assign the time slots t1, t2 and t3 to workers for working days, and t1 to two workers of the same team if either the day is saturday or there is a known incident. time slots rotate next days. then, we assign incidents to workers. in such a way, the number of working hours of each worker is uniform along the planned calendar. if there are few incidents, we have found that the seed is close to a feasible solution because the labeling strategy finds a solution by processing a few nodes in the search tree.



the next code fragment shows how the searching is implemented in the opl section devoted to user-defined search procedures. it features some(reflection) functions as dsize(v), which returns the size of the domain of v. bound(v) is true if the domain of v is a singleton. dmin returns the minimum value in the domain of v. let m= expression assigns to m the value computed for expression. try v= value 1| v= value 2 assigns to v the value 1 and adds this assignment to the constraint store together with a choice point. on backtracking, v is assigned to the value 2 and the choice point is removed.



w. the reflection function fd min v returns the minimum value in the domain of v, whereas fd max v returns the maximum. rest v w removes the value w from the domain of the decision variable v. generate list x v generates a list of values including the value v and all the values in the domain variable x, assumed that maybe v is not a feasible assignment for x. the first element of the generated list is the value of the seed for x. try v[w|ws] tries, by backtracking, to label the decision variable v with every value w of its second argument. my search[x|xs][v|vs] tries to assign each value v in the list, which is in its first argument, to each corresponding decision variable x, which is in its second argument.++ is the list concatenation operator.



in this section, we show the performance results we have obtained for finding the first solution of the stated real problem as implemented in the systems t oy 2.1.0 and opl 3.7, both running on a pentium iii at 1 ghz with 256 mb of ram and windows 2000 professional. we have considered several calendar sizes, ranging from a week to a year, and also we consider built-in search strategies of these languages in order to compare with our programmed search based on the generation of a seed. we have obtained running times for these parameters as the average of four runs.



in this work, two of the best state-of-the-art constraint programming systems(in their corresponding settings) have been taken into account for implementing the specification of a real problem. from the performance results we have found that the average time for finding the first solution is low compared to classical techniques in the field of constraint solving, even if the seed is not a solution. it is therefore not necessary to specify a first solution to depart from in our searching proposal. the execution time becomes moderate with few different values in variable domains. opl gives responses faster than t oy because t oy version 2.1.0 did not enjoy key features present in opl as arrays indexed by decision variables. implication and disjunction constraints were also not included, and we have implemented them, showing that their use augments program readability and introducing a reasonable burden.



although opl behaves clearly better than t oy, this system enjoys a more homogeneous syntax for solving problems in the sense that the same program constructs are used to generate the seed, post constraints, and specify the search strategy. that is, there is no the impedance mismatch that can be found in opl when used from a host language. opl, in turn, has three sections in a program with isolated syntaxes: initialisation of data, decision variable and constraint declarations, and search procedures section(among others such as database handling). we have found that the implementation of the problem is easier in a language as t oy since it seamlessly embodies constraints into a very expressive general purpose language because of its declarative nature. in addition, the propagation solver for the t oy underlying system behaves reasonable fine w.r.t. the solver of opl. finally, while opl is a commercial system, t oy is for free.



some lines we emphasise as being amenable to explore as future work are: first, the inclusion of the array data structure with direct access on its elements, along the possibility to index such an array by means of decision variables. second, a memory usage analysis(including garbage collection) in the context of a complex operating system. finally, an algebraic component should be added to the language in order to be able to compactly declare constraints and decision variables. the algebraic notation would allow more compact programs, whereas(static) decision variable declarations would do for faster memory allocations.



