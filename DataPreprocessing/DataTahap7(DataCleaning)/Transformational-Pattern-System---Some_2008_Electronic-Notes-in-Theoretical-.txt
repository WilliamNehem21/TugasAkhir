in the context of model driven architecture(mda), most model transformation mechanisms aim for rigorously and unambiguously defined, fully automatic transformations. we argue that such techniques, even when fully mature, are not applicable in all cases of software development. these difficult cases would benefit from flexible and semi-automatic open transformations. we present a mechanism, so called transformational pattern system, and show how it can combine human made decisions and intentionally vague and incomplete rules to perform a transformation.



automatic transformations do not get rid of complexity. instead of relying on the expertise and wisdom of a designer to create a target model, we rely on the transformation engineer to create a transformation. the transformation must solve a more generic problem and apply to more cases than one, and is therefore more difficult to build. the relative development cost is reduced, if the transformation is applied to several products. for a one-of-a-kind product or for a small organization, it might not be cost-efficient to develop(and maintain!) another piece of software,



we present an experiemental semi-automatic transformation mechanism based on so called transformational patterns. this paper extends our previous work, where transformational patterns were used alone, by adding a method for joining several patterns together. the mechanism is fully transparent and allows the user to choose the order of tasks and make manual changes to the models. at this time, we do not attempt to tackle problems caused by incremental changes to the source model. we illustrate the use of the mechanism with an example.



model, where each node has a type and can have named values attached. whenever a production is used, the associated action is triggered. the productions reduce the input graph step by step, while the actions construct the resulting pattern system. in other words, the grs is used to recognize or parse the source graph.



as an example, consider the seemingly simple transformation from a structure model(a uml class diagram) into a relational database schema. it seems quite straight forward, but there are details, options and exceptions that add complexity. for example, there are different ways to interpret and transform composition, inheritance and other relations between classes, and there is not always enough information in the source model to make the decision. it is in managing these details and variations where the real challenge for a transformation mechanism lies. with transformational patterns, their inherent flexibility and interactive nature helps overcome some of these difficulties.



triple graph grammars are grammars spanning three related graphs; one for the source model, one for the target model, and one for the relationships between the models. each production alters all the graphs(models) at the same time, keeping them always synchronized and confirmant with their schemas(metamodels). a transformational pattern system contains elements for the source and target models and their relations. in that sense, a pattern system is an abstract triple graph. due to the flexibility in binding, it represents a group of triple graphs.



with triple graph grammars, additions to the source or target models can be dealt with simply by applying further productions. we have not yet addressed the problem of incrementality for pattern systems. triple graph grammars are also bidirectional. although a transformational pattern itself is not directed, a derived task graph always is. the assembly rules, too, create a bias towards a direction.



a transformational pattern system, once all the roles are bound, is also a mapping between the source and target models. so, model mapping techniques are in some way similar. however, they are typically bidirectional, whereas transformational patterns are not.



although incrementality was not considered in this work, it is very important for open transformations. as it is now, any significant change to the source model demands a reassembly of the pattern system, effectively forgetting the previous user decisions. supporting incremental transformations needs to be researched. the pattern assembly mechanism also has to be better integrated with the pattern tool, to improve the user experience. for the same reason, the production rules need a well-defined and intuitive notation.



we also intend to strengthen the theoretical foundation of our approach with, e.g. graph grammars. for example, it has been pointed out to us that transformation pattern systems might bear resemblance to graph processes. this is an interesting connection we intend to explore further.



