in the following sections we briefly describe ip and tcp and mixed intuitionistic linear logic. we then present an outline of our specification of the user interfaces for ip and tcp, demonstrating the role of the linear operators in the axioms. we present a specification of the data transfer component of the tcp protocol; and finally, we outline verification process undertaken to prove key properties of ip and tcp.



the transmission control protocol(tcp) and the internet protocol(ip) are two essential elements of the communications stack at the heart of many network-based applications. both of these protocols are typical of state-based distributed systems. ip is responsible for transmitting data from one internet node to another, but does not guarantee the delivery of data to the destination node. tcp is a protocol that sits on top of ip and it has the responsibility of establishing an end-to-end error free connection between peer tcp entities.



the basis of our specification consists of a series of axioms, presented using the linear operators, which specify the valid transitions that can take place in the system. for ip we use ordinary commutative linear logic, since ip datagrams may be reordered in transmission. however, since order of receipt is important for tcp, we make use of a combination of commutative and non-commutative operators in its specification.



d. the variable b is a boolean flag which is false once an end of stream(eos) character is written to the stream. a full tcp session will thus consists of a pair of these streams, one each for s and d.



axiom(6) specifies the operation of reading some data at d, which transfers exactly l octets from m1 to m2. the function drop(n, l) returns a list with n elements removed from the beginning of list l. the function take(n, l) returns a list of the first n elements from list l.



the ip specification guarantees very little about a message sent from one node to another, since messages may be corrupted, duplicated or even lost. however little the ip specification guarantees, it does imply that a message that arrives at a node must have been created at some node. if a node receives a message with a correct headeras validated by the checksumthen some node must have sent a message with the same header(the actual message itself may be corrupted, of course). in fact, if the initial datagram is not lost, a message sent from node a to node b may result in one or more multiple messages, with correct header, being received by node b. these messages will not appear out of mid-air.



