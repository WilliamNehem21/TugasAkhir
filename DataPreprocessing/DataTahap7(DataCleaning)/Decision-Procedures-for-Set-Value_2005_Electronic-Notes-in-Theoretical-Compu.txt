in this paper we explore reasoning techniques for programs that manipulate data structures specified using set-valued abstract fields associated with container objects. we compare the expressive power and the complexity of specification languages based on 1) decidable prefix vocabulary classes of first-order logic, 2) two-variable logic with counting, and 3) nelson-oppen combinations of multisorted theories. such specification logics can be used for verification of object-oriented programs with supplied invariants. moreover, by selecting an appropriate subset of properties expressible in such logic, the decision procedures for these logics enable automated computation of lattice operations in an abstract interpretation domain, as well as automated computation of abstract program semantics.



abstract data types, and create an unbounded number of instances of these data types during program execution. particular difficulties arise when each data type instance is itself implemented using multiple dynamically allocated objects that form a linked data structure. our approach for analyzing such programs is to use abstract set-valued fields as specification variables that describe operations of an abstract data type. we separate the analysis of the program into 1) verifying the correctness of the implementation of the abstract data type with respect to the set specification, and 2) verifying the correctness of the rest of the program where the linked data structure is replaced by abstract set-valued fields.



hob project. one of the main design principles behind the hob project[17, 32] is that reasoning about programs with complex data structures becomes simpler if data structure operations are specified in terms of abstract sets of objects associated with each data structure. for example, an insertion into a data structure in this approach becomes simply an insertion into a dynamically changing sets of objects, as opposed to a manipulation of a dynamically linked data structure. hob splits the verification of programs with such data structures into two tasks: 1) using shape analysis(or some other analysis or verification technique, including techniques as powerful and heavyweight as interactive theorem proving) to verify that the data structure implementation conforms to the specification given in terms of the abstract set variables, and 2) using only the abstract set variables in the rest of the program to reason about the behavior of the data structure. so far, we have used hob to verify implementations of global data structures, which are instantiated at compile time into a finite number of instances(that may store and manipulate a statically unbounded number of objects). the focus on global data structures allowed us to use a static module mechanism to encapsulate object fields and prevent representation exposure, as well as to use the decidable theory of boolean algebras to reason about the finite number of abstract sets that specify data structures. one goal of this research is to extend this approach for dynamically instantiated data structures as well.



dynamic instantiation of linked data structures. dynamic instantiation of abstract data types is one of the central features of current object-oriented programming languages. dynamic instantiation is typically achieved by associating each abstract data type instance with an object, using a field to attach the underlying linked data structure to the object. this research explores one way to extend hob to verify programs that use linked data structures that can be dynamically instantiated. in this approach, we specify a linked data structure attached to an object using a finite number of set-valued object fields. the result of abstracting the content using this technique is a program



the topic of this paper is the second problem: verification of programs that manipulate objects with set-valued fields. like, we are concerned with verification of clients of abstract data types, but we focus on specifications expressed in terms of set-valued fields and derive a complete decision procedure for the constraints in our class. our approach uses assume/guarantee reasoning with user-supplied annotations to completely separate the analysis of the implementation of the class from the analysis of the context; other approaches attempt to automatically infer both the approximation of the context and the approximation of class implementation, potentially using a global fixpoint analysis.



decision procedures for set-valued fields. to study the automation of reasoning about programs with set-valued fields, we explore decision procedures for constraints on such fields. our constraints can express relationships between sets associated with the same object, the aliasing between object references, as well as the relationships between sets associated with different objects. by annotating programs with such constraints and using a verificationcondition generator, developers can verify a range of invariants of objectoriented programs. by selecting an appropriate subset of properties expressible using such constraints, a decision procedure for these constraints enables an analysis to automatically derive the lattice operations in the abstract interpretation domain, and to compute abstract program semantics(transfer functions).



