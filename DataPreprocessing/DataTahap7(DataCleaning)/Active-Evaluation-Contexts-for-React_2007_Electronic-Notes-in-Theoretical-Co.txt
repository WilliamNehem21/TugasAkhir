in the context of process algebras it is customary to define semantics in the form of a reaction relation supported by a structural congruence relation. recently process algebras have grown more expressive in order to meet the modelling demands of fields as diverse as business modelling and systems biology. this leads to combining various features, such as general choice and parallelism that were previously studied separately, and it often becomes difficult to define the reaction semantics. we present a general approach based on active evaluation contexts that allows the reaction semantics to be easily constructed.



needs to be assumed for the constituents of redexes. this normal form is hard to match syntactically and the structural congruence is of little help as it is semantically meaningless to allow choice and parallel to distribute freely over one another. thus, traditionally, only structural operational semantics is defined for derivatives of this calculus.



in this paper we show how reaction semantics can be defined even for very expressive calculi. one may ask why it is of interest to be able to deal with a binary unrestricted choice as opposed to an indexed guarded sum(over some arbitrary finite index set). in doing so we follow one of the design principles used by gordon plotkin when devising structural operational semantics: that one should always strive to use unary or binary syntactic constructors rather than general n-ary constructors because the former choice assists machine readable formal semantics and also gives a deeper semantic understanding of the programming construct at hand.



the proposed approach is based on a novel notion of active evaluation contexts. these contexts arise naturally when one allows standard evaluation contexts, originally proposed by felleisen, to evolve when reactions occur. in section 3 we develop the active evaluation contexts and use them to define a reaction semantics for the recursion-free fragment of ccs with unrestricted choice. the main theoret-



in order to set the scene we start by considering ccs with guarded sums as defined by milner. in order to expose our contribution in section 3 more clearly we shall focus on the finite fragment of the language; thus omitting recursion. this does not indicate a limitation in our frameworkas we shall demonstrate later, in section 4, recursion can easily be incorporated using a structural congruence.



the use of process calculi as modelling languages for real-world domains, such as business modelling and systems biology, seems to be a current trend in language based technology. the trend combines many language features that were previously unstudied or only studied in isolation. this invariably leads to evermore expressive calculi that share the difficulties of ccsuc with respect to the definition of appropriate reaction semantics.



following the tradition of ambient calculi bioambients is endowed by regev with a(cham style) reaction semantics[18,17]. arguably, this is a natural choice because it ensures a high degree of coherence between the inherently bio-chemical modelling domain and the operational model of the language. as for ccsgs, however, external choice is limited to guarded sums and, again, we believe that this is so because the technical means to combine parallelism and unrestricted choice was lacking at the time of definition.



in the following we present a bioambients variant where choice is unrestricted. we trust this to be a conservative extension of the original calculus, but a formal proof is besides the point of the present paper. rather, we shall focus on defining a reaction semantics using our active evaluation contexts.



