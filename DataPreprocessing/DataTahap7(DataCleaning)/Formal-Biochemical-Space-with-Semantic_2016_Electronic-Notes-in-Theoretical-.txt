biochemical space(bcs) has been introduced as a semi-formal notation for reaction networks of biological processes. it provides a concise mapping of mathematical models to their biological description established at a desired level of abstraction. in this paper, we first turn bcs into a completely formal language with rigorously defined semantics by means of a simplified kappa calculus. on the practical end, we support bcs with translation to bngl, a well-known practically used rule-based language. finally, we show the current status of bcs defined for cyanobacteria processes.



in we have shown that rule-based methods can be directly used for rewriting existing kinetic models of oxygenic photosynthesis into a compact non-redundant form obtained by applying a set of automatised syntactic reductions defined in kappa. that achievement lead us further to employ rule-based definition of biological processes as the framework for qualitative description of the consortiumagreed understanding of chemical reactions behind the processes. existing quantitative models can be then mapped onto the qualitative rule-based bcs.



in we have presented general ideas behind bcs. the language has been defined as a semi-formal notation. in this paper, we turn bcs into a completely formal language with clearly defined syntax and semantics(by embedding to kappa). we



on the bioinformatics side, the closest format to bcs is kegg. in contrast to bcs, kegg does not support rule-based description allowing compact representation of combinatorial states. moreover, it does not support logical organization of entities and reactions into an organism-specific hierarchy that may significantly simplify understanding of the complex processes driving the organisms physiology and its interaction with the environment. since the notation relies on a simple textual base and focuses on a simple but still reasonably precise and compact description maintainable by biologists, the format of bcs specification is compliant with kegg.



in comparison with process algebraic languages treating chemical reactions mechanistically as communicating concurrent processes[2,5], bcs keeps a purely qualitative level of description closed to chemical reactions and remains as simple as possible to cover the consortium-agreed level of abstraction. the language defined in targets a similar level of abstraction as bcs. however, it is intended more as a programming language for biological systems than an annotation format.



bcs provides well described biological background for mathematical models of processes taking place in specific organism. complete bcs model provides a connection between existing ontologies and partial mathematical models. a bcs model is represented in a form of a textual file. this file offers a human readable format of bcs which can be easily edited in a dedicated editor and visualised on the website. first part of a bcs model is represented by a set of entities(to be compliant with process-algebraic frameworks we call entities agents), while the second part contains rules(abstractly represented chemical reactions defined over the set of entities). in our case study, a consortium of scientists is involved in modelling several cyanobacterial processes and in establishing of the respective bcs model.



the fact that most fields in entity and rule definitions are tightly coupled with information from linked ontologies is the reason why we have started with describing annotation attributes. in the first place, one of these attributes is entity name, which is taken from ontologies or follows the standard naming conventions. entity id of every entity is fixed by the consortium. kegg id, chebi id or internal id is used if no reasonable id is available. ids of rules are internal and assigned automatically.



in some cases, emphasis on a detailed description leads to very complex bcs models. abstraction of some processes is therefore needed to keep bcs models as simple as possible. to this end, rules expressing enzymatic reactions are considered in a simplified form. in fact, there should be at least two different rules describing an enzymatic reaction(one for a substrate binding and another for a catalytic step). instead, since an enzyme is not affected during the reaction, it is affiliated to the rule as a modifier. however, it is difficult to define precise meaning of a modifier in this case. we rather treat the modifier field informally as an entity which has to be present for the rule to be enabled. the exact reaction mechanism of an enzyme is not always clear and therefore it is abstracted out(see example 3.4).



model in bcs is defined in similar way as a kappas model. first, we define syntax of expressions describing agents formally in bcs. next, the notion of agent signature is defined that allows to specify restrictions on the general expressions. finally, agents are used as elementary constructs in definition of bcs rules.



agents are defined hierarchically starting from atomic agents that are of two kinds: class atoms representing(abstract) class agents and object atoms representing(concrete) object agents. class atomic agents allow us to represent compactly objects that can reside in several selected(or even all possible) states whereas object atomic agents represent concrete objects specified with the particular state. every atomic agent must be accompanied with a physical compartment within which it is considered.



from now on, we restrict ourselves to atomic agents where the state signature can be treated as a set(a state cannot occur more than once in a state signature). this restriction is motivated by the aim to keep the language as simple as possible. treating the state signatures as multisets would lead to confusions and is actually not needed to clearly represent biological objects.



next we proceed with defining structure agents. a structure agent represents a biochemical object that is composed from several known atomic agents provided that we know that such a composition is abstract and not necessarily complete. to incorporate such an abstraction of biological structures into our language, a structure agent is defined to be labelled with a unique name and it is constructed only from atomic agents considered in the same physical compartment.



note that a compartment of a structure agent is uniquely given by the compartment specified in its parts. we restrict ourselves to structure agents where all atomic agents in the partial composition have the same compartment. assuming this restriction, we can shorten the notation by omitting compartments in the atomic agents of a partial composition.



in contrast to partial compositions, we allow replication at the level of full compositions(an agent of a certain name can appear more than once in a full composition). moreover, names of complex agents are not associated with particular full compositions at the level of agent expressions. this is done at the level of agent signatures(see section 4.2).



the language of agents defined in the previous section gives us a formal way how to encode biochemical objects at several levels of hierarchy and abstraction. the notion of structure agents allows to generate arbitrary partial compositions. practically, we need to restrict the construction of composite biochemical objects by giving a set of constraints reflecting our understanding of biological objects and the desired level of abstraction. this can be achieved by assigning every structure agent name



similarly, the set of complex agents also needs to be restricted by specifying the catalogue of complex biochemical objects that can appear in the considered biochemical space. this can be achieved by assigning every complex agent name with a full composition that provides its definition. this allows us to name biological compounds, e.g., h2o, and specify their clear definition under the coexistence abstraction, e.g., h.h.o.



algorithm 1 takes a bcs model m and returns a kappas model m. it uses three subroutines that modify respective types of bcs agents. algorithm 2 translates an atomic agent directly by extending an agent name with a compartment name and adding a site p. algorithm 3 translates a structure agent where each atomic agent in its partial composition is encoded as a unique site. finally, algorithm 4 translates a complex agent where each structure agent in the respective full composition is treated as a kappas agent. since bcs does not provide binding sites, we fix linear binding(see section 6 for further discussion).



the last fact that is worth noting is construction of complex structures. in bngl, each complex is identified with an exact structural notation which does not allow hierarchical construction. bcs provides the notion of structure and complex agents, this allows to form a hierarchy of the agents. additionally, when defining a rule with quantities of interacting entities, in bngl it is necessary to enumerate all of them whereas in bcs the stoichiometry is allowed in standard way.



bcs makes a part of cmp and is implemented at e-cyanobacterium.org and currently covers several functional modules of cyanobacteria. to support translation between bcs and bngl, we have implemented a set of scripts 1 allowing to translate a bcs model to bngl and vice versa.



it means the mapping of reactions to rules is almost one-to-one(reaction-like rules). the stringency of rules is high which is what allows them to be applied only to a narrow group of molecules. it causes that compaction of metabolism in rules brings almost no benefits.



circadian clock is one of the most complex processes in cyanobacteria bcs. its core is formed by three proteins kaia, kaib and kaic. moreover, kaic contains two phosphorylation sites serine s431 and threonine t 432. these sites can be phosphorylated independently, but only if kaic is in a complex. all these proteins can interact with each other in predetermined ways and form specific complexes. all processes inside the cell are then controlled by periodical formation/dissociation and(de)phosphorylation of these complexes.



each protein kaic can occur in four different states because of the two phosphorylation sites. considering all six complexes and also other rules in circadian clock, we obtain combinatorial explosion of different species in the system. to achieve representation of the whole system it is inefficient to enumerate each single conformation. to this end, we employ the capability of bcs rules.



in bcs we have achieved complete, human readable representation of circadian clock using only 17 rules(examples are rules in example 7.2 and example 7.3). regarding the defined agents, it gives us over 500 different distinguishable entities, while in bngl similar number of rules describing the same system gives us almost 25000 entities.



photosynthesis represents part of bcs of cyanobacteria. the process occurs in a specific folds of the cell membrane called thylakoid membrane. photosynthesis serves as the source of energy taken from light and transferred into production of atp and nadph molecules with oxygen resulting as a by-product.



entities of photosynthesis bcs are represented by several complex proteins(enzymes) residing on the thylakoid membrane(tlm) in the cell. since the thylakoid membrane encloses the inner-membrane space called lumen(lum) where h2o molecules are processed, there are basically three locations defined for this set of entities. rules occurring in the lumen, cytosol and in-between the thylakoid membrane and these locations have classical form. however, electron transfer reactions occurring in the structure of complex processes lead to combinatorial explosion of all possible conformations.



photosynthesis is constructed from approximately 30 agent definitions which are interacting in over 60 rules. from the rule-based point of view, this representation is somewhere between circadian clock(section 7.2) and metabolism(section 7.1). it means the number of generated distinguishable entities arises compared to defined agents, but not as dramatically as in circadian clock. however, photosynthesis is a good example of rule-based process.



