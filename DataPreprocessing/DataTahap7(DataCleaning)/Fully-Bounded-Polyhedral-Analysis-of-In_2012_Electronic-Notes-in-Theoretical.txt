analysis of convex polyhedra using abstract interpretation is a common and powerful program analysis technique to discover linear relationships among variables in a program. however, the classical way of performing polyhedral analysis does not model the fact that values typically are stored as fixed-size binary strings and usually have a wrap-around semantics in the case of overflows. in embedded systems where 16-bit or even 8-bit processors are used, wrapping behaviour may even be used intentionally. thus, to accurately and correctly analyse such systems, the wrapping has to be modelled.



section 2 contains preliminaries to our approach, explaining classical polyhedral analysis and wrapping of polyhedra. we show in section 3 a motivational example of our method and how it differs from other methods. in section 4 we detail our approach to a bounded polyhedral analysis. section 5 discusses our approach to widening, which is the core of the method. finally, we conclude in section 6.



in this example, our approach takes a few more iterations before stabilisation, but this result, while still sound w.r.t. wrap-arounds, is more precise than the previous approach. in particular, notice that in p bd(3) we have that x remains zero, but n can be any number between 0 and 255(soundness), and we have kept the valuable relation between x and n in p bd(2),p bd(4) and p bd(5), as the polyhedra



in classical analysis, a polyhedron may become unbounded in three cases: first, in the initial program point, where nothing is known about the program variables. second, any non-linear assignment drops any information about a variable, leaving the polyhedron unbounded in the direction of that variable. third, widening often produces an unbounded polyhedron.



for a program containing cycles, widening is necessary to ensure termination. in classical abstract interpretation, the widening is usually inserted immediately after the loop merge points. let ploop be a program point immediately succeeding a loop merge node(for example edge 2 for program l). then, the classical polyhedral analysis defines:



the standard widening operation, as mentioned, often makes polyhedra unbounded. however, with the help of limited widening it might be possible to intersect the result with some finite constraints. our idea is to use widening in such a way that it is always possible to intersect the result with a fully bounded polyhedron.



that is, the result of the widening is intersected with all constraints in c which hold in both p and q. it can be shown that this is a widening operation for any set of constraints c. the set c is typically selected strategically for each program. our idea is to use the range constraints y of a program as the set c in limited widening. our goal is to be able to intersect with all range constraints, to make the polyhedron fully bounded. to avoid wrapping variables more than necessary, with the range constraints and to reduce unnecessary wrappings. to this end, we place the widening point at the conditionals where wrapping must be done anyway. we do this in a way so that we still have exactly one widening per cycle in the flow chart. this means that we replace



proposition 5.1 proves that all variables are bounded after widening. this together with the previous steps to make sure a polyhedron is bounded results in an analysis where each polyhedron is bounded. on a final note, it is possible to improve the set x in proposition 5.1, by observing that only the variables involved in constraints that are removed by the widening operator need to be wrapped, since they are the only ones being affected by the widening. however, we used x as the set of all variables to simplify the proof.



