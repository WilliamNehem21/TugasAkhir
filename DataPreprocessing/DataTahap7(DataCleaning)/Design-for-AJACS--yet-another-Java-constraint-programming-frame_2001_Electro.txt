the inefficiency of the implementations of jvm, the java virtual machine, may seem to be a deterrent to using it to implement other programming paradigms, especially ones which focus on(relative) efficiency. however, in the case of clp, the appeal of having a widespread binary-compatible platform seems to address the difficulty that such systems have and was previously mentioned: scarcity of a widely used(and easy to install) implementation. just consider that most web browsers have a built-in java runtime system, regardless of the hardware/software platform they run under.



the remainder of this article is structured as follows: section 2 gives a formal description of each of the main concepts in ajacs. in section 3 we describe the structure of the java implementation. section 4 discusses in more detail how we deal with the subject of exploring a search space. finally, section 5 makes a comparative balance between ajacs and other approaches and in section 6 we conclude and discuss a few planned developments.



a store is an indexed collection of values. the goal is that, in solving a csp, several similar stores(w.r.t the number of values) will be created in which the set of values given by the same index across all stores represents a variable.



since a store is obtained from another one by the application of a constraint propagation step(see below), a store must contain a reference to its ancestor. in the special case of the initial store, the ancestor is undefined. each line 4 of the store is related with the values of a specific variable.



values represent the set of integers that is possible for a variable to assume. they have three internal representations, a compact one, and two non-compact. class value implements compact intervals, class fddvalue implements non-compact intervals as bit sets and class fdiuvalue implements non-compact intervals as a disjoint union of compact intervals.



class if the object removed is one of the extremes of the interval(1), otherwise it will be transformed in a fdiuvalue(2). an fdiuvalue will be transformed into a value if the interval union results in only one interval(5) and will be transformed into an fddvalue if all the intervals of the union have only one element(3). in all the other cases, the fdiuvalue stays an fdiuvalue(6). an fddvalue will be transformed into a value if all the elements of the set are contiguous(4), in all the other cases it will remain an fddvalue(7).



the constraint class has an instance variable env, that stores the environment of the constraints. this environment is filled with the constructor method of the class. method update(s,i), will try to update all the variables env[k], for k/=i. the returned object is of type status. it can then be a



the problem class is implemented with three instance variables, an initial store initstore, a list of constraints c, and a list cv, that is constitute by lists of constvar. the constructor new, is used to create a new problem, witch has an initial store defined by the values, and two empty lists, c and cv. method add is used to add constraints to the problem, updating both lists. the update method will be used to propagate the effects of affect a new value to the ith variable of the store s. the propagation is done using all pairs(c, n) of cvi, and calling c.update(s,n).



there is a total freedom to define any kind of search technique, by implementing a search subclass. this is extensible to strategies. the combination of an appropriate strategy and the next store generation allows us to implement a variety of search procedures. depth-first, breadth-first, best-first are some examples. the most appropriate search strategy depends of the problem. it is possible that what is a solution under some search strategy is not ground.



