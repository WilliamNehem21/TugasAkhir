the strand space model is one of the most successful and widely used formalisms for analysing security protocols. this might seem surprising given that the model is not able to reflect choice points in a protocol execution: the key concept in the strand space model is that of a bundle, which models exactly one possible execution of a security protocol. inspired by the branching processes of petri nets, we show that branching can be introduced into the strand space model in a very natural way: bundles can be generalized to branching bundles, which are able to capture several conflicting protocol executions. our investigations of the theory of branching bundles will motivate the concept of symbolic branching bundles, and culminate in the result that every protocol has a strand space semantics in terms of a largest symbolic branching bundle. we hope our results provide a strong theoretical basis for comparing models and providing process calculi semantics in security protocol analysis. altogether our work is related but different to a series of works by crazzolara and winskel. throughout we will profit from a close relationship of the strand space model to event structures, which has already been pointed out by these authors.



the strand space model is one of the most successful and widely used formalisms for analysing security protocols. for example, it has been employed to verify security properties by hand, to give formal semantics to protocol logics, and as the underlying model of model-checking tools(c.f.). in spite of this success two points of criticism have been brought against it: one is that, in contrast to models based on multiset rewriting, it is an ad hoc model rather than rooted in a rich theory. the second is that it is not able to reflect aspects of branching such as choice points in a protocol execution. to explain the latter we recall that the central concept of the strand space model is that of the bundle. a bundle models exactly one snapshot of a protocol execution: a set of strands represents the sessions that have occurred so far while a relation between the send and receive events of the strands describes how messages have flowed between them.



in this paper our thesis is that branching can be introduced into the strand space model very directly at the conceptual level of bundles. the idea is to generalize bundles to branching bundles in the same way as in petri net theory branching processes generalize petri net processes. petri net branching processes are introduced as a formalization of an initial part of a run of a petri net, which can include conflicting choices. they come with a very satisfying theory: the branching processes of a petri net form a complete lattice(modulo isomorphism) with respect to a natural notion of approximation. the largest element of this lattice captures all possible behaviour of the petri net, and is called its unfolding.



in this paper we wish to investigate whether protocols have as satisfying a theory of branching bundles. if every protocol p had indeed a largest branching bundle, this branching bundle would capture all possible behaviour of p, and would thus provide a natural strand space semantics. this could provide a strong theoretical basis for comparing models and providing semantics for protocol languages. our contributions are as follows:



we investigate the theory of branching bundles. we find that every branching bundle can be viewed as a labelled prime event structure. this will motivate a notion of computation state for branching bundles in terms of sub-bundles, and a transition relation between them. following the approach of we will investigate whether the branching bundles of a protocol form a complete lattice with respect to a natural notion of approximation. we will however obtain a negative result: the branching bundles of a protocol do not even form a complete partial order.



in the following section we will introduce the strand space model using variations on the original definition of and. the remainder of the paper is structured according to the above contributions. proofs that are straightforward have been moved to appendix a.



we now define our concept of branching bundles. as motivated in the introduction branching bundles should be capable of representing several conflicting protocol executions. to obtain them as a natural generalization of bundles, we will define them as bi-graphs of events labelled by actions of gact. in contrast to bundles we will allow them to contain events that represent conflicting points in a protocol execution. we can distinguish between three situations when two events e1 and e2 of a protocol execution should naturally be considered to be in conflict with each other:



there is yet another source of branching if we take a purely observational view. say eavesdropper eve observes the first two actions of a session, but she cannot tell to which role these actions belong to: according to their format the actions could form an initial part of an instance of role a or of role b. then in one future of eve the observed session may evolve into an instance of role a, whereas in another future of eve it will evolve into an instance of role b.



to include(iii) as a source of branching is a design decision and may seem counter-intuitive at first. to include it seems, however, in the spirit of the strand space model: it is consistent with the fact that if there is ambiguity in the protocol specification then a strand may be interpreted as an instance of several roles. to resolve this type of ambiguity one would need to keep a role identifier at each strand, which would make the model less abstract and technically cumbersome. as we will now see our decision to include(iii) leads to a very simple formalization of branching strand. in the following, let p be a protocol.



we now investigate whether b-bundles have as satisfying a theory as petri net branching processes. in section 4.2 we examine the relationship of b-bundles to event structures. in section 4.3 we explore whether the b-bundles of a protocol approximate(modulo isomorphism) a largest b-bundle. in preparation, we introduce a notion of sub-b-bundle in section 4.1, which is analogous to that of petri net sub-b-processes.



it is easy to show that the composition of two homomorphisms is a homomorphism. if a homomorphism is bijective then the converse of(iii) is also true(using the fact that b1 and b2 are b-bundles). thus, an isomorphism is a bijective homomorphism.



every b-bundle of a protocol p captures an initial part of the behaviour of p. we now wish to investigate whether the b-bundles of p consistently approximate, modulo isomorphism, a largest b-bundle. if every protocol p had indeed a largest b-bundle, this b-bundle would capture all possible behaviour of p, and would thus provide a natural strand space semantics for protocols. furthermore, in view of the results of the previous section this strand space semantics would come with a notion of computation state in terms of bundles, and a transition relation between them. the induced labelled transition system would give the corresponding interleaving semantics of the protocol, while the protocol would also have an abstract partial order semantics in terms of the induced labelled event structure.



on the other hand, every symbolic b-bundle can be transformed into a b-bundle by disentangling non-conflicting strands that are glued together. in particular, every symbolic bundle can be transformed into a bundle.(these connections will be formalized in an extended version of this paper.)



it remains to show that canonical sb-bundles are unique representatives of their isomorphism class, i.e., that two isomorphic canonical sb-bundles are identical. this will follow from lemma 6.5 below. first we show that homomorphisms between sb-bundles respect the canonical coding of events: every event is mapped to an event with the same coding.



together with lemma 6.2 this implies that there is at most one way of how to fold an sb-bundle onto another sb-bundle, and if the homomorphism exists then it will be injective and thus an approximation. for canonical sb-bundles it further means that the homomorphism will be the identity map.



in the last section we have shown that for every protocol p, isbb(p), the set of isomorphism classes of symbolic b-bundles of p, forms a complete lattice with respect to approximation. in particular, this implies that isbb(p) has a largest element, which captures all possible behaviour of p in a symbolic fashion. we call it the symbolic unfolding of p. thus, every protocol has a strand space semantics in terms of its symbolic unfolding. further, by the results of section 4.2 this semantics comes with a notion of computation state in terms of symbolic sub-bundles, a transition relation, and close relations to event structures.



proof.[prop. 4.9] reflexivity is immediate from the definition. transitivity follows by compositionality of homomorphism. for antisymmetry consider that if there is an injective but non-surjective homomorphism from one b-bundle to another then there clearly cannot be an injective homomorphism in the other direction.



