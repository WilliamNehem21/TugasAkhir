we use strategies to specify how a wide range of exercises can be solved incrementally, such as bringing a logic proposition to disjunctive normal form, reducing a matrix, or calculating with fractions. with such a strategy, we can automatically generate worked-out solutions, track the progress of a student by inspecting submitted intermediate answers, and report back suggestions in case the student deviates from the strategy. because we can calculate all kinds of feedback automatically from a strategy specification, it becomes less labor-intensive and less ad-hoc to specify new exercise domains and exercises within that domain.



in this paper we work out the similarities between parsing and solving exercises incrementally, and we discuss the implementation of a recognizer for strategies. we present a full implementation of such a recognizer, and discuss a number of design choices we have made. in particular, we discuss the use of a fixed point combinator to deal with repetition, and labels to mark positions in the strategy.



strategies are used in many domains such as programming, rewriting, compiler construction, and theorem proving. we recently realized that strategies also play an important role in exercise assistants that support incrementally solving exercises in mathematics, logics, physics, etc.. in the intelligent tutoring systems field, a strategy is called procedural knowledge, a production system, or a procedural plan.





the information provided by our strategy recognizer is necessary for determining what kind of feedback to give to a user of an exercise assistant. at the moment the feedback provided by exercise assistants is almost always limited to correct/incorrect. using the diagnosis given by our strategy recognizer we can improve a lot on this.



this paper is organized as follows. section 2 introduces our language for specifying strategies for exercises. we illustrate the language with a strategy for adding fractions: this strategy is used as a running example throughout the paper. section 3 shows how we have implemented the components of our strategy language to obtain a strategy recognizer, and discusses the main design choices. we then present three extensions to our strategy recognizer in section 4. section 5 shows how the strategy language can be used for diagnosing possible problems in the user input. the last two sections(6 and 7) discuss related work and ongoing research, and draw conclusions.



transformation rule. such a rule is the smallest building block to construct composite strategies, and closely corresponds to a terminal symbol in a cfg. occasionally, we write symbol r for some transformation rule r to distinguish the strategy from the transformation rule.



labels. because our primary interest in the strategy language is to automatically calculate feedback from it, we need some mechanism to mark positions in the strategy, for example, to encode the hierarchical structure of a strategy, or to refine the textual feedback that is associated with a certain position in the strategy. for this purpose, we introduce labels. labeling a strategy s with some label l is written as label l s. the exact representation of a label is irrelevant.



the definition of addfractions contains the strategy combinators repeat, somewhere, and try. in an earlier paper, we discussed how these combinators, and many others, can be defined conveniently in terms of the strategy language. the combinator repeat is a variant of the many combinator: it applies its argument strategy exhaustively. the check that the strategy can no longer be applied is an administrative rule. the definition of somewhere is another example of an administrative rule: this combinator changes the focus in the abstract syntax tree before it applies



in this section we discuss the design of a strategy recognizer. instead of designing our own recognizer, we could reuse existing parsing libraries and tools. there are many excellent parser generators and various parser combinator libraries around[9,13], and these are often highly optimized and efficient in both their time and space behavior. however, the problem we are facing is quite different from other parsing applications. to start with, efficiency is no longer a key concern. because we are recognizing applications of rewrite rules applied by a student, the length of the input is very limited. our experience until now is that speed poses no serious constraints on the design of the library. a second difference is that we are not building an abstract syntax tree.



the ability to diagnose errors in the input highly influences the quality of the feedback services. it is not enough to detect that the input is incorrect, but we also want to know at which point the input deviates from the strategy, and what is expected at this point. some of the more advanced parser tools have error correcting facilities, which helps diagnosing an error to some extent.



in earlier attempts to design a recognizer library for strategies, we tried to reuse an existing error-correcting parser combinator library, but failed because of the reasons listed above. the library we develop in this paper is written in the functional programming language haskell. the code in this paper is almost complete and conforms to the haskell 98 standard. although the code is relatively short, we want to emphasize that the library has been tested in practice on different domains. for instance, strategies implemented for the domain of linear algebra are more complex than the strategy for fractions reported in this paper. these strategies will be used in several courses during 2008.



the type variable a in this definition is an abstraction for the type of the symbols: for strategies, the symbols are rules. the first design choice is how to represent recursive grammars, for which we use the constructors rec and var. a rec binds all the var s in its scope that have the same integer. we assume that all our grammars are closed, i.e., there are no free occurrences of variables. this data type makes it easy to manipulate and analyze grammars. alternative representations for recursion are higher-order fixed point functions, or nameless terms using de bruijn



a smart constructor is a normal function that in addition to constructing a value performs some checks or some simplifications. we use smart constructors for simplifying grammars, and to obtain a normal form. we introduce a smart constructor for every alternative of the grammar data type: the functions symbol, var, succeed, and fail do nothing special, but are introduced for consistency.



the list of results returned by run consists of two parts: the first part tests whether empty s holds, and if so, it yields the singleton list containing the term a. the second part takes care of the non-empty alternatives. let r be one of the symbols that can appear first in strategy s(r is a rewrite rule). we are only interested in r if it can be applied to the current term a. it is irrelevant how the type rule is defined, except that applying a rule to a term returns a list of results. we run the remainder of the strategy(that is, t) with the result of the application of rule r.



the function run can produce an infinite list. in most cases, however, we are only interested in a single result(and rely on lazy evaluation). the part that considers the empty sentence is put at the front to return sentences with few rewrite rules early. nonetheless, the definition returns results in a depth-first manner. we define a variant of run which exposes breadth-first behavior:



a labeled strategy is a strategy with a label(of type l). a strategy is a grammar where the symbols are either rules or labeled strategies. for this choice, we use the either data type: rules are tagged with the left constructor, labeled strategies are tagged with right. with the type definitions above, we can have grammars over other grammars, and the nesting can be arbitrarily deep.



the final answer, 1 1, is indeed what we get. in fact, this term is returned twice because the strategy does not specify which of the fractions should be renamed first, which results in two different derivations. it is much more informative to step through the above derivation and see the intermediate steps.



the list has twenty steps, but only four correspond to actual steps from the derivation: the rules of those steps are underlined. the other rules are administrative: the rules up and down are introduced by the somewhere combinator, whereas not comes from the use of repeat. also observe that each enter step has a matching exit step. in principle, a label can be visited multiple times by a strategy.



rule, or a part of a strategy with a certain label. this is convenient if following a strategy becomes routine, and a step-wise approach is no longer helpful to the student. similarly, a tool can ask a student to solve the entire problem first, and decompose the problem in steps if the submitted answer is not correct.



example 5.5 a student is asked to provide the final answer to a question, and in case it is incorrect, the exercise tool poses sub-problems to the student. these subproblems can be calculated automatically from the strategy by looking at the labels. the strategy for adding fractions, for instance, can be decomposed in 4 steps.



there are many tools that offer students an environment in which they can solve exercises incrementally, such as mathdox and activemath. most of these tools are limited to correct/incorrect feedback, because it is often difficult and laborious in these systems to diagnose mistakes. however, some tools use external domain reasoners for making a diagnosis, which is exactly what our strategy recognizer has to offer. some work has been done on diagnosing student mistakes on the level of rewrite rules[2,7,15].



in this paper, we discuss the design and implementation of a strategy recognizer, which makes it possible to use strategies for improving error diagnosis. strategies for specifying exercises are introduced in a different paper. by viewing strategy recognition as a parsing problem, we take advantage of almost 50 years of experience in parsing sentences of context-free languages. the strategy language on which our work is based is very similar to languages that are used in parser libraries[9,13], but also to strategic programming languages such as stratego[11,14] and elan, data conversion libraries, and languages in other domains.



