the autoz tool is a framework on which different instance tools can be built. the two instances that currently exist are autocadiz and autoz/eves. autoz is a plug-in for the eclipse development environment, which is used as the basis for many modelling and model-management activities in software engineering.



latex to the formal tool are designed to be completely transparent. this is necessary to support the basic user, a developer who is well-versed in diagrammatic modelling but has little interest in formal methods. for such a user, the autoz tools just extend conventional modelling tools with press-button validation of models, with no exposure to the formal underpinning.



autoz is a generic tool framework. to illustrate its use, we consider an instance of autoz that uses the cadiz z tool. we describe both the basic and expert uses. space does not allow a detailed analysis, so we simply present a usage scenario for both the basic and the expert user; further examples are considered in.



above) provides the appropriate options, which result in a templates directory being made available for the project, in the eclipse project explorer view. templates can be edited and added to subfolders containing egl transformation rules. for example, consider the addition of a new template which lists all of the classes in the system, named allclasses(). when creating a new autoz project, the expert user selects an option to include the template catalogue in the project



in general, relating the error messages to diagrammatic models is the most important hurdle to overcome if non-expert practitioners are to be able to use formally-underpinned tools to analyse diagrammatic models. one direction would be to develop another intermediate language into which formal tool messages can be translated, and have the intermediate language manage the mapping back to diagrammatic model components. this task is complicated by the diverse ways in which formal tools present messages. there is some new work on traceability and message generation using epsilon, which may offer a way forward.



automatic template translation in describing the tool, we have shown that ftl maps readily on to egl, and we note that an expert user involved in template maintenance would need to be familiar with both languages. ftl is also needed for meta-theorems and proof work, because of its formal underpinnings. we have the groundwork for an automatic translation from ftl to egl; when implemented it will allow the expert user to maintain templates using either ftl or egl.



linkage to czt the community z tools(czt) initiative(czt.sourceforge. net) offers a range of support tools for z, including parsers, translators, typechecking and a unicode markup for z. it would be useful to investigate integration of autoz tools into this formal project.



