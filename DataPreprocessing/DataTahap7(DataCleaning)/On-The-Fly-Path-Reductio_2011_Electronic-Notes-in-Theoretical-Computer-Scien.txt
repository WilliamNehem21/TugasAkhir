despite a significant amount of research on abstractions, state explosion is still a major obstacle for the applicability of(explicit-state) software model checking to real-world applications. one such abstraction for ctl model checking is the so-called path reduction. the key idea of path reduction is to collapse singlesuccessor chains in the state space if intermediate states cannot influence the validity of a specification. this means that states are only stored when visiting program locations that cause a branching in the state space or influence the validity of the ctl specification. these program locations are called breaking points. for instance, a program statement that alters the value of a variable used in an atomic proposition or reads a nondeterministic value, which causes a branching in the state space, is called a breaking point. storing states only at these specific locations reduces the memory footprint of the state space, possibly at the cost of increased runtime.



to guarantee termination of the model-checking process, states need to be stored in possibly nonterminating loops(for fixed-point detection). thus, at least one location in each loop has to be breaking. despite the advances in termination proofs for high-level programs, these techniques are not yet applicable to lowlevel code.



our main contribution in this paper is a new technique called on-the-fly path reduction, which performs state-space reductions dynamically while state spaces are built(see sect. 2). this technique is novel in that it performs tasks such as detecting fixed points while states are generated. we also detail how to expand counterexamples obtained with path reduction to concrete counterexamples[3,6](see sect. 3). to evaluate the effectiveness of on-the-fly path reduction, we compare its performance to results obtained using static detection of breaking points in sect. 4. finally, sect. 5 presents related work and sect. 6 concludes the paper.



we will now evaluate the criteria for a state to be breaking, i. e., to show up in the reduced state space. for spr, this criterion solely depend on the program counter. here, breaking program locations(breaking points) are found using static



the first two conditions make locations breaking where the corresponding state has more than one successor in the state space. the third condition guarantees that all changes of variables used in the formula are visible to the model checker. finally, the fourth condition ensures the existence of a breaking point in every loop in the program, such that every loop in the state space has at least one breaking state for fix-point detection.



show up in the state space. to maintain visibility of all changes to the model checker, the second condition assures that at most one transition might influence the formula in each elementary path. the last criterion is needed to guarantee termination and will be studied in detail later on. first, we formally describe the algorithm for the opr successor state generation:



the third criterion is an improvement of the second criterion. it takes just the 64 bit hash code of the raw state data as a criterion for detecting already encountered states. this is faster and less memory intense, since only the hashes of all intermediate states have to be stored while simulating along an elementary path. as our case study will show, the third criterion offers the high accuracy while being a very fast possibility to detect a loop in the state space.



d. states omitted by the path reduction(b and bj) are shown as dotted circles. to understand such a counterexample trace, it is crucial to know which nondeterministic decision has been taken for the(a, b) transition. unfortunately, this information is not readily available from the(a, c) transition visible in the counterexample trace: state c might be too far away to distinguish the(a, b) transition from the(a, bj) transition without manual investigation.



for each criterion, the model checker had to generate the entire state space of the program. the results of these runs are shown in tab. 1. the reference values without any abstraction are shown in tab. 2, in the entry for vector.



in the next program, reentrance, a 16-bit integer variable is accessed concurrently in the main process and in an interrupt handler. as the atmega has an 8-bit architecture, such accesses are non-atomic, thus leading to race conditions. the reduction in states stored achieved by spr is 93.84%. opr reduces the state space further by halving the number of remaining states, yielding a reduction of 96.92%. the increase in runtime due to revisits was 10.85% for spr and 11.94% for opr.



considering that far less states are stored using opr, this increase is actually surprisingly low. an explanation for the large difference between the two approaches to path reduction is the different handling of loops. in order to guarantee termination of the state space generation in the presence of program loops, spr has to assume at least one position in the loop to be breaking(cp.). in our implementation, this position is indicated by the head of the loop. thus, on each revisit of the program counter position of the head, spr terminates the current chain and stores a state. opr, on the other hand, does not have to store at the head of a loop(in fact, it is unaware of the existence of the program loop), unless it uses the same program counter approach for termination detection. hence, opr compresses loop iterations far more efficiently.



so far, we examined the effect of opr when checking the formula ag tt, which is true in every state. in this section, we will now evaluate the effects of opr when checking actual formulae whose validity depend on variables. since path reduction needs to store states when a transition influences the formula, we expect an increase in the size of the state spaces.



our second test program for this case study was plant, also described in detail in sect. 4.2. the first property to verify was, similar to window lift, to verify that a global variable satisfies certain constraints, which can be specified by the formula prematurely stop the state space generation. thus, the time for model checking and the size of the state space is not comparable to the other case studies. for the verification of formula(1), we have an increase of 83.24% of the state space size, while the time decreased slightly, due to the smaller number of revisits. for formula(3), the increase of the state space size is negligible.



later, quiros has adapted the approach of yorav and grumberg to a bytecode language used in a virtual machine. this bytecode language is similar to a parallel while language. this means that function calls are handled using inlining, communication is performed at certain program locations, and indirect control is not supported. hence, spr turns out to be effective for this domain. our own prior work adapts these earlier approaches to the domain of binary code verification by introducing tailored static analyses and revising breaking conditions for binary code.



behrmann et al. implemented a similar technique for the model checker uppaal, which focuses on timed automata. their approach is similar to our implementation of spr: they decided for a static analysis of the control structure of the automata in order to obtain a so-called covering set of edges. this set is used in order to guarantee termination in case of loops in the state space. states that are targets of edges in the covering set have to be stored, which exactly corresponds to the breaking property used in spr. as we have illustrated, this property can prove a significant disadvantage of spr in the presence of long-running but terminating loops. our contribution, opr, can handle such loops without storing states in each



this paper describes a new technique for dynamic path reduction and shows the predominance of this method over approaches based on static analysis for the specific application of binary code model checking. further, it shows how counterexamples generated using this abstraction technique can be expanded in order to ease their comprehensibility. in terms of effectiveness, the opr approach allows for formidable state space reductions, comparing it to static path reduction techniques. the smaller memory footprint, however, may lead to higher runtimes. thus, opr provides a technique that allows to trade runtime for memory.



