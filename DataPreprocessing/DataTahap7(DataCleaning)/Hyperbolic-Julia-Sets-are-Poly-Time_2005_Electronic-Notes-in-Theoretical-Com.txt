nowadays, computers are being increasingly applied to represent mathematical objects. computer-generated images are being extensively used in the analysis and simulations of real-life processes and their mathematical models. our goal is to investigate a formal framework which allows us to define the computational complexity of real sets, measuring the complexity of drawing the set on a computer. within this framework, we obtain a new result on the computability of julia sets.



julia sets are some of the best known illustrations of a highly complicated chaotic system generated by a very simple mathematical process. these sets have been deeply studied in the framework of complex dynamics during the last century. julia sets are not only an intriguing mathematical object, but also a major source of amazing images. many computer programs, some of which are freely available on the web, have been written to generate these images. algorithms for computing julia sets have been presented and discussed in and, for example.



we will now list the nonuniform information used by the algorithm. this information can be computed from the initial data(i.e. the coefficients of p(z)) as will be noted later, see theorem 8.4. we still list it as nonuniform to spare overcomplicated technical details from the reader.



the existence of c> 1 as above has been known and can be easily proven using a compactness argument. our contribution is in constructively computing such a c, which is much harder. this is particularly important for theorem 8.4, where we make the construction uniform.



between the distance d(jp, pl(x)) and d(jp, x) as long as d(jp, pl(x)) is not too big(o(1/n)). when d(jp, pl(x)) becomes big, we apply algorithm 1 to estimate it. algorithm 1 runs fast here because it needs to give an estimate with precision factor o(1/n)= o(1/2log n), so its running time is exponential in log n. knowing an estimate of the ratio d(jp, pl(x))/d(jp, x) we are able to give a good estimate on d(jp, x).



tion can be extracted from the coefficients of p(z). this, however, might take indefinitely long, depending on the hyperbolic polynomial p. hence there is an algorithm, polynomial in the precision n for computing jp, which is uniform given that p(z) is hyperbolic. we will not prove it here. see for a discussion of the main ideas of the proof.



douady, a., does a julia set depend continuously on the polynomial? proc. symposia in applied math.: complex dynamical systems: the mathematics behind the mandelbrot set and julia sets, vol 49(1994), ed r. devaney(providence, ri: american mathematical society) pp 91-138.



