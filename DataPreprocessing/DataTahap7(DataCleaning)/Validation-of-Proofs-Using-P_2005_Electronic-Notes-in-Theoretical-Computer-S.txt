in this paper we present the demonat project, its purposes and the ideas developed so far. demonat is a french project whose aim is to make a program able to analyze and validate proofs made in a natural language. it will be used by students in order to improve the way they understand and make mathematical proofs.



let us explain it: the student first writes a proof of a theorem in a natural language. the program then translates it into a proof made in an intermediate language called phox.nc. it includes the standard commands of phox and some others that we will call new commands.



standard commands are the usually defined commands in proof assistants: intro, left, elim, apply, prove, trivial,.... all except trivial correspond to combinations of proof rules and so are validated for syntactic reasons. new commands are different because the automatic tactic must prove a formula before validating them.



in section 2 we introduce the new commands and explain the purpose of this language. in section 3 we give a simple example of a proof that could be made by a student and we explain how the program will have to analyze it. the section 4 is devoted to the validation, the mathematical part of the project, which needs a theorem prover dedicated to this project.



as the definition of new commands is not yet fixed, we give here a very general and partial(but an important part of the) grammar for the commands in phox.nc. an important thing to mention is that these commands are designed to be close to a natural language but with a formal grammar. thus by this principle some of the standard commands are kept:



as you can see the proof is really easy. now let us study in detail how the translation from the natural language to phox.nc could be made. we must warn about the fact that this translation is only one possible and that there may be many other translations. the aim is just to point out some of the difficulties that may occur while translating proofs into phox.nc. the translation here will be done step by step, that is one sentence after the other. at each step we give the current hypotheses and goal together with the sentence written by the student and from them will follow the translation.



here there are two difficulties. the first one is that the student knows implicitly that there are two kinds of neighbourhood but he does not make this difference explicitly in his sentence. so the translator has to be able to deal with that: find the good notions of neighbourhood for each word. here it is one more time helped by reading the definition of the goal. the sentence of the student is no more than a reading of a definition.



in this part we explain how the meta-rules coming from the new command could be validated by an automatic prover. as the current automatic tactic of phox is not powerful enough for the new commands, we need another one, dedicated to the problem. the idea is in fact to implement an inverse resolution method in a lazy way. the purpose of this paper is not to define it, we will just give some examples and hope that they are clear enough. we assume anyway that the reader knows what is the resolution method. otherwise, see some of the references given, for instance and.



what we have seen here is an overview of the demonat project which is not yet implemented(except phox and phox.nc). some of the difficulties that can appear in the linguistic part of the project have been pointed out. in the basic example given they seem not to be strong: we have only done a translation sentence by sentence.



in fact there are two ways of thinking the system. the first one is to validate a whole proof and so to read the complete text of the proof. in this case the system has a great freedom on the parts translated into phox.nc. the second one is to build a proof, i.e. the user interacts with the system. he writes a proof and when he needs to know what is the current state of the proof he tells it to the analyzer. then the system analyses the part asked by the user.



as we have seen, a good way to handle with the formulae implied by the commands of phox.nc is to implement an inverse resolution in a lazy way. indeed the formulae given to the automatic prover seem to be particular: most of them are propositional or need the use of few quantifiers. we could think about a prover becoming stronger when the user is a more advanced student. this means that the system may reject steps of the proof if it sees that they are too difficult for a beginner for example.



