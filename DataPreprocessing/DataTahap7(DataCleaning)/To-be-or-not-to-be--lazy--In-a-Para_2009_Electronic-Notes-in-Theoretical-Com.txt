have implemented an interpreter, written in haskell, capable of dealing with all of them. the interpreter was combined with a set of profiling tools in order to analyze the influence of the evaluation strategies in the performance of some chosen parallel skeletons implemented in eden. the purpose of the present work is to depart from those experimental evaluations and to achieve a more rigorous and complete comparative analysis. therefore, the contributions of this paper are an extension of the spectrum of evaluation strategies mixing laziness and strictness, and the formalization of each evaluation model. although the study is based on eden, the involved concepts and the conclusions that we have obtained can be transferred to other parallel functional languages.



the paper is organized as follows: we start with a brief introduction to parallelism in eden, and we describe the calculus used for our analysis. in section 3 we discuss on the possible evaluation strategies, and we give a classification of these around three concepts. then in section 4 we present a distributed operational semantics for the calculus, and we formalize the evaluation strategies defined before. in section 5 we present a collection of examples that shows how the evaluation strategies may affect issues like termination or deadlock. we conclude with a summary discussion on the lazy-eager combinations and outline future work.



all these questions are related to the distribution of computation between processes: how much work should do the parent(resp. producer) of a process(resp. value), and how much work should be left for the child(resp. consumer)? this is a crucial point in any parallel language, and it is not particular to eden, although the features of eden maybe offer more possibilities for discussion.



example 5.1 let us consider again the expression given in example 2.1. as explained before, if free variables are to be evaluated to whnf before being copied(ebc=yes), then the evaluation never terminates, because the communication from the main process to its child is impossible:



the problem with the first approach is that currying is lost because in eden parameters can be curried while channels cannot. the second alternative is not as elegant as the first one, but it preserves currying. the programmer only needs to force the evaluation of each free variable that it is desired to be evaluated before the creation of the process.



as a future task, we will investigate how to apply similar techniques to other parallel functional languages like gph. besides, it is our intention to widen the calculus in order to include other eden features such as streams. in this way, we will be able to extend the work in to consider all the semantic options explained in this paper, and thus to analyze the influence of these evaluation strategies on eden skeletons.



