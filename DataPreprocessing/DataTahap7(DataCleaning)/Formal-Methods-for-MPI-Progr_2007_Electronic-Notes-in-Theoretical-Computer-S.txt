high-end computing is universally recognized to be a strategic tool for leadership in science and technology. a significant portion of high-end computing is conducted on clusters running the message passing interface(mpi) library. mpi has become the de facto standard in high performance computing(hpc). our research addresses the need to avoid bugs in mpi programs through a combination of techniques ranging from the use of formal specifications to the use of in-situ model checking techniques. this paper details an assessment of the efficacy of these techniques, as well as our future work plans.



just as is the case with parallel programs in general, mpi programs in particular can contain bugs. specifically, the sources of mpi program bugs have been identified to include the following. first of all, the large number of functions in mpi libraries can overwhelm developers. second, mpi is most commonly taught or learned at an informal level. as such, programmers writing advanced mpi applications may overlook corner cases. finally, mpi programs are not static; they are sometimes manually re-tuned when ported to a new hardware platform.



this paper is about our ongoing research that emphasizes the use of formal methods for making the creation of bug-free mpi programs easier. our approach consists of(i) developing a formal model of the mpi library,(ii) developing in-situ(run-time) model checking tools, and(iii) developing static analysis support for enhancing the efficacy of model checking. this paper briefly describes our ongoing work in these areas, as well as our future plans. the authors wish to acknowledge the impact that professor gary lindstrom had in the parallel computing research conducted at the university of utah, and thank him for his feedback and encouragement of the research reported here.



the rest of the paper is organized as follows. in section 2, we present an overview of our work underway in developing a formal specification for mpi. in section 3, we describe our work on developing an in-situ model checker for mpi. in-situ model checking was introduced in verisoft in the context of directly model checking c/c++ programs. ours is believed to be the first realization of this idea for mpi programs. in section 4, we present an assessment of our work so far, and draw conclusions for the future.



in our previous work, we captured around 10% of the mpi-1.0 primitives(mainly for point-to-point communication) in tla+. tla+ enjoys wide usage within(at least) microsoft and intel by practicing engineers. we built a c front-end in the microsoft visual studio(vs) parallel debugger environment through which users can submit short(but tricky) mpi programs, with embedded assertions. the embedding c statements as well as the mpi calls are turned into tla+, run through the tlc model checker. when the assertions fail, the error traces turn into the vs debugger stepping commands. this approach gives the practitioner a tool for understanding mpi based on a formal semantic description which may, as a one-time activity, be validated by experts. our formal specification maintains cross-reference tags with the mpi reference document, citing line and page numbers of pertinent references. another project with similar motivations(but not a c front-end) is, which formalizes the kernel threads procedures of the win32 api.



currently isp checks for deadlocks and local assertion violations. for every mpi function(e.g. mpi send), isp provides a replacement function(a modest, one-time effort). when invoked, these replacement functions first consults a central scheduler(an n+1st process) through tcp sockets. if the scheduler gives permission, the replacement function invokes pmpi send(that is provided with every mpi implementation, and has the same functionality as mpi send). this allows the scheduler to march the processes of a given mpi program according to one arbitrary interleaving, till all processes hit mpi finalize. isp examines the resulting trace of actions, and records at each of its choice points, where a different process could have been selected. such alternative choices are deemed necessary based on the dynamic dependence between actions in the current trace(see for details). if, at choice point i,



isp itself follows a highly parallelizable algorithm. the alternative interleavings may well be explored by other nodes of a large cluster. our implementation of an isp algorithm for pthreads(a different effort with no code in common) shows that with a suitably designed heuristic, linear speed-up on large clusters is a possibility. further plans regarding isp are presented in section 4.



our future work will consist of two distinct phases. first, we plan to more rigorously analyze our mpi formal specification and find ways in which to solid feedback. our plans regarding isp are to develop new combinations of static and dynamic analysis, obtain mpi programs that are from a class known to be difficult to debug, and measure the efficacy of our tools.



