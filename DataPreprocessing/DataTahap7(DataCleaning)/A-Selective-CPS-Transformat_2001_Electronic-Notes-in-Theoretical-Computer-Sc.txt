recent work has focused on selective transformations for different reasons. reppy introduced a local cps transformation in an otherwise direct-style compiler to improve the efficiency of nested loops. kim and yi defined coercions between direct style and cps terms with no other effects than nontermination, allowing arbitrary subexpressions to be transformed, and facilitating interfacing to external code in both direct style and cps. the selective



section 2 gives the syntax and semantics of a small, typed functional language with control effects, and shows the traditional(non-selective) cps transformation. section 3 extends the language with effect annotations which are verified by an effect system, and defines the selective cps transformation guided by these annotations. section 4 proves the correctness of the selective cps transformation using plotkin-inspired colon translations, and section 5 concludes.



as stated in the previous section, we treat trivial and serious expressions differently. trivial expressions are those that have no computational effects and serious expressions are those that might have effects. the safe approximation used by the standard cps transformation assumes that any application might have effects, which is not unreasonable when one considers nontermination as an effect.



these are the minimal annotations needed for our purpose. we treat values and identifiers(the traditional trivial expressions) as if they were annotated as such, i.e.,(e)t is a match for any trivial expression, just as(e)n matches the two control operators.



we have to treat functions and applications with special care. when a lambda abstraction is applied at an application point, the body of the abstraction is also evaluated at that point. if the body is not trivial, then neither is the application, and after selective cps transformation, the transformed application must pass a continuation to the transformed body, and the body should expect a continuation.



in a higher-order program, more than one abstraction can be applied at the same application point, and after transformation, all of these abstractions must either expect a continuation or not. that means that all functions that can end up in a given application must be transformed in the same way. that divides the abstractions into two groups, those transformed into cps, i.e., expecting a continuation, and those kept in direct style, i.e., not expecting a continuation. some abstractions with a trivial body might be transformed to expect a continuation in order to match the other abstractions that reach the same application points.



with these reduction rules, an expression marked non-trivial can reduce to one marked trivial, typically by reducing it to a value. if that happens to one of the subexpressions of an application, we can suddenly be in the situation where both of the subexpressions are trivial as well as the bodies of the functions expected to be applied there, and the entire application could now be consistently annotated as trivial. the weakening in the effect-typing rule for applications is there to avoid that such a change would mandate changes to annotations not local to the reduction taking place.



the idea of the colon translation is that in e: k, the k represents the context of e, which in the transformed program has been collected in a continuation: a function expecting the result of evaluating e. the colon separates the source program to the left and the transformed program to the right of it. in the selective cps transform, some contexts are not turned into continuations, namely the contexts of expressions marked trivial, since such expressions are not transformed to cps expressions, and as such does not expect a continuation.



the e: e-translation is not as significant as the e: k-translation, since all it does is apply the st-function to the argument, i.e., if e is a trivial expression then e: e= e[st[e]]]. there are no administrative reductions to bypass in direct style.



it is possible to prove results similar to the present ones for other choices of effects and combinations of effects. a sensible choice would be a monadic effect of state and control, since it is sufficient to implement all other choices of layered monads. a proof similar to the present one for both state and control effects would be a logical next step.



the method of extending the colon translation to selective cps transformation was originally developed in cooperation with jung-taek kim and kwangkeun yi from kaist in korea, and with olivier danvy from brics in denmark. the present work would not have been possible without their inspiration. thanks are also due to andrzej filinski and to the anonymous referees for their comments.



jung-taek kim, kwangkeun yi, and olivier danvy. assessing the overhead of ml exceptions by selective cps transformation. in greg morrisett, editor, record of the 1998 acm sigplan workshop on ml and its applications, baltimore, maryland, september 1998. also appears as brics technical report rs-98-15.



