this paper is concerned with the digital circle recognition problem and more precisely with the circular separating algorithm. it tries to go further in implementation details, giving pseudo-code algorithms for the main points, and avoids using the sophisticated machinery coming either from computational geometry or from linear programming found in previous papers on this subject. after recalling the geometrical meaning of the separating circle problem, we present an incremental algorithm to segment a discrete curve into digital arc.



euclidean shape recognition is an important topic of discrete geometry. many works have been done for straight lines[12,5], planes[4,17] and algorithms become more and more efficient. some solutions exist for higher order objects such as conics or general polynoms but a lot of further developments remains to be done.



after recalling the geometrical meaning of the separating circle problem, we present an elementary algorithm based on duality, the formal approach to hough transform. this algorithm is then applied to find a partition of any 8connected curve in digital circular arcs. such an algorithmallows us to define and compute the local curvature to a digital curve.



proposition 2.2 let f be a set of lines(no one of which is parallel with oy axis) and f the set of points which are the dual transforms of the lines of f. then duality maps lines of the lower envelope of f in a one to one way with the vertices of the upper part of the convex hull of f.



if a circle separating sets s and t exists, this circle being convex contains convex hull of s. thus replacing set s by the set of vertices of its convex hull does not change the solution of the circular separation problem. cost of this processing being o(s.log(s)) it does not increase complexity of the overall algorithm.



adjoint a point t t to the convex hull of s and remove t out of t if hull(s, t) contains another point of t. a simple o(tlog(t)) algorithmcan be devised to make this reduction. an even more elaborate process, presented in 3.1, will associate a set t satisfying this property to the given set s.



since we have shown that the number of constraints is in o(n 2), this leads to a linear number of constraints, with respect to n. in the following, we only consider scoc discrete curve, indeed if the curve has got inflection points, the global separating arc convex is empty. this hypothesis can be checked in o(n) as a preprocessing. hence, we can apply the algorithm1 to compute the vertices of the convex set, maybe empty, in o(nlog3(n)).



let us suppose our goal to be the curvature estimation at each point of the discrete curve. a classical way to define the curvature at a point of a curve is to consider the inverse of the osculating circle radius, this computation can be done considering the best fitting circle locally at each point of the curve. in the previous sections, we have shown an algorithmto recognize digital arc pieces from a discrete curve based on convex hull vertices and edges. for the curvature estimation problem, we use the same tools but with specific characteristic points:



this curvature is the inverse radius associated with the closest vertex of acd({m, l, r},{lext, rext) to m, that defines the minimum curvature radius and thus the maximum curvature at m. since m, l and r may not be convex hull points, some points of[mr] or[ml] might be outside the computed separating arcs. this makes the process not reversible but this is not important in the case of local curvature computation.



a basic complexity analysis of alg. 5 will lead to an o(n2) complexity. however, we can use discrete tangents defined by in order to bound the discrete segment growth. as a matter of fact these discrete tangents are defined by the longest discrete segment at a point of and thus half-tangent at m define the longest possible segment for[ml] and[mr]. since these discrete tangents can be computed in o(n) at each point of the curve we can bound the[ml] and[mr] in the same complexity.



