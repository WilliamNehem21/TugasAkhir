there are different algebraic structures that one can use to model notions of computation. the most wellknown are monads, but lately, applicative functors have been gaining popularity. these two structures can be understood as instances of the unifying notion of monoid in a monoidal category. when dealing with non-determinism, it is usual to extend monads and applicative functors with additional structure. however, depending on the desired non-determinism, there are different options of interaction between the existing and the additional structure. this article studies one of those options, which is captured algebraically by dioids. we generalise dioids to dioid categories and show how dioids in such a category model nondeterminism in monads and applicative functors. moreover, we study the construction of free dioids in a programming context.



algebraic structures have been central to the modelling of computational effects. for example, monads[12,13,21,17] have been used to model many computational effects such as global state, exceptions, environments, input/output, and continuations. more recently, applicative functors are becoming popular in diverse applications such as modelling parsers, characterising traversals[4,7], and in combination with monads to obtain concurrent queries.



category. this unification of concepts is extremely useful, as it allows us to translate concepts, properties, and techniques from one structure to the other. for example, through the unified framework, an old optimisation technique for lists is shown to be essentially the same as a newer one for monads, and led to the discovery of a new one for applicative functors by means of a simple translation. in many applications of monads and applicative functors one has to deal with non-determinism. there are different flavours of non-determinism, but in functional programming the most common are deep backtracking and shallow backtracking. when modelling deep backtracking, the algebraic structure that arises is near-semirings. this insight lead to a unified framework for deep-backtracking nondeterminism in monads and applicative functors. if, on the other hand, one wants to model shallow backtracking, then one arrives at the algebraic structure of



this article studies the shallow-backtracking variant of non-determinism by studying the categories that support the definition of dioids, namely dioid categories. working at this level of abstraction allows us to obtain a unified model of shallow-backtracking non-determinism for both monads and applicative functors. moreover, we study the construction of free dioids. intuitively, free dioids can be thought of as the programs that can be written when only the dioid interface is exposed, and therefore provide a canonical representation for programs structured as a computation with shallow-backtracking non-determinism.



the article is structured as follows: in section 2 we introduce monoids and monoidal categories, and show how they provide a unified framework to study the notions of monads and applicative functors. in section 3, we introduce dioids and dioid categories. moreover, we show how these categories provide a unified framework to study shallow non-determinism in monads and applicative functors. in section 4, we turn to the construction of free dioids. we provide a formula that allows to construct dioids on set(the category of sets and functions) and to construct the free dioid applicative. unfortunately, it does not allow us to express the free dioid monad. finally, in section 5, we conclude.



this makes the structure a near-semiring. see the work of rivas, jaskelioff and schrijvers for details. in this case it is possible to explore different results, whereas in the shallow case, we explore possible results in order only until one is found.



we can use lemma 3.3 to extend the monoidal categories of endofunctors discussed in sections 2.4 and 2.5 to dioid categories. we need to establish that the category of endofunctors on a category c has terminal object and binary products. if the base category c has terminal object, then the constant functor to the terminal object is the terminal object on the category of endofunctors.



an important non-example of monadplus subject to these axioms are lists. while the empty list and list concatenation would give an implementation for mzero and mplus, such implementation would not satisfy the law mplus(return x) u= return x.(in fact, lists are the canonical example of deep-backtracking non-determinism.)



starting with the analysis of the free monoid, we have generalised the solution to monoidal categories, and then we have used this formula to obtain the free monad and the free applicative. general conditions for the existence of free monoids can be found in the work of kelly. the case of free monads and free applicative functors is analysed in detail by rivas and jaskelioff.



