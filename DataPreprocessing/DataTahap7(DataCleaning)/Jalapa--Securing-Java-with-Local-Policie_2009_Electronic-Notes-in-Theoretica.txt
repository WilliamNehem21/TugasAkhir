we present jalapa, a tool for securing java bytecode programs with history-based usage policies. policies are defined by usage automata, that recognize the forbidden execution histories. usage automata are expressive enough to allow programmers specify of many real-world usage policies; yet, they are simple enough to permit formal reasoning. programmers can sandbox untrusted pieces of code with usage policies. the jalapa tool rewrites the java bytecode by adding the hooks for the mechanism that enforces the given policies at run-time.



special case is that of privileged calls, that trust the methods below them in the call stack). being strongly biased towards implementation, this mechanism suffers from some major shortcomings. for instance, since a method removed from the call stack no longer affects security, stack inspection does not offer any protection when trusted code uses objects supplied by untrusted code.



although many security policies are not enforceable by stack inspection, at present java offers no other facilities to specify and enforce user-defined policies. therefore, it is common practice to renounce to separating duties between functionality and security, and to implement the needed enforcement mechanism with local checks explicitly inserted into the code by programmers. since forgetting even a single check might compromise the security of the whole application, programmers have to inspect their code very carefully. this may be cumbersome even for small programs, and it may also lead to unnecessary checking.



history-based security has been repeatedly proposed as a replacement for stack inspection[1,7,11]. clearly, the ability of checking the whole execution history, instead of the call stack only, places history-based mechanisms a step forward stack inspection, from the expressivity viewpoint. however, since many possible historybased models can be devised, it is crucial to choose one which wisely conciliates the expressive power with the theoretical properties enjoyed. it is also important that the security mechanism can be implementated in a way that makes it transparent to programmers, and with a negligible run-time overhead.



this paper gives an overview of jalapa. we start by presenting our methodology for securing java applications through local usage policies, with the help of some examples. then, we give some insights about the design and the implementation of our tool, and we summarise the artifacts supporting our tool. we conclude by highlighting some of the present and future challenges of jalapa.



we illustrate our methodology for securing java programs, as well as some key features of jalapa, with the help of an example. suppose you have a simple web browser whose functionality can be extended with plugins, and with methods for handling connections and cookies. since plugins can be downloaded from the network, possibly from untrusted sites, we want to control their behaviour, and block their execution at the moment they attempt some malicious action. in particular, we focus here on two confinement policies, that prevent plugins from transmitting data read from the local file system, either directly or by exploiting cookies to implement a covert communication channel(although stronger, these policies imply non-interference). before formally specifying these policies, we consider a skeletal implementation of the classes browser and plugin.



menting the method run(). the browser starts a plugin by invoking the method doit(), which is quite peculiar. actually, it defines a sandbox, which will enforce the policy plugin-out throughout the run of the plugin. this means that all the security-relevant methods called while executing the method run() will be moni-



the second policy is specified by the usage automaton plugin-cookie, above on the right, which introduces further peculiar features of jalapa: parameters and guards. we start from the state q0. the event init(p,u), signalling the creation of a new plugin p with codebase url u, causes a transition to q1. upon a start(p),



once the needed policies and sandboxes have been defined, the next step is to instrument the compiled program with the hooks from the security-relevant methods to the execution monitor. our tool implements this step as a bytecode transformation, discussed in more detail below. the resulting bytecode will respect all the usage policies at hand, within their scopes(see for usage details). in we formally prove that the run-time mechanism implemented by jalapa is sound and complete w.r.t. the specification of policy compliance.



