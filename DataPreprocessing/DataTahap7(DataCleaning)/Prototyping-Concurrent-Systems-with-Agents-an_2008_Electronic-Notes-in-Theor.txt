more and more aspects of concurrency and concurrent programming are becoming part of mainstream programming and software engineering, due to several factors such as the widespread availability of multicore/ parallel architectures and internet-based systems. besides the typical fine-grained support currently provided, however, we seek in this paper for an higher-level approach. we present simpa, a library-based extension of java which provides programmers with agent and artifact abstractions on top of the basic oo layer, as a means to organise and structure concurrent applications. to pave the way towards identifying a true language extension for simpa, we define a core calculus of agents and artifacts, by suitabling mixing techniques coming from object-orientation and concurrency theory.



accordingly, in this paper we present simpa, a library-based extension of java which provides programmers with agent-oriented abstractions on top of the basic oo layer, as basic building blocks to define the architecture of complex(concurrent) applications. simpa is based on the a&a(agents and artifacts) meta-model, recently introduced in the context of agent-oriented computing as a novel foundational approach for engineering complex software systems[18,14]. agents and artifacts are the basic high-level, coarse-grained abstractions available in a&a(and simpa): agents are used in a&a to model(pro)-active and task-oriented components of a system, encapsulating the logic and control of such activities, while artifacts are used to model function-oriented components of the system, used by agents to support their individual activities, as well as collective ones.



then, towards identifying a true java language extension supporting the simpa framework, in this paper we identify a quite expressive subset of simpa, and accordingly develop a core calculus of agents and artifacts. to properly join the object-oriented nature of mainstream programming languages with the concurrency aspects of agents and artifacts, this formal framework suitably mixes modelling techniques coming from object-orientation[7,22] and concurrency theory[3,12]. as a result, this calculus paves the way toward abstract analysis of properties concerning well-formedness(typing), safety and liveness.



the remainder of the paper is organised as follows. section 2 describes in more details the basic abstraction layer introduced by the a&a meta-model; section 3 describes the simpa framework and technology; section 4 describes a core calculus providing a formal foundation for the approach. finally, section 5 and section 6 conclude the paper with related works and a brief sum up.



working environment: humans work concurrently and cooperatively in the context of social activities, directly interacting by means of speech-based communication, and indirectly by means of artifacts and tools that are shared and co-used. in such systems, it is possible to easily identify two basic kinds of entity: on the one side human workers, as the entities responsible of pro-actively performing some kinds of activity; on the other side artifacts and tools, as the entities that workers use to support their activities, being resources(e.g. an archive) or instruments mediating and coordinating collective activities(e.g. a blackboard, a calendars, a task schedulers).



the information flow from the artifact to agents is modelled in terms of observable events generated by artifacts and perceived by agents(so interface controls have no return values, as found in oo interfaces). besides the controls for triggering the execution of operations, an artifact can have some observable properties, i.e., elements useful to inspect the dynamic state of the artifact without necessarily executing operations on it.



piled and executed using the standard java compiler and virtual machine, without the need of a specific extension of the java framework(preprocessors, compilers, class loaders, or jvm patches). this choice has the advantage to maximise the reuse of an existing widely diffused platform(java). indeed, using the library/ annotations solution to implement a language and a platform extension has some revelant drawbacks, which derive from the fact that agents and artifacts are not true real first-class abstractions for the language and the virtual machine. accordingly, part of the ongoing work is devoted towards the definition and the prototype implementation of a new full-fledged language and platform called simpal.



ordered set of arguments, either bound or not to some data object(if some is not bound, the memo is hence partially specified). a memo-space is just a dynamic set of memos: a memo is identified by its label, and only one instance of a memo can exist at a time. each agent has internal actions to atomically and associatively access and manipulate the memo space: to create a new memo, to get/remove a memo with the specified label and/or content, and so on. it is worth remarking here that instance fields of an agent class are not used: the memo-space is the only data structure adopted for modelling agent long-term memory.



structured activities can be described as activities composed(hierarchically) by sub-activities. the notion of agenda is introduced to specify the set of the potential sub-activities composing the activity, referenced as todo in the agenda. each todo specifies the name of the subactivity to execute, and optionally a pre-condition. when a structured activity is executed, each todo in the agenda is executed as soon as its pre-condition holds. if no pre-condition is specified, the todo is immediately executed. then, multiple sub-activities can be executed concurrently in the context of the same(super) activity. a structured activity is implemented by methods with an@activity with agenda annotation, containing todo descriptions as a list of@todo annotations. each@todo must specify the name of the related sub-activity to execute and optionally a pre property specifying the precondition that must hold in order to execute the todo. a todo can be specified to be persistent: in that case, once it has been completely executed, it is re-inserted in the agenda so as to be possibly executed again. this is useful to model cyclic behaviours. todo preconditions are expressed as boolean expressions, with and/ or connectors(represented by, and; symbols, respectively) over a basic set of predefined predicates. essentially, such predicates make it possible to specify conditions on the current state of the activity agenda, in particular on(i) the state of the sub-activitities(todo), if they completed or aborted or started, and on(ii) the memos that could have been attached to the agenda. besides holding information useful for activities, memos are used then also to coordinate activities, by exploiting in the specification of a pre-condition the predicate memo, which tests the presence of a memo in the agenda.



activity starts, and then either delivering the drinks(deliverboth) as soon as both the drinks are ready, or deliver just the coffee(deliverjustcoffee) if only the tea is not available after a specific amount of time. at the end of the activities, the primitive memo is used to create memos about the drinks(labelled with drink1 and drink2), annotating information related to the fact that coffee and the tea are done. in the case of makeonetea activity, the memo tea not ready is created instead if the agent does not perceive that the tea is ready within a specific amount of time. in deliverjustcoffee and deliverboth activities the primitive getmemo is used instead to retrieve the content of a memo.



to perform their activities, agents typically need to interact with their working environment, in particular with artifacts by means of use and sense actions as described in previous section. for this purpose, the use and sense primitives are provided, respectively, to trigger the execution of an operation over an artifact, and for perceiving the observable events generated by the artifact as effect of the execution. before describing in details agent-artifact interaction, in next sub-section we describe how to programs artifacts.



for each operation(command) listed in the usage interface, a method annotated with@operation and with void return type must be defined: the name and parameters of the method coincide with the name and parameters of the operations to be triggered. operations can be either atomic, i.e. executed as a single computational step represented by the content the@operation method, or structured, i.e. composed by multiple atomic steps. structured operations are useful



finally, the usage interface of an artifact can be partitioned in labelled states, in order to allow a different usage interface according to the specific functioning state of the artifact. this is realised by specifying the annotation property states when defining operations and observable properties: it describes the list of observable states in which the specific property/ operation is visible. the primitive switchtostate is provided to change the state of the artifact(changing then the exposed usage interface).



property updated("selection") is generated. the operations selectcoffee and selecttea are atomic, instead make is(can be) structured: if a valid drink selection is available, then two possible alternative operation steps are scheduled, timetoreleasedrink and forcedtoreleasedrink. the first one is time-triggered, and is executed 3 seconds after triggering. the second one is executed as soon as makingstopped guard is evaluated to true. this can happen if the user agent executed the stop operation while the coffee machine was making the coffee. in both cases, step execution accounts for releasing the drink, by signaling a proper event of type coffee ready or tea ready, updating the observable properties value and switching to the idle state.



in this section we start studying a language supporting the main abstractions of the simpa framework, considering as a reference a simpa subset expressive enough to deal with powerful coordination artifacts. this calculus is conceived as a smooth extension over the object-oriented setting: while classes(and objects) are used to model data values to be symbolically manipulated, we add the concepts of agents and artifacts as coarse-grained abstractions to structure concurrent applications. following an established tradition of papers in the object-orientation research contexts(see e.g.[7,8]), such an extension is developed in terms of a core calculus, namely, a very small language that focuses on the few aspects of interest while abstracting away from unnecessary language mechanisms. this should pave the way towards establishing technical analysis results over the bigger language, such as e.g. progress, soundness, and so on.



to develop our approach formally we first conceive a subset of the simpa framework neglecting some of its features. first of all, we do not consider activities with agenda, namely, activities have no guard condition and start executing as soon as they are scheduled. then, there is no explicit notion of filtering linked to sensors; in our language the use action yields an action/sensor identifier, which can be later used to perceive events. concerning artifacts, we only model fields and operations, the latter having a guard condition; so we do not consider observable properties and operation steps.



a program is formed by a list of definitions, of classes, agents and artifacts. a class definition includes its name, a list of fields f(each with its type ti), and a list of methods(class inheritance is not modelled). methods have a return type t, a name m and arguments t x, and their body is just a return statement. an agent(class) definition has a name g, a list of fields representing its state, and a list of activities act representing its autonomous behaviour. an activity has a name o, arguments, and its body is an expression, treated as a statement. an artifact(class) definition has a name a, a list of fields representing its state, and a list of operations op representing the service it provides. an operation has a name o, arguments, a guard expression, and its body is an expression, treated as a statement.



e.g. for the java language. on the one hand, this allows for a compact and simpler representation of syntax, on the other hand, we do this to take into account also expressions temporarily produced during computation, which cannot be expressed in a program. basically, further constraints to be applied to a valid program includes the fact that references r and s cannot appear in the surface language; that the receiver of a field access, field assignment, and activity schedule should be variable this; scheduling, use, and sensing can occur only in agents, whereas event generation can occur only in artifacts.



parts of the program where such a sub-expression is inserted in. when an expression matches e e), it means that e is the next sub-expression that needs to be evaluated: the idea is that in case e evaluates to v, then the whole expression e e) evaluates to e v). the way the syntax of e is structured guarantees e.g. that a receiver is evaluated before the method arguments are evaluated, and that such arguments are evaluated from left to right, and so on. for operations, k is structured so that guard evaluation proceeds until reaching value t, after that the body of the operation can be executed.



