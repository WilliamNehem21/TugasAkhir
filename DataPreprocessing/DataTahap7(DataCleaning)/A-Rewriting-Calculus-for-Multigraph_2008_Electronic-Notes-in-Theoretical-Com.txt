graphs are high-level constructs widely used for describing complex structures, like communication networks, neural networks, uml diagrams, microprocessor design, xml documents, biological systems. graph transformation provides a rule-based modeling of their dynamic evolution. different approaches have been proposed to formalize graph transformation and to define graph rewriting, summarized for instance in.



for a node is given by a list of pairs consisting of a neighbour and the corresponding edge label. if a node has no neighbour then its adjacency list is empty. a subgraph of a graph g is a graph whose node and edge sets are subsets of those of g. a graph



graph transformation. a graph transformation rule l~ r consists of two graphs l and r called the leftand right-hand side respectively, and a correspondence between elements of the left-hand side and elements of the right-hand side. this correspondence is provided by some unique identifiers associated to nodes.



in the last step, depending on the mechanism chosen for establishing connections between new and old nodes. two particular problems are handled at this stage([12,18]). the first one refers to whether or not noninjective matching is allowed. for example, if two different nodes l are matched to one node in the host graph, and one of the two nodes is deleted and the other preserved, will the node in the host graph be deleted or preserved? the second problem concerns the dangling edges in the host graph which are unmatched edges with one endpoint deleted by the transformation rule. these two problematic situations are referred to as the identification and the dangling problem respectively. we will see later how we handle these points in our framework.



we denote by un the set of unmatched partial nodes, by ue the set of unmatched edges(i.e., the not matched edges whose both endpoints are matched), and by b the set of bridges(i.e., the edges in g not matched by an edge of l, with one end a matched node and the other end not matched).



them. in order to model multigraph rewriting using algebraic terms, we need to handle the context of the multigraph in which the replacement is performed. this is done by a systematic enrichment of rewrite rules with extension variables that help storing the context and applying rewrite steps in subterms. this is a usual method employed when performing rewriting modulo associativity and commutativity.



where t1 d t2 is the extended rule associated to t1 d t2, the matching problem is solved using an acu-matching algorithm, and s is a strategy which reduces a term to its normal form w.r.t. the cleaning and restructuring rules respectively.



