networks with an a priori unknown number of nodes occur everywhere in practice, e.g., processes running on a computer, machines in a token ring, a lan or even the world wide web itself. therefore, a lot of algorithms like mutual exclusion, leader election, group membership, or distributed memory algorithms are developed for such parameterized networks and they are expected to work properly for every concrete number of participants. hence, although the problem is known to be undecidable(apt and kozen,), there has been much interest in the veri cation of such protocols. also, automated and semiautomated methods for the veri cation of restricted classes of parameterized networks have been developed.



nite subsets of the natural numbers and the transitions of the processes in the network are described in ws1s. given a boolean abstraction relation in ws1s this allows to construct the abstract system automatically. the method was used to verify several parameterized protocols. with an additional marking algorithm and the lifting of fairness conditions() we were able to establish liveness properties for these protocols as well.



we illustrate our method using a typical example: a distributed shared memory protocol. the protocol has two parameters, the number of processes and the number of memory pages. in order to guarantee exclusive write and multiple read the processes have to know the actual access privileges of the other processes. we give a generic abstraction for this type of protocols in the framework of pvs and show how to analyze the abstract ws1s system using pax and smv to prove safety and liveness properties of the protocol.



in case a is nite, we call nite abstraction relation. let';'a be ltl formulae and let[[']](resp.[['a]]) denote the set of models of'(resp.'). then, from s v s, 1([[']])[[']], and s j=' we can conclude s j='. this statement, which is called preservation result, shows the interest of veri cation by abstraction: since if sa is nite, it can automatically be checked whether sa j='a. in fact, a similar preservation result holds for any temporal logic without existential quanti cation over paths, e.g., 8ctl?, ltl, or 2[7,8,21].



as already mentioned network protocols often handle data structures ranging over sets of processors in the network. as examples we listed shared memory protocols such as the one described in section 2 or group membership protocols. to illustrate how the idea to reduce the state space of each processor by introducing a global structure used by all processors can be applied to other protocols, let us consider a group membership protocol. brie y, each processors keeps track which processors are still alive and vital part of the network. due to continuous communication errors are detected and processors are removed from the membership-list of the well functioning processors. two properties are of interest for those protocols; agreement, meaning that the well functioning processors agree on their membership-lists, and validity, meaning that an error will be detected eventually and then the membership-lists corresponds to the set of well functioning processors. we analyzed a synchronous group membership protocol by proving rst agreement deductively. then, we could reduce the system by using a global membership-list maintained by the processors working properly.



de nition 3.1 let s(n; p) be a parameterized system with n processors and a second parameter p. let the processors communicate over some message queues q1;:::; qk where each message is of the form(i; msg; p) with i< n, p< p, and msg of some nite type m. the state space of each processor j is an array a[j][0::p 1] of size p and of nite type t.



to deal with liveness properties we need some assumptions about fairness. we call s(n; p) weak fair if all transitions continuously enabled from a certain point in a computation are eventually taken. if moreover s(n; 1) never blocks a queue, i.e., messages in the queues are eventually consumed, we can deduce from lemma 3.2:



now, we observe that our reduced system is indeed strictly parameterized in p. hence, we can get rid of the second parameter and are prepared to represent the resulting network in the framework of ws1s. then, we use abstraction techniques explained in the next section to analyze it.



terms of ws1s are built up from the constant 0 and 1st-order variables by applying the successor function suc(t)(\t+ 1"). atomic formulae are of the form b, t= t0, t< t0, t 2 x, where b is a boolean variable, t and t0 are terms, and x is a set variable(2nd-order variable). ws1s formulae are built up from atomic formulae by applying the boolean connectives as well as quanti cation over both 1st-order and 2nd-order variables.



