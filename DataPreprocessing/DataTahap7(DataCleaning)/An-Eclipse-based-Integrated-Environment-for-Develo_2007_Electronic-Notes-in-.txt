as pointed out in, the computer science community is constantly ignoring the debugging problem even though the debugging phase of software development takes more than the overall development time. even if the rml language has a very short learning curve, the absence of debugging facilities previously created problems of understanding, debugging and verification of large specifications. we have addressed the debugging issue by providing a debugging framework for rml. the debugger is based on abstract syntax tree instrumentation(program transformation) in the rml compiler and some runtime support. type reconstruction is performed at runtime in order to present values of the user defined types.



the rml editor component provides syntax highlighting, auto indentation, code completion, type information and error highlighting. this component obtains the needed information from the rml parser and the rml compiler. from the rml compiler the errors and the type inference information is gathered. the type



all the sosdt components are using the components of the eclipse framework which are populated with information from the rml parser and the rml compiler. when a file is saved the rml parser reads the file and updates the internal rml model information which triggers the update of the rml browser. also, on save the rml file is sent to the rml compiler which dumps error information to be displayed in the problems view and type information used to update the internal rml model.



mini-freja is a call-by-name pure functional language. the test program calculates prime numbers. the prolog translation(mf.pl) was originally implemented by mikael pettersson. the comparison was performed on a fedora core4 linux machine with two amd athlon(tm) xp 1800+ processors at 1500 mhz and 1.5gb of memory. the measurements were done during april 2006.



therefore we have designed and implemented a prototype of an integrated environment for supporting such development, first as a version partly based on emacs, and currently integrated in eclipse, as an sosdt eclipse plugin. some of our rml users who have debugged their specifications using a prototype of this environment have given us positive feedback and also various suggestions for improvement. while this is a good start, many improvements can be made to this environment. in the future we plan to improve the debugger execution speed, and implement additional features. our goal is to provide a very well integrated and supportive development environment(ide) for rml based on the eclipse platform.



