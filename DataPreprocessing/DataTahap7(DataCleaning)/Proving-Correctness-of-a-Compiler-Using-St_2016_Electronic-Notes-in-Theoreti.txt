in this paper we prove the correctness of a compiler for a call-by-name language using step-indexed logical relations and biorthogonality. the source language is an extension of the simply typed lambda-calculus with recursion, and the target language is an extension of the krivine abstract machine. we formalized the proof in the coq proof assistant.



since the first proofs of compiler correctness appeared many years ago[20,21], there has been a considerable amount of progress in the topic. of particular importance is the work of the compcert project, a certified compiler for a large subset of the c programming language. in the case of functional languages we can mention which is a certified compiler for the the simply-typed lambda calculus, and where the source language is a call-by-value functional language, and the target is a variant of the secd machine.



hereafter we use the notation f e t to specify both the set defined by the grammar and our naming convention for meta-variables ranging over it. the first three constructors correspond to the lambda calculus with de bruijn indices. the language also includes a fixed-point operator, integer constants, strict arithmetic operators, pairs and projections. the last constructor is a conditional projection. we choose this form of conditional for convenience, but a more familiar constructor of the form ifz t then t1 else t2 can be expressed as ifz t.(t1, t2). we write gn to represent any strict arithmetic operator with arity n> 0; operators are written in prefix position and cannot be partially applied.



lemma 5.7 shows, this allowed us to make a nested induction when considering the case for rec t. if the source language were strong normalizing(i.e., by setting aside the fixed point operator), there would be no need to introduce the semantic chain and correctness would directly relate the compiled code with the semantics of the term.



all the results presented in this paper has been completely formalized in the proof assistant coq(version 8.4pl6 with ssreflect 1.5). the formalization is constructive, as we do not assume any classical axiom. we invite the curious reader to download and explore the formalization as it complements the content of this article.



as future work we plan to extend the source language by enriching the type system and adding new constructors. for example, in we proved the correctness of a compiler for a higher-order imperative language with respect to the big-step operational semantics of the source language; it would be interesting to obtain a relational proof of compiler correctness. we also intend to investigate the application of this technique to lazy functional languages targeting the sestoft abstract machine or the stg machine. we are also interested in applying the method to other models of execution closer to real assembly code.



