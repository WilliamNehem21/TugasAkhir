component composition can lead to multiple instances of the same component. some components can have only one instance loaded at a time, for example, when a unique external resource is used. we give an abstract component language and a type system ensuring the safe instantiation of components. language features are instantiation, composition and a simple scope mechanism for discharging instances.



the simple binding mechanism for components used here bears similarity to let binding in functional languages such as ml, and hence to lambda abstraction and application. however, the types used here are completely different. to some extent it turned out to be possible to develop our type theory along the lines of so-called pure type systems(ptss), see. this increased our confidence in the abstractions chosen and can be viewed as a tribute to the generality of ptss.



the intuition behind our types bears some similarity to so-called linear types[2,6]. linear types usually express that a value will be used exactly once within its scope, as opposed to at most once in our case. this difference is reflected in our weakening and start rules(see below). nevertheless, the



this paper is organized as follows. in the next section we develop the component language with its terms and operational semantics. we define types and typing relation in section 3. then we prove some properties of the type system in section 4. we outline a polynomial time type inference algorithm in section 5 before ending with some conclusions and indications of future research. technical proofs are delegated to the appendix.



a component expression e may use several components. among the latter there are instances that exist for the whole lifetime of e, whereas other instances live only for a while and are then discharged. therefore we use two sets to represent the type of a component expression. the first set xi collects all components instantiated during the lifetime of the expression and the second set xo consists of those components that have instances surviving the execution of the expression.



continuing the example in section 2.1, we show the type derivation tree for{new b new d}new a. first, a typing for new b can be derived as follows:(the names of the typing rules are shortened to their first three letters.)



definition 3.4[well-typed program] a well-formed program p= decl; exp is well-typed if exp can be typed in a basis built from decl. here it is understood that the declarations may have to be reordered to form a legal basis.



in this section we will state some properties of our type system. the invariant theorem and its correctness corollary at the end of the section relate the type system to the operational semantics. in order to prove the invariant property some definitions and lemmas are needed. some technical proofs of lemmas are delegated to appendix a, to improve the readability of this section.



