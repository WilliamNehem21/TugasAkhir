the key idea of declarative debugging is to build a computation tree(also called an evaluation dependency tree) representing the computations performed by an erroneous program. the exact form of the computation tree depends on the kinds of errors that are to be diagnosed. each node of a computation tree represents the outcome of a computation step in the program and is connected to the nodes representing the subcomputations that were performed in order to produce the result of the computation.



if a program does not compute the expected result or produces unexpected results, its computation tree contains one or more erroneous nodes, whose result does not match the semantics intended by the programmer. some of these erroneous nodes are just the result of other erroneous computations, while other erroneous nodes represent genuine programming errors. these buggy nodes are distinguished by the fact that they do not have any erroneous children, i.e., their represented computation steps compute a wrong result from correct inputs.



in this paper, we present a modification to the standard program transformation approach that avoids these shortcomings by transforming functions in the io monad in a specific way. this is made feasible by the fact that io is an abstract type and elements of that type cannot be inspected directly by user-defined functions. therefore it is sufficient to define appropriate adaptors for the primitive io functions. for almost all of these adaptor functions, their definition can be derived mechanically from the semantic model of the io type. only for a few distinguished primitives one needs to provide predefined implementations. nevertheless, no additional non-standard primitives are needed for their definition. thus, while using the semantic model of the type io in order to derive the adaptors, their concrete implementation does not rely on any particular implementation technique of i/o actions in the target implementation.



the rest of this paper is structured as follows. in the next section, we briefly review the standard program transformation approach for detecting wrong answers in functional and functional logic programming languages. the third section describes monadic i/o and the problems that it poses for the program transformation approach. in section 4, we introduce our modified program transformation that mixes well with monadic i/o. finally, the two last sections present related work and conclude.



the computation trees used by the debugger will have basic facts at their nodes. each node has an associated program rule, the program rule used at the corresponding computation step. thus, the debugger will point out the program rule associated with a buggy node as an incorrect program rule. the children of a node correspond to the subcomputations carried out while evaluating the guard and right hand side of the program rule. the soundness and completeness results in ensure that, given a wrong answer, an incorrect program rule is detected by the debugger.



several strategies have been proposed to create and navigate computation trees. a well-known approach widely employed in logic programming uses meta-interpreters to re-execute the goal during the debugging phase. thus, the computation tree is not computed explicitly, and both wrong an missing answers are easily handled. this idea has been extended in the case of nue-prolog to functional logic languages. however, this solution is not available to languages that do not provide built-in meta-instructions, as haskell or curry. to the best of our knowledge, only declaralogic languages. the reason is twofold: first, the computation trees necessary for detecting missing answers are much more complicated. second, often wrong and missing answers occur simultaneously, as in the case of our buggy reverse example. in these cases, it is enough to find out the reason for the wrong answer to get rid of both errors. this is also the case of our debugger.



we loose the computation trees in the first case. however, this is unproblematic. recall that we are diagnosing only wrong answers. yet, the error case(left e, w) corresponds to an exception condition where no answer is computed. keeping the computation trees of such computations therefore is not necessary.



