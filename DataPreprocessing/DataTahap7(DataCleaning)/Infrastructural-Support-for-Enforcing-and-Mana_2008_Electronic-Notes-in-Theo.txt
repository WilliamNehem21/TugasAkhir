state-of-the-art security mechanisms are often enforced in isolation from each other, which limits the kinds of policies that can be enforced in distributed and heterogeneous settings. more specifically, it is hard to enforce application-level policies that affect, or use information from multiple distributed components. this paper proposes the concept of a security service bus(ssb), which is a dedicated communication channel between the applications and the different security mechanisms. the ssb treats the security mechanisms as reusable, stand-alone security services that can be bound to the applications and it allows the enforcement of advanced policies by providing uniform access to application-level information. this leads to a security infrastructure that is more flexible and more manageable and that can enforce more expressive policies.



distributed applications consist of interacting components that are deployed on various locations in the network. nowadays, instead of being programmed from scratch, applications are often built by composing heterogeneous, reusable components. when security becomes a priority, several techniques exist to bind security mechanisms to these components. for instance, security mechanisms can be supported by the middleware such as an application server or a virtual machine, they can be injected in the code by security automata or aspect-oriented programming techniques, or they can simply be embedded in the code of the components.



in section 2, we illustrate the need for the ssb by means of a concrete example. in section 3, we discuss the ssb concept in more detail. section 4 shows how to the ssb facilitates the enforcement of the policies from section 2 and points out some other interesting applications of the ssb. section 5 discusses related work and section 6 concludes the paper.



the first and second policies illustrate that a policy might need access to information that is not local to the enforcement point for that policy. in the first policy, the access control mechanism of the web container needs information from the.net component and in the second example, the access control mechanism of the.net environment needs information about the ejb component. the third policy illustrates that security policies might affect several distributed components: the detection of an event at the web container triggers a change in the policies of different security mechanisms.



without any further support, supporting policies like these is not straightforward. the first and the second policies depend on information that is located in other(remote) components. some information about the caller(mainly its identity and/or its credentials) is usually propagated over communication protocols such as iiop and soap, but evidently it is not feasible to propagate all kinds of information the security mechanisms will ever need, especially when this is application-level information that is not always known beforehand. one way of implementing these policies without any further support is to make all the components interoperable using a common protocol such as soap. another approach is to let some components be proxies for components they are connected to. for instance, the ejb component could expose the bad payer attribute from the payment component to the web shop. for supporting the third policy, the auditing policies of the different middleware platforms would need to be exposed to the web container and the audit mechanism on the web container would need to be able to detect the attempted access to the management interface.



applications are bound to the ssb by means of an application binding. this is a wrapper component that presents an abstract view on an application to the ssb. the ssb aggregates all these views on the applications and provides a uniform abstraction layer to the security services that is independent of all applicationspecific details and that contains all application-level information available. when a



the application binding implements of an enforcement interface and an information interface. the enforcement interface specifies all resources that are contained in the application and lists all the actions that can be performed on these resources. resources and actions can correspond directly to low level concepts in the implementation of the application(such as a class and its methods), but they can also represent more abstract entities. the application binding guarantees that the behavior of the security services can be invoked each time an action on a resource is called. the security services can then use the ssb for obtaining information about the subject that wants to execute the action, the action itself and the resource on which the action is executed.



in the context of security information, events are things that happen in a system that are relevant for security. often, an event is a trigger of security logic. usually, an event is triggered by the invocation of an operation or the sending of a message. security events are found at two levels: interesting problems that can be tackled more easily when a ssb is provided. suppose that we have a single security domain consisting of many subdomains. in such a case, the flow of security information needs to be controlled very tightly. guaranteeing this without an ssb would be very cumbersome. however, when applications within these domains would be connected by a ssb, they could explicitly advertise the information flow policies and rely on the ssb for enforcing them in a uniform way.



several authors have explored the enforcement of advanced security policies that can take into account more information than the typical user/action/resource attributes. for instance, the dimension of time can be included and decisions can be made depending on previous events[20,2] or future events[12,9]. in the field of access control, several authors have proposed ways of representing, using and obtaining application-level information for use in access control policies[3,24]. these advanced policy enforcement mechanisms work well in local and homogeneous environments, but because of the lack of a uniform communication channel, it is hard to apply them in a distributed and heterogeneous setting. the work that perhaps comes closest to the ssb is tivoli access manager, but this approach only considers access control and as such it does not address the problem of generically binding the applications with security services.



the security mechanisms within some platforms are architected with flexibility in mind in the sense that third parties can develop pluggable modules that extend the security functionality. for instance, the java authentication and authorization service(jaas) and the java authorization contract for containers(jacc) allow customization with new authentication mechanisms and authorization engines respectively. the ssb can be seen as a generalization of these approaches that is inherently distributed.



existing ways of sharing security information are mostly found in middleware protocols such as iiop,.net remoting or soap. when propagation at the protocollevel is not possible, alternative solutions are needed. in the literature, different approaches exist for attaching security metadata to an execution context at a lower level than the protocols. stateful distributed interposition(sdi) and cause-



in this paper we have motivated the security bus concept as a way of interconnecting security services and we have illustrated how to apply this idea to the enforcement of a set of policies that span multiple distributed applications. this work discusses the general concept of an ssb rather than a fully worked-out architecture. we are currently designing the first version of our architecture in detail and we aim to validate it in a prototype.



