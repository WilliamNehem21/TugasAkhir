visual language techniques play an important role in software system development. often application-specific visual notations are used for which a tool environment consisting of visual editors, simulators, etc. is needed. a lot of work has been done to develop concepts and tool support for generating the desired tool environments. they rely on meta-modeling concepts, grammarbased approaches, or some kind of logics. in the following, we concentrate on generators based on graph transformation like diagen, atom3 and genged, which allow the precise description of visual modeling languages and the generation of visual environments. furthermore, we consider the development environment eclipse which offers support for graphical editor development based on visual language models in form of a number of plug-ins(e.g. emf, draw2d and gef). the aim of this paper is to bring together graph transformation-based tool generation with the eclipse technology.



following a graph-transformation based approach to visual language(vl) definition, a graph grammar is specified which describes the visual alphabet by a type graph and the language syntax by graph rules. additional attributes store the concrete layout of all language elements. thus, graph grammars can precisely define the syntax of a vl. from this vl definition visual editors are



visual editor development can be based on the eclipse technology. it contains the eclipse modeling framework(emf) for generating mainly the underlying models of visual editors. from an emf class diagram, emf generates a set of java classes for manipulating the model and a basic, tree based editor for model instances. the generated classes provide basic support for creating/deleting model elements and persistency operations like loading and saving. for a complete vl description the generated model has to be extended by additional syntax checks implementing certain constraints e.g. by the object constraint language(ocl). moreover, the visual editor has to be hand-coded on the basis of gef, no high-level description of visual representations is offered to support a complete editor generation.



in this paper, we present the first development steps of a new tool environment, called tiger(transformation-based generation of modeling environments). it combines the advantages of formal vl specification techniques(as offered by the graph transformation engine agg) with sophisticated graphical editor development features(as offered by the eclipse graphical editor framework gef). using the agg engine makes direct use of graph transformation concepts following the double-pushout approach to typed, attributed graph transformation. graph transformation is used on the ab-



this paper is organized as follows: in section 2, we review and compare the basic concepts of visual editor development, on the one hand based on graph transformation, and, on the other hand based on eclipse/gef. section 3 describes the aims and the architecture of our envisaged tiger framework for visual language specification and gef-based editor generation. in section 4, we present the results of the first development step of the tiger framework. in this step, we realized the generation of editors for graph-like diagrams on the basis of a vl specification and an agg syntax grammar. the vl of petri nets is the example to demonstrate in section 5 the use of the tiger vl structures and the look-and-feel of the generated editors. the paper concludes with an outlook on ideas for future development steps of tiger.



graph-transformation based editor generators have the benefit of providing a solid, formal vl specification compared to other metamodel-based approaches like emf. the static part of such a formal vl specification, i.e. the vl alphabet, is given by a type graph(the abstract syntax of the vl) plus the



eclipse is an open platform for tool integration managed by an open community written in java. eclipse is open source, i.e. the source code is freely available under a worldwide public license. the plug-in technology allows flexible program development and integration. extensive plug-in construction toolkits and examples allow the easy development of own application plug-ins supporting basic application functionalities.



with tiger, we envisage a fruitful combination of the features for graphical editor development offered by eclipse and gef and the power of graph transformation tools for defining the syntax and semantics of visual modeling languages. the overall aim of tiger is to allow the generation of modeling environments based on gef and on formal graph transformation specifications defining, checking or transforming the diagrams of a specific vl(e.g. syntax grammars, simulation grammars, consistency checking grammars, model transformation grammars, etc.).



the packages tiger.generator and tiger.vlspec build the core packages of the tiger tool. the vl specification will be designed by the vl designer using the tiger.vl designer component building the vl specification using the data structures defined in the tiger.vlspec package.



the tiger.generator generates the diagram and grammar editors, as well as the simulation, animation, analysis and model transformation components belonging to the<vl>.environment where<vl> should be replaced with the concrete editor name. moreover, the tiger.generator generates the visual model from the vl specification in the package<vl>.model.



the basic vl specification package tiger.vlspec allows a vl specification to be saved in the graph transformation exchange language(gtxl) format[21,11]. this is an xml based exchange format for graph transformation systems which is based on the exchange format for graphs gxl and reflects different graph transformation system structures and different graph transformation techniques in order to allow tool cooperation in the graph transformation community.



for the editor generation the jet compiler reads the visual alphabet specification and the generator template files which define the code generation skeleton with code placeholders. jet replaces the placeholder with the specific code from the visual alphabet specification. this generation process leads to a new generated eclipse editor plug-in project which could be directly executed in the eclipse runtime-environment.



and to define the symbol attribute values in a properties dialog. invoking an edit operation leads to an execution of the corresponding syntax rule in the agg-engine. the transformed diagram is directly displayed in the editor panel by the editor controller framework.



in this paper, we describe first ideas and the software architecture for a tool generating visual modeling environments from formal visual language specifications based on graph transformations and eclipse-gef. the envisaged tool environment tiger combines the advantages of formal vl specifications using graph transformation(as offered by agg) and of sophisticated graphical editor development features(as offered by eclipse-gef). the generated modeling environments themselves are eclipse plug-ins and hence can be integrated in the eclipse framework. the current state of this ongoing work(the first development step) is restricted to generating graphical editors for graph-like languages where the generation is graph-transformation based. this means, the vl specification so far consists of an alphabet(a type graph plus layout attributes) and a syntax grammar. in addition to the purely language generating syntax grammar a complete vl editing grammar could be defined. the editing grammar contains additional rules to define necessary and convenient editing operations. these additional rules concern e.g. the deletion of symbols or the change of attribute values. moreover, editing rules can be defined by the editor designer to specify complex editor operations concerning more than one symbol whereas in the generated editor at the first development step only insertion/ deletion of basic symbols were allowed. for example, a complex editing rule for statecharts can specify the deletion of a complete hierarchy level in a statechart in one step. note that the extension of the vl syntax grammar to the vl editing grammar must not lead to an extension of the defined visual language.



a sample editor for petri nets is presented, together with the corresponding petri net alphabet the editor is generated from. since the development of tiger is at a very first stage, it is beyond the scope of this paper to compare it with none graph transformation-based generators for visual modeling environments(such as metacase, and gme, etc.).



