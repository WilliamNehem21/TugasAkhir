often debates about pros and cons of various techniques for formalising lambda-calculi rely on subjective arguments, such as de bruijn indices are hard to read for humans or nominal approaches come close to the style of reasoning employed in informal proofs. in this paper we will compare four formalisations based on de bruijn indices and on names from the nominal logic work, thus providing some hard facts about the pros and cons of these two formalisation techniques. we conclude that the relative merits of the different approaches, as usual, depend on what task one has at hand and which goals one pursues with a formalisation.



when engineering a formal proof in a theorem prover, blindly applying automatic proof tools often leads to a dead end. usually more successful is the strategy to start with a rough sketch containing a proof idea, and then to try to translate this idea into actual proof steps in the theorem prover. this style of formalising proofs is very much encouraged by the isar-language of isabelle. in case of the substitution lemma in the lambda-calculus



the main point of de bruijn indices and names from the nominal logic work is to allow for more clever methods of representing binders and to substantially reduce the amount of effort needed to formalise proofs. in section 2 we illustrate this in the context of the substitution lemma. section 3 contains a brief sketch of the formalisations for the narrowing and transitivity proof of subtyping from the poplmark-challenge. section 4 draws some conclusions.



like the informal proof by barendregt, the formalised proof proceeds by induction on the structure of m. unlike the informal proof, however, the induction hypothesis needs to be strengthened to quantify over all indices i and j. this strengthening is necessary in the de bruijn version in order to get the lam-case through. with this strengthening the lam and app case are completely routine.



we have studied formalisations based on de bruijn indices and on names from the nominal logic work. the former approach is already well-tested featuring in many formalisations, while the latter is still under heavy development in the nominal datatype package. extrapolating an amazing amount from the submissions to the poplmark-challenge, it seems that all problems occurring in programming metatheory can, in principle, be solved by theorem proving experts using de bruijn indices. further, the reasoning infrastructure needed for de bruijn indices(mainly arithmetic over natural numbers) has been part of theorem provers, for example coq and isabelle/hol, for a long time. in contrast, the nominal datatype package has been implemented in isabelle/hol, only. except some preliminary work reported in, there is little work about replicating our results in non-hol-based theorem provers.



another advantage of de bruijn indices is that they do not introduce any classical reasoning into the formalisation process. in contrast, the nominal datatype package employs in several places classical reasoning principles. it is currently unknown whether a constructive variant of the nominal datatype package that offers the same convenience is attainable. connected with the aspect of constructivity is the infrastructure to extract programs from proofs, which exists in isabelle for the proofs with de bruijn indices, but does not exist at all for proofs using the nominal datatype package.



