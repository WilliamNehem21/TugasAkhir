inductive types can be introduced as usual, i.e. by enumeration of their constructors, but they can be parameterised in objects of other types. because of the latter it is said that type theory features families of types(indexed by a base type) or dependent types.



because of the preceding feature, type theory can be interpreted as a constructive logic. specifically, this is achieved by representing propositions as inductive types whose constructors are the introduction rules, i.e. methods of direct proof, of the propositions in question.



the following is called the freshness relation. it holds when a variable does not occur free in a term. we import the terminology and notation from the works on nominal abstract syntax, see e.g.. parameters to a function written between curly brackets can be omitted when invoking the function.



the notion of free variable, which we write _*_, is as usual. freshness and freedom are of course the negation of each other. we work by defining two positive notions instead of using negation. or we can say: in programming terms, we proceed just naturally by introducing the two types. the programming way is to our mind the natural practice to carry out in a constructive mathematics setting.



