4 this work has been developed in the context of a research cooperation between motorola inc. and cinufpe. we thank the entire group for all the support, criticisms and suggestions throughout the development of this research. we also thank joabe jesus for developing the tool support.



csp[15,7], for instance, is a very attractive formalism to describe concurrent and dynamic aspects of computer systems. one of the fundamental features of csp is that it can serve as a notation for describing concurrent and communicating processes at different levels of abstraction. furthermore, it is possible to prove refinements and classical properties, such as deadlock and determinism, as well as domain specific properties of csp specifications using the fdr refinement checker. however, csp lacks intuitive graphical visualization; therefore it can be difficult to understand and to be used by non-specialists. hence it can be costly and error-prone to informally associate the dynamic behaviour of csp constructions with structural elements of the design phase such as components and independent processes.



on the other hand, graphical modeling notations are tremendously used to structure and visualize systems, but usually do not embody a consolidated formal foundation to allow reasoning about classic and domain specific properties. even semi-formal graphical notations such as uml and room do not offer a reasoning framework to prove refinements and classic and domain specific properties. some initiatives have been proposed to give formal semantics to uml and to some of its profiles[4,12], through translations of diagrams and elements of uml into specifications in formal notations, such as csp, z and circus. however, these initiatives address only a small subset of uml.



sound transformation laws for uml-rt. the design becomes incrementally more concrete, with the advantage of having a formal basis in its origin. however, not everything should be translated into graphical notation. certain parts fit better as textual form, such as constraints representing invariants and pre or post conditions, for instance.



the next two sections give a brief overview of csp and uml-rt. a set of transformation rules are presented in section 4, where we also briefly discuss tool support and present an example to illustrate the translation strategy. finally, section 5 draws conclusions and discusses related and future works.



can be used to model the real action of turning on the button of a radio. besides events, csp provides channels that are used as a collection of events. the main difference between events and channels in csp resides in their declarations. the declaration



the hiding operator takes a set of events and a process as arguments, and makes the events invisible in the process. these events continue happening inside the process, but other processes and the environment cannot see them. the renaming operator is useful to change the name of events(or to create copies of a process with different alphabets). in what follows, the process p executes the event a continuously. the process q, although defined in terms of the process p, renames all occurrences of a with c.



uml-rt[18,8] is a conservative extension of uml. it contains specific conceptual elements of room(real-time object-oriented modeling language) that make it possible to model architectures and dynamic relationships of real-time event-driven systems. a capsule, for instance, is a stereotype of uml active class adjusted to the room actor concept. capsules, like processes, are behavioural description units, with specialized semantics to represent components or independent processes, and can have multiple interfaces, named ports. capsules communicate among themselves exclusively through messages, which should flow between connected ports of capsules. ports have output signals for sending messages, and input signals for receiving messages. in order for two ports to be connected, the ports must be compatible; that is, every output signal in a port must be an input signal in the other port. an event represents the reception of a message by a capsule.



ports realize protocols, which define the input and output signals. protocols can play two or more roles, in accordance with the room standard. however, the uml-rt specification commonly uses binary protocols, involving just two roles. only one role, named base role, needs to be specified. the other one, conjugate role, can be derived from the base role simply by inverting the incoming and outgoing signal sets. in this way, ports are run-time entities that provide full two-way interfaces to capsules. furthermore, a protocol fixes the data types and the order of messages flowing between connected ports. this order is useful to show the potential interactions of a capsule instance with the external environment. in a sense, a protocol captures the contractual obligations that exist between capsules.



uml-rt offers state machine diagrams to model the internal behaviour of a capsule when messages arrive on its end ports. a state machine is a directed graph of states that are connected by transitions. except for the initial transition, which is automatic, the other transitions in a state machine are triggered by the arrival of messages on a capsule port. there is no final state in capsule state machines, because capsules are active classes that never terminate.



the communication between capsules can be either synchronous or asynchronous. asynchronous operation calls are stored in an event-queue of the receiver, and the sender remains free to execute its next actions. the receiver always checks the first element in its event-queue. if it is ready to execute a trigger involving this first call, it should perform the associated transition and continue its execution; otherwise, it discards this call. on the other hand, synchronous operation calls involve a rendezvous between the sender and the receiver: when the sender executes the operation call, it is suspended until the receiver synchronizes with it(that means executing a corresponding trigger). if the synchronization proceeds, a return value is sent back to the sender, after which both the sender and the receiver resume their own executions. otherwise, an internal system controller sets free the sender, but the message will be lost. the uses of synchronous and asynchronous messages are



this section presents a systematic strategy for translating csp specifications into uml-rt models. we propose compositional rules that take certain csp patterns as input and output corresponding uml-rt elements. the exhaustive application of these rules translates a specification into a compound uml-rt model.



the mapping of data type declarations is not included here because we assume that these are mapped into simple uml classes. we consider that each data type represents a class of messages used by the system. compound data types must also be translated as a unique class, which accepts any possible value of each type involved in the composition.



actually, the translation of csp processes involves capsules and protocols, because the communication events occurring among capsules should be transmitted through ports, which realize protocols. the protocol signals should carry objects that correspond to values of csp events. a possible mapping would be to create a protocol for each channel defined in the specification, or for each data type, in which case the occurrence of a channel in a process implies in the creation of a port that realizes the protocol of the channel data type. instead, for simplicity, we use a unique protocol to transmit all messages between capsules, as long as its signals accept any type of object. this decision is merely structural, and does not affect the communication between capsules because csp events can be represented by synchronous messages in uml-rt, and the communication mode of these messages is not influenced by the representation of protocols. in this way, our rules consider only the construction of capsules, since the protocol is fixed. here, this protocol is named cspmessageprotocol.



recall that, in uml-rt, capsules can have base and conjugate ports, for sending and receiving messages concerning the signals orientation. however, the capsules generated by this translation strategy have been simplified so that they contain only conjugate ports to represent the channels on processes, except in especial cases described later. this decision was taken in order to simplify the uml-rt model, but it does not change the semantics of the model, since it is possible to duplicate signals or represent the csp specification without event orientation. in our translation strategy, the external environment, which is implicit in csp specifications, is made explicit in the generated uml-rt models. furthermore, only the external environment, which is connected to capsules through base ports, can send messages to capsules, using output signals defined with a base role.



tions that refer other capsules. this special port uses the protocol cspbehaviorprotocol, whose signal term carries the expression that represents the new intended behaviour of the csp process being translated. we name this special port of behavioural port. each capsule has a unique behavioural port. in the implementation



and is always updated when some internal capsule informs a new process term. all actions of systemcontroller, such as forwarding an incoming message to a capsule role, creating or removing capsule roles, must consider this variable. although the capsule systemcontroller centralizes the control flow, its construction is also compositional. in each rule below we show how its structure and state machine are progressively constructed to handle the overall control flow.



now, we show a progressive simulation of the capsule systemcontroller with the follow example. consider the capsules roles in structure diagrams representing the active capsules in that moment(the inactive capsule roles are omitted). furthermore, we show only transitions executing during that moment in the state machine diagrams. consider sc the current state of the capsule.



we have proposed rules to map csp processes into uml-rt capsules. this translation benefits from similarities between processes and capsules; both have behavioural views and can be defined in a compositional way. on the other hand, while csp has a rich set of operators to combine processes, uml-rt has no operator to build capsules from existing ones. so we had to encode the semantics of each csp operator during the translation. although formal proofs are suggested as future work, the rules are intended to preserve the semantics of the source model.



eling and system analysis. other initiatives[4,12] propose the inverse process: give a formal semantics to uml through translations into specifications in formal notations. however, these initiatives address only a small subset of uml. as alternative approaches, there are programming languages offering support by implementing concurrent systems specified in csp, such as ctj and jcsp. but the size of real concurrent systems can make their implementation problematic and with communication patterns usually very complex. moreover, the visualization of the system structure is usually as difficult as the csp specification. our approach has the advantage of the diagrammatic representation in addition to the code generation, as discussed previously.



furthermore, these rules can be adapted to uml 2, with possible improvements on diagrams. despite of the fact that uml 2 uses several concepts from uml-rt, its elements and diagrams are still ambiguous and unclear[14,2], hence we have chosen to work with uml-rt. actually, all relevant concepts to represent csp specifications in this strategy relates to uml-rt, which has more consolidated tool support, and whose capsule and protocol concepts are clearer and more intuitive than that of uml 2.



selic, b., an efficient object-oriented variation of the statecharts formalism for distributed realtime systems, in d. agnew, l. claesen, and r. camposano, editors, computer hardware description languages and their applications, pages 321-330, ottawa, canada. elsevier science publishers b.v., amsterdam, netherland.



