mobility seems to be a fundamental aspect for global computing, however it gives rise to a lot of relevant security problems. we address the problem of protecting hosts from attacks or misbehavior of mobile processes. we propose to move process abstractions, i.e. process parameterized with respect to the operations having a local meaning, instead of processes ready-to-run or active processes(agents). moreover, we exploit global values and types to ensure that operations having a local meaning are used only locally. our approach is general and could be applied to every language/system for programming and coordinating network services that permits remote communications with transmission of code fragments. we illustrate our approach by using the klaim language, where the network services are codi ed by means of tuples inside network service repositories, as, e.g., in sun javaspace and ibm tspace.



in global computing, process mobility seems to be a fundamental aspect, however it gives rise to a lot of relevant security problems. for instance, mobile processes threaten host machines with theft or misuse of system resources(e.g. information, money, cpu time, disk space, bandwidth). this may degrade the performance of hosts or compromise their security and reputation. reciprocally, host machines threaten mobile processes with theft of resources(e.g. information) and reputation(e.g. the host may implant its own tasks into the



in this paper, we address the problem of protecting hosts from attacks or misbehavior of mobile processes. to overcome this problem, di erent solutions have been proposed in the literature that are based on, e.g., type systems[4,13,20,8,9], information ow analysis[12,3,14] and proof carrying code. to have a ne-grain control over the behavior of mobile processes and to directly program and manage security policies, we propose to move process abstractions, i.e. process code which abstracts from local operations, instead of processes ready-to-run or active processes. to complete a migration, a communication between the source and the target hosts must rst take place. then, the target host can instantiate the received process abstraction, by de ning all potentially dangerous operations, and can wrap the resulting process within a customized environment that takes care of process execution. in other words, depending on the trustness of the code received, the local operations over which the code is abstracted may be instantiated with implementations of local operations at the right security level thus avoiding undesired accesses to local resources.



the klaim programming paradigm identi es processes as the primary units of computation, and nets, i.e. collections of nodes, as the coordinators of process activities. each node has an address, called locality, and consists of a process component and a tuple space component. processes are distributed over nodes and asynchronously communicate via tuple spaces. klaim processes may perform three di erent kinds of basic operations: accessing(possibly remote) tuple spaces, sending(possibly remotely) processes for execution and creating new nodes. in particular, mobility can be performed in two different ways. the(asynchronous) migration primitive eval allows a process to autonomously move to another node that has no control over the incoming mobile process. in addition, processes can be exchanged in communications by using the primitives out and in/read. this fosters synchronous mobil-



in this paper, we introduce hotklaim(for higher-order typed klaim), a variant of klaim that does not provide the eval primitive while provides a kind of data which can embody a process, namely process abstraction. process abstraction is useful for parameterization with respect to local operations. to express process abstractions in hotklaim the full power of system f is needed, while 2-types, similar to those in 2, are used to classify global values that can freely move over the network.



in hotklaim there are two kinds of types(and terms), globaland localtypes(terms), classi ed by g and l respectively. contexts declare the kind of typeand term-variables. l is the global-type of localities, and p is the localtype of processes. a global-type does not contain p nor free type variables declared local. a global-term, in addition, does not contain local operations o, nor free term variables declared local.



code is the type of process code abstracted over the local type p and the local operations in o. its de nition mimics that given in[17,18] for monadic code. when a global value of type code has been read, it can be turned into a process by applying it to the local type p and the tuple(ojo 2 o) of local operations.



lemma 4.1(basic properties) a value v 2 v cannot be of the form e[r]. for any e 2 e there is at most one e 2 ec and one r 2 r s.t. e e[r], moreover fv(r) fv(e).



gatherer is the mobile code for searching. its parameters are: the locality res where the result of the search must be placed, the search key item, and an authorization key k used to check the permission to perform local operations. since gatherer is mobile code of type mc), it is abstracted with respect to customized versions(which take a key as parameter) of the communication operations. gatherer looks for one of two alternative tuples. the rst one contains the wanted information associated to item(e.g. the price); if it is found, then the result of the search is added to the tuple space at res and the process terminates. the second tuple contains the address l of the node where the search has to be repeated; if it is found, then a tuple containing the process abstraction gatherer(res, item, k) is added to the tuple space at l for searching there.



execute is the process that acts as the guardian of nodes. it is parameterized with respect to its locality self, an authorization function safe that, on the basis of an authorization key, checks if code can be considered reliable(and thus may not be constrained), and an authorization function allow, on the basis of an authorization key and of a location, check if code can be allowed to perform a communication operation at that location. execute takes care of taking a process abstraction(i.e. a tuple with just one eld of type mc) from the local tuple space, specializing and instantiating the abstraction and then executing the resulting process. in' and out' are the customized versions of the communication operations with which mobile code is specialized; they make use of the two authorization functions safe and allow.



in[23,24] a process language, named d, is considered that results from the integration of the call-by-value-calculus and the-calculus, together with primitives for process distribution and remote process creation. di erently from hotklaim, communication is channel based and processes cannot explicitly refer localities(indeed, these are anonymous). d permits the transmission of process abstractions parameterized with respect to resource(i.e. channel) names.



more speci cally, in, a type system for d is de ned that ensures that at any one time all the processes that intend to perform inputs at a given channel are co-located. to this aim, a value is deemed sendable whenever its exportation does not violate locality of channels. although the type system has a di erent avor from that of hotklaim, sendable values and types play a role similar to our global values and types.



in, a ne-grain type system for d is de ned that permits controlling the e ect of transmitted process abstractions on local resources(i.e. channels). di erently from hotklaim, processes are assigned ne-grain types that, like interfaces, record the resources to which processes have access together with the corresponding capabilities, and process abstractions are assigned dependent functional types that abstract from channel names and types. although process abstractions have not polymorphic types as in hotklaim, channel names may appear and be bound both in terms and in types and thus, in some sense, play the role of type variables.



