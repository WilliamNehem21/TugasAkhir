we study explicit techniques for detection of safety errors, e.g., depth-first search, directed search, random walk, and bitstate hashing. we argue that it is not important to find the best technique, but to find a set of complementary techniques. to this end, we choose nine diverse error detection techniques and perform experiments over a large set of models. we compare speed of techniques, lengths of reported counterexamples, and also achieved model coverage. the results show that the studied set of techniques is indeed complementary in several ways.



our goal in this work is to find a set of complementary techniques for error detection of safety properties(plain reachability analysis). to this end, we study techniques which lie on the spectrum between explicit model checking(systematic traversal of a state space) and testing(exploration of sample paths through a state space), e.g., breadth-first search, randomized depth-first search, bitstate hashing, directed search, random walk, and under-approximations based on partial order reduction. our specific contributions are the following:



we choose nine diverse techniques, implement them in a single setting, and experimentally evaluate them over a large benchmark set. this is the first study that compares a large number of different techniques. previous studies compared only two techniques or several variants of the same technique.



we study the ability to detect specified errors, the length of counterexamples and also the model coverage(as measured by coverage metrics). we focus on complementarity with respect to these different aims. previous studies focused only on one of the described aspects.



one line of related work deals with study of a single error detection technique, e.g., bitstate hashing, directed search(also called guided search)[14,7], state-less search, or random walk. these works only compare a proposed technique to a standard search technique(bfs, dfs).



interesting line of recent research has focused on randomized techniques[6,5,24,23]. these papers show an interesting point: sometimes the effect of randomization can overshadow the effect of sophisticated optimization techniques. these works, however, usually compare only two techniques(e.g., random walk versus random dfs, directed search versus randomized directed search).



section 2 presents general building blocks of error detection techniques and describes the specific techniques that we compare. section 3 describes the experimental methodology that we use(implementation details, used models, performance measures). section 4 presents main results of our experiments. main points are summarised in section 5 and future directions are outlined in section 6.



error detection techniques are based on several basic building blocks. although these building blocks are not completely independent, there is a large degree of orthogonality and thus these building blocks can be combined in many ways. in this section we give an overview of building blocks and specify which specific techniques we use for the experimental evaluation. we also describe an artificial example which illustrates complementarity of techniques.



erw enhanced random walk. combination of random walk with local exhaustive bfs. the technique is parametrized by the probability that the local bfs is started(0.004), the number of states explored by the bfs(5000 states), and the number of random walk steps before reinitialization(500 states).



dirs directed search with structural heuristic. the overall score for state is defined as a sum of ranks for transitions, which lead to that state. rank for a transition is defined as a sum of count of read variables in its guard and count of modified variables in its effect, plus one in a case of a communication. the heuristic is inspired by.



dirg search directed by heuristic function given by the goal. we try to estimate remaining length to reach some goal state. the heuristic function hg(s) for state s and goal g is obtained by direct transformation of the goal(we use the same transformation as[7,14]).



the webpage contains implementation source codes, list of all models and their source codes, verified properties, and all results. for the implementation we use the distributed verification environment(divine), which is also publicly available. we have tried to make the comparison fair by paying special attention to implement all techniques in similar and comparable way.



in this section we report the results of experiments. the results show complementarity of techniques in two aspects. at first, each technique works well on different models. at second, the performance differs with respect to the number of visited states, the length of reported counterexample, and the model coverage. we also discuss the impact of selection of models on results.



dirg and upor(both are based on bfs), produce short counterexamples most of the time. other techniques are significantly worse. note that dirg is the only one which produces short counterexamples and at the same time it is often successful, i.e., there is a certain trade-off between the performance of a technique and a length of computed counterexamples.



again, we see that there is no dominant technique, each technique works in some cases and fails in others. the successfulness of techniques differs for the two coverage metrics and it is different from successfulness for error detection. for example, the upor and rw techniques, which do not work very well for error detection, are quite good for achieving coverage. only bith technique has consistently good results.



there is no single best technique. never mind, it does not matter. some techniques work well for error detection(directed search, randomized dfs), other techniques can achieve good coverage(bitstate hashing with refinement, random walk, upor) or produce short counterexamples(bfs). however, given the accessibility of hardware for parallel computation(multi-core processors, networks of workstations, clusters), we can run many techniques in parallel(independently, with no communication overhead) and thus combine strength of different techniques.



it is important to focus also on complementarity of techniques, not just on their perfectness. tuning of parameters of a single technique, in order to make it as fast as possible, is not a good way forward. our experiences suggest that tuning of parameters can improve the performance slightly, but it does not change whether the technique works well on a model. a good example of advantageous complementarity are the techniques bith and dirg, both of these techniques work quite well and they complement each other(their performance is inversely correlated).



verification problems also differ in the number of techniques which work well over them. for some problems it is not very significant which technique do we use, all techniques need similar time to find the error. for some verification problems, however, one technique can defeat other techniques utterly.



in this work we advocate the use of parallel independent runs of several techniques. the independence of individual runs means that there is no communication overhead. however, it may be advantageous to collect and share some information among different techniques, see[21,8] for general proposals of such a setting. it may be interesting to implement a globally controlled parallel run using the techniques discussed in this paper.



