this work proposes a methodology for the rigorous development of java card smart card applications, using the b method. its main feature is to abstract the particularities of java card and smart card aware applications from the specifier as much as possible. in the proposed approach, the specification of the aplication logic needs not be preoccupied with the specific aspects of the java card platform(in particular, communication between the card acceptance device and the smart card itself). platform-specific code can then be automatically generated during the refinement and code generation process. an interesting sideeffect of this approach is that the specification may be reused with any other platform of implementation.



in this paper, we propose a specialization of the b methodology that aims at improving the productivity in the development of java card software. previous work showed the possibility to automatically generate java card code from b modules. however, this work is limited to the translation of the language aspects and ignores some important aspects of the java card platform, such as the communication between the host application and the applet running on the smart card, leaving its specification and implementation as an additional burden to the designer. the goal of the research presented in this paper is to provide b design guidelines specific for the java card framework which make it possible to automate part of the specification and implementation needed to build the communication protocol between the card applet and the host application.



the paper is organized as follows. the fundaments are presented in section 2(overviewing smart cards and java card) and 3(introducing the b method). the core contribution of the paper is in section 4, where the application of the b methodology to design java card components is presented. section 5 concludes the paper with related work and some final remarks.



a smart card is a plastic card that looks like a common magnetic-stripe card, but that has embedded in it an integrated circuit with a microprocessor and memory. this kind of card offers several advantages compared with magnetic-stripe cards. the most important advantage is the security in data processing and storage provided by the smart card environment composed by operating system, microprocessor and applications. in application level, personal identification numbers(pin) and cryptographic algorithms can be used to improve the security. other advantages are storage capacity, millions of times greater than the capacity of magnetic-stripe cards; and the remote database query independence, once every data the card needs is found in its memories or is supplied by an external application.



many applications can benefit from the use of smart cards. telecommunication, financial and transportation industries and the health care sector are good examples. the secure transaction mechanisms and the elements for secure user identification and data storage, besides the mobility of the cards, make them an ideal platform for these applications.



the use of this technology brings many improvements for the developer of smart card applications. the ease of programming in java, that abstracts the low level details of the smart card system; and java development tools(like ides, simulators and emulators) allow a rapid application build, test and installation, reducing the time and the cost of software production. moreover, other benefits are the possibility of multiple applications to coexist in a same card and the ample compatibility with smart card international standards, like iso 7816.



card acceptance device(cad) a cad is the device localized between the host application and the smart card. it supplies power to the card and is the means of communication between the host application and the application inside the card. a cad can be connected to a desktop or a terminal, such as an electronic payment terminal.



the communication between these environment items is performed through a half-duplexed protocol called application protocol data unit(apdu). an apdu message has the form of a data package exchanged between the host application and the application in the card in a master-slave architecture. the host application sends commands to the card application, that, in turn, sends back a response. the command and the response apdu are the two protocol structures used to



a java card applet is a class written in the java card subset of the java language that inherits the javacard.framework.applet class. this class is a blueprint that defines some variables and methods of an applet. it makes, for instance, the implementation of the install and process methods obligatory. the install method creates the applet by invoking its constructor method and registers it in the java card runtime environment(jcre), by invoking the register method. the process method receives the apdu messages of the host application, does the initial processing of these messages, and invokes a method, passing to it the apdu object as a parameter.



respect to the corresponding machine. the implementations are then checked for compliance with the code generator for a particular language and, if it is the case, programming code may be generated. assuming the correctness of the code generator, the generated code can be guaranteed to satisfy the stated properties of the abstract specification(the machines).



although we concentrate our introduction to the b notation on the more abstract specification(i.e. machine), similar comments apply to the remaining levels. a b module contains two main parts: a state space definition and the available operations. it may additionally contain auxiliary clauses in many forms(parameters, constants, assertions), but those, essentially for practical purposes(i.e. to promote modularity, reuse, etc.), and do not extend the expressive power of the notation. in the remainder, we will restrict our discussion to the core clauses of the module specification.



the specification of the state components appears in the variables and invariant clauses. the former enumerates the state components, and the latter defines restrictions on the possible values they can take. essentially, if v denotes the state variables of a machine, the invariant is a predicate on v. let us denote inv such invariant predicate. all verifications carried out throughout the development process have the intention of checking that no invalid state will ever be reached as long as the operations of the machine are used as specified.



this example was extracted and simplified from the transport machine, the main machine of our sample transport application(section 4.2.5). in this piece of code, we can see the machine name definition in the machine clause. the state variable, named balance, is typed in the invariant clause and initialized in the initialisation clause. an operation, named addcredit, is used to add some positive natural value to the balance variable.



smart cards store software components that are used by client applications, also called host applications, that communicate with the card via card acceptance device. due to obvious restrictions, the code embedded in smart cards has a simple structure. in particular, java card imposes stringent restrictions on the java language, e.g. excluding complex data types and multi-threading. this is one of the scenarios for which the b notation is well adapted.



the b integer variables must be restricted to the range of some java card integer type, that are: byte, short. the int type is not supported in all java card implementations, for this reason it should not be used in a b specification. we provide the specifier with(b specification and implementation of) java card compliant data types.



java card programming style includes internally validating all parameter data for each operation, and exception raising each time a non-conformance is detected. thus, the specification developer may need to include these exceptions. for that, he must define the api exceptions machine and include it in the refinement. the api exceptions machine must contain all the exception names in a enumerated set(called exceptions by convention). at the api exceptions implementation level, these constants will be implemented by natural values and, when translated into a java card class, a constant declaration will be generated for each exception element of the exceptions set.



we provide a template for the api exceptions machine, containing a variable to represent the last raised exception, an operation to raise an exception(setexception, used in api ff.ref) and the set exceptions. it is the responsibility of the designer to define this set in this machine, or in the refinement api ff.ref(in this case the machine api exceptions needs not be modified).



a translation step has then to be performed to convert the interfaces of operations to the java card style. this translation step takes as input api ff.ref and generates a new b machine that we call api jc.mch. note that here we do not strictly follow the b development process as the result of the translation is a new b abstract machine. this machine is then refined and implemented, following the rules of b, into the b implementation corresponding to the code that is to be embedded in the card. this new machine is also imported by the implementation of the api on the host side to implement the variables of api.mch, as shown in section



the api process.mch defines a unique operation, named process, corresponding to the process method that every java card applet needs to implement, as explained in section 2.2. this operation processes the apdu command in order to select which operation is to be executed. it uses data from the second machine, api conversions.mch, in order to improve readability, staying at a higher level.



the api conversions.mch machine specifies all encoding information of the application logic into bytes, the low level data that is communicated and manipulated in the java card platform. its minimal contents are shown below, in the case where the only converted data is the operation names. further encoding may be needed, e.g., for enumerated types, such as a type that defines a category of users. in this case, additional sets and translation functions have to be included and can be automatically generated using classic compilation techniques.



as stated above, from the original abstract specification api.mch a b implementation api host imp.imp is derived which translates the actions specified in each operation of api.mch into data that is used by the java card runtime environment(jcre) to create apdu commands.



