the use of a boolean logic does however not readily adapt to several examples of effects, for example the combination of probability and nondeterminism. the literature on compositional program verification shows the usefulness of quantitative(e.g. real-number valued) program logics for verifying programs with probabilistic behaviour, possibly in combination with nondeterminism[14,21]. the paper the examples illustrating the quantitative approach. some examples such as the combination of nondeterminism with probabilistic choice, or with global store, do not fit into the boolean-valued framework of, but do work here 3. but there are also examples, such as probability, global store, and cost, whose treatment is more natural in our quantitative setting, even though they also fit in the framework of.



we use a simply-typed call-by-push-value functional language as in[16,17], together with general recursion and a ground type for natural numbers, making it a call-bypush-value variant of pcf. to this, we add algebraic-effect-triggering operators in the sense of plotkin and power. we first focus on the effect-free part of the language, as we want to consider effects independently of the underlying language.



we define a quantitative logic expressing behavioural properties of terms. each type has a set of formulas, which can be satisfied by terms of that type to varying degrees of satisfaction. these degrees of satisfaction are given by truth values from a countably complete lattice.



fundamental to the design of the logic is how we interpret algebraic effects. in cbpv, effects are observed in producer types fa. in order to formulate observable properties of fa-terms in our logic, we include a set of quantitative modalities which lift formulas on a to formulas on fa. we bundle our a selection of quantitative modalities together in a set q.



we add both for neutral nondeterminism. we can see the nondeterministic choice as being controlled by an external agent, which chooses a strategy for resolving the nondeterministic choices, like in a markov decision process. e.g., e0 and e2 respectively maximize and minimize the expected score(see for more descriptions of nondeterminism with probability). similarly, c0 and c2 respectively minimize and maximize cost.



in this paper, we consider program properties(or observations) as the primary way of describing program behaviour. according to this philosophy, the generalisation to quantitative properties is natural. alternatively, one could consider relations(or comparisons) as primary, and instead generalise to quantitative relations. the resulting theory is that of metrics, along the lines of[2,4,20]. relating the logic from this paper, or a variation thereof, to metrics(e.g. like the ones in) is a topic for future research.



