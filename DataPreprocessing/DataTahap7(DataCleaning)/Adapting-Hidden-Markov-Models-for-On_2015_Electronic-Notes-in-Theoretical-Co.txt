the capability for training models on multiple traces is growing in importance with the analysis of online interactions on social media and across shared systems and resources. for example, variations of hmms have identified trends in group behaviour in twitter data by adapting k-means clustering and the baum-welch algorithm to train on multiple users simultaneously. this multi-input hmm(multihmm) was an improvement(as we scaled up) on the computationally-expensive coupled hmm, which used a markov chain to represent one user and the coupling of chains was the social interaction. despite the computations saved by the multihmm, an improvement through incremental training of parameters would be advantageous for online learning.



ing jobs is useful for workload benchmarking and scheduling of mmpp-distributed tasks, but is only one part of the wider goal. by modelling servers as part of queueing systems, one can understand and(ideally) predict waiting times, variable load, system bottlenecks and resource allocation of modern servers in cloud and file storage applications. in section 4.4, we incorporate an mmpp into a first-come first-served(fcfs) queue and obtain mean waiting times for varying load. fluid input models, such as mmpp, can have discretised time variants, such as the hmm, which is simpler to model and offers similar powerful traffic analysis. in fact, an advantage of hmms is the parsimonious nature which allows representation of time-varying, correlated traffic streams in workload models. in the next section, the fundamental hmm algorithms are introduced.



to understand the onlinehmm, we must first analyse the processes that compose it. the first is an adaptation of the sliding hmm(slidhmm), which is based on a simple moving average and uses a sliding window technique for data measurement. the second is a multi-input hmm(multihmm) capable of training on multiple discrete traces simultaneously. the onlinehmm attempts to merge both techniques and create a novel online learning workload benchmark.



the concept of a sliding window to update data sets on which hmm parameters are trained on-the-fly is appealing in terms of run-time performance and online workload characterization. by updating the data set with new arrivals and simultaneously discarding the oldest observations, one can measure time-variant processes parsimoniously. the sliding window effect improves the incremental learning of inchmm, which accumulates an increasingly large observation set as the outdated data points are included in iterative updates of hmm parameters.



the multi-input hmm(multihmm) comprises of a k-means clustering algorithm and a weighted bwa, which trains on multiple discrete traces simultaneously and maintains accuracy w.r.t. comparisons of trace moments. we present the doubly clustered methodology and the full multihmm algorithm.



