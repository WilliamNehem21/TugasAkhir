derstanding the proof theory of linear logic has found it necessary to invent 4 such a calculus. perhaps the earliest attempts at term logics for monoidal categories were by lambek and jay. they realized that ordinary algebraic terms with no variable copying or elimination would do the trick. more sophisticated attempts followed which linked the term calculus to the proof theory of various fragments of linear logic, see, e.g., abramsky and benton, bierman, de paiva, and hyland.



an interesting recent approach to providing a term logic was suggested by koh and ong. they realized that the tricky rewiring conditions for the units which arose in could be expressed directly and quite clearly with scope changing rules. the first author was very fortunate to have visited koh and ong in oxford in 1996 and to have had a chance to discuss this term logic with them. he was, of course, particularly impressed by the fact that they had realized that this gave a natural term logic for linearly distributive categories. it was clear that they had a good idea. however, their term logic never found any strong resonance in the linear logic community. this was not really surprising: after all, the proof net technology and its correctness criterion had been invented precisely to remove the necessity of keeping track of scopes. the reintroduction of explicit scopes seemed like a step in the wrong direction and made the utility of such a logic rather difficult to sell. to make matters worse, the syntax of their term logic was concise to the point of being cryptic: for an outsider the terms did not invite any particular insight into their meaning.



it was very useful to have a term logic to express the processes. the use of proof nets in linear logic makes it largely unnecessary to have a term logic for the multiplicative fragment. however, when one considers the multiplicatives together with the additives the value of a term logic becomes much more compelling. even the minimalistic approach presented by hughes and van glabbeek in cannot hide the fact that additive proof nets are complicated combinatoric structures which are hard to create in the way a programmer might create a program.



we wish to describe the behavior of a vending machine which allows one to select either smokers chewing gum or, for those that cannot quite kick the habit, a packet of galois cigarettes. the machine allows you to pay by inserting a one or two dollar coin. a packet of galois costs two dollars while the gum only costs one dollar. there are four possible outcomes:



input channels which are tensored can be used by a single process as they come from independent sources: to communicate down the individual channels one must split the channels. however, output channels when tensored together have to be treated completely differently: they can be dependent and so if they are used by the same process this may can cause deadlock or livelock. thus, to use such channels one must fork the current process into two independent processes. when one forks a process in this manner one must also decide which of the open communication channels will be attached to which of the subprocesses.



the main formal result of the paper is that there is a decision procedure for this term logic. however, the fact that such a procedure exists is, we feel, a fairly standard observation and not as important as establishing the term logic itself. to establish the term logic we introduce it formally in section 2. in fact, we introduce it in two different syntactic flavors: the programming syntax, as above, and a more succinct(and cryptic) representation to facilitate the technical arguments.



composition is exactly the cut rule. thus, the dynamics of composition corresponds precisely to the cut elimination process. we describe the cut elimination rewrites below. as our term calculus does not distinguish between domain and codomain channels dual proof rewrites written as terms will be identical. however, we shall be careful to indicate how the inference rules give rise to each of the rewrites.



the way in which the cut elimination procedure handles the reductions and permuting conversions when the index sets are empty can be quite subtle. in the case of ltensor or rpar, however, it is very straightforward, however the other cases are quite tricky. to clarify this, in this section we make these special cases explicit.



(2)) removes a cut and so strictly reduces the bag of cut heights. it is an easy observation that(5),(7),(9), and(11)(and their duals) each replace a cut with one of lesser height, and that(3) and(13)(and their duals) replace a cut with zero or more cuts of lesser height. thus applying any of the rewrites strictly reduces the bag.



