there are many different factors that can affect the level of trust of nodes in a network, in this paper, we tackle the issue of trust in a network whose members may or may not be part of a denial of service botnet. toward that end, we design an algorithm that would first determine whether or not nodes are participating in denial of service attacks. we then use this information to come up with a trust value that we assign to nodes. the algorithm then bans the offending nodes for a certain period of time and notifies their administrator, thus, giving them a chance to rehabilitate. if malicious behavior is repeated, the nodes are banned indefinitely.



software defined networks are an emerging category of networks that present a new set of challenges from the security perspective. the authors in provide a comprehensive overview of the security threats faced by this emerging architecture. of these challenges, this paper focuses on denial of service attacks and how information about them can be incorporated into a trust mechanism that can inform routing decisions that occur on the network.



there are many papers that address the issue of detecting denial of service attacks. some are based on entropy[4,5], while others use more advanced entropy based metrics to detect dos attacks[6,7]. it should be noted that while entropy is a good metric for detecting dos and ddos attacks, it is possible to spoof it and it is prone to false positives when the underlying behavior of the network changes[6,7].



however, to the best of our knowledge, no work has addressed the possibility of designing a hybrid system that uses both entropy and kl-divergence to detect dos attacks in sdns. also, to the best of our knowledge, there is no work that targets the need to detect a denial of service attack while another one is on-going. in this paper, we design a hybrid algorithm that merges entropy and kldivergence to address these issues.



thus, for the first proposed system, we detect a dos attack as occurring when the entropy of both the source and destination ip addresses drops below a certain level. this threshold can be statically or dynamically determined. the assumption is that before the attacks occur, the entropy of the system is large because nodes communicate with each other in a random fashion. if this underlying assumption is violated, the technique is expected to detect many false positives.



for example, assume that one of the nodes transitions from normal internet browsing to, for example, streaming an online movie. this is not an attack, but is expected to cause a rise in both the destination and source ip counts that may lead to a drop in entropy in both, triggering a suspicion of an attack. having a dynamic threshold may help resolve this, but what is really needed is a model of normal traffic in the system. any deviation from this normal model would then be considered anomalous and hence an attack.



since it is the distribution of the source and ip addresses that change during an attack, it is desirable to build a model of these two values that can be used as a reference point to check against. in addition, such a model should be dynamic in the sense that it allows itself to be updated as the usage of the network changes. toward that end, we design another method for detecting dos that takes into account past behavior of the system. this second model is described in the next subsection.



this second model assumes that the network behavior is modeled over different time intervals, and if the behavior of the network changes from one time interval to the other, an ongoing attack is suspected. this is a reasonable assumption since network traffic will typically follow a specific pattern until an attack occurs to disrupt the normal pattern. the tool used to model network behavior in any one time interval is the probability density function(pdf) of the occurrence of both the source and destination ips. thus, an interval is represented by two pdfs. it is fairly easy to program the controller in an sdn network to count the occurrences of destination and source ips and create pdfs based on these numbers.



a method for computing the distance between the pdfs of any two time intervals is then needed in order to determine whether or not the normal behavior of the network has changed. we decided to use the kullback-leibler divergence(or kldivergence for short) to measure the distance between the pdfs of two successive time intervals. kl-divergence is not strictly a distance metric, it is not symmetric and does not obey the triangle property, but, for the purpose of our system, it suffices to compute the difference between the current and past source and destination pdfs.



in this model, we assume that the attacker has full information about the traffic patterns inside a network. given this information, an attacker can spoof its attack packets so that they mimic normal network traffic. it was shown in, that if such knowledge exists, it is possible to circumvent entropy-based anomaly detection systems for dos attacks. the attacker can generate enough packets to mask the attack or to generate enough false positives to make the anomaly detection unusable.



in this section of the paper, we describe the experimental setup used to test the performance of the proposed dos detection mechanism. the topology used to test the idea is a fully connected sdn that contains a total of 20 nodes. there is only one controller in this topology.



since the proposed algorithm determines whether a node is malicious or not at the end of each round of a round-based algorithm, we decided to keep track of the number of rounds during which the node exhibits malicious behavior. our algorithm works over a window of five rounds, and measures the number of rounds within this window that the node exhibits malicious behavior. it then calculates the percentage of the five slots during which the node was identified as malicious. this percentage is compared to two thresholds th3 and th4, these thresholds are the low and high marks of suspected malicious behavior respectively. they are both percentages, and indicate the number of times that a node was suspected as malicious during a test window.



this is a very general framework, and does not depend on the metric used to measure trust. any value can be used as long as a decision about whether or not a node is being malicious during a time slot can be derived from the metric. it is this binary decision, malicious or not malicious, that is used as an input to this framework.



