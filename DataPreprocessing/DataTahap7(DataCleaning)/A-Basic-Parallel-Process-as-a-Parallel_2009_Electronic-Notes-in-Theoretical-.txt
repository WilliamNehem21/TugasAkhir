in this paper, we study the class of basic parallel processes. this class was introduced in as the class of all processes that have a finite guarded recursive specification over the small process algebraic language with 0, action prefix, choice and parallel composition without communication(just interleaving). more work about this class can be found in e.g.[8,11]. some results correspond to analogous results in formal language theory, such as the fact that every basic parallel language can be presented as a parallel pushdown automaton(a pushdown automaton not with a stack but with a bag, a multiset of variables).



we investigated the set of context-free processes(defined with 1) in. there, the addition of 1 makes an essential difference: a process can be defined that has unbounded branching, something that cannot be done without 1. furthermore, we established in under what conditions a context-free process can be presented as a pushdown automaton. in this paper, we investigate a similar result for the class of basic parallel processes. for basic parallel processes, the added expressivity is less spectacular(a corollary of our main theorem is that basic parallel processes have bounded branching, even those including 1), but still, without 1 a bag process expressed as a basic parallel process cannot be tested for being empty. in general, adding 1 makes that the theory becomes more challenging, and in our opinion also more interesting.



another difference between automata theory and process theory is that process theory allows us to make communication explicit and abstract from it modulo branching bisimulation. in a setting with explicit communication, a pushdown automaton can be seen as a regular process communicating with a stack. since every context-free process can be realized in this way, and the stack is a context-free process itself, we can look upon the stack as the prototypical context-free process. similarly, we show in this paper that every basic parallel process can be presented as a regular process communicating with a bag, a multiset of data elements. since the bag is a basic parallel process itself, it can be seen as the prototypical basic parallel process.



with the definition of the notion of transition system from process theory. a finite transition system can be thought of as a non-deterministic finite automaton. in order to have a complete analogy, the transition systems we study have a subset of states marked as final states.



these two observations are the reason to restrict to guarded recursive specifications only. it is well-known that a guarded recursive specification has a unique solution in the transition system model(see[6,5]), and we show later on that this solution is also finitely branching. this restriction leads to our following definition of the basic parallel processes, a subclass of the parallel processes given by recursive specifications over ca.



now we prove the following lemma, which is crucial for the main proof. this lemma expresses that if the finite control is at a point where it can choose a variable from the bag, it does not make the actual choice. the choice is determined by the first action that is performed by a candidate variable. it also shows that when this has happened, this particular variable has also been removed from the bag.



explicit. as a result, we can see the bag as the prototypical basic parallel process. as a corollary, we established that every basic parallel process has bounded branching. this is in contrast to the situation with context-free processes. we saw in that context-free processes can show unbounded branching. for a context-free process with unbounded branching, we cannot show it is rooted branching bisimilar to a regular process communicating with a stack. we could only show this in contrasimulation. here, for basic parallel processes, the situation is simpler, and we



finally, note that the addition of 1 allows termination exactly when a bag is empty. this check on emptiness is not possible without 1. this is different from the situation with a stack, where a check on empty is also possible in an acp-style language.



