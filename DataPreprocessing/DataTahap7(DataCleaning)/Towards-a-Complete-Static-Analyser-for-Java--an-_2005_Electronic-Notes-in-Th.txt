we present an abstract interpretation framework for a subset of java(without concurrency). the framework uses a structural abstract domain whose concretization function is parameterized on a relation between abstract and concrete locations. when structurally incomptatible objects may be referred to by the same variable at a given program point, structural information is discarded and replaced by an approximated information about the objects(our presentation concentrates on type information). plain structural information allows precise intra-procedural analysis but is quickly lost when returning from a method call. to overcome this limitation, relational structural information is introduced, which enables a precise inter-procedural analysis without resorting to inlining.



our abstract domains contain structural information and closely resemble to the standard domain(consisting of an environment and a store). abstract locations may be annotated with various kind of information, making the framework generic. structure sharing at the abstract level can be interpreted in several different ways, at the standard level, giving rise to three variants of the abstract domains 3.



this paper presents an overview 4 of the work and is composed of five main sections. section 1 provides a brief overview of the standard semantics. section 2 describes the abstract domains. section 3 sketches the abstract semantics definition. section 4 details the results of the analysis for small programs. section 5 discusses the related work.



we use several abstract domains, i.e several abstractions for the set. all those domains are structural ones: they keep a partial view of the heap structure. when a variable or field may concretely denote values with different types, an abstract type is introduced in the abstract graph. those abstract types belong toa parameter abstract domain, which may express various kinds of information(although we currently mainly focus on type information).



let us now consider the analysis of the method main.main3(). snapshot 3 depicts the abstract store just before the cast check within the statement v=(int) var.pop(). this time, the value mapped to the internal variable#0 does not permit to validate the cast, since it can represent an instance of int or an instance of coupleint. a warning can then be raised.



before the call l.getcell() within the method readlist for this entry. in this situation, the type of l is exact. thus, the dynamic call can be replaced by a static one and, further, inlined. snapshot 3 details the analysis for the entry in the method environment for this call. again, the type of this.info is exactly known and the call can be made static and inlined. so, we have derived enough type information to obtain a completely specialized method(with two nested loops).



there is a single case where the results are not totally optimal: for the call p.writecell() within the method writelist, we are only able to derive that p is either of type intlist or intl2list. this result could be improved on with minor modifications of the abstract domain. for instance, we could use an improved version of the distinctness domain that would allow or-nodes to deal with the null value.



we have presented an abstract interpretation framework for a subset of java. this framework uses structural abstract domains, which makes it possible to extend the framework with additional analyses, and it provides a precise treatment of inter-procedural analysis, through the use of relational information. we see this framework as a first step towards a completely satisfactory abstract interpretation framework for java. the needed improvements include addressing the complete java language, further parameterizing the abstract domains, and dealing with incomplete source code. the contribution of this work is thus to provide the semantic basis for a complete system since many improvements will amount to add new but similar definitions and to tune the abstract domains and the algorithms.



in the near future, we plan to work along two main lines. on the one hand, we will investigate variants of the structural abstract domains to find the most interesting tradeoffs between precision and efficiency of the analyses, in different situations(e.g., optimization versus verification). on the other hand, we will extend the framework to the complete java language(still without concurrency but with provision to analyze incomplete code).



