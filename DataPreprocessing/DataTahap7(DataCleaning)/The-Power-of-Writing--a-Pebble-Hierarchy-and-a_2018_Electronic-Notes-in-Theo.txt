in this work we study pebble automata. those automata constitute an infinite hierarchy of discrete models of computation. the hierarchy begins at the level of finite state automata(0-pebble automata) and approaches the model of one-tape turing machines. thus, it can be argued that it is a complete hierarchy that covers, in a continuous way, all the models of automata that are important in the theory of computation. we investigate the use of this hierarchy as a narrative for the teaching of automata theory. we also investigate some fundamental questions concerning the power of pebble automata.



1 the first author would like to thank colciencias for the grant confered, and which allows her to develop her ph.d studies. the second author would like to thank universidad nacional de colombia, this research was partially supported by hermes research system, project number 32083.



it is natural to ask: is the hierarchy strict? if it were the case, the evolutionary process leading us from 2dfas to turing machines could be decomposed into an infinite series of discrete and natural steps. and then, it could be concluded that we are dealing with a powerful construction that could be used in the analysis and teaching of turing machines and other discrete models of computation. on the other hand, if the hierarchy were finite, we would have something like a phase transition occurring at some k. this last possibility seems to be very unlikely.



organization of the work and contributions. this work is organized into three sections. in section 1 we introduce the model of pebble automata as well as some fundamental questions that are investigated along the paper. we prove in this section a weak form of universality for pebble automata, and we gather some easy facts that allow us to show that the pebble hierarchy is strict. we study, in section 2, the relations between this hierarchy of language classes and some other interesting classes of formal languages. we show that there exist deterministic context-free languages that are not included in the hierarchy, and we introduce the nondeterministic versions of the pebble classes. we can give satisfactory answers to some of the fundamental questions about the relation between deterministic and nondeterministic classes. in section 3 we include some concluding remarks, most of them related to the use of the pebble hierarchy as a narrative for the teaching of theory.



notice that pebble automata are quasi-writing machines. thus, it can make a big difference if we allow the workhead to visit the empty cells of the input tape. the pebble automata that cannot visit the empty cells are called standard, while the pebble automata that are allowed to use all those cells are called unrestricted.



it is important to stress that the teaching potential of the construction cannot be reduced to the above fact. it happens that some fundamental phenomena(ideas) of computer science begin to emerge at the lowest levels. it also happens that most of the fundamental questions of theoretical computer science begin to arise when one thinks seriously about the lowest levels of the pebble hierarchy.



notice that if n is a n-state 2dfa, then n can execute at most n programs: each program corresponds to choose an state as the initial state. on the other hand, automaton mn,k can run an infinite number of programs: observe that there are no restrictions, in the statement of the above theorem, related to the alphabet size of the automata that can be simulated by mn,k. this later fact clearly means that mn,k can simulate an infinite number of pebble automata. thus, we can conclude that the universality(self-reference) phenomenon begins to emerge at the lowest levels of our hierarchy. however, universality is not achieved at some of the levels of the hierarchy, it is achieved at the limit(like in set theoretical forcing).



we want to convince the reader of the enormous teaching potential of pebble automata. therefore, it becomes important to point out that some sophisticated problem-solving(programming) strategies can be implemented at the lowest levels of the pebble hierarchy. we will elaborate on this point in next subsection.



some authors(see and) propose to include all the material concerning context-free grammars and pushdown automata into the syllabus of the courses on the theory of programming languages, and restrict the theory courses to the study of finite state automata and turing machines. it is argued that finite state automata must be preserved as the starting point, given that this material gives all the right intuitions about nondeterminism and other fundamental ideas of computer science. we have that, from the point of view of this proposed solution, the pebble hierarchy is a complete narrative that is called to fill the gap between the starting point(finite state automata) and the arrival point(turing machines).



we think that the material on cfgs and pdas is so valuable that it must be(at least) approached in some way. it happens that pushdown automata can be presented as an additional branch of an evolutionary tree that begins with finite state automata, and which is driven in different ways by the addition of writing power. recall that one can use pebbles to simulate counters and pushdown stacks. let us elaborate a little bit on this fact.



the first author would like to thank colciencias for the grant confered, and which allows her to develop her ph.d studies. the second author would like to thank universidad nacional de colombia, this research was partially supported by hermes research system, project number 32083.



