this paper presents first steps towards a formalisation of the architecture analysis and design language, mainly concentrating on a representation of its data model. for this, we contrast two approaches: one set-based(using the b modelling framework) and one in a higher-order logic(using the isabelle proof assistant). we illustrate a transformation on a simplified part of the aadl metamodel concerning flows.



well static aspects like partitioning into packages and dynamic aspects related to active entities, communication between them and timing aspects. in fact, it reflects the growing industrial need to model and reason about complex software/hardware artifacts, as found in the avionics and automotive sector. indeed, the authors of this contribution are partners in the federated project topcased which comprises, among others, airbus, and aims at creating a workbench whose main modelling language is aadl.



for the time being, we can only give a very preliminary account of our formalisation of the aadl language. even though still incomplete, a small example in section 4 shows where we are heading. the paper concludes in section 5 with a discussion of related work and possible extensions.



it defines a class aobject(the very top of the aadl class hierarchy), one of its immediate subclasses, namedelement, and a connection class. class aobject can contain an arbitrary number of comment attributes(as indicated by the negative upperbound), namedelement has a name attribute, apart from the comment attribute inherited from aobject. a connection, with supertypes modemember and referenceelement, has three(non-inherited) attributes, among them two references to elements of class featurecontext(the source and destination of the connection).



altogether, we are left on our own to give a precise meaning to the constructs of ecore, based on an informal understanding of the underlying concepts. this translation, which we will explore for different target formalisms in section 3, is not limited to the definition of aadl, but can be applied to any language defined in ecore. however, aadl imposes some additional constraints that cannot be expressed in ecore but are made precise in the accompanying standard.



in this section, we illustrate how an ecore description can be encoded in set theory. we use the b syntax. the translation to other set based frameworks like tla, or isabelle-zf should be similar. in this section, we sketch the principles of data modeling. in section 4, we present a transformation example relying on such a representation.



let us review the main choices: a deep embedding does not try to directly represent elements of the language as expressions of the target language(in this case: isabelle/hol), but rather encodes them. for example, classes could be represented by the class name, the name of the superclass and lists of their attribute types. such an approach has been followed in the semantics of java described in. we would get a definition like



furthermore, note that the class structure we are dealing with is not openended, as in a traditional object-oriented program. rather, the class structure is fixed. for example, a flowspec can be either a flowsourcespec, a flowsinkspec, or a flowpathspec. this fact would again have to be coded explicitly, while we would prefer to appeal to an induction principle.



a type s c which is the sum of the subtypes of c. for non-abstract classes, we add a further component(of type unit) for an instance which is of class c an none of its subclasses. for a class without subtypes, we do not construct s c.



in this section, we sketch how a transformation can be considered in our framework. we first give a part of the aadl metamodel and then define a simple transformation that adds a filter to a flow. the example is only developed using the b language.



in this example, we consider a simplified part of the aadl metamodel which describes the concept of a flow. a flow can be declared in the specification of a component as a connexion between an input port and an output port. in the implementation, the flow can traverse sub-components. three kinds of flows exist: flow paths, flow sources and flow sinks. we consider here flow paths which can be defined using the following regular expression:



the transformation must allocate new objects. they are chosen in the set of unallocated elements of their class. objects of the same class are explicitly declared as different. for example, the following code fragment declares two new objects taken among the free instances of flowelement and connection.



finally, connections between objects must be established. for this purpose,(functional or non functional) relations are updated. for example, the flow element is initialised by the flow path of the filter sub-component and by a connection linking the input port of the component to the input port of the filter.



the full code for the transformation is given above. the preconditions of the operations assert that the given filter has exactly one input port and one output port, with one flow path between them. this flow path will be inserted into the flow path fp of the given component implementation.



this specification of the transformation allows the verification of static properties such as the preservation of wellformedness properties of the model specified by invariants. the properties considered here are those directly expressed by the metamodel. they could easily be extended at the b level: flow path must be well build so that the extremity of connections and of the subcomponent flow paths match. furthermore, implementation and specification of components must be compatible, which means that they have the same ports and that the origin and destination of flow paths are the same. these invariants ensure that the transformation preserve the flow-based semantics of the model. in order to go one step further, an abstract specification of the transformation should express that the specified flow is implemented by traversing the filter.



we have presented approaches of translating the ecore language into different formalisms(set based, higher-order logic). in particular, we are interested in a representation of the aadl meta model, which permits us to specify and prove correct transformations of aadl models. it seems that the set based approach is well suited to our concerns. however, due to the power of the frameworks usually available with higher order logics proof assistants(coq, hol, isabelle, pvs), a pragmatic approach would be to work on top of an embeddding of set theory in higher order logics. a major concern of our further studies will be the scalability of such embedding approaches.



an avenue that we have not further explored is the following: perceive the aadl class structure as the class structure of an object-oriented program, and transformations as appropriate methods of these classes. in order to show the correctness of transformations, prove that the methods are correct with respect to a particular specification. the proof could be carried out with tools geared towards java[15,18,19,12] or towards oo specification mechanisms such as object-z or variants. even though we do not have concrete evidence, we suspect that verification of an oo program is more heavy-weighted than the approach we have chosen. we believe that the abstraction mechanismes usually available in logical frameworks are better suited.



