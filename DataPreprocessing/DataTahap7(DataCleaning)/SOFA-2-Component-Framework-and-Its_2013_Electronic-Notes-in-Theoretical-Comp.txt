component-based software engineering(cbse) has become a widely used development technique for all kinds of applications. it addresses development complexity by introducing well-defined building blocks called components, which participate in all stages of application development. components as well as other core development assets(i.e., modeling and deployment tools, execution environment) are typically defined by so called component framework.



sofa2 is a component framework enabling application development by offering hierarchical components and a rich set of additional features including behavior specification and verification, dynamic architectures, uml-based design, and transparent distribution based on automatically generated software connectors. contrary to other hierarchical component systems, sofa 2 supports a complete component life-cycle, i.e., from a design stage till execution and maintenance.



connections among components are realized by software connectors. at design time, they are just links with an associated communication style and efps. at deployment time and runtime, the connectors are realized by an automatically generated infrastructure mediating communication which reflects the properties and components distribution.



the common runtime environment defines a concept of sofanode, which consists of a dedicated component repository and multiple component containers called deployment docks. these docks reside on physical deployment nodes(e.g., computers, virtual machines). a deployment dock provides necessary infrastructure for deploying, launching, and executing components. the dock can also ensure additional capabilities and services(e.g., osgi services, persistence, transaction management). furthermore, the overall runtime infrastructure includes additional technical elements such as a deployment dock registry, which supervises running docks, and a global connector manager, which controls inter-docks connections and transparent distribution.







assembly. based on the uml design, sofa ide proposes an assembly of components. in this case, the top-level composite component pingpong serves as an assembly template, which is filled by particular realization of sub-components. the complete assignment is specified by an assembly descriptor.



