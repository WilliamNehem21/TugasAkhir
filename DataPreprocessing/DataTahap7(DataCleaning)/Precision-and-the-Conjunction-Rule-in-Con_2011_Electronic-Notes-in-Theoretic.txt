we achieve this using the concept of a semantic proof that annotates program points in the code of a thread with descriptions of its local state(section 4.1). unlike the standard interpretations of hoare triples, the interpretation in terms of semantic proofs is quite intentional. the definition of a triple being valid does not abstract away all the internal syntactic structure of the command or proof, while the standard interpretations are given solely in terms of the extensional meaning of the command and preand post-condition assertions. this use of an intentional definition is an acknowledgement that the intuitive reason for the unsoundness of the conjunction rule with imprecise resource invariants is crucially about proofs, not denotations of commands. in particular, imprecise resource invariants allow the two premisses of the conjunction rule to make conflicting choices about how to partition the state. it is these different choices of state partitioning in different branches of the proof that lead to problems, but the partitioning in question is irrelevant to the operational behaviour of the command.



technically, to prove the soundness of concurrent separation logic, we define a thread-local interpretation of every thread in the program as a semantic proof. a formalisation of the separation property(lemma 4.2) connects the thread-local interpretation to a standard interleaving operational semantics(section 3). we then define the notion of validity of hoare triples for commands with respect to this interpretation and prove the soundness of all the proof rules(section 4.2). despite not tracking a partitioning of the state, the thread-local interpretation is strong enough to establish that provability of a program in concurrent separation logic implies that the program is data-race free(section 5).



the original concurrent separation logic also considers nested parallel compositions and explicit lock declarations. the restricted form of programs chosen here simplifies the formal development and makes the underlying ideas more explicit. our results have been extended to dynamically-allocated locks and dynamicallycreated threads(see), which are more general constructs than lock declarations and parallel compositions.



locks are treated in the logic as follows. when a thread acquires a lock, it receives the ownership of a part of the state satisfying the resource invariant of the lock(acquire). before releasing the lock, the thread must re-establish the corresponding resource invariant. after the lock is released, the thread relinquishes



as we explained in section 1, the core of our proof of soundness consists of establishing the separation property: at any time, the state of the program can be partitioned into that owned by each thread and each free lock. the following lemma formalises the property in the case where the local states of threads are defined by their semantic proofs. this establishes a correspondence between our thread-local interpretation and the operational semantics of section 3.



we now proceed to prove the soundness of the rules frame, disj and conj. to this end, we show that we can construct semantic proofs for the conclusions of these rules from semantic proofs for their premisses. this is essentially a semantic counterpart of a proof that these rules are admissible in the logic including the global acquire and release axioms, i.e., that a derivation using these rules can be converted into a derivation that does not use them. by using semantic proofs instead of derivations in our proof system, we avoid having to deal with the syntactic form of the proof rules in the logic and the control-flow constructs in our programming language.



our use of semantic proofs is inspired by program analyses based on abstract interpretation, which compute mappings from program points to elements of an abstract domain denoting sets of states. proofs of soundness for such analyses rely crucially on the intentional information provided by the mappings. in fact, our proof of the separation property(lemma 4.2) is almost identical to the proof soundness of a program analysis for inferring resource invariants in concurrent separation logic we have previously developed. the aim of this paper has been to argue that the approach based on semantic proofs is also useful in proving the soundness of program logics and to demonstrate the corresponding techniques in a clean setting. in this paper, we presented our results for a simplistic programming language.



however, we have also applied our approach to more expressive languages, including dynamic lock allocation and deallocation, dynamic thread creation and first-order procedures; see. additionally, we have applied it to prove the soundness of a logic for verifying preemptive os kernels, which establishes a form of refinement. from our experience, the approach provides a low-cost way of proving the soundness of complicated concurrency logics.



