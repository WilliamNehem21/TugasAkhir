the approach that we propose is general and independent of the details of the particular formalism chosen for modeling the protocols(e.g. multiset rewriting, distributed temporal logic, strand spaces, process algebras, tracebased models, and so on) and of the details of the intruder model(which could be the standard dolev-yao model or the model of an intruder with different capabilities). therefore, our results can be used to provide a formal footing for using alice&bob-notation in security protocol analysis tools even for protocols that explicitly rely on message forwarding and conditional abortion. moreover, although we do not explore this possibility here, our work provides a good basis for generating protocol implementations from alice&bob-style descriptions that explicitly carry out necessary executability and abortion tests.



information to be stored. however, when receiving n1, b should hash it and abort the protocol execution if it does not coincide with the opaque submessage previously stored. in this case, he should not even execute the last sending action of the run. this kind of problem is standard for protocols involving commitments to values by principals.



it is quite straightforward to show that if one does not allow encryption using composed messages as keys, i.e. if one considers only atomic keys, then close(s)= synth(analyz(s)). below, we will also identify another situation where this is true. in general, however, synth(analyz(s)) close(s), that is, the inclusion is proper. for instance, if s contains just the mes-



the construction of the sets di completely neglects the messages that x sends during his run. this is justified: x does not learn anything by sending a message, as reflected in definition 3.3. however, it must be the case that x can build the messages that he sends using the data currently available to him. this assumption, which is often left implicit in protocol analysis approaches, can be formalized in the present setting.



note that, by definition, atomic messages are always transparent. hence, if s is a set of atomic messages then sub(s)= s does not contain opaque elements. therefore, proposition 3.10 implies that also sub(close(s)) does not contain opaque elements. finally, proposition 3.8 guarantees that close(s) is transparent.



note that in this case only message forwarding may be necessary. the precise meaning of forwarding can also be clarified with the help of propositions 3.9, 3.10, and 3.13, as explained in the proof of proposition 3.17: if a sent message contains an opaque submessage m then m must also occur, and be opaque, in some previously received message.



