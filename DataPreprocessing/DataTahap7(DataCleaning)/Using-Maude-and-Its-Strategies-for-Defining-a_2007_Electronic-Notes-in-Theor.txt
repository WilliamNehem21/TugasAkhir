when evaluating the expression e1#e2 inside a process p, a new child process q is created together with two communication channels. the child is fed with the value of e2 via the input channel by its parent process p. process q evaluates e1 e2 and returns the result(to its parent) via the output channel. the following diagram illustrates this:



we define in maude the syntax of the kernel of eden given above. we use sorts and subsorts to represent the different syntactic categories and their relations. having different sorts allows us to concrete the patterns used in rewrite rules by using(maude) variables of the most appropriate sort. we have sorts for ordinary variables(std), for channels(cha) and for the union of both sets(var). we also use two sorts for distinguishing between expressions that are in weak head normal form(whnf) and those that are not(nonwhnf). both are eden expressions(exp).



properties. finally, the process constructor has four arguments: a string corresponding to the process identifier; a heap; and two counters: one represents the number of children of this process and the other indicates the maximum number used to build new variables(incremented when renamings are needed because of the generation of new variables). there is also a union operator(with empty syntax) for building systems.



that applies the strategy-par-> to each process in a system. this strategy is recursive and it terminates when the rest of the system(represented by the variable s:system below) is empty. the strategy=par=> receives as argument the variables corresponding to the threads returned by the function et applied to the whole system. strategy-par-> is called with the set of evolvable variables of process p, calculated by function inters.



blocked if there is some dependency on values that have to be communicated. the function nf(needed free) collects the dependencies derived from the free variables. let us consider again the expression given as example in section 3. after the application of the(let) local rule, the resulting heap is the one shown in the left-



mentation where to experiment different alternatives by selecting the appropriate definition of the functions nf and et. these functions can be defined in different ways, thus obtaining different semantics for eden. in the present implementation we have put each definition in a different maude module. by instantiating the module defining the semantics rules with a module with a concrete definition of nf and a module with a concrete definition of et, we obtain a complete specification of eden.



first of all, the term being rewritten is extended with the actual values of the measures. one possible way to do that is by means of a set of attributes together with their values. one of these attributes contains the eden system(sys), that will be rewritten by the semantics rules shown in the previous sections. here we show some examples of attributes.



then, rewrite rules have to be defined to describe the modification of these measures. for example, the following rule addpc increments by one the number of processes, and the rule addet updates the total work that has been done as well as the maximal thread parallelism. these updates are determined by the variable cardet that will be instantiated by a strategy.



finally, we need to modify the strategies in order to apply these rules together with the semantics rules. we show below two of these new modified strategies. strategy=pc=> now applies rule addpc after applying rule pc(process creation). and strategy==> updates the values of measures maxpar and work using the number of evolvable threads computed by expression size(et(s:system)).



