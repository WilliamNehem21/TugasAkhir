the different software modules(e.g., components) that constitute a system are not isolated entities. in fact, they need to interact according to a certain coordination protocol in order to achieve a common goal. this coordination protocol crosscuts the different software modules, hindering their reusability, independence, maintenance and evolution, but these drawbacks can be solved by separating coordination from computations and encapsulating coordination outside the components that perform computations. aspect-oriented programming has been demonstrated to be an interesting technology for handling certain crosscutting concerns, such as coordination. this paper explains how coordination protocols can be implemented outside computational modules using general purpose aspect-oriented programming languages.



the software modules into which a system is decomposed are not isolated, they need to interact following a certain coordination protocol in order to achieve a common goal. in traditional software decomposition techniques, like object-oriented or component-based techniques, such a coordination protocol cannot be appropriately encapsulated into a single module(e.g., object or component). thus, each software module that is part of a system has to perform two tasks related to two different issues:(1) computation, i.e., the execution of its functionality; and



aspect-oriented programming(aop) has proven in recent years to be an appropriate technique to implement crosscutting concerns, such as coordination, outside the software module they crosscut. this paper explains how general purpose aspect-oriented programming languages can be used to implement coordination outside computational modules, according to an exogenous coordination model. we will focus on component-based systems, because we have previous experience in this paradigm and it can be easily understood. furthermore, the ideas exposed throughout this paper can be easily generalised to other paradigms, such as for example agent-oriented ones.



after this introduction, this paper is structured as follows: section 2 describes the auction system example. section 3 justifies why coordination is a crosscutting concern. section 4 provides some background on aspect-oriented software development. section 5 explains how to handle coordination as an aspect. section 6 shows a specific implementation of coordination as an aspect using jasco. section 7 provides some reflections on our approach. section 8 comments on related work. finally, section 9 outlines conclusions and future work.



as already commented, software modules are not isolated entities. they communicate with each other following a pattern, called the coordination protocol, which governs their communications and interactions. the purpose of the coordination protocol is to provide a means of integrating a certain number of possibly heterogeneous modules together, by interfacing with each module in such a way that the collective set forms a single application.



additionally, the auction component offers a special service directbuy: the seller of each item specifies an amount that is an upper bound to the price of the auctioned item. customers can invoke this service during the collectbids phase if they desire to acquire the item for this amount, without making more bids. in this case, the auction will finish, and the winner of the auction will be the invoker of the service. therefore, transitions between states can happen either as result of time consumption or actions executed by the components.



customers would now be able to make several bids on the same item, thus, the guard isfirstbid(id) is removed from the proposebid transition. additionally, as the auction is now public, each time a new bid is placed, all registered buyers must be notified about such a bid. hence, a callforproposal(bid) message is broadcasted to all them, offering the possibility of making a higher bid.



each software module permits the injection of crosscutting concerns at specific points, called joinpoints of their execution flows(e.g., after they have executed a method). when aspect-orientation is applied to component-based systems, joinpoints only refer to the behaviour exposed by the component public interface, such as component creation/destruction, message incoming/outcoming, event throwing, etc.



special composition rules, named pointcuts, specify those specific joinpoints of software modules where crosscutting concerns must be injected(e.g., after the execution of all the methods called foo()). in addition, pointcuts may specify constraints that must be satisfied at runtime in order to execute an aspect on a joinpoint(e.g., that the system is in a specific state).



we would like to point out that, in any case, there is no necessity to view or modify the result of the woven application. if the application needs to be updated, the corresponding changes would be performed on the base modules, the pointcuts and/or the aspects. then, the system will be recompiled(or rewoven). so,



a pointcut is a pattern that selects several joinpoints of the application execution flow. this pattern is usually composed of:(1) an expression that represents a certain event in the application execution flow(e.g., the reception of a message); and(2) some constraints that must be satisfied in order to execute the advice associated to the pointcut(e.g., that some attributes have some specific values). the expressiveness of each aspect-oriented language regarding these constraints varies widely, so it is not possible to provide general rules about how to translate the steps(ii).c and(ii).d into a pointcut. sometimes, they could be placed in the pointcut itself and other times these constraints will have to be checked at the beginning of the advice code.



after implementing all the transitions, a filter advice is added to the coordination aspect. it filters all the messages that have not fired any transition, according to state machine semantics. this implies, for instance, that a join message sent by a customer to an auction out of the init state, will never reach the target. optionally, the coordination aspect could raise an exception in order to notify the sender about this special situation.



jasco(java aspect components) is an aspect-oriented extension to java that introduces mainly two new concepts: aspect beans and connectors 7. aspect beans encapsulate crosscutting concerns independently of specific component types. aspect beans can be considered a special kind of components, which encapsulate crosscutting concerns. they can be compiled and deployed independently of base components. connectors deploy one or more aspect beans within a particular application.



this hook is executed when a message is sent. this means that all the constructors will have hookname(method(..args) as their signature and they will have call(method), which is the jasco abstract pointcut for intercepting the sending of a message, as their body.



the guard of the transition is transferred to the isapplicable clause, which checks that the guard is satisfied at runtime. additionally, the isapplicable clause also has to check that the protocol is in the source state of the transition. otherwise, the transition could not be fired.



the isapplicable clause(lines 18-20) returns true if the system is in the collect bids state, i.e., the source state of the transition,(line 19), and the transition guard is satisfied(line 20). if both conditions do not hold at runtime, the hook body will not be executed. if they hold, the hook body(lines 22-29) will be executed around(line 22), i.e. substituting, the sending of a message. this means we can perform actions before and after such message sending, and even disregard it.



in the introduction of this paper it is claimed that aspect-orientation allows developers to achieve a better modularisation of their systems thereby making system development, maintenance and evolution easier. an in-depth verification of this claim is beyond the scope of this paper, but the interested reader can found quantitative studies about these issues in videira and bajracharya and garcia et al, where the authors study how aspect-orientation can add value to our systems improving the modularisation. on the other hand however, it may add complexity and additional problems such as new dependencies or aspect interactions.



as the complexity of the coordination pattern grows, the size of the coordination aspect bean would also increase, running the risk of becoming an unmanageable piece of code. most recent aspect-oriented languages, such as jasco or eaop 9, are able to apply aspects to aspects. this feature could be used to define coordinators of coordinators, permitting the creation of complex coordinators by composing simple coordination patterns, such as in reo or exogenous connectors.



several design patterns focus on solving coordination problems. for instance, the mediator pattern tries to decouple components reducing the number of interconnections. the wrapper and role patterns are used to extend or limit the functionality of a software module. however, design patterns have some drawbacks:



endogenous models and languages, like linda, provide coordination primitives that must be incorporated within a computation. these coordination models have focused on decoupling the senders and the receiver of a message, but entities are still responsible for using communication primitives, localising communication channels, etc. they also have to implement the coordination protocol. if this protocol changed, components would become obsolete. the coordination primitives of endogenous languages crosscut application components, with the discussed drawbacks regarding ease of maintenance, evolution and reusability. such drawbacks do not exist in aspect-oriented coordination.



using aspect-orientation, exogenous coordinators are introduced transparently to base components. additionally, the linguistic support for aspect-orientations can also be used to implement adaptors[6,12] and/or to separate other crosscutting concerns, such as persistence or scheduling, among others. however, at the current moment, aspect-orientation should not be considered the holy grail to separate easily any kind of crosscutting concern, as there are still some challenges to solve[22,21].



encapsulation of the coordination concern into an aspect makes system maintenance and evolution easier. components are also more reusable and are composed more easily. in addition, aspect-orientation allows components to be unaware of the existence of coordinator entities, avoiding the necessity of keeping references to external coordinators. aspect-orientation composition mechanisms can be noninvasive, so the coordination concern may be added to components without the necessity of modifying their internal structure.



amor, m., l. fuentes and m. pinto, coordination as an aspect in middleware infrastructures, in: proc. of the 5th int. workshop on aspects, components and patterns for infrastructute software(acp4is), 5th int. conference on aspect-oriented software development(aosd), bonn(germany), 2006.



