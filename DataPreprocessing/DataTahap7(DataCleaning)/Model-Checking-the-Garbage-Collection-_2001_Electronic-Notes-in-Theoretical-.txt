demartini, iosif and sisto describe the application of the spin model checker to java multithreading applications. they describe the process of translating java source code into promela, the input language of spin. their goal, like that of this paper, is to verify source code, using automatic abstraction techniques to get a simpli ed model. they demonstrate their technique on toy examples. havelund and pressburger take an approach similar to in the rst generation of their tool java pathfinder, but support more of the language, and note results for java programs of up to 2000 lines of code. in both and, the translation is complicated by the need to model the concurrency primitives of java, while the method used by c2edl is free of those concerns. on the other hand, the translations of[15,26] are in some ways simpler than that of c2edl, because the promela language allows them to retain much more of the structure of the original program than



visser, havelund, brat and park present the second generation of java pathfinder in. while the rst generation translates java source code into promela, the second generation is a full-blown custom-made model checker for java. in contrast, we have not developed a new model checking algorithm, but used modeling techniques to allow the application of an existing one.



nite state models from java source code. they perform user-guided abstractions based on reducing the cardinality of data sets, and provide a language for specifying additional abstractions. they translate java to an intermediate language which is then translated to one of a number model checking languages. they demonstrate their method on a toy example, a threaded pipeline consisting of 60 lines of java code. in contrast, c2edl is completely automatic, and we present results for a non-trivial application.



esparza, hansel, rossmanith and schwoon describe model checking algorithms for pushdown automata. they take, as we do, the radical approach of abstracting away all variable values. however, they are not limited to a nite stack. in contrast, c2edl produces a nite state model for rulebase. they give impressive results for randomly generated ow graphs(skeleton programs) of up to 20,000 lines.



the work described in this paper was performed using rulebase. rulebase was originally based on a version of smv. after eight years of development[4,8,3,9,7,5,6,21], the original smv code is a small part of the whole. nevertheless, the garbage collection mechanism of smv remains.



of course, an interesting c program will typically be more complicated than function getmax(). extending the translation to other kinds of branching and loop statements is straightforward. however, the translation process should also be able to deal with complex data types, pointers, and function calls, including recursive function calls. all of these could be dealt with by mimicking a compiler, or by starting the translation from assembly or machine code 2. however, such a solution would be purely theoretical, since the state explosion problem would make it impossible to model check all but the most trivial programs. in the next section, we describe the solution used by c2edl.



using a model built by c2edl, the usage of the garbage collection mechanism was checked for smv version r2.4.4, and for rulebase, which uses the same mechanism. c2edl was invoked in a mode in which bit vectors are used instead of integers(see appendix a), with the stack limited to a depth of 5.



rulebase itself was checked as well. in particular, a function called reduction(), which was being debugged at the time, was checked. the generated model consisted of 2630 lines of code(that is, the value of the program counter ranged from 0 to 2629). out of 352 formulas checked, 47 failed. of those, 39 with the use of the garbage collection mechanism. the used of c2edl allowed these problems to be found statically using rulebase, before the usual regression testing of a new version had begun. while problems with the use of the garbage collection mechanism are usually very painful to debug, the use of c2edl and rulebase allowed them to be found and xed easily. instead of an unexpected result or a mysterious segmentation violation, which is the indication of a test gone wrong, the counter-examples generated pointed precisely to the source line(as indicated by the program counter) exhibiting the problem.



release bdd() on line 12 releases the value which was saved inside of function f() on line 0. however, formula 4 will ag a second call to function f() as a violation, because it does not"see" a call to release bdd() for signal p(the call on line 12 releases signal a) between the two assignments to variable p from two separate calls to the function. these and other false negatives can be avoided by adherence to certain coding conventions.



probably do not completely express the correct use of the garbage collection mechanism of smv. the second problem is more serious. since we have limited the depth of our stack, we will not nd errors which occur for only deeper levels of nested calls. this is a fundamental problem of the model of software as we have described it. the problem of false positives means that our method cannot be used for the veri cation of software. however, false positives are not a barrier to the use of the technique in the falsi cation of software. it is in the practical light of falsi cation, then, that this work should be viewed.



my original model of the garbage collection mechanism of smv was much more complicated than that described in this paper. thank you to ilan beer, who pointed out that the mechanism and its correct use could be expressed solely as a function of the program counter. thank you to shoham bendavid, avigail orni, and yaron wolfsthal for their time reviewing and for helpful comments.



