the connection between logic and ccp processes(and constraint systems) has been studied since its inception: in a closure operator semantics is given to deterministic ccp programs that was later related to the logic of constraints in. in a calculus for proving properties of ccp programs is defined where properties are expressed in an enriched logic of the constraint system. the works in[20,5] relate operational steps of ccp and lcc with derivations in ill. we can also mention the works in[13,4] that give logical semantics to timed ccp languages and provide calculi to verify temporal properties of programs. the reader may find a survey of all these developments in.



interpret lcc processes using pure linear logic. hence, the encoding is more natural and direct, and we can use all the rich and already stablished meta-theory developed for linear logic to help in drawing conclusions about ccp systems. moreover, we study different notions of observables not considered in(see definition 4.6). particularly, we show that there are lcc computations that cannot be mimicked by the standard encoding of processes as illf formulas. then, by introducing delays in the encoding, we recover the one-to-one correspondence between illf derivations and lcc computations. we also study the behavior of non-deterministic processes with blind and guarded choices not present in.



the store in ccp grows monotonically, this means that agents are only allowed to add new information but it is not possible to delete constraints from the store. in order to have a better resource control, the linear ccp(lcc) language was proposed in, where constraints are seen as formulas in a fragment of intuitionistic linear logic(ill). more precisely, the linear constraint system is redefined as follows.



the formula on the right is the head p of a process definition. thus it has to be focused(since it will come from a focused implication formula on the left), it is positive and atomic. hence the proof must end immediately with the initial axiom ir.



the next lemma clarifies better the above cases when formulas on the right are focused. in particular, we show how is the shape of the derivations in a proof involving banged guards and goals: such formulas are derivable by other guards and non-logical axioms only. actually, we may state a stronger result: there is no proof of banged guards and goals if a process definition is chosen to be focused on.



observe that the last derivation in example 4.4 does not produce any observable store(see definition 2.3). hence a good question is whether it is possible to restrict the behavior of ask agents to avoid interleaved executions when we are interested in observing a given constraint, i.e., when the system exhibits an output. fortunately, the answer is positive as shown below.



as we know, once the guard c in ask c then p is entailed, the operational semantics dictates that p is enabled for execution(rule ra). the semantics, however, does not enforce the immediate execution of p. next definition gives an alternative semantics to ask agents in order to force the execution of p avoiding interleaved derivations as the ones in example 4.4.



evolves into ask dj then pj not producing any constraint. then either p will remain blocked and hence it will not be used for producing c, or dj will be produced by some other process r and p will reduce to pj. but in this last case, r does not depend on p, and it can be executed before. hence the nested asks can be executed at once. 2



remark 4.10 observe that theorem 4.8 gives a canonical trace to lcc successful computations via focusing. in this case, the guards of nested ask agents are evaluated at once to decide whether the process continues blocked or not. on the other hand, theorem 4.9 shows that traces of a derivation in logic have a one-to-one correspondence with traces of a computation in a lcc program.



observe that, this way, we capture well the behavior of choosing one process from the choices we have. at the same time, forcing formulas to be positive in the bc case implies that the chosen process will not block on the positive phase. on the other hand, pi being a negative formula in the case gc, assures that the choice will be triggered only if the guard is already in the context. hence, we continue having a neat logical control corresponding to the operational semantics and theorem 4.9 is also valid for indeterminate ccp.



