in recent years, attribute grammar systems have focused on dynamically scheduled evaluation, where the attributes to be evaluated and the evaluation order are determined at run-time rather than at generation time. lrc, jastadd, uu ag, and silver are prominent examples of this approach. a dynamic schedule has the advantage that attributes are evaluated at most once, but adds runtime overhead. in applications such as integrated development environments, the tradeoff is particularly worthwhile, since not all attributes are needed at all times.



nevertheless, these recent systems are based on generators that add to the learning curve and complicate the development and build processes. we show in this paper how to integrate a dynamically scheduled attribute grammar approach as a library into an existing modern, object-oriented language. we use a pure embedding where the syntax, concepts, expressiveness and libraries of the base language are used directly[12,18]. the high-level declarative nature of the attribute grammar formalism is retained and augmented with the flexibility and familiarity of the base language, both for specification and for implementation of the formalism itself.



kiama implementation is outlined in section 3. section 4 considers how language extension and separation of concerns can be achieved by leveraging the general scala platform. we evaluate the performance of kiama in section 5. the paper concludes with a discussion of our approach in the context of other attribute grammar systems in section 6 and concluding remarks in section 7.



repmin is a classic problem of tree analysis and transformation, originally employed to illustrate the use of lazy circular programs in functional programming to eliminate multiple tree traversals. repmin is often used as a simple test of attribute grammar systems. the problem is to take a binary tree with integer leaves and transform it into a tree with the same structure, but with each leaf value replaced by the minimum leaf value of the original tree.



other kinds of attributes are defined by similar classes with the same interface. for example, uncached attributes are a simple variant. circular uses a circularattribute class that provides a functional interface to the fixed-point evaluation algorithms of magnusson and hedin.



flexible static combination of attribution modules can be achieved using scala traits to define components and performing mixin composition to combine them. for example, we can decompose the variable liveness problem of section 2.2 into three components dealing with control flow, variables, and the liveness computation itself. the first two of these can be abstracted by interfaces defined by traits.



we evaluate the performance of attribute evaluation in kiama by a comparison to a handwritten scala implementation and to a generated java attribute evaluator. for the former, we specify attributes as regular methods in the ast classes, and perform caching by hand, at a cost of modularity and boilerplate code. for the latter, we compare to jastadd, which, like kiama, uses the java platform and supports reference and circular attributes. jastadd has been successfully used to implement a full-featured java 1.5 compiler that offers performance that can compete with handwritten implementations.



as a test case, we use the jastadd example picojava specification from, which has 18 abstract syntax productions and 10 attributes to perform name and type analysis. we tested evaluation performance for relatively large, generated input programs. since picojava only supports class definitions and not methods, our input classes contain 150 nested class definitions.



this section briefly compares the approach taken to develop the kiama attribution library with generator-based systems that feature a dynamic evaluation approach. we are not aware of another attribute grammar system that uses pure embedding. in many ways, kiama has been inspired by the jastadd system and the features provided are similar. jastadd provides an object-oriented variation of attribute grammars, supporting inheritance in their definition and references as attribute values. like jastadd, kiama is based on the java platform, but



one advantage of a generator-based approach is the ability to check the attribute grammar for correctness at generation time. for example, completeness and wellformedness checks give confidence that the generated evaluator is not incomplete. in kiama, precise checking of this kind is not always possible, particularly if syntax extensibility is desired. a scala case class can be marked sealed which means that it cannot be extended outside the current module. when compiling a pattern match against a sealed class, the scala compiler can emit warnings if the patterns are not complete, giving kiama a form of completeness checking.



dynamically-scheduled attribute grammars are a powerful language processing paradigm that has been the focus of many generator-based implementations. in most cases, a general purpose language is used to express attribute computations. the kiama attribution library removes the generation step by using scala to write the whole attribute grammar. the resulting system is lightweight and easy to understand, yet capable of competing in expressivity and performance with jastadd, a mature generator-based system which uses a similar evaluation method.



