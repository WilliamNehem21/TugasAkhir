the rest of the paper is organised as follows. in section 2 we review the main technical constructions used in the rest of the paper. in section 3 we present and discuss a methodology for checking epistemic properties of a mas. in section 4 we present in some detail the tool that allows us to do so. in section 5 we show how this can be put to work on a widely discussed example



in the last two decades there have been great advances in the effectiveness of this approach thanks to sophisticate data manipulation techniques. techniques based on binary decision diagrams(bdds,) have been used to develop model checkers that are able to check large number of states(). alternative approaches using automata have also been developed.



following this approach a large number of systems ranging from communication protocols to hardware components have been verified by means of temporal languages. these are not agent systems, but standard distributed processes. if we are to investigate whether we can apply this methodology to agent verification, we need to incorporate this technique with an agent based semantics, like interpreted systems.



model checking epistemic formulae. in the present paper we use akka 4, a kripke model editor that supports model testing by lex hendriks. akka accepts the description of a model and an evaluation function and allows formulae to be checked against this input. akka poses no restriction on the syntax of the formulae, so that formulae can involve more than one modal operator, and modalities can be nested. the model and the evaluation function(in the syntax of akka) are provided by the parser in the previous step.



one can feed this specification into the translator and produce the smv code for the example 8. nusmv can then be used to generate the set of reachable states. for this example, these are 96 out of 629856 possible combinations of local states and actions, as they are represented in nusmv. both



logic has always been of use in the analysis of communication in multi-agent systems, both for the case of humans and computers. to date, verification of communication protocols has been limited to the use of theorem provers, and model checkers limited to temporal languages. while this is appropriate for the low-level communication protocols used in networking, complex multiagent systems following in spirit the intentional stance need richer languages. the problem with using richer languages to verify these protocols is that current provers and checkers are not suited to represent other modalities such as knowledge. in this paper we have attempted to take a step in this direction, by providing a path from a concrete specification of a multi-agent system to the construction of execution traces, and checking of properties.



specifically, we have here presented a tool for model checking epistemic formulae in multi-agent systems. we have used interpreted systems as a framework for the specification of mas and we have suggested how a model checker for temporal models(nusmv) may be used in the verification of epistemic properties. a software tool to provide the necessary translation was discussed.



compilation into smv, the construction of the set of global states, and the testing of epistemic formulae all scale up fairly well. still, we would not expect this approach to be compared in speed with the fastest methodologies available. what we do find of interest here is that a bridge was made between specification of a protocol and model checking, by means of automatic compilation of one specification into another, thereby allowing for epistemic properties to be verified.



