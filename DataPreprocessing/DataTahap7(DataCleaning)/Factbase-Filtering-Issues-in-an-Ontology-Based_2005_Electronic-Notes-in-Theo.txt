rigid standardized exchange formats. these methods have failed to provide software maintainers with a unified environment for supporting and automating reverse engineering tasks[2,6,9,11]. this is because these approaches are prescriptive, forcing tool developers to provide a particular functionality to another tool or conform to an idiomatic standard in order to participate in the integration process.



in an oasis implementation, a set of reverse engineering tools are selected to participate in an integration. each tool offers a set of services to the integration that are shared among the other participants. a tool service is the functionality provided by a tool that, when given a set of one or more inputs, generates a corresponding output that is relevant for maintainers. in the case of reverse engineering tools the inputs are typically source code(or facts about source code) and the output is typically a report or visualization.



although fahmy tool does not support the representation of variables, we are able to induce them from the usevar representation. unique variable instances are generated based on the name of the entity where the variable is contained. these instances are identifiable in the range of the usevar relationship. each usevar instance generates a variable and containment and use relationships in the conceptual space.



the loss of precision in an oasis implementation may be an indicator of the need to reevaluate the domain ontology. it may be necessary to expand the ontology to differentiate an important concept from another. this would have the effect of increasing the precision of the ontology so that the distinction between two concepts is no longer lost when it is mapped from the conceptual space.



a very important consideration when facilitating shared-services in an oasis implementation is the problem of information dilution. it is often the case that the user of a particular tool has expectations of a shared-service that go beyond what the service is capable of providing. often there are very subtle differences in the representations supported by tools participating in an oasis implementation. these representational differences affect the fact



the oasis proof of concept implementation successfully demonstrated the feasibility of service-sharing as a means to facilitate the integration of information and services among a set of reverse engineering tools. it has also provided the opportunity to examine issues that arise as a result of the way an oasis implementation is constructed. in this paper we have examined three areas of concern related to the factbase filtering process used by oasis to manage the flow of information through the system. further research is needed to further explore the impact these issues have on reverse engineering tool integration and system integration in general.



