this paper introduces a notion of certified computation whereby an algorithm not only produces a result r for a given input x, but also proves that r is a correct result for x. this can greatly enhance the credibility of the result: if we trust the axioms and inference rules that are used in the proof, then we can be assured that r is correct. typically, the reasoning used in a certified computation is much simpler than the computation itself. we present and analyze two examples of certifying algorithms.



we have developed denotational proof languages(dpls) as a uniform platform for certified computation. dpls integrate computation and deduction seamlessly, offer strong soundness guarantees, and provide versatile mechanisms for constructing proofs and proof-search methods. we have used dpls to implement numerous well-known algorithms as certifiers, ranging from sorting algorithms to compiler optimizations, the hindley-milner w algorithm, prolog engines, and more.



complete deductive verification of software systems can be extremely onerous. it is a major challenge to prove mechanically that a complex piece of software will always produce the correct output for any given input. the difficulty is due partly to the fact that deductive technology has not yet reached a sufficiently advanced state of the art, and partly to the inherently high complexity of software. nevertheless, formal proofs are a superb methodology for increasing reliability, and we would like to find a use for them even when it is not practical to prove a system completely correct.



as given above, the algorithm relies on these two theorems tacitly. in order to prove that the algorithm is correct, the connection must be made explicit. for purposes of static verification, one would use strong induction on b to show that for any given a and b, euclid(a, b) produces gcd(a, b).



as a programming language, athena is a higher-order strict functional language in the tradition of scheme and ml. such a language affords distinct advantages for certified computation, e.g., higher-order proof continuations can be freely passed around, and this often comes handy. nevertheless, this is not essential. other programming languages, e.g., an object-oriented language such as java, could just as well be meshed with the abstract syntax and semantics of dpl proofs in a conservative manner(i.e., so that a java program that does not contain any dpl proofs looks and behaves exactly as prescribed by the java specification).



to do so. they also have the option of introducing arbitrary axioms, rules, and decision procedures. the choice of where to anchor the proofs is left up to the users, to be decided on an individual basis by the context of each application. for instance, in the unification example of the next section we introduce five inference rules as primitives. they are not the simplest possible rules: in the worst case, applying four of them takes linear time in the size of their inputs, while the fifth takes quadratic time. the rules could be further reduced, expressed as trusted methods in terms of simpler rules and axioms, albeit at the expense of additional work. but even if we leave them as they are, we will already have accomplished a remarkable trust reduction: instead of having to trust the conventional martelli-montanari algorithm, which has a complex control structure and exponential complexity, we need only trust five very short and simple inference rules of quadratic complexity at worst.



another methodology for attaining reliable software is static program verification, and we have already discussed the main tradeoff between it and our approach, namely, generality vs. feasibility. another advantage of program verification is that a static proof has a fixed cost. once correctness has been established, the algorithm can be confidently executed arbitrarily many times without additional effort. by contrast, our model has a runtime price: the algorithm has to do extra work to justify itself every time it generates a result. nevertheless, in our experience runtime certification has never strictly



we have espoused a notion of certified computation where program results are derived deductively rather than merely generated by arbitrary processes. we have illustrated this approach with examples, and shown that it can result in dramatic reductions of the trusted computing base without being inordinately difficult. we have demonstrated that it is a realistic methodology by developing a key enabling technology for it: dpls, a class of languages that significantly facilitate the formulation of algorithms as theorem provers. we have extensively investigated the theoretical foundations of dpls, and we have built an efficient implementation of athena, a dpl that integrates a higher-order functional language with natural deduction. we have successfully used athena to express many interesting algorithms as theorem provers. other programming languages could also be conservatively extended to include dpl-style proofs and proof methods.



