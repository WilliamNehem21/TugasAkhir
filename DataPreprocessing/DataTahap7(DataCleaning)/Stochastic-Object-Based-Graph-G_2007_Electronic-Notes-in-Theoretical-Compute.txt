the development of distributed systems is known as a difficult task. besides dealing with the inherent complexity of concurrent systems, the developer also has to take distribution aspects into account. in such cases, communication latencies and availability of nodes and services, among others, become important aspects to consider which may lead to the success or not of the application.



although model-checking is an important analysis method, in many situations one has to evaluate, as early as possible during the development, non-functional aspects like availability and performance of the system under consideration. moreover, in many classes of applications it is not possible to assure certain properties. in such cases it is important to be able to associate probabilities to satisfaction or not of the property under reasoning.



stochastic processes allows one to model the interaction of distinct phenomena, each described by a different probability distribution. among various stochastic processes, markov chains have been extensively investigated and used in computer sciences and engineering. markov chains are discrete state stochastic processes that can be continuous or discrete time, and have the memoryless property. this property assures that the transition to the next state depends only on the current state of the system and not on the previous ones. the use of exponential and geometric probability distributions associated to the transitions assures the memoryless property for continuous and discrete time markov chains, respectively. the solution of a markov chain results in the probability of each state of the chain, considering the steady state situation.



in a first step towards the stochastic analysis of graph transformation systems is given. in that contribution, the authors associate(exponential) probability distributions to rules. with this, the transition system obtained from the graph grammar gives raise to a continuous time markov chain that can be analyzed with existing tools.



the paper is organized as follows: the next section presents obgg and the running examplethe model of a token ring network. section 3 presents the main characteristics of san. the extension of obgg is proposed in section 4. the translation from obgg to san is discussed in section 5. section 6 analyzes the example and final remarks are in section 7.



the specification of an object-based system is done via an(object-based) graph grammar. we will present the kind of graphs and rules that will be used for the specification of object-based systems. these graphs are called object-based graphs and were introduced in.



the token-ring protocol is used to control the access of various stations to the shared transmission medium in a ring topology network. according to the protocol, a special bit pattern, called token, is transmitted from station to station in only one direction. when a station wants to send some content through the network, it awaits for the token, holding it, and sends the message on the ring. the frame circulates the ring and the destination station may copy its contents. when the frame completes the cycle, it is received by the originating station. the originating station then removes the frame from the ring and sends the token to the next station, which then may act as already described. having only one token, only one station may be transmitting in a given time.



in the stochastic automata network(san) formalism, a system is modeled by interacting subsystems which, in turn, are represented by automata that may behave independently or may have dependencies. according to[13,2], san has exactly the same application scope as markov chains, with the advantage that models are constructed componentwise and the mathematical solution is optimized in terms of state space. san models can be discrete-time or continuous-time. in this paper we focus on the continuous-time case. here we will use a less general definition of sans, since we do not need all features of this formalism to describe a sthocastic extension of obggs.



an automaton is composed by states and transitions labeled with event names. a san model is composed by various automata. these automata may evolve independently with local events(that may affect only the local state of the automata participating in this event), whereas synchronizing events are used to model joint evolution of two or more automata. with the association of distribution probabilities to the events, the labeled transition system generated by a san gives raise to a markov chain and it is possible to calculate the steady state probability of each state of a san. more concretely, to each event there is an occurrence rate associated. the inverse of the occurrence rate is the mean value of the exponential distribution function that regulates the time interval between two occurrences of the event.



a san defines the set of events that are used to synchronize the different automata during the execution. the state changes of sans are possible when all different automata that may engage in some event are in some state in which a transition labeled with this event is possible. note that, since there may be different transitions labeled with the same event, there may be different reachable state starting with the same state and executing the same event.



in this section we will define stochastic object-based graph grammars. in a graph grammar, state changes are modeled by rules. associating occurrence rates to rules(as done for events in san and for transitions in spn, for instance) it is possible to obtain a transition system semantics where each state of the system will have a probability associated, which is the probability of the system being in that state in a steady state situation(i.e. the transition system semantics gives raise to a continuous time markov chain).



we shall define stochastic obggs, short sobggs, over(typed and attributed) hyper graphs, i.e., graphs where edges can be connected to any(finite) number of vertices. graphically, an edge is depicted as a box(whose shape may vary), and the connections to the vertices are drawn as thin lines, called tentacles. the tentacles of an edge are labeled by natural numbers. the main characteristics of object-based graphs are:



now we introduce object-based graphs and partial morphisms. as discussed above, each hyperedge has one target vertex, and may have many source vertices. source vertices are identified by different numbers of the tentacles, that is, a hyperedge is associated to a list of vertices.



the behavior of a sobgg is obtained by applying the rules successively to a start graph. each rule application deletes one message(the trigger of the rule) and may change the value of internal attributes, create new messages and/or objects. formally, the effect of a rule application is obtained by a pushout in the corresponding category(typed object-based graphs).



the computations of a sobgg are exactly the same as the underlying obgg(grammar without the tax function). the following definition of the behavior semantics describes these computations, without considering the stochastic behavior(that will be considered in section 5.2).



based on the class graph and the initial graph of an sobgg, we will construct the sets of automata states that will be used to build the corresponding san. in the following definitions, we will use as attributes of classes and parameters of messages lists of n elements, but note that n may be zero, leading to an empty list. the initial graph will be used to get the information about the data values(defined in the algebra component) and objects that may exist in the system. we will use a function states that, given a vertex, returns the set of values of this type. in case this vertex is the name of a data type, the result is the corresponding carrier set of the algebra. in case it is an object type, it returns the set of vertices of this type(object ids) in the initial graph.



a token ring network with four nodes was modeled, having a static topology, i.e. a node does not change its neighbors. due to the static topology of the example, the automata next node1 to next node4, representing the next attribute of the instances are not necessary. therefore, each node was modeled with three automata. one for the attribute sent and two for the possible input messages. there are two states in each automaton. this results in 12 automata and a product state space of 4096 states. however, considering the initial state as described, only 20 states are reachable.



other scenarios could be specified changing the values of the rates. this could be useful, for instance, to guide a system developer to predict the network throughput(considering various workloads). the definition of rates to represent a specific reality(a real network) will be addressed in future work.



as could be noticed, in order to analyse the sobgg model the user has to know the generated san model to extract results. more concretely, the user writes integration functions about the states of the various san automata and their probability. one important future work should be to allow the analysis of the model based on the sobgg abstractions and not on the generated san, which should be, ideally, hidden from the user.



in the case studies carried out so far, we could notice that sobgg models, when translated to san, tend to generate a large product state space but a reduced reachable state space. the peps tool, in the current version, first calculates the product state space and then solves the system, assigning probabilities to the reachable states. therefore our models are restricted in the product state space. a new version of the peps tool is being developed whereby the product state space is avoided and the reachable state space is calculated directly. this enhancement will allow the stochastic analysis of models with considerable size.



