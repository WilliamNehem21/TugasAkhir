the problem of adapting heterogeneous software components that present mismatching interaction behaviour is one of the crucial problems in component-based software engineering. the aim of this paper is to contribute to setting a theoretical foundation for software adaptation. a formal analysis of adaptor specifications is presented, and their usage to feature different forms of flexible adaptations is illustrated.



component adaptation is widely recognised to be one of the crucial problems in component-based software engineering[4,7]. the possibility for application builders to easily adapt off-the-shelf software components to work properly within their applications is a must for the development of a true component marketplace, and for component deployment in general. available component-oriented platforms feature interface description languages(idls) to address software interoperability at the signature level. idls are a sort of



one of the distinguishing features of the methodology is the simplicity of the notation employed to express adaptor specifications. indeed the desired adaptation is simply expressed by defining a set of(possibly non-deterministic) correspondences between the actions of the two components. while adaptor specifications have been thoroughly employed in to address various examples of adaptation, a formal and precise characterisation of these specifications had not been developed.



the objective of software adaptation is to deploy a software component, called adaptor, capable of acting as a component-in-the-middle between p and q and capable of supporting their successful interoperation. a concrete adaptor will be automatically generated starting from the interfaces of the components and from a specification of the adaptor itself. such a specification simply consists of rules establishing correspondences between actions of the two components. the natural specification of the adaptor for the example at hand is:



adaptor specifications can be employed to specify the desired adaptation between two components that present mismatching interaction behaviour. given an adaptor specification and the interfaces of the components to be adapted, the automatic procedure described in derives(if possible) a concrete adaptor by exhaustively trying to build a component which satisfies the given specification while letting the components successfully interoperate. while the ultimate result of the process of software adaptation is a concrete adaptor component(if any), in many situations it is more convenient to present such a result in the form of an adaptor specification.



the methodology for software adaptation described in has been recently extended in to feature forms of soft adaptation. one of the key notions introduced in is the notion of sub-service. intuitively speaking, a subservice is a kind of surrogate of a service, which features only a limited part of such service. for instance, in the above video-on-demand service, offering a clip preview of a movie can be considered a typical sub-service of offering the whole movie.



we have seen that adaptor derivation can be described as a transformation over adaptor specifications. soft adaptation may generate a soft adaptor that does not strictly satisfy the initial adaptor specification. namely the derived adaptor is described by a specification which is a reduction of the initial specification where some services have been possibly sub-serviced.



a number of practice-oriented studies have analysed different issues encountered in(manually) adapting a third-party component for using it in a(possibly radically) different context(e.g., see[5,6,10]). on the other hand, while component adaptation is widely recognised to be one of the crucial problems in component-based software engineering, quite a few efforts have been devoted to develop its foundational aspects.



components with mismatching behaviour interoperate. they used finite state grammars to specify interaction protocols between components, to define a relation of compatibility, and to address the task of(semi-)automatic adaptor generation. some significant limitations of their approach derive from the expressiveness of the notation used, such as the impossibility of representing internal choices or parallel composition of behaviour. moreover, the asymmetric meaning they gave to input and output actions made it necessary the use of ex-machina arbitrators to control system evolutions. last, but not least, adaptor specifications in allowed only to express one-to-one relations between actions, a severe expressiveness bound when facing non-trivial protocol adaptations as discussed in.



finally, we foresee different lines for future investigations. a natural direction is to extend the formal treatment of adaptor specifications to consider data dependencies across different actions, which may be defined by introducing action parameters in correspondence rules. another interesting extension is to consider multi-party adaptations, rather than pair-wise adaptations. notice that the syntax of adaptor specifications can be naturally lifted to deal with n components, by simply interpreting the operators 0 and 00 as polyadic rather than diadic, allowing rules of the form:



the work of a. brogi has been partly supported by miur project napoli. the work of c. canal and e. pimentel has been partly supported by the projects tic2002-4309-c02-02 and tic2001-2705-c03-02, respectively, funded by the spanish ministry of science and technology.



