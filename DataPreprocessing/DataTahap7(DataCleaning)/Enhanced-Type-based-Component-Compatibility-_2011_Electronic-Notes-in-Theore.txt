research approaches to safe substitution aim to ensure reliable substitutability by employing formal methods. however, the models used in these approaches tend to be too complicated to be usable by average software developers and the methods often suffer from prohibitive algorithmic or space complexity(cf. for example[15,16]).



industrial systems on the other hand almost exclusively use rather simple metadata, most often version identifiers(e.g.), to manually tag components as being compatible with their previous versions. the key disadvantage of this approach is fragility caused by the reliance on human effort to provide correct meta-data.



on a very high abstraction level, georgas et al. use a model of application architecture at run-time to manage its evolution. constraints can be specified on the policies governing the evolution(adaptation) in order to preserve chosen architectural properties. the work however does not provide concrete details about the model, the constraints and ways to check them.



many research approaches have addressed this need using holistic approaches with global integrity properties[21,11]. chaki et al. for example use compositional reasoning and dynamic assume-guarantee checks to provide formally sound evaluation of substitutability with similar practical properties as our contextual one. most of these methods are however based on advanced formal systems(e.g. model checking, behavioural subtyping) often supported by specialized specification notations. these methods tend to suffer from prohibitive algorithmic or state complexity[16,9] and the notations tend to be too complicated to be usable by



few research works have been concerned with use in industrial component frameworks. polakovic et al. implement architectural consistency checks for a resource-constrained component model, using a combination of compile-time type conformance verification and error handling code. our approach would be hardly feasible in such cases due to the resource demands.



we noted in the introduction that it is useful to capture the deployment environment of a particular component for evaluating substitutability. this component deployment context contains the other components and architectural connections within the environment in which the component is employed. the environment can be a component cluster(a closely coupled part of a component application), the component-based application or the whole run-time environment surrounding a deployed component in the run-time framework.



in the approach presented here we concentrate on the first area, which is a deliberate simplification of the issue. the rationale for this decision is based on the challenges faced when working with industrial component frameworks. there, specifications of advanced aspects are not available or cannot be reconstructed from implementation in most cases; therefore, especially semantic compatibility is hard to verify.



there are several fundamental issues that an implementation of contextual substitutability needs to address in general. firstly it has to implement the element subtype relation at run-time, and choose appropriate type representation on which to perform it. secondly there needs to be a means of extracting this component types and contextual complement representation from various sources. in the folowing paragraphs we will discuss our approach to addressing these issues for the osgi case.



the foundational issue is the means of obtaining and representing the types of elements contained in the component specification. normally this issue is delegated to the relevant language compiler; however, in our case a run-time component type representation is needed together with mechanisms to obtain it from both the installed and replacement components. additional complication is that in osgi, the specification data is scattered in several places(the manifest file as the pivotal point, xml and other additional meta-data e.g. for the declarative services, and the bytecode of bundle implementation).



apart from the reasons given in preceding sections, this design can be defended for the following fundamental reason: the method does not place any limitations on the kinds of component interface elements it is applied to. therefore it can incorporate any semantic or behavioural specification compatible with our model of component type. an example of an advanced kind of component interface element for which our method could be applied is the behaviour protocol originated in the sofa component model. in its case, the protocol compliance relation plays the



concerning further research, the formal definitions of the method should be extended to clusters of components(e.g. to support safe substitution of larger subsets of applications) and applied more specifically to inter-component relations in dynamic architectures. the practical implementation for osgi will need to supply the missing aspects of the component model, and overcome the issues of tighter integration in the frameworks.



