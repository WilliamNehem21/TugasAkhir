in this paper, we extend our study to the introduction of time in multiset based coordination languages. to that end, we shall only consider time in a relative manner. following previous work, we shall use the so-called two-phase functioning approach to real-time systems illustrated by languages such as lustre(), esterel() and statecharts(). this approach may be described as follows. in a first phase, elementary actions of statements are executed. they are assumed to be atomic in the sense that they take no time. similarly, composition operators are assumed to be executed at no cost. in a second phase, when no actions can be reduced or when all the components encounter a special timed action, time progresses by one unit. although simple, this approach has been proved to be effective for modelling reactive systems.



related proposals for the introduction of time in coordination-like languages mainly fall in the category of relative time languages and for variants of linda languages. for instance, introduces time in the concurrent constraint setting 2() by identifying quiescent points in the computation where no new information is introduced and by providing an operator for delaying computations by one unit. at each quiescent point of time, the dataspace is reinitialized to an empty content. the paper extends this framework, on the one hand, by introducing a primitive for checking the absence of information and reacting on this absence during the same unit of time and, on the other hand, by generalizing the delay mechanism in an hence a construct which states that a holds at every instant after the considered time. the resulting languages are called tcc and tdcc.



another piece of work on the expressiveness of timed constraint system is. there, various extensions of the tcc languages have been studied: extension with replication and recursion static scoping. decidability results are proved as well as several encodings, which are however not of the form of modular phased embeddings used in this paper.



the rest of the paper is structured as follows. section 2 introduces the two families of languages under study in the paper. section 3 presents the framework for comparing the expressiveness of languages. to that end, we shall refine the notion of modular embedding proposed in to our time context presented in phases. this will lead to the notion of phased-embedding. with these comparison tools, section 4 studies the expressive increasing provided by successive introduction of primitves tell, ask, get, nask and delay in each of the two families of languages. the two families are then compared in section 5. finally, section 6 draws our conclusion.



for our comparison purposes, given x a subset of communication primitives of srcom, we shall abuse notations and denote by m(x) the language obtained by restricting multi-set rewriting pairs to component-wise multi-set unions of pairs associated with the communication primitives of x. for instance, if x={ask, nask}, then the language m(x) only involves pairs of the form(pred,{}d') where pre may contain positive and negative tokens. similarly, if x={tell, get} then m(x) includes only pairs of the form(pred,postd') where pre contains positive tokens only provided that each one is associated with one negative counterpart in post and post contains negative tokens provided each one is associated to one positive token in pre as well as positive tokens(without restriction). note that these notations fully agree with the one introduced in definition 2.7.



pre-conditions do not care about the duration of the tokens on the store. they are only concerned with the presence or absence of some token. in order to capture this in the formalization of the rewriting transition, we introduce the following notation.



let us now consider the agent delay(1). by the phased embedding property, the coding of delay(1) succeeds at time 2. it is easy to observe that the first step of any such computation corresponds to the execution of a telld(t) or naskd(t) primitive on the empty set and thus is not a temporal step. any computation can then be represented as follow.



this paper has studied the expressiveness of two timed extensions of coordination languages. both are based on the two-phase functioning approach to real-time systems and incorporate relative time. the first family is based on a set of linda like primitives while the second relies on multi-set rewriting, already employed in gamma.



