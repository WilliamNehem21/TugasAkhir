in imperative languages, it is best known in for and while loops. the meaning of such a loop is to iterate code until some condition is met, or if the condition is never met, the loop diverges. such loops are often supplemented by break and continue.



programmers using imperative languages regularly use nested loops, as well their associated break and continue statements, which may be labelled. such statements are not essential for programming, and code using break or continue can be rewritten so it does not use either statement, but this usually comes at a price in readability. there is usually a labelled and an unlabelled form of break and continue.



after continue inner and the two occurrences of return inl,j 1, control flows to the beginning of the inner loop. we have drawn a solid purple box around those fragments. the assignment to prod on the left also precedes the beginning of the inner loop, and we have coloured it purple.



after both occurrences of continue outer, control flows to the beginning of the outer loop. similarly, after and after the two occurrences of return inr inl, control flows to the beginning of the outer iter. we have drawn a thick dashed red box around those fragments. the assignment to sum on the left also precedes the beginning of the outer loop, and we have coloured it red.



return inl is used to resume both the inner and the outer iteration. to find out where control resumes, a reader of the program must carefully look up the innermost enclosing iteration. in contrast, in the java program there can be no mistake about where control resumes after continue outer.



like sum-based iteration, labelled iteration has a set-based semantics, but the type system is more involved. we explain labelled iteration in more detail in section 3. we chose the spelling raise because there is a similarity with raising an exception; see also the discussion in section 4.



