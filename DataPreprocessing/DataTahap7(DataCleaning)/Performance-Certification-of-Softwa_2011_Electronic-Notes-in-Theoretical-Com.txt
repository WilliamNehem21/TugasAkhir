we extend the notion of model refinement to non-functional properties of software and propose a refinement calculus for conformance checking between abstract performance descriptions of components. the calculus is based on a refinement notion that covers the performance-relevant aspects of components. the approach is applied to the palladio component model as a description language for performance properties of components.



the contribution of this paper is firstly a model for parameterised component performance specifications and secondly a calculus of refinement. the proposed language for component performance specifications is based on the performance prediction model used in the palladio component model, a metamodel for the description of component-based software architectures. the pcm has been used in several industrial case studies and offers methods for the prediction of quality of service attributes, especially performance and reliability, as well as tool support for modelling and prediction. we use the pcm as a description language for performance properties of components since it offers parametric dependencies between various aspects of a component-based system, like deployment, assembly and usage profile.



this paper is structured as follows: in section 2, we give a brief introduction into the palladio component model. in section 3, the scenario for software performance certification and the refinement calculus are presented. the assumptions and limitations of the approach are discussed in section 4. related work is mentioned in section 5 before the paper concludes with section 6.



for the refinement of performance, we propose a refinement calculus, which will be explained in detail in the following. with this calculus, different aspects of refinement are expressed. the conformance of external call protocols is checked first, since this conformance is a necessary preconditition for components to be compared for refinement. then, resource demands of active resources like cpu, memory and hard disk are considered.



since we have already dealt with external calls in the preceding section, they are not regarded here. for the refinement of resource demands, we do not regard the external calls from the rdseffs and only deal with the resource demands of internal actions. using the refinement calculus from, we can match the actions of two different rdseffs and check for refinement.



with the calculus for performance refinement, all constructs that are available for the description of resource demanding service effect specifications in the palladio component model are covered. the first aspect, external calls, covers externalcallaction elements, but also the control flow elements branchaction, loopaction and forkaction. the second aspect, resource demands, covers internalaction elements with the annotated resourcedemand descriptions.



an rdseff element that has not been regarded in the description of the refinement calculus is setvariableaction. we neglect variables on purpose, following the paradigm of that parameter values should not be regarded in the description of component interfaces. furthermore, the elements acquireaction and releaseaction are not included in the current approach; the handling of passive resources is left to future work.



for the analyis of performance properties of component-based software, many(academic) component models exist, which are mostly targeted on analysis of existing systems. if a software system is designed from scratch, the process should be supported by a development environment that also offers modeling techniques for creating new systems. as an extension to uml, the uml marte profile can be used for the modelling of real-time and embedded systems. from the spe community, several metamodels of the performance domain are available, most notably



performance modelling and analysis is often based on simulations and testing. formal approaches are rare and can best be found in the field of probabilistic model checking, for example the prism tool, which combines conventional correctness checks with stochastic processes to reason about reliability and performance,. however, the approach is lacking the possibility to model the systems parametrically with respect to usage profiles and execution environment.



in this paper, we present a refinement calculus which checks whether an implemented component conforms to an abstract performance specification. together with reverse-engineering methods and test-based performance validation, this calculus can be used in a certification scenario to provide for a complete chain of conformance relations from abstract specifications to source code with respect to performance properties. expressing refinement on an abstract level protects intellectual property such as internal implementation details and source code, while still providing a certification statement that is based on formal methods rather than just meeting standards in a development process.



the calculus uses the parametric modelling features of the palladio component model, so that the refinement is independent from the execution environment of the component, which comprises deployment on hardware and assembly with other components. independence from the usage profile is planned in a future version of the refinement calculus, but not included at the moment due to the unsolved problem of comparing stochastical functions with respect to performance properties. since parametric modelling of user behaviour is one of the key advantages of palladio, including it into the refinement calculus should be a main objective of future work. furthermore, the handling of passive resources is not included in the current approach.



