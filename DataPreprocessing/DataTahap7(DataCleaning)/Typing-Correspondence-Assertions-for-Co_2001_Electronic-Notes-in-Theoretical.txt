we say a program is safe if it satisfies the intentions induced by the beginand end-assertions. more precisely, a program is safe just if for every run of the program and for every label l, there is a distinct begin-event labelled l preceding every end-event labelled l.(we formalize this definition in section 5.)



example 1 uses one instance of the sender and one instance of the receiver to represent a single instance of the protocol. the restriction new(c); makes the channel c private to the sender and the receiver. this assembly is safe; its only run correctly implements the handshake protocol.



our type and effect system is based on the idea of assigning types to names and effects to processes. a type describes what operations are allowed on a name, such as what messages may be communicated on a channel name. an effect describes the collection of labels of events the process may end while not itself beginning. we compute effects based on the intuition that endevents are accounted for by preceding begin-events; a begin-event is a credit while an end-event is a debit. according to this metaphor, the effect of a process is an upper bound on the debt a process may incur. if we can assign a process the empty effect, we know all of its end-events are accounted for by begin-events. therefore, we know that the process is safe, that is, its correspondence assertions are true.



to see why our definition implies that a matching begin-event must precede each end-event in each trace of a safe process, suppose a safe process has a trace s, end l, t. by definition of traces, the process also has the shorter trace s, end l, which must be a correspondence, since it is a trace of a safe process. therefore, the end-event end l is preceded by a matching begin-event in s.



we can now state the formal result of the paper, theorem 5.2, that every effect-free process is safe. this gives us a compositional technique for verifying the safety of communications protocols. it follows from a subject reduction result, theorem 5.1. the most difficult parts of the formal development to check in detail are the parts associated with the(proc cond) rule, because of



gifford and lucassen introduced type and effect systems[11,16] to manage side-effects in functional programming. there is a substantial literature. early work on concurrent languages includes systems by nielson and nielson[19,20] and talpin. recent applications of type and effect systems include memory management for high-level and low-level languages, race-condition avoidance, and access control.



a companion paper begins the work of applying these ideas to cryptographic protocols as formalized in the spi-calculus of abadi and gordon, and has already proved useful in identifying known issues in published protocols. our first type system for spi is specific to cryptographic protocols based on symmetric key cryptography. instead of attaching latent effects to channel types, as in this paper, we attach them to a new type for nonces, to formalize a specific idiom for preventing replay attacks. another avenue for future work is type inference algorithms.



