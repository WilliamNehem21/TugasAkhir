we describe a true-concurrent approach for managing dependencies between distributed and concurrent coordinator components of a long-running transaction. in previous work we have described how interactions specified in a scenario can be translated into a tuples-based behavioural description, namely vector languages. in this paper we show how reasoning against order-theoretic properties of such languages can reveal missing behaviours which are not explicitly described in the scenario but are still possible. our approach supports the gradual refinement of scenarios of interaction into a complete set of behaviours that includes all desirable orderings of execution and prohibits emergent behaviour of the transaction.



we describe how reasoning against order-theoretic properties of vector languages can identify missing behaviours that infer additional scenarios. these were simply unthought in the initial design specification or indicate emergent behaviour, e.g. due to the subtle interplay between concurrency and nondeterminism in the interaction. our approach is effectively used to elaborate the initial scenarios of interaction to more comprehensive ones, which are gradually refined to exclude emergent behaviour and include all desirable orderings of execution.



at this stage it suffices to understand that each transaction vector provides a snapshot of behaviour that captures what actions have already occurred and on which part(component) of the transaction. in describing the behaviour of a transaction however we are interested only in those vectors describing(orderings of) actions that we expect the coordinator components to engage in during the course of the transaction execution. in other words, for a given transaction t we are interested in a particular subset of all possible vectors formed over t.



in describing the behaviour of a transaction we are interested in the actions(activations) on its various components. these are captured in our model using column vectors. thus, instead of considering all possible transaction vectors we would like to be concerned with those obtained by concatenations with column vectors only. this gives the behaviour of the transaction in terms of actions of its coordinator components and can be used to enforce the coordination of the underlying services.



we have seen that transaction vectors are obtained by coordinate-wise concatenation. hence, they can be seen to be built up starting from the empty vector by a series of concatenations with column vectors which represent actions. the study of vector languages in[16,9] shows that in order to ensure that vectors considered are the result of concatenations with column vectors only, the set of transaction vectors must satisfy certain properties. we introduce these properties next.



there are some cases however in which this rationale does not apply. in particular, locations within different operands of an alt or par need to be treated differently. this is because we have to take into account the various execution sequences that are possible when encountering these interaction fragments. note that a location is also used to mark the beginning and the end of interaction fragments superimposed on the diagram. the first location of each operand in an alt or par fragment is considered in relation to the start location of the fragment rather than its immediately preceding location. the vectors of the end location of an alt fragment with k operands are considered in relation to the last location of each operandto reflect the fact there are k alternative scenarios. the vectors of the end location of a par fragment are carefully obtained to reflect the fact the actions appearing within are effectively unordered. full details of the formal construction behind the translation can be found in.



