1000: 10: 1. these are the slowdown-ratios of an inefficient interpreter, when compared to an efficient interpreter, and finally to an optimizing native code compiler. many interpreters were not conceived with any specific performance goals in mind, but rather striving for other goals of interpreters, among them portability, and ease of implementation. this also means that there is a huge benefit in optimizing an interpreter before taking the necessary steps to convert the tool chain to a compiler. there are common optimization techniques for interpreters,



is certainly true for the interpreters of languages analyzed in the corresponding papers, e.g. forth, java, and ocaml, our recent results indicate that it is specifically not true for the interpreter of the python programming language. we find that this correlates with a difference in the virtual machine abstraction levels between their corresponding interpreters.



in virtual machines where the abstraction level is very low, i.e., essentially a 1: 1 correspondence between bytecode and native machine code, the basic assumption of dispatch being the most costly operation within an interpreter is valid. members of this class are the interpreters of forth, java, and ocaml, among others. contrary to those, interpreters that provide a high abstraction level do not support this assumption. the interpreters of python, perl, and ruby belong here. additionally, we analyze the interpreter of lua, which is somewhere in between both classes.



java, according to the latest java language specification, the java instruction set consists of 205 operations, including reserved opcodes. instructions are typed for the following primitive types: integers, longs, floats, doubles, and addresses. in our example we take a look at the sable vm, version 1.13.



3.11.0 contains 146 instructions. among those are regular stack manipulation instructions, complemented by instructions to manipulate the environment, which is needed for function application, and evaluation respectively. additionally, it contains direct support for integer operations, which are however not documented in the corresponding documentation.



python, is a multi-paradigm dynamically typed programming language, that enables hybrid object-oriented/imperative programming with functional programming elements. it has 93 instructions in python 3.0rc1. most of its operations support ad-hoc polymorphism, e.g. binary add concatenates string operands, but does numerical addition on numerical ones.



it is worth noting that our results are not restricted to those programming languages only. actually, we conjecture that this is true for the interpreters of programming languages with similar characteristics, i.e., for the python case this also includes perl, and ruby.



