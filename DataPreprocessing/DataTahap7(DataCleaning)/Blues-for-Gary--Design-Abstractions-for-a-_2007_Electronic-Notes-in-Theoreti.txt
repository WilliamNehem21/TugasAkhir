we describe the design and implementation of a tool to help students learn the art of jazz improvisation. the tool integrates elements of database, ai in the form of automatic melody generation, and human interface design. we describe the philosophy of using several coordinated mini-languages to provide user specifications for various aspects of the tool, including melody and chord representation, styles, melody generation, and other musical knowledge.



to some people, improvisation is not an innate skill and various suggestions exist about how it can be learned. one suggestion would have the student transcribe improvised solos of famous players, to try to acquire their mindset so that the student can learn to improvise. a slightly different strategy is to have the student write out original solos. in our view, the second strategies has added benefits, including:



one of the issues for an inexperienced player is determining what notes sound well together. ultimately these are based on physics, which can be abstracted as psycho-acoustics. however, the jazz player thinks in terms of still higher-level abstractions, as described in the next section. we know of no current way to derive these abstractions automatically from physical principles. they have been learned by musicians over decades by empirical investigations.



semi-tone: a semi-tone is roughly the interval of one-twelfth of an octave. it is the basis for the scales in most western music. for example, the harmonic minor scale consists of pitches separated by 2, 1, 2, 2, 1, 3, 1 semitones.



in previous sections we cited a variety of abstractions that are useful to the jazz musician. we desired to provide a textual means for specifying such abstractions, and decided upon s-expressions for their simplicity, as opposed to approaches such as xml, which we consider to be less friendly to the casual user. while space does not permit us to be thorough, below we give an idea of how the abstractions are coded so as to be user-specifiable. our implementation is based on the polya library, which provides lisp-like data structure abstractions in java.



for each scale type to which some chord refers, there is a corresponding specification of the notes in that scale. only one scale or chord of a given type is specified. the system takes care of transposing them to other key centers. fourteen key centers are typically of interest.



substitutions are other chords that can be used in place of a given chord. extensions are chords that have the tones of the chord, as well as additional tones. the idea of extension induces a kind of inheritance hierarchy in the space of all chords.



if the duration of a note is needed, it is considered to be an eighth-note by default. to form notes of other durations, we use symbology that is natural to musicians: 4 for a quarter-note, 8 for an eighth-note, 16 for a sixteenth-note, 2 for a half-note, and 1 for a whole note. other durations can be formed by adding a dot, which lengthens the note by.5 of its value, and by using a+ to other durations. the latter plus is not confused with the+ that raises an octave, because that+ comes before the duration specification. for example,



as mentioned, we wanted a textual notation that would be simple for musicians to use. to differentiate chord symbols from notes, we use the convention that chord symbols always begin with upper-case and notes with lower-case. thus c2 would represent a c major chord with an added second(d in this case) whereas c2 represents middle c note held for a half-note duration. we allow chords and notes to be freely intermixed, with the software being responsible for separating them into two tracks. a different, more natural, notation is used to specify the duration of chords. typically a chord will persist for a measure or half measure. thus we use vertical bars to separate measures and divide the space evenly depending on the number of items between two bars. if there is just one item, the chord is used for the entire measure. if there are two items, each chord persists for half a measure, and so on, for four items, eight items, etc.



