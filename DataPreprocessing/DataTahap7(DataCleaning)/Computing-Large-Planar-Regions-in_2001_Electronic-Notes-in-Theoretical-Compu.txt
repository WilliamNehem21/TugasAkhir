we consider the problem of computing the largest region in a terrain that is approximately contained in some two-dimensional plane. we reduce this problem to the following one. given an embedding of a degree-3 graph g on the unit sphere s2, whose vertices are weighted, compute a connected subgraph of maximum weight that is contained in some spherical disk of a fixed radius. we given an algorithm that solves this problem in o(n2 log n(log log n)3) time, where n denotes the number of vertices of g or, alternatively, the number of faces of the terrain. we also give a heuristic that can be used to compute sufficiently large regions in a terrain that are approximately planar. we discuss a web-based implementation of this heuristic, and show some results for terrains representing three-dimensional(topographical) images of fracture surfaces of metals obtained by confocal laser scanning microscopy.



lee for the case when s is a set of points in the euclidean plane. they showed that the problem can be solved in o(n2) time. the related problem of computing the deepest point in an arrangement of halfplanes is 3sumhard, see gajentaan and overmars. this indicates that it is probably very difficult to solve the disk placement problem in subquadratic time. recently, agarwal et al. gave an alternative o(n2)-time algorithm for the optimal disk placement problem, as well as approximation algorithms whose running times are close to linear. our algorithm in section 2 for solving problem 1.1 has been inspired by the o(n2)-time algorithm in.



throughout this section, we make the following general-position assumption about the set s. we assume that the elements of s are pairwise distinct. moreover, we assume that for any two distinct points p and q of s, the spherical disks dp and dq are either disjoint or have an intersection of positive area(hence, dp and dq do not touch each other). finally, for any three distinct points p, q, and r of s the spherical disks dp, dq, and dr do not intersect in a single point. we make this assumption only to simplify the description of our algorithm. this algorithm can easily be extended to handle arbitrary sets of points.



it is clear that this algorithm correctly solves problem 1.1. let us analyze its running time. recall that n denotes the number of elements of the point set s. since each vertex of the graph j has a degree of at most three, j has at most 3n/2 edges.



the arrangement a can be computed in o(n2) time using, e.g., the algorithm of amato et al.. consider any vertex x of a. the graph jx, its connected components, and the value wx can be computed in o(n) time. since a has o(n2) vertices, step 2 takes o(n3) time. hence, the entire algorithm takes o(n3) time.



we now show how to improve the running time considerably. note that the bottleneck of the previous algorithm is step 2. the idea of the improved algorithm is to traverse the arrangement a and maintain the connected components of jx in a data structure. consider what happens when we walk along an edge of a from one vertex x to a neighboring vertex y. at this moment, we know the connected components of the graph jx, and want to compute the connected components of jy as fast as possible. walking from x to y means that we move the spherical disk dx along an edge of a to the position dy. during this move, at most one point of s can enter or leave the spherical disk.(here we use our general-position assumption.) since the graph j has degree three, it follows that the graph jy can be obtained from jx by performing at most a constant number of edge insertions and deletions.



step 3: starting at x, traverse the vertices of the arrangement a, e.g., in depth-first order. in a generic step, we walk from a vertex y to a neighboring vertex z. at this moment, we have the data structure cc y, storing the connected components of the graph jy, together with their weights. the graph jz can be obtained by inserting and deleting at most a constant number of edges in the current graph jy. hence, we obtain the data structure cc z by performing these updates in the data structure cc y. afterwards, we query cc z to find the value of wz, and set w:= max(w, wz).



the correctness of this algorithm is clear. steps 1 and 4 take o(n2) and o(1) time, respectively. the times for steps 2 and 3 depend on the data structure cc. let p(n), u(n), and q(n) denote the preprocessing time, update time, and query time of this data structure, respectively. then step 2 takes o(n+ p(n)) time. in step 3, we spend o(u(n)+ q(n)) time for each vertex of a. since this arrangement has o(n2) vertices, it follows that the total running time of the algorithm is the center of d gives the optimal solution to problem 1.1. if we move the disk d, then either the point p or the point q leaves the disk and, hence, each connected subgraph of j that is contained in the disk consists of one single vertex. this shows that any approximation algorithm for problem 1.1 must return the center of d. because of this, we believe that it is difficult to solve the approximation version of problem 1.1 in subquadratic time.



we have considered the problem of computing large regions in a terrain that are connected and approximately planar. we showed that the problem of computing the largest such region can be solved in a time that is roughly quadratic in the number of triangles in the terrain, and argued that it is unlikely to solve the problem faster. we leave open the problem of proving this rigorously. we also argued that it may even be hard to approximate this largest region. proving this claim formally is also left as an open problem.



