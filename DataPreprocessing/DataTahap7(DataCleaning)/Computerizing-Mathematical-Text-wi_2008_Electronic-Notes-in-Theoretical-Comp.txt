despite the variety of possible foundations for mathematics, in practice real mathematicians do not express their work in terms of a foundation. it seems that most modern mathematicians tend to think in terms that are compatible with zfc(which is zf extended with the axiom of choice), but in practice they almost never write the full formal details. and it is quite rare for mathematicians to do their thinking while regarding a type theory as the foundation, even though type theories are among the most thoroughly developed logical foundations(in particular with well developed computer proof software systems). instead, mathematicians write in a kind of common mathematical language(cml)(sometimes called a mathematical vernacular), for a number of reasons: provide tremendous services to mathematics.(there are also extensive opportunities for combining progress in logic and computerization not only in mathematics but also in other areas: program verification, bio-informatics, chemistry, music, etc.) mechanical computers have been used from their beginning for mathematical purposes. starting in the 1960s, computers began to play a role in handling not just computations, but abstract mathematical knowledge. nowadays, computers



pixel map images of pages of mathematical articles may be stored on the computer. while useful, it is extremely difficult for computer programs to access the semantics of mathematical knowledge represented this way. even keyword searching is difficult, because first ocr(optical character recognition) must be performed and high quality ocr for mathematical material is still an area with significant research challenges rather than a proven technology(e.g., there is great difficulty with matrices).



computer algebra systems(e.g., maxima, maple, mathematica, etc.) are widely used software environments designed for carrying out computations, primarily symbolic but sometimes also numeric. each cas has a language for writing mathematical expressions and statements and for describing computations. the languages can also be used for representing mathematical knowledge. the main



typically, a cas language is not tied to any specific foundation and has little or no support for guaranteeing correctness of mathematical statements. a cas language also typically has little or no support for embedded natural language text, or for precise control over typesetting. so a cas is often used for calculating results, but these results are usually converted into some other language or format for dissemination or verification. nonetheless, there are useful possibilities for using a cas for archiving and communicating mathematical knowledge.



the design of mathlang should be compatible with(as yet undetermined) future extensions to support additional uses of mathematical knowledge. also, the design of mathlang should make it easy to combine with existing languages(e.g., omdoc, texmacs). in this sense, mathlang might end up being a method for extending an existing language in addition to(or possibly instead



the mathematical structure of natural language text can be represented in a way similar to how symbolic formulas are handled. furthermore, mixed text and symbols can be handled. this can help in the same way as capturing the structure of symbolic formulas can help. nearly all previous systems do not support handling natural language text in this way.



the current mathlang design has developed through the experience of a large number of students, including both shorter projects(over a dozen projects by either 4th year undergraduate students or m.sc. students) and ph.d. studies(by 3 students: maarek, retel, and lamar). every student has done work to write in mathlang some piece of mathematical text. the experience gained from this has led to the current design of mathlang which is(currently) divided into three aspects:



in addition to the design of mathlang itself, there has been work on relating a mathlang text to a fully formalized version of the text. using the information in the cga and dra aspects of a mathlang text, we have developed a procedure for producing a corresponding mizar document, first as a proof sketch with holes and then as a fully completed proof. we have recently begun to work also on doing this with isabelle in addition to mizar.



defined by the step s. the arguments of the category constructors term, set, and noun are expressions which evaluate to noun descriptions. the category term(e) describes individual entities belonging to the class described by the noun expression e, and the category set(e) describes any set of such entities. the category noun(e) describes any noun which defines all the operations described by e with the same types. so in the above example, the abbreviation term is the type of all mathematical entities, the abbreviation set is the type of any set, noun is the type of any noun(and specifies no characteristics for it), and natural number is the type of any mathematical entity having the characteristics described by the



tsa[22,18,30,19] is a representation that allows interleaving pieces of cga with pieces of cml in the form of mixtures of natural language, symbolic formulas, and formatting instructions for visual presentation. the interleaving can be at any level of granularity: meanings can be associated at a coarse grain with entire paragraphs or sections, or at a fine grain with individual words, phrases, and symbols. arbitrary amounts of mathematically uninterpreted text can be included. the tsa representation is inspired by the xquery/xpath data model(xdm) used for representing the information content of xml documents. in tsa, a document d is



some dra annotations can be unary predicates on parts; these include annotations indicating ordinary document sectioning roles such as part, chapter, section, etc.(like the sectioning supported by latex, omdoc, docbook, etc.) and others indicating special mathematical roles such as theorem, lemma, proof, etc. document parts can have multiple annotations if appropriate.



mathlang is a long-term project and we expect there will be years of design, implementation, and evaluation, followed by repeated redesign, reimplementation, and re-evaluation. there are many areas which we have identified as needing more work and investigation. one area is improvements to the mathlang software(currently based on the texmacs editor) to make it easier to enter information for the core mathlang aspects(currently cga and dra). this is likely to include work on semifurther improvements on the mathlang design and software, writing mathlang documents(without formalizing them) will be easy for ordinary mathematicians. mathlang will support various kinds of consistency checking even for non-formalized mathematics. mathlang will be independent of any particular logical foundation of mathematics; individual documents will be able to be formal in one or more particular foundations, or not formalized.



