the idea promoted by model-driven software engineering(mde) is to use models at different levels of abstraction. a series of transformations are performed starting from a platform independent model with the aim of making the system more platform-specific at each step. currently, a considerable amount of research is being performed in the area of model transformations, as evidenced by the development of a number of different model transformation approaches, including atl and tefkat, based on the qvt standardization initiative. that research mainly focuses on how to express model transformations(defining a model transformation language), while less attention was paid on how to systematically validate model transformations(defining validation criteria for model transformation). in general, the validation of model transformation may include properties such as syntactic correctness of the model transformation with regards to its specification language and syntactic correctness of the models produced by the model transformation(see for example and). but, few proposals deal with the semantic consistency of the model transformation, that is to say, the preservation of target model correctness with regards to the corresponding source model.



2.0 and uml 2.0); section 3 describes the automatic method for creating ocl refinement condition for uml/mof model refinements; section 4 describes a hybrid evaluation strategy for the efficient evaluation of refinement conditions; section 5 presents experimental results and finally the paper closes with a presentation of related work and conclusions.



on the semantic side, the definition of refinement in the uml specification is formulated using natural language and it remains open to numerous interpretations. therefore, mof and uml languages are expressive enough to visually specify model refinements, but they lack formal semantics. without a formal semantics, to carry out any verification process becomes unworkable.



the expression self refers to the object that executed the operation(i.e. the after state), while the expression selfpre refers to the object that executes the operation, at the start of the operation(i.e. the before state). these operations



there are different alternatives to increase the robustness of the mde refinement machinery by re-using a formal theory. one strategy consists in translating the core language used in mde, i.e., uml/mof, into a formal language, where properties are defined and analyzed. for example the works presented in and, among others, belong to this group.



finally, regarding decidability and tractability issues, the generation of microworld is a pragmatic way to combine model checking and semantic entailment. additionally, we improve the coverage of micro-world by the incorporation of testing technique. the idea of applying testing techniques to model transformations has also received increasing attention. recent work by baudry et al. summarizes model transformation testing challenges.



