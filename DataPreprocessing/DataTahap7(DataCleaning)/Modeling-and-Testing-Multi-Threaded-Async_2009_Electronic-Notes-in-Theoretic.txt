modeling concurrent systems and testing multi-threaded implementations against the model is an exciting field of study. this paper presents work done on constructing and executing test cases for an industrialsize multi-threaded application against a model written in the creol modeling language. models written in creol, an object-oriented, concurrent modeling language, can be structurally similar to the finished implementation; we show how to keep this desirable property when re-using creol models as test oracles. also, a conformance relation between model and system under test that needs less controllability than other relations that are based on automata is presented.



formal testing of single-threaded programs can rely on a rich body of theory and industrial experience[11,19,10]. formal testing of multi-threaded or distributed systems, on the other hand, is still an open area of research. this paper presents work on modeling a concurrent system and testing the system against the model.



we verify our testing approach through a case study based on ask, an industrial software system for connecting people to each other via a context-aware response system. a substantial part of the ask implementation, which is mainly written in c, has been modeled in creol. the ask system is inherently multi-threaded and uses asynchronous communication.



the rest of the paper is organized as follows: section 2 presents some related work in the area of formal testing, followed by a presentation of the creol modeling language in section 3. section 4 presents the ask system, the case study that we use in section 5 to present our approach in detail. finally, section 6 gives conclusions and discusses possible future work.



in our application, however, the components are coupled asynchronously. input actions emitted from the environment are put in a queue. they are processed in any order determined by the implementation, emitting input events. a test verdict is reached by observing the input events interleaved with output events.



each object has its own object-internal(and not further specified) scheduler. in a standard setting, there are no assumptions that can be made about the order of process execution.(for an approach to add schedulers to creol objects, see) only one process per object is active at a time. creol processes do not use preemption. instead, explicit conditional suspension points(in form of await statements) are used to release a process and allow another process to execute. cooperative scheduling might be inefficient for a production language, but has great benefits for modeling. because scheduling points are explicit, race conditions can often be found



the aforementioned properties of creol make the language well suited for modeling distributed systems. typically, an object represents one module of the system, where modules communicate through clearly defined interfaces. methods are annotated with a co-interface, allowing both the restriction of the possible callers to the method and a way of call-back using the caller variable. the prove statement and invariants on methods allow for checking conditions during runtime.



where l is the label(future variable) of the call. the l? statement to wait for the return values is blocking, which means the process is not released and no process in the caller is executed until the called method returns. to release the process while waiting for a method to finish, the statement await l? is used. a blocking method call can be implemented by calling the method and immediately waiting for its return. the code in this paper mainly uses the syntactic form



the ask components have been implemented in c. each component is itself multithreaded. the threads act as workers in a thread-pool, which execute tasks put into a component-wide shared task queue. within a single component, threads do not communicate with each other directly. however, they can dispatch new tasks in the task queue, which are then eventually executed by another or the same thread. threads are also able to send messages to other components. incoming messages for a component are received by a thread executing a special hostess task, which continually checks for incoming messages and dispatches tasks accordingly. in most of the components, the amount of threads can change over time, depending on the amount of pending tasks in the task queue and the amount of idle threads.



in testing, we initiate a run of the sut(system under test) and check if the resulting run behaves as expected. for synchronous systems, this can be done by building a test graph, which relates inputs given to the sut with the outputs returned from the sut. depending on the outputs, new inputs can be selected to reach a certain goal in the test graph.



an action is a stimulation to sut and model, while an event testifies that something happened in the system. e.g., a method call from the tester is an action, the start of execution of that method is a related event. because of the asynchronism of our systems, several events might occur between a method call(the action) and its execution(the event). likewise, the order in which methods are executed might be different from the order of the calls.



a test is successful if the model successfully handles the same trace as the implementation and if all assertions and invariants in the model are true. if an assertion in the model is violated, the model itself has an inconsistency and is in error; no verdict about the implementation can be reached. if the tester deadlocks when run in parallel with the model, the implementation violates the test assumption and the test fails. if the tester runs to completion, the test passes.



