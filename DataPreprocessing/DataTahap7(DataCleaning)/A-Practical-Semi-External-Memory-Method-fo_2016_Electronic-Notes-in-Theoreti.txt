the suffix tree is a fundamental text indexing data structure, as shown by. however, its space consumption turns their usage unfeasible for large strings. the suffix array is one of the most important space-efficient alternative which has been used to solve efficiently(in time and space) many string processing problems(cf.).



the extension by direct-comparisons turned out to be very effective. besides, it uses the computer resources in a more appropriate way, especially with respect to cache memory. this is due to the great locality of reference, which was poor in the rmq based queries of the classical variation.



lv dmin: direct-comparison variation aided by lcp information. it uses directcomparisons only if the distance in the suffix array from the suffixes pl[i]+1 and ti+l[i]+1 is large enough(suffixes which are close in the suffix array tend to share more symbols). otherwise, a linear scan picking the minimum lcp value between these two suffixes is used. in this variation rmqlcp is not used.



each experiment was executed 3 times and the lowest wall clock time was chosen. a strong statistical analysis regarding more executions were not done once the landau-vishkin variations differ one from another orders of magnitudes considering time. at every experiment, a pattern with length 50 was chosen from the text randomly, as was done in, since the overall time showed to be largely independent of p and m. errors from the set{0, 1, 2, 3, 6, 10, 20} were considered in the experiments. prefix files from the corpora were also considered. for measuring the used memory, the malloc count 9 tool was used.



further possible improvements include the following. in order to make the semiexternal memory method more space and time efficient, one could represent the alphabet in a succinct way. for example, considering a dna alphabet, one could spend only 2 bits per symbol, instead of a byte. bit packing can be employed as well, since when packing several symbols under a single integer, multiple comparisons can be performed at once. compressing texts while allowing random access to them(cf.) can be a good option in order to manipulate huge texts as well when the raw representation does not fit in main memory.



