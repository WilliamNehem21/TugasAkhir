broad range of implementations. for example, mop admits implementations that are out-of-order or not, speculative or not, superscalar or not, etc. this approach allows us to separate the implementation-independent proof obligations that relate isa to mop from those that rely upon the details of the ma. this can potentially amortize some of the proof effort over several different designs.



the rules pc update and speculate govern the program counter updating. the first is based on the next pc value of the last parcel and implements the regular isa flow. the second implements practically unconstrained speculative updating of the program counter, specified by an arbitrary branch predict function.



about 400 goals, which are individually proved with cvc lite. for ma we used the textbook dlx model and proved it is simulated in mop by constructing the chains(1) and verifying them with cvc lite. this proof is sketched in some detail below.



(1) parcel p4 writes back and retires;(2) p3 performs memory access;(3) alu computes the result of p2 or the address for its memory access;(4) p1 receives data from the register file or by forwarding, and if it a branch, its target is computed as well as whether the branch is taken or not;(5) a new parcel p' is fetched and pc is incremented.(b) if p1 is a taken branch, action(4) is modified to include updating the pc with the computed target(becoming action(6) in the picture), and no parcels are fetched.(c) the machine stalls one cycle if p2 is a load and p1 depends on it.



shen and arvind were first to prove an example of burch-dill correctness using the flushing function defined as the normal form in a confluent system. they model an abstract out-of-order processor and a simple specification machine as term rewriting systems. their implementation model is similar to our intermediate specification mop, and its burch-dill correctness against the specification isa is the main result of. we go a step further by proving stuttering bisimulation. also, mop is for us only an intermediate model that, in turn, allows us to reason about deterministic and more realistic implementations.



as an example, we specified a concrete intermediate model mop for a simple load-store architecture and proved its correctness. we also verified the textbook machine dlx against it. however, our mop contains more than is needed for verifying dlx: it is designed for simulation of microprocessor models with complex out-of-order execution that cannot be handled by currently-available methods. this will be addressed in future work. also left for future work are improvements to our methodology(manual decomposition of verification goals into subgoals which we prove with cvc lite) and performance comparison with other published methods.



