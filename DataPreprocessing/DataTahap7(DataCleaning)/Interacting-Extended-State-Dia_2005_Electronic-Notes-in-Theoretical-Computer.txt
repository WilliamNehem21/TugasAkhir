integrated formal description techniques are a promising approach for the specification of multiaspect systems. in this context, we have proposed a formalism, called extended state diagrams(esd), combining in an homogeneous framework state diagrams and formal data description languages. our purpose is here to enhance the implicit esd communication mechanisms with explicit descriptions of communications, which is achieved using synchronization vectors. the use of interaction diagrams is also discussed.



in the last few years, the increase of systems complexity made it necessary to describe them under different aspects. this separation of concerns appeared at both the programming(the so-called aspect-oriented programming) and the specification and design(aosd) levels. the use and henceforth the definition of integrated formal description techniques is a promising approach for the specification of such multi-aspect systems. following several experiments we made on this subject, we have proposed an integrated formalism,



to improve the means of interaction between esds, we extend here our initial proposal with alternative and complementary communication mechanisms, still preserving the formal consistency of the whole integrated formalism: synchronization vectors. the use of interaction diagrams is also discussed. both plug in a simple way onto the esd semantics we gave in. accordingly, the specification of interactions may be undertaken straightforwardly(no need for additional formalisations).



semantics. let us first note that our goal is not to give a formal semantics to some specific dialect of state diagrams(a lot do exist, see for references). we rather aim at formalising the extension of such diagrams with formal datatypes, in a modular way, that is extending their semantics. we take as an hypothesis that these semantics(called basic hereafter) are given in an operational way, using labelled transition systems(lts).



our semantics is given using groups of rules. the first two groups(r1 and r2) are used to type-check terms and give them an interpretation using evaluation mechanisms. the r3 group is used to extend the basic semantics to describe the individual evolutions of extended diagrams, which is achieved by extending the states of the basic semantics with variable bindings(denoted by e), an input event queue(qin, where events arrive and are stored) and an output event queue(qout, denoting sent events). this extension takes possible value receptions and actions into account. this yields a set{di:(s, s0, t)} of ltss. the r4 group is then used to describe possible modifications in the queues of each diagram resulting of an open-system semantics(additions in input queues, removals from output ones). this yields again a set{di:



explicit communication policies increase the reusability level of integrated specification as no specific communication information is present in the sequential components. in this paper we have proposed extension mechanisms to explicitly specify the interactions between esds. our synchronization vectors may express very different synchronization policies. the use of interaction diagrams is less expressive but takes benefit from its specifier-friendly graphical representation.



