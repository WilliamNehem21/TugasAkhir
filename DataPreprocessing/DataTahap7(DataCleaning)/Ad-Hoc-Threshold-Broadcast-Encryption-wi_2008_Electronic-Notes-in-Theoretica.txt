in a threshold public key encryption scheme a message is encrypted and sent to a group of receivers, in such a way that the cooperation of at least t of them(where t is the threshold) is necessary in order to recover the original message. such schemes have many applications in situations where one wants to avoid that a single party has all the power/responsibility to protect or obtain some critical information. the usual strategy to implement this idea is the following: the set of receivers, which is set from the beginning, runs an interactive setup protocol which takes as input a threshold(chosen by themselves) and outputs a public key for the set and shares of the matching secret key.



this kind of schemes are specially useful in order to guarantee security in mobile ad-hoc networks. a mobile ad-hoc network(also known as manet) is created on the fly. it consists of a set of self-organized and mobile nodes(e.g. pdas, laptops or cellular phones) without any fixed infrastructure. the topology of a manet changes rapidly and unpredictably over time. such dynamism can be due to new nodes joining the network, whereas at the same time others leave it or just fail because they move to a region that is not in the cover range of the network. standard threshold public key encryption schemeswhere threshold and set of receivers are decided at the setup stageare not always an ideal solution for this very general scenario. imagine for example that a sender wants to send a message to a group of receivers in a mobile ad-hoc network, where a considerable number of these receivers are newcomers, that is, they have just entered into the network. to use standard threshold encryption techniques, a public key for the set of receivers and a threshold for decryption must have been set up in a protocol which is either interactive among the receivers, or executed by an external entity; both situations are typically not desirable in ad-hoc networks. each time someone wants to encrypt used in) or ad-hoc threshold encryption. to the best of our knowledge, only two works have dealt with this extension of the concept of broadcast encryption. in the authors propose a scheme based on rsa; even if the authors claim that the length of the ciphertexts is constant, the ciphertext contains an integer modulo n, where n is the product of all the rsa moduli of the receivers. therefore, the actual length of the ciphertext is at least n times the length of a standard rsa modulus, where n is the number of receivers. in, the authors propose a tbe scheme for identity-based scenarios; again, the ciphertexts contain at least n group elements.



the rest of the work is organized as follows. in section 2 we recall some tools(secret sharing, public key encryption) that will be necessary for the construction of our scheme. in section 3 we give the general definitions of the protocols of a threshold broadcast encryption scheme, along with the description of the formal security model for such schemes. we propose our scheme in section 4, and we prove that the scheme is secure, by reduction to the security of elgamal encryption scheme. we conclude our work in section 5.



elgamal cryptosystem is known to be indistinguishable under cpa attacks, assuming the hardness of the decisional diffie-hellman(ddh) problem. it is also known that this scheme is not indistinguishable under cca2 attacks, because of its homomorphic properties. nothing has been proved about indistinguishability of elgamal encryption scheme under cca1 attacks.



in this section we prove that our threshold broadcast encryption scheme is essentially as secure as elgamal public key encryption scheme. as it happens with elgamal, our scheme is not secure under cca2 attacks. with respect to cpa and cca1 attacks, we are going to show that a successful attack against our scheme implies a successful attack against elgamal.



as we remarked in section 3.1, we consider for simplicity only the first kind of corruption, and not the corruptions where the attacker asks for the secret key of a previously registered public key. if this second type of corruption is considered, the proof is still possible(with a slightly worse reduction factor) but becomes more cumbersome: the public keys of the users are defined in two different ways, depending on a probability distribution. for one of the ways, the matching secret key is known and so the corruption queries can be correctly answered for these users. for the other way, the secret key is not known, but a hypothetical attack involving this public key can be transformed into an attack against elgamal cryptosystem.



proof. we are going to deal with the cca1 case, obviously the cpa case can be proved in a similar(but simpler) way. let us assume therefore the existence of a cca1 attacker b against our tbe scheme, and let us construct a cca1 attacker a against elgamal. a receives an elgamal public key(p, q, g, g, y) as initial input.



