goanna is an industrial-strength static analysis tool used in academia and industry alike to find bugs in c/c++ programs. unlike existing approaches, goanna uses the off-the-shelf model checker nusmv as its core analysis engine on a syntactic flow-sensitive program abstraction. the ctlbased model checking approach enables a high degree of flexibility in writing checks and scales to large code bases. in this paper, a new approach to pointer analysis for c is described. it is detailed how this technique is integrated into the model checking approach in order to perform interprocedural analysis. the performance and precision of this approach are demonstrated using a case study.



c++ programs, which differs from other static analyzers in that it uses model checking techniques to perform static analysis[12,21,20]. using model checking to conduct static analysis allows a straightforward specification of desired program properties in computation tree logic(ctl). furthermore, if a specification is violated, a counterexample leading to the error is automatically generated, which is a valuable support for locating and fixing the defect.



many static analyzers perform intraprocedural analyses without taking the effects of procedure invocations into account. even though many defects can be found using intraprocedural analyses, other failures occur through the use of procedures in the wrong program context. a procedure may expose a correct local behavior but may still lead to a false program execution due to unexpected input values, for example. this paper describes an approach to interprocedural analysis of pointers for c based procedure summaries. using procedure summaries allows to capture the influence of a procedure call on the program state and reuse these results whenever the corresponding procedure is called. in our approach, summaries are computed based on an intraprocedural pointer analysis.



goanna is a static analyzer for c and c++ programs. this section first describes the general approach of goanna, before the construction of models and the translation into the input language of nusmv are detailed. nusmv is used as the core analysis engine. a more thorough description of goanna and the underlying intraprocedural analysis framework is given by fehnker et al..



in the reduction step, references are resolved to distribute information from actions applied to non-owning variables to other aliases. without this step, the effects would only be visible to the owning variable. as a result, all aliases correspond to the same memory labels. if we write v->v' in a structure, then



this section details how to capture the behavior of functions with respect to pointer analysis using procedure summaries based on the intraprocedural points-to sets. moreover, it describes our approach of combining aliasing information with procedure summaries in the intraprocedural analysis framework of goanna. this allows us to detect invalid memory accesses that result from procedure calls by extending the existing intraprocedural model described in sect. 2.



we have evaluated the performance of the intraprocedural pointer analysis and the summary-based interprocedural analysis by analyzing some source directories of openssl 0.9.8d. these directories contain between 1,633 and 28,916 lines of c code. this section first describes the applied checks and then presents the analysis results.



the evaluation, we found some files for which the poor performance results was caused by extensive use of preprocessor macros, which introduced large numbers of auxiliary variables. the analysis of the files in the crypto/engine directory, for instance, was slowed down by one file eng padlock.c, on which 70% of the overall runtime was spent.



despite these downsides, we showed that the developed approach can be successfully applied to large code bases. we have also applied the approach to parts of the firefox codebase, for which the slowdown was also linear. applying goanna to the complete source code of firefox did not produce meaningful results due to the extensive use of c++ features such as templates. the performance drawback could be minimized by optimizing the xpath algorithm, which would lead to competitive runtimes. in practice, runtimes can be significantly decreased using incremental analysis. only those program fragments affected by a modified summary have to be reanalyzed. typically, this involves only small parts of the program.



many defects found in real software are related to false handling of pointers. this is especially true for languages such as c, which allow arbitrary pointer arithmetic and have no built-in mechanisms for pointer safety. it turned out that static analysis based on purely syntactic properties of a program allows an efficient analysis but also generates large numbers of false warnings. we



the implementation smoothly integrates into the existing framework. the intraprocedural analysis alone improves the existing intraprocedural analysis framework. it integrates well with incremental analyses. the interprocedural nusmv model is an extension of the original model. one of the advantages of using model checking for static analysis is the automatic generation of counterexamples. with interprocedural analysis using summaries, this cannot be achieved easily. during the analysis of a function, no information about the intrinsics of called functions is present. hence, different techniques have to be developed to tackle this problem.



