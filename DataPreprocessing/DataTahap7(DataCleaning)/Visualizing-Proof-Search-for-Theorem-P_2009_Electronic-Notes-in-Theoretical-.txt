we describe an interactive visualization tool for large natural deduction proof searches. the tool permits the display of a search as it progresses, as well as the proof tree itself. we discuss the feature set and architecture of the tool, including aspects of extensibility and the interface for interaction with other user-provided analysis and visualization code.



ity(iarpa) collaboration and analyst system effectiveness(case) program, contract fa8750-06-c-0194 issued by air force research laboratory(afrl). hnc software is a subcontractor of the university of south carolina in this contract. the views and conclusions are those of the authors, not of the us government or its agencies.



there are two main reasons why automated theorem proving in natural deduction particularly benefits from visualization. first, natural deduction is generally considered to be easier to read than most other logics(4; 15; 19); one motivation for doing theorem proving in natural deduction(nd) is to produce easily-comprehensible proofs, but in order to be understood they must first be put in an accessible form. second, automated theorem proving(atp) in natural deduction is still in early stages of study, and visualization provides a much-needed tool to assist in understanding the operation of experimental algorithms. by proving and visualizing in natural deduction, a single tool can display both human-readable proofs and be faithful enough to the data structures used by the reasoner to allow easy development of theorem proving algorithms.



many ideas have been developed to aid in the comprehension of automatically generated proofs. some we adopt for our purposes, such as graphical display(23). others are unnecessary, such as converting proofs to natural deduction(15). still others may aid proof comprehension but would do so at the cost of obscuring the function of the underlying theorem prover, such as conversion to natural language(6), and so we eschew them. we did not expect html-based browsers such as iwbrowser(of the inference web project,



viprs was built specifically for the silk theorem proving project, which we describe in section 2. the design is intended to be decoupled from silk as much as possible, but effort was not spent in this initial version on allowing viprs to interact with arbitrary reasoning engines. silk reads in proofs specified in a fairly simple xml format(described in(26)). section 3 describes viprs, including its interface, implementation, and architecture. in section 4 we discuss experience with viprs to date, and possible future work is discussed in section 5.



automated theorem provers have traditionally been directed toward problem solving in the domain of mathematics(24; 22). although they have been successfully adapted to other formal domains, such as circuit verification, adaptation to informal domains of human knowledge has proven much more challenging. large ontologies(18; 17) have been constructed to formalize reasoning in many domains, and the semantic web(2) offers the promise of ever growing amounts of formal knowledge over which software will attempt to reason. traditional approaches to automated reasoning suffer from the combinatorial explosion of the search space that follows from the enormous number of concepts and axioms in large knowledgebases.



the intercalation theory underlying natural deduction search has been proven sound but has not received the large-scale implementation attention that has been given to resolution and other standard automated theorem proving techniques(12; 1). reasoning directly in cl is novel, and the practical complexities are yet to be discovered. reasoning in large knowledgebases of course yields very large search spaces and often large proofs as well, as inherited properties of classes must be established by reasoning through the subclass hierarchy. for all of these reasons, development of a practical, usable system such as silk is likely to encounter many unforeseen obstacles which may be difficult to understand and overcome without tools such as viprs, which provide insights into the search patterns and inefficiencies that arise in practical application. silk is in very early stages of development. it has not yet been reported on and is not available for public access.



a complete proof, then, consists of the proposition to be proved at the root, various internal nodes, and axioms and assumptions as leaves. a proof search graph is similar, except that its leaves may include formulas whose truth is as-yet undetermined. as such, proofs are merely a special class of proof search graphs, namely, completed ones. for conciseness we will henceforth refer to the object of visualization as a proof search.



the main part of the viprs interface is the viewing pane. here, the proof search is displayed in a traditional graphical format, with nodes represented as boxes and their relationships as lines between them. by default rule nodes have text indicating their type(which rule is being applied), while line nodes are blank(due to the lengthy propositions of most interesting proofs). the contents of a line node are viewable in a tooltip, or can be displayed using the command-line interface, as described in section 3.1.2.



the viewing pane allows various types of mouse-based interaction. scrolling the mouse wheel zooms in and out of the proof, allowing inspection of the fine detail of proofs that are too large to easily fit on screen. clicking and dragging pans the display. clicking on a node selects it, causing it to visually increase in size and making it the object of future button presses. hovering over a line node displays a tool-tip that contains its formula and the formulas that make up its context.



3. clicking on one end of a crossing edge automatically pans the display to the far end of the edge and darkens both ends of the edge. the panning is most important when the far end of the edge is offscreen; the highlighting is especially useful when multiple crossing edge endpoints are visible.



sited below the main viewing pane is the command line interface(cli), the primary means for the user to manipulate the proof search. the cli lets the user interact programmatically with the visualization and the reasoning engine. specifically, the user can enter arbitrary python code and have it interpreted. through predefined library functions and specially exposed variables, this code can interact with the visualization. this means that the user can query and manipulate every property of the proof search without the need for any explicit prior implementation of the particular interaction.



from that abstract model, we derive a concrete visualization of the graph, with fields for all of the values salient to a visual display, including position, text, color, size, shape, and so forth. the main display and minimap are each a view onto this visualization. 5 these two displays, along with the other interface elements, are uniformly represented as java swing jcomponent objects. the command dispatcher responds to button presses and entries in the command line window by passing the code to be run to the command interpreter. the command interpreter, which holds references to the relevant objects of interest, evaluates the given code, and then asks the visualization



the prefuse visualization toolkit 6(10) is the open source software package used to drive the visual component of viprs. it is a software toolkit specifically designed for the visualization of graphs. it provides classes to model a graph with various visual characteristics, and then renders that model to a java swing jcomponent which is embedded in the gui.



beyond detection of bugs(coding errors), the real goal of the system is to understand the structure of the search space in order to improve search efficiency. the full search space can potentially contain redundant subtrees. these are recognized during search and treated specially so that redundant search does not occur. however, the use of skolem functions and herbrand terms during search introduces the possibility of parts of the search space which are redundant without being identical(rather, they are identical up to variable renaming). proper treatment of these redundancies is best handled



extensibility was the primary consideration in the design of the viprs architecture. the simplest type of extension, as described above, is the addition of python functions that can be called from the cli. colorings which highlight structural properties of the search space have been written already, such as those which highlight nodes that have been successfully proven, or those which are major premises(as the nd search is driven by restriction to normal deductions).



possibility is embedding nodes into points on the plane without rendering individual nodes or edges. the points of the plane could be colored to represent properties of nodes, such as a heat map representing the ages of nodes to indicate the order in which parts of a tree were visited. other maps might represent the number of free variables occurring in each node, or the number of instances of members a given set of formal symbols(names) from the knowledgebase that might be of particular interest to a user.



one of the motivations of nd theorem proving is to provide a more humanreadable proof. the fact that intercalation always finds normal proofs can be exploited to automatically collapse parts of the visualization based on minimal nodes and the branch structure of normal derivations. the plans which silk generates to provide guidance for proof search should give guidance for collapsing as well, and future work should provide the ability to present a plan which expands to the underlying proof.



further extensions of silk will likely also lead to extensions of the visualization. silk is currently being extended to interoperate with bruse, a bayesian network software system which provides soft evidential updating(26; 27). silk proofs are being converted into network fragments as a means of automating network construction, and the viprs system is likely to be extended to provide visualization of the resulting bayesian networks.



