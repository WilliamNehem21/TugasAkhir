since maude has no built-in features to deal with real time, we have implemented these features in a java class and connected it with maude through sockets. objects of this java class receive messages of the form wait(n), where n is a natural number expressing the time in milliseconds that they must wait until they send back a tick message. each time a tick message is received, it is used to update the attributes related with time and another wait message is sent.



this section shows how to analyze the distributed system introduced in the previous section. in order to use the analysis tools provided by maude and real-time maude, the state of the distributed system must be represented as a single term, making explicit the temporal behavior. there are several ways of representing the distributed system, varying the abstraction level. we have decided to abstract as less as possible, making explicit the process boundaries and the links between them(different abstractions for a simpler distributed system can be found in). in this analysis all the code from the eigrp module is reused.



and connected to keep the identifier of other processes connected with it. we make explicit the connections among processes by using a class link that keeps information about the two sides of the link, the delay of the link, the lists of messages between both sides, and the number of messages that it will transmit(that will be used to simulate errors in the connections). to simulate the delay in the transmission of messages we define pairs of messages and time. the time of each pair refers to the time that remains for the message to be sent. the links extract messages from one side and push them into the corresponding list, creating a pair dl(msg, t) with the delay t of the connection. we also define lists of pairs and their mte and delta functions.



we have also studied new uses for maude sockets. we have connected each maude process to a java object that allows maude to notice how time elapses. this java class has been implemented in a general way, so that the same technique can be used to take advantage of other java features from maude.



finally, although we have minimized the number and size of the messages by selecting eigrp among several other protocols, we have noticed that the performance of these distributed applications is negatively influenced by the fact that messages to be communicated need to be translated into strings to be transmitted and back again to messages when received. moreover, the generality we obtain by using the reflective capabilities of maude in order to discharge the user from giving concrete translation functions for each operator worsens this performance. the existence in maude of a send operator at the socket level to transmit general terms could solve this problem.



