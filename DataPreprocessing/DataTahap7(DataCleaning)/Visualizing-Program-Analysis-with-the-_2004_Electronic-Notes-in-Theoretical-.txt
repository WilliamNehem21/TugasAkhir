soot 2 was developed as a bytecode analysis and transformation toolkit that performs both intraand inter-procedural static analyses and transformations. it has been used extensively by researchers both within the sable research group and elsewhere to experiment with their new analyses, and provides a common framework for comparison of empirical results. in addition, soot is used regularly for teaching optimizing compiler courses at mcgill and other universities, forming a base for student assignments and projects.



both main uses of the soot framework, compiler research and teaching, benefit from the program analysis visualizations. for researchers, being able to see the progress and results of an analysis makes it easier to develop new, complicated analyses. in teaching, the visualizations can be used for instructor-led demonstration of analysis algorithms, as well as by students to better understand and debug program analyses that they implement.



soot includes a generic annotation framework for encoding the results of analyses in tags attached to parts of the ir(expressions, statements, methods, fields and classes). the annotation framework propagates the tags between the various irs in soot, and can also encode them in class file attributes for use by other tools. the soot-eclipse plugin reads the tags as the source of information to be visualized. this means that a user wanting to visualize the results of a new analysis need only encode them using the standard annotation framework tags, and they will immediately become visible in eclipse.



for visualizing different types of results, we have introduced three new types of tags. the information stored in these tags is read into eclipse and displayed with any of the irs or original source code. string tags encode textual information, and are displayed as tooltips when the mouse is moved over the associated piece of code. colour tags are used to highlight sections of code(such as variables or expressions) in colour. link tags encode connections between different statements, and show up as lists of links with which one can navigate to another piece of code.



tracing can now be done using the plugin using the actual analysis, making it possible for students to trace through analyses of their choice at their own pace. one of the biggest difficulties that students face when they implement and debug their own dataflow analysis is understanding what is happening as their analysis proceeds. being able to trace through the analysis that they have implemented one step at a time, and even going backwards, will hopefully help them to gain a better understanding of dataflow analysis, and make the task of implementing and debugging them easier and more enjoyable.



