most software is fragile: even the slightest error, such as changing a single bit, can make it crash. as software complexity has increased, development techniques have kept pace to manage this fragility. but today there is a new challenge. complexity is increasing rapidly as a result of two factors: the increasing use of distributed systems as a result of the sufficient reliability and bandwidth of the internet, and the increasing scale of these systems as a result of the addition of many new computers to the internet(e.g., mobile phones and other devices). to manage this new complexity, we propose an approach based on selfmanaging systems: systems that can maintain useful functionality despite changes in their environment. the paper motivates this approach and gives some ideas on how to build general self-managing software systems. an important part of the approach is to build systems as hierarchies of interacting feedback loops. we give examples of these systems and we deduce some of their design rules. the selfman project is elaborating these ideas into a programming methodology and an implementation.



how can we address the problem of programming large-scale distributed systems? such systems have new properties that greatly increase the complexity of programming: scale(large numbers of independent nodes), partial failure(part of the system fails), security(multiple security domains), resource management(resources are localized), performance(harnessing multiple nodes or spreading load), and global behavior(emergent behavior of the system as a whole). each of these properties has been studied in isolation. for example, the area of distributed algorithms has solutions for handling partial failure in many cases. but the properties have not been looked at together. the purpose of this paper is to give some ideas how this can be done.



system theory is still very much in its early stages. recent research results have not been systematized in a textbook and the ideas have not been applied to computer science in a systematic way. w. ross ashby wrote an introductory textbook in 1956 that is still worth reading today. gerald m. weinberg wrote an introduction in 1975 explaining how to use system theory to improve general thinking processes. in the area of computer systems, textbooks exist only for specialized subfields such as distributed algorithms. we consider that it is high time to apply system theory to software construction. this paper gives examples of realistic systems to motivate this goal and to explore how to build software according to system theory.



how does one design a self-managing software system? we do not yet have a general set of design techniques, but we can talk about several important aspects: feedback loops, global properties, and a general architectural framework. it turns out that designing with feedback loops is fundamental. feedback loops are currently being used for the autonomous management of computing clusters, for example they are being used in j2ee clusters and grid systems. but feedback loops are much more generally applicable in system design. we give examples of systems built with feedback loops to see what they can teach us for the general case. the paper by andrzejak et al gives a broad introduction to the different disciplines that can be useful when designing adaptive systems with feedback loops. the present paper is narrower: it restricts itself to the architectural questions of how the loops are organized and how they interact with each other and with distributed programming.



one example property is monotonicity or strict monotonicity. in a strict monotonic system, when the input changes in one direction(e.g., increases, in a general sense), the output will also change in the same direction. using monotonicity as the basic property is sufficient for designing systems with feedback. a negative feedback amplifier can be built using strict monotonicity. another property weaker than linearity that may be useful is continuity, but continuity is in general not enough to guarantee stability. we note that two further properties that may be useful in a theory of feedback program design are determinism and confluence.



an interesting open question raised by this example is how to design distributed feedback loops. this is nontrivial because of the interactions between the design of the loop, its distribution, and the partial failures that it is intended to tolerate. designing these systems is still mostly an open research question. structured overlay networks are an interesting special case that is presented below. other special cases include parts of distributed algorithm theory such as self-stabilizing systems. these systems are able to survive large classes of transient faults.



we complete our series of examples by outlining how a structured overlay network can be formulated in terms of feedback loops. the most primitive functionality of a structured overlay network is to self-organize a large number of computing nodes to provide reliable and efficient routing despite nodes continuously joining and leaving the network[1,18]. a node can leave in two ways, either by a deliberate action or by failure of the node or its network connections. at all times, routing between non-failed nodes must be correct and efficient.



asynchronous events. the default behavior is that the components are independent. any synchronous or dependent behavior must be programmed explicitly. this default gives good results in many cases: for fault-tolerant systems such as erlang, for network-transparent distributed programming systems such as mozart, and for secure distributed programming systems such as e. it also matches well with the complex systems approach taken in physics and used, e.g., in approaches such as belief propagation for solving inference problems.



with the right abstractions, a programming language can make programming with feedback loops simple. each component is a concurrent entity with one input port that accepts a stream of input events and one output port that returns a stream of output events. components ignore irrelevant events. both control and content events pass through the same ports. these properties make it easy to compose components in a modular way. this programming model is similar to the model used



this paper motivates that a good approach for building large-scale distributed systems is to consider them as general self-managing systems. we propose to build self-managing software systems as sets of concurrent agents interacting through asynchronous events and implemented using a component model with first-class components and component instances. in this framework, self-managing systems are built as hierarchies of interacting feedback loops. the first design rule is that the whole system(except perhaps a small kernel) should be inside a feedback loop.



these ideas are being realized in selfman, a project in the european 6th framework programme that started in june 2006. we intend to elaborate these ideas into a programming methodology together with an implementation. it should be as easy to program with and reason about a feedback loop as it is for an object or a component. we will design and formalize a component model that is based on the oz kernel language extended with elements from the fractal model. we will use this component model as the basis of a programming model along the lines of section 5 and implement this model in mozart[26,9,13,23]. we will build a feedback loop architecture on top of this implementation and use it as the basis for a self-managing replicated transactional storage service.



