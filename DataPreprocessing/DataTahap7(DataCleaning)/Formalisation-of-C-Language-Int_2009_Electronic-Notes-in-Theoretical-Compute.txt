in practical computing, implementations of programming languages provide an interface that allow programs written in a language to call code written in another programming language, most often c. usually, those language interfaces are left out of the formal definition of the language, and reasoning about multi-language programs is very difficult due to the lack of precise specifications for the language interfaces. in this paper, we present an application of a framework for the interoperability of programming languages, in which we specified in a systematic way the c interface of a real, rule-based programming language. our framework is based on simple combinations of the small-step operational semantics of programming languages. we give the main elements of a small-step semantics for the c programming language that can be used to specify the same kind of interfaces for other programming languages implemented in c.



a very important aspect of the actual global society is the free access to information from anywhere in the world. it makes easier the exchanges and the agreements between individuals and enterprises, which can decide to work together in order to carry out their respective goals. computing systems must adapt to those environments, and a non negligible task for software developers is to adapt the existing systems to make them work together, that is, to make them interoperate.



in this paper, we present the formal definition of a c interface for a real, rulebased programming language, russel. this is an application of the conceptual framework for programming languages interoperability defined in, which is based on the combination of the small-step operational semantics of interoperating languages. we present the difficulties to reason about mixed russel-c code, because of potential side effects of the c code on the russel implementation. our framework overcomes those difficulties by a precise description of how inter-language calls affect the execution in both sides of a russel-c program, and we can still use the reasoning mechanisms given by the original semantics of russel and c.



the essentials of our programming language interoperability framework are shown in next section. then, we present the main elements for a complete operational semantics of c, and especially its memory model. afterwards, we show the application of our framework to a description of a c interface for a real programming language, and we give some directions for our further work before concluding.



interoperating programs can be executed by different processes in the same machine or in different machines, or by a unique process. the later case is proper to c interfaces, where both c code and language code are compiled into the same object language. in we mentioned three kinds of information exchange that can be supported by a fli for each execution context.



at this time, we have built two operational semantics for languages a and b with no relation between each other. in such case, we say that a and b are at the same level of abstraction. concretely, this means that implementations of a and b are independent, and without any interoperability, there is no way to affect the execution of a program written in a by a program written in b.



as the set of environments. there are two kinds of environments: the global environment, used for global variables, global arrays and all the byte string constants defined by the program; and local environments used for local variables and arrays defined locally in a function. the global environment is created by the makeglobalenv operation, which takes a c store and the sets of global objects declared in the program and returns the global environment and the c store with the memory zones allocated for those objects.



here is an example of a russel program fragment containing a rule that counts the failed logins recorded on the audit trail where records have the fields evt and res. when the number of failed logins exceeds the number passed in the rule parameter, a global variable toomany is set to 1. notice that this code does not use any call to a c function.



informally, we can describe the execution of a russel program as follows. the program reads the first record in the audit trail, and an initial action is executed. that initial action triggers rule instances to be effectively executed either for the current record, for the next record, or at the end of the audit trail. when all the actions are executed, the program selects randomly another triggered rule instance for the current record and executes its respective action. when all triggered rule instances for the current record are executed, the program reads the next record and takes the rule instances which have been triggered for that record. when all records in the trail have been read, the program takes the triggered instances for the end of the analysis.



calls to c functions from russel programs are made with annotated expressions, which indicate how the russel data is effectively passed to the c program. single russel expressions are passed by value. an annotated expression ref v means that the russel variable v is passed by result, that is, a russel value will be assigned to v after the c function returns. the c programmer must ensure that a value respecting the type declaration of v is effectively built and put in the corresponding parameter, as we will precise in the next subsection.



