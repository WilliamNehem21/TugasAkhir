...) are defined by using a grammar-based notation. although the definition of a language by metamodels is more convenient in terms of understandibility, precision and the ability to reuse abstract concepts from other language definitions, most current textual languages are still missing a complete metamodel. unfortunately this implies that modern model-based software development tools are not able to process programs written in those languages.



we propose a framework which generates a metamodel for each programming language defined by a grammar. moreover the framework is able to create a compiler which reads programs of the given grammar and produces models which conform to the generated metamodel. the generation of the metamodel can be adjusted by a predefined set of annotations which can be written directly into the grammar, so the generated model is more appropriate for whichever application.



the rest of the paper is structured as follows. after this introduction we present some related works. in section 3, we define a measurement of quality which is needed to understand the proposed framework described in section 4. section 5 describes our current implementation, while section 6 summarizes the paper.



the solution first described in(and later in) goes further. in this paper the author describes the generation of a metamodel for the itu-t language sdl. his approach was to generate the metamodel in two steps. a very simple metamodel was generated fully automatically from the grammar and then transformed in a number of manual steps until the metamodel had become a metamodel that was considered sufficient. however, this approach has two drawbacks:(i) these model transformations are not generic as they are only able to generate the metamodel of sdl and(ii) the model level(m1) is still not handled.



from programs. the proposed framework looks very similar to the one proposed by us but there are differences in the details. they also propose the automatic generation of simple metamodels which will be improved in later model transformations. however we have different opinions about when to solve which specific task and where to annotate the additional information needed to improve the metamodel. while they rely only on model transformation we start to improve our first metamodel before it is even generated. moreover they propose to add the additional information into the metamodel created in the first step while we do not want to change intermediate models since they will be overwritten if we start the whole generation process again(e. g. if there is a slightly change in the underlying grammar). we propose to add all additional information into the grammar instead.



whenever you can define an application for your metamodel, you instantly get a measurement of quality. this measurement is defined rather pragmatically: the more appropriately the metamodel satisfies your needs, the higher quality it has. this implies that there is no global measurement of quality but many local ones.



when we talk about higher or lower quality metamodels in this paper we consider the application mentioned in the introduction. we are especially interested in metamodels whose instances(i. e., models) can be easily transformed into other models which are instances of other metamodels.



this implies that it has to represent the semantics of the language and not the syntax. therefore it is a good idea to start with an abstract grammar and not with a concrete one(as done in). when no abstract grammar is given(as in most textual languages) it is useful to create one by stripping all terminals from the concrete grammar that are only needed for the concrete syntax(e. g. semicolons as statement separators are only needed in the concrete syntax and can therefore be deleted when generating the abstract grammar).



another concept from grammars no longer needed in metamodels are identifiers. identifiers are only used in programs to reference other parts of the program, but in metamodelling we do not need this helper construct. associations between referring and referred objects should be used instead. a by-product of this approach is that



the repository used by the parent and child compilers for model generation and later for model transformation is a mof 2 repository called a mof 2.0 for java[11,9]. since the only interface used to communicate with the repository is jmi, the repository can be exchanged with any other jmi-conforming mof 2 repository without any further changes needed in our implementation.



once our implementation is finished we have a good base to migrate programs written in many textual languages into the field of(meta-)modelling. this implies that we can use all available model-based tools for software development, reengineering, modernization, etc. on programs written in legacy languages, which will make the mentioned applications much more understandable, easier and less error-prone.



scheidgen, m., cmof-model semantics and language mapping for mof 2.0 implementation, in: joint meeting of the 4th workshop on model-based development of computer based systems(mbd) and 3rd international workshop on model-based methodologies for pervasive and embedded software(mompes), 13th annual ieee international conference and workshop on the engineering of computer based systems(ecbs), 2006.



