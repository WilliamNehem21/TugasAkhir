injectivity is essential when studying the correctness of authentication protocols, because noninjective protocols may suffer from replay attacks. the standard ways of verifying injectivity either make use of a counting argument, which only seems to be applicable in a verification methodology based on model-checking, or draw conclusions on the basis of the details of the data-model used. we propose and study a property, the loop property, that can be syntactically verified and is sufficient to guarantee injectivity. our result is generic in the sense that it holds for a wide range of security protocol models, and does not depend on the details of message contents or nonce freshness.



the introduction of a causal chain of messages from the initiator to the responder and back to the initiator seems to do the trick. we will call such a chain a loop. this property plays a key role in the discussion on injectivity below.



the class of security protocol semantics for which our result holds, is characterized by the closure of the set of execution traces under swapping of events. this class contains e.g. the process algebraic approach with the standard dolev-yao intruder model. apart from this swap property, we will need no other assumptions on the data model and the intruder model. since the loop property can easily be verified by means of static analysis of the security protocol description, we provide a practical syntactic criterion for verifying injectivity.



the achievement of this paper is that we have identified a general property that allows for a modular proof of injective synchronization: once non-injective synchronization has been proven, it is easy to prove injective synchronization. interestingly, the property does not depend on the data model, and therefore does not rely on the properties of e.g. nonces, or functions that are applied to the nonces.



the remainder of this paper is structured as follows. in section 2 we describe a formal model of security protocols and the underlying assumptions of our main result. in section 3 we formalize injective authentication and the loop property and we prove their relation. finally, in section 4 we draw some conclusions and indicate options for future research.



role events are all decorated with labels, typically l taken from the set label. each role event in a security protocol has a unique label, except for corresponding send and read events. we say that the send event sendl(r, r', m1) and read l(r, r', m2) match with sender r, receiver r'.(note that we allow for the messages being different as, generally, the perspective of the sender and that of the receiver differ too.) the format of messages in rolemess is left unspecified, as is the format of claims in claim. other types of role events may be present in roleevent as well.



the semantics of a security protocol is a set of traces. however, in order to deal with the possibility of several role definitions being executed by the same party, we first introduce some additional machinery. let agent be the set of agents. a role executed by an agent is called a run. because each agent can execute multiple(possibly identical) instances of a role, we assume that a unique identifier rid from runid has been assigned to each run. an event e with run identifier rid is denoted by e rid. this yields a set runevent of so-called run events:



please note that the labels and run identifiers are not part of the messages, and are therefore not under control of the intruder. they represent information that is often left implicit in the semantical models. the label indicates the state of the agent when the event is executed, and the run identifier expresses in which run an event takes place.



in this section we define a syntactic criterion for authentication protocols, called the loop property, and show that it suffices to prove injectivity. first we define a strong authentication property, called synchronization. second, we define the syntactic criterion and prove the main result.



the general definition of synchronization refers to a specific protocol p and a claim label. for simplicity of notation, we will assume in the following that there is a single protocol p having a single claim role event denoted by claim. however, note that multiple claim run events may occur in a trace. this is the case when the role carrying the claim has been assigned to various agents or more than once to the same agent.



intuitively, these lemmas express that the events involved in a valid synchronization claim are independent of the other events in the trace. a valid synchronization can occur at any point in the trace, because it does not require the involvement of other runs, or of the intruder. however, other events in the trace might depend on events involved in the synchronization. thus we cannot shift the synchronizing events to the right; but we can shift them to the left, which ensures that any dependencies are not be broken.



we have shown that for a large class of security protocol models, injectivity of authentication protocols is easy to verify, once synchronization has been established. until now, injectivity and authentication have been strongly connected. our new results establish that it suffices to verify the non-injective variant of synchronization. verifying injectivity is a simple and separate task, which does not depend on any specific(data) model.



we did not choose a specific security protocol model for this result. instead, we have characterized a class of models in which the theorem holds. this class contains nearly all models found in the literature, such as the strand spaces model, casper/fdr without time, and term rewrite systems[15,9,5]. these models share the following properties:



almost all correct protocols satisfy ni-synch as well as loop. it seems that loop is a necessary condition for injectivity. we know that this holds for the dolev-yao intruder model. however, for peculiar intruder models loop is not a necessary condition for injectivity.



