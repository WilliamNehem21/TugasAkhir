queuing petri nets(qpn) are a powerful and expressive performance modeling formalism which are a combination of classic queueing networks(qns) and colored generalized stochastic petri nets(cgspn). it has been shown, that even relatively small architecture-level models representing a data center infrastructure and the software(e.g., as shown in) may result in hundreds of places, thousands of transitions and millions of tokens when transformed into qpns. unfortunately, existing analytical solution techniques cannot be applied to qpn models of this complexity. only time-inefficient discrete-event simulation can be used in these cases.



in this work, we leverage layered queueing networks(lqns) formalism and its solvers. lqns can be solved using lqns which is the standard solver for lqns, lqsim which is a discrete-event simulation, or line that leverages fluid-limit approximation to accelerate the solving. we provide more background on lqn and qpn formalisms in section 2.3.



we use the power of model-to-model transformations to transform existing qpn models into lqn models which can be later solved using lqns, lqsim, and line. we transform qpn models systematically enabling the users without qpn or lqn expertise to profit from the lqn representation and the features of lqn solvers that are unavailable to the qpn solvers(e.g., simqpn). without the automated transformation, the ability to manually transform qpns into lqns would be limited to experts in both fields. moreover, the manual transformation of big models would be time inefficient and error prone.



descartes modeling language(dml), and descartes network infrastructures(dni). dml and dni support transformation to qpn, but are currently not compatible with solvers that leverage fluid analysis. we elaborate more on the capabilities of existing transformations for pcm, dml, and dni in section 3.2.



the main contribution of this work is the concept of automated model-to-model transformation that translates qpn models into lqns. we characterize the transformation, its features, and limitations. additionally, we present the rules of the transformation by demonstrating which qpn patterns are translated into which lqn constructs. we characterize the semantic gaps between the qpn and lqn formalisms. moreover, we state which lqn models are not supported by line solver but can be solved with other existing tools(e.g., lqns or lqsim which does not support fluid analysis). finally, based on two representative examples, we demonstrate the transformation in practice and evaluate the performance prediction capabilities, solving time, and memory consumption of simqpn, line, lqns, and lqsim.



this paper is organized as follows. in section 2, we provide background of the qpn and lqn formalisms and describe the line solver and its specifics regarding the support for lqn models. later, in section 3, we analyze the existing works on fluid analysis in performance prediction and existing model-to-model transformations involving qpns and lqns. section 4 is devoted to describe the concept of the contributed transformation, whereas in section 5, we present two examples that demonstrate the transformation using a simple and a complex case. then, we evaluate the models using four solvers and quantify the prediction accuracy and solving time of them. finally, in section 6, we conclude and propose directions for future work.



fluid analysis techniques have been developed to cope with the state-space explosion problem. according to tribastone et al., if the model is represented as a markov chain, the performance metrics(e.g., utilization, throughput, response time) are modeled as real functions of the chain called reward models. the complexity of their analysis grows with the increasing order of the markov chain mak-



layered queuing networks(lqn) are performance models that are an extension of regular queuing networks(qn). compared to ordinary qns, lqns introduce the concept of layers, software servers, and they allow the modeling of simultaneous resource possession. lqns are usually used to model software and hardware contention in a uniform way, as well as scheduling disciplines, simultaneous resource possession, synchronization, and blocking. lqns have been developed as a domain-specific language(dsl) covering a wide range of computer systems with a special focus on software and hardware systems. in contrast to that, qpns are general-purpose models and are not bound to a given domain.



<and> node in the activity graphs, limiting the set of models that can be solved efficiently. while support for this functionality is planned, no concrete release date is available yet. according to the developers of line, the<or> node is supported. lqns(analytical) and lqsim(simulation) are two state-of-the-art solvers for lqns. the lqns solver implements several analytical solving techniques such as mean value analysis(mva) and combines the advantages of other existing solvers, namely srvn and the method of layers(mol). according to, lqns and lqsim do not support recursive calls(a task calling its own entries) and provide only limited support of replication on subsystems(details on the limitations were explained in). lqns cannot handle activity graphs whose fork is located in one task and join in another. moreover, lqns has troubles in solving models with



the analysis of pcm models using qpns and lqns has been evaluated by brosig et al. in. compared to lqns, simqpn was evaluated to provide full support of response time distributions, flexible parameter characterizations, and blocking behavior. on the other hand, the analyzed lqn models were more compact and the solving using lqns was faster than the respective qpn models solved in simqpn.



we divide the related work into two domains: performance modeling and modelbased software design(i.e., model-to-model transformations). first, we analyze the applications of fluid analysis in solving of performance models, whereas later, we briefly describe the applications of model-to-model transformations in performance analysis.



acknowledging the works treating about fluid queueing, and fluid stochastic petri nets, we focus on the fluid analysis as defined in section 2.1 and work. fluid limits for approximating markov chain models were first introduced by kurtz in 1971 in work. since then, the fluid limits were used for approximation in performance models consisting of high order markov chains.



there are number of applications of lqns and stochastic algebras for performance predictions, for example[31,37,7,19]. all lqn performance models can benefit from the fluid limit approximation as long as the line solver can be applied(see line limitations in section 2.4). to the best of our knowledge, line is the only lqn solver that leverages fluid analysis techniques so far. further, we analyze other performance models that are transformable to lqns and qpns, so that they can benefit from the transformation contributed in this paper.



in section 4.1, we describe our overall approach for the qpn-to-lqn model transformation. in section 4.2, we describe the individual transformation rules for mapping qpn elements to lqn ones taking into consideration the context in which they are used. we describe the limitations of the transformation in section 4.3.



to determine which of a set of context-sensitive transformation rules to use for a certain model element, we need to analyze the graph structure of a qpn first. the transformation searches for certain patterns(e.g., loops, forks, joins, etc.) in the qpn model. in general, graph pattern matching is an np-complete problem, but many efficient pattern matching algorithms exist(e.g.,) assuming that any colored petri net can be unfolded into a single-colored one.



in qpns, transitions consume tokens from incoming places and produce new tokens in outgoing places. transitions can fire in different modes(also known as colors), to model different dynamic behavior. the incidence function defines the number and color of tokens consumed and produced by a firing mode. multiple incoming places connected to the same mode are a synchronization point or a join(for a single mode). multiple outgoing places from the same mode represent a fork. in lqn, the transitions are mapped to activity graphs. fork and joins are represented by



finding the start and end of forking process is challenging. while the start(the fork) is marked by a mode taking a token and forwarding it to multiple places, the matching end(the join) must be found by processing the graph. since colors can change on the way through the graph it is non-trivial how to match a fork with the respective join.



transformation rule. in this way, the fork and join pair may be separated and placed on different tasks. although this limits the compatible set of solvers(lqns does not support separated fork-join), the output of the transformation is a valid lqn model and can be solved by the solvers.



in this section we describe the limitations of the qpn-to-lqn transformation. this section covers general limitations of the lqn formalism and do not focus on solver-specific limitations(the limitations of lqn and qpn solvers are presented in section 2.4). the most challenging parts of the transformation are: loops where



we expected higher inaccuracy for line because the solving using fluid limits approximation is expected to work better for bigger models and provide higher errors for small. this issue seems to have been addressed by the authors of line as the results for small models are also good. we investigate a more complex model in the second example.



we take simqpn prediction as a baseline again. the utilization results show that the wls-cpu is the bottleneck of the modeled system. all solvers reported nearly 100% utilization. lqns overestimated the utilization, probably due to a rounding error, whereas lqsim reported the utilization as 1.8% lower than the other solvers. the predicted throughput is affected by the bottleneck resource and is similar for all the solvers. line and lqns overestimated the throughput by up to 2% relatively, whereas lqsim reported up to 4% higher throughput than the baseline.



in this paper, we presented a concept of the model transformation that automatically transforms qpn models into lqns in a systematic manner. we characterized the qpn and lqn formalisms by comparing the differences and pointing out the possible incompatibilities. we presented selected model fragments where the information could be lost due to necessary simplifications in the automated process of transformation(e.g., loops). we provided multiple examples to demonstrate the transformation and evaluated the solvers by means of performance prediction accuracy and solving time.



we showed that solving the transformed qpn models using lqn solvers is beneficial, especially using fluid approximation with solvers such as line as its solving times are lower than lqsim and simqpn. for small models lqns provides short solving times, however, it consumes more memory than line, simqpn, and lqsim. the contributed transformation enables support for the three new solvers to already existing qpn models, in particular the models obtained in model-to-model transformations of dml and dni.



