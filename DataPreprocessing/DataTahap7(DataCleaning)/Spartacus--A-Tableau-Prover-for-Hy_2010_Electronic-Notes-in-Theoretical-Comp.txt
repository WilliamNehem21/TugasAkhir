spartacus decides the satisfiability problem for h(e,@), the basic hybrid logic extended with global modalities. notationally, our description of h(e,@) follows. we distinguish between variables for states(x, y), properties(p, q), and relations(r). from these variables, the expressions of h(e,@) can be obtained by the following grammar:



every time we want to apply r to a formula sx, we need to check if pxs is expanded. instead of computing this information from the branch we use a special data structure, called the pattern store, to record and query which patterns are expanded. the pattern store contains all patterns that are known to be expanded because of previous diamond rule applications. whenever r is applied to a formula sx, the pattern pxs is added to the pattern store. when checking if r applies to a formula sx, we have to check if the pattern store contains a superset of pxs. the efficiency of this operation, called subset matching following, is crucial for the performance of pbb.



the implementation of pbb in spartacus is inspired by modal caching techniques, in particular the one described by giunchiglia and tacchella. in fact, the sets of expressions that are considered in are nothing other than patterns, and the satisfiability cache of provides exactly the kind of storage and lookup operations that are also necessary for pbb. so how does pbb differ from satisfiability caching in? while pbb subsumes satisfiability caching, the converse is not true. in particular, the system of does not terminate in the presence of transitivity or global modalities and hence needs to be complemented by a blocking technique. to retain completeness in the presence of blocking, however, satisfiability caching needs to be refined considerably.



compared to lazy unfolding, lb is more general in that it is applicable in more cases. on the other hand, in cases where both techniques apply, lazy unfolding is likely to be more effective. this is because, rather than restricting the processing of delayed disjunctions, it does not generate such disjunctions in the first place.



lb for propositional literals and boxes is implemented as an additional layer on top of the rule application queue. while conventional rule application heuristics(as in) influence the position of a pending rule application in the queue, lb prevents disjunctions from being added to the queue as long as they are delayed. this allows lb to work independently of the conventional rule application strategy.



all provers are compiled and run with the default settings. unfortunately, we were not able to include into the comparison the prover dlp, reportedly one of the fastest provers for k. the reason is that dlp relies on an outdated version of the sml/nj compiler that we were not able to install on our test machine. to get an impression of the performance of dlp, refer to[28,7].



