in the domain of software engineering, the use of software components is now a well established approach. however, it raises problems about the dynamic adaptation of these components to particular users demands. indeed, these components have been developed with the intent to have a wide range of use, and so they implement functionalities which perhaps do not match precisely enough the demands of specific users.



therefore, we address the adaptation of the coordination between components by means of so-called moderators. a moderator is itself a coordination component managing interactions that are described and formalized using petri nets. more precisely, we study the dynamic adaptation of the coordination rules by means of specific transformations of the petri nets used to describe a moderator.



software reuse is an old and essential concern in the field of software engineering. in this search, the notions of interface and modularity have progressively emerged, leading to the current notion of software component[9,11]. composing, assembling components is the core of software architectures. component models are based on two key features: assembling preexisting components. this assembly is made possible by using and maintaining invariant relationships between the assembled components. the notion of interface thus allows to abstract and encapsulate the implementation of components. the adaptation of coordination(and our approach in particular) extends this process by aiming at enabling to alter the actual behavior of a set of coordinated components, while keeping invariant the contract(the specification of the coordination) that binds these components altogether. more precisely, a participant may ask the moderator of a conversation to depart from the(preset) behavioral rules of the protocol, in order to adapt to a specific runtime context. to be safe, such an adaptation should guarantee each participant taking part to the conversation that the goal of the conversation can be reached.



in the following sections, we first describe the functionalities and the properties of coordination components. then, we define adaptations, the safety property related to these adaptations and how it can be proved. lastly, we illustrate this adaptation approach through an e-learning case study.



the main benefit of coordination by protocols is to ensure the efficiency and the predictability of interactions among participants with regard to the achievement of some task. however, whatever the rules of a protocol, each participant must be sure that they will be respected by others participants; otherwise, there is no guarantee that the common objectives of the protocol will be reached. this can be achieved by dissociating on the one hand the interventions in a conversation that are performed by the participants, and on the other hand checking whether these interventions obey to the protocol rules, which is performed by a specific component called the moderator of the conversation. the moderator is in charge of enforcing the protocol rules by making the participants in the physical impossibility to contravene the rules of the protocol. more precisely, a moderator:



to implement the behavioral constraints of a protocol it is proposed in to model the control structure of moderators by means of the petri net formalism. the petri net(in short pn) of a moderator includes communication places: input places to receive the messages sent to the moderator by the participants, together with output places for the messages from the moderator to the participants. the initial marking of this net corresponds to the initial state of any conversation of the protocol and its terminal(deadlocking) marking corresponds to the final state.



the basic scenario is the following: customers order goods from the website(which is implemented by the moderator), and then send their payment to the website. lastly, they acknowledge the receipt of their goods to the website. the moderator forwards the orders and the payments that it receives to the vendors, and records the acknowledgments. vendors accept orders(received from the



moderator), send goods, and then collect payments 3. the behavior of vendors and customers is described by finite automata: a vendor only receives messages and a customer only sends messages. this pn includes 5 communication places(order vm, payment vm, order cm, payment cm and ack cm) that correspond to the types of messages exchanged between the moderator and the participants.



a high level petri net formalism is used, in order to process data carried by tokens. notably, each message-token in a communication place includes the identity of the participant that has sent or shall receive this token. in this way, the moderator is able to manage a dedicated thread of control for each participant and to keep track of its state with regard to the conversation.



using the pn formalism to define the behavioral rules of a protocol allows to use techniques and tools of the pn theory to analyze behavioral properties. we do not elaborate on other aspects of moderators(e.g. the management of data, of sessions, of threads of control, or granting roles to participants) since we are only concerned here by their behaviors.



we also assume that the ipn of a protocol is a bounded petri net, that is there is an upper bound to the number of tokens in any marking that is reachable from the initial marking. this constraint does not prevent a component from sending any number of messages, but it entails that the moderator can only process a finite number of these messages simultaneously. it also implies that we do not consider protocols that could coordinate simultaneously an unbounded number of components.



firstly, we define adaptations more precisely, in this setting. then, we consider the properties that adaptations should meet in order to keep the conversation consistent with respect to the initial coordination rules. lastly, we outline how these dynamic adaptations can be managed and implemented.



the notion of safety can be related to the more general concept of conformance(i.e. substitutability with respect to simulation and stuck-freeness) in labelled transition systems in the following sense: an adaptation of a coordination protocol is safe if the whole adapted system(i.e. the adapted moderator plus the participants) conforms to the non-adapted system. in other words, safety appears as a special case of conformance, aiming at characterizing conformant adaptations that are local to a specfiic component, namely the moderator.



access document checking is performed by the ecs. to this end, the workstation of each student informs the ecs of any document access(transition t 6, or transition t 11 if the student has already received a warning). the ecs then checks whether this document belongs to the list of documents authorized for the student(transition t 5, or t 12). if the document is authorized, transition t 31(or t 32) occurs. if it is not the case, the system informs the assistant that supervises the examination(transition t 7, or t 16).



the verification of the safety of an adaptation involves a cost insofar as a validation must be run onto the pn. this validation is grounded on an exhaustive system state space exploration, and its limits, in general, are those of model checking. the validation of the safety of an adaptation can though benefit from works on conformance checking. this can lead to constrain the pn modifications so that this analysis remains scalable according to the pn size.



