in this paper we describe some statistical results obtained by the verification of random graph transformation systems(gtss). as a verification technique we use over-approximation of gtss by petri nets. properties we want to verify are given by markings of petri nets. we also use counterexample-guided abstraction refinement approach to refine the obtained approximation. a software tool(augur) supports the verification procedure. the idea of the paper is to see how many of the generated systems can be successfully verified using this technique.



a software tool(augur) supporting this verification approach has been developed and a number of successful case studies have been conducted(see for example the case study on red-black trees). still, verification remains undecidable in general(because of the turing-completeness of gtss). the interesting question is how many gtss can be verified in practice using the over-approximation of gtss by petri nets and standard techniques for analysing petri nets. this work is a first attempt to give an answer to this question.



one of the most common approaches to graph rewriting is the dpo(doublepushout) approach, which derives its name from the fact that a rewriting step is described by two pushouts modelling the gluing of graphs. we are currently supporting restricted versions of dpo rules, where we only allow discrete interfaces, i.e., we can not describe preservation of edges, and merging as well as deletion of nodes is forbidden. edges, however, can be deleted. the extension to non-discrete interfaces is not very difficult from a theoretical point of view, whereas merging and deletion lead to more serious problems. especially deletion means that we would have to handle negative application conditions, which can only be modelled using inhibitor arcs in petri nets.



we do not describe here how the petri graph is computed, apart from saying that the computation is based on an approximative unfolding algorithm. the algorithm is designed in such a way that nice properties of the gts model, such as locality(state changes are only described locally) and concurrency(no unnecessary interleaving of events) are preserved in the approximating petri net. more details can be found in[2,3].



in this paper we generate gtss with hyperedges having arity(number of connected nodes) one or two. edges can be labeled(we consider two labels for each arity). we do not allow two edges having the same labels in the left-hand side of a rule. we also do not delete any nodes. therefore we describe below only the nodes being added to the right-hand side of the rule.



each class of gtss is strictly included in the next one. in each class we generate 100 gtss. the numbers are relative small because we tried to keep the sizes of generated gtss manageable in order to obtain enough statistical material.



an interesting value is also the total number of refinement steps during the verification of one class of gtss. this value grows rather quickly: 0 steps for the first class of systems, 18 steps for the second class and 83 steps for the third class. but note that the number of refinement steps for each gts is restricted by 3.



the statistical results can be seen as rather positive and hence the verification approach of approximating gtss by petri nets can be seen as a promising approach for the verification of gtss. of course it will also be necessary to compare these results with related results stemming from other methods. however we are currently not aware of any such results for random systems which have been published.



