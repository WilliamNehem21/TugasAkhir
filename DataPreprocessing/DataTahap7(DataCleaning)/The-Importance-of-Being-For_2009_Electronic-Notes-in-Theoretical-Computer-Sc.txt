in this paper, we report on work being done in the context of the sams project where a safety component for autonomous mobile service robots is being developed and certified as sil-3 compliant. the purpose of the safety component is to calculate a safety zone for the moving robot, and stop the robot when an obstacle enters the safety zone, thus protecting both the robot and the obstacle from a collision. the safety properties are formulated at a very abstract level: e.g. that the robot does not collide with any obstacles is formulated in terms of geometry(polygons and sets of points changing over time), which is very different from the actual code. we keep the modelling of the domain mathematically close to what is found in textbooks on geometry and physics(providing the foundations of robotics), and formalise it in higher-order logic in a theorem-prover(in our case, isabelle). we further



the paper is structured as follows: sect. 2 gives an overview of the project. we consider how to specify safety properties in sect. 3, using a motivating example, and show how to prove them correct with respect to an implementation in sect. 4. sect. 5 gives a simplified account of the whole development, demonstrating the seamless development cycle, and sect. 6 concludes.



avoidance algorithm under iec 61508(the relevant norm) as a sil-3 compliant safety component is novel, from the robotics point of view as well as from the certification point of view. safety certification in an industrial setting typically involves hardly any complex algorithms and norms such as din en iso 10218 emphasise hardware-based solutions, e.g. physical separation by a cage or a light curtain. what is novel in our project is that the safety function to be certified is based on software and sophisticated algorithms.



the problem is exacerbated by the fact that robotics has no previous history of formal methods, so there are no set of best practices, established specification languages or well-developed tools specific to the domain available. thus, the most important question is how to specify safety properties. for specifications to be credible for an external certification authority, they should be formulated as comprehensible as possible and abstractly, not too close to an implementation.



the formalisation of the above pen-and-pencil proof is subject to ongoing work. we have formulated the necessary definitions(i1, i2, i3, conv1 and conv2) in isabelle. the main inclusion theorems have been proven using several intermediate lemmas; however, some of the more technical lemmas(mainly concerned with non-linear arithmetics) still need to be proven formally, so the proof is still incomplete. 3



therefore, formalising proofs for well-known theorems may actually help in the certification. in mathematical textbooks, there are often contextual or tacit assumptions, and definitions may vary subtly from textbook to textbook. this may lead to special cases, such as dgn above, being overlooked. however, if the proof is formalised in isabelle, all preconditions and assumptions are made explicit, eliminating this potential source of errors.



this example also shows how discrete input and continuous behaviours are linked: cycle n happens at time d2c(n), and the output of scanner pts(and thereby the output of scanner) depends on the current position of the obstacles in the world. hence, the input to the control software is no longer arbitrary, but in correspondence with the environment, modulo scanner imprecision. similar specifications must be given for the odometry.



the approach has three main advantages: because the specification is stated very abstractly, with an emphasis on mathematical concepts rather than computation, its review can focus on the main aspects, and uncover conceptual errors which would have gone unnoticed otherwise(see sect. 4.3). because the actual proofs are fully



presently, the sams project is in the second of its three years. our software is currently about 13.5 kloc of c code, and the proof scripts amount to 4.5 kloc of isabelle proof script for the formalisation of the implementation model, and 1.5 kloc for the domain model.



