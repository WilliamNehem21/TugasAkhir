contracts specify properties of an interface to a software component. we consider the problem of defining a full contract that specifies not only the normal behaviour, but also special cases and tolerated exceptions. in this paper we focus on the behavioural properties of use cases taken from the common component modelling example(cocome), proposed as a benchmark to compare different component models. we first give the full specification of the use cases in the deontic-based specification language cl, and then we concentrate on three particular properties in order to compare deontic and operational specifications. we conjecture that operational specifications are well suited for normal cases, but are less easily extended for exceptional cases. this hypothesis is investigated by comparing specifications in csp(operational) with specifications in cl. the outcome of the experiment supports the conjecture and demonstrates clear differences in the basic descriptive power of the formalisms.



the paper is organised as follows. in next section we provide a general description of cocome. in section 3 we present the language cl and we give the cocome specification. in section 4 we present in detail the three properties to be specified in section 5 using cl and csp, and we briefly comment on the suitability of ltl and ctl as specification languages in this context. we compare the specifications in section 6, to conclude in the last section.



once the manager starts the order products process(startorderprocess) the system is obliged to show the full list of items and the list of items that are running low(listitems&listlowitems). after this the manager has the permission to enter the amount of items he would like to order(entersamount) after which he is permitted to press the order button(mngorderbutton) in which case the system is obliged to place the order and display the order id(placeorder&displayorderid). this use case does not have any exceptional behaviour specified. furthermore, the distinction between the system permitting the manager to do certain actions(e.g. p(entersamount)) and the system being obliged to respond(e.g. o(placeorder&displayorderid)) is not explicitly described in the cocome specification but rather assumed from the common expectations.



we defined the action completecorrect since the obligation is on the supplier to send the correct information. thus here we have that once the delivery is made(deliver) the supplier is obliged to have sent the complete and correct delivery(completecorrect). if however the supplier has violated this obligation, the manager is obliged to send the order back(sendback), otherwise he is obliged to process the order(mngorderbutton) and the system is obliged to update accordingly(updateinventory).



customers are only allowed to buy a small amount of goods and must pay cash in order to keep each transaction short.(6) each cash desk has its own cash desk pc where the software handles the sale process, and takes care of the communication with the bank. furthermore, it integrates all devices at the cash desk.



the relational calculus of object and component systems(rcos) is a method for developing component based systems. syntactically, it is rooted in unified theory of programming(utp) which has been adapted for object and component based use. behavioural aspects are syntactically expressed by uml diagrams. semantically and for verification purposes, they are translated to csp.



it is always the case that once we go to the express mode a certain behaviour needs to be followed until we go back to normal mode. in the case that the client has less than eight items, then the cashier is obliged to service the customer. however, if the client has more than eight items the cashier is obliged to choose to either service the customer or send back the customer to another cash desk and both possibilities should exist. the last property is thus specified in cl as follows:



the specification of the example using the different notations shows that ctl and csp allow the specification of exceptional behaviour aspect of a contract which cannot be specified in other notations such as ltl. thus making it possible to specify full contracts. however, model based formalisms cannot express global properties such as fairness or liveness of a transition system, because they essentially model the individual transitions.



though our aim is to compare the specification style of temporal logics, operational and deontic specifications, we are also interested in what we can do with those specifications, namely how easy it is to analyse them. it is well known that both ltl and ctl are amenable to model checking[1,7]. in the case of csp suffices, so one can take advantage of the existing tool fdr2 to do the analysis. it may be used to check csp refinement as well as other properties such as deadlock freeness, trace refinement, etc. however, it is unclear what refinement should be checked for f 3 since it contains contrary-to-duty actions, which do not blend well with ordinary refinement.



one prevailing view of contracts is that of properties which the underlying system must satisfy. in the gist of this view, we have shown how they can be expressed in terms of appropriate standard logics, ctl and ltl. one main disadvantage of this approach is that obligations, permissions and prohibitions are encoded in terms of the underlying logic, making it difficult, in some cases practically impossible, to relate behaviour of the system back to these operators. the encoding also leads to loss of compositionality of contracts for exception handling or contract violations, as in the case of ctds. reasoning about ctds and ctps would be difficult. in particular, the detection of deontic inconsistencies, as explained at the end of the previous section, cannot be done in temporal logics, and quite difficult in many operational models.



