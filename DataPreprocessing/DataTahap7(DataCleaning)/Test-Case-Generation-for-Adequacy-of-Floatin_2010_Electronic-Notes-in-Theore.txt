which contain collections of test cases, are used to test programs. in a test suite, each test case consists of, among others, an input and an expected result, which will be compared with the actual returned result to determine how good the input program is in respect of the test case. we usually consider a good test suite is the one that has small size but has high code coverage, meaning that it not only consumes little memory for running but also can reveal as many behaviors of input programs as possible.



the rest of the paper is organized as follows. section 2 introduces several metrics for assessing the closeness of two functions. based on these metrics, section 3 shows how to generate a better test suite from a given one, and section 4 points out a method to find the best test cases. we show some experimental results on several mathematical functions in section 5. related work is discussed in section 6. section 7 concludes.



here[.] denotes the cardinality of a set. the threshold metric is the percentage of the number of good test cases in a given test suite. if this value is smaller than, say 1%, we say that the function is good up to 99% or good with probability of



having the metrics in the above section is already quite useful because among many given test cases which are taken from the real data(such as audio and video files) or randomly generated, we can always choose a better or the best ones to test first and stop when the converted function is not good enough. this may allow us to select a smaller set of test cases that can be just as effective in detecting problems for our code. but even the real test data or the randomly generated data may not reveal enough good test cases. therefore, we propose a method to generate a better test suite from a given one. we start with generating a better test case from a given one.



among the most well known probabilistic algorithms, we choose tabu search(ts) and genetic algorithm(ga)[6,19] to solve the problem in the paper; one belongs to neighborhood search methods and the other is in the category of evolution approach. they are two of the most effective, popular, and successful approaches for solving a wide range of combinatorial optimization problems. to discover the global optimizer of l over x, they may complement each other perfectly.



genetic algorithm(ga), a population-based meta-heuristic optimization method, simulates biotic activities such as crossovers, mutations, and natural selections to gain fittest ones from initial individuals through a number of generations. ga bases on a fitness function, which is l in this case, to decide which individual is better than others. one of the most powerful features of ga is the combination of exploitation(such as crossover process) and exploration(mutation, for instance). the goal of the combination is to find not only new, similar candidates from currently known solutions, but also novel and superior ones.



because traditional neighborhood-based methods like steepest ascent are easy to be stuck in local optima, it is ineffective to use them to find global optima of complex functions, for instance, rosenbrock. ts improves this drawback by providing a tabu list to remember which points are recently visited, helping us leave local optima to enter new, promising areas. also, ts uses intensification and diversification to search not only deeper but also broader, as ga does with exploitation and exploration. in algorithm 3, we introduce our version of ts to deal with our problem. note that each time a new initial solution is randomly created, our ts sets a limited computation time for the process of finding the best solution started from the initial one. if the time is exceeded, we stop discovering and prepare for the next start.



our work also relates to roundoff error analysis, which aims to calculate the difference between an approximate number, function, or program method and their exact value. the difference results from using finite digits to represent numbers in computer. there are several different approaches on the topic. simulation-based approach attempts to run both types of programs with a selected set of inputs, and then observes the corresponding roundoff error. although this approach is easier to be carried out, it leads to a trade-off between the accuracy and the speed of the method. another approach is using mathematical reasoning, in which giraud et al.



one important technique in our testing method is the use of optimization methods. they are ongoing research topics in not only theoretical fields but also practical applications. our steepest ascent in algorithm 1 shares the same ideas with the discrete steepest descent method in the paper of ng et al.. their method, entitled the discrete global descent method, can return optimal global minimizers for functions that agree with their three reasonable assumptions. recently, hvattum and glover combine traditional direct search methods and scatter search to find local optima of high-dimensional functions. however, because our function l is black-box, these inspiring methods are not viable to be used here. to solve our problem, we choose ga and ts, the most popular, powerful probabilistic global optimization methods from which many hybrid algorithms are derived.



for future work, we plan to investigate quasi-monte carlo methods to calculate a metric based on integral of the loss function and some variations of it. we also plan to strengthen our approach by taking into account the implementation of the functions. this source code analysis may help us identify parameters or variables of the functions that have a stronger effect on the precision loss. this information may help heuristic algorithms to converge faster and may provide the programmers some hints to refine or fix their code.



this work is supported by the research project no. qgtd.09.02(granted by vietnam national university, hanoi) and panasonic r&d center vietnam. we also thank hong-hai nguyen, ngoc-khoa pham, and hieu tran at panasonic r&d center vietnam as well as anonymous reviewers for their comments on the earlier version of the paper.



