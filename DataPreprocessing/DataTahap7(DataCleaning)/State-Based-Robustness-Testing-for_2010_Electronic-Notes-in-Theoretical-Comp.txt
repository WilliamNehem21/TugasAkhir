existing robustness testing tools such as ballista and jcrasher test apis with random and preset inputs to check whether the programs crash or not. the authors did empirical studies on unix shell programs and java classes respectively. they detected interesting robustness defects.



on the other hand, many verification/testing techniques based on finite state machine(fsm) have been proposed for traditional software as well as component software. they define coverage criteria and algorithms to generate test cases for both unit testing and integration testing. but they focus on verifying whether functional specifications are correctly implemented. to our knowledge, it is new to use state model to test robustness.



the rest of the paper is organized as follows. the next section introduces components and their robustness problem. section 3 describes the methodology of the state machine based testing framework. experimental results and evaluation of the prototype tool are presented in section 4. section 5 surveys literature works. finally we conclude the paper and describe the future work.



semantics of reactive programs is defined by the notion of reactive designs with an additional boolean observable wait that denotes suspension of a program. design d is reactive if it is a fixed point of h, i.e. h(p)= p, where



crash should be refined to concrete phenomenons on different platforms. for instance, in java, an unhandled exception is thrown to upper levels of the stack frames until it was caught in one level. both the component and its call site are suspended. detailed mapping from the crash designs to java is given in section 3.3.



we implement the test framework for components implemented in java and the following test case generation mechanism assumes such testing targets. nevertheless, the approach can be ported to other platforms. test inputs are generated based on the method calls on the paths. for a method call, an concrete parameter is generated to replace each formal parameter. instead of creating serializable objects and restore them at runtime, we generate java statements which creates them. our approach avoid managing any external object base. a java metamodel is adopted from octopus. an ojoperation instance is constructed for each method call, and an ojparameter for each parameter. the objects are then translated junit test cases.



the recursion stops when it reaches a primitive type. we also limit the recursion depth to be less than 5, to avoid possible infinite loop and make the experiment more practical. when a construction reaches 5 levels deep an null reference is returned. this limit is adapted by our experiment experience.



when a parameter is bounded by pre-conditions, the random generator narrows the sample space accordingly. in rcos, ocl constraints can be applied to notate a transition in state machine. our prototype tool abstract ocl notations and use them for effective random generation. for instance, in the divide example in introduction, the pre-condition is y= 0, so the random generator pick a random value in[min int, 0) and(0, max int]. 6



to test robustness, an invalid method call should be provided at the final step. for invalid inputs(iv1), parameter lists are generated the same way as we do for valid calls, but with at least one parameter replaced with an invalid value from a pool for corresponding type described below. suspicious values which often cause problems are also included. note that static type checking and refinement typing could make it impossible to feed some invalid inputs.



unchecked exceptions, subclasses of runtimeexception. programmers can throw an unchecked exception without declaring it in the throws list. an unchecked exception might indicate a broken contract. for example, an arrayindexoutofboundsexception is thrown when beginindex is negative for string.substring(int beginindex, int endindex). it could also be due to a bug in the component.



unchecked exceptions thrown to test script without being declared. this will cause the client code to hang, and propagate the exception to call stacks. instead, a robust component would catch the unchecked exceptions and return an information message to its client code. an unchecked exception might be due to either erroneous parameter from client code or the component implementation. during development, the programmer should try to expose all of them to test script. but components shipped as products are supposed to catch them and provide mechanisms for client code to understand the situation, rather than rudely terminate the process.



user-defined checked exceptions, which indicates the component is in wrong state and not performing its functionality. we provide a customization point for testers to add component-defined exceptions to indicates an erroneous state of the component. this is similar as returning a positive integer in c functions to indicate certain error in the method call.



any reported failure indicates that the component crashes. the stack trace of this exception pinpoints the call hierarchy how robustness defects are triggered. corresponding test case and the path of state transitions are available for reproducing and debugging the problem.



we analyze the unchecked exceptions and find several code segments which optimistically assume the parameters to be valid. for example, the nullpointerexceptions traces back to line 100 of circularbuffer.java, where the following statement tries to copy a null buffer, without any safety checking.



for the former, random string and int value are generated and fed to stateless buffer which are newly initialized. the fuzzy testing detects the nullpointerexception. however, the other exceptions are never thrown because the testing always starts on an empty buffer.



state machine is also used for integration testing of component based software. gallagher et al. use interacting state machines with class variables to generate combined class states and component flow graph, so as to get test cases upon them. ali et al. combines collaboration diagram and state machines, and produces state collaboration test model for testing. those approaches extend basic uml diagrams for integration testing, but assume the components themselves are correct. the latter is the focus of our work.



on the other hand, research on robustness testing for api has produced several tools, mainly based on the idea of random testing. fuzz and ballista conduct study on unix and posix implementation. jcrasher tests java programs with pre-set values for each data type. their advantage lies in that they do not need additional model other than api specification. their targets are api, rather than general components with rigorous specification of interface and contract. compared to our approach, a disadvantage of these tools is that the units under test are stateless. it stops them from identifying problems which only occurs in certain states of a component.



we would like to thank the anonymous reviewers for their valuable comments. this work is supported by the national natural science foundation of china(no. 60603036 and no. 60673114) and 863 of china(no. 2006aa01z165 and no.2007aa010302). it is also supported by highqsofd and htts funded by macao science and technology fund.



