in this paper, we study how to collect n balls moving with constant velocities in the euclidean plane by k robots moving on straight track-lines through the origin. since all the balls might not be caught by robots, differently from moving-target tsp, we consider the following 3 problems in various situations:(i) deciding if k robots can collect all n balls,(ii) maximizing the number of the balls collected by k robots, and(iii) minimizing the number of the robots to collect all n balls. the situations considered here contain the cases in which track-lines are given(or not), and track-lines are identical(or not). for all problems and situations, we provide polynomial time algorithms or proofs of intractability, which clarify the tractability-intractability frontier in the ball collecting problems in the euclidean plane.



we consider the problem of collecting n balls(or objects) moving around by using k robots. we often encounter this kind of situation as real-world applications(e.g.,[8,9]). for example, supply ships resupply patrolling boats in the sea, and aircraft must intercept a number of mobile ground units. in the first example, boats and ships correspond to balls and robots, respectively. the problem can be seen as a natural extension of the classical traveling salesman problem(tsp) and was studied under the names of moving-target tsp and kinetic tsp.



in the classical tsp, we are given a set of balls(or cities) associated with the distances between each pair of balls. the objective is to computed a shortest tour that collects all the balls by a robot(or visits all the cities by a salesman). in the moving-target tsp, the balls collected by a robot are not stationary but moving around. clearly, moving-target tsp is np-hard, since classical tsp is a special case of moving-target tsp in which the velocities of all objects are permanently 0.



in the moving target tsp(or kinetic tsp), it is assumed that any robot can move faster than any ball, and hence robots can always collect all balls. however, in some scenarios(e.g.,[4,15]), it is natural to consider the case in which robots cannot collect all balls. this situation results from the fact that robots cannot move faster than balls and/or robots can move only in the restricted spaces such as lines. in this situation, the following fundamental problems have to be studied.



the rest of the paper is organized as follows. in sections 2 and 3, we investigate the bcps when the track-lines lj are given in advance. section 2 deals with the case in which all lj are identical, and section 3 deals with the general case. section 4 considers the bcps when lj are not given. section 5 concludes this paper and discusses some possible extensions of the bcps.



we start with the most fundamental situation that a single robot tries to collect all n balls. we first exclude two kinds of balls:(1) the balls which do not cross the track-line l and(2) the balls which move on l. note that the robot never catches the balls of type(1). let bi be a ball of type(2). if bi



theorem 2.1 it can be checked in o(n log n) time if all balls can be collected by a robot moving on a given track-line. furthermore, if so, such a robot schedule can be computed in o(n log n) time.



this section considers the case when more than 1 robot can be used. let us first consider the problem(iii), i.e., minimizing the number of robots to catch all the balls. we show that the problem can be solved in o(n log n) time by using the technique shown in the previous section.



since the demand function demand is integer, one can compute a minimum cost integral flow. although the details are omitted due to the space limitation, we can show that integral feasible flows correspond to k-robot schedules, and moreover, such minimum cost flows correspond to optimal k-robot schedules. minimum cost flow problem has been extensively studied[1,5]. here we make use of primal-dual algorithm with least-cost augmenting paths to the network



theorem 4.5 it can be checked in o(n2 log n) time if there exists a track-line l such that a robot can collect all balls by moving on l. furthermore, if so, such a robot schedule(including l) can be computed in o(n2 log n) time.



