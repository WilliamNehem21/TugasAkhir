the time-dependent model can solve efficiently the earliest arrival problem by reducing it to a shortest path computation on g, under the assumption that a transfer from one train to another can be performed in zero time. however, this is clearly not a realistic assumption. moreover, this model cannot solve the minimum number of transfers problem, since even if we keep track of when there is a transfer and use for each edge the event that avoids having a transfer instead of the earliest one in time, it will not provide us with the optimal solution. when we have no other option but to make a transfer, there is no way to choose the best event among all possible ones.



the rest of the paper is organized as follows. in section 2, we present the original time-dependent model and discuss the solution of the eap with zero transfer times. in section 3, we present our modelings through platform and train route information for the realistic version of eap with constant or variable non-zero transfer times. the modeling and solution to the mntp is provided in section 4, while section 5 discusses the solution to the combination of eap and mntp. section 6 presents several heuristics that speed up computations of edge costs. in section 7 we present our preliminary experimental results, and we conclude in section 8.



the correctness of the above modeling can be seen as follows. no two trains can be at the same platform at the same time. furthermore, the time interval, from the moment that a train arrives at a platform until the moment that the immediately next train that stopped at the same platform departs, is sufficient for a passenger that arrived with the first train to step down and get on the second one. this means that if the information concerning the platforms is available, then the above model can solve the eap with respect briefly mentioned in. again, let g=(v, e) be the new graph model whose node and edge sets will be defined in the following. we assume that we are given a set of train routes and their respective time schedules.



assumption 3.3 serves the purpose of ensuring that waiting at stations to take the next train of the same train route cannot be beneficial. in other words, given that assumption 3.2 holds, taking the first possible train from a station a to some station b will not result in missing some connection from b that could be used if we had followed some train(of the same train route) that departed later than the one we followed. it will be seen later that assumption



the correctness of the above model is similar to that of its corresponding model based on platform information(cf. section 3.1.1). moreover, the algorithm given in section 3.1.2 can also be used to solve the eap under the new modeling. its correctness follows again by the non-negative delay assumptions of f and g, and by the fact that both functions are non-decreasing(f by assumption 3.2, and g by construction).



we now turn to the correctness of the model. we give a proof for the case where we use the modeling of eap based on train routes with variable transfer costs(cf. section 3.2.2). the other case(constant transfer costs; cf. section 3.2.1) can be proved similarly.



consider the case of variable transfer costs within the same station. note that the different time needed for each transfer at some station between the same train routes is caused by the fact that the trains that perform the same route do not stop every time at the same platform of the station. the input regarding the time for the transfers takes into consideration the platforms at which the trains stop. this means that for every event e there must be some information about the first train of every other train route that can be followed. as a result, for the case of variable transfer costs, each edge that pu was reached by use of e. having one such pointer very nexte,i' for all pu, we can relax at once the outgoing edges of all nodes of station s belonging to r, and thus avoid the relaxation of all other edges(not in r) among those nodes. this means that we no longer need to store any other information regarding these latter edges. note also that the same traine pointer is very nexte,i so same train pointers need not be stored explicitly either.



the implementation for the original time-dependent model uses binary search and it was written using the leda parameterized graph type. the implementation for the extension with train routes contains the index values at the route nodes, as described in section 6. we have also used a heap-based priority queue that bears a great resemblance to the lazy variant of pairing heaps(see). special care has also been taken to avoid the initialization steps to both models at the beginning of each query.



