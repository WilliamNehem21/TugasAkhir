service-oriented computing(soc)[11,16] has now become the prominent paradigm for distributed computing and e-commerce, creating opportunities for service providers and application developers to use services as fundamental elements in their application development processes. it provides a mean to design service-oriented applications(soas) that span organizations and computing platforms by exploiting and composing services available over the network. nowadays, an increasing number of companies and organizations implement only their core businesses and use other application services over the internet to support their needs. services are platformand network-independent components that support rapid low-cost composition of distributed applications and can be described, published, discovered, and loosely coupled in novel ways.



object access protocol(soap), which intend to provide languages that allow easy integration of services. some other initiatives such as the business process execution language for web services(bpel4ws or bpel), are focused on representing service compositions where flow of a process and bindings between services are known a priori. despite all these efforts, composition of services still remains a highly complex task, and automatic composition of services is a critical problem. conspicuously, the principles of component-based software development(cbsd) are not yet integrated in the various methods that currently exist for custom composition of services.



until now, most of the existing methods only describe how to communicate with a service(the syntax), but not the expected effects of such communications(the semantics). therefore, the information that can be obtained from the service descriptions given in these approaches is limited to the signature of operations provided by the services. in particular, no information about the effect of invoking the operations can be obtained from the service descriptions.



the organization of this paper is as follows: section 2 introduces the concepts of interfaces, contracts and services. section 3 and section 4 show how we can put contracts and services together to form more complex contracts and services. relationships between services, including bisimulation and bisimulation up to a natural transformation, are presented in section 5. section 6 investigates the refinement relations for contracts and services respectively. section 7 presents a family of operators on composing services. final remarks appear in section 8.



in a service-oriented application, interfaces are used to model the seams between different services. a service encapsulates a number of operations through a public interface which provides limited access to the service. by declaring an interface, one can specify the desired behavior type of a service independent of its implementation.



taking into account the nature of services, an interface should be comprised of three kinds of features: the type feature, the variable feature and the value feature. the type feature includes the information that is state-independent and gives the data context in which the service is placed. the variable feature denotes a family of variables and keeps the information that is state dependent. the value feature accounts for the observations and actions that the service may perform.



we first come to the notion of contracts. it is clear that for most services it is necessary to have developers working on different services simultaneously to reduce overall schedule time. to make developers work with a reasonable degree of independence, the services and interfaces should be identified and specified with no ambiguity. a contract is such a clear, unambiguous statement, which says precisely what the essential properties of the services(interfaces) are.



in the previous section we discussed interfaces, contracts as interface specifications, and single services as instantiations of contracts. one of the most important characterizations of soc technology is the support for building complex applications by composition of services. formal tools for this purpose can be borrowed from category theory, the idea is to put service units as coalgebras together to make applications, which are still coalgebras. hence, we need to provide a notion of morphism between coalgebras of different functors(i.e. services with different interfaces) and build a category of these coalgebras. before that, we first have a look at the interface morphisms and contract morphisms.



often a service is specified via a collection of actions over a shared state space, each of which is specified by a contract and can be taken as an independent service. we can pack such different services together and get an aggregated service, which has an additive interface. furthermore, its behavior is unique and already known from that of its component services.



in general, a refinement of contracts involves two contracts: an abstract one and a concrete one as its refinement. the idea involved in contract refinement is that the concrete contract adds implementation details which are left open in the abstract contract. for example, it can reduce the level of underspecification/ nondeterminism.



in the case of large-scale applications consisting of many services, it is not practical to consider the whole system each time we want to refine one of its services. on the contrary, we prefer to do the refinement steps locally for the particular service being considered. fortunately, behavioural refinement is well behaved in this respect.



in this section, we move on to a brief introduction of service composition. composition enables prefabricated services to be reused by rearranging them in ever-new composites. resulting composite services can be used as basic services in further compositions or offered as complete applications and solutions to service clients. orthogonal to the vertical refinement of concrete services from abstract specifications, composition operations are needed to support the horizontal decomposition of the applications into component services. that means, an application is represented by specifying its component services and their composition. by stating how services are composed together, we can get a view of the architecture of the application.



in this paper, we have shown how a formal framework for assisting service-oriented applications development can be defined around the notions of interface, contract, service and corresponding notions of morphisms. in such a formalism, services are described by coalgebras whose signature functors are derived from the corresponding interfaces, and satisfy the axioms given in corresponding contracts. this work provides a unifying framework for different notions(interfaces, contracts and services) in soa development.



with respect to the composition of services, we adopt the categorical approach which can be traced back to the work of goguen et al. indeed, the category of services forms the cofibration over the corresponding category of interfaces, and thus provides the starting point for the definition of combinators for services. preliminary work can be found in.



