notwithstanding all these advantages, using jni in its most primitive form is tedious and error prone. using raw jni is like assembly programming on the jvm. our mission is to make interoperation between java and haskell via jni as convenient as programming in java directly.



in general, each native method implementation gets an additional jnienv argument, and a jobject object reference(or a jclass class object for static methods). the jnienv argument is an interface pointer through which the native method can communicate with java, for instance to access fields of the object, or to call back into the jvm. the jobject(or jclass) reference corresponds to the this pointer(or class object) in java.



haskell interpreters, such as for example hugs, do not naturally support statically exported functions. fortunately, we can also dynamically export haskell functions as if they are c function pointers 3. dynamically exported haskell functions are extremely powerful and make programming with callbacks very easy, as the following example demonstrates.



the diethep component leverages on the foreign function interface we defined for haskell in previous papers and allows us to view any haskell module as an ordinary dll.clients of diethep see no difference(except for the extra flexibility of specifying the calling convention at runtime when using getprocaddressex) between using an ordinary dll via the kernel32.dll or using the diethep primitives. going through the extra level of indirection of diethep allows us to abstract from the underlying haskell implementation(provided of course that it supports the diethep interface).



at this stage, we have shown the bare bones of the integration between haskell and java. we will make the binding more user friendly in a number of steps. first we will abstract away commonly occurring patterns. second, we hide the explicit threading of the jnienv argument through all jni related code. next, we will use overloading to hide the encoding of result-types in jni methods.



the jnienv pointer is only valid in its associated thread, so we cannot put it in a global variable just like that. the javavm pointer however does remain valid across different threads and we can safely put that in a global variable. to do that, we need to get hold of the javavm pointer in which the current thread is running, and we postulate that(current and future) jni implementations provide some way of doing this. we will follow one of the suggestions 4 of liang(, section 8.1.4) that relies on the fact that the current jvm releases do not support the creation of more than one jvm instance inside a single process(, page 254).



before we start using overloading to simplify jni, we have to make a short digression on marshalling. in section 3.1, we assumed that we had a function marshallstring:: string-> io cstring that takes a haskell string and returns a pointer to a null terminated array of characters.



there are several things to note about the above code. first of all, it intimately relies on lazy evaluation, function methoddescriptor only depends on the types of its arguments and not on their values. secondly, the call to unsafeperformio is there solely to strip the io from the result type of the callmethod function, which is completely safe.



the above situation is the only case where we have to explicitly up an upcast in haskell; the question remains how to deal with the occasional need for downcasting. in java, it is possible to unsafely cast between arbitrary classes, which might raise a dynamic classcastexception. using the haskell cast to do an illegal arbitrary cast will either result in a classcastexception or other exception being thrown in java(which is checked using the jni entry exceptionoccured), or a call to one of underlying the jni entry calls will signal an error(usually by returning null). the haskell wrapper will catch these and propagate the errors to the haskell level by raising a usererror when returning. in other words, using cast to simulate arbitrary java casting in haskell is no more safe or unsafe than arbitrary casting in java.



lambada provides tool support in concert with hdirect. hdirect is idl based, so provided we can derive an idl specification from a java class or interface, hdirect will take care of generating valid haskell stubs. we do this by providing a tool that uses the java reflection api to generate idl interfaces(annotated with a couple of custom attributes) corresponding to java classes or interfaces. provided with that information, hdirect is then able to automatically generate the haskell callable stubs we have described in this paper. hdirect is also capable of generating java callable stubs to haskell implemented classes/methods.



