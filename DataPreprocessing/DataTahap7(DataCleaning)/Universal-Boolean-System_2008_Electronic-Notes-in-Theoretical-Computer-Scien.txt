boolean interaction systems and hard interaction systems define nets of interacting cells. they are based on the same local interaction principle between two cells as interaction nets but do not allow that the structure of nets may evolve. with boolean nets, it is not possible to create or destroy cells or links between existing cells. they are very similar to hardware circuits but based on an implicit rendez-vous information exchange mechanism.



hard interaction systems are, in fact, a variant of interaction systems where rules are constrained in such a way that the structure of nets can not change. rules do not create or destroy cells or links between cells. they can only change the symbol of agents and the port that is principal.



however, none of these systems can be considered as universal hard interaction systems because the rules that define the systems do not preserve the structure of nets. the paper investigates this problem and shows how we can simulate every hard interaction system by a universal boolean interaction system. in fact, boolean interaction systems are hard interaction systems where the cells only exchange binary information.



in fact, the ports form a circular list that are represented on the circle. the principal port is marked by a triangle and the name is put inside the circle. the(dynamic) state of an agent is only determined by its name and the position of the port that is principal.



an interaction net can evolve when two agents are connected through their principal ports. an interaction rule is a rewriting rule where the left member is constituted of only two agents connected through their principal ports and the right member is any interaction net with the same interface. for hard interaction systems, the rule must preserve the structure of nets. thus the right member of a hard interaction rule is also constituted of two agents with the same arities as the agents of the left member of the rule and they must be connected by a link that corresponds to the same ports as for the left member. in fact, the right member of a rule is the same as its left member except that names may be different and the ports that are principal may be different(at least one principal port must be different).



a hard interaction system i is deterministic when(1) there exists at most one hard interaction rule for each couple of different agent and(2) there exists at most one hard interaction rule for the interaction of an agent with itself. in this case, the right member of this rule must be symmetric from the central point(this is necessary for a deterministic system). a hard interaction system i is complete when there is at least one rule for each couple of agent. in this paper we consider deterministic and complete systems. with these systems, we can prove that reduction is strongly confluent 4. in fact, this property is true whenever the system is deterministic.



the other kinds of logical operators like or, not or and are also easy to simulate. in fact, every vector of boolean functions with several inputs and several outputs can be simulated by a boolean agent and its boolean interaction rules. but, the nand and the boolean duplicator are enough to simulate every vector of boolean functions. as an example, an inverter can be simulated by one nand agent and one duplicator agent:



to finish with the different bricks of our universal boolean interaction system, we need a boolean device that receives a validation that enables or not an i/o interaction. if the communication is enabled the channel writes the input bit to the i/o port, waits for a boolean interaction, reads the bit and copies it to the ouptut. if the communication is not enabled, the channel copies the input bit to the ouput without interacting through its i/o port.



a boolean interaction controller is a device that has a state, a number k of input/output boolean channels and a transitional function. the controller chooses one of its input/output channel, gives a boolean value to the output(in fact the same value is given to all the input/output channel), waits until it receives a boolean value from the input/output channel and, following its transitional function, changes the state. the controller repeats indefinitely these same steps.



