iterative processes based on fractal geometry is a common way to produce complex objects like terrains, clouds, trees, textures[1,2]. generally, these processes used stochastic parameters to model natural objects with non-strict repetition of the same pattern. these algorithms are widely used in computer graphics but few in computer aided geometric design(cagd), even if resulting shapes present interesting properties like, for example, rough surfaces to improve heat exchange, porous volumes needing less material or simply for their aestetic value. the purpose of our research is to develop a generic iterative geometric modeler for industrial applications associated to additive manufacturing. a first application, related to energy saving which is a crucial issue for industry, consists of designing lighter objects while maintaining high mechanical properties. to address this challenge we suggest to consider multiscale controlled lacunary structures which fill a



at this point, our cifs-based cagd-modeler does not handle nurbs, and this is the main purpose of this paper. we prove that nurbs tensor-surfaces of any degree can be represented as cifsautomata and so can be integrated in our iterative modeler. then we avail this integration for new applications.



first of all, we introduce in section 3 all the notations and mathematical background that will be used in the paper. we explain two usually separate research fields: ifs and their extension cifs in a first part and nurbs and their blossoming representation in a second one. our work is placed at the cross of these two research fields.



the last step to complete the needed material, is the introduction of free-form shapes modeling with cifs. it is straightforward by building the attractors in barycentric space and then project it into the modeling space according to a set of control points. the final modeled shape is f= pa, where p=[ p0 p1... pk] is a line



b-splines are a user-friendly tool to define smooth parametric curves by a list of points called control points that form the control polygon. a b-spline curve c of degree d is defined from a control polygon composed of d+ 1 points p=[ p0... pd].



in this section, we prove that nurbs with any-degree can be represented as a cifs-automaton. the number of states is directly related to the degree of the nurbs. first the simplest cases(quadratic and cubic) are presented, then the generalization to any degree is explained and mathematically proven by generating words provided grammar rules.



by generating several tensor automata from curves-automata of different degree, some properties appear. the first one is once a state is leaved, it is impossible to turn back to it. the second one is the number of stationary states(i.e. states that own at least one transition to themselves) is always 3 for curves-automata(labeled as left, right, and uniform); other states are transitory: they are active only once. the number of stationary states of a tensorautomaton is the product of the number of stationary states of the two original automata: it is 3 for curves, 9 for surfaces, 27 for volumes. whatever the number of stationary states, there is always only one state, called the uniform state, which loops to itself for all transformations. this uniform state is the ifs that generates uniform b-splines shapes(curve, surface, volume).



even if low-degree cases may be quite direct to integrate, a real issue will take place with higher degree. this comes from the fact that the neighborhood of vertices needed to compute a piece of surface is composed of a central vertex(for quadratic case) or a central face(for cubic case) and a unique ring of vertices that surrounds it. this ring is composed of vertices that share a face with the central vertex or a vertex of the central face. in these cases, the possibilities of irregularities are very limited and can be all listed. for higher degree, the patch owns several nested rings; thus the possibilities of irregularities are subject to combinatorial explosion. the solution proposed by cashman et al. for any odd-degree should be closely studied to find a solution to fill this gap.



ties ensure that there is a length 2n subword w of mk+1 such that wn or wn+1 matches wd. in the case where wd matches wn, then we define the subword v of length n by deleting all values of odd ranks in w, and v satisfies l(v)= w. in the case where wd matches wn+1, then we define the subword v of length n by deleting all values of even ranks in w, and v satisfies r(v)= w. by construction, v is a subword of mk with vd= d and after applying the recurrence



