graphical diagrams are the main modelling constructs offered by the popular modelling language uml. because textual representations of models also have their benefits, we investigated the integration of textual and graphical modelling languages, by comparing two approaches. one approach uses grammarware and the other uses modelware. as a case study, we implemented two versions of a textual alternative for activity diagrams, which is an example of a surface language. this paper describes our surface language, the two approaches, and the two implementations that follow these approaches.



the popular modelling language uml offers graphical diagrams for the construction of models. research has shown, however, that graphical languages are not inherently superior to textual languages and that both types of languages have their benefits. therefore, we investigate the integration of textual and graphical languages, to be able to exploit the benefits of both types of languages.



the remainder of this paper is organized as follows: section 2 introduces a number of relevant concepts. a specification of the surface language we implemented, and a description of its embedding in the uml and the transformation from surface language to activities is given in section 3. the approach based on grammars is described in section 4, and the approach based on models and metamodels is described in section 5. a number of other applications involving the integration of textual and graphical languages, and the transformation of models constructed using multiple languages are discussed in section 6. section 7 discusses how our work relates to earlier work. we draw conclusions and discuss future work in section 8.



which actions are executed is based on the flow of tokens. there are two kinds of tokens: control tokens and object tokens. controlflows, which are depicted by arrows connecting activitynodes, show how control tokens flow from one activitynode to the other. objectflows, which are depicted by arrows connecting outputpins and inputpins, show how object tokens flow from one action producing an object to another action that uses this object.



every model conforms to a metamodel, which defines the elements that play a role in the model. if a model conforms to a certain metamodel, each element of the model is an instance of an element in that metamodel. the uml defines a number of diagrams, which can be used to depict certain parts of a model. there are diagrams that depict the structure of a model, diagrams that depict the behaviour of parts of the model, etc. these diagrams offer a graphical representation for instances of elements in the metamodel.



a surface language offers an alternative notation for these diagrams. in our case, instead of a graphical representation, a textual representation is given for instances of elements of the metamodel. other names for surface languages are surface action languages or action languages.



opaquebehavior uses a list of text fragments and a list of language names to specify behaviour. the first list specifies the behaviour in one or more textual languages and the second list specifies which languages are used in the first list. opaquebehavior can be used to specify behaviour using, for instance, fragments of java code or natural language. in our case, the first list contains a specification of behaviour using our surface language and the second list indicates that we use this surface language.



in this section, we describe the implementation of our surface language that uses a tool for text-to-text transformations. tools for text-to-text transformations are often referred to as grammarware. we start by describing our approach in section 4.1. section 4.2 describes the tools we used for the implementation and some important aspects of the implementation.



the first step of the transformation makes it possible to retrieve the identifier of an element in the second step. each element in the xmi representation of a uml model has a unique identifier. actions that refer to other elements, such as addvariablevalueactions and createobjectactions, refer to these other elements using their identifiers. an addvariablevalueaction refers to a variable using the identifier of that variable; a createobjectaction refers to a classifier using the identifier of that classifier.



we implemented the transformation described in section 3.3 following the approach described in section 4.1 in the language asf+sdf, using an ide for that language, called the meta-environment. we give a short description of this language and discuss some of the details of our implementation below.



the language asf+sdf is a combination of the two formalisms asf and sdf. sdf stands for syntax definition formalism. it is a formalism for the definition of the syntax of context-free languages. asf stands for algebraic specification formalism. it is a formalism for the definition of conditional rewrite rules. given a syntax definition in sdf of the source and target language, asf can be used to define a transformation from the source language to the target language.



both sdf and asf specifications can be exported by the meta-environment. the exported sdf specification can then be used by command line tools to produce parse trees and transform parse trees to text. the exported asf specification can be compiled to a fast command line tool suited for the transformation of such parse trees.



a disadvantage of the current implementation is that it can only parse one variant of xmi. most tools that import or export files in the xmi format use their own interpretation of the format. these vendor specific interpretations are often incompatible with other interpretations. because of this, our implementation is limited



this section describes the implementation of our surface language using tools for model-to-text, text-to-model and model-to-model transformations. tools that can perform transformations related to models are often referred to as modelware. section 5.1 describes our approach. section 5.2 describes the tools we used for the implementation and some important aspects of the implementation.



an advantage of this approach is that all transformations can be performed from within one and the same modelling environment. in contrast to the approach described in section 4.1, no models have to be imported or exported during the transformation process.



the openarchitectureware platform offers a number of tools related to model transformation: xpand is used for model-to-text transformations, xtext is used for text-to-model transformations and xtend is used for model-to-model transformations. xpand and xtend are based on the same type system and expression language. the type system offers simple types, such as string, boolean and integer, collection types, such as list and set, and the possibility to import metamodels. the expression language offers a number of basic constructs that can be used to create expressions, such as literals, operators, quantifiers and switch expressions.



we use xtext to parse and convert the extracted fragments of surface language to a format that is readable by xtend. because xtext uses antlr, the class of textual representations that can be parsed is restricted to those that can be described by an ll(k) grammar. a disadvantage of using xtext is that we had to modify our grammar for this reason.



dinh-trong, ghosh and france propose an action language based on the syntax of java. we decided not to implement their action language because their definition of the language contains a number of primitive types and java constructs whose relation to the uml is not specified. other important features of their language are that parameters that serve as input or output of an activity and attributes with multiplicity greater than one are not taken into account.



haustein and pleumann propose a surface language that is an extension of the ocl[4,10]. they embed ocl expressions in their language by adding an action to the uml that evaluates an ocl expression and returns the resulting value. we took a different approach, because we wanted to design and implement a simple alternative for activity diagrams that did not rely on or incorporate other languages. incorporating an expression language like the ocl in our language would introduce a large number of language constructs that have no relation to our primary interest, which is the specification of behaviour.



sdf is based on sglr, a scannerless generalized lr parser. as an alternative to using sdf, sglr can be used to parse textual representations of models. since sglr can parse arbitrary languages with a context-free syntax and context-free languages are closed under union, multiple syntax definitions can be combined into one without any modifications to the original syntax definitions, as is the case for sdf.



after parsing the textual representations of models, the resulting parse trees have to be transformed. besides using special purpose transformation tools, generic programming languages can be used to manipulate the parse trees. the source transformation language txl is an example of a special purpose language. paige and radjenovic, and liang and dingel have experimented with txl in the context of model transformation. although their research also deals with using grammarware for transformations related to models, it differs from ours because it does not focus on the integration of text-based and metamodel-based languages.



tcs is an alternative for xtext. it is suited for both text-to-model and modelto-text transformations, and uses one specification to define the transformations in both directions. in the case of tcs, the main constructs are called templates. these templates are similar to the rules of xtext; each template specifies the textual representation of an instance of an element of the metamodel.



the approach using grammarware transforms models containing fragments of surface language to plain models by rewriting the xmi representations of these models. a downside of this approach is that dealing with the xmi representation of models lowers the level of abstraction of these transformations. the current implementation can only parse one variant of xmi, but a future extension that introduces an intermediate language poses a solution for this shortcoming.



