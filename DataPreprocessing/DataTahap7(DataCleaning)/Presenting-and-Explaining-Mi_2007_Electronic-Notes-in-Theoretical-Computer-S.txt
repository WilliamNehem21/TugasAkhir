the mizar proof language has both many human-friendly presentation features, and also firm semantical level allowing rigorous proof checking. both the presentation features and the semantics are important for users, and an ideal mizar presentation should be both human-friendly(i.e. very close to textbook presentations), and also allowing fast access to the detailed semantics and detailed proof explanations. this poses several questions, problems and choices when presenting original mizar texts, presenting results of semantic queries over the mizar library, and also when presenting texts produced directly on the semantical level, e.g. by automated theorem provers. this paper discusses solutions to these problems, and particularly implements an initial system for presenting detailed explanations of atomic mizar inferences. this is done by the cooperation of the mizar xml presentation tools, the mml query system, and automated theorem provers working on the mptp semantic translation of mizar.



on the other hand, the main purpose of having formal proof languages is their mechanized proof checking. this means that all the above mentioned presentation features ultimately have to be transformed to a proof-checkable level with clear semantics. in mizar, this is done in several compiler-like passes, which gradually transform the syntactic features to their semantic counterparts(possibly informing users about syntactic errors, etc.), and finally check on the semantic level the correctness of the proofs.



this semantic level directly serves for a number of purposes: it is used by mizar itself for the proof checking and for storing the mizar internal database. it is also used in the mml query searching and presentation system. it also serves as the basis for the formats used in the momm system, the mizar proof advisor and mptp[14,17] systems, and for the format used for semantic browsing in the mizarmode[15,3].



it should be noted that this semantic level still expresses the mizar logic, not the standard untyped first-order predicate logic used in current automated theorem provers(atps) like e, vampire, spass[20,19], otter or prover9. further processing is needed when that logic is transformed to standard predicate logic: e.g., the mizar types need to be encoded, all knowledge used implicitly by mizar(e.g. type hierarchies) has to be expressed explicitly, etc. this is now done in a certain way(characterized mainly by encoding types as predicates) by the mptp system, however there are also many possible choices in this transformation. conversely, this transformation is again generally many-to-many, there will usually be multiple ways of encoding pure predicate logic in the mizar logic.



recently, the mizar semantic level has been completely xml-ized, and xslt tools 6 are being developed for creating linked html presentation of mizar 7 from it. the xml-ized semantic format has been designed so that it is relatively easy to do the html linking of symbols and other mizar resources, and it has been modified several times(usually by adding additional information as xml attributes) using the html presentation bottlenecks as a feedback. it currently allows quite faithful re-creation of the original mizar presentation(see section 3 for more details), while it also reveals a lot of information computed by the mizar system(e.g. various formulas computed implicitlyfor stating mizar properties, correctness conditions, etc.), which are normally not accessible to mizar authors. the main point of using pure xslt for creating the html presentation is that all major browsers today support the xslt language. this means that mizar authors can now load the xml file(a by-product of the mizar verification) directly into their browser whenever they need it during the authoring, and thus immediately get all the additional information contained there.



one at the mizar site 9. the main difference at the moment is the linking of the by keyword, which leads to the mml query rendered atp proof objects, also available at our site 10. we provide a simple example below.



15 note that the constant c1 has been renamed by our system to c11001. this is actually c11001 in the html rendering, the subscript encodes the current mizar proof level. this is a result of the mptp system naming conventions, which need to provide unique name to every mptp object.



