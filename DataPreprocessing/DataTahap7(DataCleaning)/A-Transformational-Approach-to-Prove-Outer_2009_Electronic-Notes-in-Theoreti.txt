we present transformations from a generalized form of left-linear trss, called quasi left-linear trss, to trss such that outermost termination of the original trs can be concluded from termination of the transformed trs. in this way we can apply state-of-the-art termination tools for automatically proving outermost termination of any given quasi left-linear trs. experiments show that this works well for non-trivial examples, some of which could not be automatically proven outermost terminating before. therefore, our approach substantially increases the class of systems that can be shown outermost terminating automatically.



a lot of work has been done on automatically proving termination and innermost termination. however, also termination with respect to the outermost strategy makes sense. for instance, this is the standard strategy in the functional programming language haskell, and it can be specified in cafeobj and maude. we will focus on the most general variant of the outermost strategy: reducing a redex is always allowed if it is not a proper subterm of another redex. termination with respect to this strategy we shortly call outermost termination. this is different from the approaches for proving termination of haskell presented in[7,16], which feature proving termination for a specific set of terms(ground instantiations of a



now for sure the trs remains non-terminating since it still contains the first nonterminating rule. but we expect the combined system to be outermost terminating. this is the kind of examples for which we want to prove outermost termination automatically.



until now cariboo was the only tool having facilities for proving outermost termination. its approach is a stand alone one, while our goal is to make use of the huge effort of the last years to improve the power of termination tools. for making use of the impressive power of termination tools, the natural approach is to make a transformation from trss to trss such that the modified termination property(in our case outermost termination) of the original trs can be concluded from termination of the transformed trs. in the past, a similar approach was successfully applied to context-sensitive termination and liveness problems.



the presented approach deals with ground outermost termination. we will see that when fixing the signature there may be a difference between outermost termination and ground outermost termination, but by adding fresh constants there is no difference any more. therefore it is not a restriction to focus on ground outermost termination.



using anti-matching we present two other transformations t2 and t3, based on irreducible contexts. since these contexts can only capture the first level of nesting, this approach is inherently incomplete. however, experiments show that for some examples these transformations are successful, while the transformation t1 gives rise to a problem that is too hard for existing termination tools.



this paper is structured as follows: after introducing the used notations in section 2, we present our basic transformation t1 and prove soundness in section 3. thereafter, we present our alternative transformations t2 and t3 using contexts in section 4. in these two sections, we assume that we can construct a set of terms that match those terms not being matched by a left-hand side. this problem of anti-matching is treated in section 5, which proves that our transformations can be applied automatically for quasi left-linear trss. in section 6 we give a short description of our implementation of the transformations and present a number of examples. we conclude in section 7.



however, this difference only occurs when fixing the signature. it is easy to see that by replacing variables in any infinite outermost reduction by fresh constants, the result is an infinite outermost ground reduction. for quasi left-linear trss adding one fresh constant suffices. hence, we may and shall restrict ourselves to outermost ground termination.



the idea of the first transformation is to only allow a reduction when a certain control symbol down marks the current redex. after having reduced a term, the control symbol is replaced by another control symbol up that is moved outwards. only when the root of the term is encountered, then the control symbol is replaced by the down symbol again. in order to find the next outermost redex, the symbol down may only descend into subterms when no left-hand side is applicable to the term. for this purpose, we need a set sl such that its elements match exactly those terms that are not matched by a left-hand side. such a set sl is called anti-matching, which is defined below.



for an infinite trs r, we clearly have that t1(r) is infinite, too. the trs t1(r) can also become infinite for a trs r that is not quasi left-linear, since then an anti-matching set sl might be infinite. this is demonstrated in section 5. for quasi left-linear trss however, we will prove the following theorem by giving a possible construction of a finite anti-matching set sl.



presented in the following are successful. these transformations do not use symbols down and up to find the next redex, but only allow to rewrite a redex when a so-called anti-matching context is found. this notion of anti-matching contexts is given in the following definition.



the above transformation t3 is still sound, i.e., from termination of a trs t3(r) one can conclude outermost ground termination of r, but we again have to omit this proof for space reasons. also for this transformation it can be observed that a finite trs t3(r) is only achieved if the trs r is finite and quasi left-linear.



we consider a term rewrite system r and a set l matching all terms that can be rewritten by r, for example l= lhs(r). for our transformations we have to find an anti-matching set sl that matches the terms which cannot be rewritten by r. clearly, this is only depending on the left-hand sides of r. one can imagine that there are several possible sets that satisfy this condition. our goal is to select the smallest such set and to be able to construct it finitely when this is possible.



amples. but their focus is on machine learning, therefore it is hard to directly apply their results. we also want to mention the concept of anti-patterns as introduced in. this is more general since it allows to introduce negation of patterns at



one might wonder why unification is considered, while term rewriting is concerned with matching. this becomes clear when formulating what kind of terms we are looking for: the set of terms that match those terms which are not matched by left-hand sides. this means we have to consider two matchings at the same time, when assuming that the set of variables are disjoint then this gives rise to a unification problem.



in the following we restrict ourselves to sets l that only contain linear terms. it should be observed that this also covers the case of a quasi left-linear trs r: for such a trs we can define l to be the set of all linear left-hand sides of r and have that l still matches the same terms as lhs(r), due to lemma 5.4. we want to show that for a linear set l the set sl is finite. for that purpose we need the depth of a term, which is defined as follows.



it can be observed that in the transformed trs there are no rules that allow the symbol down to descend into a term. this holds because we have sl={a}, such that no rules are created for it. the transformed trs can easily be shown terminating within a short amount of time by all of the considered tools. for the next example, this is not the case anymore.



this example could only be proven outermost ground terminating using the tool jambox, both aprove and ttt2 failed. however, the techniques used by jambox to prove termination, namely semantic labelling and polynomial orders, are also implemented in both of the other tools. hence, this clearly shows that proving termination is also strongly dependent on heuristics and/or search encodings.



as can be seen above, this example has non-linear left-hand sides for the function symbol f. however, these left-hand sides are all instances of the left-hand side f(x, y), which makes this trs quasi left-linear. hence, we only have to consider the set l={f(x, y), g(x)} of linear terms, from which we then compute sl to be sl={a, i(x)}. using this set, our transformation yields a finite trs t1(r6), whose termination can be proven using any of the three considered tools.



cariboo is unable to prove outermost ground termination of the trs r7, while the transformed trs t1(r7) can be proven terminating by all considered tools. also example 6.4 and both variants of example 6.5 cannot be proven outermost ground terminating by cariboo.



there are also examples where cariboo succeeds, whereas our transformation fails. first of all, cariboo can also handle examples that are not quasi left-linear, while our transformation is not applicable in this case. but there are also quasi left-linear examples where cariboo can prove outermost ground termination, but none of the considered tools can prove termination of the transformed trs. such an example is given below.



