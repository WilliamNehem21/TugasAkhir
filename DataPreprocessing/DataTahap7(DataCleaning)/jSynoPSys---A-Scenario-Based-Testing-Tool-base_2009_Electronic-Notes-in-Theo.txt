this paper presents the jsynopsys tool that implements the concept of scenario-based testing from b machines. this consists in describing execution scenarios, expressed as regular expressions over the operations of the system, coupled with intermediate system states that have to be reached when the scenario is unfolded. the tool relies on the bz-testing-tools engine, originally designed to perform symbolic animation and boundary test generation from b machines. the main advantage of our scenario-based testing technique is that it performs a full abstraction of the operation parameter values, that are instantiated at the end, when the scenario has been completely unfolded, using constraint solving techniques.



model-based testing, or black-box testing, consists in using a formal model, describing the behavior of the system, for both computing the test cases and computing the oracle. this latter that makes it possible to establish the conformance verdict that indicates whether the system conforms, or not, to the considered model. the computation of the test cases can be performed according to different techniques that aim at covering the model, depending on its kind. for example, a model formalized as a finite state machine(fsm) is traditionally covered by state exploration or transition coverage algorithms(such as the chinese postman algorithm). in the case of behavioral specifications of the system, where the operations are described using generalized substitutions, as in b, or through pre/postconditions,



we propose to use a constraint solver that is in charge of performing the animation of the model, and is thus able to perform a thin enumeration of resulting test cases, using a native backtracking mechanism. this principle is based on the actual constraint solver of bz-testing-tools(bz-tt), an animation and boundary test generation framework, for b machines, from which ltg originates. these principles have been successfully experimented on several realistic case studies, such as a model of a posix-compliant file system. this technique is implemented within a tool, named jsynopsys, a graphical user interface written in java, coupled with a dedicated prolog constraints solver. this paper presents the principles and the main features of the tool.



similarily to every smart card application, demoney presents a notion of life cycle that starts with a personalization phase, during which the different parameters of the card, namely the maximal balance, the maximal debit and the pin code values, are set using the put_data command. then, the personalization is validated by invoking the store_data command, that brings the card to the use phase. during this phase, the user may start a credit or debit transaction using the init_transaction command and validate this transaction, using commit_transaction. if the user wants to credit the purse, he first has to authenticate with his pin code, using the verify_pin command. when the user fails to authenticate three times, the card is then in the blocked state. to unblock it, the bank has to authentify, also using the verify_pin command and then change the user pin code, using the



when a b model is animated, the user chooses which operation he wants to invoke. depending on the current state of the system and the values of the parameters, different resulting states can be obtained. we now describe the principle of symbolic animation.



the prolog animation engine of bz-testing-tools that we use relies on a decomposition of the b machines operations into behaviors. each behavior is defined as a predicate, representing its activation condition, and a substitution that indicates the evolution of the state variables and the instantiation of the return parameters of the operation. these behaviors are computed as the paths in the control flow graph of the considered b operation. they consist in two parts: an activation condition and a substitution.



in practice, the selection of the behaviors to be activated is done in a transparent manner and the enumeration of the possible combinations of behaviors chaining is explored using backtracking mechanisms. for animating b models, we use clpsbz, a set-theoretical constraint solver written in sicstus prolog that is able to handle a large subset of the data structures existing in the b machines(sets, relations, functions, integers, atoms, etc.).



jsynopsys, like bz-testing-tools, is based on the clps-bz constraint solver that is able of handling data types such as integers(using the classical clp(fd) for finite domain integers), sets, relations, or functions used in the b notation. the ac3 arc consistency algorithm used in the solver does not make it possible to necessarily detect inconsistencies as soon as they appear in the constraint system. thus, a labeling phase has to be performed to ensure the consistency of the constraints, i.e., the constraint system is consistent if and only if the labeling succeeds. in our approach, the labeling of a variable may happen at two steps: either when asserting that a given state has been reached, or, eventually, when the test case is instantiated, at the end of the unfolding, in order to assign values to the parameters.



in, the authors propose an approach for the automated scenario generation from environment models for testing of real-time reactive systems. the behavior of the system is defined as a set of events. the process relies on an attributed event grammar(aeg) that specifies possible event traces. even if the targeted applications are different, the aeg can be seen as a generalization of regular expressions that we consider.



indirectly, the test purposes of the stg tool, described as iosts(input/output symbolic transition systems) can be seen as scenarios. indeed, the test purposes are combined with an iosts of the system under test, by an automata product, that restricts the possible executions of the system to those illustrating the test purpose. such an approach has also been adapted to the b machines, in.



