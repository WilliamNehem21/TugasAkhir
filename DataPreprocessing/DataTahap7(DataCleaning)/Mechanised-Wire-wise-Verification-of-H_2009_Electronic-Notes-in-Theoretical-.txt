the compilation of handel-c programs into net-list descriptions of hardware components has been extensively used in commercial tools but never formally verified. in this paper, we first introduce a variation of the existing semantic model for handel-c compilation that is amenable for mechanical proofs and detailed enough to analyse properties about the generated hardware. we use this model to prove the correctness of the wiring schema used to interconnect the components at the hardware level and propagate control signals among them. finally, we present the most interesting aspects of the mechanisation of the model and the correctness proofs in the hol theorem prover.



as our hardware model captures the semantics of circuits with loop-back connections by replicating the appropriate behaviour(i.e., by means of successive syntactic approximations), we also need to account for the possibility of having an infinite set of traces. this feature clearly preempts any form of explicit description of the semantic set, especially if we consider that we are also aiming at mechanically verifying our approach.



for the remainder of the paper, we will use and as short-hands for the mixed and combin constructors respectively. in these terms, the semantics of the delay construct state that its combinatoric prelude only includes a verification for the start wire, while its combinatoric prologue just sets its finish wire to the high value. the behavioural part of the circuit just states that it delays its execution for a single clock cycle(definition 3.2).



the semantics for the while construct needs to provide rules for handling the two possible outcomes of the evaluation of the condition. the first rule accounts for the case when the condition is false and the while terminates immediately(definition 3.7).



finally, the base case for the output construct is similar to the one for input, but it inverts the roles in the combinatoric prelude(it establishes the presence of the writer and asserts the readiness of the reader). its behavioural part is also different as it has to assign the value being transmitted to the appropriate channel(definition 3.12).



as we are dealing with sets of actions and assertions on each node of our sequences, we need to define the collective effect of this heterogeneous set of actions over the environment. the first difficulty we face when defining how a set of actions is going to be executed is that the initial order between actions and conditions has been lost. this is, however, not a problem if we consider that assertions and control flow conditions refer only to the present value of the memory and all variables preserve their values during the whole clock cycle. this fact makes the evaluation of assertions and control flow decisions independent of the combinatoric actions performed in parallel with them and they can be evaluated at any time.



