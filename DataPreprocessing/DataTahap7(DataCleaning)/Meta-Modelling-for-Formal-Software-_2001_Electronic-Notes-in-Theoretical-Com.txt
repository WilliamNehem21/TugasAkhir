in this paper, we show how large programs can be defined in terms of different views that are instances of a single meta model. each view represents one set of properties of the program and their composition defines the specification of the program. transformations are used to convert views into program fragments that are composed together to build the whole program. the technique has been applied for the construction of many large systems that are in practical use.



in this paper, we describe a method for constructing an industrial-scale software system using multiple models. rather than using unrelated notations and methods for different aspects of the program, the models in our method are all instances of a single metamodel. this provides a unified way of describing both the models and the system that is constructed using these models. it also leads to a simple and elegant implementation method. the method has been used extensively to construct medium and large-scale programs that are now in operational use in different countries.



we first describe how multiple models can be used for software development effectively in section 2. we illustrate this using two examples: one using different models in the construction of program analyzers(section 3) and another using multiple models to decompose a large problem into smaller components(section 4). finally, we discuss some problems that remain to be solved when using this approach in section 6.



instead, we make use of the model mi, of which ai is an instance, and implement general transformations for the model. these transformations can be applied to all instances of mi. defining transformations at the level of mi, rather than for each instance ai of the model, makes it possible to scale-up the method and handle large programs.



example: let a be an abstract specification of a compiler. a can be decomposed to represent the separate steps ai in the compilation process. these steps are typically lexical analysis, syntax analysis, and code generation. lexical analysis can be modelled by regular expressions(or a finite state transition model) and syntax analysis by context-free grammars(with its underlying model). the model for code generation is usually defined informally.



program analysis is an area where multiple models are used to represent different sets of properties, e.g. syntactic properties and semantic properties. each model encompasses a set of properties that are relatively complete and consistent. the models are related through the class of program objects that they describe.



projecting the complex semantic model[.] into the two simpler models, ls and la and ensuring that la is consistent with[.] enables us to apply the analysis to a set of similar languages(such as all imperative languages) and the set of program properties covered by a single theory of analysis uniformly.



example: consider a simple central locking system(cls) for a car. the system has a central control for two motors(rm, lm), one for the right door and another for the left door. the control may either lock both doors or unlock them.



a1, a2 and a3 are instances of models m1, m2 and m3 respectively. p is a composition of p1, p2 and p3, each of which is a refinement of a1, a2 and a3 respectively. this refinement is implemented by transformation functions f1, f2 and f3.



program modelling these are instances of models mi and correspond to ai of section 2. objects and associations in this model are instances of the corresponding objects and associations of the corresponding model. adex checks that all program models are well-formed according to the rules specified in the corresponding model.



in addition, functions of the kind described as f1, f2 and f3 in section 4 are defined to transform instances of models to corresponding fragments of a program. these functions can be implemented in a model traversal and transformation language supported by adex. thus, if f1 f2 and f3 are correct, then p1, p2 and p3 will always be a correct refinement of a1, a2 and a3.



in this paper, we have presented an approach to developing complex systems using multiple, related models. the models allow different sets of program properties to be represented as different views, or instances of models, that are derived from a common meta model. the technique has been used for developing large applications.



