coupled transformations occur in software evolution when multiple artifacts must be modified in such a way that they remain consistent with each other. an important example involves the coupled transformation of a data type, its instances, and the programs that consume or produce it. previously, we have provided a formal treatment of transformation of the first two: data types and instances. the treatment involved the construction of type-safe, type-changing strategic rewrite systems. in this paper, we extend our treatment to the transformation of corresponding data processing programs.



the key insight underlying the extension is that both data migration functions and data processors can be represented type-safely by a generalized abstract data type(gadt). these representations are then subjected to program calculation rules, harnessed in type-safe, type-preserving strategic rewrite systems. for ease of calculation, we use point-free representations and corresponding calculation rules.



thus, coupled transformations are carried out in two steps. first, a type-changing rewrite system is applied to a source type to obtain a target type together with(representations of) migration functions between source and target. then, a type-preserving rewrite system is applied to the composition of a migration function and a data processor on the source(or target) type to obtain a data processor on the target(or source) type. all rewrites are type-safe.



produce it. in the context of software renovation, this problem occurs for example when the schema of a database needs to be adapted. the adaptation of the database schema must then be coupled with migration of the database instances and with updates of the programs that connect to these database instances.



an important research challenge remains in providing a general and comprehensive conceptual framework for coupled transformations. previously, we have taken first steps to providing such a framework. in particular, we have provided a formal treatment of two-level data transformations, i.e. coupled transformation of data types and instances. in this paper, we extend our previous treatment to include transformations of data processors.



the query q that consumes values of type a and the producer p that generates such values are examples of data processing programs. to obtain queries and producers on the transformed type a', we can simply compose q and p with the migration functions from and to. this amounts to a wrapper approach to program migration where the original type and the original processors are still explicitly present. the challenge that we take up in the present paper is to calculate processors q' and p' from those wrapper compositions in such a way that they no longer involve the original type and processors. in section 4 we explain how such program calculations can be harnessed in an additional type-preserving strategic rewrite system on type-safe representations of the functions(queries, producers, migrations) involved. the key idea is to use fusion or deforestation techniques in order to eliminate the intermediate data type a.



program calculation(section 4), and the type-changing rewrite system for two-level data transformation(section 5) can be combined to perform coupled transformations. both rewrite systems employ a strongly-typed representation of types at the value level, recapitulated in section 3. section 7 discusses related work and section 8 concludes.



a list(in ascending order of keys), and map.map applies its argument function to each range element. note that the migrated queries do not involve the original album type as intermediate format, and are not defined in terms of the original query wrapped by a migration function.



in both rewrite systems that we will define, we need access to type-representations on the value-level. the type-preserving rewrite system on point-free expressions needs them for type-directed rewrite decisions, while the type-changing rewrite system performs rewrites on types themselves. to ensure type-safety of both rewrite systems, a universal representation of types does not suffice.



notice that in this declaration the type a that parameterizes type a is restricted differently in each constructor. this is precisely the difference between a gadt and a regular parameterized data type, where the parameter of the resulting type must always be unrestricted. for example, the type constructor int has type type int but list int has type type[ int]. thus, the parameter a of the gadt type a allows us to carry around the necessary type-information to ensure type-safety.



in this section, we explain how type-safe, type-preserving strategic rewrite systems are defined to apply program calculation rules to migration functions and data processors. in particular, we aim to apply fusion laws to simplify wrapped processors of original data into processors that work directly on new data, thus avoiding to build intermediate data structures of the original types. if fusion is successful, substantial gains of efficiency can be achieved.



we used a different approach. before applying any rule concerning products we apply comp assocr exhaustively in order to guarantee that all compositions are associated to the right. then some completion must be performed on the laws with an outermost composition when the right parameter is not arbitrary. as example consider the encoding of prod-cancel: first succeeds). is a left-biased choice that tries to apply the first rule or, if it fails, it tries the second. the many combinator repeatedly tries to apply a rule until it fails. many1 is similar but must succeed at least once. try tries to apply a rule and



us to combine local, single-step transformations into a single global transformation. sample two-level rewrite rules depending on the scenarios to be addressed, the strategy combinators above can be combined with different sets of single-step rewrite rules to obtain appropriate rewrite systems. elsewhere we provided sets of rules for format evolution and for hierarchical-relational data mappings. the



the inside combinator applies its argument rule under a given tag. the addf ield combinator adds a new field, whose value is obtained by querying existing data. the assocr rule associates a nested product to the right. below we will introduce further rules where necessary.



type is only available dynamically, after computing it. hence the staging. in the first stage, we apply the transformation to obtain b dynamically, using showtype, in the form of its string representation. in the second stage, that string representation is incorporated in our source code, and gets parsed and compiled and becomes statically available after all. below we will demonstrate the use of this staged approach in interpreter sessions.



note that this staged approach is not our only alternative for making use of the dynamically computed result type and migration functions. instead, we can make judicious use of existential and universally quantified types to model dynamic types and dynamically typed values and functions, in a type-safe way. with these, migration functions can be computed and used in a single stage.



ments. we do not show the straightforward extension of eval for these primitives. of course these functions could be written in terms of more fundamental list and map functions, such as folds, but that would unnecessarily complicate calculations. getting the right compromise between expressiveness and ease of calculation is one of the most challenging tasks when choosing the set of primitives for a particular application scenario.



tation tagged with"album". the gracenote function(whose definition is omitted) uses the asin field to lookup track titles in some external data source such as the internet. after the field addition, the assocr rule is applied exhaustively to bring the resulting nested tuple into the desired right-associated form.



program transformation in calculational form several systems have been developed for performing program transformation in calculational form using fusion laws. among these, mag and yicho are prominent, but both are targeted towards haskell programs written in the pointwise style. in order to cope with fusion laws for generic recursion patterns both resort to advanced higher-order matching algorithms. we do not need such techniques because our recursive functions are limited to very specific patterns, such as maps, for which fusion is easier to encode.



in previous work the first author presented a rewriting system for simplifying point-free expressions, which was used to optimize expressions resulting from a program transformation tool that translates pointwise haskell code into point-free style. the main improvement of the system presented in section 4 is typing: we can now use type representations to guide the rewriting process and rewrite rules are guaranteed to be type-safe. in his introductory book to haskell programming, bird presents a functional calculator that can also be used to simplify point-free expressions. unfortunately, the expressions are not typed and, likewise to mag, it uses a fixed rewriting strategy, which makes it difficult to apply in our scenario.



alternatives to gadts our solution relies heavily on gadts both for type representations and for type-directed and type-safe point-free rewrite rules. although convenient, gadts are not essential for these particular tasks. for example, it is possible to encode type representations in haskell using existential quantification[1,3]. type-directed rewrite rules could in principle be encoded also with type-classes using the techniques described in. it would be interesting to see whether all ingredients of our solution to coupled rewriting could be realized with similar elegance without resorting to gadts.



be generated by our type-preserving rewrite system. likewise, each type-preserving rewrite rule on point-free expressions must be proven to be semantics preserving. but, once the properties are proven for individual rules and proven to be preserved by the basic combinators, any system composed from them inherits those properties. termination and confluence are also for the responsibility of the programmer.



