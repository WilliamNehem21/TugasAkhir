otl simply adds two classes, time and offset to the ocl 2.0 standard library. class time models time instants, while class offset models the distance between two time instants. time instants are referred to the current time, which plays the role of time origin.



classes time and offset allow to define the typical temporal operators of temporal logics(i.e. always, sometimes, until, etc.), and thus model timing aspects. otl allows users to reason about time in a quantitative fashion, so that it is possible to express properties like event b must occur at most l time units after event a. time and offset may be discrete or dense, depending on the modeled application, thus allowing users great flexibility and expressive power.



otl formulas are evaluated with respect to the current time instant, which is left implicit. primitive eval of class time is used in ocl to evaluate predicates at time instants different from the current one. for example, given an object t of class time and a predicate p(which is an oclexpression), t.eval(p) returns true(a boolean value) if p holds at time instant t.



and liveness. tilco expressive operators(dynamic interval, bounded happen) showed in allow to express very complex properties in a readable form. the extension of tilco presented in(ctilco, i.e., communicating tilco) provides a new model for composition/decomposition of complex systems and for process communication. in ctilco a specification can be obtained from several interconnected processes, and theorem proving can be performed to validate the correctness of the interaction between different processes. in the context of the quack methodology the use of pvs has been studied, and strategies to prove tilco expressions have been produced; such strategies are based on ad-hoc lemmas which are tailored on the basic tilco operators.



most of the research on component based real-time embedded system is related to the software design phase. only recently non-functional constraints like deadline are being taken into consideration. in particular, component based software development techniques have been only recently applied to the design and implementation of safety critical real-time systems with little practical results. many problems should be addressed before being able to successfully apply component based design methodologies in real-time systems.



one thread. the omg has proposed the uml-rt profile for schedulability, performance and time specification. this profile allows the design of real-time applications with uml. however, the profile is not well suited for component based design. isovic, lindgren and crnkovic presented a similar idea in the context of the slot shifting scheduler, but in their approach components consist of one single thread.



in quack, we developed a methodology for specifying and analyzing a component based real-time system, where each component consists of one or more concurrent threads, and can specify its own scheduling strategy. in our approach, each component is assigned a minimal fraction of the processor bandwidth and it is protected from the interference of the other components. we developed a mathematical model of the component to compute the optimal server parameters to be assigned to a component to ensure the satisfaction of the temporal constraints.



no phone calls can be made. environment programming is a hard task for test designers because a lot of environment messages are needed and because a wrong setting in the environment may alter the test results. to reduce workload and errors, our technique provides a default environment for each test-level message. the default environments are created by the test engine, along with the default observation of the effects of the messages.



so far, we applied the proposed techniques to an initial set of case studies, including industrial systems provided by our research partners, well-known examples taken from the literature in the field, public applications that exemplify the use of component technology. the results are promising, even though preliminary. we are now continuing the experiments, aiming at improving our confidence in and knowledge of the quack methodology and at refining and tuning the single techniques.



