contribution formal methods are proposed for analysis of adaptive systems, mainly at the low levels of abstraction, and flexible policy-based approaches are proposed for designing adaptive systems without formal foundation. here, we propose a flexible policy-based approach with formal foundation to support modeling and verification of self-adaptive systems. policies allow us to separate the rules that govern the behavioral choices of a system from the system functionality giving us a higher level of abstraction; so, we can change system behavior without changing the code or functionality of the system. we are also concerned about the adaptation strategy, to pass the adaptation phase safely and at the right moment. as an example, we are able to change and reason about the scheduling of jobs using policies independent of the system code. although our approach can support both structural and behavioral adaptation, in this paper, we focus on the behavioral adaptation. the formal foundation, the modular model, and separation of adaptation rules will help us in developing rigorous analysis techniques.



structure of the paper this paper is organized as follows. in section 2 we introduce an example to illustrate our approach. section 3 introduces the pobsam model in brief. sections 4 and 5 introduce the syntax and semantics of pobsam, respectively. section 6 presents related work and compares our approach with the existing approaches. in section 7, we present our conclusions and plans for future work.



in a home automation system, sensors are devices that provide smart home with the physical properties of the environment by sensing the environment. in addition, actuators are physical devices that can change the state of the world in response to the sensed data by sensors. the system processes the data gathered by the sensors, then it activates the actuators to alter the user environment according to the predefined set of policies. smart homes can have different features. here, we take into account three features including:(1) the lighting control which allows lights to switch on/off automatically depending on several factors. in addition, the intensity of the lights placed in a room can be adjusted according to the predefined policies.



(2) doors/windows management that enable inhabitants to manage windows and doors automatically. in addition, if windows have blinds, these should be rolled up and down automatically too.(3) heating control which allows inhabitants to adjust the heating of the house to their preferred value. the heating control will adjust itself automatically in order to save energy.



self-managed module(smm) is the policy-based building block of pobsam. a pobsam is composed of a set of smms. an smm, in turn, may contain a number of smms structured hierarchically. an smm is a set of actors which can manage their behavior autonomously according to predefined policies. pobsam supports interactions of an smm with the other smms in the model. to this aim, each smm provides well-defined interfaces for interaction with other smms. in the smart home case study, we consider three smms including lightclmodule, tempclmodule and dwclmodule to manage lighting, temperature and doors/windows respectively.



example 4.1 in the lightclmodule smm, the managed layer comprises a set of light rebecs controlled by lightmngr. we consider a reactive class named light to model the lights which contains setintensity, switchon and switchoff message servers as well as intensity and status state variables.



p q means that intersection of policy sets p and q is used to direct actors. p-q reduces policy set p by eliminating all the policies in set q. p q represents the union of p and q governing the actors simultaneously. p denotes a policy set with the simple policy p as its member. p q and p q are commutative and associative.



pn2 d=ef[2, occpd, true, light1.setintensity(d1) light2.setintensity(d2)] pn3 d=ef[3, rccpd, true, light1.setintensity(c1) light2.setintensity(c2)] pn4 d=ef[4, unoccpd, true, light1.switchoff() light2.switchoff()]



as stated above, pobsam has decoupled the adaptation layer from the functional layer. thus, we can verify the adaptation layer independently from the actor layer provided that we have a labeled transition system modeling view behavior. this feature can decrease the complexity of verification procedure.



dynamic adaptation is a very diverse area of research. while structural adaptation has been given strong attention in the research community(see), fewer approaches tackle behavioral adaptation as we considered. due to the lack of space, we restrict ourselves to present related work done on formal modeling of self-adaptive systems in addition to applying policy-based approaches in engineering of self-adaptive systems.



employing policies as a paradigm to adapt self-adaptive systems has been given considerable attention during recent years. work in[8,9,10,11,23,25] used policies as the adaptation logic for structural adaptation, while we use policies as a mechanism for governing as well as adapting system behavior. furthermore, used policies for a simple type of behavioral adaptation named parameterization, too.



we proposed pobsam as a formal model to develop self-adaptive systems which uses policies as the main mechanism to govern and adapt the system behavior. to this aim, we model a system as the composition of a set of autonomous components named smms. each smm contains two types of actors: managed actors that are dedicated to the functional layer of system and autonomous managers that coordinate actors to achieve the predefined goals using policies. this model integrates two formal methods including algebra and actor-based model to specify a system. then, we presented the operational semantics of pobsam by means of labeled transition systems.



there is much more research to pursue in the area of verification of self-adaptive systems. in this paper, we focused on formal modeling of self-adaptive systems. verification of different properties of adaptation and functional layers of pobsam models is an ongoing work. we are going to implement a tool to support our approach too. as our model can support both behavioral and structural adaptations, our future researches will be concentrated on specifying structural adaptations. extending this model for modeling self-organizing systems in which managers need to coordinate together is considered as a future work, too.



