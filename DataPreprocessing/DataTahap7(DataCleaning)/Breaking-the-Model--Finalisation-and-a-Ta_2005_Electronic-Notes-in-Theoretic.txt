in a specification language like z, this simple relational model is given additional structure so that parts of the relational state can be used to model internal z state, inputs, and outputs. also, z operations can be partial relations. the refinement proof obligations become correspondingly more complicated, primarily by the introduction of an applicability(precondition) law to handle partial relations.



finalisation solves the old paradox of why the clock that is 5 minutes slow(hence never right) is better than the stopped clock(right twice a day). the first clock has a simple finalisation that can be applied to it: add five minutes to the displayed time. the second has no finalisation that produces a useful result(without recourse to a second clock).



in all these cases, however, the key thing is that the process is defined by what we chose to observe. the fact of whether a system is a refinement of another depends solely on those observations. so the arguments we make in the rest of the paper also apply to csp-style refinements.



the specification defines what is intended to be observable about the system, and what is not. parts of the system may be intended to be unobservable, often for security reasons(for example, a secret cryptographic key). the specifier captures this property in terms of a finalisation.



once the refinement model constraints have been relaxed to include nontrivial finalisations, it becomes easier to see how certain covert channels arise. it may be possible to apply finalisations other than the intended one, in order to observe different information. such finalisations may not provide formal refinements of the original models, but are important because they may be performable in practice.



arguing about the security of modern systems grows increasingly hard, and there have been numerous surprises over the past decade in particular(timing attacks, power attacks, etc). systematic analysis is needed. we provide a simple taxonomy, motivated by the formal refinement models presented earlier.



with any system there is an obvious finalisation: that intended by the specifier. this may give sufficient security(or it may not). it is, however, a choice, and comes with its own assumptions about the system and its context. considering other choices of system elements and context provides an interesting and informative means of highlighting possible unwanted analyses.



the intended observation is with the intended finalisation glasses(for example, the discrete values produced by a crypto-algorithm). we can consider the intended finalisation to correspond to the identity applied to the outputs of the most abstract specification. unintended observations vary the finalisation glasses, and can observe discrete properties(for example, page faults, interrupts, i/o buffers), or analogue properties(for example, power, timing, rf).



we may choose to observe the operation of a single instance of a system(for example, a single smart card) or multiple instances. the single instance is the usual user view; an analyst may well prefer the multiple instance system, allowing differentiated analyses. instances of standard and perturbed systems may be analysed together.



many systems have specified environmental ranges for operation. for example, smart cards have power supply specifications and operating temperature ranges. each attribute may be standard(within specification) or perturbed(out of specification). environmental variation provides opportunities for altering the finalisation; for example, digital circuitry operates differently at different temperatures. since we are generally dealing with ranges, there are also possibilities for variation even within specification.



we can be flexible in our interpretation of the environment. the above examples are expressed in terms of concrete environments. for an abstract model, the environment could encompass elements such as assumptions about operations of use, for example, that a system is subjected only to limited demands, or that the users understand the system sufficiently well not to breach security inadvertently.



level, or in the implementation(for example, that voltage levels are precisely binary). one formal technique attempting to handle deviations from pure refinement is retrenchment. an interesting open problem is how much can properties of interest be preserved under such circumstances.



typically, the system being observed is the system being analysed. it is also possible to make higher order observations. for example, the analysis techniques themselves have standard and non-standard properties. one common analysis technique is meta-heuristic guided search(genetic algorithms, simulated annealing, etc) to find a potential solution. a guided search has a final result, but also has a trajectory(the path followed to reach that result).



analysis analogies can be found for other approaches too. for example, perturbing the mathematics in some way( uses the term problem warping) and observing the results of searches can also give rise to new analyses. thus, a higher order analogue of fault injection may apply. due to the way metaheuristic search proceeds, non-standard or highly perturbed cost functions typically produced better overall results.



it is interesting to note that there are few such annotations, and even fewer multiple annotations. published analyses tend to exploit only a single viewpoint, for example, unintended finalisations involving power or timing. there appears to be little in the way of multiple viewpoint analyses, where timing and power information, say, are used together. given the considerable success of the single aspect analyses, availing oneself of multiple sources and exploiting correlations between them would seem a promising avenue to explore(if one is an attacker).



traffic analysis most naturally consists of observation of multiple systems. even if the content of messages over a network is encrypted, analysis of network source and destination fields leaks information.(one could instead view this as a single networked system with multiple probes, distributed around the system.)



there may be timing attacks on the finalisation operation itself. how long does it take to compute a finalisation that is more complicated than the identity? a directory listing operation invoked by an unclassified process might need to filter out the names of more highly classified files. although the listing may output only unclassified files, the time taken to complete may depend on the presence of more highly classified files.



the most obvious and direct approach is to enforce the use of the intended finalisation glasses. these may, for example, form a layer between electrical signals and what the analyst can observe. invasive attacks may be prevented, or made more difficult, by a variety of means. for example, smart cards may have resin coatings applied, and be encircled with tamper-detection coils.



overwhelming the resources of an analyst provides another means of effecting security. for example, user a may communicate with b by very rapidly sending trillions of bits of potential key material having secretly agreed previously which time slot contains the actual key to be used. an attacker without this knowledge could observe all the data but would not be able to store it all for future reference.



we have shown how finalisation can be viewed as a crucial formal framework for explaining many security-related aspects of systems. we have examined the power of various finalisations, enabling factors and countermeasures. above all we have shown that finalisation is a practical as well as a formal issue. when we do formal specification and refinement we are working on formal models of an envisaged system. each model comes complete with a set of assumptions. these may be particular to the application concerned or else derive from the semantics of the representations used. if the assumptions do not hold(or can be made not to hold) in an implementation then we have the basis of an attack. our taxonomy and many of the attacks outlined(for example, multiple systems) indicate that a useful criterion for formal analysis may be to model the system not as the user is expected to access it, but as an attacker may view it.



as jackson points out, the world is unbounded. there is a richer set of experiences to be had in the implementation(physical) world. the quest for attackers is to sample that richness, in order to avail themselves of correlations and relationships with data of interest.



