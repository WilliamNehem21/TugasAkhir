translation validation is a technique for ensuring that the target code produced by a translator is a correct translation of the source code. rather than verifying the translator itself, translation validation validates the correctness of each translation, generating a formal proof that it is indeed a correct. recently, translation validation has been applied to prove the correctness of compilation in general, and optimizations in particular.



translation validation(tv) is a technique for ensuring that the target code emitted by a translatorsuch as a compileris a correct translation of the source code. because of the(well-documented) difficulties of verifying an entire compiler, i.e. ensuring that it generates the correct target code for every possible valid source program, translation validation can be used to validate each run of the compiler, comparing the actual source and target codes.



there has been considerable work in this area, by these authors and others, to develop tv techniques for optimizing compilers that utilize structure preserving transformations, i.e. optimizations which do not greatly change the structure of the program(e.g. dead code elimination, loop-invariant code motion, copy propagation)[1,7,11] as well as structure modifying transformations, such as loop reordering transformations(e.g. interchange, tiling), that do significantly change the structure of the program[2,7,12]. in previous publications, the authors and their students have described a prototype tool, tvoc, that was developed for performing translation validation on the intel open research compiler(orc) which performs a large number of transformations of both categories[13,14].



tvoc does not use a single unified proof rule for validating loop reordering transformations, but rather relies on several proof rules of different forms depending on the particular optimization being applied. specifically, tvoc uses different proof rules for interchange, tiling, and skewing than it does for fusion and distribution. from a scientific(and engineering) perspective, a single proof-rule to handle all loop reordering transformations would be more satisfying.



when presented with the target code t that reflects a series of transformations of the source code s, such that no intermediate versions of the code(e.g. after individual transformations) are available, tvoc will synthesize a series of intermediate versions of the code, based on what transformations it believes were performed. that is, it will generate synthetic intermediate versions i1, i2,... in, which might possibly not have been created by the compiler at all. tvoc will then validate that the translation from s to i1, the translation from ij to ij+1 for each j, and the translation from in to t are correct.



in order to avoid having tvoc rely on information produced by the compiler to determine which optimizations were actually performed, we have developed a set of heuristics that are used to generate this information given only the source and target code. heuristics were previously used in this way by necula for the tv of structure preserving transformations in gcc. in this paper, we describe the heuristics we use for the tv of structure modifying transformations, specifically loop reordering transformations.



the paper is organized as follows. section 2 provides the necessary background for understanding our tv work in the validation of individual structure modifying transformations. section 3 describes how the proof rule that we have used for loop optimizations such as interchange and tiling can be generalized to include a wider variety of loop transformations including fusion, alignment, peeling, and unrolling. section 4 describes the kinds of combinations of optimizations that orc performs, and our techniques for validating such combinations using the creation of synthetic intermediate versions of the code. section 5 presents the heuristics that we have developed in order to determine, in the absence of any suggestions by the compiler, which optimizations have been performed. finally, section 6 concludes.



a transition system t is called deterministic if the observable part of the initial condition uniquely determines the rest of the computation. we restrict our attention to deterministic transition systems and the programs which generate such systems. thus, to simplify the presentation, we do not consider here programs whose behavior may depend on additional inputs which the program reads throughout the computation. it is straightforward to extend the theory and methods to such intermediate input-driven programs.



rule val constructs a set of verification conditions, one for each simple target path, whose aggregate consists of an inductive proof of the correctness of the translation between source and target. roughly speaking, each verification condition states that, if the target program can execute a simple path, starting with some conditions correlating the source and target programs, then at the end of the execution of the simple path, the conditions correlating the source and target programs still hold. the conditions consist of the control mapping, the data mapping, and, possibly, some invariant assertion holding at the target code.



somewhat related to our approach is the work on comparison checking where executions of unoptimized and optimized versions of code are compared on particular inputs[4,5,6]. comparison checking depends on finding data and control mappings between a source and a target on particular inputs, and mismatches are reported to detect optimization errors. comparison checking has mainly been used for structure preserving optimizations.



structure modifying transformations are those that admit no natural mapping between the states of the source and target programs at each cutpoint. in particular, a reordering transformation is a structure modifying transformation that merely changes the order of execution of the code, without adding or deleting any executions of any statement. it preserves a dependence if it preserves the relative execution order of the source and target of that dependence, and thus preserves the meaning of the program. reordering transformations cover many of the loop transformations, including fusion, distribution, interchange, tiling, unrolling, and reordering of statements within a loop body.



the range of the middle elements(i.e. the range of values of the loop index variables) in jj is{0..100} while the range of the middle elements of ff is{0..99}. an increase in the upper bound for the loop index variables, or a decrease in the lower bound, indicates that alignment may have occurred(it could also indicate skewing, but the relationship between ff and jj when skewing occurs is substantially different than what we see here).



