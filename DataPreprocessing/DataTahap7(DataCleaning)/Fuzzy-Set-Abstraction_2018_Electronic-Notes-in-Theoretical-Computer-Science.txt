program analysis plays a key part in improving modern software. static(sound) analyses produce globally correct, but often pessimistic results while dynamic(complete) analyses yield highly precise results but with limited coverage. we present the fuzzy set abstraction which generalizes previous work based on 3-valued logic. our abstraction allows for hybrid analysis where static results are refined dynamically through the use of fuzzy control systems.



being able to combine both kinds of analyzes can greatly improve results, for instance in non-functional verification(e.g. deducing worst-case benefit of compiler optimizations) when pessimistic assumptions about input state/environment is used. in this case, sound results are interesting at compile-time so that optimizations that are guaranteed to be detrimental is not applied. in contrast, complete results are interesting at run-time where the actual set of inputs are known and hence the benefit of an optimization can be accurately evaluated. the fuzzy dataflow framework showed how program analyzes based on fuzzy logic can uncover optimization opportunities that classical frameworks would not. the generalization to many-valued fuzzy logics allow program properties to be true or false to a certain degree. the truth values are elements of the unit interval 2 and denote bias of the program property. for instance, a result of 0.1875 would indicate that the property tends to false since it is closer to 0(false) than to 1(true).



we introduce the fuzzy set abstraction that generalize the three-valued logic abstraction. we present the theoretical foundation of the fuzzy set abstraction and prove soundness for the static analysis(section 3.1). we also present a dynamic analysis(section 3.2) where we use an adaptive fuzzy inference system from fuzzy control theory to gradually specialize the analysis results to improve accuracy.



we briefly introduce several concepts from the fuzzy set community. our static analyses manipulate fuzzy sets using predicate transformers, expressed using fuzzy logic(section 2.1), and collector functions motivated by possibility theory(section 2.2). similarly our dynamic analyses start from the results of the static analysis and iteratively specialize it to increase the accuracy of our results. this process relies on a fuzzy classifier(section 2.3).



values. we will therefore use their program analysis framework as a basis for our own fuzzy set abstraction which is described in section 3.1. although analyzes in our framework are decidable and sound the resulting abstract description could, in the worst-case, be very large. therefore we also consider cases where the resulting description is kept to a minimum. analyses in this approximation yield a single interpretation representing the maximum interpretation.



embeddings was introduced by sagiv et al. to relate 2-valued and 3-valued interpretations. informally they relate logical structures that conform to an information order. the embeddings cluster individuals and decide the value of their properties in terms of the corresponding values of the members of the cluster. importantly, the class of embeddings that minimize information loss is termed tight and are used to define the abstract semantics of a flow-graph. note that although we choose to cluster individuals here it is also possible to cluster predicates as in a predicate abstraction.



we have introduced the fuzzy set abstraction which enables stating properties about programs which are true or false to a certain degree. this opens up new possibilities for speculative optimizations which can now use information about which values, branches, etc. are more likely than others.



we have also shown how to perform hybrid analysis by refining the result of a static analysis online. this has been done using ts-anfis, an adaptive fuzzy inference system from control theory. this result paves the way for importing other results from the rich literature of fuzzy control theory.



