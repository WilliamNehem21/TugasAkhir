there is a substantial body of related work on java logics, semantics and theorem proving tools, such as, for example,[16,14,13,15,9,20,17,2,3]. we discuss this related work in section 6; we also discuss there work closer to ours such as the maude itp, on which our tool is based, the asip-itp tool[6,22], and of course the javafan project[7,8], to which this work contributes at the theorem proving level. the rest of the paper is organized as follows. the cps semantics of our java fragment is summarized in section 2. the first-order semantics of hoare triples based on the initial algebra semantics of the language is explained in section 3. our hoare logic and its justification are treated in section 4. the mechanization of such a logic in the java+itp tool, and its use in examples are discussed in section 5. section 6 treats related work and conclusions. the related technical report contains a mathematical proof of correctness for the loop rule, and two proof scripts for java programs.



a program variable will not be directly mapped to its value but to a location in the store. this leads to a two-level mapping, of variables to locations and of locations to values. the location module defines what a location is, an example location is l(17). it also shows how to concatenate multiple locations together, as we generally work on lists of expressions, etc.



the point of view of program verification, as shown in[6,22] for a very simple language. but a more abstract concept of environment/stores does not work nicely with the side-effects and hiding that are possible in our language, for which the concrete variant we have chosen is preferable. furthermore, this will make it easier to extend this subset of java to a more complete version of java in the future. in contrast, a more abstract definition of state would not allow more complex information, like exception, loop, or lock information, to be explicitly stored.



thanks to this structure we can check for termination of a program by simply checking the sort of the state. if it is of sort superstate, there is still some continuation, and therefore code, left and the program has not yet terminated. if instead the resulting state is a wrappedstate, we know that all code has been executed. the definition of what happens to an empty continuation needs to support this and does so.



not change the state. whenever the state s is not obvious, we will fall back on the evaltst notation. the other way we use t in is in the code part as usual(within if or while constructs) or just for its possible state change as described above. the different uses of t are illustrated in our hoare rule for conditionals,



false. in the state before the final state it did indeed evaluate to false, but its side effect could cause its next evaluation to be true again. to prevent this, the hoare triple(q) has to be added to the proof obligation of the loop rule.



in conclusion, we view java+itp as a research vehicle to investigate modularity and extensibility of programming languages and of hoare logics. it has served us well for this purpose, by uncovering subtleties in the hoare logic needed for java not present in toy languages, and not even present in the hoare logics of java tools like jive. keeping the compositional hoare logic reasoning at the source code level is also one of the goals that, in contrast to other approaches, we have advanced. but of course this is just a snapshot of work in progress. our java fragment is still quite modest, so we should soon add new features to it such as exceptions and objects; we expect this to be easy thanks to the cps semantics. after this, threads and concurrency should also be added, and hoare rules for these new features should also be investigated. our goal is of course modularity, so that our hoare rules will be applicable not just to java, but to any other languages using some of the same features in a modular way, but this still remains an exciting goal for the future.



