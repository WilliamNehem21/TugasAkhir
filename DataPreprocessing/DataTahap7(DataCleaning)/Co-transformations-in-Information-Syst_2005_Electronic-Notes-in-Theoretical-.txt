database reengineering consists of deriving a new database from a legacy database and adapting the software components accordingly. this migration process involves three main steps, namely schema conversion, data conversion and program conversion. this paper explores the feasibility of transforming the application programs through code transformation patterns that are automatically derived from the database transformations. it presents the principles of a new transformational approach coupling database and program transformations and it describes a prototype case tool based on this approach.



migrating the application programs is another hard challenge. indeed, the size and the complexity of the source code of the programs make the latter difficult to migrate while maintaining the readability of the target code. the paper analyzes the problem of data-centered application programs migration following the migration of their databases. it explores the feasibility of transforming the application programs through code transformation patterns that are automatically derived from the database transformations. it presents the principles of a new transformational approach that couples database and programs migration and it describes a prototype case tool based in this approach.



the paper is structured as follows. in section 2, we define the problem of database reengineering, for which we present a disciplined methodology. section 3 describes a transformational approach for each step of the reengineering process. in section 4, we define the concept of co-transformation in the particular context of database applications reengineering. section 5 describes the architecture of a tool developed to support the reengineering process. finally, concluding remarks are given in section 6.



one way to view information system reengineering is the reengineering of the database, i.e., deriving a new database from a legacy database, then adapting the software components accordingly. this description encompasses several objectives and strategies. in this paper, we will consider one of them, namely converting a legacy system to a modern database technology, that is, reengineering due to a technology change. typically, this process comprises the following three main steps: the new database instead of the legacy data. in the scenario studied, the functionalities, the programming language and the user interface are kept unchanged. this conversion step is generally a complex process that must rely on the schema conversion of step 1.



the resulting database is quite obscure, very difficult to evolve and often very inefficient. however program conversion is quite easy and generally automated. as expected, this process is inexpensive, and therefore quite popular. on the long term, however, this technique oftent is a dead end. indeed, both the database and the application programs are practically impossible to maintain, due to the poor data structures and to the intricacy of the source code.



the semantic migration approach produces a better quality target database. through a complex dbre 6 process, the conceptual schema(i.e., the semantics) of the legacy database is recovered. then, the target database is designed from this conceptual schema, using standard database development techniques. obviously, the semantic approach is more expensive, but it produces a well-designed, fully-documented database that forms a sound basis for both existing and future applications.



db-main is a data-oriented case environment developed by the libd of the university of namur. its objective is to support most database engineering processes. it helps developers and analysts in the development, reengineering, migration and evolution of data-centered applications. dbmain offers general functions and components that allow the development of sophisticated processors supporting data-centered application renovation.



experience shows that there is no such thing as two similar reengineering projects. hence the need for programmable, extensible and customizable tools. db-main(and more specifically its meta functions) includes features to extend its repository and its functions. in particular, it includes a 4gl(voyager 2) that allows analysts to develop their own customized processors for analyzing and transforming data structures.



the asf+sdf meta-environment is an interactive development environment for the automatic generation of interactive systems for manipulating programs, specifications, or other texts written in a formal language. it is developed by the sen1 research group of the cwi. in the context of data reengineering, the asf+sdf meta-environment provides tool generators to support the program conversion step. it allows both defining the syntax of programming languages and specifying transformations of programs written in such programming languages.



an important conclusion of the transformation-based analysis of database engineering processes is that most of them, including reverse engineering and database design, can be modelled through compound, semantics-preserving transformations. database conversion, or reengineering, is carried out in two steps, namely database reverse engineering and database design. therefore, the migration of a database from a technology to another one can be modelled by a complex compound transformation, the structural mapping of which is used to convert the database schema while the instance mapping defines the data conversion rules.



db-main automatically generates and maintains a history log of all the transformations that are successively applied to the legacy db schema(lds) to obtain the new db schema(nds). this history is formalized in such a way that it can be analyzed and transformed. particularly, it can be used to derive both the forward and backward mappings between the lds and the nds.



in the wrapper-based code organization, the migration strategy performs program conversion in two steps. first a data wrapper that simulates the dml of the legacy dms on top of the new database is generated. then, the legacy programs are transformed such that they access the data through the wrapper generated.



wrapper generators for cobol-to-sql and codasyl-to-sql data migration have been developed through plug-in of the db-main tool. these generators take the lds-to-nds mapping as an input and generate the code that provides the application programs with a legacy interface to the new database. the wrapper solves three mismatch problems, namely model, api and schema.



