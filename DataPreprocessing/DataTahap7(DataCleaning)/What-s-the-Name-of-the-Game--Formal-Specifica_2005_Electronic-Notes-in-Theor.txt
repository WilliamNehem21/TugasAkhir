game playing is one of the oldest areas of research in artificial intelligence. the first studied games were board games, like chess. in the past years, research evolved to cover multi-agent games with sophisticated agent interaction, including simulation of human behaviour.



some modern fps games have extensible ai. for example, half-life offers a bot kit using c++ as the programming language. some games, although classified as entertainment, have only programmable bots and no human player. one example is ai wars, with a programming language mixing specialized commands with basic programming resources. the robocode project implements a robotic battletank. the behaviour of the bots is defined using the java programming language.



the gamebots project[1,11] has been designed for education and research in artificial intelligence. it has created a test-bed for multi-agent systems using an extension for the commercial unreal tournament game engine. unlike other extensible ai games, gamebots does not define a single benchmark task. the wide variety of predefined tasks and environments can be extended in various ways, using a c++-based scripting language called unrealscript. communication between the game server and bots are done via sockets, so bots can be programmed in different languages. examples using java and soar are available.



our work is similar to gamebots, in the sense that the proposed games have no predefined tasks. but our approach is much more general, since we can define any kind of game. the proposed games are not restricted to a predefined environment or style. in the gamebots project, games can be extended and even new games created, using unreal script, but in a limited way. and in order to understand the rules of the proposed game, it is necessary to know the script language, which was not designed to be a good formal specification method. we believe that abstract state machines are a very elegant solution for this problem. the semantics of the rules are clear as long as they are where v is a variable, u is a finite universe and r0 is a rule. an instance of rule r0 is created for each element belonging to universe u, associating the variable v to each of these elements. then, all rules are executed in parallel.



to execute the transition rule of a module, it is necessary to dynamically create an agent based on this module. the exception is the main module, for which an agent is automatically defined. when an agent executes the transition rule of a module, the function name self is interpreted as the current agent.



there is also a special kind of action designated loop action. in this case, the transition rule of the action is repeatedly executed until a return command is executed. but a call to a loop action has the same semantics of a call to a simple, non-loop action: all updates are collected and fired in parallel, affecting only the next state of the run.



the game, and programs created by users, simulating the behaviour of competitors. in this section, we discuss these programs and other components of a multi-agent artificial intelligence game in detail. it is important to understand the relationship between these components before we present the framework we have built, in section 6.



two or more bots may be running the same program code. in this case, they will present the same behaviour. a bot may update several objects, and an object may be updated concurrently by several bots. when there is just one internal bot in the system, objects have a centralized control. in robocode, for example, the environment is controlled by a single agent, responsible also for producing visual representation. when objects are updated by different internal bots, the rules of the game are defined by a distributed program. this multi-agent definition for the environment is used in the framework presented in section 6, and represents a more general approach than the one adopted in systems like robocode. no assumption is made for the relative execution speed of internal and user bot programs.



to better illustrate the concepts presented in section 5.1, we now show a simple example that uses all the main components of a general multi-agent artificial intelligence game. the example involves a game designated as the snake game, which is also used in the following sections.



user bots may control the snake actions indirectly, changing their direction of movement. if two snakes have the same behaviour, they may be controlled by user bots that run the same program code. but each snake may be controlled by a single user bot.



agent has the chance to proceed. but sometimes it is interesting to define a more restrictive order of execution. for example, consider the snake game of section 5.2. a special internal agent produces a visual representation for the environment. every time an internal bot executes a move on a snake, a visual change should be produced. in order to create good animation, the agent that provides visual representation should be executed immediately after the execution of any other internal bot of the system.



all internal bots that move the snakes(all agents of the system, except exib and the user bots). lines 4-9 choose, non-deterministically, an agent from the nextagents set. this agent is activated, removed from the nextagents set and defined as the current active agent. lines 11-12 will only be executed after curag has executed its transition rule, when it is automatically deactivated. then, agent exib is activated to show the possible changes produced by curag. line 14 will only be executed after exib has executed its transition rule. a new agent is selected from the nextagents set, in lines 4-9, until this set becomes empty. then the process starts again in lines 1-3 with the set of all bots, except agent exib. rules of lines 16-18 assures that all user bots will always be active, so the transition rules of the user bots may be executed at any time.



the execution order of agents may be programmed directly in the code of the internal bots. but separating the rules for the scheduling policy from the rules of the game can make the specification more clear. it can also make proofs of properties related to the scheduling policy easier.



the rules of game, defining the code executed by internal bots, which produce movements for the snakes. competitors may write user bots to control the direction of movement of the snakes. finally, a main module creates instances of the user bots.



used here for the definition of the body of derived functions and actions. for example, given a snake descriptor, function getlength returns its length. suppose that p is a position neighbour to the head of a snake described by a snakedescriptor s. then action movetoposition changes the position of the snake head to p, moving also the cells of the snake body. notice that call-by-reference parameter passing is important for this action to work properly.



an user bot has access to its own agent using function self, but it has no access to other agents. the framework gives the permission of this kind of access only to the main module. this restriction ensures that an user bot can only affect the direction of movement of the internal bot associated to it by function snakecontrol.



the action login receives an user bot as a parameter. it creates a new agent, an internal bot, to move a snake. the new internal bot is associated to the user bot using function snakecontrol. a descriptor is created to store information about the new snake. this descriptor is associated to the new internal bot using function snakeinfo. using action login is the only way new snakes are inserted into the game.



artificial intelligence games are usually defined using logic languages like prolog. examples of simple games created with prolog can be found in. a much more complex prolog game is described in[15,16]. but problems with efficiency of generated code prevent logic languages of being used on games with visual animation.



competition will be established among students, who are supposed to write programs for bots representing the competitors in the proposed games. advanced artificial intelligence techniques may be used in order to produce the best programs. we expect that this competition will make students feel also motivated for learning formal specification methods like asm.



