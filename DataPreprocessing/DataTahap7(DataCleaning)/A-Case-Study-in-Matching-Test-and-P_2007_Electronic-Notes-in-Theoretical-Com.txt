this paper studies the complementarity of test and deductive proof processes for java programs specified in jml(java modeling language). the proof of a program may be long and difficult, especially when automatic provers give up. when a theorem is not automatically proved, there are two possibilities: either the theorem is correct and there are not enough pieces of information to deal with the proof, or the theorem is incorrect. in order to discriminate between those two alternatives, testing techniques can be used. here, we present experiments around the use of the jack tool to prove java programs annotated with jml assertions. when jack fails to decide proof obligations, we use a combinatorial testing tool, tobias, to produce large test suites that exercise the unproved program parts. the key issue is to establish the relevance of the test suite with respect to the unproved proof obligations. therefore, we use code coverage techniques: our approach takes advantage of the statement orientation of the jack tool to compare the statements involved in the unproved proof obligations and the statements covered by the test suite. finally, we ensure our confidence within the test suites, by evaluating them on mutant program killing exercises. these techniques have been put into practice and are illustrated by a simple case study.



three methods are provided to modify the system. init resets all buffers to zero. add(x) increases the total number of elements of the system by x(x> 0) by adding x elements to the buffers; these elements are distributed in b1, b2, and b3. remove(x) decreases the total number of elements in the system by x(x> 0) by removing x elements from the buffers.



the java applet correctness kit(or jack) provides an environment for the verification of java and javacard programs annotated with jml. jack aims at proving properties of a given java class, considered in isolation; these properties are expressed as jml assertions. it implements a fully automated weakest precondition calculus that generates proof obligations(pos) from annotated java sources. each proof obligation is related to a path in the source code of the program.



all checks succeed: the behavior of the operation conforms with the specification for these input values and initial state. the test delivers a pass verdict. an intermediate or final check fails: this reveals an inconsistency between the behavior of the operation and its specification. the implementation does not conform to the specification and the test delivers a fail verdict. an initial check fails: in this case, performing the whole test will not bring useful information because it is performed outside of the specified behavior. this test delivers an inconclusive



each operation call may lead to a pass, fail or inconclusive verdict. as soon as a fail or inconclusive verdict happens, we choose to stop the test case execution and mark it with this verdict. a test case that is carried out completely receives a pass verdict.



combinatorial testing performs combinations of selected input parameters values for given operations and given states. for example, a tool like jml-junit generates test cases which consist of a single call to a class constructor, followed by a single call to one of the methods. each test case corresponds to a combination of parameters of the constructor and parameters of the method.



for the 819 test cases generated from s2 jcoverage reports that 100% of the java statements have been executed. so, at least all the operations have been covered, and all jml assertions have been evaluated while exiting these operations. but, at this point, nothing guarantees that the path of each proof obligation has been covered by a test.



mutation analysis is based on seeding the implementation with a fault by applying a mutation operator, and checking whether test set identifies this fault or not[5,11]. a mutated program is called a mutant. a mutant is said to be killed if the test suite reveals its error.



in order to limit the number of mutants, we applied mutations only to statements that are involved in the path related to unproved pos. for instance, we generated 20 mutants corresponding to the unproved po#7 and our test suite killed 100% of them. an interesting point is that different tests of a same packet may kill different mutants. this means that these packets feature some kind of diversity.



at this point of the case study, we have reached sufficient confidence in the correctness of the remaining proof obligations to get back to an interactive proof activity. actually, only pos#1 to#5 deserve to be proved at this stage, because corrections of remove will not affect their correctness. of course, nothing guarantees that our test suite was able to detect all kinds of subtle errors. this is why a final proof activity is definitely needed to assess program correctness. still, the benefit of our testing activity is that the validation engineer will not waste time trying to prove false proof obligations, or even correct ones such as#6 or#7 which may be affected by the correction of remove.



the real world, written with 500 loc, distributed into 8 classes. the specification is given in jml. most preconditions are set to true. since the application deals with money, and since some users may have malicious behaviors, the application is expected to have defensive mechanisms. thus, it is supposed to accept any entry, but it should return error messages or raise exceptions if the inputs are not those expected for a nominal behavior.



for each class, we produced only one tobias schema. they were rather straightforward, as s2 in the previous case study. their design and unfolding with the tobias tool only took us a few minutes. each schema produced between 48 and 1024 test cases. we then executed them, and, as expected, failed tests were only related to currency_src.



the mutation analysis was not possible for account and rule due to unsolved technical problems. for the other classes, we could notice that all mutants were killed for balances_src and transfers_src. however, no mutant have been killed for savingrule and spendingrule. clearly, testing schemas for those two classes were not relevant enough. more insightful test schemas must be defined to generate appropriate test suites for these classes and increase the confidence in their correctness.



schemas can generate several thousand of test cases). their execution may reveal errors in the code under validation and hence point out false proof obligations. the huge number of succeeded tests, and an evaluation of the quality of the test suite, should increase the confidence in the remaining proof obligations.



statement vs path coverage. since jack is based on the notion of path, it makes sense to use path coverage instead of statement coverage. besides the fact that we do not have such a tool available in our environment, we suspect that this more detailed analysis will slow down the testing process, and may in some cases result into over-detailed test reports. therefore, we believe that it should be provided as an option.



automatic process. our approach only makes sense if the whole testing process is cheaper than interactive proof activities. here each step is automated. jack associates automatically po to paths. tests can be generated automatically thanks to combinatorial tools, such as tobias. jcoverage analyses automatically lines covered during test execution. grouping test cases is done by sorting jcoverage results. killing mutants is done automatically.



feeding assertions into the proof process. the tests generated with tobias are designed independently of the structure of the code or the specification. we expect that they could provide interesting input to the daikon invariant generator. this would allow to feedback of the proof process with assertions generated from the tests, resulting in a secondary benefit of the testing activity.



