web scripting languages, such as php and javascript, provide a wide range of dynamic features that make them both flexible and error-prone. in order to prevent bugs in web applications, there is a sore need for powerful static analysis tools. in this paper, we investigate how abstract interpretation may be leveraged to provide a precise value analysis providing rich typing information that can be a useful component for such tools.



the success of web scripting languages such as php and javascript is also due to their wide range of dynamic features, which make them very flexible but unfortunately also error-prone. a key such feature is that language operations allow operands of any type, applying implicit type conversions when a specific type is needed. php, our example language, calls this feature type juggling.



type juggling. thanks to the definitions above, most of our domains already include enough information to handle type juggling. for example, the definition of tobool depends on the set num0={0,0.0}. in order to define a precise abstract tobool, we should avoid loss of precision when deciding if an abstract value, once 8 some points in our lattice, such as p`, 0, kq are redundant(zero has no sign). it is possible to optimise the domains to remove such points, slightly increasing the efficiency of the analysis(although the precision remains the same). we leave investigating that direction to future work.



