implementation of term-graphs based on this formalism. as tom provides rewriting strategies, integrating such structures in the language offers strategic graph rewriting for free. after introducing the notion of relative positions, we will explain how the language can be extended to offer facilities for strategic graph rewriting. finally, we will illustrate the use of this extension by an implementation of lambda-calculus normalization.



the originality of the previous approach is that pattern matching on terms with references built upon t(f, x) is simply defined as pattern matching on terms of tref(f, x). there is therefore no need to extend the notion of rewriting, which allows us to reuse existing results and rewriting tools. however, the questions raised by this formalism are situated at another level: we would like the rewrite system to rewrite only valid terms. giving some non-trivial criterion on rewrite rules implying this property remains an open question for the moment. the next sections of this paper therefore focus on technical aspects of the pattern matching problem implementation.



let us elaborate on the mapping mechanism. it provides an algebraic view of some java object(e.g. seeing integers as peano natural numbers, or seeing an xml tree as a term). it is divided into two parts: the destructive part and the constructive one. the destructive part is used by the matching algorithm and its



on the other hand, the constructive part is used by the compiler to build an algebraic term. it usually consists in calling the constructor of the java class implementing the term. although our goal is to work as much as possible on top of classes and mappings generated by gom, we will punctually adapt some mapping to our needs.



given these language constructs and the terms described in section 2.2, there are many ways to express matching against patterns with references. as for term construction, patterns can be expressed at low-level using directly positions or by a syntax based on labelling. in each case, it refers to a stated subterm whose position is well-known. to compare two references by value instead of references, we will introduce a deref operator in patterns implemented using tom mappings.



not differentiate two types of children. therefore, it may be convenient to have the patterns s(x:a(),x) and s(x,x:a()) match either s(a(),pos(-1,1)) or s(pos(-1,2),a()). the normal form mentioned in section 2.2 enables such a feature: it is sufficient to maintain normalization of both terms at runtime and



even if the classical representation of term-graphs by a labelled graph is similar to ours, the conditions on rewrite rules are more restrictive(the left-hand side of a rule is limited to trees). for now, term-graph rewriting in tom is expressed by syntactic term rewriting. contrary to, there is no garbage collection phase and referenced subterms can disappear or change, leading to invalid terms. one solution would be to integrate this garbage collection phase in the tom matching. an other attractive approach would be to implement the formalism presented in where the right-hand side of the rewriting rules consists in a set of actions on the pointers.



tom provides a powerful strategy language inspired by elan and stratego. the purpose of strategies is to describe how transformation rules should be applied. in case of terms with references, the strategy language must be extended in such a way that we can traverse them as graphs.



one noticeable property of strategic programming with tom is that it is possible to get the current absolute position inside the visited term during a traversal. this allows for instance to collect in one pass the set of reduced forms of a term for a given rewrite system. in our case, we will make use of this feature in the next section to collect the positions of bounded variables occurences under an abstraction.



a major part of the presented propositions has been implemented. we are now working on the definition of a rewriting step similar to the one of. another field of investigation would be the writing of ref strategies aborting infinite loops appearing during the traversal of a graph with cycles. this could be achieved by some map associating counters to visited nodes.



as shown by the last section, this model has interesting applications and opens promising perspectives in terms of program transformation and code analysis. besides, the normal form described in section 2.2 makes it a solid basis for experimenting transformations on term-graphs in a concise and expressive manner.



