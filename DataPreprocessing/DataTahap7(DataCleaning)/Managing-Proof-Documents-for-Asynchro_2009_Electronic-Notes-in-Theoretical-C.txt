the communication with an interactive prover has traditionally been structured linearly[6,1]: the commands of a proof script are stepped through oneby-one, and the region that has been sent becomes locked to prevent further editing by the user. an undo mechanism built into the prover is used to revert the steps and unlock parts of the region on demand. in this model, the user interface serves as a script buffer that tracks the commands that have been processed by the prover, such that they can be saved to a file for later replay.



the linear processing model is very much centered on the mechanics of proving and it is not flexible enough for greatly improving the usability of future user interfaces. one approach to usability is the direct manipulation of familiar objects. aspinall et al. have developed a document-centered view in which the user edits a proof document just as a mathematician would edit a pen-and-paper proof. the prover is used only to verify the consistency of the document. the actual processing of proof commands, however, remains linear in their proposal.



language, for example, proofs do not influence any of the references to the proven fact. it is therefore possible to postpone the execution of proofs until processing resources become unused, and different proofs can be executed by different processors in parallel. since proofs take 95% of the overall processing time, the document structure itself can be re-checked almost immediately in response to edits by the user. the second improvement concerns usability. the goal is to provide a behaviour that is similar to that of the mizar system. there, the prover runs in batch mode and annotates the input proof document with error messages where processing fails. however, it continues processing at the first command that does not depend on the erroneous command. in this way, the user can work in terms of the metaphor of a proof document. wenzel proposes to make this kind of response available for interactive proving sessions. the linear processing model is dropped in favor of asynchronous processing of proof documents, where the prover decides when it will process which command.



proof processing poses on the user interface component and the software design of both interface and prover. our main contribution is a new state model for commands that enables asynchronous processing and a corresponding protocol for the communication between interface and prover. since the protocol allows the prover to choose the processing order, it can be also be supported by existing, linear-processing provers during a migration phase. we present a concrete implementation of a user interface that works with the current development version isabelle.



the remainder of the paper describes our solution to this challenge. section 2 proposes a state model for commands that delegates the decision about the order of processing entirely to the prover. section 3 describes a software architecture for the user interface that supports asynchronous proof processing. section 4 compares our proposal to related work. section 5 concludes.



isabelle is currently being extended to support asynchronous processing of commands. to place as few constraints as possible on the software structure of isabelle, we abstract over the concrete implementation and base our architecture on an abstract model of asynchronous processing. this approach has the additional advantage that the infrastructure and user interface that we develop in section 3 will work with other provers as well.



izing accesses to shared resources which occurs in any form of asynchronous or concurrent processing. in the present application, the commands are conceptually shared between the prover and the interface and each component needs to manipulate them according to internal considerations. the conventional model of mutexes to prevent interference is not sufficient, since prover and interface run in separate processes. we therefore introduce an ownership semantics: instead of sharing some memory object between two threads, each process manipulates those commands that it owns, and there exists a protocol for transferring ownership.



the state sent indicates that the command has been received successfully by the prover. the state has four substates which reflect the general execution model from section 2.1. they are introduced for the benefit of the user who will want to be informed about the progress of proving. the user interface may, for instance, highlight the commands according to the substate. the transitions are labelled with informational messages sent by the prover. if a command ends in state error, then the interface may decide revoke the command automatically for further editing.



there is no event interrupt which the interface could send to interrupt a particular command. interruption occurs automatically if the prover receives a revoke message for a command that it happens to be processing. in the model of section 2.1, the scheduler will abort the corresponding working thread.



the second group addresses the maintenance of the document structure. since a batch run must be guaranteed to produce the same results as the interactive work, the textual order of commands in the proof document needs to be known to the prover. the interface therefore sends message create(id,prev) whenever it creates a new command with id id whose textual predecessor has id prev. it sends destroy(id) when the user edits have destroyed the command with id id. the interface must own the command that it reports as destroyed.



it is important to point out that the editor does not have to be written in java. it is also possible to write an adapter that implements the interface but translates the method calls to messages that are sent over some communication channel. the callbacks to the observers take place when the editor process sends a change message.



the editor may also generate events send and revoke(section 2.2) that change the state of individual commands, and induce the command executor to send them to the prover or have the prover release them. whether the events are triggered explicitly by the user or a special logic generates them automatically is not specified by the iapp. we see it as a distinct advantage to be able to experiment with different strategies and evaluate their effect on



we have also considered using a general incremental parsing algorithm(see) to delineate the commands. however, the specialized solution makes it much easier to guarantee that no unnecessary changes to the document structure take place. also the interaction with the command state cannot be reconciled with existing parsing technology.



the logic of the command executor itself is minimal. the command objects from section 3.2 implement the state model from section 2.2, i.e. they trigger the appropriate state changes according to the occurring events. the command executor merely handles commands in states to be send and to be revoked by dispatching messages send and revoke, respectively, to the asyncprover.



the middle pane shows the text of the proof document. the highlights indicate the processing status of individual commands. since the emulator(section 2.4) implements a linear processing strategy, they resemble the locked region in conventional interfaces[1,6]. the left pane shows an outline view that is created in a straightforward manner by observing the document structure and the information attached to commands by the splitter(section 3.2). the outline reflects edits by the user immediately: when a new keyword is entered, a new item appears in the outline; when a keyword is destroyed, one item disappears.



the right pane resembles the standard output windows of the proofgeneral. however, its function is very much different. the standard windows follow the command processing by the prover, i.e. they contain the results of the last processed command. wenzel has pointed out[18,19] that in the context of asynchronous proof processing, this behaviour is not sensible. instead, the output widgets display the results attached to the command that the caret is currently in. if that command has not been processed, the preceding command is used.



the lower part allows the user to observe the communication between interface and prover. summaries of the counts of message types are shown on the right. it is also possible to limit the number of handled messages, for instance to avoid flooding the interface with an excessive number of tracing outputs.



other strategies for sending commands are possible. in continuous proof processing, for instance, the interface sends all commands that the user is not currently editing. when the user hits a key within a sent command, the command is revoked and will not be sent again until the caret leaves it. if a command is found to contain an error, it is revoked and left idle until the user has edited it again. although some commands are executed only speculatively, with multi-core processors the user does not notice an increased response time of the interface.



by the display components; the broker sends unparsed text fragments to the prover and receives the structure in a parse command in return. parsing is expected to be efficient and to occur after a brief delay. the user can induce the broker to send a parsed command to the prover, in which case the command enters state being processed. when the prover sends the acknowledgement that the command has been processed successfully, the state changes to processed. if an error occurs, the command reverts to state parsed. the state outdated is used to model undo/redo mechanisms.



