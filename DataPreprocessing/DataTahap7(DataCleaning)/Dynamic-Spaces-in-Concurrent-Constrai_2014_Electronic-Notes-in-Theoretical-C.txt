proposed linear concurrent constraint programming(lcc), inspired on linear logic and linear logic programming, allowing the use of linear constraints, that is, constraints that once used by an agent are removed from the global store. on the other hand, saraswat et al. proposed timed ccp(tcc), which is an extension of ccp with time modalities. more recently, knight et al. proposed another ccp-based language with spatial(sccp) and epistemic(eccp) modalities(see in a survey of the state of the art in ccp).



systems to represent, for instance, agents that can update/change the content of the distributed spaces. also, by changing the underlying subexponential structure, different modalities can be put in the hands of the modelers and programmers. and most importantly, now it is possible to use all the linear logic meta-theory for reasoning about such systems.



there are at least two ways of proceeding in this direction. one aspect that could be explored is that of proposing richer subexponential signatures in sella, hence having different computational behaviors. for example, it seems that if the initial signature is the[0, 1] interval, then the correspondent calculus has a probabilistic flavor. hence one could think of more elaborated topological spaces as signatures, like hilbert spaces for example, achieving in the other side interesting concurrent systems.



the key difference to standard presentations of linear logic is that while linear logic has only seven logically distinct prefixes of bangs and question-marks, sell allows for an unbounded number of such prefixes, e.g.,!i, or!i?j. as showed in, agents can have an internal structure, i.e., its local store can be divided into locations. for that, we shall identify such locations as different subexponential indices in the signature as we did in. unlike sccp, we shall allow unbounded and linear locations to specify spaces where information can be updated;



similar to most processes calculi, the language of processes of dccp features a small number of constructors and it is powerful enough to express interesting behaviors of concurrent and distributed systems. common to all languages based on ccp, we include constructs to add(tell) new information to the store, to hide(local) variables and to compose processes in parallel. following the developments of lcc[6,10] and utcc, we allow the quantification of free variables in ask processes. furthermore, as in lcc, ask agents consume information when evolving due to the linear nature of the store. here we notice that, by changing the subexponential structure, we can specify that some stores are persistent while some others are linear. finally, following the developments of spatial ccp(sccp), we allow processes to be confined to a given space(see[p]s below). however, unlike sccp, in dccp it is possible to create and communicate shared spaces of communication between agents. later we show that this ability is not ad hoc since we can give it a declarative meaning thanks to the connectives d and a in sella.



restriction(i) prevents agents to execute processes in the space of other agents. restriction(2) disallows agents able to read from the store of another agent. moreover, as we shall see, processes of the form tell([c]g(l)) in the agent f will be interpreted as an asynchronous communication from f to g.



to explain the rule rs, consider the process[tell(c)]l. what we observe from this process is that the constraint[c]l is added to the store. this means that the output of tell(c) is confined to the space l. now consider the process[ask c then q]l. in this case, to decide if q must be executed, we need to infer whether c can be deduced from the information in location l. hence, the premise of rule r considers only the store`fi(l) di. moreover, the new store in that location, i.e., dj is again placed at location l as shown in the conclusion of the rule.



