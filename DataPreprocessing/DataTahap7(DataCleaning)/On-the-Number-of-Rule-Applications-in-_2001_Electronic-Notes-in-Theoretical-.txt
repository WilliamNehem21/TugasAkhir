we predict the maximal number of rule applications, i.e. worst-case derivation lengths of computations, in rule-based constraint solver programs written in the chr language. chr are a committed-choice concurrent constraint logic programming language consisting of multi-headed guarded rules. the derivation lengths are derived from rankings used in termination proofs for the respective programs. we are especially interested in rankings that give us a good upper bound, we call such rankings tight. based on test-runs with randomized data, we compare our predictions with empirical results by considering constraint solvers ranging from boolean and terminological constraints to arc-consistency and path-consistency.



in, to prove termination of chr programs, we use a ranking that maps head and body of each rule in a chr program to natural numbers, such that the rank of the head is strictly larger than the rank of the body. intuitively then, the rank of a query yields an upper bound on the number of rule applications(derivation steps), i.e. derivation lengths.



if a constraint matches the head of a rule, it is replaced by the body of the rule. if no rule matches a constraint, the constraint delays. for example, the query even(n) delays. the query even(0) reduces to true with the first rule. to the query even(s(n)) the second rule is applicable, the answer is n=s(m),even(m). the query even(s(0)) results in an inconsistency after application of the second rule, since 0=s(m) is inconsistent.



related work. to the best of our knowledge, there is no work in logic programming concerned with predicting derivation lengths for concrete programs. somewhat related is, where an instance of quantative observables is used to prove termination of probabilistic ccp programs based on finite average derivation lengths. in the context of transforming ccp programs, where derivation length corresponds to the number of procedure expansions(unfolding steps), this measure is used to compare the efficiency of transformed programs in.



overview of the paper. this paper is a revised and extended version of. the main extension concerns the empirical results which are presented here for the first time. we will first give syntax and semantics for chr. then, we introduce rankings and show how they can be used to derive tight upper bounds for worst-case derivation lengths. the main, fourth section reviews various chr constraint solver programs and gives rankings for them. based on the rankings, derivation lengths are discussed and empirical results from randomized test-runs of the constraint solvers are presented and evaluated. we conclude with a discussion of the results obtained.



a constraint is a predicate(atomic formula) in first-order logic. we distinguish between built-in(or predefined) constraints and chr(or user-defined) constraints. built-in constraints are those handled by a given constraint solver. chr constraints are those defined by a chr program.



where the rule has an optional name n followed by the symbol@. the multihead h is a conjunction of chr constraints. the optional guard g followed by the symbol| is a conjunction of built-in constraints. the body b is a conjunction of built-in and chr constraints.



definition 2.2 a state(or: goal) is a conjunction of built-in and chr constraints. an initial state(or: query) is an arbitrary state. in a final state(or: answer) either the built-in constraints are inconsistent or no derivation step is possible anymore.



in we prove termination for chr programs under any scheduling of rule applications(independent from the search and selection rule). roughly, a chr program can be proven to terminate if we can prove that in each rule, the rank of the head is strictly larger than the rank of the body. we rely on polynomial interpretations, where the rank of a term or atom is defined by a linear positive combination of the rankings of its arguments.



theorem 3.4 given a chr program p without propagation rules. if the ranking condition holds for each rule in p, then the worst-case derivation length dp for a bounded goal g in p is bounded by the rank of g. we write



we are interested in chr rankings that get us as close as possible to the actual derivation lengths. this is the case if differences between the ranks of the heads and bodies of the rules in a program are bounded from above by a constant. we call such rankings tight.



definition 3.5 given a chr ranking of a simplification rule h<=> g| b. the ranking is exact for the rule h<=> g| b iff rank(h)= rank(b)+ 1. the ranking is tight by n for the rule h<=> g| b iff rank(h)= rank(b)+ n, where n is a natural number. the ranking is tight by n for a chr program p iff the ranking is tight by ni for all rules in p and n is the maximum of all ni.



it can be much smaller. for example, the goal and(u,v,w) delays, its derivation length is zero. another example is a goal that contains the constraint and(0,y,1). if it is selected first, it will reduce to the inconsistent built-in constraint 1=0 in one derivation step. because of the inconsistency, this is a final state of the derivation.



it will reduce to the constraint x=y in 8 derivation steps. the prolog predicate test/3 produces a chain of and constraints, where the last variable of one constraint is the first variable of the next constraint. the first(a) and the last(b) variable are returned.



the rank adds one to the length of the list in order to give a cardinality with the empty list a positive rank. for example, consider the goal#(0,0,[],0). any of the three satisfaction rules can be applied to it and the derivation length will always be one.



the ranking is exact for the two recursive reduction rules, because of the order constraint implied by delete. it is tight by l only for the three satisfaction rules, since a cardinality constraint with arbitrary rank may be reduced to built-in constraints with rank 0 in one derivation step. hence the solver program card is tight by l.



every rule application removes at least one primitive constraint and at most all of them from the set of primitive constraints r3 by intersecting it with r12. if the maximum number of primitive constraints is p, the ranking is tight by at most p. the actual tightness depends on the intersection behavior of the set of primitive constraints.



assume we drop the rule add from the solver. then the interval computations use only min and max, i.e. no new numbers can be computed for the interval bounds. let there be n different numbers in the intervals of the goal. then we can replace the maximal interval constraint rank w by the tighter n.



terminological formalisms(aka description logics) are used to represent the terminological knowledge of a particular problem domain on an abstract logical level. one starts with atomic concepts and roles, and then defines new concepts and their relationship in terms of existing concepts and roles. concepts can be considered as unary relations similar to types. roles correspond to binary relations over objects. in this paper, we use a natural language like syntax to help readers not familiar with the formalism.



