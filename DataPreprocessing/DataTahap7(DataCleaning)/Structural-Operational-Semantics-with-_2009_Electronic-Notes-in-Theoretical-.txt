we define a formalism for structural operational semantics(sos) with first-order-logic formulas as premises. it is shown that in most uses(including all practical uses) this formalism has the same expressivity as sos without first-order logic. furthermore, we give a congruence format for(strong) bisimilarity. the latter is shown to be strongly related to the ntyft/ntyxt format.



also w.r.t. traditional tsss, the notation of is somewhat deviant in the fact that unbound variables may only occur in the source of the conclusion of a rule. it should be noted that in examples of traditional sos, where the sets of premises usually only consists of a small number of transitions, the set notations are usually omitted. we will not do so, for the sake of comparison. where one would previously to bind the occurrence of x' explicitly. there is an implicit binding of the variables from the source of the conclusion. as we will show in this paper, this needlessly increases the gap between traditional tsss and those of. in the syntax of the type of sos specifications as introduced in this paper, named fol-sos(sos with first-order logic), w.r.t. deduction rules without negative premises, the only difference with the traditional rule is that the set of premises are combined into a single formula by connecting them by means of conjunction. so the traditional rules 4



in section 3.3 we give elegant rules, in fol-sos, that capture the previously mentioned examples of the use of quantification in sos(i.e. those from[2,3,15,18]). we show that allowing for the use of first-order logic formulas in premises does not increase expressiveness for well-defined tsss(i.e. it only increases conciseness).



we use formulas as premises for sos rules, but we still need to consider the set of literals used in such a formula. therefore we introduce the following function. note that when introducing a function f on formulas, we often also introduce an auxiliary function f for functions in a negative context.



in traditional tss, the ntyft/ntyxt format restricts the premises such that the right-hand sides of all positive transitions among the premises(in traditional tss only positive transitions have a right-hand side) are variables and need to be different. here we need a similar restriction, though, due to the presence of the full generality of first-order logic formulas as premises, establishing this is more involved. first, we define a function dv(for distinct variables) to determine whether or not all right-hand sides of literals are variables and whether the unbound ones are unique or not. the function ubrhs(for unbound in right-hand side), also defined below, returns the unbound(or free) variables that occur in right-hand sides of



a fol-tss is in the fol-tyft format if all its rules are in the fol-tyft format. a fol-tss is in the fol-tyxt format if all its rules are in the fol-tyxt format. a fol-tss is in the fol-tyft/tyxt format if all its rules are either in the fol-tyft format or the fol-tyxt format.



the rules of example 3.6, example 3.7 and example 3.8 all satisfy the foltyft/tyxt format.(the rules of example 3.9 do not, but there the notion of bisimilarity is not relevant, as this is essentially meant to be a term rewriting system.)



we have introduced sos with the full power of first-order logic in the premises and given an intuitive semantics that is strongly related to traditional semantics. furthermore we have given a conservative extension of the ntyft/ntyxt congruence format and the format for congruence in the setting of. we show that our format is strictly more expressive than the ntyft/ntyxt format. in order to also give a(partial) comparison of our format with the untyft/untyxt format of, we first need to have a(partial) translation from the tsss of to fol-tsss that preserves at least some of the logical structure of the deduction rules.



