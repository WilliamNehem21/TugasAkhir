service oriented computing is an accepted architectural style for developing large, distributed software systems. a particular promise of such architectures is service orchestration, i.e. the ability to combine existing services to create more complex functionality, thereby yielding new services. in this paper, we discuss application-level protocol compliance checking of service orchestrations and service protocols using the semantic domain of modal input/output automata(mios). based on a practical example, we motivate and introduce new notions of refinement and compatibility, and prove that they constitute a valid interface theory. with this domain-specific interface theory, we provide a framework for application-level analysis of service orchestrations, thus complementing existing work on compatibility analysis. our theory is toolsupported through the mio workbench, a verification tool for modal input/output automata.



with the advent of service-oriented architectures(soas), the enterprise software landscape has been transformed from interactions of proprietary, closed components to an open and standardised communication between individual, self-describing components called services. of particular importance in this context is the composition of individual services to form a new service, which has come to be known as service orchestration. using techniques from the model-driven community, servicebased systems can be modelled in uml or other user-friendly, graphical or nongraphical languages and later be transformed to platform-specific models and code.



correctly implementing a given protocol in a service orchestration is not an easy task. our aim, therefore, is supporting developers in this task by providing application-level protocol breach analysis. this type of analysis focusses exclusively on protocol actions, which corresponds to the layer of abstraction the developer is interested in. it explicitly does not cover lower-level implementation issues such as race conditions.



thirdly, the analysis of service protocols and orchestrations should have some tangible result for the developer. an important point of service-oriented architectures is the ability to switch between different services with a minimum amount of effort. therefore, the analysis should give us the assurance that if an orchestration works with a certain protocol, it can work with any service implementation which corresponds to the same protocol. this property has come to be known as independent implementability.



the remaining sections are organised as follows. in section 2, we recall the fundamental notion of interface theories and their most important properties, and moreover, modal i/o automata which serve as the formal basis of our approach. then, in section 3, we recapitulate the standard definition of weak modal refinement which is shown to be insufficient for our needs. as a remedy, we define a



we first try to analyse this service orchestration with existing interface theories for modal i/o automata. the closest to our own definitions of refinement and compatibility for mios are weak refinement and compatibility, complemented by the notion of hiding. we shall introduce these now, before moving on to the discussion of our interface theory.



the initial problem indicated above(s.complete? not being possible after e.cancel?) is not detected by our refinement notion, which allows us to focus on finding protocol breaches. this problem can be dealt with using other analysis techniques such as interface theories building on weak refinement.



we now adapt weak modal refinement to satisfy our needs, i.e. we only want to consider relevant actions during refinement of mios. the basic idea for our refinement is to skip leading actions unrelated to the protocol under investigation. first, the refining mios may have more actions than the refined one, and second, in both directions in the definition we focus on the external actions of the more abstract mio since these actions are the relevant ones.



considering again the example of compatibility between the orchestration and the student protocol, strict-observational i/o compatibility treats e.cancel? and t.assessthesis! differently, as both actions are not defined in the student protocol. e.cancel? is only relevant as a prefix to s.abort!, while t.assessthesis! is not considered at all. we therefore get a positive compatibility result between thesismanagement and student as expected.





there is also an extensive body of knowledge on semantics and analysis of web service orchestrations based on industry standards like bpel; provides a decent overview. however, to the best of our knowledge, no approach so far has considered early application-level verification as a precursor to existing approaches. instead, the focus lies on analysis of specific aspects of service orchestrations. both and analyse bpel compositions through transformations to petri-nets. their composition analysis assumes a friendly environment in the sense of, but is not geared towards application-level analysis of service orchestrations. fu et al. present a translation of a composition of bpel processes to promela, the input language of the spin model checker. however, due to the interaction semantics of the translation, application-level verification is not feasible. two further approaches that are closer to ours use calculi to specify the underlying labelled transition systems: explicitly focusses on strong notions of compliance and compatibility. for calculi-based model-checking approaches like, the same reasoning as for the approach of applies: application-level verification is prohibited by the composition semantics of the language.



