section 2 and section 3 review security protocols, and the formal framework, respectively, to put the reader in context. the verification methodology is illustrated in section 4. a comparison with similar approaches in literature is reported in section 5. section 6 contains some concluding remarks.



one key, called public key, is used for encryption, and a complementary private key, is used for decryption. any principal can encrypt a message for another principal by means of its public key. the latter is the only one that can decrypt the message with its private key.



example 2.1 the wide mouthed frog(wmf) protocol aims at letting a send a fresh session key kab, i.e. a key to be used within a limited temporal interval, to b through a trusted server s. both a and b share two private



protocols have been designed to enforce many security properties. among them we consider integrity(the intruder cannot corrupt exchanged cryptograms), secrecy(the intruder cannot know exchanged cryptograms), and authentication(the intruder cannot let a principal misunderstand the identity of its partners in the communications). different kinds of security properties, like fairness and non-repudiation, will be addressed in future investigations.



we adopt the(widely accepted) dolev-yao intruder model: the intruder is a principal that can interfere with all the communications, e.g. by hiding, reading and modifying messages, with the only limit of the perfect encryption hypothesis. the intruder can have some private data, and can store data exchanged in previous runs of a protocol. it can be characterised in terms to explicitly indicate how principals can be connected together, i.e. how keys can be shared by them. it consists of an instance of the ip-calculus, a process algebra introduced in for describing the behavioural composition of components in open systems. the logic is used to formalise the properties that the protocol is expected to enforce. it predicates over the intruder knowledge, the way principals share keys and the data they exchange. moreover it allows for quantification over principal instances in order to uniformly express properties about multiple-runs of protocols.



output actions do not contain binders and input actions contain at most one binder of each variable). a variable can hence be instantiated either when a communication action is executed, or when the principal is dynamically connected to its partners in a protocol execution. note that open variables has been introduced in as a general mechanism to express the sharing of resources, e.g. communication channels, between components which are dynamically connected together. in this paper, this mechanism has been specialised to the sharing of cryptographic keys that allow principals to interact within a protocol run. names and variables are syntactically distinguished entities, the former are constant terms, the latter placeholders that can be substituted with terms or opportunely renamed. a principal must be closed: variables must be bound by either input actions or open variables.



to model multiple-runs, principals may be replicated in principal instances, obtained by indexing all variables(open or not) and all names in e with a distinguished natural number, e.g. a1(x1, xas1)[out(a1,{ta1, x1, kab1}xas1)]. principal instances with different indexes are distinguished, i.e. a1/= a3.



in step 2 a connection formula is specified, in order to constraint the allowed connections and the sharing of keys between principals. consider, for instance, principals a and s of the wmf protocol as described in example 3.1; if s is trusted, we might be interested in verifying only the executions of the protocol where(any instance of) a properly shares a secret key with(a corresponding instance of) s. this can be expressed by the following connection formula which, intuitively, states that the intruder cannot behave as a server. connection formulae, together with the join operation, are a distinguished feature of our approach. whenever a join operation is executed, the connection formula is checked and, if it does not hold, then the analysis of that trace is aborted. moreover, formulae constitute a formal device that the user can exploit for pruning the state space. indeed, by tuning the connection formula, the user can formally state assumptions that are usually implicit in the informal presentation of the protocol(e.g., the trustworthy of the server in the wmf protocol). the result of a verification session sometimes reveals that some assumptions on the protocol have not been correctly formalised. by refining the hypotheses on principal connections, false attacks can be filtered out. basically, connection formulae can be exploited for focussing the verification on those states that are interesting to the verifier.



an open system, where components dynamically access running contexts by connecting to other participants. for instance, considering web services, the components are the services and new services are built by properly connecting existing components. in the current practice, this is statically done by the programmer; while the join operation and the connection formula would allow the programmers to specify the constraints over the dynamic connections of their components.



step 3 specifies the initial knowledge of the intruder so that a protocol is checked under weaker conditions. this knowledge is mainly used for two purposes:(i) to let the intruder know some secrets(e.g. compromised keys) enhancing its attacking power, for instance to test the robustness of the protocol, and(ii) to let the intruder know something about past interactions between principals(cryptograms exchanged in previous sessions). the latter is especially useful in finding replay attacks where the intruder exploits messages appeared in previous session.



thentication. namely, each further interaction between a and b starts from message(6). server s shares a symmetric key with each principal. initiator a generates a nonce na, and sends it to b. then b asks s for a new session key, s generates kab and, in(3), encrypts the session key in two cryptograms



it is important to point out the role played by open variables. principal s has variables a and b respectively for the identity of the initiator and the responder. the server needs two further variables, ak and bk that are meant to store the symmetric keys that s shares with a and b, respectively. similarly, a and b use sk for storing the keys they share with s. notice that variables are distinct in different principals.



in and encryption/decryption primitives have been embedded into communication actions. though the linguistic properties of the resulting calculi are very similar to those in cip, our verification approach is different with respect to both and. indeed, introduces an event-based semantics where events are defined in terms of the enhanced communication; the semantics is then exploited to draw the relationships among petri nets, strand spaces and the inductive proof technique of[29,28]. in, this enhanced synchronisation mechanism simplifies the static analysis of cryptographic protocols. the main difference wrt and lies in the verification techniques adopted, which are completely different in the three approaches. indeed, embedding cryptographic primitive in the communication primitives allows us to define a symbolic semantics on the top of which our model checking algorithm works. this also allows us to avoid generating states that are considered not interesting(according to our working hypothesis). regarding efficiency issues, the amount of time used by aspasya is comparable to those used by sta sumes time in generating initial contexts and checking connection formulae. however, sta stops as soon as the first attack trace is found whereas trust and aspasya perform a search over the whole state space. trust generates the largest state space, mainly because it is based on a small step semantics. aspasya and sta have more compact state spaces whose difference lies in the fact that aspasya initially applies the join mechanism.



