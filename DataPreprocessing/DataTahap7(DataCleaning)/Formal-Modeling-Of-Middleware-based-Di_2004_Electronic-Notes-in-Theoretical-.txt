informal design notations(eg ball-and-stick type diagrams) despite their easy understandability have limited utility when one needs to mathematically analyze designs. design formalisms are needed in order to specify properties the designed system should satisfy as well as verify these properties on the designs. in addition, formal models of distributed systems may be simulated and implementation code generated from these simulate-able models. middlewarebased systems are ideal candidates for pre-implementation modeling because such highly concurrent distributed systems may hide subtle bugs that may not be captured by informal analysis.



one of the main features of middleware-based systems is that they usually are highly communication-intensive distributed systems supporting a wide variety of application synchronization mechanisms. classical architecture description languages(adls) usually support one basic form of interaction and thus cannot naturally express the rich communication disciplines of middleware. architectural interaction diagrams(aids), however, provide a parameterized mechanism that naturally supports a wide variety of interprocesscommunication and synchronization primitives as language-supported constructs. this frees the designer from having to simulate different ipcs byhand: something he would have to do if she with traditional adls[2,5,15]. this leads to cleaner models, as there is no clutter due to communication code. another benefit is that aids models have smaller state spaces, as each communication is now a single transition, as opposed to the multiple transitions needed when communication schemes are encoded using others.



in this paper, we illustrate the utility of our aids formalism with a study of the event heap coordination framework used by applications to coordinate themselves inside the i-room, an experimental ubiquitous computing environment at stanford university. we demonstrate how a model of the event heap may be rendered using our approach and why it is more efficient than conventional modeling techniques. in order to do this, we extend our work in by introducing a remote procedure call transition into the syntax of the language. as middleware systems typically include event-handling functionality similar to that of the event heap, in studying the event heap, we make a case for the application of our formalism to the problem of modeling different kinds of middleware systems.



a distributed system may be looked upon as a collection of multiple agents or processes interacting continuously with each other. for a formal model of distributed systems, one needs to define a) a base formalism for representing agents, b) a notion of concurrency, d) a semantics for inter-agent communication and d) a concept of hierarchy. in this paper, we are concerned only with finite-state systems.



of the language. what we want however is to have a more general mechanism by which it would be possible for the user to define her own systems of communication and this newly created communication discipline can then be plugged seamlessly into the native semantics of the language. buses are the means by which this goal is achieved.



the iros, or i-room os, provides a rich set of facilities to applications built on top of it to share data and control. the sharing and coordination of data between applications is done through the event heap component of the iros. the principal aims of the event heap is to make applications, that were not apriori designed to work together, interoperate in a dynamic, heterogeneous, ubiquitous environment.



thus the event heap provides for anonymous communication as there is no need to explicitly rendezvous applications. as long as two applications understand the same event types they will automatically coordinate with each other. the indirect interaction mechanism of event heap discourages strong dependency coupling among applications leading to better interoperability and fault tolerance.



our main aim is to define the event heap as a bus. as mentioned before, a bus is the abstraction of communication in aids. if we are able to define a bus for event heap we can then use this event heap bus as a primitive, then plug in different applications into the event heap framework and use the entire system for simulation and modeling. the event heap coordination and communication framewor will then become an atomic, native mode of communication like synchronous handshake is for standard state-machine based approaches.



in order to provide a definition of the event heap bus, we need to discharge three obligations. we have to provide a set of ports for the event heap and this set of ports will constitute the interface of the event heap. there may be any number of ports in this set signifying that the event heap semantics does not impose any restrictions on the components that may use it. the other two obligations are defining the data structure for the bus and providing bus rules.



data structures. our obligation here is to define the data representation inside the bus as well as to define certain accessor functions that will be used by bus rules to manipulate the data structures. we start by providing some elementary types: porttype, eventtype and templatetype. each of these types may be thought of as structures with fields that may be used for comparison with each other. we do not go into the details of the type structure because that is not the focus of our study. the interested reader may refer to the original(textual) specification of the event heap. ports are of porttype, events are of eventtype, templates are of templatetype. the structure of porttype can disambiguate between multiple ports of the same name but belonging to different components. we also define an atomic boolean operation on types called match which takes an eventtype and a templatetype and determines if they match by a comparison of certain fields.[again we do not consider the mechanism of how this is done] we derive the following types from the above elementary types.



event(v), t emplate(v), regport(v) are functions that operate on a data value of type packett ype and extract that part of the packet.that contains respectively the event, template and the port that the client registers to receive a particular type of event. recall that when a client registers, it sends a template to the event heap and tells it to send all events that match the template to a particular port on its interface. regport(v) returns that port at which the client wants to listen to.



an example. we give a simple example of event heap clients using the event heap bus. these clients can be models of any distributed application like a synchronized powerpoint presenter or a multibrowser client-server. let us assume that an event heap client is interested in a particular type of event which can be posted by any other event heap client of the i-room. in order to do that, the interested client executes a remote procedure call transition by which it retrieves these specific events. a remote procedure call



the aim of this paper has been to take a representative middleware system, the event heap, and show how it can be defined in the aids framework. other middleware systems would reasonably be expected to support the same set of features as the event heap and differ in implementation only. so our study makes a case for using aids for modeling middleware-based systems.



future work entails incorporating aids into the concurrency workbench framework and providing designers with the power to apply sophisticated analysis routines on aids models. we also seek to explore ways to extend aids by providing support for typed communication. also, in this paper we dealt with a simplified subset of middleware, namely event coordination. enterprise middleware systems like.net and com provide other, more complex functionalities as well, and itwould be interesting to observe how aids would accommodate these.



