which match the human reasoning style better than calculi developed for automated reasoning(e.g. the resolution principle). however, because these calculi have been invented for proof-theoretic purposes there are still many problems inherent to interactive proof frameworks based on these calculi. two particularly prominent problems with respect to interactive theorem proving are the presentation of proofs and the application of assertions



we use the recently developed core system as a logical basis. core already supports flexible reasoning at the assertion level in a contextual rewriting proof style. in this paper we develop a communication layer, the so called task layer, on top of the system. this layer exploits cores strength in the application of assertions and provides an additional mechanism for the structuring of proofs. the task layer consists of a datastructure to reference subgoals, together with a set of inference rules defined over this datastructure. in addition the layer provides a proof datastructure which represents the proof history.



we denote this representation as an indexed formula tree( ift) and observe that it represents a proof state in matrix calculi. thus, we can reuse the rules from these calculi to construct a matrix proof. in particular, it provides us with an efficient representation of variable dependencies.



in short, the core-calculus relies on proof states consisting of an ift representing quantifier and substitution dependencies and a fvift, which is a kind of working copy that is actively manipulated by replacement rule applications. the calculus consist of 12 rules, including a cut rule, that transform a proof state into exactly one derived proof state. a proof state is proved if the fvift is a propositionally trivially valid formula, such as, for instance, true+. the calculus is sound and complete for a variety of logics.



the framework provided by core so far is that the complete status of a proof is always represented as a single formula, which was one of the design goals. the system is augmented by the possibility to focus the reasoning process on arbitrary subformulas, without actually enforcing the decomposition of the formula, i.e. the fvift. to this end we add the possibility to introduce windows on arbitrary subformulas, which are explicit representations of the focus. for instance in the example above, without windows the complete formula is visible, i.e. the focus of the reasoning process is on the entire



note that we allow windows to occur below other windows. windows below which there are no more windows are so-called active windows. the intuition of focusing is that the content of active windows are those objects that can be manipulated by rule applications. to this end the pure core-calculus is extended to fvift with windows to obtain a reasoning mechanism similar to window inference.



because of its strength in the application of assertions core is well suited for interactive proof construction. however, optimal support for focus and rule choice is still challenging. one challenge is related to rule choice since the context of a formula is currently available only as a usually long and unstructured list of replacement rules. to make things even worse, there are already dozens of replacement rules even for rather trivial problems. in particular, the number of replacement rules that can be generated from a subtree of a fvift is exponential in the number of nodes in that tree. although this is an effective sign of the flexibility in proof construction provided by core this flexibility must be controlled during automatic and semi-automatic proof construction. a further difficulty for automatic proof search is the choice of the focus. because the focus of a proof can be changed arbitrarily it is hard to search for a proof in a systematic and goal directed way. in the following section we describe the task layer which supports the user in the structuring of the proof.



fvifts as introduced in sec. 2 represent all conjunctive and disjunctive subgoals of a proof state simultaneously. however, while individual subgoals can be highlighted with the window inference mechanism the system does not support the user in systematically splitting the proof into smaller subgoals. furthermore, a fvift can grow significantly during a proof which makes the presentation of a proof state difficult.



it is therefore a challenge to present a proof state to the user as a set of subgoals(tasks) while maintaining the advantages that arise from the fact that a proof state is represented as a single formula. this is what is addressed by our task layer. at this layer, we use the window structure to reference parallel subgoals within an fvift. these subgoals(tasks) structure the proof at the task layer where additional rules are provided to manipulate these subgoals. reasoning steps at the task level are mapped into reasoning steps in the core system which automatically guarantees soundness.



to describe the task layer we proceed as follows. first, we give a formal definition of the task data structure. then, we provide a set of implemented task manipulation rules. the inferences realized by these rules comprise simple decompositions of compound formulas, compound steps such as applications of assertions, and human-oriented steps such as lemma introduction.



henceforth, when presenting tasks, we will not distinguish between a window in the task and the formula it contains. for instance, instead of w1,..., wnd g in the definition above we will write ax1,..., axn d g. 6



tasks describe goals that have to be achieved during a proof process. the current tasks are stored in a so-called agenda. the proof process starts with an agenda that contains only the initial task. we can refine a task on the agenda to simpler tasks by the application of task manipulation rules. the proof process terminates, when all tasks in the agenda are closed.



task manipulation rules may vary from low-level, basic rules that perform simple logic manipulations, to complex rules and speculative rules. in the following, we shall give examples of three different kinds of task manipulation rules and their realization in core:(1) simple rules to split tasks for a conjunctive goal into subtasks, or to decompose disjunctive goals(sec. 3.2.1).(2) complex rules to apply assertions via the replacement rules and rules, which provide a functionality similar to the proof by pointing approach(sec. 3.2.2).



to apply replacement rules at the task layer we introduce the apply-rule. the idea is that in order to apply an assertion(i.e. a formula in a support window) the user merely needs to select an assertion by clicking at it at the user interface. the system then creates a list of all replacement rules that are justified by this assertion. in case there is only a unique applicable rule it is applied automatically via the apply-rule. in the more likely case that there is more then one rule applicable the user has to select the replacement rule that describes the appropriate application direction of the assertion. at this point heuristics will be used to narrow down the choice for the user.



the lemfw rule corresponds to the forward application of a lemma and replaces a goal formula g by another formula h. this then leads to the generation of an additional task which encodes the obligation to show that the proof step described by the replacement was actually valid. the related lembw rule allows to insert a new lemma a into the supports of a task which can then be applied via the apply rule.



in the box-line representation, a goal formula is presented below the available assertions, which are displayed in a box(see sec. 4). we realize this presentation style in the user interface by presenting the support windows of a task on top of the goal window. this facilitates the application of assertions, which can be applied in a uniform way by making use of the apply rule. the box-line presentation enables the user to apply an assertion by clicking on the corresponding support window. the replacement rules corresponding to the appropriate application direction of the assertion can then be applied with the help of the apply rule.



rewriting steps on the content of the active window result in a local lemma that needs to be tackled afterwards. this also holds for the window inference approach of robinson and staples. in the core system underlying the task layer introduced here transformations that are realized by application of replacement rules are guaranteed to be sound and hence do not introduce new subgoals.



we have introduced a task layer for the core system and described the implications of this layer for interactive proof construction. we were able to point out how the task layer helps to structure and display core proofs. furthermore, by exploiting the contextual reasoning paradigm of the core system we were able to combine and extend existing concepts like the proof by pointing approach in a single interaction layer.



in this paper, we gave a bottom-up description of the task layer serving as interface to core. such a bottom-up approach to enrich the logic layer by more abstract level reasoning tools is the standard approach in many proof assistants to support abstract level proof development. a drawback of the bottom-up approach, however, is that it usually causes an unnecessarily strong dependence of the abstract layer upon the logic layer. therefore, we are actually developing the task layer as independent as possible from the underlying logic layer, such that, in the ideal case, the logic layer becomes exchangeable. however, we do not propose proof assistants lacking a sound logical basis. instead, our aim is to distinguish better between abstract level reasoning and expansion into verifiable proofs at the logic layer.



in this paper, we gave a bottom-up description of the task layer serving as interface layer to the user on top of core. such a bottom-up approach to enrich the logic layer by more abstract level reasoning tools is the standard approach in many proof assistants to enable(ideally) abstract level proof development. a drawback of the bottom-up approach, however, is that it usually causes an unnecessarily strong dependence of the abstract layer upon the logic layer. therefore, we are actually developing the task layer in a top-down approach to keep it as independent as possible from the underlying logic layer, such that, in the ideal case, the logic layer becomes exchangeable. however, we do not propose proof assistants lacking a sound logical basis. instead, our aim is to distinguish better between abstract level reasoning and expansion into verifiable proofs at the logic layer.



j. siekmann, d. tsovaltzi, b. quoc vo, and m. wolska. discourse phenomena in tutorial dialogs on mathematical proofs. in in proceedings of ai in education(aied 2003) workshop on tutorial dialogue systems: with a view towards the classroom, sydney, australia, 2003.



