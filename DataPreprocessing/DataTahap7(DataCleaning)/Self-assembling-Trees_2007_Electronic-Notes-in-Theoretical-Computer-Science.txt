we propose in this paper to illustrate a method for deriving distributed algorithms. the broad idea is to solve a simpler problem, and then reinterpret the obtained solution assuming a generic distributed backtracking mechanism. this is reminiscent of the classic breakdown of solutions to np problems into an exploration(guessing the solution) and a verification phase(checking the guess is correct). it is also reminiscent of simulated annealing methods where a locally-driven search is backed by a random perturbation. another analogy is with declarative programming where



this compares best with direct approaches when the problem of interest needs reaching a consensus which is itself highly distributed. thus, for the purpose of illustrating the method, we choose a class of problems which is a simple idealisation of the phenomenon of self-assembly, where simple parts assemble in some predefined spatial arrangement by means of local and asynchronous interactions. solutions of such problems indeed involve arbitrarily complex distributed consensus.



the algorithm itself is obtained indirectly. one first defines a simple ccs algorithm such that any allowed tree construction can be simulated, and conversely all trees resulting from a series of local interactions are allowed. this is not yet a solution since the induced assembly may deadlock, but it gets very close to being one. indeed, by merely reinterpreting the same algorithm in rccs, and thus allowing backtrack on reversible actions, one obtains a real solution. for the sake of evaluating the method we compare the first algorithm with a direct solution in ccs which explicitly copes with deadlocks. one sees clearly that the latter is both harder to understand, and to prove correct, and also assumes more computational power from the basic processes.



there are limitations to this method. it is likely to provide significantly simpler solutions only to problems in need of complex consensus. another limitation is that it is for the moment restricted to problems the solution of which can be expressed in ccs. however, recent developements show that correct backtracking mechanisms can be derived for a vastly more comprehensive sos-based class of agent-languages, and that the reinterpretation theorem can be made to bear in the abstract framework of monoidal categories, and thus also covers more general grounds, such as petri nets.



the paper is self-contained but for the more technical notion of causality which is treated informally; a rigorous treatment is given in ref.[3,4]. sec. 2 presents the self assembly specification; sec. 3 introduces the algorithm in ccs; sec. 4 shows that although it may deadlock, it is well designed in that its causal computations are as in the specification, and that it is therefore correct in rccs; sec. 5 compares with a direct solution in ccs. 4



given some specification of a distributed system(such as the one given below in this section), and another lts(possibly obtained from a ccs process as in sec. 3) believed to be an implementation, one needs some means of stating the correctness of the implementation with respect to the specification. this is given by the notion of bisimulation.



note that coherence is the only constraint on trees grown out of our starting set of nodes v. instead, one could choose a different rule for growing trees, by specifying from the outset which trees are allowed. we opt here for the local growth rule, since it allows for simpler notations, and the method given here can anyway be readily adapted to the global growth case.



therefore, it is clearly impossible to exhibit a bisimulation relation between the specification and the code induced lts. however, the code is correct in the weaker sense that its causal computations(defined below) indeed match the specification. as we will see in the next section this is enough to ensure correctness, provided the process is re-interpreted in rccs. the idea is that, for instance, the deadlocked trace above may backtrack in rccs up until the wrong decision of recruiting c was made, and eventually recruit b. note that this is not saying that the process will find a solution, it may well loop infinitely. there are known theoretical results showing that one cannot do better in a purely non-deterministic interpretation. this is of little practical importance, since such backtracking schemes will be implemented with probabilities, and such futile infinite loops will have probability zero.



thus, the direct code may escape deadlocks. to keep things simple, we give up part of the distributed structure of the system: a node does not wait for the confirmations of its children until it has completed its recruiting task. this results in a better control of the construction process at the price of a loss of efficiency, since no agent can validate its recruitment until its parent is ready to receive the validation. yet the main difference is in the backtracking mechanism: the rccs code finds its way to a final shape by using partial backtracking, whereas the ccs one uses a top-down cancellation procedure to abort altogether the construction(as in ref.).



