semantics where each concurrently enabled transition must be considered separately in any given state. several techniques exist to address aspects of the state explosion problem. symmetry and partial order reduction exploit structure and concurrency to reduce the number of states in the reachable state space that must be explored to complete the model checking problem. bit state hashing(supertrace) and hash compaction reduce the cost of storage states in the reachable state space. all of these techniques enable the verification of larger problems, but in the end, are restricted to the number of states that can be stored on a single workstation. if the model checking algorithm exhausts resources on the workstation it is running on before completion of the verification problem, then the problem must be altered in some way to reduce the size of its reachable state space until it can fit into the available resources.



this paper presents an empirical study of the seminal static partition algorithm showing the level of load imbalance, regardless of the chosen static partition, that exists between the processes on different supercomputing platforms. the imbalance results in high idle times in several processors, as well as extremely large search queues. the high idle times indicate that many processors are not contributing to state enumeration, and the large search queues lead to premature termination by exhausting memory resources. furthermore, the imbalance in the partition slows down error discovery since states leading to errors can be buried deep in the search queues. the paper further presents a load balancing algorithm based on generalized dimensional exchange(gde) to mitigate idle time at the expense of additional communication overhead. load balancing the state partition algorithm improves speedup in distributed model checking despite the increased communication. in addition, it reduces



a major part of the testing is performed using the models located at the model database in. these models have been selected because they provide a large, controllable, interesting and diverse set for testing. the selected models are not representative of all types of problems, but they effectively capture our general observations in studying the several problems.



this section will first analyze the static partition algorithm and present the problems encountered when using it. after the analysis, we discuss two existing techniques to solve these problems. our results indicate that these techniques are not very effective on the models and benchmarks used by us.



a technique to improve performance of distributed model checking is the use of state caching to reduce the number of messages and hash lookups. previous work regarding state caching, to improve performance has been presented in. our analysis indicates the presence of duplicate states in the same message or in different messages being sent to other processors. this is due to the fact that many states in the state space of the model can be reached by different paths and from different states. to avoid this, a block of memory is allocated on each processor to function as a direct mapped state cache. only states not present in the cache are forwarded to their owning processors.



algorithm. a clear example of a model containing an inconspicuous error is the queens8 problem. the queens8 problem involves placing 8 queens on a chess board in such a manner that no queen is threatening any other queen. the error state is successfully placing all the queens in the described manner. the static partition algorithm performs well compared to the serial algorithm, but the gde load balanced algorithm outperforms both algorithms. even in other models we can see that the load balanced algorithm outperforms the static partition algorithm by a significant factor with the worst case scenario of performing only slightly better than the static partition algorithm.



using load balancing techniques such as gde, we have successfully balanced the queues on all processors and reduced the time to verify models in our benchmark suite. due to the non-deterministic nature of the gde load balancing algorithm, we have also changed the search order to the degree where error states in our models can be discovered earlier and by exploring a fewer number of states. using the gde load balancing algorithm we have also shown that maximum queue sizes have been decreased by an order of magnitude compared to the maximum queue sizes obtained in the static partition algorithm for the models and benchmark suite used by us. we have also shown that the communication overhead does not counteract the usefulness of gde load balancing when using a state cache.



future work in this research area would involve creating load balancing schemes that are completely independent of any user input regarding the frequency of load balancing. processors should be capable of avoiding situations where there is no useful work to do. a more detailed study of the gde scheme with respect to the amount of load balancing done between a pair of processors is also important. other dynamic load balancing schemes also provide an interesting field of further research too.



