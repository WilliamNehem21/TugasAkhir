in this paper, we discuss the gesture language, as described in[2,3], for interaction in 3d virtual space. however, the form of analysis we present can be applied to a more general class of issues, and is also independent of the gesture recognition technology used. in fact, the problems encountered in the analysis of the system can be dealt with at a level of abstraction that effectively hides the details of any specific technology that might be employed for the interaction.



the design of a gesture language forms an interesting example for the application of formal modelling because of its limited(but easy to extend) complexity and new aspects. we do not intend to criticise the language proposed in, but rather show an approach that may be of help in this area of interface design. there are a number of issues that have to be dealt with in the design of a proper dynamic gesture language. some of them are purely language related issues, others have their roots in human factors.



ambiguity. one of the problems of the gesture language is that when using only informal reasoning it is not so easy to make sure that there is no ambiguity in gesture recognition. in it has been shown that in one of the proposed gesture languages such an ambiguity exits, i.e. there are possible series of postures that may lead to the recognition of more than one gesture at a time. detecting ambiguities may not be that easy in general, however. a formal model and automatic verification tools may be helpful in finding critical situations.



overlap. another problem is that there might be some overlap between the gestures. this could lead to the partial recognition of one gesture during the recognition of another gesture. this way the recognition of a gesture following another may occur much sooner than expected by the user, leading to confusion.



this multitude of factors can make it rather hard to develop gesture languages that are a pleasure to use. moreover, often the usability of a gesture based interface is validated a posteriori, i.e. after all implementation work has been done and a prototype is available. finding the exact cause of usability problems at that stage may turn out to be very difficult. first of all because there are so many factors that may have contributed to the problem. secondly, because statistical approaches are used to recognise poses and gestures and therefore repeated experiments may produce different results for every test. thirdly because there is a natural variation in human performance.



the above problem could be handled better if a way could be found to analyse the factors separately. one way in which this could be done is to perform analysis on models of the gesture interface, focusing on different aspects in isolation. two of these aspects are ambiguity and overlap. this is the part we will focus on in this paper.



the modelling technique we use is that of(hybrid) automata using varying degrees of the capabilities of the model checking tool hytech[11,12]. this technique allows us to describe a relatively simple automata model of the gesture recognition process and perform automatic and systematic verification of ambiguities and overlap in the gesture language. we show how the model can be helpful for the improvement of the gesture language. as a next step we show how a timed extension of the model can be used to examine the effect on the recognition performance of the system when allowing for intermediate, non-specified, postures between specified postures of a gesture.



in the next section we describe in more detail the gesture language as originally proposed. section 3 shows an automaton model and analysis of a subset of the language illustrating the detection of ambiguity and overlap by means of reachability analysis. section 4 discusses improvements to the language and gives a model and analysis of the complete language. in section 5 and 6 human factors related issues and further research are discussed. section 7 draws a number of conclusions.



typical features that are used to characterise postures are the orientation of the hand and bending values of finger joints. for some of the dynamic poses, the trajectory of the movement is also specified. when the gesture language has been specified, recognition is performed by a gesture recognition machine. its algorithm operates by means of a number of parallel processes, each one specialised for recognising one of the gestures, that independently use the incoming data. when a gesture is recognised by one of the processes, this is notified to the application so that the system can react appropriately.



the first model we will consider models a subset of the gesture language. we model the zoom, the grip and the exit gesture recognition processes as separate automata using a graphical version of the language hytech. for details on the syntax and semantics of this language and its associated tool for reachability checking we refer to[11,12]. in this section we will explain the semantics informally while developing the models for the gesture language.



all three considered gestures consist of series of hand-poses of two kinds; flat and fist. all other hand-poses are recognised as being of the kind other. this simple model allows us to formalise the problem of ambiguity and overlap that may occur in the gesture language and how these problems can be detected automatically by means of model checking techniques.



this needs to be checked for each gesture separately. for example, it can be verified whether whenever zoom is in location z3 the other processes, grip and exit, can be in a location different from their initial ones g1 and e0. the hytech reachability analysis expression below checks whether zooming can be activated while both the grip and the exit gestures are on their way of being recognised at the same time, i.e. zoom is in z3 and grip or exit are not in their initial locations.



the first improvement is to remove the ambiguity between zoom and exit. in the simple version the system would start zooming whenever a flat pose is recognised. the original gesture recogniser is also able to discriminate the orientation of the hand-position to a certain extent. in fact, in one version of the gesture language the zoom gesture is made with the back of the hand towards the user and the exit gesture starts with a flat pose with the back of the hand away from the user or to the right of the user.



one approach to deal with this problem is to make the language more resilient to intermediate poses. but in doing so, we would like to know the effect of such a change on the reliability of the language recognition. this is particularly useful to obtain a first indication about the performance of different recognition strategies.



in this paper we have dealt with only a small subset of the above problems as a first step towards the more ambitious goal of informing design decisions based on theoretical models of different aspects of gestural interaction. in particular we showed how a rather simple graphical timed automaton specification can be used to analyse automatically ambiguity and overlap in a gesture language. further a timed extension of the model was developed to analyse a time dependent technique to make the language more robust. the analyses have been performed by means of reachability analysis provided by the tool hytech. this tool provides an exhaustive search through the state space of the language specification.



the language specification can be considered as a first prototype of the gesture language on which a number of essential properties can be verified. this is a great advantage over an approach that relies only on experimental, a posteriori, validation of the interface for various reasons. first of all, as we have remarked previously, human users have difficulty repeating gestures in exactly the same way. this makes it hard to test the recognition system in order to find flaws in the language itself. the automata model provides a simple way to check for language related problems such as ambiguities or mode-surprises. secondly, the reachability analysis tool gives a trace as a result in case a problem has been encountered. this is extremely helpful for improving the language where necessary. further, we have shown that an automaton model can be used to investigate the effect of the introduction of techniques to cope with human factor related problems, such as making the language resilient to intermediate poses.



the relative ease of modelling and its complementarity to a posteriori validation of gesture based interfaces makes it worth considering formal modelling whenever possible. we do not claim that formal models allow us to find all problems and possible flaws. rather we hope to have shown that formal modelling can be very helpful in finding some problems in an early stage of development in an area rather different from protocol design in the context of which most formal methods have been developed.



