we describe a tool that combines a general purpose theorem prover and an off-the-shelf interface for dynamic geometry drawing to enhance man-machine interaction involving geometrical proofs. with our tool, we can edit the statements of geometrical theorems, construct and verify their proofs with the theorem prover, and visualize the statements using the drawing tool. the key component is an algorithm that computes the data needed to draw a construction from the formal statement of the theorem. the paper includes some examples of output from our combined tool, called geoview.



to study this use of interactive theorem provers in the domain of geometry, we have developed a library corresponding to the courses available in the french high-school system. these courses encompass bi-dimensional euclidean geometry, with triangles, circles, basic transformations such as translations, rotations, homotheties and tri-dimensional geometry with parallelism, incidence and orthogonality problems between lines and planes. we have chosen to avoid analytic geometry, where reasoning becomes less important than computing.



the algorithm to find such a matrix is now simple to describe. we first build a matrix m verifying conditions(i),(ii),(iii) and(iv), where for each line the positive entry is left-most, which is easy. we enumerate all matrices verifying conditions(i),(ii),(iii) and(iv), simply by lexicographically shifting the positive entry of each line to the right. we stop as soon as the matrix verifies conditions(v) and(vi), which are easy to check. otherwise, we fail.



the whole discussion on free points(in the plane, on a straight line or a circle) only holds generically, i.e. outside a set of particular cases(for instance, three free points in a plane may be collinear, etc). but this set is of finite measure in rn, so when choosing free points at random, we have a high probability to be out of these degenerated situations.



this method is not complete. from a set of solvable geometrical constraints, it can fail to give a construction. the reason is that we work on non-linear constraints on points: this kind of constraints define a good degree of freedom not on points but on coordinates, or on more complex structures(determinants of projective points for instance).



another perspective is to adapt this work to three-dimensional geometry. representing three dimensional objects on the two-dimensional screen poses difficulties. planes in the three-dimensional space are difficult to render in an efficient way. the usual trick is to represent a plane by a parallelogram included in that plane, but then two intersecting planes are not guaranteed to exhibit an intersection in any drawing. conversely, two straight lines that do not intersect may appear to be intersecting when the image is rendered on a flat screen.



