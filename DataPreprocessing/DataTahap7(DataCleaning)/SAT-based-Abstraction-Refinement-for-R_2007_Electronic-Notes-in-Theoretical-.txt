

very sophisticated and well-optimised techniques(e.g.,) guide high-end sat solvers to explore only a comparably narrow fragment around the part of the state space relevant for the particular safety property. we build upon this development by choosing a linear arithmetic/propositional encoding(as opposed to implementing new algorithms for the restricted domain of ta from scratch): a philosophy that has successfully proven its great potential in finite state systems. with this basis, we exploit the particularities of transition systems induced by timed automata using abstraction refinement to deal with the challenges of infinite states.



abstraction refinement[4,6] is a promising direction of research to overcome the challenges of the state explosion problem and infinite state model checking, while preserving correctness of verification results. abstraction techniques overapproximate system behaviour by removing constraints that are considered irrelevant for verifying a particular specification. if the abstract system is safe(no error state is reachable) then, by conservative over-approximation, so is the original.



jhala and mcmillan present an abstraction refinement approach for predicate abstraction. using interpolants, they generate refinements which take into account specific characteristics of the property. a limitation, however, is the fact that their approach relies on an appropriate choice of predicates for predicate abstraction. our approach can be considered as a quick(hence, scalable) approximation of predicate abstraction, where predicate discovery is evident by exploiting the nature of ta.



kripke structures originating from finite state programs. in contrast, our approach deals with the challenges of infinite state model checking as introduced by the notion of real-time clocks. further, we directly use a formula representation tailored for sat-based bounded model checking.



after introducing real-time systems and bounded model checking in section 2, we present a faithful representation of ta in propositional logic with linear arithmetic for bounded model checking in section 3, and give a soundness result. in section 4, we introduce a uniform abstraction, and extend the algebraic perspective on soundness from section 3 to correspondence results about abstraction. section 5 closes the abstraction refinement loop by investigating how spurious counterexamples can be exploited for refining abstractions, before concluding with a summary and future work in section 6.



moreover, our representation is specifically tailored for sat solving technology. in addition to providing conjunctive normal form(cnf) whenever possible, observe that(5) and(6) are binary clauses, which are very efficient(the 2-sat problem is polynomial since binary clauses do not increase the breadth of the search space). formula(7) also corresponds to a set of binary clauses, whereas(4) gives rise to unit clauses. note that it is immediate to adapt our representation to logarithmic



in order to relate our logical abstraction refinement approach to abstraction on ta, and emphasise the structural relationships, we prove a stronger correctness result than the one expressed by lemma 4.2. for this, we use a homomorphic correspondence between concrete and abstract system.



besides those generalisations, future work includes performance comparisons of our implementation on case studies, and an analysis of the effect of choosing a logarithmic encoding for states(state abstraction is slightly more involved in that case, though). the overall performance might be improved using a sat solver that is tailored towards bounded model checking with pseudo-boolean constraints or isomorphy inference. moreover, we intend to examine different settings for balancing counter-example guided abstraction refinement versus refinement based on craig interpolants.



