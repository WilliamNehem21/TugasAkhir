in this paper, we propose a semantics representation with simultaneous multilevel transitions. in our approach, each transition represents a level(or a component of a level) with explicit reference to multiple levels of a multi-agent system. we argue that this representation facilitates the reading of the changes of each level individually as well as their relations, so that the representation of the various transitions matches the abstractions we typically have in multi-agent systems.



the remainder of this document is organised as follows. in the next section, we discuss communication in multi-agent systems. next we put forward the idea of multi-level semantics, the main contribution of this paper. after that, we discuss some of the characteristics of this semantic style. we then discuss some related work and, in the final section, we conclude the work with some final remarks and pointing out possible directions for our work.



where receiver is the name of an agent(each agent has a unique individual name in the multi-agent system), or a list of agent names, to whom the message is being sent. the propositional content is a term in agentspeak(a literal, triggering event, plan, or a list of literals or plans). the illocutionary force denotes the intention of the sender(often called performative), as in speech-act theory. the formal semantics of receiving such messages is given in, and a complete list of all the illocutionary forces available can be found in.



the main idea behind our approach for multi-level semantics is to facilitate giving semantics to systems with multiple but inter-related levels(e.g., the levels of abstraction in multi-agent systems) specially where individual levels of the system have already been given semantics through independent transition systems. our approach allows constraints to be added to the existing semantic rules giving semantics to the inter-relations among the levels, that is, making clear how events occurring at one level of the system affects another level specifically or various other levels simultaneously. the specification of independent transition systems for each level of abstraction allows a series of benefits, among them: modularity, visually more elegant and understandable semantic rules, as well as allowing different granularity of specification for each level. we discuss these features of our approach in section 4.



(i) beliefs that represent the information about the world(including itself and other agents) available to that agent;(ii) desires representing the motivations of the agent, i.e., the states of the environment that the agent would like to reach; and(iii) intentions which are desires that the agent is committed to achieve by following particular plans of action. most of the bdi languages use the concept of an applicable plan, i.e., the plan has a context, and it is applicable if the context conditions are satisfied.



we write bag to identify the beliefs(the component b) of an agent identified by ag. we use this whenever it is necessary to identify the components of a specific agent, e.g., when we are treating two agents in the same semantic rule.



in order to exemplify our approach, we use the following example: an agent, named ag1, at a certain moment of the system execution, needs to commit itself to execute an action a1 for another agent, named ag2. the only way to do that is to send a message to ag2 with the specific speech-act commit. however, there is no communication link between agents ag1 and ag2 in the organisational specification, which makes that the organisational infrastructure to block such communication. in order to communicate to ag2, ag1 needs to change the organisational specification executing the action.add com link(ag1, ag2), which has the following semantics:



in this section we discuss, informally, some of the characteristics of the multi-level semantics representation. one of the most important characteristics of our multi-level semantics is modularity, where the treatment of each level for separated transition system allows us to clarify the modularity of the multi-agent system. in case a layer of the system needs to be changed, for example, the organisation, it is only necessary to modify the corresponding transition system in the semantic rules; the independent transition systems for the other levels remain unchanged.



dennis et al. propose an agent infrastructure layer(ail) for bdi style programming languages. the aims in are: i) to provide a common semantics basis for a number of bdi languages, and; ii) to support formal verification by developing a model-checker optimised for agent programs. the authors propose the design of ail using an extensive operational semantics presented in. the authors argue that ail captures all major features of common bdi languages. the main goal of aif is to provide a common(operational) semantics for a large fragment of bdi-style languages allowing the development of common verification tools and technologies.



regarding communication aspects, dennis et al. describe that the semantics proposed by them covers the effects of a plan executing send actions and the received events. these aspects are similar to, where the action send is treated as the other actions and the receiving messages is treated through a specific event. further, the authors of state that the use of constraints allows one to filter out certain messages, handling notions such as the social acceptability.



in, the authors propose an operational semantics introducing the concept of modules. the authors argue that modularisation facilitates the implementation of agents, agents roles and agents profiles being an essential principle in structured programming and in agent programming in particular. operational semantics is given to creating, executing, testing, updating, and realising module instances, i.e., module-related actions.



