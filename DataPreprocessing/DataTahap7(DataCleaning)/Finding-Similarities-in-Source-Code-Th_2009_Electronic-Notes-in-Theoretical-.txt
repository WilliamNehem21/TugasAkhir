the high availability of a huge number of documents on the web makes plagiarism very attractive and easy. this plagiarism concerns any kind of document, natural language texts as well as more structured information such as programs. in order to cope with this problem, many tools and algorithms have been proposed to find similarities. in this paper we present a new algorithm designed to detect similarities in source codes. contrary to existing methods, this algorithm relies on the notion of function and focuses on obfuscation with inlining and outlining of functions. this method is also efficient against insertions, deletions and permutations of instruction blocks. it is based on code factorization and uses adapted pattern matching algorithms and structures such as suffix arrays.



this technique consists in splitting each original function into sub-functions, sharing as much sub-functions as possible between original functions. the whole source code is then represented by a call graph: the vertices are the functions and the edges are the function calls. thus, similar functions should derive in an identical, or comparable, set of sub-functions, i.e., leaves of the call graph. depending on the measurement used to evaluate(sub-)function similarities, this technique may not be sensible to insertion, deletion, inversion, inlining or outlining of source code which are the most common methods of obfuscation.



the rest of this paper is organized as follows. section 2 gives an overview of the whole detection process. the main steps of the factorization algorithm and call graph analysis are detailed in section 3 and 4. related work and benchmarks are discussed in sections 5 and 6. the paper then presents a conclusion and introduces some future work.



our work is directed towards finding similarities in source code in procedural languages at the level of function. our aim is to experiment a similarity detection technique based on function transformations. indeed, to be insensitive to outlining, inlining and source block displacements, we manipulate abstractions of the programs that are call graphs. initially, the call graph is the one of the original program. next, by using several algorithms, the call graph is enriched with new synthetic sub-functions that represent the granularity of similarities.



the process of factorization we apply is based on the algorithm previously described, which is iterated several times. nevertheless, each iteration provides us with a call graph whose nodes are functions, with leaves being primitive functions(composed of only primitive tokens). this graph could be used to define and measure some metrics, or scores, relative to similarity between two functions. we will first define abstract metrics qualifying similarity between



many research work has already focused on the detection of similarities. among them, some look for similarities in free texts, in this section, however, we will focus on research work that search similarities in source code. these work may be divided into two main groups depending on their aim.



the first group of work focuses on software engineering. it attempts to find exact matching in order to factorize redundant cut-and-paste or to follow the evolutions between different versions of one project. usually they do not address the problem of obfuscation. in this context exact methods of pattern matching[1,9,3] and complex algorithms on the abstract syntax trees or the dependency graphs[10,15] may be applied. several tools such as ccfinder or clonedr are used to implement these approaches.



our factorization method for finding similarities in source code shows modest but promising results on preliminary tests. its main advantage relies on the resistance against obfuscatory methods such as inlining, outlining or shift of blocks of code. we discuss here the limits of our approach and future developments to be considered.



extreme outlining over the set of functions of projects could result in few short leaf functions(especially when using abstract tokens). for example all of the instructions and assignments could be outlined in leaf functions. since our method does not consider the order of called functions, the precision is reduced. some false positives may appear. this is why an upper threshold for the lengths of the leaf functions must be set. considering new metrics for the comparison of pair of functions that takes into account the order of function calls may be envisaged. furthermore, some data-flow analysis could be performed on specific parts of the code to reduce false positives.



currently, our method does not deal with function calls with one or more function calls as argument. this type of situation is not unusual in source code and raises interesting schemes for obfuscation. a preliminary approach could add temporary local variables to unfold the composed calls into intermediate assignments.



presently, results of outlining processes are viewable as partial outlining graphs where leaf functions are selected according to their attainability from initial functions. similarity between functions or clusters are used to locate similarities. a more human-friendly tool for the render of results remains to be studied.



