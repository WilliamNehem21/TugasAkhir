automated deduction methods should be specified not procedurally, but declaratively, as inference systems which are proved correct regardless of implementation details. then, different algorithms to implement a given inference system should be specified as strategies to apply the inference rules. the inference rules themselves can be naturally specified as(possibly conditional) rewrite rules. using a high-performance rewriting language implementation and a strategy language to guide rewriting computations, we can obtain in a modular way implementations of both the inference rules of automated deduction procedures and of algorithms controling their application. this paper presents the design of a strategy language for the maude rewriting language that supports this modular decomposition: inference systems are specified in system modules, and strategies in strategy modules. we give a set-theoretic semantics for this strategy language, present its different combinators, illustrate its main ideas with several examples, and describe both a reflective prototype in maude and an ongoing c++ implementation.



gies can be defined by rules at the metalevel in its meta-level module. there is great freedom to define in this way different strategy languages, which can then be used to specify and execute strategies for any object theory of interest. the semantics of the strategy language in question is used to ensure that all computations allowed are correct deductions in the object theory.



however, pragmatic considerations are important to guide strategy language designs that can deal well with relevant applications. therefore, we have undertaken the project of providing a basic strategy language for maude. to make the language easier to use we have made it available at the object level, rather than at the metalevel. our strategy language allows the definition of strategy expressions that control the way a term is rewritten. we have benefitted from our own previous experience designing strategy languages in maude, and also from the experience of other languages like elan and stratego. our design is based on a strict separation between the rewrite rules in system modules and the strategy expressions, that are specified in separate strategy modules. thus, in our proposal it is not possible to use strategy expressions in the rewrite rules of a system module: they can only be specified in a separate strategy module. in fact, this separation makes possible defining different strategy modules to control in different ways the rewrites of a single system module.



in order to validate our strategy language design, we have mainly focused on automated deduction and programming language semantics applications. besides the short examples presented in, the language has been successfully used in the implementation of the operational semantics of the ambient calculus, the twolevel operational semantics of the parallel functional programming language eden, and basic completion algorithms. moreover, as a further contribution of this paper, we apply here the strategy language to congruence closure algorithms.



the basic strategies consist of the application of a rule(identified by the corresponding rule label) to a given term. in this case a rule is applied anywhere in the term where it matches satisfying its condition, with no further constraints on the substitution instantiation. in case of conditional rules, the default breadth-first search strategy is used for checking the rewrites in the condition. therefore, if l is a rule label and t a term, the semantics of l@ t is the set of terms to which t rewrites



a strategy expression of the form l[s]{e1... en} denotes a basic strategy that applies anywhere in a given state term the rule l with variables instantiated by means of the substitution s and using e1,..., en as strategy expressions to check the rewrites in the condition of l. the number of rewrite condition fragments appearing in the condition of rule l must be exactly n for the expression to be meaningful.



recursion is achieved by giving a name to a strategy expression and using this name in the strategy expression itself or in other related strategies. this is done in strategy modules(see section 3.9). concrete examples will be shown in section 4.



the basic idea is that these strategy declarations provide useful abbreviations for strategy expressions e that the user can then utilize in a(strategy rewrite) command srew t using e, which rewrites a term t using a strategy expression e. a strategy identifier can have data arguments, that are terms built with the syntax defined in the system module m. when a strategy identifier is declared(with the keyword strat), the types of its arguments(if any) are specified between the symbols: and@. after the symbol@, the type of the terms to which this strategy



a strategy definition(introduced with the keyword sd) associates a strategy expression(on the righthand side of the symbol:=) with a strategy identifier(on the lefthand side) with patterns as arguments, used to capture the values passed when the strategy is invoked. these strategy definitions can be conditional(with keyword csd). there may be several definitions for the same strategy identifier but they should refer to disjoint cases of the arguments, due either to the usage of different constructors in the patterns or to the conditions used.



the first example is a simple game. we have a blackboard on which several natural numbers have been written. a legal move consists in selecting two numbers in the blackboard, removing them, and writing their arithmetic mean. the objective of the game is to get the greatest possible number written on the blackboard at the end. the specification of the game in maude is also quite simple.



a player can choose the numbers randomly, or can follow some strategy. possible strategies consist in taking always the two greatest numbers, or the two smallest, or taking the greatest and the smallest. the following ext-blackboard module extends the blackboard module with operations to get the maximum and the minimum numbers in a blackboard, and for removing an element in the blackboard.



the first proposal of the language was implemented as a prototype by using the maude metalevel features(section 5.1). this prototype has been relatively easy to develop and very useful for experimental purposes to reach a definitive strategy language design. currently, the enhanced strategy language is being implemented in c++, so that it can be integrated with the rest of the maude system(section 5.2).



the two main functions are first and next. the combination of these two functions serves to find all the solutions for the application of a strategy to a given state term. they are implemented in a mutually recursive way, distinguishing cases on the strategy expression in the last node of the given path, and with the help of the metalevel descent functions metaapply, metaxapply, metamatch, and metaxmatch[7, section 10.4].



the processes exist on a circular double linked list. processes can pop out of existence at any time and new processes can be created, just ahead of the currently running process. this location is effectively the back of the queue with respect to the running process and ensures that unbounded expansion of the process queue cannot cause starvation. each process, when it runs, does a small amount of computation to advance its piece of the search.



when a process or task succeeds, it unlinks itself from its owners list and informs the owning task of the success. when a process or task terminates it likewise unlinks itself from its owners list. in both cases, it checks if it was the last process or task belonging to its owner. in that case it informs its owner that subsearch is exhausted.



