this paper takes first steps towards a formalization of graph transformations in a general setting of interactive theorem provers, which will form the basis for proofs of correctness of graph transformation systems. whereas graph rewriting is usually performed by mapping a pattern graph into a source graph by means of a graph morphism and then carrying out operations on the image node and edge set, this article generalises the notion of pattern graph to path expressions, which are formulae in a fragment of first-order logic. we examine the correspondence with traditional graph rewriting and show that this interpretation is beneficial when formally reasoning about model transformations with the aid of proof assistants.



aims at a logical characterization of graph transformations, where effective verification of structural properties is not a primary concern. usually, however, graph transformation systems are perceived as extensions of term rewriting systems, so much of the effort has gone into investigating specific properties such as confluence and termination, which does not necessarily allow to determine whether a graph has a certain shape after transformation. these questions may be answered for graph replacement systems having a restricted structure, for properties expressed in specialized logics such as monadic second order logic or type systems. there are automated approaches based on model checking, which however can only handle graphs with an a priori bounded number of elements. presents techniques for dealing with specific structural properties such as multiplicities.



path formulae can be understood as formulae over a fragment of first order logic(possibly including transitive closure), which are interpreted over graphs. determining whether a graph satisfies a path formula is decidable, which is indispensable for effectively applying a transformation rule to a given graph. on the downside, validity of path formulae may not be decidable, so that interactive proofs become necessary.



the paper is structured as follows: in section 2, we informally introduce generalised graph transformations. the formal model is presented in section 3. in section 4, we show how we can recover the traditional model of graph rewriting. we take a glimpse at how to reason about graph transformations in a proof assistant in section 5 before concluding with an outlook on future work.



duplication proceeds in several steps: first, we mark all nodes of the original graph with orig nodes. we then create a duplicate node for each original, memorising the relation between the original and the clone with a cp edge. we can similarly reproduce the edges of the original graph in the copy. all that remains to be done now is to erase the auxiliary marking.



how do we formalise the marking phase, i.e. the first step of our transformation? for the time being, we use a semi-formal notation that should be intuitively understandable. precise definitions of graphs and path formulae will be presented in section 3.1 and section 3.2, respectively.



the action part(not shown here) expresses what we do if f is satisfied for a node n: we generate a new node, say m', having type orig, and we create an or-edge(m', n). we will come back to this example in section 3.3.



expressible in traditional graph rewriting approaches. we assume to have a number of root objects and a number of node objects. root objects are linked to nodes through rn edges, nodes are linked among themselves through nn edges. any node not accessible from a root is considered as garbage.



our purpose is not to formalize any particular approach to graph rewriting, such as the one based on category theory. our model is set-theoretic. roughly, graphs are composed of a finite set of nodes, a finite set of edges and a typing of the nodes.



in the following, we present a logic of path formulae, which we have found useful for expressing interesting properties(see the discussion in section 4). however, there is no intrinsic reason to adopt precisely the language constructors we have selected, and the decidability of the logic, as well as the complexity of model checking, is greatly influenced by this choice. similar notions can be found in[24,13,19].



with the above, other connectives and the existential quantifier ex-form can be defined as abbreviation. universal quantification does not use a named, but rather a positional representation of variables(de bruijn indices,). thus, variables are not identifiers, but just numbers.



model checking of node set and path expressions, i.e. checking that a graph gr satisfies a node set or path expression, reposes on well-known graph algorithms. universal quantification is relativised to the node set of the graph, which is finite by well-formedness of graphs. therefore, checking a universal formula only has to examine a finite number of elements.



the applicability condition is just given by a path formula, as outlined in the previous section. note that this path formula may contain free variables, for example n in g(n) of section 2, which can be understood as references to nodes in the source graph. of course, in its coding as path formula, the free variables are numbers.



of the rule is node 0. no nodes and edges are deleted, a node numbered 1 is generated and an or edge is added between node 1 and 0.(the syntax for update of function f at x with value y is f(x:=y).)



for graph transformations to make sense, the references to nodes to be deleted have to be among the references to nodes in the applicability condition(thus, to the free variables of the applicability condition), whereas references to generated nodes should not occur in the applicability condition. we only generate a finite number of nodes in each transformation step, and to all of these nodes we assign a type. similar constraints hold for deleted and generated edges. to summarise, structural well-formedness of a graph transformation is expressed by the following predicate: having no nodes in common with the nodes of the source graph. we have adopted a deterministic solution: the nodes freshly allocated are numbered m+1 through m+ k, where m is the maximal number present in the node set of graph gr and k is the cardinality of the ngen-set. all this is hidden in the definition of gt-gen-nodes. however, we only exploit the property that the fresh nodes do not occur in the original graph, and that there is a bijection b between the ngen-nodes and the fresh nodes.



path formula, and its range has to be a subset of the nodes of the graph. most importantly, the path formula has to be satisfied in the graph when interpreting its free variables by the graph morphism in the given graph.(the is the left inverse of some, thus the(some x)= x).



{p} c{q} to express that statement c establishes the postcondition q provided the precondition p and some invariant well-formedness conditions w hold. w is typically the predicate struct-wf-gr that we have shown to be invariant under application of graph transformations in section 3.6. furthermore, the statement c usually contains annotations corresponding to loop invariants.



suppose we want to show, for our example program, that all nodes of type node are correctly marked, i.e. have exactly one incoming or edge, provided that in the outset, these nodes had zero or one incoming or edges. let us first define nset as the set of nodes in a graph having a given node type:



our path formulae are very expressive, which has the downside of leading, in general, to undecidable verification problems. as we want to reduce the amount of human proof effort as much as possible, we intend to address this topic in future work, by developing specialized analyses for fragments of our logic. in fact, our path formulae resemble path expressions used in shape analysis for pointer programs[24,13], other subsets have been identified in the context of description logics. a detailed comparison of these approaches still has to be done.



