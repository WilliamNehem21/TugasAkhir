the paper presents conspec, an automata based policy specification language. the language trades off clean semantics to language expressiveness; a formal semantics for the language is provided as security automata. conspec specifications can be used at different stages of the application lifecycle, rendering possible the formalization of various policy enforcement techniques.



as mobile devices become increasingly popular, the problem of secure mobile application development gains importance. mobile devices contain personal information, which users desire to protect. they also provide access to costly functionality, such as gsm services and gprs connections. hiding these resources from third-party applications would largely handicap application development for mobile platforms. it seems necessary to provide controlled access to the sensitive resources through fine-grained, at times application specific, constraints on execution.



we describe first how security specifications can be enforced at the three stages of the application lifecycle: the development, installation and runtime phases. the goal is to combine static verification and monitoring so that security properties are enforced on mobile devices in the most effective way. we associate with the application a contract, a piece of data that describes the intended securityrelevant behavior of the program. the contract simplifies tasks related to security enforcement. in this sense, our framework is similar to that of model-carrying code(mcc) introduced by sekar et al. in mcc, verification is based on a model of the program that is simplified to represent only security-relevant behavior, while we do not necessarily obtain contracts by extraction.



a framework which spans different stages of the application lifecycle and combines different techniques for ensuring compliance benefits from a common language for policy specification. in turn, the different aspects of the framework imposes different restrictions on such a language. the main contribution of this paper is the language conspec(contract specification language) which can be used for specifying both user policies and application contracts. a semantics for conspec is provided and the formal treatment of several activities in the framework is briefly explained based on this semantics.



development phase we assume that the developer is aware of typical security policies and is willing to keep his application in conformance with them. from the policies he learns which actions of the application are security-relevant. using this information he provides the application with the contract, which specifies the intended security-relevant behavior of application. at this phase, the policy language is used for expressing this contract. the compliance of the contract and the application can be checked, for instance, using static verification by a trusted third party, who then signs the application and the contract by its private key. this analysis is performed by powerful machines rather than the mobile devices, and can make use of knowledge available to the developer(e.g. program specifications, annotations derived from the source code etc). instead of signing the application with a private key, proof-carrying code method can be used to convey assurance in program-contract compliance. the application and the contract are supplied with an easy-to-check proof of their compliance. if contract compliance can not be statically verified, then an execution monitor can be inlined in the program at this stage so that the compliance is ensured at runtime.



in our example scenario alpha and beta are not aware about the particular limit of sms messages that alice allows. but they know that the number of messages matters. therefore, alpha supplies the weather application with the contract that the application sends only one message per day. however, beta developers cannot tell in advance how many messages their application sends per day. for this reason, the contract for their application is more complex. it tells that the application will send one message to every contact from the address book that has a birthday.



runtime at runtime, the behavior of an application may be checked against a policy by monitoring. because of the performance overhead created by monitoring, it is preferable to use static methods described above and leave as little work to runtime as possible. but in many cases, the application of other techniques is not feasible(or not even possible due to, for example, the unavailability of the source code), and runtime monitoring is the only solution to protect a system.



conspec is strongly inspired by the policy specification language pslang, which was developed by erlingsson and schneider for runtime monitoring. pslang policies consist of a set of variable declarations, followed by a list of security relevant events, where each event is accompanied by a piece of java-like code that specifies how the security state variables should be updated in case the event is encountered in the current state. pslang policies make monitor inlining simple: the updates provided by the user can be almost directly inserted into the target program. however, this leads for making specifications less formal. a policy text is intended to encode a security automaton: the state variables represent the automaton states and updates represent transitions. while this intuition is given, the exact way to extract the automaton from a pslang policy is not provided. such a task is not trivial due to the power of the programming language constructs that can be used in the updates.



while the guard selects the states, which the particular update will apply, as a subset of all states. the guards are considered from top to bottom. in case none of them is true, there is no transition for that action from the current state. if an else block is present, however, the update of this block is executed in case none of the guards above it are satisfied. the guard is a side-effect free boolean expression which can mention only the set of argument values(and the return value for the case of after modifier), and the security state. the update block begins with declarations of the local variables, which have the current block as their scope. a list of assignments to local variables and security state variables follow the declarations. if no assignments are present, the update block consists of the statement skip.



monitoring given a program and a conspec policy with scope session, the concept of monitoring can be formalized by defining the co-execution of the corresponding conspec automaton with the program. such co-executions are a subset of the set of interleavings of the individual executions of the program and the automaton. co-executions satisfy the following condition: when the execution of the program component is projected to its security relevant action executions, each before action is immediately preceded by a transition of the automaton for the same action; dually, each after action is immediately followed by a corresponding automaton transition. therefore it is simple to show that the program component of the co-execution adheres to the given policy, as the co-execution includes an accepting trace of the automaton for the program execution.



monitor inlining inlining a conspec policy with scope session can be performed similar to inlining a pslang policy(see[6,5] for details). a class definition is added to the target program which stores the security state variables. then the program is rewritten so that each security relevant method call is wrapped with code compiled from the corresponding event clause(s) of the policy. such a code segment evaluates the guards of the event clause from top to bottom and executes the updates associated with the first guard that is satisfied. if none of the guards evaluate to true, the program is terminated. the modifier of the event clause determines where this segment is placed relative to the method call. the correctness of such a monitor inlining scheme can be proven by setting up a bisimulation relation between the states of the inlined program and the states of the co-execution of the original program with the conspec automaton(of the policy).



there exists a number of automata-based languages for security policy specification. amongst these, conspec is closest to pslang which has also introduced the modifiers used in conspec. the language is intended solely for runtime monitoring and freely uses programming language constructs such as abstractions and functions. this enables a larger class of policies to be specified but also complicates the task of providing a formal semantics. since the authors do not provide such a formalisation, their monitor inlining algorithm for pslang is to be trusted on intuition as no proof of its correctness can be constructed. the polymer language has the same drawback. polymer policies consist of java classes which, when inlined, may trigger various actions in case of violation. for instance, it is possible to execute some recovery action as a response to the violation, after which the application is allowed to progress. polymer policies implement edit automata, which extend security automata. but the correctness of the polymer policy inlining cannot be proven either, as its semantics is not formally presented.



