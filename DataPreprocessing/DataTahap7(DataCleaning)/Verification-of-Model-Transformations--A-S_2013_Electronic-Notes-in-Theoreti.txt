within the model-driven engineering paradigm, software development is based on the definition of models providing different views of the system to be constructed and model transformations supporting a(semi)automatic development process. the verification of models and model transformations is crucial in order to improve the quality and the reliability of the products developed using this paradigm. in this context, the verification of a model transformation has three main components: the transformation itself, the properties of interest addressed, and the verification techniques used to establish the properties. in this paper we present an exhaustive review of the literature on the verification of model transformations analyzing these three components. we also take a problem-based approach exemplifying those aspects of interest that could be verified on a model transformation and show how this can be done. finally, we conclude the need of an integrated environment for addressing the heterogeneous verification of model transformations.



the aim of this paper is to present a comprehensive review of the literature on the verification of model transformations extending the work in. particularly, we introduce the first dimension without going deeper, since there are well-known works[67,26] addressing this subject, and we extend the second and third dimensions with other aspects not addressed in. we also follow a problem-based approach exemplifying by a case study those aspects of interest that could be verified on a model transformation and how they can be verified. finally, we conclude the need of an integrated environment for addressing the heterogeneous verification of model transformations.



the remainder of the paper is structured as follows. we first detail the review process followed in section 2. then, in section 3 we take a quick look at model transformations and define a running example. in section 4 we introduce the different aspects of a transformation that must be verified, and in section 5 we review how these aspects are verified in the literature. in section 6 we use the running example to exemplify verification properties and discuss how they can be verified. finally, in section 7 we present some concluding remarks on this topic and guidelines for future work.



the inclusion criterion was based on the review of the title, abstracts and keywords of the papers found, evaluating whether they answered the initial question in some way. we considered both papers written in english and in spanish. this initial set of papers was refined by reading their full text. although some papers could not be considered of high quality since they were not published after a strict review process, we privileged their content in favor of answering the initial question. for space reasons we do not include here the complete literature review. an extended version of this work with a description of each paper can be found at.



in the mde ecosystem everything is a model, even the code is considered as a model. in this context, a model is an abstraction of the system or its environment. every model conforms to a metamodel, i.e. a model which introduces the syntax and semantics of certain kind of models. in the same way, a metamodel conforms to some metametamodel. a metametamodel is usually self-defined, which means that it can be specified by means of its own semantics.



this schema defines model-to-model transformations. there are also model-totext and text-to-model transformations where the target and source models, respectively, are just strings not conforming to any specific metamodel. without loss of generality we will only consider model-to-model transformations(from now just transformations, or model transformations).



however, this schema can be extended as is exhaustively studied in. leaving aside the details, the authors identify multiple variabilities on a model transformation, e.g. it can be bidirectional, it can take more than one source model as input and/or produce multiple target models as output, its rule application strategy can be deterministic, non-deterministic or interactive, the source and target models could be at different abstraction levels or not(horizontal versus vertical transformations), and the source and target models could conform to the same metamodel or not(endogenous versus exogenous transformations).



in this section we will focus on the second dimension introduced in: the properties of interest addressed by the verification of a model transformation. there are also other works[56,84] which introduce the problem of verification by defining the set of properties to be addressed. however, the contents of these proposals are mostly included in the former one. we thus present the categories of properties identified in



this category refers to the computational nature of transformations and target properties of transformation languages. as introduced in, a transformation specification conforms to a transformation language which can possess properties on its own. in this context there are four properties of interest.



the third property, identified as a design-time property, is typing, i.e. ensuring the well-formedness of the transformation specification w.r.t. its transformation language. the process of type checking may occur either at compile or run-time. since model transformations are models, and models have metamodels(defining the transformation language), solutions to this problem are strongly related to conformance and model typing as will be introduced in the next section.



finally, we introduce a fourth property, not mentioned in, the preservation of execution semantics property. this execution-time property states that the transformation execution must behave as expected according to the definition of the transformation language semantics. related to this, and in strong contact with the typing property, there are consistency needs between transformation rules which must also hold. for example, some languages do not allow an element of the input model to be matched more than once(redundancy problem). if this property does not hold, contradictory rules may be applied, e.g. two rules applied to the same element implying different things. moreover, it is possible that a rule applied to an element of a hierarchy may be more restrictive than another one applied to an element in a lower level of the same hierarchy. in this case, there will be some models not matched by the second rule.



but verification interests go beyond this kind of problems. when verifying a model transformation we want to consider its elements as a whole and not individually. in this sense, some authors, as in, use the notion of a transformation model, i.e. a model composed by the source and target metamodel, the transformation specification and the well-formedness rules. this transformation model could be implicit,



in this sense, there are properties known as model syntax relations that relate metamodel elements of the source and the target metamodels trying to ensure that certain elements or structures of any input model will be transformed into other elements or structures of the output model. this problem arises when these relations cannot be inferred by just looking at the individual transformation rules, or when the transformation language does not allow expressing some relations, and another constraint language must be used. this is also known as preservation of transformation invariants or structural correspondence.



cover the entire metamodel, then this leads to some input models which cannot be transformed. from a functional point of view, syntactic completeness means that the transformation is a total function. when considered for a specific transformation, determinism is also a functional property. in fact, as introduced in, when a transformation is total and deterministic, it is called functional.



we have seen a classification of the properties of interest addressed by the verification of a model transformation. this classification, formerly introduced in, identifies language-related and transformation-related properties, the first ones referring to the computational nature of transformations and target properties of transformation languages, and the second ones referring to the modeling nature of transformations. we extended this classification by adding two subcategories addressing properties based on other related works.



representation of a system and the properties that must be verified, as well as a logic in that semantic domain which allows reasoning about that representation, leading from premises to conclusions. this process is usually carried out using theorem proving software and it is usually only partially automated. model checking also consists of using a mathematical representation of a system, and proofs consist of a systematic exhaustive exploration of the mathematical model. with the first approach there is usually a high verification cost, whilst with the second there are well-known limitations such as the state-explosion problem. on the other hand, testing relies on the construction of test strategies for a property including subsequent execution of(either parts or all of) the system according to these strategies. although testing is usually considered a validation strategy, it could be used for verification purposes. however, as it is well known, testing can only show the presence of errors and not their absence. finally, we can find strategies based on static



analysis, i.e. on the analysis of a model transformation that is performed without actually executing it. static analysis typically consists on semi-decision techniques. in this sense, they are efficient but they cannot assure the overall correctness of the design. for matter of completeness we also consider the satisfaction of properties that hold by construction of the transformation, e.g. those achieved by using special transformation languages such as dsltrans.



invariants can be expressed using a constraint language like the ocl, and as it was said in section 4, this conformance checking is nowadays automatically addressed within modeling frameworks using automated checkers. these checkers can be based on sat solvers or model-checking, as in[3,32]. this verification is at a model level, but there are other alternatives, for example performing the verification using logical inference. in this case, we can formalize metamodels, models and



finally, a complementary approach in proposes a language for assertions based on first-order logic that describes some characteristics of a model under transformation. then, they can derive how an assertion evolves when applying transformation rules using swiprolog as an inference system. if the assertions to be verified could be derived from the final assertion, thus they hold in the target model.



there are many alternatives for proving this property. first, we can use a formal language to state it and a proof assistant to prove it. we can also use the language for assertions and prove that this property can be derived from the final assertion. we explored these alternatives when discussed conformance and model typing.



another option is to define a transformation contract stating the pre and post conditions of a transformation(or an individual rule), and check whether this contract holds. this contract could be written in ocl and then verified using an ocl checker or some other model-checker, as in[19,32]. it can also be written using a dedicated tool and then verified using some specific algorithm, as in[25,40].



as we already said in the previous section, these two properties are the hardest to prove since there are related to undecidable problems. one alternative to achieve them is to use some language which guarantees both by construction, as introduced in. however, this option clearly reduces expressive power.



the preservation of the execution semantics is matter of verification during the development of a transformation engine. however, when defining a model transformation there are consistency needs that must be addressed. as an example, we may not want redundant rules, and indeed our example does not have redundancy. an example of a redundant rule would be one mapping attributes to columns but applicable only to persistent classes.



only two properties are not considered within the example: typing and model semantics relations. as we said before, typing is strongly related to conformance and model typing. also, since we are working with structural models, we do not have dynamic properties which are the main source of semantic properties. we might as well force some semantic property, but we decided to let the reader refer to for more examples.



we conducted a comprehensive literature review on the verification of model transformations which was structured following the three dimensions presented in. we extended the former review and followed a problem-based approach exemplifying those aspects of interest that could be verified on a transformation and discussing how they can be verified. for space reasons we left some details, which can be found at.



at this point it is clear that there exist several alternatives, not only for the specification of a transformation but also for its formal verification, which depend on those properties that must be addressed in each specific case. this problem increases when considering bidirectional, higher-order, and multi-model transformations. in this sense, there is some parallelism between mde-built systems and traditional software systems: heterogeneous multi-logic specifications are needed, since different systems have different aspects that are best specified in different semantic domains. an example of this was introduced in the last section, where a small-size example introduces different problems, each of them best addressed by several strategies.



related to this, the most common transformation approaches referred in the literature are the relational and graph-based approaches. the point here is that those approaches closely related with traditional programming languages(direct manipulation, operational, etc.) introduce verification problems that are carried out by traditional code verification approaches. moreover, both relational and graph-based



working on this idea, we could express metamodels and transformations as so called institutions in some consistent and interdependent way, as well as transformation properties in different logics(also institutions), and their translations(formally, institution(co)morphisms) into several logics with the purpose of proving transformation properties. models could be both represented as institutions or as sentences within the institution of metamodels. for example, considering our running example, we can represent models in xmi, metamodels in mof, and transformations in qvt. these languages could be defined as institutions and there could be translations from them to different logics(also specified as institutions), e.g. first-order logic, rewriting logic, modal logic, etc. if there is a conformance need specified in ocl, it could be possible to translate the different elements to rewriting logic and perform the verification as defined in.



to put these ideas into practice we can use the heterogenous tool set(hets,) which is meant to support heterogeneous multi-logic specifications. hets is a parsing, static analysis and proof management tool combining various such tools for individual specification languages. nowadays the tool supports many logics(e.g. fol, rewriting logic and modal logic) and tools(e.g. isabellehol and maude). moreover, it provides proof management capabilities for monitoring the overall correctness of a heterogeneous specification whereas different parts of it are verified using, possibly different, proof systems.



anyway, it is worth pointing out that the instantiation of this framework is not as direct as it seems. we need to formally specify firstly every mde building block within the theory of institutions and secondly any possible and useful translation to those logics we need. these representations may neither be direct nor even possible within this theory.



