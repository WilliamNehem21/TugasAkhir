in this paper we propose a new generic scheme cflp(d), intended as a logical and semantic framework for lazy constraint functional logic programming over a parametrically given constraint domain d. as in the case of the well known clp(d) scheme for constraint logic programming, d is assumed to provide domain specific data values and constraints. cflp(d) programs are presented as sets of constrained rewrite rules that define the behaviour of possibly higher order and/or non-deterministic lazy functions over d. as the main novelty w.r.t. previous related work, we present a constraint rewriting logic crw l(d) which provides a declarative semantics for cflp(d) programs. this logic relies on a new formalization of constraint domains and program interpretations, which allows a flexible combination of domain specific data values and user defined data constructors, as well as a functional view of constraints.



on the other hand, functional logic programming refers to a line of research started in the 1980s and aiming at the integration of the best features of functional programming and logic programming. as far as we know, the first attempt to combine functional and logic languages was done by j.a. robinson and e.e. sibert when proposing the language loglisp. some other early proposals for the design of functional+ logic languages are described in. a more recent survey of the operational principles and implementation techniques used for the integration of functions into logic programming can be tation of function and predicate symbols. the resulting semantics had many pleasant properties, but also some limitations. in particular, defined functions had to be first order and deterministic, and the use of patterns in function definitions had to be simulated by means of special constraints.



in the last years, various extensions of crwl have been devised, to account for various features of functional logic languages, such as higher order functions, polymorphic types, algebraic data constructors[8,9,10], an ad-hoc treatment of certain kinds of constraints[6,7], and finite failure[60,61,62,63,64]. a survey of previous work on crwl can be found in. a generic extension of crwl with constraint reasoning was missing up to now.



of constraint domains d, tailored to the needs of constraint functional logic programming. section 3 presents cflp(d) programs and their interpretations, along with results concerning the existence of least program models. section 4 introduces the constraint rewriting logic crwl(d), presenting an inference system as well as correctness results w.r.t. the model-theoretic se-



specific primitive functions(e.g. addition and multiplication over r), and user defined functions. assuming a unique universal signature rather than various domain-dependent signatures turns out to be convenient for technical reasons. another important limitation of our older cflp(d) scheme[56,57], name-



is common in higher order functional languages. the usual first order syntax for expressions can be translated to applicative syntax by means of so-called curried notation. for instance, f(x, g(y)) becomes(f x(gy)). following a usual convention, we assume that application associates to the left, and we



all the clp(d) languages in an elegant and uniform way; see for an updated presentation. previous work on cflp schemes, including our old scheme cflp(d)[56,57] had similar aims w.r.t. functional logic programming, differing mainly in the kind of semantic framework provided.



similarly as in definition 2.1, the monotonicity conditions in item(ii) are intended to capture the behaviour of a possibly non-deterministic function over finite data elements. the radicality condition in definition 2.1 is omitted here, because user defined functions which return potentially infinite data structures as results are useful for programming and obviously not radical.



