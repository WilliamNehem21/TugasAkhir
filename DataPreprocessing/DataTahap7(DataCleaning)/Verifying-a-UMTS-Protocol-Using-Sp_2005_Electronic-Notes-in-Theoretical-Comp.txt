in this paper, we consider model checking the rlc protocol in the umts system that is seeing ongoing development as a third generation mobile communication system. we briefly describe easn, a model checker wherein the behavior can be formally specified through a language based upon promela for control structures but with data models from asn.1. we discuss the verification problem for rlc and then discuss the results of using easn on the verification problem and compare with spin which also is the basis for the easn realization.



model-checking has turned out to be an efficient and easy-to-use technique in program verification. however, there is one major drawback in using exhaustive model-checking: behavior graphs of real-life programs, telecommunication protocols for example, tend to be extremely large. in literature this problem is often referred to as state explosion. to alleviate this problem, many progressive steps have been taken during the past decade and efficient implementations of model checkers are already available. spin is one such verification system.



typically the input languages, such as promela(used with the model checker spin), have a limited set of data structuring constructs. this can be a limiting factor in the larger scale industrial usage of such tools. asn.1(abstract syntax notation one) is a widely used data definition language in telecommunication protocol specification. it would be helpful for the standardization process if a model checker could be augmented with asn.1 data modeling capabilities to check correctness of interim versions of a protocol before establishing a standard. verification engineers in the telecommunication



this article is structured as follows: section 2 describes briefly the spin and easn tools, and their relationship. in section 3 the rlc protocol is described. section 4 explains how the protocol and its user environment are modeled, and discusses the results of the verification. conclusions are drawn in section 5.



the model checker spin has many capabilities like deadlock detection, validating assertions, system invariants, detection of non-progress cycles and livelocks, and specifying linear temporal logic(ltl in short) properties for model checking. algorithms that effect substantial space and time savings, like bit-state hashing, on-the-fly model-checking and partial-order reduction have been incorporated into spin. hence, modifying the spin system to handle asn.1 has been the design goal of the easn project.



similar to promela in spin, the easn language is the input language for the easn tool. the easn language is designed as a convenient marriage of the asn.1 notation for data-typing and control constructs of promela. in case of conflicting features, the decisions were motivated from both ease and convenience of implementation& elegance of language design.



universal mobile telecommunication system(umts) is a third generation mobile telecommunication system using wcdma(wideband code division multiple access) radio access technique. the new radio access technique requires major changes in the radio access network that consists of network elements and protocols participating in the data transmission using the radio interface. rlc(radio link control) protocol is one of the new umts protocols. it is a layer 2 protocol, according to the osi reference model, providing



rlc protocol was standardized in march 2000 by 3gpp, an international standardization forum consisting of manufacturers, operators, authorities etc. interested in regulation and development of the third generation systems. the specification defines several services, functions and procedures for the protocol.



rlc provides to the upper layers several services related to data transfer. according to the specification, the protocol performs rlc connection establishment and release, transmits data in transparent, unacknowledged or acknowledged mode, allows setting of qos(quality of service) dynamically during data transfer and notifies the upper layer of unrecoverable protocol errors. in this paper, we concentrate on the verification of the reliable data transfer service in acknowledged mode. the acknowledged data transfer service transmits upper layer pdus(protocol data unit) and guarantees delivery to the peer entity.



the size of the user data, i.e. the size of a rlc sdu(service data unit), is assumed to be exactly the same as the size of the data field in a rlc pdu. along with segmentation, concatenation and padding functionalities can also be left out for simplicity. since ciphering is not precisely defined in the standard, we have also left it out from our model.



the mac-layer below the rlc-protocol provides an unreliable transfer for delivery of rlc-level pdus. hence, we modeled mac as two unreliable fifo-queues, one in each direction. when giving a pdu to mac, it makes a nondeterministic decision whether to deliver the message further(putting it on the queue) or dropping it. however, we assumed that the mac does



for a new rlc-connection, a fresh logical channel is allocated for it in the mac-layer. in our model, when the the rrc-layer sets up a rlc-connection, it first dynamically creates a mac-connection and then the two rlc entities at both ends of the protocol, one of which is the sender entity and the other is the receiver entity. so, in our model the rrc layer is modeled as two static entities that then dynamically create the layers below.



in the real umts stack, the actual communication between the rrcentities happens through a separate mac connection. we use the direct synchronization of using an oracle as an intermediary in order to simplify the model. so, the oracle has a dual role in our model: it is the means of control communication between the rrc-layers, and incorporates control from the upper level application protocol to decide when an rlc connection should be created or terminated.



the above modeling is possible due to the capability of the promela or easn modeling languages to dynamically create processes and pass channel identifiers between the processes. from the verification point of view, it is also important that the terminated protocol instances do not have any effect on the current state components of the systems. that is actually the case if termination happens as in our model, where it is ensured that old entities have terminated before new ones are generated.



in crafting easn from spin, certain portions of the spin source that have to do with encoding of state and its management have been completely rewritten for easn, thereby making it possible to see improvements in its memory performance. this approach was consciously chosen, rather than simply translate asn.1 types to appropriate promela-types. the fact that this new code-component in easn has not evolved as well, or for as long as the code from spin that it replaces into easn, shows(rather clearly) in its run-times. easn employs integer-arithmetic for its computation of the hash-value corresponding to its representation of the reached-state of the system, through the use of the gnu multi-precision arithmetic package. spin, on the other



since the code base of easn is derived from spin system with changes in the state vector representation and handling(an important and critical part of the model checker), any discrepancy in the number of states, etc. in the two systems can be explored to determine the underlying causes. such an effort has revealed the following anomalies in the spin system when working with the rlc model presented here.



when using rendezvous channels, the compression mask was not completely restored on backward moves during the search. the correctness of the search was not affected, but the number of reached states became larger than necessary. this has been fixed in spin 3.4.6(29 march 2001).



