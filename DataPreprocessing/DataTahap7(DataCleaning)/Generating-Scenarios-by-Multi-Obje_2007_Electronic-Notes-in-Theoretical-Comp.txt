ris are often designed specifically according to the layouts of stations. when the layout of a station is changed, the corresponding ris has to be modified. this causes high costs for resources and time. in order to reduce the effort in modifying ris, one can develop ris under the object oriented approach. with this approach, it is only necessary to specify the new neighboring structure of the objects when the layout of the station is changed instead of modifying the whole interlocking system completely.



along the track, one can find another kind of infrastructure component: the signal. signals(e.g., p 1) can be used to control train movements by showing the aspects. two types of aspects will be considered in this work, they are clear and stop aspect. some signals can also indicate the allowed speed of the corresponding track section. indication of speed will not be considered in the current work.



as mentioned above, in multi-object checking, a d1 formula holds iff the outermost d formula holds. otherwise, a counterexample has to be generated if this d formula does not hold. if model checking is used to verify the outermost d0 formula, an initial part of a counterexample is generated. this forms a part of a global counterexample and it is called a local counterexample. if the initial local counterexample does not contain communication with further objects, it is the global multi-object checking counterexample. similarly, whenever the local counterexample contains communication with further objects, the local counterexample is a part of a global counterexample.



this algorithm works on the grounds that each communication partner provides a corresponding communication scheme. as it has been mentioned before, it is difficult to determine the expressiveness of a counterexample, the selection of a random counterexample for each object does not guarantee that a global counterexample can be generated. whenever a communication partner of an object does not provide a demanded communication scheme one of the possibilities is that, the counterexample of this object has not been properly chosen. this issue can be solved by automatically selecting a different counterexample for the initiating object that shows a different communication scheme. alternatively, users can interactively examine the part of the global counterexample that has been generated so far.



both solutions show drawbacks. the first solution implements a kind of greedy/backtracking algorithm with all the well-known(dis-)advantages. the more often local counterexamples have to be regenerated, the less efficient the algorithm is. finally, the global counterexample may not illustrate the error that clear as expected. in contrast, applying the second strategy, the user may not have enough information to decide whether the partial global counterexample shows the origin



in this contribution, a strategy for generating counterexamples for multi-object checking is described. we have demonstrated the usefulness of our strategy by a case study featuring a uml-based ri. ris are considered as safety critical systems. the guarantee of the correct behavior throughout the system lifecycle is demanded. in order to save resources in developing and modifying ris for amended railway layouts, an object oriented approach for establishing interlocking systems is investigated in this work. infrastructure elements are considered as infrastructure objects in a uml-based ri. the objects of a ris cooperate with each other to function as an interlocking system.



multi-object checking has been successfully applied to verify uml-based ris. we concentrate on verifying the safety aspect of the model. the provided graphical counterexample in this contribution helped correcting the state machines displaying the obviously unhandled situation. we believe that this methodology that improves the understanding and communication among professions of different disciplines, can improve the whole development process of a system.



we have also shown a further step of improving system development by designing a more comprehensible verification strategy. it provides illustrative counterexamples and generates test cases automatically. therefore, we have demonstrated how ttcn-3 test cases can be derived from checking conditions during the early stage of system development.



pavlovic, o., r. pinger, m. kollmann and h. ehrich, principles of formal verification of interlocking software, in: e. schnieder and g. tarnai, editors, proc. of the 6th symposium on formal methods for automation and safety in railway and automotive systems(forms/format 2007)(2007), to appear.



