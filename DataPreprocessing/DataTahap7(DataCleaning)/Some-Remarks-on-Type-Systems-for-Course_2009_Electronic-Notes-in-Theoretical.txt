definitions by iteration and coiteration have been successfully used to implement safe type systems extending the second-order polymorphic lambda calculus, system f. hence it is natural to pursuit the definition and implementation of fold operators corresponding to course-of-value recursion as well. this paper proposes some new such extensions and states some important remarks emerged while verifying the correctness and safety properties of their operational semantics, relying not only on the categorical, but also on the logical approach based on fixed-point operators. our observations should be considered as a starting point for a deeper study of the interrelation between these two approaches.



this paper concentrates in another useful pattern known as course-of-value recursion, captured by a construction called histomorphism in. however, we do not focus in the categorical concepts, but rather in their implementation as type systems, which has been succesfully achieved for other schemes(see[13,17]). our overall goal is to implement recursion principles in the setting of typed lambda calculus, taking the categorical approach discussed above, as well as a fixed-point approach, usual in logics with inductive definitions, as a foundation. although the formalisms presented here are not new strictly speaking(see[21,22]), our contribution, apart from present them in the framework of curry-style type systems and generalizing them with full monotonicity instead of positivity, is to state some important remarks about their static and dynamic semantics. moreover this work intends to be a starting point for a deeper comparison of two distinct approaches to model course-of-value recursion.



corresponding to different implementations of the course-of-value fold operator, this is made clear in the case of natural numbers. after a brief discussion on termination(strong normalization) and its high price, we adopt the point of view of, and still pursuit this property by abandoning the realm of categories in favor of the fixed-point approach in section 6, where we present an alternative system for courseof-value iteration which happens to be terminating. here we realize that for natural numbers there are still some operational problems and propose full course-of-value primitive recursion as definitive solution in section 7. finally in section 8 we provide some closing remarks and future work.



an interesting task is to model course-of-value recursive types in kleisli categories or to compare histomorphisms with kleisli or eilenberg-moore constructions. however, it is not a goal of this paper to further develop the work on category theory(for this see[19,21]), but rather to implement recursion principles in the setting of typed lambda calculi, taking the categorical approach as a foundation. we discuss next the general idea to model later the principle of course-of-value iteration.



our goal is to implement the course-of-value iteration scheme as defined by histomorphisms. this categorical approach is interesting and useful to obtain recursion combinators in typed lambda calculus. recall that although the untyped lambda calculus has general recursion, the simple typed lambda calculus lacks recursion, for fixed-point operators like y are not typable and, although simple iteration principles can be modelled in the second-order lambda calculus(system f), the encodings are impredicative and very hard to handle from a practical point of view.



as we have seen in the previous section, the principle of course-of-value iteration can be faithfully modelled in a type system. however a natural question when proposing a new language is if the new constructors could be defined, as syntactic sugar, in a basis language, which usually already has some important properties like safety or termination. it turns out that this holds in our case. consider the following alternative reduction rule for course-of-value iteration:



proof this can be easily achieved in a similar way to the proof for the systems in, which is based in the one for system f given in. observe that the property is not trivial as it would be for a church-style system. the systems are presented here in curry-style and therefore the rules for polymorphic typing are not syntax-directed.



the termination of these new systems is carried out by a type-respecting and reduction-preserving embedding into a terminal system developed in, which is basically the one described in section 4.1 plus the above operational rules for inversion. the essential part of this embedding can be read from the definition of histomorphisms by catamorphisms(simple iteration) of proposition 3.6.



it is well-known that the inefficiency of an iterative predecessor vanishes using primitive recursion instead of simple iteration to define it(see). therefore, we think that the needed well-behaved predecessor for course-of-value natural numbers can be obtained using primitive course-of-value recursion. moreover, this would solve the problem not only for natural numbers, but also for the destructor of any courseof-value monotone inductive type.



matthes, r., monotone fixed-point types and strong normalization. in georg gottlob, etienne grandjean, and katrin seyr, editors, computer science logic, 12th international workshop, brno, czech republic, august 24-28, 1998, proceedings, volume 1584 of lecture notes in computer science, pages 298-312. springer verlag, 1999.



