the maude ltl model checker supports on-the-fly explicit-state model checking of concurrent systems expressed as rewrite theories with performance comparable to that of current tools of that kind, such as spin. this greatly expands the range of applications amenable to model checking analysis. besides traditional areas well supported by current tools, such as hardware and communication protocols, many new applications in areas such as rewriting logic models of cell biology, or nextgeneration reflective distributed systems can be easily specified and model checked with our tool.



furthermore, the maude ltl checker can model check systems whose states involve data in data types of infinite cardinality, such as numbers, lists, or multisets of arbitrary size; in fact, in any algebraic data types. the only assumption is that the set of states reachable from a given initial state is finite. this finitary reachability condition can be dropped in the case of the semidecidable search for counterexamples for safety properties of infinite-state systems supported in maude by its search command(this capability is not discussed in this paper, due to space limitations).



the paper is organized as follows. the semantics of linear temporal logic for an arbitrary rewrite theory r is explained in section 2. the functionality of the ltl model checker is described in section 3, and the satisfiability and tautology checker in section 4. the algorithms and implementation are then described in section 5. performance comparisons with spin are given in section 6. conclusions are drawn in section 7.



defining the syntax of the state predicates we wish to use by means of constants and operators of sort prop, a subsort of the sort formula(i.e., ltl formulas) in the module model-checker; we can define parameterless state predicates as constants of sort prop, and parameterized state predicates by operators from the sorts of their parameters to the prop sort.



and by semantic rules where a userstatement not in loopinguserstatement always terminates, but a loopinguserstatement may not terminate. the code of process 2 is entirely symmetric. the maude specification of the semantics of a simple parallel language supporting the above features is given in appendix a. the two processes are defined in a module dekker that imports the module parallel defining the semantics of the parallel language.



c. an scc c is alive if it is fair or if there is a arc from c to an alive scc; otherwise c is dead. dead sccs and any arcs entering them can trivially be eliminated. fairness information can be deleted from all arcs not lying within a fair scc.



spin uses a high-level language called promela to specify systems descriptions. we compare the performance of the model checkers as follows. given a system specified in promela, we specify it in maude, and then compare, for a given model checking problem, the running times as well as memory consumptions of spin and of the maude ltl model checker on the respective specifications. the results of such a comparison are given below.



except where stated, the default settings for spin were used everywhere. in all the above situations, only properties satisfied by the corresponding systems were model checked; no generation of counterexamples was attempted. the reason for this choice is that, since the two different model checkers implement two different search strategies, which model checker generates a counterexample first may vary from case to case depending on the particular search strategy of each tool, rather than on the speed of the model checker itself, which is what we are trying to estimate. a property that actually does hold for the specification forces the exploration of the entire synchronous product search space, resulting in more meaningful benchmarks.



1.13 ghz pentium iii machine with 384mb ram running red hat linux 7.3. in most of the cases, both model checkers finished fairly quickly whenever memory was available; lack of memory proved to be the main bottleneck for scalability in both cases. in all cases, the memory benchmark refers to the total memory footprint of the program, including the memory occupied by the code.



