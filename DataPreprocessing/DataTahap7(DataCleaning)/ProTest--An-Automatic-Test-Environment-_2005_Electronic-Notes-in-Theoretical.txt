in this paper, we discuss protest, an automatic test environment for b specifications. protest is based on prob, a model checking and animation tools for b. protest follows an approach similar to the one by dick and faivre(discussed in section 2) and generates test cases from b specifications by partition analysis of the state invariant and the operation preconditions of a specification. our method offers some guidelines and if the implementation follows them, then the whole cycle of the testing process can be automated. we also discuss a small industrial case study to illustrate our approach and the test environment. the main results of our paper can be summarised as follows:



protest generates test cases by partitioning and exploring the state space. protest then simultaneously animates the specification and runs the implementation with respect to the test cases and assigns verdicts whether the implementation has passed the tests. the whole process is automatic; however, at this stage the test environment imposes some restrictions on operation arguments and results.



the organisation of the paper is as follows. section 2 discusses the related work. section 3 presents our approach. section 4 discusses our implementation and in section 5 we preset an analysis of our test environment in relation to existing work. section 6 concludes the paper.



legeard et al. have developed a tool called the bz testing tool(bztt) for deriving test cases from z or b specifications. since our approach has many similarities with the bz-tt, we present it here in some detail. so far as b specifications are concerned, they assume(i) the specification consists of a single b machine, and(ii) all sets in the b machine are transformed into finite enumerated sets. the test case generation proceeds in the following steps: inps and s) and post is the postcondition. inps and outs are respectively the operation input and the result. the normal form tells: provided pre is true, the values s' and outs' are non-deterministically chosen such that post is satisfied. post may refer to s and outs as well as s' and outs'.



step 5: the full state space of the b machine is explored to construct a fsm(finite state machine) whose initial node is the initial state of the b machine. each node in the fsm represents a possible machine state and each edge is labelled by an operation instance. of course, to explore the full state space, it is assumed that all the sets of the specification are of finite type and they are small in size. the state space search is performed by the prob tool; more about the implementation will be discussed later. the aim here is that all the operation instances which we have generated in our partition analysis appear at least once in the fsm. however, it is not always possible since some operation instances may not be reachable.



the prob tool is an automated consistency checker of b machines via model checking and constraint-based checking. the activity of consistency checking shows that the operations of a machine preserves the machine invariant. the prob environment has been developed mainly in sicstus prolog with a graphical user interface implemented in tcl/tk. prob uses the jbtools package to translate a b machine into xml form, and then the pillow package is used to transform the xml files into a prolog term representation. the prob front end then uses this prolog term representation. the prob animator provides visualization of the state space that has been explored so far by the animator. further details about prob can be found in.



the model checker component of prob tries to explore the state space of a b machine systematically and automatically. it alerts the user as soon as a problem like the invariant violation is found, and then presents the shortest trace within the states already explored that leads from the initial state to the place of error. the model checker also detects when all states for finite state models have been explored, and thus can formally guarantee the absence of errors. for such exhaustive model checking, the sets of the machine are restricted to small finite sets and integer variables are restricted to small numeric ranges. under these restrictions only, prob can traverse all the reachable states of the machine(and show the absence of errors within the restrictions). prob can also animate a b machine. in addition, prob supports random animation in which eligible operations are applied at random till their number reaches a certain limit given by a user.



the operation parameters of the machine and those of the implementation are of basic types, and in addition the operations have a single return value of basic type. our current implementation performs automatic verdict assignment under these restrictions. they keep the representation mapping between the specification and implementation namespaces simple. however, in future, we intend to lift these restrictions.



the partition analyser: the preconditions and the machine invariants are extracted and both are converted into their dnfs. a naive theorem prover then tries to eliminate all the disjuncts from the dnf of the precondition which are either self-contradictory or which contradict the invariant. the remaining disjuncts are used to create partitions of the operation input space, and then the operation instances.



coverage graph display: protest can display the state space coverage in the form of a graph. nodes in this graph represent the abstract machine states and the edges are labelled with the operation instances. an edge signifies state transformation through the application of the labelled operation instance.



protest environment at this stage can deal with java implementations. let us assume, we have a java implementation which has encoded all the update and the probing operations of a b machine. in this sense, the implementation has been directed by the specification. richardson et al. point out that while running a test case, examination of the test result is not the only interesting observation; sometimes intermediate results can be examined at strategic points which they call control points. in our case, control points could be the positions before and after operation(or operation instance) invocations. protest has the capability to perform simultaneous specification animation and code execution, and at selected control points, both the specification and the execution states are examined by invoking their respective probing operations. the results of the probing operations are matched by using the representation mappings, and if there is a mismatch, it is reported to the user.



b supports two types of non-determinism: bounded choice through the syntactic construct select and unbounded choice through the construct any. in a select construct, there are a finite number of guarded substitutions and a branch whose guard evaluates to ture is non-deterministically chosen. in an any construct, an element of a set is non-deterministically chosen.



here r1,..., rk are the k non-deterministic choices made in the course of operation op. let us consider the case when protest is doing simultaneous animation and execution during testing with respect to a test case, and we have reached the operation op. at this point protest observes what choices the implementation has made. thereafter, protest will follow the choices made by the implementation. we term this approach testing on the fly. note that the current version of the protest does not support this aspect.



partition analysis: many other works like[10, 15] partition the input space by considering both the preand the postconditions of an operation. the reason they cite is that usually the operation preconditions are trivial in nature, and a dnf analysis over them would hardly result in worthwhile partitions. in our case, we strengthen an operation precondition by lifting predicates used within the operation bodies. we have observed that our approach generate the same number of partitions as the one by legeard et al. however, partition analysis in presence of non-determinism may need some more analysis with a view to creating further partition of the input space.



once input subdomains are derived after a dnf based analysis, the bztt approach uses some(minimization/maximization) cost functions to further partition the input space and then test cases are generated. at this stage though the protest approach does not use cost functions, it can use them in future to create further partitions. this is just an enhancement which can be easily integrated into the protest environment.



there may be operation instances generated by partition analysis which are not reachable in the course of exhaustive model checking. one possible reason may be the initialization condition of the machine which does not make it possible to reach the operation instance; however, there may be a different initialization which can make this operation instance reachable. this can be found out by the constraint based checking facility of prob. prob can even suggest an initialization condition which can make this operation instance reachable. in addition, it can be checked if application of this operation instance can lead to invariant violation.



are important differences. first, the approach to partition analysis is different though both result in similar partition sets. second, protest is different in the sense that it performs simultaneous specification animation and code execution to establish the correspondence. third, protest performs automatic verdict assignment. in addition, we address the issue of non-determinism.



snook and butler have developed a tool called u2b which mechanically translates uml specifications to b. of course there are some restrictions on the uml classes so that when translated they do not violate the hierarchical structure of the b machines. our protest environment could be integrated with the u2b tool which would facilitate mechanical generation of test cases from uml specifications. further by testing the implementation against the generated b specification, this approach would indirectly establish the correspondence between the uml specification and the implementation.



in this paper, we have presented protest, a testing environment for b specifications. the highlights of this tool are that it performs in parallel the animation of the specification and code execution with respect to test cases, and it assigns verdicts on the test results. we have also offered a solution to handle non-determinism in the b operations. we have discussed the efficacy of the protest tool by performing a small case study from industry. we have also demonstrated how through the use of temporal model checking and constraint based checking, we can obtain a set of robust test cases.



sel_colour: colours& sel_colour= lightgrey&/*colour of slot at cursor*/ norm_colour: colours& norm_colour= red&/*usual colour of slots*/ titles: pagenr--> pagenames&/* a total function*/ titles={ 1|-> p1, 2|-> p2, 3|-> p3,... 15|-> p15}



