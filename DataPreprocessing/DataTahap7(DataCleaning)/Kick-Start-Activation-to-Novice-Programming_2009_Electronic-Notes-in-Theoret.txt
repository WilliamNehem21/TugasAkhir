in the beginning of learning programming students have misconceptions of what programming is. we have used a kick-start activation in the beginning of an introductory programming course(cs1) to set the record straight. a kick-start activation means introducing the deep structure of programming before the surface structure by making the students solve a certain type of problem in the first lecture. the problem is related to a realistic computer program, simple enough for everyone to understand and allow students to participate in debugging. a visualization-based approach helps making the example more concrete for students.



students who enroll to introductory programming courses(cs1) have plenty of misconceptions about the nature of programming and some students do not know what programming is at all. the course typically starts with the teacher trying to correct the misconceptions by emphasizing that programming is more problem-solving and thinking than typing program code. the concept of an algorithm is introduced, as well as some tools for implementing algorithms and designing programs, such as pseudocode or flow charts.



a classical first example of an algorithm is a recipe in a cook-book. a recipe is a relatively unambiguous, detailed set of instructions. if you follow the instructions carefully you will have a food portion as the result. however, there are problems with this example. firstly, it is not at all related to computers. thus students might feel that the teacher is stating the obvious or even explaining nonsense when he/she is talking about cooking and algorithms instead of programming. secondly, even though comparing cooking recipes and algorithms gives a clear idea on what an algorithm is, it does not really help to understand what a programmer does. there is no occupation where the job is to develop new recipies. thus, the underlying idea of programming is not delivered to the students. thirdly, the methaphor also does not help in explaining the programming process for the student. there are no concrete examples on important phases like designing, testing nor debugging. the student might still continue carrying the misconception of programming being merely the implementation of an algorithm.



we introduce a different way to start the course: kick-start activation. in this approach, we get into the deep structure of programming before the surface structure is even introduced. our target audience is especially the students who do not know anything about programming before the kick-start activation.



in this article we first present the idea of a kick-start activation in section 2. then we introduce our example and explain how we use it in section 3. section 4 presents the visualization and feedback. finally, discussion and conclusion are included in section 5.



our second criterion is that the kick-start activation needs to be simple enough so it can be understood by everyone. we decided that it has to be an example that relates to everyday life. besides that we chose not to use a real programming language nor any terms, pictures, or other details that relate to computers. for example, we did not want[]-operators in the algorithm or memory addresses in the pictures. these would just add extra details that are irrelevant at this stage. instead of using a programming language it is easier to fade out the surface structure of programming by using a natural-language-like pseudo code presentation and flow charts. to concretize the pseudo code and flow chart we developed a visualization that illustrates how the algorithm would be run by a computer if the computer could understand it.



the third criterion for a kick-start activation was to make students take part in the example. as programming is much more thinking and problem-solving than using the programming language syntax, there are numerous programming related activities that students can try already in the beginning of the course. for instance testing an algorithm is a task that can be given to a student. one practical way of doing this is developing a buggy version of an algorithm that the students can debug.



the topic of our kick-start activation was the hyphenation rules of the finnish language. word processors have spell checking and automatic hyphenation, i.e., computer programs are hyphenating finnish words. in addition, every student knows how to spell 3 so the topic is general enough.



the purpose of the testing phase was to activate the students. they were actually performing a programming related task even if they thought they did not know any programming yet. the idea is that the students can use the visualization to run and test the algorithm. the testing could of course be done using only pen and paper, but the visualization is handy in it. we gave a link to the visualization to the students for later use so that they could revise the lecture using the visualization.



the student can control the visualization using the step and step-back buttons. the execution of the algorithm is visualized by coloring the nodes in the flow chart or the lines of the pseudo code synchronously with the steps. as the program is hyphenating words, the state of the word in each step is visualized in the window with the alphabet building block picture on the left hand side. there are pictures of two words: the original word without the hyphens and the result where the hyphens are added as the algorithm proceeds. the visualization also colors the alphabet building blocks that the algorithm is handling.



as the algorithm is given fixed in the hyphenation algorithm visualization, the student engagement is enhanced by allowing the student to provide his/her own input word for the algorithm. this corresponds to the level change of the visualization engagement taxonomy. to attain the level response also, the flow of the program is interrupted with pop-up questions querying about the next behavior of the program.



we evaluated the visualization with a quantitative survey after the lecture where we used it. we handed in a questionnaire on paper for the students. we received altogether 113 responses. 71 of the respondents(63%) had no programming experience before the course.



sualization was more useful for learning than the students who had programmed before coming to the course. this difference is statistically significant(p< 0, 05). the reason is also obvious: the students with earlier programming experience already had an understanding on how algorithms and flow charts work so they do not need the visualization for understanding the hyphenation algorithm. this result shows that we managed to help the students who were the target audience of the visualization.



the kick-start activation received positive feedback both from the students and the teachers who used it. we think that our approach was successful because the criteria were designed carefully and there was a visualization tool that aided both presenting the example and understanding it. this example could be used as a source of ideas for other topics to build kick-start activations of.



the conceptual framework of programming knowledge developed by mcgill and volet suggests that in addition to syntactic and conceptual knowledge a programmer also needs strategic knowledge of programming. reports on the state of field show that visualizations are often used for only presenting programming concepts. the scope of our visualization is more in the strategic knowledge since it focuses on the programming phases: testing and design.



bug or build a completely new correct algorithm after finding the bug from the premature version of the algorithm. this can, however, be very challenging for a novice student so we did not try it. it would be an interesting future work idea to build a visualization tool where the student could build the correct algorithm by modifying the flow chart. another idea for future work is that we could implement different kinds of premature algorithms. there could be easier and more difficult bugs for the debugging task.



