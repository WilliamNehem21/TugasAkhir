this paper presents a new proof-assistant based approach to program verification: programs are translated, via fully-automatic deduction, into tail-recursive function defined in the logic of a theorem prover. this approach improves on well-established methods based on hoare logic and verification condition generation(vcg) by removing the need to annotate programs with assertions, making the proof natural to the theorem prover and being easier to implement than a trusted vcg. our tool has been implemented in the hol4 theorem prover.



we build on work by camilleri and melham, who define in hol a big-step operational semantics for such programs. in this presentation we consider states that are(finite) partial functions from variable names(of type:string) to integers(type:int). let neval and beval define evaluations over expressions.



assignments update the value of a variable and can always be implemented by a let-expression, e.g. the effect of assign"b"(plus(var"a")(var"b")) is captured by let b= a+ b in(a,b). we express this fact by the following theorem:



to verify a program using a vcg, one starts by annotating the code with assertions. for the program above(d program) one needs to invent a precondition, a postcondition and, for the loop, an invariant and a variant(the result is to be a total-correctness specification). here n is logical variable(the initial values of variable"n").



representing imperative programs as recursive functions, due to mccarthy, was key in this work. ideas from separation logic were used to aid automation(by keeping specifications free of side conditions); and ideas from decompilation into hol were used for dealing with loops. our programming environment is the hol4 theorem prover.



