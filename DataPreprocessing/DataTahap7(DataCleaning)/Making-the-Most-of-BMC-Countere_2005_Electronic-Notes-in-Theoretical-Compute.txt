the value of model checking counterexamples for debugging programs(and specifications) is widely recognized. unfortunately, bounded model checkers often produce counterexamples that are difficult to understand due to the values chosen by a sat solver. this paper presents two approaches to making better use of bmc counterexamples. the first contribution is a new notion of counterexample minimization that minimizes values with respect to the type system of the language being model checked, rather than at the level of sat variables. greedy and optimal approaches to the minimization problem are presented and compared. the second contribution extends a bmc-based error explanation approach to automatically hypothesize causes for the error in a counterexample. these hypotheses(in terms of relationships between variables) can be automatically checked to determine if a causal dependence exists. experimental results show that causes can be automatically determined for errors in interesting ansi c programs.



1 this research was sponsored by the gigascale systems research center(gsrc) under contract no. 9278-1-1010315, the national science foundation(nsf) under grant no. ccr-9803774, the office of naval research(onr), the naval research laboratory(nrl) under contract no. n00014-01-1-0796, the army research office(aro) under contract no. daad19-01-1-0485, and the general motors collaborative research lab at cmu. the views and conclusions contained in this document are those of the author and should not be interpreted as representing the official policies, either expressed or implied, of gsrc, nsf, onr, nrl, aro, gm, or the u.s. government.



a model checking counterexample is intended to be read by a person and used for debugging. ideally, such a counterexample would be the most succinct and easily comprehensible witness to the existence of an error. the utility of small(in various senses, including length) counterexamples is widely recognized. minimization of counterexamples, both in bounded and explicitstate model checking is a topic of ongoing research.



these formulas for satisfiability typically return the first satisfying assignment produced. the counterexample values, therefore, are highly dependent on the decision heuristics used by the sat solver. that these choices may result in needlessly large values for the actual program variables is independent of the issue of unnecessarily complete assignments addressed by other minimization work. the issue is an artifact of the bit-level translation; however, using an integer-based technique such as uclid would not preserve the proper bit operation and overflow semantics of ansi c.



in this case, the decision heuristics used by zchaff assign 1 to a large number of bits. this results in large values for the program variables, making it difficult to follow what is happening. this problem, already evident in a small example program, is greatly exacerbated when many variable values are involved.



this paper presents two approaches to value minimization. the first is a greedy approach that makes use of incremental sat(section 4.1), while the second solves an optimization problem in order to guarantee true minimality(section 4.2). both approaches are used for counterexample length



the second issue addressed in this work is that of making better use of counterexamples. minimization directly improves the usability of counterexamples. error explanation provides information about the causality of errors beyond that contained in the counterexample alone. the explain tool automatically generates explanations for cbmc counterexamples, based on the counterfactual theory of causality proposed by david lewis.



minimization of counterexample length has been addressed in various contexts, including heuristic approaches[9,14,13]. other kinds of minimization, based on game-semantics or minimal sat assignments[18,23] have also appeared. the approach presented here for minimizing counterexample values can also be used to minimize counterexample lengths.



the algorithm continues with the next guard from the sorted list until all guards have been used. the heuristic approach only then attempts to minimize the variables that are used in the counterexample trace. because the guard values are now fixed, the only values minimized are those that will appear in the counterexample: assignments guarded by false conditions are not taken into account. alternatively, one could attempt to minimize first values and then execution steps.



values during execution of the program. therefore, the sum that is minimized is over all program variables after loop unrolling and static single assignment, in this case|a#0|+|a#1|+|a#2|+|a#3|+|a#4|+|b#0|+...



for the mediabench benchmarks, the results are mixed. the greedy heuristic is typically slower than the true optimization, but results in smaller values in some cases(the values are a secondary goal, and larger values in the optimal algorithm can be caused by different control flow traces computed in the first stage). on two benchmarks, hardly any minimization is achieved by either algorithm. these benchmarks make heavy use of large lookup-arrays, which are computed at run-time.



find an execution b such that(1) c does not hold and(2) the distance d(a, b) is minimal. b is an execution that is as similar as possible to the counterexample a, except that the potential cause c is present in a but not in b. if the error e is present in b, it is not causally dependent on c.



and the method implemented in cbmc is that no causality checking is done for(1) comparisons with constants and(2) comparisons with temporary results that are never stored in a variable(i.e. x>(y+ 50)) are not checked for causality. on the other hand, comparisons between values that do not appear in guards together are checked. causal dependencies that are directly present in a guard in the source code are generally not as difficult to detect as indirect dependencies: a change in guard value is likely to appear in the explanation. for this reason, it seems at least reasonable to expect that the current tradeoff is often the correct choice. more extensive evaluation will be needed to determine if a source code-mining approach is preferable.



