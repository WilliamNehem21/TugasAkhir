around the early nineties, the categorical notion of a final f-coalgebra for a functor f on some category c was found useful for the abstract description of possibly infinite objects in computer science. examples are datatypes such as infinite streams or dynamical systems like processes or automata(see e.g. the introductions by jacobs and rutten[jr96,rut00b]). treating these different entities uniformly as behavioural systems of some type f allowed for an abstract formulation of definition and proof principles that have been studied separately for various applications before.



the theory presented is stated for some category c, but for easy reading our explanations and examples all refer to the category of sets and total functions, set. this paper is a short version of a cwi technical report under the same name[bar00]. the long version contains detailed proofs for most of the statements given here and further examples.



with this principle, one can work directly with the relation b as in(2) which only contained the pairs used in the statement itself. there is no need to find a description covering all the tails encountered while walking down the streams, as it is done e.g. by rutten[rut00a], who uses all pairs



we left for future work the quest for further interesting instances of our framework. since we found sufficient conditions for our schema to work that do not assume the functor t to come as a pointed functor or monad, it would be particularly nice to come up with examples exploiting this generality. in all the examples we have so far this structure can be added immediately or at least after a straightforward reformulation of the problem.



i would like to thank my colleagues, in particular jan rutten, alexandru baltag, and alexander kurz, for discussions and guidance. i am further grateful to dirk pattinson for suggestions and to the anonymous referees for helpful hints. special thanks go to matteo coccia, who raised my interest in category theory during his stay at the cwi.



