the topic of uml model consistency is becoming increasingly important. having a tool that checks the consistency of uml models is very useful. using the xmi standard, the consistent models can be transferred from the checker tool to any other uml tool. by means of practical examples, this paper shows that using a framework based on ocl is a valuable approach when checking uml models. the results obtained in the examples highlight some shortcomings in the uml definition and prove that ocl offers the support needed in managing tool peculiarities.



checking uml model consistency is becoming a more stringent problem every day. first, the number of uml users is continuously increasing and thus the number of models constructed and transferred between different users and tools is increasing, too. furthermore, applying mda in the process of application development implies the transformation of models being correct with respect to the semantics of the modeling language. detecting and removing model errors in the early stages of software development leads to shorter timeto-market and lower costs. generally, model construction takes place in the framework of a methodology; moreover, each model is built for a certain application domain and is eventually implemented in a programming language. therefore, checking the model against a set of methodological rules, application profile dependent rules(web applications, component-based applications, and so on), target programming language rules are important operations whose automation is possible and useful. ocl allows for a simple and suggestive specification of all the categories of rules mentioned above. ocl has been a part of uml since the first publication of the uml standard, being the only textual formalism used for the definition of both the uml static semantics and the user model semantics. as specified in, ocl is used to complement the information in uml diagrams.



each uml tool supports different kinds of checks using different approaches. the most flexible strategy is by far the one adopted by tools supporting scripting languages. rational rose, together, objecteering are among the best tools included in this category. but even this approach has some drawbacks:



the rules used in this example are the wfr defining the uml static semantics. all the additional operations were grouped in one file. the wfr expressed by means of class invariants were stored in six other files. this grouping enables both a better management of the specifications and a finer reusability at the specification files level.



the models presented in section 4 were created using two of the most popular tools: rational rose and magicdraw. using ocle we highlighted some inconsistencies concerning the well formedness of these models. most of these inconsistencies are difficult or even impossible to identify using existing case tools. our point of view is that users have to know about them in order to avoid their potential effects.



the kent modeling framework(kmf) provides a set of tools to support model driven software development. at the core of kmf is toolgen, a tool to generate modeling tools from the definition of modeling languages expressed as metamodels. kmf supports uml model transfer using xmi. like mmt, the downloadable tool version is an early prototype and the examples provided with it are small examples. therefore, the downloadable version is not yet appropriate for checking real-life models.



the well formedness of uml models are not always correct. the results are provided in a report, and mention only if a rule was evaluated to false or true. this information is therefore not useful in identifying the causes of any rule failure.



use is a very interesting uml tool offering ocl support at the model level. its repository implements a part of the uml 1.3 metamodel. consequently, using this tool in checking the well formedness of uml models is difficult and restricted to some checks. the tool was used in checking the syntactic and semantic correctness of a part of the uml 1.3 wfr(see). the transfer of models created using other tools is difficult because in use uml models are stored in a proprietary format.



the results obtained in the experiments described in section 4 confirmed that using ocl in checking uml model consistency represents a valuable approach that is worth taking into account. the models used in these examples were real-life models constructed using known uml case tools. ocl offers all the support needed to take into account the peculiarities of different tools(like the modeling of enumerations, undefined types and so on). by using ocle we succeeded in catching different kinds of inconsistencies that cannot be identified using other approaches(for example name conflicts for collaborationrole instances, undefined contexts). also, we identified several shortcomings in the uml standard. the lack of a clear rule about the naming of model elements is the simplest example having an important impact on model consistency. the metaclasses whose instances are allowed to be unnamed have to be clearly mentioned. a clarification of what are valid names in uml is also needed. this is of utmost importance for those metaclasses that have correspondents in the target programming language(such as classes, attributes, or even association ends).



using ocle we proved that checking the well formedness in case of real uml models is entirely possible. ocl offers the support needed in the mda approach. in our opinion, all these are strong arguments that ocl is valuable and should become a de-facto industry standard.



