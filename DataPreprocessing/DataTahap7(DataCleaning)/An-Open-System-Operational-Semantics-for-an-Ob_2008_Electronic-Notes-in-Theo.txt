the creol interpreter allows us to simulate a closed distributed system, where all the initial components are known in advance. on the other hand, it does not let us execute a component without providing and implementing an environment with which it can interact. at the reasoning level, this limitation is addressed by the hoare logic developed by dovland et al.. the hoare logic allows us to prove that an invariant holds for a given class. a system-wide invariant can be constructed from the class invariants using a compositional rule. the invariants may refer to a mythical communication history that records the object creations and method calls that have taken place in the system.



we focus on the class aspect of the creol language, and limit ourselves to the basic communication and synchronization model of creol, omitting the notions of interface, inheritance, self-reentrance, and dynamic update, as well as typing and specification. the approach can then easily be adapted to other languages where communication is done by message passing or by method interaction. we assume throughout that creol programs are syntactically correct and well-typed.



the rest of this paper is organized as follows: section 2 reviews the syntax of the main creol statements. section 3 presents a closed system operational semantics for the core language. section 4 introduces the open system semantics and connects it to the closed semantics and to hoare logic. section 5 considers related work. finally, section 6 summarizes the paper.



because some of the rules presented here use variables that do not occur in their left-hand side, they cannot be used directly to test or simulate a creol component. one solution would be to alter the rewrite rules so that they accept user-supplied data along with the creol program. an alternative is to define a custom evaluation strategy in maude that instantiates the unbound variables using random data.



