direct algebraic manipulation of map expressions seems to be, for human beings, much less natural than developing inferences in rst-order logic; it may in fact appear to be overly machine-oriented for direct hand-based exploitation. however, the situation radically changes when one resorts to a convenient representation of map expressions based on labeled graphs. beside allowing the abstraction w.r.t inessential features of expressions, such a representation allows an easy and intuitive visual handling of map speci cations. approaches of this kind have been proposed, for instance, in[2,1,3,6].



in this work we move the rst step toward the implementation of an automated tool for the mechanization of visual map-reasoning. to this end, we exploit agg|algebraic graph grammar|, which provides a visual programming environment for graph transformation based applications. such applications are described by graph grammars, which consist of an initial graph and a set of graph rewriting rules. agg supports the visual handling of both the start graph and the rewriting rules, and, once the graph grammar has been formalized, it allows the manipulation of the start graph. we use



let us now assume that' is a conjunction(9 x1)(9 xk)(l1^^ln) of atoms, and that vars(') fv1; v2;:::g is the set of all the variables occurring in'. moreover, assume that x1;:::; xk 2 vars(') and that each li is of the form xli pli yli, where xli; yli 2 vars(') are variables(assumed ranging over the domain u of discourse), and pli is a map expression of l. clearly, free variables may occur in' intermixed with existentially quanti ed variables.



note that x, y, and p are variables which are instantiated with concrete attribute values when the left-hand side graphs are applied to a certain graph. the rules are applicable when p is instantiated with p1\p2( rst rule), p1;p2(second rule) and p^(last rule), where p1 and p2 stand for general map expressions. their applicability is checked via java methods. moreover, the java methods proj1 and proj2 return the map expressions p1 and p2, respectively.



in this paper we reported on a rst attempt in implementing graphical techniques for map representation and reasoning. an interesting further development would consist in the design and implementation of a more sophisticated proof-assistant: consider for instance the capability of performing backtracking or suggesting the user the`better' rule to apply. the implementation of these features could be considered as a rst step toward the realization of a tool for automated map-reasoning based on graph-transformation techniques.



