abstract interpretation[6,10] is a framework for systematic derivation of program analyses. in this framework, the standard semantics of a program is approximated by an abstract semantics. the abstract semantics simulates the standard semantics and is used to extract properties of the actual runtime behavior of the program.



this article presents a top-down algorithm that computes an approximate solution for a specific class of program analyses. this class includes analyses of programs with dynamic control-flow, namely programs whose control-flow is determined by the run-time values of program variables. such programs are common, for instance, in higher-order and object-oriented languages.



formally, it is relatively easy to show that the time-stamps-based constant propagation always computes a result at least as good as a standard monovariant constraint-based data-flow analysis. the details are omitted from this article. note that the improvement in the quality over the constraint-based analysis comes at a price in the worst-case time and space complexity.



the top-down vs. bottom-up aspects of fixed-point algorithms for abstract interpretation of logic programs have been investigated by le charlier and van hentenryck. the two authors have developed a generic top-down algorithm fixed-point algorithm, and have compared it with the alternative bottomup strategy. the evaluation strategy of their algorithm is similar to the timestamps-based one in this article. in contrast, however, since their algorithm precisely computes the least fixed point, it also maintains multiple values from the lattice of results.



stamps to control recursion and avoids duplication of analysis information over program branches by reusing intermediate results. the time-stamping technique has originally been introduced by shivers in his phd thesis. to the best of our knowledge, the idea has not been pursued. we have presented a formalization of the technique and we have proven its correctness.



several issues regarding the time-stamps-based algorithm might be worth further investigation. for instance, it is noticeable that the order in which the outgoing edges are processed at a certain node might affect the result of the analysis. designing an improved strategy for selecting the next node to be processed is worth investigating. also, as we observed in section 3.3, an edge might be processed several times independently, each time with a larger analysis information. this suggests that some of the processing might be redundant. we are currently investigating such a possible improvement of the algorithm, and its correctness proof.



