the de facto c/c++/fortran programming languages paired with mpi, openmp, pthread, cilk, opencl, or cuda are used as a standard for programming large-scale machines on distributed memory hpc cluster, shared memory and heterogeneous hardware. julia language is an interesting point on this spectrum due to it was designed by domain experts with scientific and technical computing. julia is a high-level programming language with a focus on performance and productivity that was created for parallelism and scientific computing, making it a rival choice for developing hpc codes. since a lightweight api is provided by julia to call c routines, utilising c/c++ highperformance libraries has very little overhead and offers productive development in a high-level language that uses a lot less code to accomplish the similar results as c.. at every parallelism level julia provides built-in primitives for parallel computing by support features like dynamic types, meta-programming features, multiple dispatch, lightweight user threads, support for native code invocation, and packages for distributed, parallel computing.



compiled to machine code. julia executes native code and offers native ways to call functions of c or fortran shared libraries. additionally, it has native gpu support and offers a variety of libraries for using the gpu at various levels of abstraction.



the graphics processing unit(gpu) is massively parallel processors. gpu is comprised of a set of streaming multi-processors(sm), which form a grid of threads organized into blocks. several concurrent thread blocks can be running in each sm. to fully utilise all of these threads, multiple thread blocks must be used to run the cuda programme code under the single instruction multiple data(simd) paradigm. the adaptive cuda approach code consists of following steps:



sweilam nh, al-mekhlafi sm. a survey on numerical studies for fractional biological models and their optimal control. in: radwan ahmad g, khanday farooq a, said lobna a, editors. fractional order systems; an overview of mathematics, design, and applications for engineers. academic press. isbn 978-0-12-824293-3, 2022. chapter 1.



