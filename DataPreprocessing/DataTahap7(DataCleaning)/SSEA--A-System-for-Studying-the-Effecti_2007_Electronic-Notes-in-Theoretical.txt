in our work we seek to investigate attributes of algorithm animations and other program visualizations that affect how well the user can understand the concepts the designer intends to convey. we believe that effective pv systems must support perceptually appropriate graphical design, layout, and animation, as well as good pedagogical design. we are working to identify and evaluate perceptual, attentional, and cognitive features of program visualizations that affect viewer comprehension. this work is performed in the context of a larger project that involves observational studies of instructors, empirical studies of the perceptual properties of low-level animation actions through the vizeval environment, and the development of improved presentation and interaction techniques for program visualization in the context of computer science education.



the playback of animations can be controlled by the viewer via the animation control area(c). one feature allows the user to select from a collection of data sets as the input for the algorithm. another control sets the speed of the animation. the animation can be paused, ended, and then begun again from the start. stepping through the animation, which can only occur if the animation is paused, causes the next step of the animation to execute before pausing the animation again. a slider indicates the progress of the animation. moving the slider to the left will allow users to select a point at which to restart the animation.



participant is watching the animation. at the time that the popup occurs, the animation pauses its run until an answer is provided. these questions can be associated with the animation of the algorithm on a particular data set. further, the experimenter may specify that the popup appear only during the initial run of the animation of the algorithm with the associated data set. to prevent users from using the pseduocode to supply the correct answer to the popup questions, the popup window is positioned over the pseudocode area and is not movable. the experimenter also has the option to display the correct answer or other feedback after the participant submits a response. user answers to these popup questions are recorded in the log.



the graphical visualization generated by the ska module results from an algorithm and an animator working somewhat independently. a threaded architecture is used, following the oroducer-consumer design pattern. an algorithm thread is the producer of data for visualization, while the animator thread consumes the data.



the graphical representations consist of graphical objects and actions on one or more of these objects. graphical objects consist of lines, rectangles, text labels, circles and composite graphics. each object has numerous properties that can include color, fill, visibility, font, position, and labels. the display canvas references a list of graphics. as graphics are updated by the animator module, the canvas repaints the graphics, causing an animation.



two between-subject factors were varied: cueing and exchange animation. participants were randomly assigned to one of four groups, each with its own corresponding animation. fourteen participants were in the cueing with move(mc) category, sixteen in cueing with grow(gc), twelve in no cueing with move(mx), and seventeen in no cueing with grow(gx).



the traditional questions were further sub-divided into groups based on the type of knowledge the question tested, which we labeled knowledge, comprehension, and application. anova analyses were performed on these subsets. again, no significant difference was found among the four animation groups.



of the animation(or a review of the animation description provided here) reveals that the animation employs several types of cueing to indicate that two bars are being compared. in particular, color, labeled arrows, and location within the current partition all also cue the identity of the bars to be compared. thus, we do not conclude that such flash cueing is not valuable in promoting comprehension of animations. rather, we conclude only that the use of flash cueing as a redundant cue in this animation did not significantly benefit comprehension.



the ssea environment provides good support for carrying out empirical studies of program visualizations. several studies have been conducted to data, one of which is reported here. support for sound actions has been added to the ska package and additional studies that look at the roles of voice-over and non-speech audio in animations are under development.



