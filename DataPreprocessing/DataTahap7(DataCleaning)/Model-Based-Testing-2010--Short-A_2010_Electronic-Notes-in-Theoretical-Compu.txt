quality of software is an issue of increasing importance and growing concern. systematic testing is one of the most important and widely used techniques to check the quality of software. testing, however, is often a manual and laborious process without effective automation, which makes it error-prone, time consuming, and very costly. one of the new technologies to meet the challenges imposed on software testing is model-based testing.



from an industrial perspective, model-based testing is a promising technique to improve the quality and effectiveness of testing, and to reduce its cost. the current state of practice is that test automation mainly concentrates on the automatic execution of tests for which a multitude of commercial test execution tools is available. these tools, however, do not address the problem of test generation. model-based testing aims at automatically generating high-quality test suites from models, thus complementing automatic test execution.



from an academic perspective, model-based testing is a natural extension of formal methods and verification techniques, where many of the formal techniques can be reused. formal verification and model-based testing serve complementary goals. formal verification intends to show that a system has some desired properties by proving that a model of that system satisfies these properties. thus, any verification is only as good as the validity of the model on which it is based. modelbased testing starts with a(verified) model, and then intends to show that the real, physical implementation of the system behaves in compliance with this model. due to the inherent limitations of testing, such as the limited number of tests that can be performed, testing can never be complete: testing can only show the presence of errors, not their absence.



an important benefit of model-based testing is the automatic generation of large numbers of test cases from a model. model-based testing, however, is more than just generating an amount of test cases from a model. to prevent that just any artifact generated from a model could be called a test case, test generation must be based on a sound and well-defined underlying theory of model-based testing. such a theory must support precise reasoning about the objects of model-based testing, such as models, iuts, test cases, test generation, and verdicts. even more important, such a theory must establish relations between these objects: it defines precisely when an iut is correct with respect to a model, what it means for a test case to be valid, and what a correctness proof for a test generation algorithm encompasses.



two important ingredients of such a theory of model-based testing are a testing hypothesis and an implementation relation. a testing hypothesis, or test assumption, establishes the link between the black-box, real iut, which consists of software, hardware, physical components, or a combination of these, and the world of models. the assumption is made that any real iut can be modelled by some object in a domain of models. the testing hypothesis presupposes that such a domain of models is known apriori, and that a valid model of the iut exists in this domain, but not that this particular model is apriori known. in this way, the testing hypothesis allows reasoning about iuts as if they were models in this(formal) domain.



building on the testing hypothesis, an implementation relation, also called conformance relation or refinement relation, is a formal relation between models of iuts and specification models. it defines when an iut is correct with respect to a specification model. this implies that an implementation relation is at the core of a theory of model-based testing, and that validity of test cases and correctness of a test generation algorithm must always be assessed with respect to an implementation relation.



model-checking and model-based testing serve complementary goals. modelchecking aims at showing that a model is valid and has particular properties. model-based testing starts with a valid model to show that the iut behaves in compliance with this model. only when model-based testing and model-checking are based on compatible theories, we can ensure that model-checked properties are preserved in the iut.



the implementation relation ioco is based on the testing hypothesis that implementations behave as input-enabled labelled transition systems. over time, a number of variants of ioco have been defined which differ in, e.g., specification models, input-enabledness, and the treatment of partial specifications. the relation uioco is more specific with respect to partial specifications, wioco does not assume input-enabledness of implementations, tioco and rtioco add real-time properties to models, and hioco extends this to hybrid transition systems. the relation sioco treats data in a symbolic way, which facilitates transposing pre/post-conditions to the realm of labelled transition systems, and stiocod extends this to the combination of real-time and data. the relation mioco does it with multiple input and output channels, iocor considers refinement of actions, qioco adds quantification of imprecision, poco does it with partial observability, and eco takes the environment into account.



model based testing has been around for years. it is based on the idea to derive test cases from the model of the system under test(sut) that was created for development purposes. this concept has a drawback: using development information alone only provides verification but not validation. a development model of a software component can be used to generate test cases which can obtain c0 to c2 coverage of the model but do not cover actual user workflows or exceptional and error provoking scenarios. validation is about answering the question if the correct system was realized. the test cases necessary for this need to include information from the different stakeholders, designers, tester etc. within this paper the methodology of



automotive oems need to integration-test the various control devices, which are supplied by different component manufacturers and the coordination of the functions between different suppliers. consistent representation of the functionalities of the overall systems and their dependencies poses a great challenge in this field. the practical suitability of the.mzt method and the.getmore test case generator has been demonstrated in several projects in the automotive industry.



in a cooperation project the extension of the ttcn-3-based test and simulation system ttsuite most with the model-centric test design approach was evaluated. most(media oriented systems transport) is the leading network standard for car infotainment. the objective of this project is to systematically test the remote operation possibilities while retaining the greatest possible test coverage. the functions to be tested include play, pause, forward, scan, shuffle, and list, which can be executed in any order. based on the description of all available functions, a test model(.mzt) was created using the model-centric testing methodology. the basis of the test setup is ttsuite most with existing ttcn-3 libraries for the most connection of the test system, the hierarchical.mzt test model and the infotainment system of a real vehicle. after the test cases have been generated from the test model, they are compiled with ttsuite most and are immediately available for execution. unlike with intuitive, manual test case preparation, with this approach it is possible to systematically identify all test cases and to cut down the number of test cases.



model-centric testing shows that mbt can be used in practice successfully. based on this.mzt grew from an idea to a real methodology including guidelines, training and tooling..mzt helps the test managers to organize the test not according to a new tool chain, but to use existing tool chains and extend those by mbt/.mzt.



testing effort grows exponentially with the system size and traditional testing methods seem not to be able to keep pace with the trend in engineering towards more complex and bigger systems. on the construction side a current trend in european industry is to apply model-based systems engineering techniques to deal with the increased complexity of systems and with the intention to produce high quality systems at reduced costs. unfortunately, the quality assurance side has not kept step with this development.



intensive research on model-based testing(mbt) and analysis has been conducted in recent years, and the feasibility of the approach has been successfully demonstrated, e.g. in[2,7]. yet, boberg shows that most studies apply modelbased testing on the component level, or to a limited part of the system while only few studies focus on the application of the technique on the system or even aircraft level. the main difference being that the goal is not to produce code but to provide a high quality specification.



a number of studies have demonstrated that the cost of fixing problems increases as the lifecycle of the system under development progresses, e.g.. testing thus needs to be applied as early as possible in the lifecycle to keep the relative cost of repair for fixing a discovered problem to a minimum. this means that testing



descriptive modelling of system test cases: descriptive modelling allows a description of the test cases using a combination of natural plain text language and the formal sysml activity diagram graphical notation. the combination provides a semi-formal notation that is easily used and quickly adapted by system designers and test engineers. furthermore, the notation is understood easily and the created diagrams can be used for communication purposes with non-engineers as well.



innovative cross-domain tool framework: another way forward for model based testing is the integration of the different technologies and tools for analysis and testing into an innovative generic, viz. domain independent, model-based analysis and testing tool solution, a so-called testing framework. embracing complete separation between tools and its data, and by offering a standard interface for storing and retrieving model elements to and from the platform, tool owners can easily work with their data and integrate with data from other tools in a common, standard way.



