perspectives or analyses for discovering or checking formal properties of grammars. in other current work we are addressing the former kind of functionality by developing integrated development environments for attribute grammars including the application of program slicing methods to facilitate viewing. the present paper focuses on the second class of functionality: formal analysis of attribute grammar properties. of course, evaluator generators have to analyse various formal properties of the input grammar to verify that an evaluator can be produced or to produce a correct evaluator(e.g., attribute dependences, circularity). we are interested in providing analyses that



rather than modify existing attribute grammar systems to add extra feedback, we have chosen an approach based on an off-the-shelf formal methods tool. formal methods can provide an expressive platform for describing software properties and assertions about them. the properties and assertions are independent of particular programming notations, so front-ends can be written to enable the analysis tool to be used with different languages. for many problems a formal methods tool can be used to achieve an effective implementation with much less effort than modifying an existing generator. this strategy also maintains the modularity of the overall system because the generator can focus on its task and the auxiliary tools can provide support for peripheral problems.



our method is based on formal relational models as supported by the alloy model finding and checking tool. section 3 summarises the relevant capabilities of alloy and discusses its suitability for the class of problems we are addressing. a crucial aspect of the tool is its capability to provide counterexamples to illustrate violations of assertions.



eral and properties of the specific grammar under analysis(sections 4.1 and 4.2). in our example, the general properties include the fact that all grammars have a single root non-terminal and that non-terminals are related by parent and child relationships which are inverses of each other. grammar-specific properties include the identity of the root non-terminal and the parent relationship between non-terminals as implied by the productions of the grammar.



scalability is an important issue for formal models of software. an approach based on formal methods is no use if it cannot handle realistic inputs. it often turns out that the key to controlling scalability is to make sure that the model specification is not overly specific. for our example, this means that we must be careful not to try to model complete asts. rather, we model paths through asts, which allows models to omit non-terminals that do not occur on the path being modelled. section 5 evaluates the performance of our analysis on an attribute grammar that specifies the semantic analysis for a subset of pascal and presents further modifications that significantly improve performance.



processor generation system. lido 1 is descended from the aladin language that was the specification language in the gag system, a predecessor of liga. lido and aladin have many features in common with the main difference being that lido only provides a general prefix-style for expressing computations whereas aladin was a full-featured functional programming language. most notably, both of these languages have the including construct which is at the core of the main example problem addressed in this paper.



lido supports other remote attribution constructs. constituent(s) is similar to including except that it creates a dependency between a symbol and one or more other remote symbol below the current symbol in the tree. the chain construct creates a chain of dependent values which are threaded throughout all the symbols in a depth-first left-to-right order through the tree. these constructs have similar static checks that could be analysed in a similar way to the including problem illustrated in this paper.



proof assistants(also known as theorem provers), guide users through a series of logical deductions relating to their software specification. systems comprising complex data types can be described quite elegantly, using the mathematically-based languages of proof assistants. in particular, infinite structures such as trees pose no particular impediment to these techniques.



the level of automation available with different proof assistants varies, but ultimately either an assertion is proved or a point is reached where no further deductions can be made. if the proof is concluded successfully then a great deal of information about the problem is established and one may have much confidence in the result. however, if a proof cannot be completed, then the technique provides very little additional information about the problem that may help the developer progress with the development of the software. the cause of the problem may be in the software under development, but it could also lie with the proof tactics themselves. in general, successful use of a proof



like proof assistants, model checkers in general can verify the correctness of a system however in contrast to proof assistants, model checkers do not provide much additional information about a correct software description. however they can usually be used without developer intervention and can identify counterexamples to illustrate the falsity of assertions. counterexamples can provide significant assistance during the software development process because they point to specific circumstances in which desired properties of the software fail to hold. for our purposes, counterexamples are crucial because they form the basis of providing better feedback to an attribute grammar developer.



instead, we have based our work on the alloy tool 2 which provides some of the advantages of both of the two types of formal methods described above. the alloy specification language uses a first-order relational logic, is declarative and is based on the formal specification language z. unlike z, alloy specifications can be analysed automatically in much the same way as a finite-state machine specification can be analysed by a model checker. just like model checkers based on finite-state models, alloy provides counterexamples



this section briefly introduces the alloy specification language by way of a simple model specification of families. this example is loosely based on sample code supplied with the alloy distribution. we will introduce alloy notations informally since in most cases they correspond closely with well-known concepts of logic and mathematical relations. the alloy manual contains a full description of the specification language syntax and semantics.



when presented with the model specification and this assertion, alloy generates models that satisfy the specification and checks that the assertion is true in each of these models. it is important to appreciate the difference between facts and assertions. facts specify constraints that models must obey to conform to the specification. alloy will not consider models that do not satisfy the facts. assertions specify properties that we expect to hold but may not actually hold for some models.



example, we must restrict the size of the person class; in other words, we must specify the maximum number of people in a model that is to be checked. for this specification the assertion fails on some models with a person class having scope of just three. the counterexample generated by alloy is the obvious one: person 0 is the parent of both person 1 and person 2, and person 1 and person 2 are spouses of each other. armed with the knowledge that the existing constraints are not sufficient, the developer can add additional constraints to the specification to ensure that this situation is not allowed.



the techniques described in this section are independent of the particular attribute grammar notation. they have been embodied in an eli-specific tool that translates lido attribute grammars into alloy specifications. thus the analysis process is completely automatic. we evaluate the approach in the eli setting in the next section.



ggraph defines all of the relationships between non-terminals. for the including problem we need to be able to talk about particular paths in this graph. the following specification builds on the ggraph signature, adds no relations, but adds a fact that restricts the path models to those where each symbol has at most one child. for any single ggraph instance there will be potentially many gpath instances representing all of the different paths from symbols to the root.



g. then we specify that program is the root of g. then the child relation is defined by enumerating its constituent pairs as given by the context-free grammar; for example, the pair(program,pen blocks) is in the child relation because of the production program::= pen blocks.



when presented with the model specification from the previous two sections and this assertion, we can ask alloy to search for models that conform to the specification but violate the assertion. we use the following alloy check statement to constrain the scope of the models to include no more than five symbols since there can be no more than five symbols in a path from any symbol to the root of this grammar. also, we only use one ggraph instance because it can be shared between all paths.



we have also extended the reachability fact to include the possibility of reaching a symbol via the inheritance relationship. this makes sure that class symbols are connected to the rest of the model. the definitions of gpath and symbol remain as before.



a slight complication arises due to the fact that alloy may choose to omit any of the symbols from the model of a particular path. only the symbols that are actually on the path need to be in the model. however, if one of those symbols inherits one or more class symbols, then we must make sure that these class symbols are also in the model. otherwise, we are not able to properly model the situation where an including refers to a class symbol that is inherited onto an ancestor symbol. for the example, we need the following extra constraints which specify: 1) that if there is a d in the model then there must be a q too, and 2) that if there is a d in the model then every path should have the inheritance relationship between d and q.



our main evaluation has been performed on a grammar that performs semantic analysis for a subset of pascal. the grammar has 52 productions and uses 68 tree symbols and 25 class symbols; the class symbols come mostly from library modules. there are 36 including constructs in the grammar. we ran our experiments on an apple powerbook g4 with 1 ghz processor and 1gb ram running mac os x 10.2.6.



we timed the analysis of the correct pascal subset grammar in order to determine worst case times. 7 our current measurements show that it is possible to analyse all 36 of the includings in about 20 minutes of user time with a scope of 10, or 34 minutes with a scope of 15.(the two different scopes produce the same results.) these times benefit significantly from the decision described in section 4.2 to limit each symbol class to hold at most one atom. without this restriction a full analysis with scope 10 takes over 20 hours.



we expect our approach to be most useful once a problem with a specific including has been diagnosed by some other method(e.g., via a message from liga). thus, a more realistic use case is to analyse just one including at a time. we examined the individual includings in our test case and



only modelling erroneous including constructs. our current model specifications incorporate the whole grammar and assertions for every including. a better strategy is to target the models towards solving only those includings that are triggering liga errors. we expect to see diagnosis times for a problem with a single including in the order of ten seconds for grammars of reasonable size.



more accurate setting of the scope of the model. at present we use a fixed scope for all grammars. a better approach would be to calculate the maximum scope needed for a specific grammar so that we can guarantee that no counterexample is missed but limit the redundant work that must be done. in the including case, this would be a measure of the longest possible non-recursive path.



bill waite consulted on the general problem of grammar analysis and the issue of scope in typical grammars. ilya shlyakhter and alan fekete provided insight into the appropriate use of the alloy model specification language. dom verity consulted on various aspects of logic.



