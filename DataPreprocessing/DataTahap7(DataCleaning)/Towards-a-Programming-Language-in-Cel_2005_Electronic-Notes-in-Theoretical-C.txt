in, a new model of computation within the framework of natural computing was introduced, called membrane computing. it starts from the assumption that the processes taking place in the compartmental structure of a living cell can be interpreted as computations. the computational devices of this model are called p systems.



in this paper we present a family of p systems that solves a numerical npcomplete problem, namely, the partition problem. the design of this solution is inspired in several previous works on other problems, mainly the subsetsum and the knapsack problems, but also the validity and sat. the similarities between the design introduced here and the solutions presented in,, and will be highlighted and some conclusions will be extracted from them.



in our case, we have chosen the class of p systems with input and with external output(special objects y es and no will be used to implement the boolean answer). in order to obtain a significant speed-up, we will work in a cellular model using active membranes, and so we are allowed to use membrane division to obtain in polynomial time an exponential workspace. we also impose some restrictions, for instance we want the systems to be confluent(all computations with the same input lead to the same output), also every computation must be finite and, furthermore, we want that the answer is delivered in the last step of the computation, by sending to the environment a special object y es or no.



in the case of p systems with input and with external output, the concept of computation is introduced in a similar way but with a slight variant. we consider that it is not possible to observe the internal processes inside the p system, and we can only know if the computation has halted via some distinguished objects sent out to the environment. we can formalize these ideas in the following way.



if we wanted to perform such a solution of some decision problem in a laboratory, we will find a drawback on this approach: a system constructed to solve a concrete instance is useless when trying to solve another instance. this handicap can be easily overtaken if we consider a p system with input. then, the same system could solve different instances of the problem, provided that the corresponding input multisets are introduced in the input membrane.



we will represent the instances of the problem using tuples of the kind(n,(w1,..., wn)), where n is the size of the set a and(w1,..., wn) is the list of weights of the elements from a. we can define in a natural way an additive function w that corresponds to the data in the instance.



a. indeed, exactly the same two schemes of rules are used for the generation stages in the subset-sum and the knapsack case. here is how these rules work: in each step(according to the index of ei), we consider an element of a and either we add it to the subset associated with the membrane, b, or we put it in the complementary subset, bc. note that a membrane can proceed to the checking stage only after it gets negative charge; a positively charged membrane where the object en appears will get blocked(it will be dissolved, see rules in(i)).



these rules implement the comparison mentioned above(that is, they check whether w(b)= w(bc) holds or not). they work as a loop that erases objects a and p one by one alternatively, changing the charge of the membrane in each step. exactly the same method can be used to compare the multiplicities of whatever two objects of the working alphabet, so again we find rules that might be re-used when attacking other numerical problems.



here we find the first important difference in the design with respect to the ones for subset-sum and knapsack. there counters were used, and the schemes of rules depended on the number of steps that the checking was going to last. but now this number of steps depends on the total weight of the set a, and we cannot use this information if we want an uniform design. however, there are good news: the rules used here can be used also in general, so new versions of the solutions to subset-sum and knapsack using this subroutine can be given.



before the answer is sent out, the system has to make sure that all the relevant membranes have finished their checking stages. to do this, first we wait for 2n+ 1 steps and then we activate the process. this needs to be done in order to make sure that the division process is over, and thus we know that from this moment on, the membranes that finish their checking stage, and only them, will have positive charge(see the rules in(f) and(g) for the end of the checking and note that we get rid of the spare membranes via the rules in(i)).



as we said before, we need to check if all the relevant membranes have finished their checking stages. this is done using the objects g that are present in the skin and the auxiliary membrane labelled by r(see the next set of rules). there must be 2n copies of g, because each relevant membrane sends one, and there is one relevant membrane for each subset of a, that is 2n in all.



finally, the output process is activated. the skin membrane needs to be negatively charged before the answer is sent out. object d2 takes care of this(see the previous set of rules) and then, if the answer is affirmative, an object y es will be sent out recovering the neutral charge for the skin. note that the answer y es has some priority over the negative answer, in the sense that we first check if there is any object y es and then, if it is not the case, the answer no will be sent out. this little trick of changing the electrical charge of the skin membrane and using the auxiliary object no0 is also used in the other two designs, so hopefully this feature can be also saved for future designs.



the generation and calculation stages end in a membrane when it gets negative charge for the first time, and we have at our disposal a witnessobject q that appears in the membrane exactly in that moment. if we want to perform now the comparison between the multiplicities of two objects, we need to rename all the objects in the membrane, to make sure that there does not exist overlaping, i.e. we want to avoid nondeterminism. the renaming step depends strongly on the problem, because the new objects that are needed depend on how many stages we want to perform later on.



the next set of rules is(d). when these two rules are applied iteratively, a loop is created. the charge of the membrane changes from negative to neutral and back to negative in every loop, until one of the two objects that are being used is exhausted and the loop halts.



observe that this time the scheme of rules does not depend on n, we just compare the number of occurrences of two objects, obj1 and obj2. the names of this objects can be customized, as well as the two charges that are used. we can again recall the design of the knapsack in as an example, because two checking stages were carried out there, with different objects and different charges, but the same changing-charge-loop design.



in this case, a division process is carried out at the beginning of the process to generate one membrane for each possible truth assignment of the n variables appearing in the formula. there, the electrical charges of the membranes in each step are meaningful, because they determine whether a variable will be assigned a true value or a false value. this strategy is very close to the one used in our generation stage.



to check that all the clauses are satisfied, instead of comparing the multiplicities of two objects. however, the method that is used to control when the checking stage ends is a counter in the skin, and this is also used for the numerical problems. also the answering process is very similar, the object y es gets some priority over the object no by means of a counter and of the electric charge of the skin membrane.



up to now, the idea of a programming language has not been deeply discussed in the membrane computing area, but actually it is not hard to find some similarities between different designs conceived for different purposes. the use of the changes in the polarization(used in every design within the active membrane framework), the technique of working with indexed objects and making a rotation on the indexes(already used in, section 7.2, and later on by many other authors), the use of renaming rules in order to inhibit the evolution of an object until a specific instant in the computation(e.g., in and), and, of course, the use of counters(an indexed object that increases its index up to a certain value and then transforms into something different, see again), among others. it is worth mentioning two examples of applying these strategies to the design of solutions for other numerical np-complete problems: the multidimensional knapsack problem in and the bin packing problem in.



