in recent years, efforts to verify correctness of windows kernel drivers have emerged as it is crucial for stability of the whole operating system. microsoft itself has developed several tools for driver verification including the latest static driver verifier model checker. the key to successful application of the model checking approach in this area is a reasonable choice of the environment model. however, the environment models used in current tools are too(1) non-deterministic, degrading preciseness of the model checker reports, and(2) oversimplified, loosing the ability to check more specific kinds of properties of drivers. on the other hand, neither a formal or readable specification usable for documentation purposes is provided by these models. this paper targets these issues by introducing a new language for formal specification and modeling of kernel drivers and their environment.



windows kernel drivers are relatively small libraries usually written in the c language. they run in a privileged mode that enables them to work directly with hardware. this introduces a high risk of damaging other parts of the kernel if a driver contains an error. hence the correctness of drivers is crucial for security and stability of an operating system and drivers are common subject of software verification.



the rest of the paper is laid out as follows. section 2 briefly describes the windows kernel environment from a point of view of the driver verification. section 3 introduces the despec language, explains its part on an example and describes how a model extractor should work with despec specifications. section 4 discusses related work and section 5 concludes.



tures). it is designed as a bridge between constructs of the c language and their models in the zing language. in particular the models of pointers, function pointers, unions and other constructs that are not directly expressible in the zing language are hidden behind the syntax of despec language. this allows to adjust models for these features without a need to rewrite the specifications.



apparently, some constructs exploiting memory layout, such as reinterpreting casts or unions, cannot be modeled in a feasible way. therefore they are not directly expressible in the despec language. fortunately, the driver as well as environment interface should be as platform independent as possible and thus these constructs should be used rarely.



the despec language is similar to the c# language in its syntactical structure. each source file contains a list of declarations grouped to namespaces. declarations include classes, integer enumerations, integer ranges, method delegates and method groups. a class declaration comprises of its members. apart from fields and methods, which are common for standard object-oriented languages, despec classes can also contain rules. a rule specifies constrains on fields and methods by means of temporal logic patterns. this section briefly describes despec namespaces, classes and rules.



the signature of a method abstracting a kernel function defines how parameters of the function are treated within the specification. the placeholder token(a single underscore) is used for arguments that are not important for the specification. the models of ioattachfunctions do not care about the second parameter. when a specification refers to the ioattachdevice method, only one argument is stated in the list of actual arguments. the instance argument is picked from the argument list out before the method to denote the target instance using the dot notation. arguments on the positions of placeholders are also omitted in the actual argument list. methods declared in example 1 are referred to as follows: used only for the sole purpose of modeling. such fields are marked by the synthetic keyword. similarly, synthetic methods and also synthetic classes can be defined in the specification. in general, despec distinguishes synthetic language elements from non-synthetic ones. note that all elements used in the first example are nonsynthetic. synthetic classes contain no abstractions, particularly no kernel function is mapped to a method of a synthetic class. example of a class containing synthetic attributes follows:



sions. the pattern used in example 3 can be generalized to{p} corresponds to{q} each temporal logic pattern is formed by pattern keywords and pattern expresparts: the property and the scope. in this case, the property is{p} corresponds to globally, where p and q are boolean expressions. each pattern can be split into two



terns of instance rules are implicitly quantified by a variable of the declaring type. instance rules can refer to that variable by using this keyword. this keyword can be omitted when referring to the instance members of the type. unlike bandera, despec allows to quantify over value types(i. e. integers, boolean, enumerations). zing symbolic value types can be used for the implementation. the reference type quantification may be implemented in the same way as in the bandera, however more scalable implementation would be possible using zing symbolic reference types, which should be available in the next version of the zing.



in example 3, the source code event defined by the method(args)::succeeded operator establishes a watchdog for successful returns from the kernel function ioattachdevice. it is triggered by only such function return that the third argument can be unified with the device quantification variable and the function return value means a successful call. the first two arguments could have been arbitrary when the function was called.



once the top-level model is chosen, the model extractor generates zing model of the driver(using its c source code and kernel headers) and combines it with the environment model. since the resulting model is too large to be verified, the slicing[13,10] should take place retaining only those parts transitively referred to by the top-level model and the constrains being verified. as a final result, a zing model of the driver and the related kernel functions and structures are output.



finding errors in drivers is not limited to the model checking technique. microsoft prefast tool for drivers performs static analysis of the source code and searches for common error patterns. it can, for example, find memory leaks incurred by missing function calls, dereferences of null pointers, buffer overruns, kernel functions called on incorrect irql level, and so on. the analysis is function scoped and hence it introduces false negatives and also restricts a set of errors it is able to detect.



