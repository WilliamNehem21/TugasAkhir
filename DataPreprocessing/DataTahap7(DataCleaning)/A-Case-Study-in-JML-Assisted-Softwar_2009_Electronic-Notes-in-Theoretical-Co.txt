jml specifications use java syntax, and are embedded in java code within special marked comments/*@...@*/ or after//@. a simple jml specification for a java class consists of preand post-conditions added to its methods, and class invariants restricting the possible states of class instances. specifications for method preand post-conditions are embedded as comments immediately before method declarations. jml predicates are first-order logic predicates formed of sideeffect free java boolean expressions and several specification-only jml constructs. because of this side-effect restriction, java operators like++ and-are not allowed in jml specifications. jml provides notations for forward and backward logical signals(e e) r. specifies an exceptional method post-condition r. it says that if the method throws an exception e of type e, a subtype of java.lang.exception, then the jml predicate r must hold. predicate r is a valid jml predicate. jml allows the use of the alternative clause exsures for signals.



assignable l. specifies that the method may only modify location l. any other location not listed in l may therefore not be modified. this must be true for both normal and exceptional post-conditions. two special assignable specifications exist, assignable\nothing, which specifies that the method modifies no location, and assignable\everything, which specifies that the method may modify any location. jml allows the use of the alternative clauses modifies and modifiable for assignable.



invariant i. declares a class invariant i. in jml, class invariants must be established by the class constructors, and must hold after any public method is called. invariants can temporally be broken inside methods, but must be re-established before returning from them.



the normal behavior specification for method setvalue says that if v is nonnegative then the method will terminate normally, the new value for decimal will be v* precision, and the value returned by the method will be the object this. the exceptional behavior specification for method setvalue states that if v is negative, the method will throw an exception of type decimalexception and no location will be modified. the keyword also expresses that setvalue can have either a normal or an exceptional behavior.



we tested the specifications for the ax-lims project manager plugin by using the jml common tools. the jml common tools is a suite of tools providing support to run-time assertion checking of jml-specified java programs. the suite includes jmlc, jmlunit and jmlrac. the jmlc tool compiles jml-specified java programs into a java bytecode that includes instructions for checking jml specifications at run-time. the jmlunit tool generates junit unit tests code from jml specifications and uses jml specifications processed by jmlc to determine whether the code being tested is correct. test drivers are run by using the jmlrac tool, a modified version of the java command that refers to appropriate run-time assertion checking libraries. for the case study presented in this paper, we provided jml specifications for the main classes of the ax-lims project manager plugin, however some classes regarding the graphical user interface(gui) were not specified. we used jmlunit to generate junit tests for each method in every class and jmlrac to run the tests.



precondition property and that it follows from other properties of the specification, e.g., a class invariant stating that t!= null exists. redundant properties serve to bring them to the attention of the readers of the specification and the people working in the implementation of the application.



thinking about invariants prior to writing code is a practice to which programmers do not easily adhere. having a previous formal specification of the application and systematically using a tool for checking the correctness of the code as it is written forces programmers to think about how the written code affects the consistency and the correctness of the whole program. we present below a correct implementation for the method settasks. the implementation relies on method deltask for removing the current project tasks and addtask for adding the new tasks. the correctness of the implementation of settasks depends on the correctness of the implementation of both deltask and addtask, e.g., for re-establishing the state of the project each time a task is deleted or added.



we can further use jml for checking insight on how method setasd works in some particular cases. to do this, we use the jml assert specification construct, which checks for satisfaction of a predicate at a dedicated point within a method. for instance, we are interested in knowing what the state of a project would be if setasd is called with an empty list of tasks. we assert the specification below immediately before the end of method settasks. jml reports errors for any value of _state other than state.unresolved.



therefore, besides assigning a value to asd, method setasd must also set the project state accordingly. after several iterations of specifying and checking, we came up with an appropriate jml code for setting the project state. the jml specification code is shown below together with the actual java code. the java predicate expression c? s: t returns s if the evaluation of c is true, otherwise it returns t. we use the set command of jml for setting the ghost variable _state.



in previous software developments carried out by the parquesoft engineers, ocl(object constraint language) was used for expressing constraints on the uml models. however, for this case study, the parquesoft engineers decided to use jml for expressing these constraints instead. the parquesoft engineers found jml specifications much easier to code than ocl constraints. jml will therefore be used as the language for expressing model constraint in future parquesoft javabased software developments.



