replacing pieces of component-based systems carries a serious risk on the expected stability. substitutability of components must then be carefully identified. with this intent, this paper presents a process to evaluate replacement components by complementing the conventional compatibility analysis with component testing criteria. functions of data transformation encapsulated by components(i.e. their behaviour) are analysed according to the observability testing metric. for a component under substitution, a component behaviour test suite is built to be later applied on candidate replacement components. this approach is also known as back-to-back testing. the whole process is currently supported through the tool testooj, which is focused on testing java components.



maintenance of component-based systems involves replacing existing pieces with upgrades or new components. this implies a serious risk on the stability of functioning systems[15,27]. substitutability is then an important challenge due to the evolutive nature of software and the impact of changes. whether there can be a certain control on versions of a component, under successive releases changes may spread across most of the codified functions and structures producing a massive difference with respect to the original component. this is even harder when components are acquired from different vendors, where system integrators cannot control deployment, and cannot be sure if the same environment(e.g. compiler, and compiling options) were used on components that are supposed to be alike. this even applies to successive releases[20,4].



the main concern for an integrator is therefore identifying if new releases or new acquired components can safely replace pieces from a component-based system already deployed and in-use. with that intent, this paper presents a process for evaluating component replaceability. the proposal complements the conventional compatibility analysis by means of black box testing coverage criteria. the central idea is to observe the operational behaviour of a component(i.e. its output as a known testing frameworks like junit and mujava[17,22], from where the component behaviour ts is easily validated in the development phase and later effectively executed against candidate components to analyse compatibility. a.net version of the same tool has been partially implemented as well, and will be updated to include support for the remainder phases of the process.



the paper is organised as follows. section 2 presents an overview of the whole approach. section 3 describes aspects of the component behaviour ts. section 4 presents the evaluation of interface compatibility which is done at a syntactic level before the testing-based evaluation. section 5 describes the testing-based behaviour compatibility analysis. section 6 presents results of an experiment. section 7 presents some related work. conclusions and future work are presented afterwards.



1st phase. a ts is generated with the purpose to represent behavioural aspects of a component c. this ts complies with certain criteria which help describing different facets of interactions of component c with others components into a software system. notice that the goal of such ts is not to find faults but to represent behaviour. this will be fully explained in section 3.



the approach can also be understood from the point of view of the technique called back-to-back testing, which makes use of a reference implementation for a component(i.e. c) to generate a ts to exercise both a unit under test(i.e. k) and the reference implementation. then results from the reference component help to judge the correctness of the unit under test.



the goal of this ts is to check that a candidate component k coincides on behaviour with a given original component c. therefore, each test case in ts will consist of a set of calls to services of c, from where the testing results are saved in a repository for determining acceptance or refusal when the ts is applied against component k. following we list some relevant component coverage notions, to then explain the strategy for their implementation on the approach.



each combination becomes a test case, in the form of a testing method inside a test driver file. for jcalculator, 468 test cases were generated into a class called junitjcalculator. after this the ts is validated against jcalculator, where testooj launches the junit tool and iterating through the test cases. they



in an object-oriented framework like java, there exists a set of methods that are inherited from the object class. in some cases, though not often, those methods may help finding matching when some of them are conveniently overridden. thus, the option could be to omit those methods in a first try. in case no match is found for a given component service, such object methods could then be considered to observe the results of the matching procedure.



this phase may not only give a differentiation from syntactic similar services, but mainly assures that interface correspondences also match at the semantic level. thus the purpose is finding services from a candidate replacement k that expose a similar behaviour with respect to the original component c. in this approach, this implies to exercise the component behaviour ts, generated in the first phase of the process, against k.



the wrapping approach thus makes use of concerns from interface mutation[12,6] by applying operators to change service invocations and also to change parameter values. the former is done through the list of matching services. the later, by varying arguments on parameters with the same type. nevertheless, the amount of correspondences can be reduced by taking the highest compatibility level



in summary, the total amount of wrappers is the result from a product of all services from c which have more than one correspondence to k services and those who have parameter correspondences. when the size of w is too high, a system integrator may decide to manually set the correspondences to build only one wrapper, based on the knowledge provided by the interface compatibility. for this the testooj tool provides ad-hoc utilities. in case no success is obtained with the generated wrapper, another correspondences could be applied, or even decide to change to an automatic building of a bigger set of wrappers.



whether hypothetically the generated wrappers would give unsuccessful results, the next option would be among the combinations of parameters for those whose type is identical. since 4 services involve two alike parameters and 3 others involve six alike parameters, the amount of wrappers by considering that option can actually grow to 3456. this means a major saving in effort has been achieved.



