action systems provide a formal approach to modelling parallel and reactive systems. they have a well established theory of refinement supported by simulation-based proof rules. this paper introduces an automatic approach for verifying action system refinements utilising standard ctl model checking. to do this, we encode each of the simulation conditions as a simulation machine, a kripke structure on which the proof obligation can be discharged by checking that an associated ctl property holds. this procedure transforms each simulation condition into a model checking problem. each simulation condition can then be model checked in isolation, or, if desired, together with the other simulation conditions by combining the simulation machines and the ctl properties.



the need for tools to support refinement is well recognised. without such support, refinement is impractical for all but the most critical systems. traditionally, such tool support has been based on interactive theorem provers. this includes explicit support for action systems, as well as the refinement calculus. more recently, advances in automatic verification technologies, including decision procedures and model checking, has seen steps towards fully automatic approaches to verifying refinements[11,6,12]. in particular, smith and derrick show how the simulation proof obligations for z refinement can be encoded in a standard model checker.



in this paper, we adopt a similar approach for the more general action system refinement: rather than encoding the abstract and concrete systems directly into the model checker, we encode each simulation condition as a kripke structure, or total state transition system, referred to as a simulation machine together with a property formalised in the branching-time temporal logic ctl. this is done in such a way that the proof obligation holds exactly when the ctl property holds for the simulation machine. the latter can be automatically verified using a ctl model checker. this approach avoids the need to build the entire state space of both systems in most cases, and simplifies the properties that need to be checked. the paper is organised as follows: in section 2 we provide as preliminaries an overview of action systems and action system refinement as well as a brief introduction to the temporal logic ctl. in section 3 we discuss ways of representing the action system simulation conditions as a model checking problem and present our approach. in section 4 we illustrate our approach through a case study and its encoding in the input notation of the sal model checking tools. we conclude



action systems are a formalism for modelling parallel and reactive systems. an action system model describes a machine consisting of an initialisation and a set of actions, each of which is a guarded command(comprising a guard, which enables the action when satisfied, and a statement). the actions are repeatedly executed until none of the actions are enabled and the machine terminates.



ctl is a branching time temporal logic which is defined with respect to kripke structures. a kripke structure is a state transition system with a total transition relation. let m be a kripke structure and v a set of atomic propositions. a labelling function l maps each state in m to the set of atomic proposition that is satisfied in the state. a valid ctl formula is related to a state s in m, i.e., it is a state formula which is built from state and path formulas:



that is, the actions of a and c are interleaved in the combined system and only affect the part of the state corresponding to that of their original system. where necessary local variables are systematically renamed to avoid name clashes. also, skip transitions, i.e., transitions that do not change the state, are added to any states in which no actions are enabled, making the system a kripke structure with a total transition relation(a necessary precondition for model checking).



to capture such properties in ctl, we first add an additional action to our combined system that enables us to reinitialise the abstract state. this action is always enabled. we then add an auxiliary variable act with values cstutt, astutt, cchange, achange, ainit and none to record that the last action that took place was a concrete stuttering action, an abstract stuttering action, a concrete change action, an abstract change action, the abstract state initialisation action, or no action(only true on initialisation), respectively. simulation condition(1) can then be expressed as follows: tialised). both values would be updated by actions in ac corresponding to their intended meaning. in particular, both values would be set to false if any change action occurred. additionally, the auxiliary variables become part of the guards of actions in ac. that is, we restrict the behaviour of ac to those behaviours that allow us to prove simulation condition(1).



systems ac(it captures only a controlled subset of this behaviour), yet still allows us to discharge the proof obligation of the simulation condition. we refer to such a simplified transition system for checking a simulation proof obligation as a simulation machine. in the rest of this section, we provide a more precise description of simulation machines and present the simulation machines for checking each condition of forward simulation to verify action system refinements.



they include skip transitions in all phases that can only be exited by the occurrence of actions of the abstract and concrete systems. this ensures the machine is a kripke structure: in any state it can either exit the state or skip. the ctl properties must cater for these skip actions.



the simulation machine is initialised to states in which r holds. to check whether infinite concrete stuttering is possible, we only allow concrete stuttering steps in the initial phase and have a skip transition to a second phase to ensure totality. if it is possible to stay in the first phase, infinite concrete stuttering is possible.



the second phase is used to test for infinite abstract stuttering. it only allows abstract stuttering steps and can be exited by a skip transition back to the first phase. if it is possible to stay in the second phase, infinite abstract stuttering is possible. the simulation machine is shown below.



that is, if(r holds and) it is possible to always stay in phase p= 5, i.e., perform an infinite number of concrete stuttering actions, then either the abstract part of the state is an aborting state, or it is possible to enter and stay in phase p= 6, i.e., perform an infinite number of abstract stuttering actions.



the encoded actions of the abstract and concrete systems are then combined using the sal choice operator[]. refinement relation r as well as all predicates used in the ctl properties(i.e., aaborting, aterminating, cinit, caborting, and cterminating) are encoded as definitions over the state variables of the system. at any phase of the simulation machine they can be evaluated to either true or false, e.g.,



the property associated with the simulation machine for the complete forward simulation refinement check for this case study could be checked to be valid. the checking process terminated in 3.55 seconds on a pc with a 3ghz intel pentium 4 processor and 512mb of ram.



we are interested in extending the applicability of this work in two ways. firstly, we have only considered forward simulation. this is by far the most common form of refinement, but for completeness we would like to extend our work to also cover backward simulation. secondly, we are restricted to systems whose types are finite and not too large; otherwise model checking becomes infeasible. these limitations can be lifted, however, by utilising recent advances in the model checking field, e.g., automatic predicate abstraction or bounded model checking. we are particularly interested in looking at the former, and using the fact that the system structure(in terms of phases) and property we wish to prove are fixed, to simplify the abstraction process.



