in this paper we give a graph-based decision procedure for a calculus with sum and product types. although our motivation comes from the bird-meertens approach to reasoning algebraically about functional programs, the language used here can be seen as the internal language of a category with binary products and coproducts. as such, the decision procedure presented has independent interest.



a node is a triple(s, i, o) where s is a symbol with arity as and co-arity cs, i is a set of input ports, and o is a set of output ports such that the number of elements of i(resp. o) is as(resp. cs).



in this section we introduce informally the graph-rewriting system and the difficulties involved in its definition. the system will then be formally defined in the next section, and its properties studied. here we consider in turn the treatment of fusion and cancellation.



note that the application of rule dupm-choice removes the ground duplicator needed to close the fusion started on the left-hand side sub-net. in fact, this is exactly the pattern of divergence that rule dupm-dupm avoids by restricting the top duplicator to be ground. this shows that indices should also restrict the application of rule dupm-choice.



a local graph-rewriting system will now be given for sum-product nets, based on the ideas discussed informally in the previous section. we first need to establish an appropriate notion of graph-rewriting rule: both the left-hand side(lhs) and the right-hand side(rhs) of the rule are finite nets, with the same sets of input and output ports(in other words the rule preserves the interface of the net). moreover both the lhs and rhs nets are well-typed and well-formed, the rule preserves type and position labellings of the inputs and outputs, and does not introduce cycles.



definition 6.3 let n be a single input, n-output net and a a two-input, singleoutput node. we define join(a, n) as the two-input, n-output net composed of two copies of n and n copies of a(say ai) where the inputs of the net are the inputs of each copy of n, the ith output of the first(resp. second) copy of n is connected to the first(resp. second) input of ai, and the ith-output of the net is the output of ai.



proof. indices are adjusted during reduction in accordance with well-formedness. on the other hand, rules for indexed nodes are such that they do not constrain interaction when the indices are non-zero. this means that an indexed node can only survive in a normal form if:(i) it reaches the top of the net; or(ii) it gets stuck in a commutation that is not possible. the well-formedness criterion guarantees that



for sum-product nets in general the read-back can be generalized as taking a vector of n inputs and producing a vector of m outputs(both indexed from left to right), rx(n)= y1,..., ym where x= x1,..., xn.



