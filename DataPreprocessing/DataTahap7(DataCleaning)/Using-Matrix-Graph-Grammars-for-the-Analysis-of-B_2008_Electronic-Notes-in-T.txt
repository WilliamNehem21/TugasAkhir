in this paper we present a new approach for the analysis of rule-based specification of system dynamics. we model system states as simple digraphs, which can be represented with boolean matrices. rules modelling the different state changes of the system can also be represented with boolean matrices, and therefore the rewriting is expressed using boolean operations only.



simulation, to express and analyse refactorings or re-designs, or for model-tomodel transformations. the main advantages of graph grammars with respect to other behavioural specification techniques is that they are a visual, formal and declarative means to express transformations of different kinds of graphs. different formalizations provide analysis techniques e.g. to study rule independence, confluence or termination(partially)[4,5,11]. the most popular formalizations are based on category theory and include the single and double pushout[2,4](spo and dpo).



completion. in order to operate graphs of different sizes, an operation called completion adds extra rows and columns with zeros(to matrices and vectors) and rearranges rows and columns so that the identified edges and nodes of the two graphs match. in the examples, we omit such operation, but assume that matrices are completed when necessary. later we will operate with the matrices of different productions, which means that we have to select the elements(nodes and edges) of each production which get identified to the same element in the host graph. thus the completion has to preserve such identifications.



herent if we identify both operators and machines. therefore, we need two different machines and two operators, one machine can consume the generated piece, while a different piece is needed for the other machine. for the case of three productions, the formula for the mid expands to m3=(r1l1) v(r1l2)(r2l2) v(r1l3)(r2l3)(r3l3).



note the close similarity with local confluence. the problem can be easily extended to consider any finite number of derivations. again, our objective is to characterize under which circumstances, depending on the permutation applied and on the definition of the grammar(which includes both grammar rules and the host graph), it is possible to conclude that their final states are isomorphic.



in order to calculate m0 in prop. 6.1 it is possible to follow two complementary approaches: either we start by the maximal initial digraph or by different minimal elements in the initial digraph set. in the first case the following identity may be of some help:



for the maximal initial digraph m, every element is different across productions in derivations. let all elements(except those already known) be represented by variables in m and use a sat solver on(4) to obtain conditions. the same can be applied to the negative intial digraph to guarantee applicability.



through composition means that the concatenation with length greater than one must be transformed into a single production using composition. this is possible because it is coherent and compatible(see prop. 3.6). in fact it would not be necessary to transform the whole concatenation using composition, but only the parts that present a problem.



with respect to composition, note that we identify accross rules the elements through which composition is performed. this is similar to the concurrency theorem. non-injective matches in dpo allow identifying different elements in a parallel rule, while we have to decide such identification before calculating the composition.



with respect to other similar approaches to matrix graph grammars, in the dpo approach was implemented using mathematica. in that work,(simple) digraphs were represented with their boolean adjacency matrices. this is the only similarity with our work, as our goal is to develop a theory for(simple) graph rewriting based on boolean matrix algebra. other somehow related work is the relational approaches of and. however, they rely on category theory for expressing the rewriting.



