this paper is about testability analysis for data-flow software. we describe an application of the satan method, which allows testability of data-flow designs to be measured, to analyze testability of the source code of critical data-flow software, such as avionics software. we first propose the transformation of the source code generated from data-flow designs into the static single assignment(ssa) form; then we describe the algorithm to automatically translate the ssa form into a testability model. thus, analyzing the testability model can allow the detection of the software parts which induce a testability weakness.



in the software development process, the validation and verification phases play an important role, in which testing is a crucial task. during this task, faults must be revealed. however, testing increases the reliability of the software, it never can ensure that there are no faults in the software. in addition, when the software is rather complex, the testing task is time consuming and highly costly. this is why some testability metrics have been studied these last years in order to help in appraising the ease/difficulty for testing software.



the paper is organized as follows. section 2 is about some related work. section 3 briefly presents the principles of the satan tool which allows the testability analysis of data-flow designs. section 4 presents the extension of the satan tool to analyze code testability. an algorithm is described in section 5 to automatically compute testability measures. section 6 presents a case study. finally, we give our conclusion in section 7.



input and output domains. voas and miller also proposed testability metrics based on the input and output domains of a software component. both these methods allow the measurement of testability at component level by analyzing functional specifications; they can be used to rank components with respect to testability.



in the satan tool, testability of software is based on the controllability and the observability of the software components. controllability is defined as the ease to forward data from the inputs of the software to the inputs of a component. observability is defined as the ease to propagate data from the outputs of a component to the observable outputs of the software.



the principle of modeling the information transfers through software consists of representing the control and data-flow aspects on a same graph that is called the information transfer graph(itg). it is a bipartite directed graph without cycles. this model is defined by places, transitions and edges. the places are:



the itg is used to identify information paths, which are called flows, throughout the software. a flow is an information path from some inputs to one or some outputs. it contains a set of places, transitions, and edges. thus, a flow can be considered as a sub-graph; it is an elementary function that can be independently exercised from the remainder of the software, since it computes the output variables from the inputs variables.



once the set of flows is identified, it is used to determine the set of test objectives according to a test strategy. a test strategy is an ordered set of flows which must be exercised through the software. a test strategy corresponds to a test data selection criterion. the selection criterion is to cover every module in the model at least once by executing the selected flows.



two test strategies are used in satan: progressive structural strategy(start-small) and cross-checking strategy(multiple-clue). the cross-checking strategy is based on choosing a subset of flows that satisfy coverage of all the modules: all chosen flows are exercised, possible information of fault is collected, and diagnostic is analyzed on this information. this strategy is effective in the case of simple faults(only one module is defective). the progressive structural strategy is based on a gradual coverage of the modules by choosing flows with an increasing complexity in terms of the number of covered modules, and a new flow is tested only if faults detected in previous flow are corrected; a minimum subset of flows is chosen so that all the modules are covered. this strategy is effective in the case of multiple faults(several modules are defective). moreover, we recently proposed an improvement of the effectiveness of both these strategies by using some accessibility measures in.



as our goal is to apply the satan tool for analyzing the testability of the code source, we use the ssa form(static single assignment) to translate code into a data-flow representation. this ssa form has been principally used as a platform for various classical code optimization algorithms in compilation techniques. the testability analysis is based on the ssa form.



from a ssa form we can construct the corresponding itg. then, to use the satan tool to compute testability measures, i.e. controllability and observability measures, we must associate each module of itg with a capacity. this module capacity allows appraising the information loss through the module. an itg with module capacities is called information transfer net(itn).



in this process, a c program is first translated into the ssa form by the gcc compiler. then, the ssa form is translated into the itg. each module of itg is associated with its capacity to produce the itn. finally, the satan tool computes testability measures from the itn.



once we obtain an itg from the ssa form, we need to transform the itg into an itn by adding all module capacities. as we told above, a module capacity is the information quantity that is available on the module outputs from its inputs. so, we first determine the types of the inputs and outputs of each module in itg. then, capacities will be evaluated for all the modules. finally, the itn is constructed from the itg and the module capacities. this translator is given as follows:



in this diagram, bary c is a computation component; copyi is to assign a value to an output; compi is a comparison component; or is a logical component; subi and mu ltj are respectively the subtraction and multiplication components; swit ch is a selection component; and preci is a memorization component. the diagram has several inputs and outputs. in particular, two outputs btgyrononv and tgyrononv form a couple: the boolean value of btgyrononv determines whether the value of tgyro nonv is valid. this diagram is designed for a piece of the avionics software used at thales avionics.



in this itg, the satan tool identifies 12 flows. then it also computes testability measures of each module in each flow. one module can have different values of testability in different flows. so, a fine analysis can be done by examining testability of each module in each flow, then all modules with low testability will be identified. the testability of such the modules should be improved, or they must be carefully tested.



we now analyze the code generated by the gala tool from diagram sub-tht. as the code contains more details than the diagram, so the itg obtained from the code contains more elements(modules, transitions, edges) than the one obtained from the diagram. here, we do not present the itg because of limited presentation space. the satan tool identifies 42 flows in the itg. the number of flows from code analysis is increased with respect to the number



relating to measures, among 42 flows, 20 flows have the testability(1.0, 1.0), and 22 others have the testability(1.0, 0.0833). comparing the measures obtained from two levels of analysis, we state that they are very similar. hence, we can say the coding process does not have impact on the testability. however, some modules should be reviewed to improve the observability measures.



