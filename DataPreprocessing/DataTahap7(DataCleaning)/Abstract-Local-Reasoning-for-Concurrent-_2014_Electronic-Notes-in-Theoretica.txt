we study abstract local reasoning for concurrent libraries. there are two main approaches: provide a specification of a library by abstracting from concrete reasoning about an implementation; or provide a direct abstract library specification, justified by refining to an implementation. both approaches have a significant gap in their reasoning, due to a mismatch between the abstract connectivity of the abstract data structures and the concrete connectivity of the concrete heap representations. we demonstrate this gap using structural separation logic(ssl) for specifying a concurrent tree library and concurrent abstract predicates(cap) for reasoning about a concrete tree implementation. the gap between the abstract and concrete connectivity emerges as a mismatch between the ssl tree predicates and cap heap predicates. this gap is closed by an interface function i which links the abstract and concrete connectivity. in the accompanying technical report, we generalise our ssl reasoning and results to arbitrary concurrent data libraries.



ssl supports reasoning about fine-grained abstract data fragments stored in abstract heaps. abstract heaps contain cells identified by abstract addresses(e.g. address x) whose values are the disjoint data fragments. these data fragments contain context holes, also given by abstract addresses, which are place holders for the data fragments found at the appropriate abstract cells. for example, the ssl predicate atree(t)(x) describes a tree cell with abstract address x containing tree context t. we can split(abstractly allocate) this predicate to obtain the



structural separation logic(ssl) is a general program logic for specifying structured data libraries and reasoning locally about client programs which call such libraries. here, we give the intuition and technical details of ssl using an abstract tree library. we give the general theory of ssl in the accompanying technical report. further details, including a wide number of examples, can be found in.



we give our axiomatic ssl specification of a simple deletetree(n) command. intuitively, this command removes the entire subtree whose top node identifier corresponds to the value of variable n, leaving the rest of the tree unchanged. we formalise this english description using assertions which describe abstract heaps.



as parameters are not present in the tree. additionally, the appendchild(m,n) command faults if m is a descendant of n. these commands are intended to be used with any programming language. in this paper, we use the programming language of the views framework instantiated with atomt as the set of atomic commands. we write progt to denote the set of programs written in this language.



to reason about our tree programs, we use the program logic of the views framework as described in. we instantiate the framework with the separation algebra of abstract tree states(def. 2.6) as the view monoid and the tree library commands(def. 2.1) as the atomic commands. what remains is to describe the axioms associated with the tree library commands(def. 2.7).



the technical details of the views framework uses a labelled transition system to describe transitions between states. transitions are labelled either by atomic commands or by id which labels computation steps in which states are not changed. we extend the behaviour of the id transitions of views by declaring the relation axiomid for abstract allocation/deallocation. abstract(de)allocation does not change the underlying program states and can therefore be seen as id transitions.



concurrent abstract predicates with cap, the state is modelled as a pair consisting of a thread-local state and a shared state. the shared state is divided into a set of regions, each encompassing some shared portion of the state. each region is identified by a region identifier r and is governed by a protocol that describes how the resources of the region can be manipulated. for instance, a lock resource at location x can be specified by:



the definition of the cap separation algebra is given in[1,6]. it provides a set of instrumented states mh consisting of a local state, a shared state and an action relation capturing the ways in which the shared state can be manipulated. the definition is parametrised by an underlying separation algebra for describing the local state. for this paper, we work with the cap separation algebra instantiated with the standard fractional heap separation algebra.



lwit(l, n, u) since the left pointer lock of n can only be be acquired by the thread in possession of node n, or node l(or node u if n is the first child of u and does not have a left sibling), the lwit predicate is used to track the identity of the locking thread. recall from the definition of the left predicate that the full witness capability[w]rnl is held by the thread that owns node n, as described by ownsr(n, l, u, 1). we thus use the witness capabilities to determine the identity of the locking thread. the first disjunct denotes the case where the lock has been claimed by the thread in possession of node n and corresponds to the witness capability on this region(ownsr(n, l, u, 0.5)). analogously, the second disjunct represents the case where the thread in possession of node l has acquired the lock, denoted by(ownsr(n, l, u, 0.5)). the third disjunct captures the case where n does not have a left sibling and the lock has been taken by the thread that owns the parent node u(ownsd(u, n, 0.5)).



in the accompanying technical report, we generalise this approach to translate arbitrary abstract libraries, and stipulate a set of general properties that when satisfied, will warrant sound translation of any abstract library. these properties are stated for our specific library translation in theorem 4.9.



