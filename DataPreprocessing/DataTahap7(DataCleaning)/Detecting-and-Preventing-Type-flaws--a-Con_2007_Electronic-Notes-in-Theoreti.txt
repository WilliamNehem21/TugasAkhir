a type flaw attack on a security protocol is an attack where an honest principal is cheated on interpreting a field in a message as the one with a type other than the intended one. in this paper, we shall present an extension of the lysa calculus with tags attached to each field, indicating the intended types. we developed a control flow analysis for analysing the extended lysa, which over-approximates all the possible behaviour of a protocol and hence is able to capture any type confusion that may happen during the protocol execution. the control flow analysis has been applied to a number of security protocols, either subject to type flaw attacks or not. the results show that it is able to capture type flaw attacks on those security protocols.



the paper is organised as follows. in section 2, we present the lysa calculus with tags for type flaw attacks, both the syntax and semantics are defined. we introduce the control flow analysis in section 3, which captures any type-mismatching that may happen. in section 4, we show how the control flow analysis works on two example protocols that are subject to type flaw attacks. in section 5, we conclude with an assessment of our approach and a comparison with related work.



the distinction is obtained by means of syntax: the definition occurrence of a variable x is denoted by qx, while in the scope of the declaration, the variable appears as x. furthermore, this notation distinguishes variables from occurrences of standard terms in tuples of matching terms, by implicitly partitioning them into standard terms or variables. in pattern matching, the first are checked for matching, while the others are bound in case of successful matching(see below).



type tagging we extend the syntax of standard lysa to cope with types, by using tags to represent the types of terms. following, we assume to have a tag for each base type, such as nonce, key, etc. moreover, we assume that the attacker is able to change only the types of terms that he can access. in fact, by making the assumption of perfect cryptography, we have that only cleartext can be altered. attackers can only forge an encryption when possessing the key used to cipher it. actually, we can tag whatever we want, but we only check inside encryptions and decryptions, as shall be shown in section 3.



there are type variables, that are to standard variables such as tags are to closed terms(i.e. terms without variables). similarly to the q-notation, we syntactically distinguish the defining occurrences of type variables(in the form t), from the corresponding use occurrences(in the form t). syntactically, we have the following two new categories, where xt denote sets of applied occurrences of type variables.



i.e. each variable composing each one of the ei has been bound in the previous computations. instead, matching terms mi can be partitioned in closed terms and variables to be bound. intuitively, the matching succeeds when the closed terms, say mi, pairwise match to the corresponding terms ei, and its effect is to bind the remaining terms ej to the remaining variables qxj. to exemplify, consider the following two processes, where only standard terms are present.



a type flaw attack happens when a field in a message is interpreted as having a type other than the originally intended one. in this paper, we extended the syntax of the process calculus, lysa, with tags, which represent the intended types of terms. the semantics of the tagged lysa makes use of a reference monitor to capture type-mismatching at run time.



our analysis can then correspond to a sort of approximate type checking. more specifically, our control flow analysis can be used to 1) detect type flaw attacks: it can be applied in the protocol design stage: once a tagged protocol process is analyzed to be free of type flaw attacks, it can be used untagged while still ensures security; or 2) prevent type flaw attacks: the tags work in a way such that fields with different types cannot be mixed up. therefore, it offers flexibility in satisfying different needs.



lysa has been developed to be decorated by several kinds of annotations and successfully applied for checking different security properties, e.g. confidentiality and freshness. it is very easy to combine tags with those techniques, thus obtaining a more general form of analysis. the core analysis can remain the same: different inspections of a solution permit to check different security properties of a protocol, with no need of re-analysing it several times.



the control flow analysis presented here is designed to capture simple type flaw attacks, i.e. one field is confused with another single field. future work will extends the analysis to deal with more complex ones, as considered in, e.g. when a single field in a message is confused with a concatenation of fields. furthermore, we can think about more complex kinds of tags.



