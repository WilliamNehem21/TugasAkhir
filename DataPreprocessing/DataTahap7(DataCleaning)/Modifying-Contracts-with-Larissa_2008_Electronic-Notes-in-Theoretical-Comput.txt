this paper combines two successful techniques from software engineering, aspect-oriented programming and design-by-contract, and applies them in the context of reactive systems. for the aspect language larissa and contracts expressed with synchronous observers, we show how to apply an aspect asp to a contract c and derive a new contract c', such that for any program p which fulfills c, p with asp fulfills c'. we validate the approach on a medium-sized example.



aspect-oriented programming(aop) offers facilities to a base language which aim at encapsulating crosscutting concerns. these are concerns that cannot be properly captured into a module by the decomposition offered by the base language. aop languages express crosscutting concerns in aspects, and weave(i.e. compile) them in the program with an aspect weaver.



all the aspect extensions of existing languages(like aspectj) share two notions: pointcuts and advice. a pointcut describes, with a general property, the program points(called join points) where the aspect should intervene(e.g., all the methods of the class x, all the methods whose name contains visit, etc.). the advice specifies what has to be done at each join point(execute a piece of code before the normal code of the method, for instance).



most existing aspect languages cannot be used in the context of reactive systems, because they lack the semantic properties needed for formal verification, and the programming languages used for reactive systems are often different from generalpurpose programming languages. therefore, we developed the aspect language larissa as an extension to the synchronous programming language argos. argos is a hierarchical automata language, based on mealy machines. it seems a good candidate as a base language, as it is the simplest language with the parallel structure



design-by-contract is a design principle, originally introduced for object-oriented systems, where a method is specified by a contract. a contract is a specification in form of an implication between an assumption clause and a guarantee clause. a method fulfills its contract if after its execution, the guarantee holds if the assumption was true when the program was called.



contracts have been adapted to reactive systems by. reactive systems constantly receive inputs from their environment, and emit outputs to it. therefore, it seems natural to let assumptions restrict the inputs, and let guarantees ensure properties on the outputs. additionally, what a program is allowed to do often depends to a large extent on previous occurrences of signals. a convenient way to express such temporal properties over input and output traces are observers. an observer is a program that observes the inputs and the outputs of the program, without modifying its behavior, and computes a safety property(in the sense of safety/liveness properties as defined in). observers have a single output err, which is emitted to show that a trace is not accepted. they can be expressed in the same language as the program.



deriving such new contracts appears to be an interesting approach to combine aop and contracts. however, this seems very difficult for contracts for java programs and aspectj, and it is not clear if meaningful contracts could be derived. in this paper, we present a way to derive new contracts for argos programs and larissa aspects. the idea is to apply an aspect asp to a contract c and obtain a new contract c', such that if p fulfills c, then pa asp fulfills c'.



this section presents a restriction of the argos language, and the larissa extension. argos is defined as a set of operators on complete and deterministic input/output automata communicating via boolean signals. the semantics of an argos program is given as a trace semantics that is common to a wide variety of reactive languages.



the core of argos is made of input/output automata, the synchronous product, and the encapsulation. the synchronous product allows to put automata in parallel which synchronize on their common inputs. the encapsulation is the operator that expresses the communication between automata with the synchronous broadcast: if two automata are put in parallel, they can communicate via a signal s. the semantics of an automaton is defined by a set of traces, and the semantics of the operators is given by translating expressions into flat automata.



in aspect oriented languages, the advice expresses the modification applied to the base program. in larissa, we define two types of advice: in the first type, an advice replaces the join point transitions with advice transitions pointing to an existing target states; in the second type, an advice introduces a argos program between the source state of the join point transition and an existing target state. in both cases, target states have to be specified without referring explicitly to state names.



states of the base program p. t is the state of p that would be reached by executing a finite input trace from either the initial state of p, adv is then called toinit advice, or from the source state of the join point transition, adv is then called tocurrent advice. as the base program is deterministic and complete, executing an input trace from any of its states defines exactly one state.



it is sometimes not sufficient to modify single transitions, i.e. to jump to another location in the automaton in only one step. it may be necessary to execute arbitrary code when an aspect is activated. in these cases, we can insert an automaton between the join point and the target state.



consider the mff example from section 1.2. we now want to make the mff re-triggerable, meaning that if an a is emitted during several following instants, the mff continues emitting b. we do this by applying the aspect ret=(pc,



therefore, we transform the observers of the contract first into non-deterministic automata(nda), which produce exactly those traces that the observer accepts. we then weave the aspects into the nda, with a modified definition of the weaving operator. the woven nda are then transformed back into observers. the obtained observers may still be non-deterministic, and are thus determinized.



after weaving an aspect, the assumption must exclude the undefined part of any program which fulfills the contract. therefore, it must reject a trace(by emitting err) as soon as there exists a program for which it cannot predict the behavior. the guarantee, on the other hand, emits err only for traces which cannot be emitted by any program which fulfills the contract. therefore, after weaving an aspect, the new guarantee may only emit err if it is sure that there exists no program that produces the trace.



this paragraph describes the weaving of aspects into contracts in detail, and illustrates it on our running example. first, definition 3.1 defines the transformation of an observer into a nda through two functions, one for guarantee observers and one for assumption observers.



we can now apply an aspect to a nda. however, a trace may lead to several states. thus, for each join point transition, several advice transitions must be created, one for each target state. we only give a definition for toinit advice, but the extension to tocurrent advice and advice programs is straightforward.



existing determinization algorithms can be easily adapted to fulfill these requirements. we do not detail such algorithms here, but instead give conditions the determinization for assumptions and guarantees must fulfill. the new assumption and the new guarantee in the example are already deterministic, thus there is no need to determinize them.



we implement and verify a larger example, taken from the lustre tutorial, a controller of the door of a tramway. the door controller is responsible for opening the door when the tram stops and a passenger wants to leave the tram, and for closing the door when the tram wants to leave the station. doors may also include a gateway, which can be extended to allow passengers in wheelchairs enter and leave the tram.



a model that describes the possible behavior of the physical environment of the controller, i.e. the door and the tramway. these models are expressed as argos observers, and are given in. we then prove that the controller satisfies the contract, and that the contract in the environment never violates the safety property.



an alternative to this modular approach is to verify directly that the sample controller with the aspects does not violate the given safety properties. one disadvantage of the alternative approach is that the woven controller may be much bigger than the woven contract. to illustrate this problem, we verified the safety properties using our implementation. the source code of the door controller example is available at. verifying the woven program takes 11.0 seconds 1. on the other hand, weaving the aspects into the guarantee of the controller contract and verifying against the environment takes 3.7 seconds 1, and verifying that the sample controller verifies the contract and verifying that the environment fulfills the assumption with the aspects takes< 0.5 seconds 1. thus, using this modular approach to verify the safety properties of the controller is significantly faster than verifying the complete program. although the size of the woven controller is not prohibitive in this example, this indicates that larger programs can be verified using the modular approach.



we proposed a way to show exactly how a larissa aspect modifies the contract of a component to which it is applied. this allows us to calculate the effect of an aspect on a specification instead of only on a concrete program. this approach has several advantages. first, aspects can be checked against contracts even if the final implementation is not yet available during development. furthermore, if the base program is changed, the woven program must not be re-verified, as long as the new base program still fulfills the contract. finally, woven programs can be verified modularly, which may allow for larger program to be verified, as indicates the example in section 4.



