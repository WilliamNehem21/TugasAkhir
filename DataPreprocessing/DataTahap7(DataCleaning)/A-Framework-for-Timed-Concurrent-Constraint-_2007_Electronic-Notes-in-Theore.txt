the timed concurrent constraint programming language(tccp in short) was introduced for modeling reactive systems. this language allows one to model in a very intuitive way typical ingredients of these systems such as timeouts, preemptions, etc. however, there is no natural way for modeling other desirable features such as functional computations, for example for calculating arithmetic results. in fact, although it is certainly possible to implement such kind of operations, each single step of the computation takes time in tccp, and avoiding interferences with the intended overall behavior of the(reactive) system is quite involved.



the programming language timed concurrent constraint programming(tccp in short) was introduced by f. de boer et al. in for modeling reactive systems, i.e., concurrent systems which continuously interact with the user(and generally do not terminate). tccp was defined as an extension of the ccp model introduced by



saraswat in, which was ideally thought of as a simple but powerful model for concurrency. the tccp language introduced two main modifications to the original ccp model. on the one hand, an implicit notion of(discrete) time was included in the semantics of tccp. on the other hand, a new conditional agent was introduced, which is able to handle negative information that can be used to model timeouts and preemptions.



in this paper, we propose an extension of tccp for modeling instantaneous functions which allows us to simplify and speed up arithmetic calculations. although it is possible to implement arithmetic functions in tccp, the resulting implementation of such functions is quite far from being intuitive. moreover, these computations consume unspecified amount of time, thus making the synchronization of processes more difficult. for example, a given process might need some data that another process is committed to compute, and this computation might take some time depending on the data size. thus, the calculation might slow down and eventually disorder the overall execution of the system. we illustrate this problem by means of an example in section 3.



the new capability presented here can be used as a new tool for developers from the verification point of view. it is well-known that verifying concurrent systems is highly complex. in the context of tccp, where the synchronization among processes is manually programmed, badly implemented calculations may cause synchronization errors and even mask other communication anomalies which then become more elusive to capture. in such cases, the possibility to perform an independent verification for the reactive and the functional components of the system can be a very helpful facility. external functions written in a functional language can be seen as a specification of tccp function implementations and the programmer can check the implementation of the whole tccp system by using the version with the external functions. assertions which use the external functions can also be introduced in the tccp program, thus automatically verifying that they are satisfied during the program execution.



in section 2 we first introduce the tccp language, then in section 3 we motivate the proposed extension of the language by means of an example. we also provide the semantics for the new construct. in section 4 we illustrate the proposed extensions by means of a representative example(the model of a coffee machine). we discuss how we can use the new features to check tccp programs in section 5. finally, some lines of further work and our conclusions are in section 6.



the tell agent tell(c) adds the(atomic) constraint c to the global store. c must be a constraint from the underlying constraint system.. the semantics of the agent establishes that the constraint c is only available in the following time instant. in other words, the execution of the tell agent takes one instant of time. the choice one of the branches ai among theses whose guard ci is satisfied by the store at that time. when a branch is taken, the execution of the corresponding ai agent starts in the following time instant. this means that also the execution of the choice agent takes one instant of time. if no guard is entailed by the store, then the choice agent suspends. in such cases, it is executed again in the following time instant.



for example, the execution of the agent(goal) mult(3,3,result,sync) instantiates, after a certain amount of time, variable result to 9, and sync to 1, which signals the termination of the process. this particular execution takes 8 instants of time, and what is more important, the time needed to finish a computation directly depends on the input values of the call. a detailed trace of this execution can be found in.



next we explain the most important points in the specification of the coffee machine. the complete code of this program can be found in. first of all, let us recall that streams are used in tccp to record the change of state. each single variable is associated to a stream(implemented as a logical list); that is, each element of the list represents the value of the variable at a given time instant. this allows us to handle imperative variables in the same way as logical lists are used in concurrent logic languages. we write x=[y|z] for denoting a stream x recording the current value y of the considered variable and the stream z of future values of the same variable. streams are also used in tccp as explicit communication channels between tccp agents as illustrated in this section.



the structure of the declaration is as follows: depending on the product chosen by the user(which is recorded in the order stream), the machine checks the stream cash to determine if enough money has been introduced. here we use a function paid to calculate the total amount of money introduced. this function is externally implemented(in curry) by simply adding the values of the different kinds of coins recorded in stream cash.



whenever the total amount is greater than the price of the product, we start the process of supplying the product and(if necessary) returning the change, which depends on the number of coins of each kind the machine has. note that change is again an external function, which represents the number of coins that the machine must return to the user. the following code excerpt shows the implementation of the change function, where price represents the cost of the chosen product, c the number of coins in the case of the machine, and input the coins that have been introduced by the user. the auxiliary function coinsfor calculates the total amount of each kind of coin that the machine will give back to the user.



if an order is initiated and sufficient money has been introduced, then eventually the order is correctly completed(i.e., the product is supplied, the change is correctly returned, the case is consistently updated and the status of the machine is reset); otherwise the machine returns the money.



these function calls in the program can be seen as a means to introduce invariants or assertions along the code. such invariants are checked during system execution, and the execution is interrupted in case one of the assertions is not satisfied. obviously, the invariants should not corrupt the behavior of the original system, and it is the programmer who must take care of the synchronization.



