the rest of the paper is organized as follows. in the next section we explain how the algorithm is able to learn dfa using a particular example. two other examples are presented in section 3. section 4 describes some implementation details. finally, section 5 concludes.



the available application 2 keeps all the answers supplied by the user through the execution. therefore, as we have said before, the user is not asked the same membership query more than once. moreover, the algorithm always builds a new hypothesis automaton which is coherent with previous counterexamples.



a third example finishes this section. the target language is the set of natural numbers that are multiple of 3. remember that to find out if a number is divisible by 3, we must add up all the digits in the number and check if the sum is divisible by 3. for example: the sum of the digits of 12123 is 1+ 2+1+2+3= 9, as 9 is divisible by 3, therefore 12123 is too. the target language can be defined as follows



other features are the option to reset the application at any time and the ability to save the on-screen built automaton to a file recognized by the jflap tool. this last feature is particularly useful in the case the user would like to further use an automaton structure learned through our application. it makes it possible to save an automaton, load it through jflap and then edit it with the various automatarelated tools.



it is still possible for the user to deactivate this function, however. the learning process becomes less efficient this way, but it allows the user to follow an execution closer to the actual learning algorithm: the learning iterations become more clearly separated from each other. it also allows users to experiment with different counterexample inputs of their own, rather than the ones chosen by the program. it is possible to turn this function on and off at any time during the execution through the options menu.



jflap integrates visual and interactive tools allowing users to gain hands-on experience with theoretical concepts. in the case of the learning algorithm, this package makes the interaction of the user with the learner easier. jflap has, among others, the ability of comparing finite automata; transforming nondeterministic finite automata and regular expressions into minimal deterministic finite automata; deciding whether a particular string is recognized by a finite automaton. this means that even the package would allow us to present the learning algorithm interacting directly with jflap itself.



