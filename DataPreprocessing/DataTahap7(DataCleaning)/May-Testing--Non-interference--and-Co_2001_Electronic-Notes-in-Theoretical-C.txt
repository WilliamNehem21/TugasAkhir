this paper uses csp to introduce a characterisation of non-interference in terms of the deductions that may be made about high level processes by low level tests. may testing yields classic noninference, and has a concise formulation in csp. it is preserved by a wider range of composition operators than are normally considered in the context of non-interference, and thus also composes under the operators traditionally studied with non-interference. the csp characterisation of may noninterference also permits some attractive and simple compositionality proofs.



compositionality of non-interference properties is essential for constructing secure systems out of secure components. this argument was made by mccullough as motivation for his definition of restrictiveness,a property which ensures non-interference and which is also preserved by system composition. in the literature, there are a number of formulations of non-interference(see for example[4,8,18,9,2]), which tend to use state machines or event systems as their system models,and which define notions of system composition with respect to the semantic framework they have set up.



independently. often, a will be the intersection of the alphabets of p and q. values are passed between parallel processes by means of synchronisations on the channels,linking an output channel of one to an input channel of another. an interleaving of two processes, p||| q, simply executes p and q concurrently without any communication occurring between them. the abstraction mechanism p\ a describes the process p with all occurrences of a occurring internally in the resulting process. the process stop can perform no events at



where v is the type of the channels in, out. the traces model and trace semantics for the csp operators introduced here is included in appendix a. the traces model is sufficient for the purposes of this paper. more sophis-



is may-ni wrt({h},{l}). any low level view is going to see either an l or just the empty trace; and the possibility of the l cannot be prevented by any high level process. thus no low level test will distinguish any two high level processes. on the other hand,observation of l informs us that h cannot have occurred in that same execution, so it does convey some information about the particular high level activity(i.e. that h has not occurred). conversely, observation of the empty trace does not convey any information about the high level activity.



however, the result for this special case does not hold in general in the presence of high level signals, unless there is no synchronisation on them, as was the case for synchronisation composition given above. the processes given in example 5.6 provide a counterexample here as well.



this paper has formulated a non-interference property, may non-interference and has shown that it is compositional in the sense that it is preserved by a wide range of csp composition operators, including interleaving, synchronising parallel(under certain conditions), restriction, hiding, chaining, and forms of high-low connection. as a result it is also preserved by the external operators typically considered in studies of non-interference: cross product, cascade, and forms of feedback. these results hold both when all events are considered as synchronisations,and when high level outputs are considered as signals that cannot be blocked.



the process p described above allows information about occurrence of the high level event h to be deduced from a low level refusal of l. the may testing characterisation of non-interference presented in this paper is not fine enough to capture this, and in fact the process p is may-ni. however, it is easy to imagine a scenario in which the event l is blocked during an execution, and that this is observed at the low level. it would seem that a formulation of non-interference which is sensitive to refusal information would be of benefit.



the situation is fractionally better with regard to strong must-ni. this counterexample does not hold, because p is not itself strong must-ni. it is currently an open question as to whether or not strong must-ni is preserved by interleaving(let alone general parallel composition).



although both forms of must-ni are initially plausible definitions,it is not clear what they correspond to in an intuitive sense. furthermore, the rather bizarre examples given above seem to indicate that they are not straightforward. when a system is examined for information flow, we are generally concerned with what might leak during a single execution. we do not generally assume that the low level agent has the opportunity to interact with the system, from the same state, as many times as is necessary to exercise all of its possibilities. yet this is the situation encapsulated by must testing. for the kind of property we are concerned with,it would be more appropriate to include some notion of refusal test[13,10] so that the refusal information obtained during a single execution can be accounted for in a semantic model that deals with this directly, perhaps in conjuction with an extended notion of may testing. this is the subject of current research.



