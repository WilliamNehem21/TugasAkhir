in the last decade we have witnessed a dramatic speed-up of sat solvers: problems with thousands of variables are now solved routinely in milliseconds by state-of-the-art sat solvers. this has led to breakthroughs in important areas such as planning and model-checking. motivated by these results, in[1,2,3] we proposed reductions of protocol(in)security problems to satisfiability problems in propositional logic that can be used to effectively find attacks on protocols. we have developed a model-checker, satmc, based on these



outline of the paper. we start in section 2 by presenting, via a well-known authentication protocol, our model with particular emphasis to an optimized intruder model based on the concept of axiom. in section 3 we define the notion of protocol insecurity problem with axioms. section 4 is devoted to the formal description of the automatic compilation of protocol insecurity problems with axioms into a set of propositional satisfiability problems. experimental results and some implementation detail are discussed in section 5. we conclude in section 6 with some final remarks and a discussion of the future work.



facts. in our setting, we assume that the network is controlled by means of the very general dolev-yao intruder. 3 in this model the intruder has the ability to eavesdrop and divert messages as well as that to compose, decompose, encrypt, and decrypt messages(provided the encryption keys are known). finally, he can send those messages to other participants with a false identity. besides this, we make the standard assumptions of perfect cryptography i.e. an encrypted message can be decrypted only by using the appropriate decryption key and of strong typing i.e. agents only accept type-correct messages and therefore type confusion is not allowed. 4



where a and b are the roles involved in the protocol; ka and kb are the public keys of a and b, respectively; and na and nb are nonces 5 generated, respectively, by a and b. notice that, the above high level protocol specification describes a kind of template nspk(a, b, ka, kb,na,nb) parametrized by some free variables 6 appearing in it. a ground instance of the security protocol template represents a session of the protocol. successful execution of the nspk protocol should convince both a and b that they have been talking to each other. the rationale is that only b and a could have formed the appropriate response to the message issued in(1) and in(2), respectively. in fact, a malicious agent i can deceit bob(an instance of b) into believing that he is talking with alice(instance of a) whereas he is talking with i. this is achieved by executing concurrently two sessions nspk(alice, i, ka, ki, na, ni) and nspk(alice, bob, ka, kb, na2, nb) of the protocol and using messages from one session to form messages in the other as illustrated by the following pro-



the fact(1) represents the initial state of the honest agent a that plays the role of initiator in session 1 and knows at the beginning her identity, the identity of intruder(the agent she would like to talk with), her public and private keys, 9 and the intruder public key. facts(2) represent the initial state of the honest agents a and b involved as initiator and responder, respectively, in session 2. facts(3) and(4) state the initial freshness of the nonces nc(n1, 1), nc(n1, 2), and nc(n2, 2). notice that, since we bound the number of parallel sessions also the number of fresh terms to be taken into account in the protocol analyses can be computed and bounded in advance. facts(5) represent the information initially known by the intruder(commonly, in a asymmetric cryptosystem, its identity, its public and private keys as well as the identities of honest agents and their public keys). notice that, according to the standard close world assumption all the facts that do not occur in the set representing the initial state are considered false.



labeled rewrite rules. as mentioned above, labeled rewrite rules over sets of facts are used to specify how the transition system evolves. in particular, we distinguish between rules modeling the behavior of honest agents(so called protocol rules) and rules representing the dolev-yao intruder(so called intruder rules). these rules will be described in the next sections. concerning the notation used, let m 1 and m 2 be messages, then the terms{m 1}m2 and and for each possible set of messages{m1,k,..., mjk,k}(let m be the number of such sets, then k= 1,...,m and jk> 0) from which the dolev-yao intruder would be able to build a message m' that matches(and complies with the type of) m, we add a new rule of the form



techniques for increasing values of k and the propositional formula generated at each step is fed to a state-of-the-art sat solver(chaff, sim, and sato are currently supported). as soon as a satisfiable formula is found, the corresponding model is translated back into a partial order attack which is reported to the user. two encoding techniques are currently implemented in satmc and both have been extended for supporting axioms: the first belongs to the family of so-called linear encodings, the second is the more sophisticated graphplan-based encoding.



we have run our tool against a selection of(flawed) security protocols drawn from the clark/jacob library. for each protocol we have automatically generated, by means of a translator from if into the satmc internal language, two corresponding protocol insecurity problems modeling a scenario with a bounded number of sessions in which the involved principals exchange messages on a channel controlled, respectively, by the dolev-yao intruder and by the optimized dolev-yao intruder. as explained in section 2 the optimization consists in modeling the intruder ability of decomposing messages by means of axioms instead of rules.



