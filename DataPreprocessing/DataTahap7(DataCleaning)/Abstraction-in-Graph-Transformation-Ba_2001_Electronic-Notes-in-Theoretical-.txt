an important application of graph grammars and graph parsing techniques is the de nition of visual languages(vls) and the creation of vl editors. the use of a parser for the analysis of diagrams allows to treat the graphical interface as a kind of extended drawing program; thus the same front-end can be used across a broad spectrum of di erent vls with very little adaption; only the set of allowed vl symbols(boxes, arrows, etc.) must be speci ed. the diagrams are then created by drawing these symbols using\direct manipulation"; the resulting drawings are analyzed by a vl parser to check the correctness of the diagram and create an abstract representation for further processing.



the main advantage of including a parser in a vl editor is that it avoids the necessity for specifying a complete set of structure-based editing operations so that the language-speci c part of the editor is kept as small as possible. this makes it possible to use an\editor generator" in combination with a class library to create editors for complex vls from relatively short and concise syntax descriptions. diagen is such an editor-generator framework, which combines the parsing approach for vl editors with the transformation-oriented approach, because it also allows complex structure-based transformations on the edited diagrams(described as graph transformations on the internal graph model of the diagram).



diagen represents diagrams internally as a labeled hypergraph consisting of\component" and\relation"(hyper) edges. a component edge corresponds to a visual symbol in the actual diagram. every symbol has a number of\connector regions" where it can interact with other components. those connector regions are mapped into hypergraph nodes which the respective component hyperedge attachs to. finally, the syntax description can de ne arbitrary geometric relations between the connector regions(most often containment and intersection) which are mapped into binary relation edges that connect the corresponding nodes.



in the simple case of the example, the asg is almost identical to the rhgm. in general, the rhgm may also contain additional edges that cannot be parsed correctly or groups of edges that are combined into a single asg entity. also, for some uml elements there exist multiple alternative visualizations that lead to di erent rhgm structures, but all of them are derived from the same nonterminal type.



there are several other approaches for generating visual language editors from a formal speci cation. the ones which are based on an abstract graph model(e. g. genged, kogge) automatically come with\built-in" abstract representations. other tools which avoid abstract internal models(e. g. penguins based on constraint multiset grammars) lack this immediate availability of abstract models; they rather have to explicitely create external diagram representations by attribute evaluation.



