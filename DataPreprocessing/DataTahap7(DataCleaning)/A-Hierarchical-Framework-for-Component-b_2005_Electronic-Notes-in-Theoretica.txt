in this paper, we describe a methodology for the design and the development of component-based real-time systems. in our model, a component consists of a set of concurrent real-time threads that communicate by means of synchronous and asynchronous operations. in addition, each component can specify its own local scheduling algorithm. we also discuss the support that must be provided at the operating system level, and present an implementation in the shark operating system.



characterization of the quality of service of a component from a temporal point of view. this characterization is especially useful in the real-time domain, where components consist of concurrent cyclic tasks with temporal constraints(e.g. deadlines). in fact, when we integrate all the components in the final system, we must be able to analyse the schedulability of the system(i.e. to check if the temporal constraints are respected).



lipari, bini and fohler presented a model for real-time concurrent components. a component consists of one or more concurrent real-time threads and it is characterized by a demand function that describes its temporal requirements. the methodology was later extended by lipari and bini. however, in these papers, simplified model is considered in which components can communicate only asynchronously. in this paper, we refine the model of a real-time concurrent component by considering blocking primitives, like synchronized methods. we also present an implementation of these techniques in the real-time operating system shark.



the thread model of concurrent programming is very popular and it is supported by most operating systems. in this model, concurrency is supported at two levels: processes and threads. each process has its own address space and processes communicate mainly exchanging messages by means of operating system primitives. creating a process is an expensive operation because it involves a lot of steps like creating the address space, setting up the file descriptors, etc. moreover, context switch among processes is an expensive operation.



a process can be multi-threaded, i.e. it can consist of several concurrent threads. different threads belonging to the same process share address space, file descriptors, and other resources. since threads belonging to the same process share the address space, the communication is often realized by means of shared data structures protected by mutexes. creating a new thread is far less expensive than creating a new process. also, context switch among threads of the same process is faster. the thread model is supported by all general purpose operating systems because it has a lot of advantages with respect to the pure process models. the designer of a concurrent application can design the application as a set of cooperating threads, simplifying the communication and reducing the overhead of the implementation.



classical hard real-time systems usually consist of periodic or sporadic tasks that tightly cooperate to fulfill the system goal. for efficiency reasons, they communicate mainly through shared memory, and appropriate synchronization mechanisms are used to regulate the access to shared data. since all tasks in the system are designed to cooperate, a global schedulability analysis is done on the whole system to guarantee that the temporal constraints will be respected. there is no need to protect one subset of tasks from the others. therefore, we can assimilate a hard real-time system to a single multi-threaded process where the real-time tasks are modeled by threads.



operating systems we have to take into consideration multi-threaded programming. according to the multi-thread model, in this paper we assume that real-time tasks are implemented as threads, and a classical real-time application as one single multi-thread process. therefore, a real-time application is a process that can be multi-threaded, that is, it can consists of many real-time tasks. in the remainder of the paper, we will use the terms thread and task as synonyms. the same for the terms application and process.



nielse and agha propose to further constraint a component in order to separate the functional specification from the timing constraints. for example, a component is not allowed to specify the scheduling policy, nor priorities or deadlines. the timing constrains are specified separately and verified after integration. in contrast, in our work paper we explicitly allow components to specify their own scheduling policy.



stankovic proposes a tool set called vest that allows the construction and the analysis of component based real-time systems. again, a component is not allowed to specify its own scheduling algorithm. moreover, a failing component can influence the behaviors of all other components in the systems, since there is no temporal isolation between components.



recently, many techniques have been proposed for extending the resource reservation framework to hierarchical scheduling. baruah and lipari in propose the h-cbs algorithm, which permits to compose cbs schedulers at arbitrary levels of the hierarchy. the h-cbs is also able to reclaim the spare time due to tasks that execute less than expected according to the hierarchical structure. however, the only scheduling algorithm permitted at all levels is the edf algorithm. a similar work has been done by saewong et al. in the context of the resource kernels. they propose a schedulability analysis based on the worst-case response time for a local fixed priority scheduler.



this blocking time has to be taken into account for checking the performance of the component. if the blocking time is too long, some deadline could be missed. in the next section, we will briefly describe a methodology for computing such blocking time.



in this section we discuss the basic mechanisms to be provided by the operating system to support our methodology. these mechanisms have been implemented in the shark os, an open source real-time kernel. a brief description of the implementation is given in section 6.



there is no way to solve this problem. if two components interact through synchronized operations, there is no way to separate the temporal behavior of the two. therefore, we need to take this blocking time into account during the integration phase. our analysis is detailed in the next section.



we now apply the methodology described in to compute the server budget qi and the server period pi for each component. actually, there are many possible values for qi and pi. we chose one possible value according to some heuristics. for example, in general it is convenient to assign a period that it the largest possible, to reduce the overhead of context switch.



shark(soft and hard real-time kernel) is an open source real-time operating system designed for modularity and extensibility. it has been developed over the years as a kernel for didactic purposes. the goal is to teach how to implement new scheduling algorithms on a real-time system, and to compare the performance of different scheduling algorithm. for these reasons, shark allows programmers to define their own algorithm.



the structure of shark is based on the concept of module. a module is a small component that provides an interface toward a generic scheduling mechanism and an interface to the threads. every thread, upon creation, is assigned to a module. modules are organized on a pile, and each module is assigned a unique order number.



for each component(application), a dedicated module implements the local scheduling mechanism. each module implements the local scheduling strategy. it communicates with the cbsstar scheduling module to select which thread has to be scheduled when a certain component is selected to execute.



in this paper, we described a methodology for the design and the development of component-based real-time systems. unlike previous proposals, we propose a model of a component consisting of a set of concurrent real-time threads plus their scheduling algorithm. therefore, we can compose components with different temporal constraints and schedulers. after describing the model of the component, we described the support needed at the operating system level. moreover, we present the implementation of this framework on the shark operating system.



