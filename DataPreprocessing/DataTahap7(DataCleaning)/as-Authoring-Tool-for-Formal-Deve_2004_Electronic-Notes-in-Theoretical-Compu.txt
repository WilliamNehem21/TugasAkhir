a first solution that comes to mind consists in writing a latex document. this is how one typically diffuses his results, inserting in places selected pieces of the formal development. this method has obvious drawbacks. the cut and paste process may introduce errors when the formal development had centric to be useful in our context. the users want to use latex for writing, documenting, and publishing their work since a formal development consists of definitions, theorems, and proofs rather than pieces of programs. nevertheless, a starting point is simply putting tex commands within comments as part of the scripts.



the tool must provide high-quality visualization, using notation that is familiar to the reader(e.g., using standard mathematical notation) as well as a user-friendly interface. it also must allow one to present the formal developments using a natural syntax and must avoid whenever possible the use of



finally, to avoid a common source of errors in the translation from the source code to the presentation(typos are always unpleasant but are particularly annoying in the context of certified developments), the tool must allow the automatic importation of the source code(for example the theorems statements, the definitions, etc.) to preserve their correctness. this automatic translation should also make it possible to preserve links, connections, correspondences back and forth between the presentation and the scripts produced, and controlled by the prover.



the target is important. first, for compatibility reasons, we must provide a stand-alone version of the script, where the documentation fragments are inserted in the appropriate comment regions. second, and more importantly, this target is evidence that one can extract from the enriched document the parts which concern the user formal development, this new script must be accepted by the prover afterwards.



our tool is not tightly coupled to a given theorem prover. in the future it should even be an independent tool. however, we begin with a case-study of our formal developments which are mainly done using the coq theorem prover. thus, the presented examples use coq syntax.



the user expects other features as well. for instance, he might want to modify imported fragments to make them more readable or easier to understand. thus, variable renaming, hypotheses reorganization, or other changes at the presentation level should be possible while keeping the formal development correct with respect to the underlying proof assistant. such demands are reasonable since one cannot expect any automatic generation from a formal development to provide any article-ready text. as soon as interactive editing introduces changes with respect to the initial development, there is a possibility for introducing errors. it is these errors we would like to avoid with our tool.



we definitively want to offer the user a way to enrich their formal development with convenient documentation or informal explanations. typically after the automated importation step of a coq script the user will do some interactive editing to prepare for dissemination of results. latex exportation is satisfactory as a scientific document format. however, we must be able to recover the script to certify a posteriori the embedded code. using latex as the generic format for the script leads to a substantial loss of structure information. the resulting document is(enriched) text, while on the coq side, a script is a program, where documentation is in comments. therefore,



the crucial distinction between the active parts of the script(the vernacular commands mainly) and the inactive parts(the interleaved comments-asdocumentation fragments) is lost in the conversion process if we use latex as the generic format. although this could be handled to some extent with the help of tricky annotations within the latex end-of-line based comments, this is not satisfactory. the texmacs editor deals with structured documents, which is precisely what we want.



ures, and bibliographies. texmacs documents are saved as structured text files using a simple notation system which helps automatic(machine-driven) search. therefore, as a whole, texmacs presents many attractive features which make it an interesting candidate in the context of authoring scientific documents.



the binder list, arrowc, and appc nodes should be obvious from the above tree. the n~_ and next_:_|_ come from the extendible notation command introduced in the last version of coq that permits the kind of enhancement that formula(1) uses for the verbatim output. while this is not at all necessary in our tool(see rsa example below), at this stage of our development we decide to represent these nodes as special nodes in the generated structure.



coq provides specific outputs in many contexts, not only for formulas. let us have a look at the inductive vernacular command. the coq standard library provides many examples. from datatypes unit, the sum of two sets a+ b is inductively defined as



following these brief explanations, the full coq standard library is generated automatically by our documentation tool as a bunch of texmacs files which can be browsed within the editor. the blue items acc(in lemma 5) represent hyperlinks to the definition declaration inductive 4.. our contribution consists in a complete set of texmacs files accessible online from within the editor and browsable in the same way as the web documentation on the coq site.



to be executed by the tex engine. so the key idea is that the user is working in a dual world with respect to program source editing. our tool transforms any program source file into a dual document source file, since texmacs is basically working in the same way as tex.



be inserted as comments into the script, but comments are thrown away by the coq lexical analyzer. in order to collect the documentation provided in the source script, we had to change the lexer behavior, so that not all the comments are ignored. however, doing this in every place where comments may occur would result in a parser with unreasonable complexity. we decided on a model where documentation and code alternate, but no documentation is looked for within the vernacular commands. documentation fragments may



appear in many places within the texmacs representation of a given script. we ensure that they do not get lost through the exportation step by placing them in places where the(modified) coq lexer is able to find them. however, we cannot guarantee that their exact position is preserved.



therefore, we have split the exportation in two steps, where the first one profits from the fact that we are able to identify the fragments specific to coq among the whole document. this first step is designed as a guile script filter, which can be rewritten by the user at will. selecting the exported material can be locally tuned inside the document(source) by assigning values to specific variables locally, following the same idea as marking a fragment as math, bold, or italic. afterwards, everything is put in the hands of the common



let us have a look at the coq-tex tool provided with coq distribution. this is a stand-alone program which processes coq phrases embedded in latex files. this tool greps the latex for coq vernacular commands, identified by particular latex environment tags(coq_examples, coq_examples*, coq_eval). the result is stored in a temporary script and sent to coq toplevel(coqtop) for evaluation. depending on the surrounding tag, the command itself or the result are then re-inserted in place in the latex file. as it stands, the environment tags offered with coq-tex gives the user the different possibilities based on two criteria: i) is the vernacular command to be displayed and ii) is the result of its evaluation to be displayed? whenever the answer to a question is positive, the appropriate text is printed verbatim at the appropriate place.



