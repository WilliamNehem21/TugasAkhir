the discussion of prover interfaces in the past has focused primarily on the functionality available to the user. a convenient management of proof scripts[11,8,1,3] is the current basis for using interactive provers like isabelle and coq. in this setting, the prover may support the user in writing the proof scripts, or check proof documents that are close to mathematical texts. proof-by-pointing[10,9,31], graphical proving metaphors, or prover-specific interaction models promise improved user experience. cooperative proof development is enabled by web-interfaces for provers. integrated verification environments offer prover interfaces for a special application[24,13,15].



despite presenting medium to large software systems, the cited studies surprisingly have neglected the engineering considerations necessary to build these systems. instead, they focus on the broad software structure: brokers are used to decouple interface components from prover components[4,32]. the construction of webinterfaces focuses on technical aspects of client/server communication. the proof-by-pointing interfaces exhibit the interaction between prover and interface, but not the implementation of the ui[10,27]. the generic interface describes a



this paper addresses the identified question by applying standard approaches for the construction of user interfaces to the particular domain of theorem provers. we base the discussion of engineering considerations on desirable non-functional properties of a prover interface software(section 2). the concrete example of i3p, the interactive interface for the isabelle prover(; section 3), is then used to demonstrate the realization of the engineering goals(section 4). throughout, we emphasize the relevance of the general principles for theorem prover interfaces. the discussion of related work(section 5) then applies our reasoning to existing systems.



it is important to note that these properties are not goals in themselves, which are prescribed by some abstract software design regime. the real goals have been given by identifying their relevance for prover interfaces. the non-functional properties serve as stepping stones in achieving these goals, since the software engineering literature provides techniques to achieve the properties, while not giving any recommendations for prover interfaces. the transfer of the general principles to the specific application is a main point of this paper.



the theory editor component lets the user edit the text of proof documents. it offers an input facility for mathematical symbols that emulates the emacs xsymbols mode. files are saved as usual with encoded xsymbol names. automatic indentation follows the nesting level of proofs. the theory editor provides syntax highlighting and also handles dynamic definitions of new isar keywords. the syntax highlighting and automatic indentation also recognize embedded latex and ml



the result viewer lets the user examine the prover messages stored in the state of single commands(section 4.5). the display is split into normal output, errors and warnings, and trace messages. since messages for previously processed commands are kept, the user can go back in the proof script.



this section presents the architecture of i3p, which has been developed to achieve the desirable non-functional properties identified in section 2. in this way, it explains how engineering considerations have led to the overall system presented in section 3. each of the subsections describes a particular design decision or component, and then proceeds to discuss the resulting non-functional properties. for the property of traceability, we remark in advance that the components, type-set in italics, correspond to concrete classes of the implementation. further structure is omitted for brevity here, but is provided in the javadoc comments of the available source code.



the prover communication layer encapsulates the access to the prover process. a prover driver enables the prover manager to start a process for a specific installation and set of options. the driver also lets the installation manager examine an installation, for instance to list the available logics. when a prover is started, the prover instance hides the inter-process communication, in particular the physical protocol in use.



testability has enabled us to write around 350 unit tests for different parts of i3p. with a large test coverage, the implication of testability is changeability(section 2): we can be confident about making changes because any introduced failures will be spotted early, the next time that the automated tests are run. in particular, re-factoring the software tends to clarify the overall structure and enhances, in turn, traceability and maintainability.



i3p employs the concepts developed for object-oriented frameworks and the interceptor pattern, which can be seen as a concise summary of the main points of frameworks, to enable extensibility. in these approaches, a framework is a platform that provides mechanisms that are common for a family of software products. the specific applications are created as extensions to this platform. the interface between the framework and its extensions is defined in an event-based way: the framework specifies some abstract state, such as the file resources or proof documents in section 4.1. it also defines events as changes in that state, and notifies interested extensions about them.



to a structure maintainer associated with each proof document. the maintainer is responsible for updating the command partitioning. since it can only split and join commands, the commands always form a partitioning. to decide about changes, the structure maintainer can access the entire proof document, for example to handle comments in a single run or to examine adjacent commands.



this particular instance of event-based design yields, of course, the general benefits discussed in section 4.3. furthermore, the notifications sent by proof documents have proven sufficient to implement the connections to all other components, including the entire ui layer and the prover(section 4.6). further, having these events available enables extensibility by ui components that display the state of commands.



a central design consideration is the expected interaction between the prover and the interface, and the relative distribution of functionality between them. one possible view is that the prover can basically execute and undo commands[2,24], and one can parameterize the interface accordingly. going one step further, one can explore how much useful functionality can be achieved by the interface without support from the prover. these approaches, by intention, do not target further capabilities of the prover.



i3p is also extensible by new drivers, since the prover manager retrieves installed drivers from the drivers directory of the system file system(section 4.4). similarly, the installation manager(section 3) looks for installation types in the installations directory. both drivers and installation types can therefore be supplied by modules developed independently of the i3p core.



the pgkit framework proposes an xml-based communication protocol for provers and display components. a broker component mediates the communication between provers and interfaces, manages the open proof documents, and synchronizes the user edits and the prover execution. this architecture aims at re-usability, as proof general does, but also addresses extensibility by new display components.



however, the protocol does not contain mechanisms for accessing prover-specific functionality. furthermore, display components in pgkit are heavy-weight in that they need to implement the pgpip protocol, while i3p ui extensions can directly access the objects in the infrastructure layer. in principle, the defined protocol should enable testability of single components, and the properties and benefits entailed by it, but this is not discussed in the published work.



charles and kiniry address re-usability by providing a minimal interface which can be adapted to different provers by prover-plugins. their interface/prover communication is limited to traditional undo/redo of commands and in broad terms follows the adaptation model of proof general/emacs. there are no mechanisms to expose prover-specific functionality in the interface. the architecture of the eclipse-based interface itself is not discussed, thus neglecting traceability; if a document-view separation is followed in the implementation, the corresponding benefits could be claimed for the software. while the definition of clear interfaces for prover plugins enables their independent testability, testing is not discussed.



kaliszyk proposes to access provers through web-services. while the technical foundations of the employed ajax and dom apis are discussed in detail, it remains unclear whether the concrete protocol is private or fixed and public. in the latter case, testability of the server components would be enabled. furthermore, the benefits of the document-view separation, which is implicit in employing web-services, could also be realized in this system.



in summary, the goals for prover interfaces identified in section 2 have been discussed, though mostly implicitly, in various previous studies. however, the ways to achieve them have always been derived from the specific application, rather than from desirable quality attributes and general software engineering principles, and the potential further benefits of applying these principles have therefore been neglected. as a relative contribution, this paper thus shows how the general principles and strategies from software engineering can be applied to prover interfaces in order to realize these benefits.



