in recent years, software, system and enterprise architecture have become established disciplines in both industry and academia. architecture models may aid the communication between various stakeholders. architecture models may also aid the understanding of the complex systems they represent. one important part of understanding is to be able to infer new knowledge from a model, i.e. to be able to analyze the models. as an example, by considering an architecture model over a set of enterprise services and their relations, an observer may infer that these services will be unable to interoperate(perhaps due to a protocol mismatch). the model does not explicitly state that the services cannot interoperate, but by using a set



this paper builds on previous research within the field of architecture analysis where architecture models are analyzed using a formalism based on bayesian statistics. this approach allows the analysis of various system properties, such as the interoperability, information security and the availability of software systems. in this paper we will use enterprise service interoperability analysis as a running example.



in order to specify the joint distribution, the respective conditional probabilities that appear in the product form must be defined. the second component p describes distributions for each possible value xi of xi, and pa(xi) of pa(xi), where pa(xi) is the set of values of pa(xi). these conditional probabilities are represented in matrices, here forth called conditional probability matrices(cpms). using a bayesian network, it is possible to answer questions such as what is the probability of variable x being in state x1 given that y= y2 and z= z1.



the abstract model tells us what information we need to find in order to conduct analyses of different variables. once this information is collected it is specified in the model, thus creating an instantiation of the abstract model. these instantiations are called concrete models.



services are independent building blocks that collectively represent an application environment, much like components of a software system. however, services possess a number of qualities that components lack, e.g. the complete autonomy from other services. this allows a service to be responsible for its own domain. furthermore, services are typically limited in their scope to support a specific business function or a group of related functions each service at an enterprise need to be of high quality, i.e. every service needs the foundation to be able to interoperate with other services. two aspects affecting service quality are the correctness and availability of a service.



services have service descriptions. these are used for advertising and describing the service capabilities, behavior, quality, and its interface. the service descriptions have four attributes: understandability, completeness, correctness, and existence in service repository. these attributes all affect the quality of the service being described.



services use a service bus, often referred to as an enterprise service bus(esb), as a communication medium. the service bus is a middleware-like solution to manage message and transaction traffic. the service orchestration description is the specification that details and controls the orchestration of services to interact these descriptions are written in a service orchestration language, where bpel(business process execution language) is considered an industry standard. the services orchestration description must be service compatible in order for the orchestrated services to be of high quality. services interoperate in service clusters, e.g. three fine-grained services a1, a2, and a3 may be orchestrated to provide a more coarse-grained service b. clusters thus appear on many different levels of abstraction, with the most coarse-grained enterprise service consisting of several other, more fine-grained, clusters.



all clusters, independent of abstraction level, can be analyzed with respect to interoperability; i.e. how well the services within the cluster interoperate. the service cluster interoperability is measured in terms of the quality of each service within the cluster, the service protocol compatibility, service bus compatibility, and service orchestration language compatibility



each object of the concrete model has a number of attributes; questions that need to be answered for the interoperability assessment. there are several ways for us to collect evidence for each attribute; we can therefore find several pieces of evidence about a single attribute. viable ways to collect information are, for instance, to interview people, perform manual tests, study documents, or a combination of these. in the current example, we introduce three sources of evidence. max the consultant, who is in charge of developing the service cluster. george, the system owner, is responsible for the system that implements the services. finally, the investigator can collect information by performing manual inspections of the various attributes in the concrete model.



in this simple example, the number of attributes that needs to be assigned values is already quite substantial, twenty-six to be exact. for each attribute there is a possibility to collect three pieces of evidence; in our example this means that there are some seventy-eight pieces of evidence that can be collected. this number will grow rapidly with the addition of new services. the addition of each new



in this paper, we focus on the second practical problem associated with large concrete models and many pieces of evidence. this problem is due to the cost of evidence collection. if every piece of evidence in the service interoperability example would take one minute to collect, it would take a man-month to collect all pieces of evidence, assuming one hundred services and ten sources of evidence. a better option is normally to refrain from collecting all evidence and instead accept a level of uncertainty of the assessment results. when this strategy is employed, it is desirable to collect those pieces of evidence that have the biggest impact on the assessment results to the lowest evidence collection cost. an algorithm to determine which piece of evidence to collect next is described in the next section.



diagnosis involves two types of tasks:(i) determining of the(combination of) causes of the observed symptoms, and(ii) increasing the credibility of the diagnosis through the collection of additional, initially unobserved, data. since information seldom comes for free, the second task by necessity involves the formulation of a strategy to gather information as cleverly as possible, i.e. to gain the most diagnostic value at the least cost. we now proceed to make this more precise.



an example, which was implemented in genie, featured the analysis the interoperability of a very small cluster of services. in the example it was demonstrated that the use of the diagnosis algorithm reduced the cost of data collection by almost as compared to collecting data without the use of any particular strategy. from this we conclude that the diagnosis algorithm offers a possibility of lowering the cost of performing system quality analyses quite significantly.



