an event algebra is used to define the complex triggering conditions. this algebra has a relatively simple declarative semantics and well documented algebraic properties, which facilitates formal and informal reasoning about the system. the algebra also ensures that detection of triggering conditions can be efficiently implemented with limited resources, which is critical in embedded applications.



the alternative outlined in this paper is to provide detection of complex event patterns as a part of the component model. complex triggering conditions are specified on a high level, with well-defined formal semantics, which supports formal analysis at design-time when the access to component source code is limited. at compile-time, code that detects the specified situations is automatically generated.



the rest of the paper is organised as follows: section 2 surveys related work and section 3 gives an overview of saveccm. a description of the proposed extension, including an informal introduction to the event algebra, is given in section 4. in section 5 the event algebra is presented more formally, and we outline how the properties of this particular algebra impact on the extended component model. finally, section 6 concludes the paper.



koala is a component technology developed and used internally by philips. component binding flexibility can be achieved with switches, as in saveccm. switches choose between interfaces offered by different components at run time, with possible static reduction at compile-time. robocop is a continuation to enhance the koala model with, e.g., support for real-time constrains and analysis.



pecos is a collaborative project between abb and academia, with the aim to develop a technology adjusted for field-devices. pecos support different trigger-types associated with components; they can be of passive, active or event-type. passive components do not have their own execution thread, and have to be triggered by other types of components. active components have their own thread that is periodically triggered. event components are components that are triggered by an external event and have a thread of control.



outside the domain of component-based architecture, event detection mechanisms of various kinds are used in a wide range of areas. for example, some large distributed systems have an architecture based on event subscribers and publishers. in such a system, rather than having subscribers register their interest in simple event types, and perform their own filtering and pattern detection, this functionality can be provided by the publisher. the subscribers register event patterns, specified for example in an event algebra. the publisher performs the event detection and notifies the individual subscribers when their pattern is detected. many systems of this type has been proposed, e.g., the ready event notification service by gruber et al. that contains a simple event algebra for registering event patterns.



on a system level, execution can be triggered by clocks or external events. then, the control propagates through the system according to the triggering port connections. a component is triggered once all of its input triggering ports have been activated. if more than one output triggering port is connected to the same input triggering port, this input port is activated as soon as one of the connected output ports are activated.



when a component is activated, it first reads from all its input ports and then performs the associated computation. then, output is written to output ports, which includes activating all output triggering ports of the component. finally, all input triggering ports are reset to a non-active state.



at compile time, the components are allocated to tasks in such a way that triggering conditions, precedence relations and component communication are preserved. an analysis phase derives task properties from component attributes and from the system architecture, and performs further analysis based on these, e.g., response time and schedulability analysis. finally, target specific code is generated for each task, where calls to the component entry function are interleaved with code that handles data exchange between components within the task and with other tasks.



we propose an extension to the triggering mechanism that allows more elaborate triggering conditions to be specified. this functionality is provided in the form of an event algebra, i.e., a number of operators from which expressions can be constructed that represent complex triggering conditions.



first, we give an informal description of the algebra operators, and show how the event algebra is incorporated into saveccm. the formal semantics and a number of important properties of the algebra is discussed in section 5. for a detailed description of the algebra, including implementation details, the reader is referred to or.



currently, the semantics of the event element is defined in terms of the original notation. the main motivation for this is that the extension can be included in the prototype tool with minimal effort. in the future, we intend to develop a more direct semantics for the event element, and handle them explicitly in the analysis and code generation phases to avoid unnecessary overhead.



we believe that the overhead introduced by the auxiliary components is reasonably low. they will typically be allocated at the end of existing tasks, and the component code can be inlined by the compiler since it is only accessed from a single point. explicit handling of event elements in the code generation phase would remove the need for these auxiliary components.



an activation of an input port is characterised by the port name, occurrence time and the associated data. formally, we represent each activation as a singleton set to allow uniform treatment of primitive and complex event instances. together, all activations of a certain port during the system lifetime form an event stream.



the restriction policy is defined as a binary relation rem over event streams, where rem(s, s') means that s' is a valid restriction of s. for reasons of repeatability, it is typically desirable that an implementation of the algebra is deterministic. from a theoretical point of view, however, we prefer to leave as many detailed design decisions as possible open, and guarantee that any implementation which is consistent with the restriction policy relation have the properties described in the paper.



an argument for extending the component model with an event algebra is that it facilitates analysis on a system design level, compared to developing a new component for each triggering condition. the algebraic laws presented above can be used to rewrite expressions into a form that can be more efficiently detected, e.g., as illustrated by the transformation algorithm presented in earlier work. from the component model point of view, we want to be able



our ongoing work includes defining a more direct semantics for the event element, rather than defining it in terms of other architectural elements. the compile-time phases of the prototype tool should be modified accordingly, so that the event detection activities are implemented as efficiently as possible. then, case studies should be carried out to evaluate the usefulness of the method and to identify possible improvements.



