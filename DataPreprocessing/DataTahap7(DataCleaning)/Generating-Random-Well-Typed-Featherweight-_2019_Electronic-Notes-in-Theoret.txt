currently, java is one of the most used programming language, being adopted in many large projects, where applications reach a level of complexity for which manual testing and human inspection are not enough to guarantee quality in software development. even when using automated unit tests, such tests rarely cover all interesting cases of code, which means that a bug could never be discovered, once the code is tested against the same set of rules over and over again. this paper addresses the problem of generating random well-typed programs in the context of featherweight java, a well-known object-oriented calculus, using quickcheck, a haskell library for property-based testing.



nowadays, java is one of the most popular programming languages. it is a general-purpose, concurrent, strongly typed, class-based object-oriented language. since its release in 1995 by sun microsystems, and currently owned by oracle corporation, java has been evolving over time, adding features and programming facilities in its new versions. in a recent major release of java, new features such as lambda expressions, method references, and functional interfaces, were added to



considering the growth in adoption of the java language for large projects, many applications have reached a level of complexity for which testing, code reviews, and human inspection are no longer sufficient quality-assurance guarantees. this problem increases the need for tools that employ static analysis techniques, aiming to explore all possibilities in an application, in order to guarantee the absence of unexpected behaviors. normally, this task is hard to be accomplished due to computability issues considering certain problem sizes. for overcoming this situation it is possible to model formal subsets of the problem applying a certain degree of abstraction, using only properties of interest, facilitating the understanding of the problem and also allowing the use of automatic tools.



section 3 presents the process of generating well-typed random programs in the context of fj. section 4 shows the results of testing type-safety properties of fj with quickcheck. section 5 discusses related works. finally, we present the final remarks in section 6.



fj semantics provides a purely functional view without side effects. in other words, attributes in memory are not affected by object operations. furthermore, interfaces, overloading, call to base class methods, null pointers, base types, abstract methods, statements, access control, and exceptions are not present in the language. as the language does not allow side effects, it is possible to formalize the evaluation just using the fj syntax, without the need for auxiliary mechanisms to model the heap. next, we present the original description of fj.



quickcheck is an automated testing tool for haskell. it defines a formal specification language allowing its use to specify code under test, and to check if certain properties hold in a large number of randomly generated test cases. this library provides several test case generators for constructors of the haskell language, but it leaves for its users the definition of generators for user-defined types. the library provides combinators which help the programmer in this process.



the process starts generating a random number n, which represents that it will be generated n methods for the given class c. a method is represented by its signature and by its body. for generating the signature, it is necessary to produce the method name, the return type, and the formal parameters(types and names). this step is performed according to the method typing rule, as follows: end of the method name. after that, it is generated a list of random size for the formal parameters. the list of types is placed in?3, and the non-duplicate list of names is placed in?4. as we are generating exclusive method names for each class, the function mtype(?2, d) is always undefined. it means that the generated method is not overriding a method from the base class.



then, the placeholder? should be filled with a randomly generated expression, which process was explained in the last subsection. the important difference here is that the context is augmented with the variables and types of the formal parameters and with the special variable this, whose type is the class being generated. the resulting expression should be a subtype of the generated return type.



the testing tool csmith is a generator of programs for the c language, supporting a large number of language features, which was used to find a number of bugs in compilers such as gcc, llvm, etc. le et al. developed a methodology that uses differential testing for c compilers. lindig created a tool for testing the c function calling convention of the gcc compiler, which randomly generates types of functions. there are also efforts on randomly generate case tests for other languages. the main difference between these projects to ours is that our generators were created by using a formal specification of typing rules. furthermore, we used property-based testing for checking type-soundness proofs.



more specifically, daniel et al. generate random java programs to test refactoring engines in eclipse and netbeans. klein et al. generated random programs to test an object-oriented library. allwood and eisenbach also used fj as a basis to define a test suite for the mainstream programming language in question, testing how much of coverage their approach was capable to obtain. these projects are closed related to ours since they are generating code in the object-oriented context. the difference of our approach is that we generate randomly complete classes and expressions, both well-formed and well-typed by using the formal specification of typing rules in the process of generation. another difference is that none of them used property-based testing in their approaches.



there is also an effort on automatic random test generation from the definition of a type-system. the work of fetscher et al. presents a generic method for randomly generating well-typed expressions in the context of plt redex. the works of lampropoulos et al.[16,17] present different ways to automatically generate random expressions by using quickchick, an existing tool for property-based testing in coq. these approaches differ to ours in the sense that the authors provide tools to generate terms automatically according to a formal specification, usually by annotating the typing rules, while in our work we focus on a specific type-system of a high-level programming language.



in this work, we presented a type-directed heuristic for constructing random programs in the context of featherweight java and used property-based testing to verify it. the lightweight approach provided by quickcheck allows to experiment with different semantic designs and implementations and to quickly check any changes. during the development of this work, we have changed our implementations many times, both as a result of correcting errors and streamlining the presentation. ensuring that our changes were consistent was simply a matter of re-running the test suite. encoding the type soundness properties as haskell functions provides a clean and concise implementation that helps not only to fix bugs but also to improve understanding the meaning of the presented semantics properties.



