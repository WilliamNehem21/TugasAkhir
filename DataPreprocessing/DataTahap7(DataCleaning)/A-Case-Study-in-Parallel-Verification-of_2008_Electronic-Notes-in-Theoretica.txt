in large component-based systems, the applicability of formal verification techniques to check interaction correctness among components is becoming challenging due to the concurrency of a large number of components. in our approach, we employ parallel ltl-like model checking to handle the size of the model. we present the results of the actual application of the technique to the verification of a complex model of a real system created within the cocome modelling contest. in this case study, we check the validity of the model and the correctness of the system via checking various temporal properties. we concentrate on the component-specific properties, like local deadlocks of components, and correctness of given use-case scenarios.



during the last decade, software industry has seriously started to take advantage of component-based software development as an alternative to existing software development techniques. component-based development proposes to assemble software systems from reusable components, possibly in a hierarchical manner. this helps to significantly reduce development costs, but brings the issue of correctness of such systems, especially if components are delivered by different vendors.



work by verifying the model. in verification, we concentrate on properties of the final model like correctness of given use-case scenarios, local deadlocks of components, and response properties. besides these we discuss how the verification helped us to check the validity of the model during modelling.



the modelling example, called trading system, serves to handle sales in a chain of supermarkets. its functionality includes the interaction with the cashier at the cash desk, like product scanning, price lookup, cash/card payment, and bill printing, as well as accounting the sale at the inventory, or determining whether an express cash desk is needed in the store. furthermore, the trading system deals with ordering goods from wholesalers, and generating various kinds of reports. the system is an open system, designed to interact with external components representing users of the system(cashiers and managers) and a bank application.



to model behaviour of component-based systems we use the ci automata language[6,8]. the language models each component as a labelled transition system with structured labels and a hierarchy of component names. the transition label articulates which components communicate on an action, and the hierarchy of names represents the architectural structure of the component.



for property specification, we use a slightly modified version of the linear temporal logic ltl which we refer to as ci-ltl. ci-ltl is designed to express properties about occurring component interaction(i.e. labels in automata), but also about possible component interaction(i.e. label enabledness).



the tool divine, which we use for the verification, provides several ltl model checking algorithms. in our case study, the algorithm owcty is employed. this algorithm always generates the whole reachable state space of the model and its time complexity is higher than that of simple reachability if it is the case that an accepting cycle is found. however, it was chosen because of its efficiency in distributed setting.



within the cocome modelling contest, we have created a detailed model of the trading system in terms of component interaction using ci automata. the model in a textual notation is available at. the model consists of 140 primitive automata(59 in the cashdeskline part, and 81 in the inventory part), composed hierarchically into 34 composite automata up to 6 levels of depth. the trading system model is complemented by several models of cashiers and managers, who interact with the system, and specify various usage profiles under which properties of the system are checked. 3 each usage profile/scenario(all provided within the contest) corresponds to a correct behaviour of a user operating the system.



we have experimented with all usage scenarios. however, for the clarity of the presentation, we employ only one usage profile underlying the properties studied in the paper. it is the scenario describing one sale assisted by a cashier. this scenario represents the most complex usage profile described in, and it is connected to a large number of component-specific properties that can be checked on the behaviour of the system that is implied by the scenario. in the scenario, the cashier first starts the sale, then scans items(in a loop), finishes the sale and receives the payment. it can select cash or card payment, where the cash payment is followed by entering the received amount and returning change, and the card payment with scanning the card and entering pin.



state space of the model. as mentioned above, the trading system model is composed out of 140 primitive automata hierarchically assembled into 34 composite automata. even if the size(number of states) of individual primitive automata is moderate, the size of the complete state space is immense due to the concurrency in component behaviour. an attempt to generate the complete state space on a cluster of twenty computers finished unsuccessfully with 322 millions of states demanding for 60 gb of memory in total. the computation took 13 400 seconds. although this might seem slow, it is not surprising because the state space generation involves computation of the successor states. such computation is a complex task, which needs to take into account the hierarchical composition of components and the feasible labels that can be propagated up in the hierarchy and are part of the composite automata.



even if the complete model is unfeasibly large, for the verification of the model under the given usage scenario, the model is composed with an automaton representing the user. this restricts possible behaviours and decreases the state space. the size of the model with the cashier mentioned earlier is 749 340 reachable states and 3 181 473 reachable transitions.



the cashdeskchannel(200) in the system is not allowed to accept notifications before it delivers events to all subscribers. if some of the subscribers would be constantly refusing to accept the event, it could block other components that already accepted the event and want to notify the channel. as the property is valid, this cannot happen in the system(on the salestartedevent).



the violation of the property means that the system gets into a state from which the component is no more able to perform any computation. this can happen for three reasons:(1) it gets stuck in its internal computation,(2) the environment refuses to accept its calls, or(3) the environment does not wish the component to compute anything for it any more. after a further analysis of the model we learned that the last case is true because in the usage profile, we suppose that only one sale is accomplished. hence the system is not supposed to execute forever. this property demonstrates that one needs to be careful when interpreting the result from the local deadlock verification. more, it allows the reader to see the memory and time needed to verify a property that does not hold.



the property is a more strict version of the property 4. while the property 4 shows that the cashdeskchannel(200) always sends all copies of the salestartedevent and gets into the state where it is ready to start accepting notifications, this property shows that it may take a while before the channel gets ready. however, this is not an error in the system. it correctly reflects the nature of the channel.



in the counterexample, one of the components gets into a loop(representing a for cycle with a finite but unknown number of iterations possible) that it never exits. hence the counterexample represents a run that is not real in the system. however, as there is no natural way to remove the run from the model for the reasons above, we modify the property in a way that it misses this run, thus forcing verification of the original property only on fair runs.



note that although the state-space size of the model composed with property 8 is the same as that of property 9, the verification time is larger in the first case. this is due to the nature of the verification algorithm, as mentioned in section 3.3.



characteristics of the model. as the number of components in the trading system is quite large, and our modelling language expresses component concurrency through interleaving, the model suffers from state space explosion. more, the size of the reachable state space does not grow evenly during the hierarchical composition of components, but it changes dramatically. the reason for the irregular changes of the state space is that a composite automaton does not need to be larger than the automata it is composed of. we have observed cases, where the number of reachable states has been dramatically reduced by the composition. this is due to the parametrized operator that can delimit possible behaviour in the composition. this fact can complicate the estimation of the number of states for a given model.



local deadlocks and component-blocking properties. interesting observations were made in verifying the local deadlocks and their more strict form, the component-blocking properties. we have verified many pairs of such properties and have found a strong relation between the two kinds. mostly, it was either the case that both properties were satisfied, or none of them was. the reasons are similar to those explained after property 5, that is, the environment does not wish the components to compute anything any more. we have, though, found a few cases, when the local deadlock property holds, but the blocking property does not, and we have presented one of them. note that both kinds of properties take advantage of the enabledness e operator without which they could not have been formulated.



in this paper, we give a practical application of the presented ci-ltl verification technique to a large component-based system using a parallel model checking tool divine. we briefly introduce our modelling language as well as the temporal logic ci-ltl, a modification of the action based ltl. we have verified a multitude of properties of the trading system. twelve of them that are of particular interest within the component-oriented software engineering society, are presented here together with the results of the verification and their discussion. the presented properties include two basic properties describing the broadcasting ability of the event-channel components, three properties concerning the possibility of a local deadlock, two properties addressing the component blocking problem, and two properties dealing with the problems caused by cycles in the model. the last three properties are different from the previous. they are used for checking the correctness of the use-case scenarios. finally, we discuss how the model checking helped us in creation of the model, and we summarize the experience obtained during verification, including discussion of some of the results, and the effect of the parallelization. the study confirms that the ci automata modelling language suits well both to capture various types of interactions among individual components in componentbased systems, and to formally verify interaction properties. this distinguishes our



in future, we aim at extending our verification techniques with various reduction methods to allow us to verify even larger systems. currently, we explore the possibilities of two existing reduction techniques, the partial-order reduction and the symmetry reduction. however, their application in our framework is not straightforward, due to the nature of the temporal logic we use. we also try to find new reduction methods taking advantage of component-specific characteristics of verified systems.



