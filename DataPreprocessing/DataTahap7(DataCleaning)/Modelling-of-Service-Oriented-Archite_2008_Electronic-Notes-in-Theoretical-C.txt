services as basis in the construction of middleware systems are among the main motivations. however, several problems have come up along with this evolution. issues like the migration of execution platform, the design and implementation of intricate lifecycles, the increase in the complexity of the development process and the lack of a precise definition of the concepts involved in soa(service oriented architecture) solutions are among them. so, different actions should be taken to tackle these problems. we focus in two:



to accomplish a study of the architectural principles governing the soa designs. the architecture reflects the structure and behaviour of a system and how it evolves as time elapses. moreover, the architecture of a service-oriented system should include features related to business processes and organizational aspects. the integration of business models, which has lead to its quick evolution and spreading, is one of the main benefits of soa.



to follow a methodological approach to reduce the complexity of the soa development process. one of the current trends that more importance is gaining is the model-driven approach. the ideas behind the mda(model-driven architecture) proposal can facilitate and improve the development of soa solutions.



in previous research works, we made an in-deep study of the convenience of extending the mda proposal to support the specification of the architectural modelling aspect within a mdd(model driven development) process. following its conclusions, in this article we present a uml profile for the pim-level serviceoriented architectural modelling, together with the correspondent metamodel. to illustrate and validate it we use, as case study, an extension for a web information system for medical image management called gesimed.



there are some other works related with the topic of this article. they also deal with the definition of the soa principles(,,), with uml profiles for service-based developments(,,) and even the mda principles applied to soa(). they are analyzed in detail in section 4.



at the psm level, however, the influence of the platform or specific technology over the pim-level architectural design should be modelled. the elements to appear will be the same as in the pim level but refined and applied over a specific service implementation technology. nevertheless, this topic is beyond the scope of this article.



a service-oriented architecture is built upon independent entities which provide and manage services. because soa is widely used as a way to integrate enterprise applications, the existence of these providers is justified by the necessity to project the business organizations involved in those processes into the architecture model. these providers act as service containers in charge of presenting the services contained to the world. and also, as it will be explained later, in charge of managing user interaction.



in the presented architecture model these entities are identified as uml 2.0 packages. they are not considered as subsystems because, so far, they do not add or modify neither the inner services nor the dependencies or relations between them. service providers can be classified into two main groups: inner service providers(innerprovider in the metamodel), which are internal to the system designed(usually the system itself) and outer service providers(outerprovider in the metamodel), which are identified as the external entities containing services which collaborate with the system to perform a specific task of value for the system but which are not



services inside a soa-based system play different roles. they can be classified according to its atomicity in simple services(simpleservice in the metamodel) or composite services(compositeservice in the metamodel). in this point we have to differentiate service providers from composite services. since both are means of grouping services, composite services are distinguished for having a property indicating the coordination policy used as well as a well-known interface(because of being a kind of services). this property(named policy) can be set to two possible values: orchestration o choreography. in case of taking the orchestration value, it is compulsory that at least one of the compound services assume the coordinator role.



simple services, in turn, can be divided into basic services(basicservice) or supporting services(supportingservice). basic services represent those services with distinctive functional meaning that typically encapsulates a high-level business concept. supporting or specialized services perform actions clearly identified and not necessarily with direct relation with the modelled system functionality.



services relate, communicate and interact with each other through contracts. the contracts in a service oriented architecture model act as connectors between the different architecture components. these contracts will have different features depending on the components connected. so, we refer to servicecontract when talking about service-to-service connections and interactioncontract when talking about the communication between a systemfront-end and a service.



the operations that take part of the contract established between services can be understood as the roles played by the contractors. other sources like krafzig et al. consider the service contract as part of the service description itself. although the way to interact with a service depends mainly on the functions offered by a service and shown in its interface, we think that, by making the service contract an independent element of the architecture model, we ensure the independence of the different relations a service can establish with different services, each of them with its own restrictions and characteristics. other reason that supports our choice is that, in future refinements of the model, the service providers could create specific contract restrictions or templates unfeasible to be applied if modelled inside the services.



it is possible that for two services to communicate they fulfil some preor postconditions. in our architecture model this clauses are represented as restrictions associated to the servicecontract element and using ocl as description language. so, ocl is used to define the dynamicity of the architecture as the interactions between the components of the architecture will take place only if the conditions are satisfied. however, and so far, the constraints are not dynamic themselves.



messages in soa represent the communication item exchanged between services. each message(or, more properly, message type) is related to a service contract. the most important feature of messages is that they have to be understood by both the emitter and receiver services, so the attributes of this concept should include references to the ontology model or semantic constraints involved in the message.



although the semantics associated to the message appear in the architecture model, the message format does not. the format of a message is an issue that depends mostly on the implementation technology and so it should be modelled in the correspondent psm-level models. however, although exchanged messages are inherently related to the operations offered by every service, we consider that, by identifying the messages as separated entities, the model is more flexible to support the evolution of the architecture. this approach also appears in other works such as wada et al..



baresi et al. propose to model an validate service-oriented architectures using uml to represent soa static concepts, graph transformation rules to represent the behaviour and transition systems to validate them. although they use uml as abstraction method to model the architecture, this proposal considers that any soa development is built upon service clients, providers and service discovering agents. this vision constraints the scope in which soa can be used since their proposal cannot be generalized to other execution platforms apart from the ones that follow this scheme.



starting from the proposal of baresi et al., heckel et al. define a uml profile for soa modelling but taking into account the mda principles, that is, the separation of pim and psm levels. their uml profile only allows to define two kinds of services(provider and registry) and does not include any facility to model semantic or constraint issues(for example applied to exchanged messages).



wada et al. present a solution based also on uml. they focus on the representation of non-functional aspects and the definition of services, messages, connectors and pipes as the only first-class available elements. other drawback of this proposal is that all the restrictions are gathered inside comments. this represents an important inconvenient if we want to automate the development process or to validate models.



there are other proposals coming from the enterprise research field. papazoglou et al., for example, makes a classification of the concepts involved in soa development but from the viewpoint of the role given to each component. we consider this viewpoint by including a hierarchy of services in our metamodel. moreover, their research is based on the web services principles. this circumstance appears also in other works from the enterprise research field such as the ones by aiello et al., lublinsky et al., erl, o krafzig et al.. this is mainly due to the fact that they start from the definition of service(and soa by extension) given by



the uml 2.0 profile created by ibm is one of the closest proposals to the content presented in this article. on it a generic model with the main concepts of the soa paradigm is presented from a more conceptual viewpoint and not so constrained to the web service concepts.



the soc paradigm is gaining importance in the software development field principally because of the broadening of the fields on which it is being used and accepted as guiding paradigm. however, several problems, such as an increase of the complexity development process, are derived from this evolution. this motivates the necessity to design new development methods to assist the development process of soa-based systems.



the model-driven approach in general and the mda proposal in particular have turned out to be a great advance in software development. the separation in abstract levels(cim, pim and psm) and the definition of transformation rules between the models defined within these levels and among levels are the foundations of the mda proposal. the application of the mda principles to the soa paradigm favours the development of solutions based on services. on the other hand, the design of the architecture is a critical aspect in soa-based developments since one of its main goals is to achieve flexible implementations of interacting software entities. although there are other proposals for the service-oriented system development, many of them consider web service principles as basis keeping them apart from generic designs. the ones which are enough generic to avoid fixing to a specific technology usually can not be applied to mda or do not use a high-level standard notation to help the development process. among the proposals which define uml profiles for soa, practically none of them have a complete development method associated and only focus on the ways of representing the soa principles and not in the entire development process. finally, none of them allows the representation, as first-class architectural element, of a component in charge of interacting with the which allows to implement the system modelled in different target platforms(by means of different psm-level architectural models). at this moment we are working on the specification of psm-level soa architectural models for different service execution platforms(web service, grid, corba, agents, etc). we expect to give a formal representation of the concepts sketched in this article by means of an adl which allow us to represent the semantics shown in the metamodel as well as its restrictions.



