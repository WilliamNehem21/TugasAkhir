provably correct compilation is an important aspect in development of high assurance software systems. in this paper we present an approach to provably correct compilation based on horn logical semantics of programming languages and partial evaluation. we also show that continuation semantics can be expressed in the horn logical framework, and introduce definite clause semantics. we illustrate our approach by developing the semantics for the scr specification language, and using it to(automatically) generate target code in a provably correct manner.



assuring the correctness of the compilation process is an important consideration in construction of reliable software. if the compiler generates code that is not faithful to the original program code of a system, then all our efforts spent in proving the correctness of the system are futile. proving that target code is correct w.r.t. the program source is especially important for high assurance systems, as unfaithful target code can lead to loss of life and/or property. considerable research has been done in this area, starting from the work of



those that treat the compiler as just another program and use standard verification techniques to manually or semi-automatically establish its correctness. these techniques typically employ known mathematical techniques such as induction proofs, axiomatic semantics, etc. they may also use theorem provers or advanced reasoning systems to semi-automate the process. the weakness of this approach is that part of the process is manual and may introduce errors. another weakness is that each compiler developed for each language has to be separately proved correct.



those that generate the compiler automatically from the mathematical semantics of the language. typically the semantics used is denotational. considerable research was done in the 70s and 80s to automatically generate compilers from the semantic definition of a language. the automatically generated compilers, however, have not been used in practice due to their slowness and/or complexity of the code generated.



those that use program transformation systems to transform source code into target code. this approach is related to the previous one and expresses the operational semantics of the language as term rewriting rules. these term rewriting rules can be treated as a specification for a compiler, and can be proven correct. target code is automatically obtained by applying these term-rewriting rules to the source code. the disadvantage in this approach is that specifying the compiler operationally can be quite a lengthy process. also, the compilation time can be quite large since a term-rewriting system will be used for executing these rules.



mantics which possesses both an operational as well as a denotational(declarative) flavor. in the horn logical semantics approach, both the syntax and semantics of a language is specified using horn logic statements(or pure prolog). the semantics can be viewed dually as operational or denotational. taking an operational view, one immediately obtains an interpreter of the language l from the horn-logical semantic description of the language



of p, provided the partial evaluator is correct. the correctness of the partial evaluator, however, has to be proven only once. the correctness of the code generation process for any language can be certified, provided the compiled code is obtained via partial evaluation.



in this paper, we further develop the horn logical semantics approach and show that continuation semantics can also be expressed in horn logic. moreover, we also show that in horn logical semantics not only the syntax but also the semantics can be expressed using the definite clause grammar notation. the semantics expressed in the dcg notation allows for the store argument to be naturally hidden. we also show that continuation semantics expressed as dcgs can be partially evaluated w.r.t. a source program to obtain target code in a provably correct manner. we illustrate this in the context of the scr(software cost reduction) method for specifying embedded real-time systems. we assume that the reader is familiar with denotational semantics, partial evaluation, logic programming, prolog and definite clause grammars([25,14,26] are good references for these topics).



third, non-deterministic 5 semantics can be given to a language w.r.t. resources(e.g., time, space, battery power) consumed during execution. for example, some operations in the semantic algebra may be specified in multiple ways(say in software or in hardware) with each type of specification resulting in different resource consumption. given a program and bounds on the resources that can be consumed, only some of the many possible semantics may be viable for that program. resource bounded partial evaluation can be used to formalize resource conscious compilation(for example, energy aware compilation) via horn logical semantics.



using jumps. though, the compiled code generated is in prolog syntax, true machine code is only a few simple steps away. the code generation process is provably correct, since target code is obtained automatically via partial evaluation. of course, we need to ensure that the partial evaluator works correctly. however, this needs to be done only once. note that once we prove the correctness of the partial evaluator, compiled code for programs written in any language can be generated as long as the horn-logical semantics of the language is given.



note that in the code generated, the update and access operations are parameterized on the memory store(i.e., they take an input store and produce an output store). of course, real machine instructions are not parameterized on store. this problem can be solved by using the dcg notation for expressing the valuation predicates as well.



so far we have modeled only direct semantics using horn logic. it is well known that direct semantics cannot naturally model exception mechanisms and goto statements of imperative programming languages. to express such constructs naturally, one has to resort to continuation semantics. continuation semantics are also easily modeled in horn logic in the dcg format. in



we do not give details due to lack of space. more details can be found elsewhere. however, we give below the continuation semantics of the subset of pascal considered earlier after extending it with statement labels and a goto statement. note that the syntax trees are now represented as a list of commands. each command is represented in the syntax tree as a pair, whose first element is a label(possibly null) and the second element is the command itself. only the valuation functions for commands are shown(those for expressions, etc., are similar to the one shown earlier).



the code for find label/3 predicate is not shown. it looks for the program segment that is a target of a goto and changes the current continuation to that part of the code. consider the program shown below to the left: the result of partially evaluating the interpreter obtained from the semantics w.r.t.



we have applied our approach to a number of practical applications. these include generating code for parallelizing compilers in a provably correct manner, generating code for controllers specified in ada and for domain specific languages in a provably correct manner, and most recently generating code in a provably correct manner for the software cost reduction(scr) framework. in the rest of the paper, we show that horn logical semantics can be practically applied; we apply it to the domain specific language of scr, discussed next.



the grammar of scr consists of five sections(type definitions, constant definitions, variable declarations, assumptions and assertions, and function definitions). user-defined data types are listed in the type definitions section. there are two types of user define data types:(i) enumerated type and(ii) integer type associated with a range. variable declarations can include four types of variables: monitored variables, controlled variables, term variables and mode classes. the assumptions and assertions section contains predicates describing relations between variables, i.e., each assumption or assertion is a logical formula. the violation of an assumption indicates that the input does not obey the assumed environmental constraints. if an assertion is violated, it means that the specification does not satisfy a property that is was expected injection is represented as a controlled variable called safetyinjection. each sensor represents an input. the hardware interface between the control system software and the safety injection system serves as output. a mode class pressure and a term overridden help make the specification of the safety injection system concise. pressure has three modes: toolow, permitted, and high. a drop in water pressure below a constant low causes the system to enter mode toolow; an increase in pressure above a larger constant permit



causes the system to enter mode high. the term overridden is true if safety injection is blocked, it is false otherwise. an example of a condition in the specification is waterpres< low. two examples of events are the input event event@t(block=on)(the operator turns block from off to on) and the conditioned event@t(block=on) when waterpres< low(the operator turns block to on when water pressure is below low). the program corresponding



the horn logical semantics developed for scr immediately provides us with an interpreter on which the program above can be executed. further, the interpreter was partially evaluated w.r.t. this program using the mixtus system, and compiled code was obtained. the partially evaluated code generated that corresponds to the safety injection system is shown in appendix



even though our respective experiments have been done on different machines, the machines are comparable in speed. as can be noticed, the time taken to generate code in our case is considerably better. note that we did not optimize the semantics at all to make it more amenable to partial evaluation as that would have reduced the readability of the semantics.



considerable work has also been done in using term rewriting systems for transforming source code to target code. in fact, this approach has been applied by researchers at nrl to automatically generate c code from scr specification using the apts program transformation system. as noted earlier, the time taken is considerably more than in our approach. other approaches that fall in this category include the hats system that use tree rewriting to accomplish transformations. other transformation based approaches are mentioned in.



