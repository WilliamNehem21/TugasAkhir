the rest of this paper is organized as follows: in section 2, we briefly describe the main features and design rationale of the gloo framework and present the design and implementation of the language-of-java-services in section 3. in section 4, we discuss both related work and its impact on the design of the gloo framework. we conclude this paper in section 5 with a summary of our main observations and outline future activities in the area of the specification and implementation of narrow-focused domain sublanguages.



that concurrency is a language feature and should therefore be made an integral part of the underlying language specification. however, the identification and definition of the right set of abstractions for concurrency within a given language is not an easy task. consider, for example, the industrial-strength languages java and c#. both languages offer a rich set of primitives to cope with concurrent activities within a software system. nevertheless, these abstractions are not powerful enough to separate coordination from computation concerns, as, for example, synchronization has to be specified at the method level or the lifetime of object instances may change due to application-specific settings controlled by the lifetime management of the.net remoting infrastructure.



gloo does not offer any predefined abstractions to denote algorithms, except sequencing. however, gloo allows for both syntatic and semantic extensions. moreover, even though gloo recognizes most java operators, their actual semantics is undefined, that is, the user has to supply the gloo system with an appropriate implementation.



in order to define the language-of-java-services, we need to integrate java classes and java objects in the gloo framework as first-class values. more presicely, we need to define two container value types that encapsulate classes and objects, respectively, and a javaclass meta level that defines the core abstractions to load classes, create objects, call methods, and map gloo values to java values and vice versa. container value types are specified directly in java as part of the package javasupport that is automatically loaded into the gloo system when processing a specification unit.



the definition of the container value type for java classes is shown in listing 2. the type javaclassvalue defines a read-only value denoting a runtime instance of a java class. besides the getter method getclassvalue(), we also have to redefine the tostring() method to obtain a standard textual representation for the newly defined data type. in addition, by deriving javaclassvalue from the class literalvalue we guarantee a sound integration of the new container value type in the gloo framework and promote java classes to first-class values in the gloo system.



the core of the language-of-java-services is shown in listing 4. the core exposes two abstractions: the type constructor javaclass and the function new that takes a class container value and returns a function, which expects an extensible record denoting the constructor arguments to be passed to the meta level function java.newinstance. the term(|args, class= class|) defines a so-called binding extension in which the record args is refined by the binding class= class. again, the order of bindings in an extensible record is insignificant. however, in case of the occurrence of bindings with the same label, the right-most binding has precedence.



in addition, the core also defines the function propagate positions, visible to the local scope of the unit only. the purpose of this function is to combine the position information specified in the signature record with the bindings in the argument record. the term(|positions# arguments|), denoting the composition of the bindings of both records giving the bindings of arguments precedence, yields a record that has the same bindings as arguments, except that positions have been added if necessary. more precisely, if a binding in arguments does not possess an explicitly specified position, then the record positions is consulted to assign that binding a position.



crucial to the success or failure of a software project is not only our understanding of the problem domain, but also the choice of the programming languages and their support for modeling the problem domain. general-purpose programming languages offer a reasonable support for the encapsulation of domain expertice in prefabricated software entities that can be reused by rearranging them in new composites. however, general-purpose programming languages are less useful when specifying applications as compositions of reusable software components, as they exhibit a mismatch between the the abstraction level of the supported language constructs and the level of abstraction at which software composition takes place.



in this paper, we have analyzed gloo, a novel component-oriented programming framework that allows for the definition of narrow-focused compositional domain sublanguages that provide a user-centric view of a given problem domain for the application programmer(i.e., the component assembler). gloo is a dynamic, open-ended composition language that rests upon dynamic binding, explicit namespaces, incremental refinement, and a foreign code gateway, concepts all crucial for a comprehensive component-oriented software development approach.



the foreign code gateway is the most important innovation of gloo with respect to its predecessor piccola and provides us with an effective means to incorporate java code directly into the scope of gloo specification unit to construct problemoriented domain abstractions, as illustrated in the definition of the language-ofjava-services. the gloo programming model allows for a light-weigth and scalable approach to define domain abstractions. rather than building large, monolithic domain models, the gloo approach fosters the definition of small, first-class subject-oriented development artifacts that can be composed and extended to build larger and more complex and possibly concurrent compositional programming abstractions.



the gloo framework also provides support for model-driven engineering. model-driven engineering(mde) technologies combine domain-specific modeling languages with program synthesis tools for creating domain-specific models of largescale systems. models are considered first class entities. the gloo programming paradigm does not impose any restrictions on definable development artifacts. in future work we plan, therefore, to use the gloo as a model-integrated computing platform and perform feasibility studies to ascertain the effectiveness of representing domain models in the gloo framework.



