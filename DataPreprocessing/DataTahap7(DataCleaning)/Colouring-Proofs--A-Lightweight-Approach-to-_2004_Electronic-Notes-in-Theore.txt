our modus operandi to mechanically check a proof within coq has nearly remained unchanged since the beginning. the proof is first written carefully on paper with as many details as possible. then, this document is used as a guide to produce the script for the proof system. at this stage, the proof on paper and the script usually take different roads. the proof on paper is reworked, mainly shortened, so to be inserted into some technical report. the script is also modified. good practice recommends to reorganize it in order to increase reusability and robustness.



the last source of inspiration comes from verification condition generators like why. these systems are used to prove the correctness of programs. they take as an input a program annotated with logical assertions and output a list of conditions. proving all these conditions ensures that the annotations in the program are valid. we would like to have a similar mechanism for proofs on paper. running the tool on a proof should generate a list of formal conditions that needs to be checked in order to ensure that what is written in the proof is correct.



the definition of the actual proof format derives directly from these considerations. an appropriate representation of proofs to highlight their structure is known since decades. it is the natural deduction style proposed by prawitz. in the following we use some of the rules of natural deduction to illustrate how our format works. for the actual description of the format we use a mark-up language a` la xml.



two aspects of our format for formulae are worth commenting. first, we could have chosen the coq syntax for formulae but have decided to use a language that is independent of a particular prover. we believe that this independence is a key issue for maintaining large formal developments on the long run. second, we have chosen a textual representation. a natural alternative would be to use mathml. as a matter of fact, an earlier version of our proof format did use a light version of mathml. for example, the formula



indentation is used here for readability only. no specific layout is imposed by the format. also the relative positions of the subgoals and the conclusion are free. putting the conclusion first gives a goal-directed flavour to the proof. what is proved is given before explaining why it holds. putting the conclusion last gives the more usual forward style. most of the time a proof on paper is carried out using the forward style, but for key steps like the application of an inductive principle the conclusion may be given first. our format easily accommodates both styles.



however, putting the name inside the text of the assumption is not a good idea. it gives a very limited naming schema, no extra text can be added. to get a more general one, an extra tag f is used to indicate the value of the assumption. named assumptions should then be written as



in program verification, in order to generate the conditions one needs to use elaborate techniques such as computing the weakest preconditions. for our format, the generation is much simpler. the algorithm is illustrated here for coq but could be easily adapted to other systems. it consists in a traversal of the tagged structure from top to bottom and from left to right. each time a proof tag is encountered, its subproofs are first recursively processed before generating the condition associated with the tag.



first introduces assumptions. in coq, assumptions can be named. the name given in the document can then be faithfully reflected inside coq. the tactic intros h1 introduces the first assumption a with the name h1. the final tactic apply ok is generated so that the proof is always accepted by the prover 2. this simple trick gives typechecking for free: any error in the initial document is automatically detected by the prover when processing the generated file. as each lemma represents a single step in the proof, tracking the origin of an error in the initial document is easy. the actual task of formally checking the proof consists in replacing all the applications of the axiom ok with appropriate tactics.



the third tactic simply introduces c with the name h2 in the assumption list. note that the generator takes a special care in introducing assumptions in the proper order. the assumptions introduced last are the ones displayed next to the conclusion. in our example, the closest assumption is h2, then p1 and then h1.



in the generation, the main degree of freedom concerns the visibility of the different subproofs. in natural deduction, if a proof p has n subproofs p1, p2,... pn, these subproofs are considered independent. for example, one cannot use the fact that the conclusion of p1 is true in the proof p2 without copying the whole proof. in a textual proof, the proof p1 is read before the proof p2. it seems then more natural to have a less restrictive policy. for this reason, the visibility rule we have implemented in our generation is that the conclusion of pi is visible inside pj for i< j and invisible outside p. a similar approach has been adopted by richard bornat for the box style proposed by fitch in.



conclusions are coloured in blue and assumptions in green. in order to keep the number of colours as small as possible, we have decided to use the same colour for variables and assumptions. like this, we have just three colours: red for names, green for what is assumed and blue for what is proved. note also that proof tags are not visible in the picture above. this is because proofs can be nested. so colouring a proof would automatically hide the colour of its subproofs. our solution is to colour at most one subproof at a time: the smallest subproof, if it exists, that contains the current selection. for example, if in the final coloured proof the assumption of the second subproof is selected, the whole second subproof is coloured in grey:



finally the labels coloured, tagged and coq at the bottom of the window allow the user to select the output he/she wants. so far, we have been using the coloured output. pressing the tagged label gives the tagged version of the text. it is the one that is saved on disk. the coq label gives the list of the generated conditions.



there have been attempts to get a more natural language to interact with provers. the first and most impressive one by far is the mizar project. other interesting attempts include[1,24,27,30]. following the terminology used in, these systems propose a declarative style of proving, while systems like coq offer a procedural approach. declarative scripts usually contain lots of formulae and are then closer to proofs on paper. unfortunately, these systems impose some strong restrictions on the way proofs should be written. in mizar, for example, the proof has to be given with the level of detail imposed by the system. as the system has very little automation, proof scripts are often too detailed for a human reader. a recent proposal aims at relaxing this constraint. in isar, some basic constructs are hard-wired. an example is the proof by case analysis, where the presentation of the different cases in the document has to follow the exact order in which the object was declared.



other interesting approaches include attempts to accommodate both procedural and declarative styles[9,16,29], extract proof texts from tactics, extract proof texts from proof objects[2,7,23]. note that when provers have proof objects, it would be possible to automatically convert proof objects into our format in a very similar way as in[2,7]. the result would most probably be far too detailed. however, with some support for improving the presentation while keeping the proof script consistent, this reverse engineering activity could be an effective way to get readable proofs.



in this paper we have presented a very simple and flexible format for writing formal proofs. this format is independent of a particular prover. writing proofs is meant to be as natural as possible. with respect to the usual way of writing proofs, the author is only asked to explicitly indicate the proof structure. at each step it is then clear what the assumptions are and what the conclusion is. we have also presented a very simple user interface to help writing proofs in this format. with this interface, proofs are translated into our format by a simple colouring process.



in the introduction we have described three drawbacks of the usual loose connection between the published proof and its machine-checked version. the first drawback was that the computer proof usually only checks the final statement of the published proof. in our framework we get a tighter connection. every step of the published proof has been checked and for each step there is a corresponding lemma in the formal development. the second drawback was the difficulty of maintaining proofs. to ease maintenance a good practice is to always split big proofs into smaller pieces. our generating process enforces this practice as every lemma only covers a single step of the proof on paper. the last drawback was the difficulty of experimenting with slightly different versions of the final statement. in our case, the variations can be done directly on the published proof by changing the statement. when re-running the proof script, the lemmas that the prover fails to re-establish directly correspond to the steps that need to be fixed in the published proof.



some more work is still needed in order to turn our experiment into a realistic approach. first, the format has to be tested intensively against large proof developments. we are planning to use it to re-engineer our formalisation of floating-point numbers. second, the conditions that are generated are rarely provable automatically by coq. even if full automation is not our main goal, more tactics need to be developed in order to get a reasonable ratio of conditions proved automatically. finally, we are investigating the possibility of using directly a scientific editor such as texmacs to write proofs. this would give us for free the usual display for mathematical expressions. with a textual representation, notations as the one for integration or the one for matrices are known to be difficult to render.



