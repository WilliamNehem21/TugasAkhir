this paper describes a few of the strategies used in plover, an automatic property verification tool for haskell programs developed in connection with the programatica project. its objective is to demonstrate the feasibility of automatic verification of formally specified properties of computer programs. plover can provide assurance of many useful properties based upon the soundness of automated reasoning in a formal logic. plover specifically implements reasoning in p-logic, which is the verification logic of haskell98,



other examples of language-specific verification logics are acl2, a verification logic for common lisp, and sparkle, a verifier for clean 2.0. when assertions are formulated in a language-specific verification logic it is unnecessary to translate expressions and their asserted properties into another logical formalism, which may have a different type system, and with the attendant risk that errors may be introduced in the translation.



every predicate form definable in p-logic is subject to a typing discipline: a predicate is the refinement of a haskell type. p-logic provides basic constructions for unary predicates analogous to the constructors of haskell types. predicate constructions are formed with the arrow constructor(->), finite tupling, predicate constructor application and predicate disjunction, which is analogous to the sum-of-constructions by which data types are defined. additional predicate constructions go beyond the constructions of haskell types. these include predicate disjunction 2, predicate negation 3, predicate abstraction, least and greatest fixed-point constructions, and comprehensions that utilize formulas with quantified object variables in the specification of a predicate.



over two alternatives. notice the use of the data constructors as strategy constructors. a data constructor, when lifted to become a strategy constructor, is satisfied by a term built with the same data constructor and whose argument terms satisfy the respective strategy arguments given to the strategy constructor. note also the use of the id strategy as an argument to a lifted strategy constructor. id is a library strategy that always succeeds, leaving the current term and bindings unchanged. it is analogous to a wildcard designator in a pattern.



the first alternative of the whnf strategy is satisfied by an abs construction with any well-sorted subterms as arguments. the recursively defined alternative is satisfied by any var term and also by an app term whose rator is either a var term or an app term in weak head normal form. thus the recognition strategy excludes any app term that has an abs term as rator. there is no restriction on the rand subterm of an app construction.



the second definition is similar to the first, but adds the restriction that the rand of an app term must be in head normal form. since the allowed forms of the rator and rand subterms differ, an additional level of recursive definition is needed to accommodate both forms. finally, the third definition adds the restriction that the body of an abs term must have the specified normal form, as well.



notice that the last alternative listed in the definition of replace is separated by the operator symbol(<+) rather than the symbol(+). the symbol(<+) designates left-biased choice rather than nondeterministic choice of alternative strategies. since the pattern of the final alternative would match an arbitrary pair of terms, it overlaps the patterns of each of the rules that precede it, and is programmed to fire only as a default alternative.



some types uniquely determine the top-level structure of normal-form terms of the type. product types(finite tuples) and data types with only a single constructor have this property. structure-determining types see greater use in haskell programs than would be the case in many other languages.



a let expression constitutes a list of local definitions that scope over a single object expression. the order in which definitions are listed is semantically unimportant in haskell, as they scope over one another, as well. thus a set of definitions may be mutually recursive.



we have given a brief overview of strategies used in plover, an automatic verification tool for properties of haskell98 programs. the power of strategies for controlling rewriting is illustrated by the example of normalization strategies to achieve three, different normal forms for a simple lambda calculus. however, plover employs far more than normalization to verify haskell programs.



