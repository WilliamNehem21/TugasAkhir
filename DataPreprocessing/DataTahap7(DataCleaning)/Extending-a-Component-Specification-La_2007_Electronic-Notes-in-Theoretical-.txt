for this specification language(called timed csp-oz) we furthermore propose a method for analysing component interfaces and we define a formal notion of implementation, which canlike refinementbe used for substitutability checks. the analysis method is based on a semantics for the language in terms of timed automata(or more precisely, timed transition systems, since the semantics will not always yield a finite state automaton). in case of a finite number of states we can then use one of the timed automata model checkers for verification(e.g. kronos or uppaal).



based on this semantics we can furthermore use the notion of implementation associated with timed automata for timed csp-oz. the implementation relation for timed automata is inclusion of timed traces(language inclusion for words with time stamps). we define timed simulation conditions and show their soundness with respect to this relation. this opens the way for a stepwise proof of implementation. the paper is structured as follows. next, we start with a simple example of a timed csp-oz specification on which we explain the general idea and which will serve as an illustration of the main results in the next sections. section 3 gives a short introduction to timed automata. we then define the semantics for timed cspoz specifications in terms of timed automata. in section 4 we show how to analyse interface specifications in timed csp-oz with the timed automata model checker uppaal. section 5 gives timed simulation conditions which can be used to prove



variables of type clock can be declared as attributes of classes and may(under some restrictions) appear in predicates within method schemas. the following example shows an abstract specification of the interface of a watchdog component. a watchdog component should control a certain method note which is to be repeatedly executed within 10 time units after its last occurrence. an alarm can either be raised by a ring after the expiration of the deadline or after at least 8 seconds by using a flash signal. a component implementing this interface may choose one of these options. below, the component is specified as an object-z class.



after having introduced timed csp-oz by means of a simple interface specification, we are next interested in the analysis of such specifications and in the definition(and the checking) of an implementation relation between specifications. such a relation could be used for substitutability checks. to this end, we will first define a semantics for timed csp-oz specifications.



protocols of components are quite often described by finite state automata. here, we choose a similar formalism for our semantics, namely an extension of finite automata to time, called timed automata[1,4]. the timed automaton for a timed csp-oz specification will capture the complete behaviour of the specification, including the data dependent aspects covered by object-z. timed automata can, however, not be used to specify preand postconditions of methods, thus we do not directly use timed automata for interface specifications, only for their semantics.



timed automata are finite automata enhanced with clock variables which can be queried and reset on transitions. to ensure decidability of the emptiness problem(and thus allow for verification), the conditions on clocks are usually restricted. we will later fix similar restrictions on our z predicates over clocks to ensure that timed csp-oz can be safely mapped onto timed automata.



specification may contain a number of clock variables x1,..., xn and a number of clock given with values from the nonnegative reals r+. every timed csp-oz variables v1,... vm of other types. we then impose the following restrictions on the



these conditions ensure that timed csp-oz specifications can be mapped onto timed automata. for defining the semantics we next have to separate the clockless parts of the specification from those with clocks. we define cl(schema) to be the clockless part of a schema, i.e. the declarations and predicates over non-clock variables, cc(schema) to be the clock part of a method schema, cinv(schema) to be the predicate(s) of the state schema relating clock variables and other variables, and reset(schema) to be the set of clocks xi with predicates x'=0 in the schema. the events(or actions) of the timed automaton of a csp-oz specification will always



note that the semantics generates a particular class of timed automata: all transitions labelled with the same event have the same guards and clock conditions. because of simplicity, we have restricted the clock conditions of a method to be state independent. however, an extension of the semantics to clock conditions relating clock variables and predicates over non-clock variables can be achieved.



the formal semantics gives us the possibility of analysing interface specifications. provided the timed automaton has a finite number of locations(which is the case in our example) we can even use a model checker for the analysis. several model checkers for timed automata exist; here, we will use uppaal. to do so, we



for the first part, we have to make some global declarations of channels and clocks for uppaal. thus, for our watchdog we declare three channels note, ring and flash corresponding to the methods of the csp-oz class. we also define two global clocks xr and xf representing the clocks xr and xf in our specification.



holds. by describing the desired behavior of watchdog, we want to guarantee that after a certain time, an alarm is raised. that means that we must leave any state representing alarm= false after at most 10 time units. therefore we have to verify the formula



language inclusion for timed automata is in general undecidable. here, we give an approach to checking language inclusion of timed csp-oz specifications. the additional structure present in the specifications allow for a compositional language inclusion check, separately treating the csp and the object-z part. the check for the object-z part has to be carried out manually, the check on the csp part can be done by a csp model checker.



we start with developing timed simulation conditions for timed object-z specifications. these can be used to carry out an operation-wise proof of language inclusion between two timed object-z specifications. the conditions can be seen as one half of timed bisimulations, and are similar to those in approaches specifying components by preand postconditions of their operations. for showing a simulation relation between an abstract and a concrete object-z specification we have to give a relation r relating the state spaces of both specifications:



finally, these two results have to be integrated into one. so far, we have some means for showing an implementation relationship for the timed object-z parts and for the csp parts. these techniques can separately be applied to specifications if the implementation relationship is preserved under the operator that we use for combining the semantics of the separate parts, namely under parallel composition. the following theorem states exactly this property.



in this paper we have proposed an extension of csp-oz with features for specifying timing constraints on components. the extension has been minimal in the sense that we neither added a third formalism to csp-oz nor exchanged one of the notations which have already been integrated into csp-oz. the only extension is a new type for variables in object-z. we believe this to be an extension which makes reading and writing of specification particularly easy: once a designer is familiar with csp and object-z he/she can easily read and write timed csp-oz specifications.



example, how existing model checkers can in principle be used to analyse components interfaces and discussed simulation conditions for implementation relationships. this now gives us a high-level specification language for components which offers a richer set of facilities for modelling than timed automata do. the additional structure present in timed csp-oz specifications could furthermore facilitate static analysis of specifications which might prove fruitful for verification. by restricting our semantics to the traces model, we obtain a simple definition of timed simulations which is very close to the techniques and definitions used in the context of timed automata. nevertheless we want to deal with parallel composition of several components which calls for a more precise semantics. future work sees the expansion of our approach to the failures-divergences model of csp and the use of parallel composition and nondeterminism.



