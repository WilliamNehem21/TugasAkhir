we present a version of separation logic for modular reasoning about concurrent programs with dynamically allocated storable locks and dynamic thread creation. the assertions of the program logic are modelled by a kripke model over a recursively defined set of worlds and the program logic is proved sound through a kripke relation to the standard operational semantics. this constitutes an elegant solution to the circularity issue arising from lock resource invariants depending on worlds containing lock resource invariants.



we present a version of separation program logic for modular reasoning about shared-variable concurrent imperative programs with dynamically allocated storable locks and dynamic thread creation. following earlier work[8,9,11], the idea of the logic is that a lock can be used to protect a resource invariant which, conceptually speaking, is transferred from one thread to another. the resource invariant follows the movements of the lock itself, changing ownership through acquire and release operations. since the resource invariants associated with locks describe properties of heaps while locks are themselves(dynamically allocated and) stored in the heap, there is a tricky form of circularity that needs to be resolved in order to develop a model to show soundness of the logic. more specifically, since locks are dynamically



to sum up, we believe our new approach to the semantics and soundness is both semantically simple and useful since it solves the circularity issues directly and soundness is proved w.r.t. standard operational semantics. we demonstrate our approach on a simple but illustrative language and also include an example of using the resulting logic.



also, in order to keep things relatively simple, the language does not support any freeing of resources, be it regular memory cells or locks. the latter permits us to omit the entire system of fractional permissions found in previous works(e.g. and).



in order to express lock properties, we use two predicates: ex(e, p) and locked(e, p). the first affirms that the interpretation of expression e points to a lock in the heap, with resource invariant p. no hypothesis is made as to whether the lock is available or not. locked(e, p) is similar, with the additional affirmation that the current thread owns the lock.



the side condition(*) stipulates that all occurrences of the predicate variable r in p are guarded, i.e. that they only appear under a locked or ex predicate. more formally, using the notation that p[] is a formula with a hole which can be filled by a predicate q, written p[q]:



this is a departure from the way heap sharing has been handled in concurrent separation logic. instead of having a general shared space that is not private to any thread and that everybody can manipulate, we include duplicate values of the shared memory cells in relevant private spaces. this reflects more accurately the scope of the lock variables, and permits much finer granularity, with locks being known only to a limited number of threads.



we prove soundness separately for each proof rule, in each case using strong induction on the index of the safety predicate. the proofs are relatively straightforward, consisting mostly in unfolding various definitions, considering all reduction steps that can be taken from the initial state and then proving safety of the new state. the following result takes care of the cases where a reduction happens in a thread other than the one we have just added.



future work includes extending the language with new features, for instance storable procedures, which we believe would be straightforward to add. the soundness proof also appears to lend itself particularly well to formalisation and automated machine proving, e.g. using the work by benton et al..



