we present a method for testing the implementation of graph transformation specifications focusing on test case generation for graph pattern matching. we propose an extensible fault model for the implementation of transformations based on common programmer faults and the technicalities of graph transformations. we integrate traditional hardware testing(combinational circuits) and software testing techniques(mutant generation) for generating test cases.



in order to detect conceptual flaws in transformations, typically, either verification(termination, confluence, semantic correctness, etc.) and/or testing techniques are applied. in general, verification is mainly used in the design phase of transformations, while testing is appropriate in the implementation phase, when a stand-alone transformation plug-in has been created for the corresponding specification. testing has typically two main advantages:(i) it can be used for large models without combinatorial explosion,(ii) tests are executed directly on the implementation, which in case of model checking often cannot be guaranteed.



we propose a fault model to incorporate potential flaws in the implementation. test generation is performed by using a combinational circuit representation derived from the preconditions of graph transformation(further: gt) rules. possible faults are mapped to stuck-at-faults(a signal lines is assumed to be stuck at a fixed logic value, regardless of the inputs), as there are various hardware testing methods for the combinational circuit and this fault model. with the help of systematic fault injection, single binary(stuck-at-faults) faults are inserted into the circuit and test vectors are calculated. the exact test cases are generated by mutation rules in the form of test graphs.



example 2.1 according to the metamodel, a well-formed instance of a finite automaton is composed of states and transitions. a transition is leading between its from state and to state. the initial states of the automaton are marked with init, the active states are marked with current edges. special, e.g. colored states, are definable by inheritance.



graph transformation is a pattern and rule based formalism for the manipulation of graph models. on rule application, a graph is transformed by replacing a part of it by another graph. with the definition of a metamodel and a set of rules over that metamodel the dynamic changes of an initial model can be described. on rule application, a graph is transformed by replacing a part of it by another graph. a graph transformation rule r contains a left-hand side graph lhs, a right-hand side graph rhs, and negative application condition graphs nacs. the lhs and



pattern matching criteria the logical criteria for the successful matching of each rule is extracted from the transformation specification in the form of a boolean expression. the formula is satisfied, when a successful matching is found for the belonging gt rule. the idea is to reuse existing techniques for hardware testing, therefore the boolean formula is depicted in form of a combinational circuit, for which traditional test generation algorithms can be applied.



test generation with systematic fault injection, single faults are injected into the inputs of the circuit. for its simplicity, the method of boolean differences[16,21] is applied here which generates binary test vectors for stuck-at-faults in the combinational circuit representing the pattern matching. the method of boolean differences guarantees that with the generated test vectors the fault is observable on the output of the circuit. if a variable in the generated test vector is one, then the corresponding condition is satisfied, else it is not satisfied. for further details see section 4.2.



test set optimization the set of produced test graphs should be examined for test optimization, in order to create a more compact set of test cases, it should be optimized. naturally, it has to be decided, whether the aim is only fault detection or diagnosis as well. in the latter case, test compaction can only be carefully applied, not to loose information for diagnosis.



the general, formal criteria for a match are presented in. the idea is to describe these criteria for each gt rule in the rule set of the specification, and to create a combinational circuit representation of this boolean formula, which will supply us with the usability of traditional testing methods. the formula evaluates to 1, if a match fulfills the defined criteria meaning that the pattern matching was successful.



the dangling edge condition: all nodes and edges in lhs of a gt rule r but not in rhs are deleted when the rule is applied. when applying this rule r on a instance graph, all the edges to and from these nodes which are not part of the match are the dangling edges. the dangling edge condition is fulfilled, if no dangling edges will be produced on rule application.



the nac condition: if only single, non-hierarchical nac graphs are used, the nac condition is satisfied, if its elements cannot be found in the match. the boolean formula can be written for the nac graph as above, and it is inverted before connecting it to the pattern matching criteria. in case of hierarchical nac conditions, the boolean formula of a lower level nac is inverted before connecting it to the higher level condition. more on this topic can be found in.



an automated formal verification technique is presented in[18,7,24] based on various model-checking techniques to prove semantic correctness criteria in graph transformation systems starting from a concrete initial graph. a static analysis technique is proposed in to investigate the correctness of graph transformation systems by using a petri net abstraction. a tool for checking inductive invariants has been presented recently in. to guarantee the preservation of constraints during model transformations, aspect-oriented techniques are proposed in.



the testing of code generators specified by graph transformation rules has been addressed in the literature by adapting well-known test strategies such as test case generation by model checking or the classification tree method. in tests are generated for black-box implementations of web services based upon domain partitioning. while the overall goal i.e. to derive test cases directly from gt rules is similar, we assume that implementation is strongly linked to the gt specification, furthermore we use systematic fault injection and combinational circuit testing techniques in the background.



our aim is to extend our testing method with the consideration of rule application, the rhs or postcondition of gt rules as well. secondly, we plan to improve the fault model with control flow faults and design methods for testing the control structure of graph transformations as well. furthermore, more work has to be done in the area of test set optimization. it is a future goal to examine the usability of our method for not only fault detection, but also for diagnosis as well, and to try out our method on graph transformation implementations.



