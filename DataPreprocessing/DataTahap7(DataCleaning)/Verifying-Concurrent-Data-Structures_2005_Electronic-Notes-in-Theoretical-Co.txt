concurrent implementations of data structures are designed to allow many processes to execute operations on a data structure at the same time. to prove the correctness of such implementations, we must prove that all possible interleavings of the atomic steps of these operations will produce correct results. linearisability is widely accepted as the appropriate correctness criterion for concurrent data structures, but does not appear to be used widely in mechanical proofs.



the relationship between h and s can be explained more clearly by augmenting h with linearisation points corresponding to the points at which operations in h are deemed to occur. let x.do opp(args) denote the linearisation point for an operation with invocation x.opp(args), which must occur after the invocation, and before any matching response. if h' is an augmented history obtained by adding these linearisation points to a history h, we can construct a linearisation of h from h' as follows:



the push by process 2 precedes the pop, but neither is ordered with respect to the push by process 1, and the pop is pending. this history can be linearised in five different ways by either leaving the pop incomplete or completing the pop by adding either s.popok2(a) or s.popok2(b), and then linearising the push operations appropriately.



the actions from various processes can be interleaved in all possible ways that are legal with respect to the stack specification. thus, the executions produced by the stack ioa are precisely the augmented histories described in section 2, and are linearisable for the reasons given there. we can show that the canonical automata construction described above produces an ioa that generates exactly the linearisable histories for a given data type; see for details.



the push operation creates a new node and stores the value to be pushed in its val field. it then attempts to link the new node into the list. it takes a snapshot of head in the local variable ss, sets the next field of the new node to this value, then attempts to make head point to the new node. this will produce the correct result only if head has not changed since the snapshot was taken, so a cas 9 is used to atomically test whether head is still the same as ss and if so change it to n, in which case the operation is complete. if head has changed, the operation loops back to line 3 and tries again.



that the stack was empty. otherwise, pop copies the next and val fields from the node pointed to by ss, and attempts to update head to point to the value in the next field of the node it points to. this will only produce the correct result if head has not changed since the snapshot was taken, so a cas is used to atomically test whether head is still the same as ss and if so change it to ssn, in which case the operation is complete and lv can be returned as the popped value. if head has changed, the operation loops back to line 1 and tries again.



a subtle point, not apparent in the code, is that the correctness of the algorithm relies upon the fact that a successful pop operation does not free the memory used by the popped node, since other processes might also be trying to pop that node. the algorithm would also be correct if memory was recycled by a garbage collection mechanism that only reclaims storage when there are no pointers to it, but then to claim that the implementation is lockfree, we would have to show that the garbage collector was lock-free(see). other ways of recycling memory use version numbers to detect when storage has been recycled(e.g. see).



we are also interested in finding ways in which we can simplify our proofs by using constructive approaches based on refinement. this might involve identifying common steps in the construction of nonblocking algorithms, and perhaps using a different formalism such as action systems. a similar endeavour has been undertaken by abrial and cansell, using event b(see).



