quantum computing is a research field that investigates all aspects of computation considering the quantum nature of the physical world. unlike conventional computers, a quantum computer presents some characteristics like superposition and entanglement, which enable quantum computers to consider and manipulate combinations of bits simultaneously, enabling a faster quantum information processing when compared with conventional computation. although there are no quantum computers for general purpose, there are several works[15,29,13,14,27,18,7] on different approaches to process quantum information.



in quantum computing, the basic information unit is called a quantum bit or qubit. the qubit presents an essential difference if compared to the bit, because it is not confined to the basic states of the classical bit, it can be effectively in both states(0 and 1) at the same time. several researchers have studied ways to handle particles which are capable of providing the quantum characteristics. however, there are still many challenges in the physical manipulation of elements in microscopic scale.



a characteristic called quantum parallelism. essentially, because of state superposition, a qubit can assume the 0 and 1 values at the same time. this property is explored on quantum algorithms, which can obtain an exponential speedup(on theory), considering the characteristic that allow to handle several possibilities in parallel.



on quantum computing, one can perform two forms of operations: measurement operations and unitary transformations. the measurement operation is related to a way of extracting information from the quantum state. unitary transformations refer to operations that transform the current quantum state into another, similarly to when we apply a function in classical computing.



the use of monads in quantum computing has been explored in several works[20,30,33,32], usually applied to functional languages. a different approach was used in calegaro and vizzotto, where concepts of monads were applied in java through the use of closures. closures enable the use of anonymous functions(or lambda expressions) and we also added them as an extension to fj, adapting the proposal of bellia and occhiuto, which is slightly different from the java implementation. this approach was used for simplicity.



the modeling of quantum bits can be thought of as a type of side effect, since their non-deterministic nature. more specifically, qubits can be modeled as a type of monad. the idea behind this monad is to build the space of quantum states, mathematically represented by a vector of complex numbers holding the probability amplitudes of qubits, enabling the transformation of states through quantum gates, which are represented as an unitary matrix and can be applied through the bind monadic operator.



after preparing the language with the necessary tools to create quantum states and handle its probability amplitudes, it is possible to define the bind operator, syntactically represented in fjquantum as>>=, which is responsible for applying transformations over the quantum state. the quantum transformations can be seen as quantum gates applications on qubits, similarly to information processing in classical computing. the next example shows how to use this operator.



first, we show a class that implements a series of universal reversible quantum gates. line(2) shows the not method representing the quantum version of the classical operator, which is applied over one qubit. line(11) shows the hadamard method, which represents an operator responsible for transforming a qubit from a basic state into a state superposition. line(21) shows the controllednot method representing a conditional not.



emphasizing the creation of a superposition state, in the hadamard method, on line(14) and(17) we can note the use of the mplus and scalar product operators, explaining the reasons to create these operators in the proposed language. in the case of controllednot method we can see the language performing operations over more than one qubit. it is important to note the way that the operator was created, returning a lambda expression, allowing to work with the>>= composition operator similarly to what happens with functional languages.



this algorithm aims to determine whether a boolean function is balanced or constant. if f(0)= f(1), then the function is constant, otherwise is balanced. in a classical algorithm, to solve this problem it is necessary to evaluate the function f twice, i.e. f(0) and f(1), and then comparing the results. using the quantum approach, the problem is solved consuming only one verification, taking half of time when compared to the classical version by using the principle of superposition, which allows the evaluation of two entries at the same time.



a quantum programming language is an important tool to work and to formally reason about quantum algorithms. for this reason, there is an effort on investigating semantic models and quantum programming languages, despite the absence of quantum hardware. quantum languages are proposed, in general, using the imperative or the functional paradigm.



the work of vizzotto et al.[30,32] has inspired the approach used in this work, through the use of monads for simulating quantum computing. besides that, the work of calegaro and vizzotto presents a starting point to use monads in objectoriented languages.



