interactive theorem provers have been enhanced with numerous automatic proof procedures for different application domains. however, when an automatic proof attempt fails, the user usually gets little information about the reasons. it may be that an additional lemma needs to be proved, that an induction hypothesis needs to be generalized, or that the formula one is trying to prove is not valid. in such cases an automatic tool that can refute non-theorems would be useful.



i.e. involving no more than a given number of elements. a standard sat solver can then be used to search for a satisfying assignment, and if such an assignment is found, it can easily be transformed back into a model for the hol formula.



satisfiability can be tested with an off-the-shelf sat solver. to this end translations into dimacs sat and dimacs cnf format have been implemented. the translation into sat format is trivial, whereas cnf format(supported by zchaff, berkmin and other state-of-the-art solvers) requires the boolean formula to be in conjunctive normal form. we translate into definitional cnf to avoid an exponential blowup at this stage, introducing auxiliary boolean variables where necessary. a more sophisticated cnf conversion might further enhance the performance of our approach. isabelle/hol runs on a number of different platforms, and installation should be as simple as possible. therefore we have also implemented a naive dpll-based[5,21] sat solver in isabelle. this solver is not meant to replace the external solver for serious applications, but it has proved to be efficient enough for small examples. hence it allows users to experiment with the countermodel generation without them having to worry about the installation of this translation, consisting of roughly 2,800 lines of code written in standard ml, is available in the isabelle/hol theorem prover. a standard sat solver can be used to search for a satisfying assignment for the propositional formula, and if such an assignment is found, it can be transformed into a model for the hol formula. this allows for the automatic generation of finite countermodels for non-theorems in isabelle/hol. a similar translation has been discussed before; the main contributions of this paper are its extension to higher-order logic and the seamless integration with a popular interactive theorem prover.



so far we have applied the technique only to relatively small examples. the applicability of the algorithm is limited by its non-elementary complexity. we believe that the algorithm can still be useful for practical purposes, since many formulae have small models. to substantiate this claim, and to further evaluate the performance of our approach, we plan to carry out some larger case studies, possibly from the area of cryptographic protocol verification[16,17].



