of the language, although they of course import the system module m whose execution the strategies in sm control. this strict division of labor between m and sm has some advantages. on the one hand, the strictly declarative nature of m is preserved. on the other, this separation facilitates modularity, since the same system module m can have many different strategy modules sm for different purposes. in elan, since it is possible to include strategy expressions within a rewrite rule definition, this separation is not enforced by the language. however, we believe that it is possible to develop elan modules following the separation methodology that we advocate here.



substitution s and using e1,..., en as strategy expressions to check the rewrites in the condition of l. the number of rewrite condition fragments appearing in the condition of rule l must be exactly n for the expression to be meaningful.



with the previous combinators we cannot force the application of a strategy to a specific subterm of the given initial term. in particular, the scope of the substitution in the(a)match combinators is only the corresponding condition. we can have more control over the way different subterms of a given state are rewritten by means of the(a)matchrew combinators. when the strategy expression..., expn are strategy expressions(over the language of labels provided by m), where the identifiers can appear, thus allowing(mutually) recursive definitions. the basic idea is that these strategy declarations provide useful abbreviations for strategy expressions e that the user can then utilize in a(strategy rewrite) command srew t using e, which rewrites a term t using a strategy expression e.



syntax defined in the system module m. when a strategy identifier is declared(with the keyword strat), the types of its arguments(if any) are specified between the symbols: and@. after the symbol@, the type of the terms to which this strategy can be applied is also specified.



applying a strategy to a term is a task that, in the process of rewriting, can give rise to more tasks. therefore, the sort tasks represents sets of tasks by means of an associative, commutative, and idempotent operator written as juxtaposition, with identity the empty set none. solved tasks are of the form sol(t), meaning that the term t is a solution. sometimes, these solutions are only the intermediate results in a task that must be continued with another process; therefore, there is also some syntax to represent continuations as terms of sort cont.



the treatment of conditional rules is much more complex, because we need to make sure that each solution satisfies the rewrites in the condition using the appropriate strategies. moreover, we need to guarantee that no solution exists when returning the empty set. for these reasons, we make use of a continuation that handles this situation. let us consider a conditional rule of the form



the following rules describe the behavior of the mrew continuation. for each solution obtained from the previous task, this continuation finds the appropriate fragment to be rewritten using the next strategy in the strategy list. when the strategy list is empty, the continuation simply takes care of rebuilding the whole term by putting together the solution inside the appropriate contexts.



in our rewriting semantics, the initial terms denoting the application of a strategy to a state term have the form<e@ t> and are of sort task. when this term is rewritten using the rules described in the previous section, new tasks are created, so that rewriting takes place at the level of the sort tasks representing sets of tasks. those tasks(at the top level) of the form sol(t) represent the solutions obtained up to the moment. then, the abstract function sols mentioned in section 2 is defined in our case as follows: for a term w of sort tasks, sols(w) is the set of terms t such that sol(t) is a subterm at the top of w.



by taking advantage of the reflective properties of rewriting logic, which allow to consider metalevel entities such as theories as usual data, the transformation described in section 4 could be implemented as an operation from rewrite theories to rewrite theories, specified itself in rewriting logic. more specifically, we could write this kind of transformation as an extension of full maude, as other theory transformations described in[4, chapter 15]. full maude is an extension of maude, written in maude itself using the features of the predefined meta-level module, which provides an efficient implementation of the reflective features of rewriting logic. in particular, by going to the metalevel, the getmatch and getamatch could be implemented by means of the descent functions metamatch and metaxmatch provided in meta-level as generic operations for matching, either at the top or at all possible positions in a term, together with the operations up and down that relate the object level and the metalevel.



application of a nonconditional rule is now based on the metaxapply descent function. in addition, the apply-everywhere and apply-top auxiliary operations collect in a single term all the possible results for the different ways of matching, either due to finding the same pattern in different positions of a given state term, or to structural axioms in such a term(such as commutativity, for example). instead of returning sets of matches, as the operations getmatch and getamatch we have previously considered in our transformation, the descent functions metamatch, metaxmatch, metaapply, and metaxapply have a natural number argument which is used to enumerate all the possible solutions. the same technique appears as the fourth argument of the operations apply-everywhere and apply-top.



