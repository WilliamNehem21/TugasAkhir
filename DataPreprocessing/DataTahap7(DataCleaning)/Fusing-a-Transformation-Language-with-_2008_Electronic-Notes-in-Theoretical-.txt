practical applicability of our prototype on a series of common, framework-specific analysis and transformation problems. in sec. 4, we discuss the implementation details of our prototype. in sec. 5, we cover related work. in sec. 6, we discuss some trade-offs related to our technique before we conclude in sec. 7.



our prototype system is available as a stand-alone, command-line application based on eclipse, and as a reusable eclipse plugin. in stand-alone mode, the system performs source-to-source transformation. the user supplies the path of a project and a script to execute. the scripts use the ffi to traverse the project directories and to parse source files, to obtain their ast. after rewriting, the scripts use the ffi to write modified asts back to disk, as source code. in plugin mode, interpreter



patterns are written using prefix notation on the form simplename("b"), and can contain variables, e.g. simplename(n), where n is a term variable. a term is a pattern that does not contain variables. lists are written as[1,2,3]. terms are built(instantiated) from patterns using the build operator(!):!methodinvocation(obj, name,[],[]), where obj and name are variables.



the primitive traversal operators one, some and all are used to traverse terms by local navigation into subterms. all(s) applies the expression s to each subterm of the current term, potentially rewriting each. all(s) succeeds iff s succeeds for all subterms, e.g. all(!1) applied to the term[1,2,3] gives[1,1,1]. one(s) and some are similar, and applies s non-deterministically to exactly one or as many as possible but at least one subterm, respectively. both fail iff s never succeeded.



strategies may be named and parametrized, e.g. try(s)= s<+ id defines a strategy try(s) that attempts to apply s, and defaults to id if s fails. generic traversal strategies can be built from the primitive traversal operations, e.g. bottomup(s)= all(bottomup(s)); s and topdown(s)= s; all(topdown(s)). a rewrite rule r: pl(x)-> pr(x) with name r, left-hand side pattern pl(x), and right-hand side pattern pr(x), x symbolizing term variables, is syntactic sugar for r=?pl(x);!pr(x). a where(s)-clause temporarily saves the current term, applies s to it, then restores the current term. the clause fails iff s fails. wheres



in this section, we motivate the applicability of our system by showing some framework-specific analyses and transformations. the examples in this section illustrate what an advanced framework developer with a good working knowledge of language processing and stratego could implement. however, stratego is capable of performing significantly more advanced analyses and transformation than shown here. see[15,4,10] for some examples.



software projects of non-trivial size always adopt some form of(moderately) consistent code style to aid maintenance and readability. we are concerned with checking for proper implementation and proper use of domain abstractions. consistency of implementation may be improved by encouraging systematic use of particular idioms. the following idiom is taken from the ast implementation in ecj.



totem propagation is a kind of data-flow analysis where variables in the source code are marked with annotations, called totems. these assert properties on the variables which are later used by other analyses and transformations. a meta-program will perform data-flow analysis and propagate the asserted totems throughout the code, following the same principles as constant propagation.



all dimensions are compatible for the first two operations, but not for the final z.mult(m,w). the matrix operations in mtj will verify dimensions before calculating and throw exceptions if the preconditions are not met. performance-wise, this is costly, and latent mismatches may lurk in seldom used code.



to alleviate this problem, we can apply a totem propagator which knows how to propagate and verify the dimension of matrix operations. initial dimensions can be picked up from programmer-supplied assertions(on the form of a comment//@dim(m,4,3)) or from the variable initialization. whenever a dimension is asserted for a variable in the code, a new, dynamic rule dimensions: name-> dim is created that remembers the asserted dimensions dim for a variable name. dynamic rules are like normal rewrite rules, except they can be introduced, updated and removed at runtime. if an existing dimensions rule with the name left-hand side already exists, it is updated to a(potentially) new dim. this rule can then be applied(and updated) when propagating the dimension totem across a transposition:



the where clause is a rewriting condition which ensures that the mult call is on the correct data type and that the dimensions are compatible. this rewrite rule is all that is needed to turn the analysis from sec. 3.2 into an optimizing code transformation.



the ecj ast is a class hierarchy consisting of abstract and concrete classes. for example, all expression nodes, such as infixexpression, inherit from the abstract expression class. the root node of the hierarchy is the abstract class astnode. the ast hierarchy is adapted to the term interface expected by the rewriting engine using the pom adapter.



the getprimitivetermtype() method returns an integer specifying which primitive term type is represented by a given iterm object. most ast nodes are application nodes. an application c(t0,..., tn) consists of a constructor name c and a list of subterms t0 through tn. the number and types of the subterms are given together with the constructor name in a signature, e.g.



languages for refactoring such as jungl and contract provide both program analysis and rewriting capabilities. jungl is hybrid between an ml-like language(for rewriting) and datalog(for data-flow queries) whereas contract is based on prolog. jungl supports rewriting on both trees and graphs, but is a young language and does not(yet) support user-defined data types. stratego is a comparatively mature program transformation language with sizable libraries and built-in language constructs for dataand control-flow analysis, handling scoping and variable bindings, and pattern matching with concrete syntax(not demonstrated in this paper) that comes with both a compiler and interpreter, and has been applied to processing various other mainstream languages such as c and c++.



a related approach to rewriting on existing class hierarchies is presented in tom. tom is a language extension for java that provides features for rewriting and matching on existing class hierarchies. recent versions also support generic traversals in the style of jjtraveler, but its library of analyses is still rather small.



it works by adding a new match construct to the java language that is expanded by the tom pre-processor into java method calls. a generator, gom, is available for generating classes that implement term structures. these are specified algebraically, much like the signatures of stratego.



high-level analyses are also provided by engler et al, where a system for checking system-specific programming rules for the linux kernel is described. these rules rules are implemented as extensions to an open compiler. our system is different in that it can also perform arbitrary code transformation, and that the language we use to implement our rules is a feature-rich transformation language designed for language processing. for language processing problems, stratego has the advantage of a sizable library of generic transformations, traversals and highlevel data-flow analysis, in addition to its novel language features. the net result is that transformation code becomes both precise and concise.



recent research has provided pluggable type systems, style checkers and static analysis with scripting support. the appealing feature of our system, and that of jungl and contract, is that we can also script source code transformations based on the analysis results. the tradeoff with using a domain-specific language for scripting is that the same language features that make the language powerful and domainspecific also make it more difficult to learn. this may be offset in part by good documentation, and a sizable corpus of similar code to learn from.



