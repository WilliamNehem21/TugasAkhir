this paper identifies and presents an approach to software component-level testing that in a cost effective way can move defect detection earlier in the development process. a department at ericsson ab introduced a test automation tool for component-level testing in two projects together with the concept test-driven development(tdd), a practice where the test code is written before the product code. the implemented approach differs from how tdd is used in extreme programming(xp) in that the tests are written for components exchanging xmls instead of writing tests for every method in every class. this paper describes the implemented test automation tool, how test-driven development was implemented with the tool, and experiences from the implementation. preliminary results indicate that the concept decreases the development lead-time significantly.



the method used for answering the first two questions was a combination of analysis of lessons learned from previous improvement attempts together with a thesis study on how to increase the test efficiency at the department. the thesis study included qualitative and quantitative enquires, analysis of project statistics, and a literature study. answers to the other two questions were captured from qualitative and quantitative interviews with users of the introduced concept.



commands and no looping) and more importantly, it was not properly integrated with the development process. when the department had realized this, the earlier mentioned thesis study evaluated the test process with the purpose to identify tool and process changes that would increase the test efficiency. the thesis study showed that the cost of finding and fixing defects increases significantly the later in the development process they are found. this is also considered a common fact in software development,,. since the thesis study also discovered that the developers normally put little effort on testing isolated components, the thesis suggested that this is where to focus the improvement efforts.



after determining that the improvement efforts should focus on the basic test level, the thesis study determined that the main reasons for why the developers at the department did not basic test all functionality was because of insufficient test tools(e.g. dailytest) and process deviations when the deadline pressure was high due to delayed schedules. when the development activities were delayed, the projects tended to deliver the code untested hoping that it in a miraculous way would work anyway. likewise, this phenomenon seems far from uncommon in the software industry,.



after providing some background information, sections 3.1 and 3.2 give a technical tool description and section 3.3 describes how the tool was integrated with the development process at the department. after that, section 3.4 lists some observations and lessons learned and finally, section 3.5 presents the expected lead-time gains from introducing the concept.



next, the department needed to choose a language to write the test cases in. the major benefits of using standard script languages as for example visual basic and javascript are that programmers tend to be less error-prone compared to when using system-programming languages. still, the department chose to use c++ as test case language. firstly, because the developers do not need any training on how to use it since they write the product code in it. secondly, c++ has the power to handle features that are not included in the actual tool, e.g. it is possible to make direct calls on functions in the product code when the tool has no support for it implemented. finally, when the test cases are written in the same language as the product code, the developers can take advantage of the programming tools already available,.



just providing a good tool does not ensure successful test automation; a tool only becomes as good as the people using it. since this tool was to be used with tdd(see section 2.1), the test cases should be written before the code. as earlier mentioned, the department introduced tdd on a component level instead of on a class level, i.e. the developers construct a set of test cases for each component instead of a set of test cases for each class. the test strategy was to capture all inputs and outputs of each component. thereby, the tests represent the external design of each component. this also led to test cases that could serve as a part of the design documentation, replacing some of the old design(e.g. component specifications). the result of this was a more thorough design(in comparison to plain english, c++ does not leave room for misinterpretations) and that some design time could be saved when being able to remove some of the old design documentation.



another challenge the department had to address was to implement the new basic test concept on products that already existed since several years and therefore, the components contained a lot of old functionality that did not have such tests. since developing tests for all old functionality when introducing the tool would be far too costly for a single project to handle, the department chose only to develop tests for new and modified functionality. henceforth, the strategy was to develop tests for more and more of the old functionality during upcoming projects(i.e. in future releases of the product).



... what gets measured gets done,. when the department started the introduction of the new concept for basic test, the target projects gave it modest attention. however, when the projects started measuring the progress for number of test cases developed and passed, the usage rates increased.



... beware of attempts to deviate from the agreed process. when in timepressure, projects tend to neglect some activities which might give near-time benefits but that might be devastating in the long run. therefore, such deviations should not be allowed without being agreed on by all involved



... test tools easily become the excuse for every problem. reasons for a problem can be in either the test tool, the development environment or in the application under test; still, the basic test tool became the scapegoat for most problems since it is in the tool the problems first are discovered no matter where they origin.



... benefits from test automation are hard to obtain in the first project release. other reports support this experience by claiming that upfront costs eliminate most benefits in the first project and benefits from regression testing are usually not realized until the second release.



... test automation should be introduced in small steps, e.g. as a pilot project to avoid taking unnecessary risks(if something is introduced in the wrong way but only in small scale, the cost of fixing the problem is most likely lower). this advice is also given in the research literature,,.



... minimizing maintenance costs is the most difficult challenge in test automation. the test cases must be robust to changes during bug fixes and in new product versions. since this is hard to achieve, the most common problem in test automation is probably uncontrolled maintenance costs.



test case generators are the most advanced test automation tools. they exist in several variants: structural generators(generate test cases from the structure of the code); data-flow-generators(use the data-flow between software modules as base for the test case generation); functional generators(generate test cases from formal specifications); and random test data generators. test case generators can generate several test cases fast but are still not always more cost-effective since expected results need to be added manually. further, the generated test cases/executions of the test cases must also be checked manually to verify that they test the right functionality.



first, the development process that the developers follow needs to be mature enough. if the process is poor, test automation will not help,. preferably, the test automation effort should be easy to adapt to current practices; if the change is too great, the risk for resistance among the developers increases. furthermore, if the developers do not want to work as directed, they will not. at the department, the developers were aware of that neglecting basic test results in increased verification lead-time. therefore, they were open to improvements in basic test. second, the managers must be committed to the new methods because it is they that have to grant the upfront costs with introducing test automation(that most likely will impact short-term budgets and deadlines negatively). test tool costs is just the tip of the iceberg,.



the ericsson department introduced a new test automation tool incorporated with an alternate approach to test-driven development(tdd), i.e. tdd on a component level where the interfaces comprise socket connections exchanging xml data instead of classes and methods. with such an approach to test-driven development, robust and uniform component interfaces make test automation easier.



the main characteristic of the tool is that it uses c++, the same standard programming language as the developers write the product code in, because the developers are already familiar with it, it is more powerful than a script language, and the developers can take advantage of programming tools already available(e.g. compilers and debuggers).



the developers that have used the concept have estimated that the project lead-time will decrease more and more for each new project version that uses it(see section 3.5). further, preliminary project evaluations indicate significantly decreased fault rates from the introduction of the new concept.



