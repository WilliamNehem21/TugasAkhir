in section 2 we define the concept of reduction and briefly explain its use in complexity theory and cryptography. in section 3 we explore the mutually dependent concepts of refinement and implementation. in section 4 we examine how refinement can be viewed as a special case of reduction; the more useful and general view of reduction as a special case of generalised refinement is set out in section 5. finally, we draw some conclusions and indicate areas for further research.



many process algebra and relational refinements and standard z refinement. however, the implication is really in the less useful direction: it positions the problem we can solve as a special case of the one which we would like to solve. we need, then, to look for the other direction, namely: how we can generalise refinement relations in order to characterise(and ultimately, to verify) a wider class of reductions.



the particular instance of io-refinement for z abstract data types is described in and[10, chapter 10]. to define io-refinement for our generic notion of refinement, we need notions of input/output transformers, and to assume an operation in our specification language that allows pre-composing a specification with an input transformer, and post-composing it with an output transformer. the input/output transformers, and the composition operation, which we will denote o, will have different instantiations in different specification notations; e.g., see[7,10] for the z version of input/output transformers and the>> operator that is used to compose them with z operations and with each other.



this normally implies that it is total, i.e., it transforms every possible input of s' into some output of s, and that ot is injective: it transforms outputs of s into outputs of s' while retaining enough information to allow the abstract outputs to be reconstructed.



vided to the user. this is reflected in definition 4.2: it defines io-refinement modulo it and ot, where they appear both as a part of the notion and its characterisation, and they are not(explicitly or implicitly) existentially quantified.



>> is restricted to pairs of schemas with perfectly matching output/input names. the operator>> is indeed monotonic with respect to refinement in this context; composition of contexts corresponds to composition using>> of the io-transformers. identities also exist for each type.



example 5.6 reduction(as in definition 2.1) is refinement with a penalty determined by the complexity of the reduction algorithm. note that here the penalty function is not compositional i.e., the penalty of combined reduction steps cannot be computed from the penalties of the individual steps 13. however, in most cases only the complexity class of the reduction algorithm is relevant, and classes of interest(e.g., polynomial) are closed under this substitution.



example 5.8 if io-refinement holds in both directions with bijective transformers, we have isomorphic specifications. however, it is also possible for refinement in one direction to be achieved using an input transformer, and in the other direction using an output transformer, in which case their composition clearly is not the identity for all specifications.



13 consider a linear time algorithm ap with an oracle for q. its unit steps may be due either to oracle calls or to other elementary operations; thus, we abstract away from how many calls it makes to the oracle for q. if we substitute for the oracle an algorithm aq that solves q, we cannot determine the resulting complexity from the individual complexities. for example, if ap uses a single oracle call, and aq is quadratic, then the overall complexity



