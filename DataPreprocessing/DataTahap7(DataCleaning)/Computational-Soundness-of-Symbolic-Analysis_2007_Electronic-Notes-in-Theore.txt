secure(the most famous one has been exposed by g. lowe in, some of them are listed in). the good news about this approach is that a rich collection of automatic verification methods and tools have been developed[21,8,7,2].



in the computational approach, cryptographic primitives operate on strings of bits and their security is defined in terms of high complexity and weak probability of success(e.g. for encryption) of any attacker. protocols as well as attackers are randomized polynomial-time turing machines. this computational approach is recognized as more realistic than the formal approach, however, its complexity makes it very difficult to design automatic verification tools.



in the last years, several works have focussed on bridging the gap that separates these two approaches. in their seminal paper, abadi and rogaway prove that a notion of message indistinguishability in the symbolic model is valid in the computational model provided that the encryption scheme used to implement messages satisfies semantic security. this means that if two messages are not distinguishable in the symbolic model, then their computational implementations cannot be separated by a turing machine in a reasonable(polynomial) time. this paper deals with passive attackers that can only eavesdrop but not alter or block messages.



soundness of symbolic analysis has been proven in the black-box reactive simulatability(brsim) framework by backes, pfitzmann and waidner. recently this result has been extended to include hash functions in the random oracle model, it has also been proven that such an extension is not possible in the standard model. given the strength of the brsim model, this impossibility result does not automatically carry over to the dolev-yao model used in.



in this section, we consider protocols that allow parties to exchange messages built from identities and randomly generated numbers using public key encryption and a hash function. we assume that the same hash key is used by every participant using the protocol hence we do not represent this key in the syntax of the protocol. three types of instructions can be performed during protocol execution: receiving a message, sending a message or testing a hash. to describe a specific instruction, we use terms in the free algebra with the following sorts:



protocols are specified using terms in this algebra and typed variables. that is, we allow disjoint sets of variables that range over the different sorts. a term is called atomic, if it is a key, a nonce or a variable. grounds terms, i.e. variable free terms, are called messages.



where t is a term and x a variable. instruction rec(t) denotes the reception of a message(and its pattern matching using prototype t, which should not contain hash), snd(t) denotes the emission of t and finally,[h(t)= x] checks that the value of x is the hash of the value of t. a role r is a finite list of instructions, the set atoms(r) contains every atom that appears in r or whose inverse(for keys) appears in r.



we consider two different protocol semantics: one in the symbolic model and one in the computational model. both define the behavior of the protocol confronted to an adversary. this adversary has total control of the network. moreover the adversary impersonates the dishonest participants. in the symbolic case, the protocol and the adversary exchange symbolic messages. deductions that can be made by the adversary are defined by a deduction relation. in the computational case, they exchange strings of bits. the adversary is a polynomial random turing machine and can therefore perform any operation it wants.



we now define another property corresponding to the strong secrecy of nonces secnonce. this property states that it is hard for an adversary to distinguish the nonce that is used in the execution of the protocol from a random nonce. in the secnonceb experiment, after execution of the protocol, the adversary is given two nonce values bs0 and bs1 and has to decide which was used in the execution.



another approach to ensure security of hash functions is to use probabilistic hash functions citecanetti-hash. whilst the security notion described in citecanetti-hash ensure that any hash preserves any partial information over the hashed message, it does not ensure that given a hash containing a secret nonce, it is impossible to forge a new hash containing the secret nonce. moreover the hash functions considered are probabilistic.



hence we define a new criterion for hash functions. we want to ensure that hash functions satisfy a form of semantic security. however it is not possible to directly adapt classical definitions as hash functions are deterministic. the adversary cannot have full access to a left-right hash oracle. therefore we introduce a new security game where first some challenge nonces are randomly sampled. the adversary has access to a left-right oracle but his queries are not directly hashed: the challenge nonces are inserted in these queries before applying the hash function.



proof. the proof is very similar to the proofs found in[19,17,12]. the idea is to build an adversary against n-pah which executes a by simulating exec. the adversary b also build the symbolic execution corresponding to the computational execution observed. whenever a is able to produces an execution that does not correspond to a valid symbolic execution, then b is able to win against one of her challenge. hence the probability that a produces such an execution is bounded by the advantage of b, which is negligible by assumption.



the following proposition is a preservation result for faithful trace properties. it states that if the symbolic property is a faithful abstraction of the computational property and it is satisfied in the symbolic model then the concrete property is satisfied in the computational model. it has been applied to mutual authentication in in which there is also a longer discussion about symbolic/computational properties.



we remark that we cannot deal with computational secrecy of nonces sent in hashes. it is because we do not assume with our hash criterion that hash functions ensure indistinguishability. we only assume that a hash does not leak enough information to obtain the entire hashed message. a definition for secrecy of nonce that may be sent in hashes is given in.



the main contributions of this paper are the following: a formal definition of a correctness criterion for hash functions(that is easily met in the random oracle model). a proof of correctness of the dolev-yao model for protocols that may combine an asymmetric scheme and a hash function. the proof of our theorem makes some restrictions on the protocols that are in practice easily met. as future work, it would be of interest to investigate whether correctness of dolev-yao can be proved under weaker assumptions on the cryptographic primitives. moreover, it would be significant to extend this result to other security properties.



