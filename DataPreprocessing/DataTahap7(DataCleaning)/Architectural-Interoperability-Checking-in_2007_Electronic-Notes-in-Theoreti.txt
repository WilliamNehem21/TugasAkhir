in the community of coordination languages, there is a large group of languages which have properties of architectural languages. the most recent language from this domain is reo. reo supports control-driven exogenous coordination and is execution-oriented in contrast to design-oriented vcn.



in the process of hardware and software design, it has appeared useful to treat behavioral aspects separately from architectural aspects of a system under design. such ideas of aspect separation have been tackled in the most of work concerning architectural description languages. these principles are also employed in the recent version of the uml language.



there is an exhaustive piece of work by bernardo et al. on the topic of interoperability checking of architectural descriptions formalized in traditional process algebraic framework. in it has been proved that for checking of an acyclic component topology it suffices to check interaction compatibility of all pairs of mutually connected components. the notion of such compatibility is based on weak bisimilarity of the two components in a pair. an abstraction of both components is considered comprising only actions of mutual interaction, while all other actions are hidden. in this methodology of compatibility checking has been extended to arbitrary network topologies which can include cyclic relationships among components.



we show that a similar approach can be extended to the behavioral model of vcn. in contrast to[1,5], dependency graph of an architecture in vcn is bipartite, as vcn distinguishes connectors and components as two semantically different members of the architecture. in other words, such an extension has to to define the notion of architectural compatibility between any two adjacent nodes, which are given as a pair of a connector and a component. moreover, vcn introduces a set-labeled transition operational semantics to capture behavioral model of connectors. this extension increases the expressiveness of the supported coordination model. in this paper, the notion of architectural interoperability is revisited and extended to capture needs of such a setting. especially, there is no traditional notion of a parallel composition operator in vcn and therefore general congruence results employed in[1,5] cannot be directly employed here. the main result of this paper shows how the ideas of are extended for the vcn setting.



in our setting, the computation layer is treated as a low-level layer of system specification, upon which the coordination layer rests. thus from the designers point of view, both the top-down and the bottom-up design methodologies can be applied in system design using vcn. on one hand, vcn allows the computation layer to be considered as a supplementary layer which can be added to the modeled system hierarchy later during the particular design process(top-down approach). on the other hand, one can specify the computation of components at first, while the coordination layer can be added later(bottom-up approach).



similarly to wright, connectors are treated as first-class citizens(at the same specification level as components). in the vcn setting, connectors are called buses. buses represent coordination mechanisms which control component interaction. the coordination model represented by buses is characterized by atomic actions called cooperations, which have the meaning of atomic multi-synchronization of a set of some components in a particular network.



component computation is described by vcn leaves. vcn leaves are cornerstones of the computation layer. in our setting, leaves are assumed to be abstract computation models of system components. more particularly, a leaf is an atomic element in the vcn structure that can be specified in an arbitrary formalism for formal description of reactive computation. it is assumed that the kind of formalism which can be used for this purpose is compatible with the semantic model employed in vcn. in general, the potential set of such compatible formalisms includes any reactive computation description language which can be encoded into a labelled transition system.



the computation layer makes the bottom most level of the vcn hierarchy. it is determined by the set of all leaves which are used in the particular system design. as it has been mentioned above, leaves directly represent computation of components and are interconnected by buses to induce network topologies.



in a natural sense, such a network topology of leaves and buses can be abstractly viewed as a black box with complex behavior hidden inside(defined by computation of leaves coordinated by buses). more specifically, computation is represented not only by leaves, but also by entire network topologies. this idea leads us to consider the notion of component to be more abstract than the notion of leaf. in particular, either a leaf or a network can be sensed as a component in the vcn style of thinking. the possibility of taking a network as a component allows the coordination layer to have more levels of hierarchy.



the condition(2) in the definition above ensures that at most one link can be defined for a particular component interface port. the set of conditions(3) guarantees consistency of an embedding of a particular bus into a particular link relation. more precisely, all the ports linked to a particular bus must be reflected by some cooperation and for each port of any cooperation of a particular bus there must exist a link connecting the bus with the respective port.



we do not define the notion of gate here, as we focus only on inner-level(horizontal) aspects of the architecture. however, the gate is an important element of vcn concerning the inter-level(vertical) aspects. for the purpose of this paper, we treat a gate as an injective mapping gateg which maps a port of a component body to a port of the respective interface.



note that the approach of bernardo et.al. deals with architectures composed of uniform components connected by links which can be of one-to-many character. anyway, those links are static(stateless) connectors. there is no explicit notion of a connector like in wright or in our approach. however, connectors can be there still modeled explicitly as components which are logically treated differently than common components. what is not possible there is modeling of connector dynamism concerning atomic many-to-many cooperations, as our approach allows by the behavioral model of buses. this is the reason why the results of cannot be directly applied for developing the interoperability checking framework for the behavioral model of vcn. we follow the way of utilizing and extending these results to fit the character of behavioral model of buses.



the fundamental idea of interoperability checking is based on the notion of so-called compatibility which is based on pairwise comparison of behavior of components and buses in the network. more particularly, the behavior observed on links between a component and a bus is considered. in order to enable such comparison we define a projection of bus behavior to a particular subset of links.



an important subpart of an acyclic network topology is a so-called star topology. intuitively, the star topology is a group of all components connected to the same bus in a particular acyclic network. significance of this structure relies on the fact that for checking of interoperability it suffices to check compatibility of the central bus with every component included in the particular star topology. this result is included in the general theorem 4.11. in order to precise the notion of the star topology, we introduce formally the notion of subnetwork at first.



in this paper we have presented simplified version of the language vcn for hierarchical specification of component-based concurrent systems. the key concept of the language are buses which represent coordination models used in system architectures. we have utilized the process algebraic approach of and proved its extension which has been introduced due to the specific features of vcn which are not incorporated directly in traditional process algebraic approaches for architectural description.



we are currently implementing a graphical tool which allows vcn diagrams to be simply created and modified. in our future work, we would like to discuss endogenous and exogenous extensions of the vcn models in the style of. we also aim at extending architectural interoperability checking to vcn bus classes which allow generalized definitions of buses.



