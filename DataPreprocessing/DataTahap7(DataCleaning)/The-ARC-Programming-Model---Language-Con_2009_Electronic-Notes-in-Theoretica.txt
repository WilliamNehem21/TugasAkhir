a basic actor must implement the abstract interface of a role in order for the basic actor to acquire membership in the role. a role member actor is a basic actor with membership in one or more roles. a role actor is a coordination actor that enacts intra-role coordination within its set of role member actors. multiple role actors may exist for each role. a role actor may also serve as a parameter to a coordination actor called a coordinator actor. a coordinator actor enacts interrole coordination upon role member actors via its role actor parameters and avoids persistent knowledge of individual role member actors.



the coordination distributed to basic actors, role actors, and coordinator actors is examined in detail in this paper. we introduce the arc programming model and the arc programming language(arc-pl), emphasizing the syntax and informal semantics of new language constructs designed to enable modular coordination in the arc model. section 2 discusses related work on coordination models. sections 3, 4, and 5 discuss programming in the arc model using several examples to introduce the syntax and semantics of language constructs designed to facilitate local coordination, intra-role coordination, and inter-role coordination, respectively. section 6 concludes and discusses future work. the formal syntax of arc-pl and its operational semantics are introduced in an appendix.



coordination has been an active area of research for over two decades. a broad survey of coordination models and languages concluded that coordination models can be categorized as data-driven or control-driven. in data-driven models such as linda and its extensions, coordination tends to be endogenous and embedded within computational entities. in control-driven models, coordination tends to be exogenous and isolated from computational entities. control-driven models such as abt, road, iwim, and colas isolate coordination by considering functional entities as black boxes. both iwim and abt address computation and coordination concerns in separate and independent levels. abt treats both computation and coordination components as composable abstract behavior types. hybrid approaches such as tuple center and respect combine the datadriven and control-driven models.



several coordination models address decentralization. tucson provides distributed tuple centers, each with its own local coordination rules. colas partitions a distributed system into multiple coordination groups, and each coordination group enacts an independent set of coordination policies. road provides a recursive structure that composes fine-grained coordination groups into coarse-grained groups. lgi provides a controller for every object in the system and therefore implements completely decentralized coordination. the arc model differs from these models by separating intra-role coordination and inter-role coordination and logically distributing the responsibility for coordination based on roles.



we illustrate intra-role coordination in the arc model by implementing a gui selection list of items. each list item is either selected or unselected. selecting an item toggles the selection state of the item and deselects any previous selection in the list. thus, the list may have either no selection or a single selection. the



the coordination policies enacted by role actors are state-based and may vary over time. the state of a role actor is composed of the local variables defined in the associated role construct and the dynamic set of role member actors coordinated by the role actor. a listitem role actor uses its local variable selection to identify the role member item actor that is the current selection within the selection list. the coordination enacted by a listitem role actor is based upon the value of the current list selection.



role actors are hybrid actors with capabilities of both basic actors and meta actors. as a basic actor, a role actor may exchange join and exit messages with role member actors. as a meta actor, a role actor is able to react to meta-level messages, called events, that involve itself or the role member actors currently coordinated by the role actor. a role actor begins execution in the start state defined in the associated role construct. after processing a constructor message in the start state, the behavior of a role actor transitions to an implicit event-processing loop where events are processed serially and to completion. events may be triggered for a role actor in three scenarios.



the parameters in the focus message signature are initialized from the values transmitted in the message and are available as local variables when reacting to the event. events may be constrained by specifying an optional boolean condition based on local variables. if the boolean condition for an event is omitted, the default condition if(true) is assumed. only messages that satisfy the boolean condition will trigger events. a message that triggers a receive event is discarded from the mailbox of the focus actor after triggering the event and is therefore never dispatched and processed by the focus actor.



for example, the dispatch{ item.toggle(); selection.toggle();} statement used in the first alternative of the listitem event[item<toggle()] atomically toggles the two item role member actors indicated by item and selection. the atomic action results in a new list selection, since the actor indicated by selection is deselected after dispatching the toggle message it is sent, and the actor indicated by item is selected after dispatching the toggle message it is sent. the listitem role actor therefore updates its local selection variable upon completion of the dispatch statement.



the capability to send messages via the dispatch statement distinguishes arc coordination actors from constructs(e.g. the synchronizer) that coordinate only existing messages sent by basic actors. the tension between the capability to send messages and the separation of computation and coordination is tempered by ensuring that coordination actors send messages only to role members in reaction to events. a coordination actor does not initiate arbitrary computation.



since role membership is acquired and released via explicit message exchange between a basic actor and a role actor, basic actor behaviors must be aware of roles, and arc-pl must ensure that role membership is processed atomically. role membership capabilities are integrated into the efsm of a basic actor behavior via the designated join and exit messages discussed above. like other messages, the join and exit messages are dispatched only in states that define inputs for the messages. a basic actor is implicitly locked and sensitized to a role actor immediately after the basic actor sends a join or exit message to the role actor, effectively suspending the basic actor(after any further processing of the current input) until the join or exit reply message is received from the role actor.



a basic actor may be a member of multiple roles simultaneously. a behavior has conflicting role memberships if the behavior permits multiple role memberships and two or more of the roles define a receive event with the same focus message. an arc-pl static semantic check disallows behaviors with conflicting role memberships. role conflicts must be resolved by defining a composite role in which overlapping events defined by the conflicting roles are appropriately unified. the decision to disallow conflicting role memberships is motivated by the fact that the trigger condition for a receive event may depend on variables local to individual role actors. without conflicting roles, a message will be processed by the basic actor that received the message if a receive event is not triggered at a role actor. if conflicting roles are allowed, an event may be triggered at one role actor but not at a second role actor, resulting in an undesirable scenario in which the first role actor assumes the received message is not processed by the basic actor, while the second role actor assumes the received message is processed by the basic actor.



the coordination enacted by coordinator actors often includes the sending and atomic dispatch of actor messages. however, scalability concerns dictate that coordinator actors not have persistent knowledge of individual role member actors. instead, two queries with synchronous call/return semantics are implicitly exported by a coordinated role actor to its coordinator actor.



