in this paper, we propose the use of a meta graph grammar for the definition of such a complex graph transformation approach. a meta graph grammar is a typed graph grammar whose type graph provides a static description of the structure of graphs, rules, and transformations of the approach. this static meta model, which is comparable to the meta model in the uml specification, is extended by a specification of the rule application operator by means of graphical embedding rules, i.e., the productions of the meta graph grammar. these embedding rules allow a concise visual description of the admissible context embeddings of a rule and of the side effects of the rule application on the context.



a graph transformation approach is formally given by its notions of graph, rule, and transformation. in addition, some approaches provide concepts like graph schemata or control structures. usually, formal definitions of these notions are given in mathematical(e.g., set-theoretic, logic, algebraic, or categorical) terms(cf. for a collection of such definitions). while mathematical definitions are an indispensable tool for the development of the theory, they are often not very useful for explaining the concepts and constructions to potential users, in particular, if the mathematical language has a very different nature than the approach to be defined.



a solution to this problem, which is popular for visual modeling languages like the uml, is the approach of meta modeling. here, a modeling language is defined in a kind of boot-strapping process using as a meta language a simple subset of the language to be defined.(in order to avoid cyclic definitions, this subset has to be given an independent formalization.) for example, in the uml specification, class diagrams and constraints are used in order to specify the abstract syntax and static semantics of the uml. the dynamic semantics is just described in informal text.



in this paper we propose meta modeling as a technique for the specification of both the static and dynamic aspects of application-oriented graph transformation approaches. based on a uml-like meta model defining statically the classes of graphs, rules, and transformations of the approach, a meta graph grammar is used for generating, from each rule, a class of transformations. as a case study, this technique is applied to(a subset of) the object-oriented graph transformation approach fujaba which includes features like composition, multiplicity constraints, and inheritance.





to-one associations are most naturally implemented by pointers. thus, we generate a private data member of the neighbors type and setand getmethods. the to-one end of association holds at class robot creates a private data member robot robot in class good and methods setrobot and getrobot.



the implementation of to-one associations via usual pointers saves memory-space and reduces the read-access to a minimum. however, this implies that our implementation is not able to store more than one pointer for a given association at a certain object, not even temporarily. if, for example, a good g already belongs to a certain robot r1 and if we assign a new robot r2 to hold g by calling g.setrobot(r2), then we create a conflict in ownership between robots r1 and r2. one has to deal with this conflict by either rejecting the new owner or by overriding the old owner or by raising a runtime exception. in the fujaba approach, the default behavior is to override the old owner with the new owner.



in order to guarantee the consistency of the pairs of pointers that represent a link between two objects, the write methods for the corresponding data members call each other, mutually. for example, method r.addtogoods(g) calls method g.setrobot(r) and vice versa. similarly, the call r.removefromgoods(g) results in call g.setrobot(null) and vice versa. since the data members are private and may only be changed via their access methods, we are able to guarantee that each time a link is added to or removed from the object structure, the corresponding pair of pointers is established or removed properly. this guarantee turns usual java object structures into a proper implementation of object-oriented graphs.



at first glance, the survival of good g3 may look strange, since intermediately it became an orphan. however, in our project this semantics has proven to be very useful since it allows to deconstruct composition hierarchies and to unmount parts from their parents in order to store them separately for later reuse. in our example, the unmounted seat is directly reused for the new good g9.



to summarize, the application of graph transformation to object-oriented data models creates challenges for the semantics definition of graph rewrite rules. in particular, multiplicity constraints for associations and composition relations imply certain side effects of the creation and deletion of objects and links that need to be carefully specified. semantic decisions like the overriding of links of to-one associations are guided by the implementation in java and a in contrast with most other graph transformation approaches. in the following two sections, we present a formalization for the static and dynamic aspects of these non-standard features.



in this section, a meta graph grammar is used to specify, for each story pattern, the set of transformations resulting from applying the pattern to legal objectoriented graphs. the productions of this meta graph grammar generate the contexts in which the pattern can be placed. each production describes, at the same time, the matching conditions and the effect of the transformation in the given context. the productions are presented as embedding rules like below on the left



formally, our meta graph grammar is based on the algebraic double-pushout(dpo) approach to graph transformation[4,3] using typed graphs and negative application conditions. the premise p and the condition t jointly form the left-hand side of a graph grammar production as shown above on the right. the right-hand side is given by the conclusion c and the typing condition c, and the interface graph in the center is the intersection of the two. the application of such a production to a t g-typed graph representing a transformation yields another t g-typed graph which represents a transformation with additional objects, links, or attribute instantiations. the set of all transformations using a given story pattern g0 is given by all well-formed t g-typed graphs g derivable from g0 by means of the graph grammar productions. this use of embedding rules is inspired by the contextualization rules in sos, like the rule for restriction in ccs stating under which conditions an action can be performed in the context of the restriction operator.



the correspondence between graph transformation rules and full uml collaboration diagrams which describe, in addition to structural changes, the interaction between objects, is further extended in. in this context very similar problems can be identified. for example, the distinction in the uml between collaboration diagrams on the specification level and on the instance level corresponds to the one between graph transformation rules and transformations. embedding rules can be a general means to specify the relation between these two levels.



