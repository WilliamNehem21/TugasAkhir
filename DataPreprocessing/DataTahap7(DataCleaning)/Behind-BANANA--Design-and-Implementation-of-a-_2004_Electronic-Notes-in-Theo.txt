we present a survey of the work on control-flow analysis carried on by the venice team during the mefisto project. we study security issues, in particular information leakage detection, in the context of the mobile ambient calculus. we describe banana, a java-based tool for ambient nesting analysis, by focussing on analysis accuracy and algorithmic optimizations.



these security issues constitute a very interesting workbench to evaluate the theoretical and practical impact of static analysis techniques. giving a way for statically verifying a security property has, in principle, the advantage of making the checking of the properties more efficient; moreover it allows us to write programs which are secure-by-construction, e.g., when the performed analysis is proved to imply some behavioural security properties. a substantial body of research is available, relying on different static techniques and modeling languages, verifying different security properties[3,14,16,25].



(i) no read up, a low level entity cannot access information of a high level entity;(ii)no write down, a high level entity cannot leak information to a low level entity. in order to detect information leakages, a typical approach(see, e.g.,[1,2]) consists of directly defining how information may flow from one level to another one. then, it is sufficient to verify if, in any system execution, no flow of information is possible from level high to level low. we have followed the above approach.



the starting point of our research was the control flow analysis by nielson et al. presented in. in, we refined such an analysis in order to detect information leakage. both analyses have been implemented in the banana(boundary ambient nesting analysis) tool, a java applet avail-



the rest of the paper is organized as follows. in section 2 we introduce the basic terminology of mobile ambient calculus and we briefly report the control flow analyses of[15,20] and of[6,7]. then, in section 3, we present the algorithms implemented in the banana tool, which is described in detail in section 4. section 5 concludes the paper.



initially, envelope is in site venice. then, it exits venice and enters site pisa by applying its capabilities out venice and in pisa, respectively. once site pisa receives envelope, it reads its content by consuming its open envelope capability. finally, process p1 reaches the state: venice[ q]| pisa[ 0].



this is the first motivation behind the work presented in by nielson and seidl. assuming n is the size of a process, the authors introduce two different algorithms that in o(n 4) and o(n 3) steps, respectively compute the ambient nesting analysis. the algorithms first perform a translation of the control flow analysis constraints into ground horn clauses. then, these clauses are processed through satisfiability standard algorithms in order to compute the least solution. as such algorithms always consider all the ground clauses corresponding to the analysis constraints, even in the best case, all the clauses need to be generated.



complexity of those algorithms is o(n 4 log n) and o(n 3 log n) bits, respectively, while the one of both our algorithms is o(n 2 log n) bits. regarding time, the worst case complexity is of the same order, i.e., o(n 4) and o(n 3) steps, respectively. in the nielson and seidl techniques, those complexities are tight because of the need of generating all the ground horn clauses, as explained above. instead, our schemes perform better for some particular small solutions(e.g., solutions that are linear to the size of the process), reaching a complexity of o(n 3) and o(n 2) steps, respectively.



these improvements are first achieved by enhancing the data structure representations. then, we attack the problem with a direct operational approach, i.e., without passing through horn formulas. finally, we reduce the computation to the control flow analysis constraints that are effectively necessary to get to the least solution. in fact, the algorithms dynamically choose, in an on the fly manner, only the constraints that are effectively necessary for the computation of the analysis. this implies that no useless repetition occurs and there is no need of representing in memory all the possible instantiation of constraints as done in the nielson and seidel approach.



in section 2.3 we described the analysis in terms of a representation and a specification function. it is possible to prove that a least solution for this analysis always exists and it may be computed as follows: first apply the representation function to the process p, then apply the analysis to validate the correctness of the proposed solution, adding, if needed, new information to the triplet until a fix-point is reached. the iterative procedure computes the least solution independent of the iteration order.



an analyzer which computes an over approximation of all possible nestings occurring at run-time. the tool supports three different control flow analyses, namely the one of nielson et al. in, the one by braghin et al. in(called focardi cortesi braghin in the tool), and the one by braghin et al. in(fcb boundary inference). five different implementations of the analysis described in are available in the tool. they correspond to:



a post-processing module, that interprets the results of the analysis in terms of the boundary-based information-flow model proposed in, where information flows correspond to leakages of high-level(i.e., secret) ambients out of protective(i.e., boundary) ambients, toward the low-level(i.e., untrusted) environment.



the user can then choose to launch one of the algorithms which implement the analysis described in[6,8,15]. once the analysis has started, the tool parses the process, builds a syntax tree, and computes the algorithm yielding to an over-approximation of all possible ambient nestings. the result of the analysis is reported in the output console as a list of pairs of labels.



