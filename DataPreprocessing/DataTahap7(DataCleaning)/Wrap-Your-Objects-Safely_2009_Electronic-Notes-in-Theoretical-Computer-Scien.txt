open distributed systems and embedded devices offer many new challenges to the research community, from design to correct functioning, including modeling, practical implementation issues, and most notably security. the latter in particular is a crucial aspect to be taken into account, as the uploading or downloading of an application to a device may compromise data privacy, confidentiality or integrity. the above justifies the need to find new solutions to guarantee a minimum of security at run-time. this is far from easy since the openness of modern systems implies that we do not know with what possible environments the software will be interacting.



it has long been identified that the shared-state concurrency model is not ideal for open distributed systems. this is despite the fact that one of the most widespread languages used nowadays, namely java, relies on such model. the natural style for modeling distributed systems is by message-passing and concurrency, for instance objects running concurrently communicating asynchronously through method calls, as in the creol model. in order to formalize and experiment with our proposal, we have chosen creol as the underlying language, due to its communication model, its simple semantics, and simulation tools directly related to the operational semantics. in addition, creol supports dynamic upgrade of classes, allowing new code to be communicated, where wrappers may also protect against unsafe code.



the classes and objects in a distributed manner, and installed independently at the affected objects, without stopping execution. since the upgrade of classes is done through messages, it means that insertion of new upgrades in a hostile environment may be unsafe, with the result that unsafe code may be installed and executed. by focusing on controlling the flow of messages in and out of wrappers, we then address the issues of unsafe data and code flow.



is a short form of t!x.m(e); await t?; t?(v), where t is a fresh(or unused) label. furthermore, the synchronous and blocking method call p(e; v) is a short form of t!x.m(e); t?(v), where the unguarded reply statement corresponds to active waiting. thus synchronous calls can be reduced to asynchronous calls. a local call m(e; v) is understood as a remote call to self, this.m(e; v)(and measures are taken to provide self reentry). remote method calls are typically programmed by non-blocking calls, thereby avoiding deadlock and active waiting.



guards are used to control processor release and may consist of boolean conditions, return tests, and definite release(wait). when a process is released or completed, an enabled process(if any) is chosen from the local process queue. therefore explicit signaling is not part of the language. the run method of an object is called upon creation, and initiates active behavior. release points in the run method, for instance an asynchronous recursive call, allow processes in the process queue to be handled. notice that a method call creates an invocation event message sent to the callee, which results in an activation of the called method, which is placed on the process queue of the callee. and the completion of a method activation generates a return event message sent back to the caller(with the caller and tag value as implicit parameters).



where c is the class name, m a multiset of method declarations(each with code and local variables), and a a list of attributes(with initial values). for simplicity, we ignore inheritance in this paper, otherwise there would be a field inh: s defining the inheritance list. in the rules we omit fields not relevant for the rule, following the convention of full maude. for instance, the following rule defines object creation in creol(ignoring class parameters for simplicity):



second, we need to add the notion of locality. currently all messages go to a global pool, also containing all objects and classes, and there is no way to group them into units with a local pool. locality is needed, among other things, to model local networks and computers connected to the network. in maude we can create localities in a very similar way as we create wrappers.



a wrapped object will then perform as before with standard creol rules, without being aware that it is wrapped, including processing of method invocations and reply statements. method binding is also done as in standard creol since copies of the relevant class declarations are found inside the wrapper(adjusting the(bind) rule to the syntax for components). however, we must add rules to control the flow of messages from inside the wrapped component to its environment, and vice versa. the rule for importing into the wrapper is as follows: where msg denotes a message content, ss a system state, output the output function of a state machine for a given input, state the state resulting from the step taken by the automaton, and accept the accepting condition. an automaton takes two kinds of inputs: messages directed into the wrapper and messages directed out of the wrapper. to make an automaton distinguish between these, we use the two constructors import and export, letting import encode messages directed into the wrapper, and export for messages directed out of the wrapper. in our setting an automaton can be defined in the functional sublanguage of creol defining constructors for each automaton state(including variable substitutions), and by defining the three functions: output, state, and accept, given an automaton state and input. the rule for exporting from the wrapper is as follows:



standard object creation can still be done by the previous(new) rule(adjusted to the component syntax). thereby objects may be added inside a wrapped component, resulting in components that contain many objects and many classes, in such a manner that all code is found within the wrapper. the resulting system may contain several copies of the classes involved, some inside wrappers and some outside. this has the benefit that each wrapped unit may decide which class upgrades it does accept and which it does not accept. as a result the different class copies may evolve differently and exist in different versions of the same class. the rules given handle this. we have so far not defined components with their own identity which may be manipulated in the context of other components. that is, we cannot import third-parties components, delete them, etc. this stronger notion of component could be added to creol, but it is not presented in this paper.



and the seal calculus. the above calculi concentrate on the construction and communication of ambients, including mobility through ambient migration. this is, however, a feature not needed for modeling web services, which is one of our domain of application. our setting is based on objects communicating asynchronously through message passing(method calls) and although it is possible to model objects(e.g. by using input channels in the seal calculus), none of the above calculi are inherently object-oriented. moreover, in these calculi messages need to be coded as ambients, adding an extra complexity on the design.



the expressive power of aspect-oriented programming(aop) is different from that of wrappers, as it may involve control of low-level issues such as the number of assignments to particular variables, which we have not addressed with our wrappers. on the other hand, a wrapper may remove or replace a call to or from an environment, for instance in order to make incompatible components compatible. this is not possible with aop. the notion of wrapper has been motivated by the desire to build abstract protection concepts with a simple semantics which may be exploited by formal program analysis tools. however, the ideas presented may also be reused to build more low-level wrappers, reacting on for instance assignments, but then with a less modular semantics.



where it is established what are the obligations, permissions and prohibitions of each party. contracts may be written in a contract logic, as for instance the ones presented in[5,18], and the wrapper may consist of an automaton automatically extracted from such contract specification. this seems to be particularly useful for wrapping components.



an interesting application domain, besides the internet, is embedded systems. in particular, the state-of-the-art of open smart cards allowing post-issue upload of multiple-applets is unreliable from the security point of view. the main problem is that the current model of firewalls between applets does not work properly, and many attacks are possible due to failures in the model, the implementation of the virtual machine, or other related bugs[15,16,20]. we do not claim that our proposal will solve all those problems, but that at least will mitigate some of them.



the definition of wrappers as we did in creol could be the starting point of defining different layers of localities. in fact local networks and computers may be represented as wrappers, without the notion of automaton controlling the input and the output. the only issue will be the addition of a local pool where only explicit rules will allow a given message to navigate in or out from the wrapper. we will need to extend it with an identifier, since localities may need to be referenced. firewalls could be added in a straightforward manner: a locality with a firewall will essentially be the same as a wrapper as we defined it for the safenew(with the automaton) but over a collection of objects and classes. thus, firewalls are instances of wrappers in the second sense mentioned in the introduction, where the untrusted part is the environment.



