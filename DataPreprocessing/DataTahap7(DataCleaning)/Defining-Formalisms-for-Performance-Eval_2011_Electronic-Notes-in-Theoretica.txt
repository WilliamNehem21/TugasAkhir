and evolution semantics of the considered formalism elements. the solution of models is made possible by using a set of non-specialized solving engines used to generate automatically formalism-specific reusable solvers. this paper explains how formalisms can be created in simthesys by showing how three widely known modeling languages are successfully implemented.



the paper is organized as follows. after a brief review of the simthesys approach to multiformalism modeling in section 2, in section 3 the exponential transition based family of formalisms is introduced. section 4 describes the implementations of spn, tfcqn and gnqn. section 5 presents the solution engines for the mentioned family. conclusions and future work are described in section 6.



to mobius and osmosys(that are the closest references for this research) proved the value of a formal(multiformalism/multisolution 6) approach to modeling and evaluation of systems. simthesys is a new framework for the definition and analysis of performance oriented formalisms. it is based on the explicit definition of both syntax and semantics of all atomic components of a formalism and on a set of non-specialized solving engines, that are used to generate automatically and transparently(multi)formalismspecific reusable solvers.



a simthesys formalism is a formal description language. it is defined in terms of its elements, that are its atomic components. each element is characterized by a set of attributes called properties and a set of descriptions of its dynamics called behaviors. properties can be constant characteristics of the element, state information(useful for the solution of the model) or results(obtained by the solution process). behaviors describe the semantics of the element(the effects of their presence in the model on the other elements, e.g. its execution policy, if applicable). a behavior is an algorithm implemented in a high-level programming language(that currently follows the syntax of java) 7. every formalism has an additional container element that represents a(sub)model written in that formalism and whose properties include global characteristics of a model. formalisms are described by the formalism description language(fdl).



a model is the description of a system being evaluated, written according to a formalism. models can be hierarchically composed, to separate reusable(sub)models of its subsystems, even if written in different formalisms 8. models are described by the model description language(mdl) documents.



the simthesys framework has been developed to be integrated with the drawnet tool and the osmosys framework. drawnet is a formalism definition environment that provides data structures and the automatic creation of graphical user interfaces for the rapid development of performance evaluation tools. osmosys is a framework that supports the definition of formalisms and models to allow the use of multiformalism and multisolution techniques.



the family of formalisms presented in this paper are labeled as exponential event formalisms(eefs). in these formalisms, primitives represent entities capable of generating events. such events(that can be used to represent the firing of a pn transition, or the end of the service in a queue) are characterized by the fact that they occur after an exponentially distributed time.



the solution engines expose a behavior schedule that is used by the implementations of the initevents behavior to define what must be executed whenever an event occurs. the code associated with the event updates the state of the elements to reflect the evolution of the model. the scheduled behavior updates the state of the affected elements of the model. for example a transition can move tokens among the places to which is connected by using specific arcs behaviors.



state rewards return the mean value of a function of the state of the model. they are used to compute the mean length of a queue, or the mean number of tokens in a pn place. each eef define a set of state rewards by implementing three behaviors. firstly, countstaterewards returns the number of state rewards that a model is able to expose. secondly, computestaterewards computes the value of all the rewards associated with the model in a given state. finally setstaterewards allows the solution engine to return the computed indices to the model.



impulse rewards are used to compute measures related to the firings of events, such as the throughput of queues or pn transitions. each impulse reward is characterized by a unique reward name, and is defined by implementing two behaviors and by passing appropriate parameters to the previously defined solution engine schedule. a formalism should list the reward names of all the impulse rewards by implementing the behavior listimpulserewards. every time an event is scheduled, the formalisms pass to the schedule behavior the name of a reward that should be



tfcqn is a variant of qn in which every queue has a finite number m of places for waiting customers(finite capacity). only a single arc can leave a queue(tandem network) 10. if there is no room for a customer in a queue, the input stations stop serving until a place is available. this occurs as a result of a blocking mechanism.



the three most common are: blocking after service(bas), blocking before service(bbs) and repetitive service(rs). in the first case, the customer who does not find room in the destination queue is processed anyway and it is blocked right after service completion. in the second case, the source queue is blocked before processing the customer. in this case, either the customer enters the server(bbssoqueue) or not(bbssnoqueue, as a result the number of places in the queue is set to m-1 until it is unblocked). in the third case, if the destination queue does not have room left, a customer who finishes the service is reinserted in the same queue to be served again later(rsqueue).



tfcqn is implemented either by defining a generic queue object with an associated property that specifies the kind of block or by defining a different element type for each blocking policy. we chose the second alternative because it simplifies the coding of the behaviors. the next step to consider is to identify the kind of(discrete) event corresponding to the termination of a service provided to a customer.



the initevents behavior is defined in algorithm 1. the object oriented like dot notation is used to name the behaviors and the properties associated to the elements of a model. the external object solver refers to the solution engine, that exposes the method schedule to enable the events. this method has four parameters that identify: i) the rate of the exponential distribution that characterizes the firing time, ii) the piece of code that must be executed when the event occurs, iii) the name of the impulse reward that is associated to the event, and iv) the increment of the reward. the notation q.id is used to identify the name of the queue. since every queue has an associated throughput, the name of the queue is used as the name of the corresponding reward. due to the fact that throughput counts the number of services in a queue, its corresponding reward value is always 1.



the isactive behavior is identical for all the types of queues, and simply checks if the length of the corresponding queue is greater than 0. the cansend behavior is used to check whether a station can start its service or it is blocked because it has reached the full capacity of the destination node. in an rsqueue, the behavior always returns true(because the service is always enabled, and it is re-issued if the destination node is full). regarding the other types of queue, the cansend behavior is specified in algorithm 2.



the rsqueue algorithm checks if the destination queue is empty before sending the customer there. if the destination is full, it reschedules the same service. this is implemented in algorithm 7. note that instructions for the rescheduling are not necessary(this is automatically done in the initevents behavior).



both algorithms use the push behavior of the connecting arc to send the customer to the next station. the push behavior in turn calls the addoccupancy(1) behavior of the queue at the other end of the arc, which is implemented in the same way for all the queue types. the addoccupancy(c) behavior adds c customer to the length of each queue.



due to the eef property, it is sufficient for the simulator to reschedule all the events after each firing. the simulator repeats the analysis for a fixed number nruns of runs. each run is executed until a global time tmax is reached; statistics are collected only after a transient time of fixed length ttrans. the parameters nruns, tmax and ttrans are constants defined by the modeler. a snapshot of the initial state is taken, and after each run has finished, the snapshot is used to start a new simulation from the same initial state. the execution of each run calls the initevents behavior to find all the enabled events, and then draws an exponentially distributed sample for each of them. the event with the shortest sample is executed, and time is advanced accordingly until tmax is reached. at the end of all the simulation runs, statistics are collected and returned to the model using the setstaterewards and setimpulsreward behaviors.



in this paper three example formalisms have been implemented by a new approach to multiformalism modeling. the simthesys approach is based on the use of the concept of behavior to define formalisms and their semantics independently of the solver used. the three examples exploit the same solution engines and demonstrate the advantages of this approach. this research is the first detailed description of how a formalism and its solver can be implemented in simthesys. research in this area aims to better understand the possibilities opened up by the behavior mechanism. this could be achieved by implementing more formalisms linked to different families, solution engines and enhancing the usability of the behaviors by designing a dedicated scripting language. other interesting perspectives are given by further investigation into multiformalism models and their application to different real world problems.



