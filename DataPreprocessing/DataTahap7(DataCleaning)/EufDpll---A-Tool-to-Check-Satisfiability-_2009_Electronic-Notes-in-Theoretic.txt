the gdpll procedure is a generalisation of the well-known dpll procedure which was introduced in the early 60s as a proof procedure for first-order logic. the gdpll procedure is defined in terms of four basic operations(reduce, eligible, satcriterion and filter), that have to be filled in for a particular logic. an original dpll procedure is an instance of gdpll in case of propositional logic.



the satisfiability problem for euf logic naturally fits into the gdpll framework. in this paper we provide an algorithm for this logic which is an instance of gdpll. since the algorithm is an instance of gdpll, we have to check its soundness and completeness by verifying the conditions mentioned in section 3.



testing and verification are the bottleneck of development of complex systems. this applies, in particular, to hardware and software systems. recently theorem provers were used to verify a pipelined microprocessor. the method proposed by burch and dill greatly enhanced verification techniques. the state of a register at any point in the computation can be represented by a symbolic term. uninterpreted functions can be used to abstract blocks of combinational logic, for example alu, as black boxes. uninterpreted functions without arguments are considered as term variable and can be used to abstract constant values that have special semantic meaning,



the dpll procedure, due to davis, putnam, logemann, and loveland, is the basis of some of the most successful propositional satisfiability solvers. the original dpll procedure was developed as a proof-procedure for first-order logic. it has been used so far almost exclusively for propositional logic because of its highly inefficient treatment of quantifiers. in this chapter we sketch the basic ideas of gdpll, the general version of the dpll procedure. for a full description the reader is referred to.



the dpll algorithm is a complete, backtracking-based algorithm for deciding the satisfiability of propositional logic formulas in conjunctive normal form. it consists of the following three rules: the unit clause rule, the splitting rule, and the pure literal rule. these rules reduce a formula according to some criteria. therefore, a function reduce which performs all rules for formula reduction is assumed. like dpll, gdpll has a splitting rule, which carries out a case analysis with respect to an atom a.



we prove in section 4.1 that the set of reduction rules is terminating, so at least one normal form exists. unfortunately, the rules are not confluent as it is shown by the following example. so the normal form is not unique.



the function eligible() allows us to choose literals from the purely positive clauses of length more than one, i.e. from the core of a formula. hence, we may terminate with sat as soon as the core of a reduced formula is empty and the formula does not contain the empty clause.



furthermore we have experimented with random formulas. starting with a set random clauses, a number of random substitutions were applied(like x:= f(x)), to ensure that reduction could be applied. the problem size was about 1000 clauses and 10 different symbols. the eufdpll algorithm was able to solve all these problems. however, the barcelogictools program(winner of the smt-comp 2005 competition) could do the same and was significantly faster in determining the solution.



