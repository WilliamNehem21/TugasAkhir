in section 2, we formally present the ilp formulations mwlcp-cp and mwlcp-sc. in sections 3 and 4, we explain the main components that define our branch-and-price algorithm: the way lp relaxations are solved, how columns are generated and how the node branching is performed. in section 5, computational experiments are conducted to evaluate the performance of our algorithm over random instances of different sizes and types. finally, in section 6, some conclusions are drawn.



since our column generation process is embeeded in a branch-and-price framework, the subproblems we have to solve for each node of the b&b tree should correspond to new instances of the mwlcp. to achieve that purpose, we need to devise a robust branching rule. in the next section we present such a rule, adapting the one first proposed in and used in for the gcp.



instances with 50 and 60 vertices can be solved in a couple of minutes. the same behavior is observed when increasing the number of vertices to 70 and considering an edge probability of 0.5 or 0.75(medium to high density). in contrast, instances with edge probabilities of 0.25(low density) are occasionally harder to solve, except when membership-to-list probability is high.



regarding cplex-cf, we notice that it solves half of the instances within the time limit(202 of 405). one of the disadvantages of this formulation is the weak lower bound provided by the value of the lp relaxation. in fact, lp relaxations of bp-sc are 174% larger(in average) than those from cplex-cf, and this gap is accentuated as the size of the instance grows in any parameter(n, p, c or q). the peak is reached on instances with n= 70, p= 0.75, c= 1.5 and q= 0.75 where lp relaxations of bp-sc are 604% larger.



