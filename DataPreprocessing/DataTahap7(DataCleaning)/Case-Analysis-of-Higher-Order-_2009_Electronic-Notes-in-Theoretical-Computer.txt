we discuss coverage checking for data that is dependently typed and is defined using higher-order abstract syntax. unlike previous work on coverage checking for closed data, we consider open data which may depend on some context. our work may therefore provide insight into coverage checking in twelf, and serve as a basis for coverage checking in functional languages such as delphin and beluga. more generally, our work is a foundation for proofs by case analysis in systems that reason about higher-order abstract syntax.



canonical forms. hereditary substitution is defined recursively, considering both the structure of the term to which the substitution is applied and the type a of the object being substituted. due to lack of space, we relegate the details to[3, appendix]. we omit the subscripts for readability in what follows.



