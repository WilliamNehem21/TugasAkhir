to achieve high performance, modern computer applications are executed on networks of(multi)processors. those with a high data rate like digital signal processing are most efficiently implemented on micro-architectures employing shared memory as a means of interprocess communication. however, shared memory programming has to deal explicitly with correct data access and data integrity and the negligence of these cause faulty computations. architectures based on message-passing prevent such errors by barring shared address space and by their clear separation of computation and communication. but message-passing has the drawback of high data latency and redundancy of data transfer.



token(by get unused memory), writes its data to the granted memory region and then sends the token to the target node(send token) by message-passing. on the receiving side, the process receives the token(receive token), reads or writes on the assigned memory region and then either sends the token to another node or releases it(usage over). in general, when the volume of data transferred is very high, compared to the expense of granting, releasing, sending or receiving a token, the overall performance of shared-messaging communication can be significantly better than direct data communication.



smc supports a system level design where certain features of a class of implementations has been abstracted to a level which is amenable to a formal verification(cf.). employing smc one goes beyond the purely qualitative behaviour description. a current program using smc as model of communication does not only specify the(qualitative) computation with respect to functionality but also makes(quantitative) assumptions by taking the decision that the underlying mode of data transfer should rely on shared memory.



each node operates on its private memory space while interprocess communication is based on smc which affects the shared memory of the entire region. accordingly, the operational semantics is given in two layers. first we define the semantics of single nodes and based on that the semantics of regions is given.



the semantics of the commands in the first line of the grammar for smc-programs is completely standard(see e.g.) and we assume familiarity with its presentation by a set of rules. in notation we use a for an arithmetic expression, b for a boolean



as we have left expressions and locations unspecified one may also assume concurrent assignments and by this we may assume non-scalar data structures. this modelling admittedly dilutes a crucial property of smc, namely, that not all the data written to the shared memory by a source process will not necessarily be accessed by the target process(by csm). however, as the emphasis of our modelling is the administration of tokens we do not give a refined model here. the model as described in assumes tokens of a predefined size(which we assume to be one).



for an application with a high data rate it is feasible to employ shared messaging communication in its final implementation. in this section we formally prove that any program using message-passing as communication mechanism can be rewritten as an smc-program such that the two programs are weakly bisimilar(up to some renaming of communication actions) which shows, in particular, that the(non)deterministic structure of the mp-program is preserved by the translation. we first give a formal description of the message passing model and then relate it in terms of bisimilarity to the smc-presentation.



where for each node just one token handle is used. this substitution is described by the mapping t which we later on generalize to a relation between states of mpand smc-regions. as stated above, an mp-program will be related to their smccounterpart by weak bisimilarity. so far we have only considered so-called strong transitions opposed to weak transitions which are transitions preceded and followed by an arbitrary number of internal actions. in our setting internal actions are those concerning the administration of token handles, only. let act denote the set of all transition labels occurring in section 1 and



by a tedious case analysis which is outlined in the next section one can establish the preorder result for a mp-program and its representation as an smc-program. as, finally, our aim is to prove that the smc-program is more cost-efficient than the original mp-program, and the efficiency preorder suggests the opposite result, we do not phrase it as a theorem. however, the following straightforward corollary shows the correctness of our translation.



the discussion in the previous section has shown that a comparison based on matching actions, only, does not capture the different performance of systems but rather suggests a relation which on intuitive grounds one would reject. however, if one assigns costs to actions and matches actions while keeping track of the current cost balance, the quantitative performance can also be observed. to this end, amortised bisimilarity has been introduced in. in short, it combines bisimilarity with an quantitative cost evaluation.



shared messaging communication without loosing functional correctness but with higher efficiency if the volume of data transferred is high. smc may be seen as a mechanism efficiently implementing message-passing for high data-rate applications and as such it goes in line with e.g. flash architecture, arachne protocol or efficient implementations of value passing languages. however, smc provides a new communication model transperant to the programmer and this supports portability and reusability of software within a certain class of micro-architectures.



