an important aspect in railway maintenance management is the scheduling of tamping actions in which two aspects need to be considered: first, the reduction of travel costs for crews and machinery; and second, the reduction of time-dependent costs caused by bad track condition. we model the corresponding planning problem as a vehicle routing problem with additional customer costs. due to the particular objective function, this kind of vehicle routing problem is harder to solve with conventional methods. therefore, we develop a branch-andbound approach based on a partition and permutation model. we present two branching strategies, the first appends one job at the end of a route in each branching step and the second includes one job inside a route in each branching step; and analyze their pros and cons. furthermore, different lower bounds for the customer costs and the travel costs are defined and compared. the performance of the branch-and-bound method is analyzed and compared with a commercial solver.



to this end, in heinicke et al.(2013) a new variant of the vehicle routing problem(vrp) is developed which is called vehicle routing problem with customer costs(short vrp-cc). the additional timedependent customer costs are introduced to consider penalties for the limitation of railway service. this novel variant of vrp does not include capacity constraints, but has a new kind of objective function. not only the travel costs are minimized, rather a sum of travel costs and costs that depend on the time of job execution are considered.



branch-and-bound is a common principle to solve complex combinatorial problems. an introduction to the method can be found in balas(1977). the main idea is to successively break up the solution space into certain subsets(branches). in order to discard some of these subsets and to reduce the solution space, lower bounds for the objective function(that shall be minimized) over the subsets are calculated. if the lower bound of a subset is larger than an already known objective value of a feasible point(upper bound), then this subset is removed. in general, the tighter the bounds are, the more subsets can be discarded.



let us now comment on some branch-and-bound methods developed for problems related to the vrp-cc. a branch-and-bound method for a traveling salesman problem(tsp) with m salesmen was presented by gavish and srikanth(1986). they used a depth first search branching on the binary variables that describe whether city j is visited directly after city i. to obtain a lower bound, a lagrangian technique is applied to the constraints which enforce that each node has degree 2 in the solution. the resulting problem is to find a minimal spanning tree for the modified cost matrix. lucena(1990) presented a time-dependent tsp and a branch-and-bound method for its solution. there, the travel time depends on the position of the city in the tour. in a branching step, a city not visited so far is selected and for each open position a new branch is generated in which this city is allocated to that position. to obtain a lower bound for the subproblem, a lagrangian relaxation is used that



among the lower bounds for the travel costs of the tsp, two main relaxations are useful for our branch-and-bound approach. firstly, removing the subtour elimination constraints yields an assignment problem. secondly, relaxing the node degree constraints leads to a particular minimum spanning tree problem, the 1-tree problem. both relaxations can be solved in polynomial time. an improvement of the assignment bound can be found in christofides(1972) and an enhancement of the bound obtained by 1-trees is presented in held and karp(1971). in section 4.2, we discuss both variants in more detail.



and cons. different lower bounds for customer costs and travel costs are provided and compared in section 4. the computational performance of the branch-and-bound algorithms for the non-linear model are investigated in section 5. this includes a comparison with the application of cplex to a milp model. the conclusions in section 6 complete the



we consider two strategies how a job is integrated. the first branching strategy produces an unbalanced search tree, but permits the application of tighter bounds in comparison to the second branching strategy, which, however, leads to a more balanced search tree. both strategies will be described in detail in the next subsections and compared via computational experiments in section 5.



an advantage of the strategy append consists in the fact that the execution times of the already planned jobs of a partial solution are fixed. therefore, the costs can easily be updated if a new job is appended to a route without recalculating all execution times. additionally, the effort of computing lower bounds decreases with the branching depth.



christofides(1972) provides an improvement of the assignment bound. normally, the solution of(ap) contains small cycles. he developed an iterative method to add the costs necessary to connect the cycles. the algorithm starts with the distance matrix. for this matrix, the cost part of the solution. in the small instances with non-dominating cost parts, where detours for jobs with high customer costs are common, the bound quality is in average 63%. in the small instances dominated by travel costs, the average bound quality is 74%. a quality of more than 90% is rarely reached. the computation effort is about 30 ms, which is comparably high. in the large instances, the bounds of the lp-relaxation are in average 22% worse than the best obtained bound and the com-



jl are set to infinity. this leads to some asymmetries in the distance matrix, which could not be considered in the travel cost bounds based on minimum spanning trees. to avoid cycles of length 1 in the solution of the assignment problem, the cost value dii of each job i is also set to infinity.



strategy append, the assignment bound leads to similar computation times as the simple bound even though only a half of partial solutions is analyzed. thus, the bound quality is in the application better, but the higher calculation effort results in a similar performance of the algorithm. in the strategy include, the assignment bound leads to a reduction of the average computation time by one-half compared to the simple bound because of a stronger reduction of the number of analyzed partial solutions. the reason for the better quality could be the higher number of asymmetric entries in the cost matrices generated using strategy include which are taken into account in the assignment bound. in both



only the travel costs of consecutive jobs have to be considered. because currently not planned jobs could be allocated at each position in the current routes, for these jobs we have to consider the travel costs to all other jobs. the costs dii are again set to infinity. for the depots, we have



prove the computation time even though the number of analyzed partial solutions is significantly reduced. in the strategy append, a small increase in the computation time from 2.1 min to 2.8 min can be seen even through the number of analyzed partial solutions is decreased to



than the assignment bounds. the increase in the number of iteration results in a similar reduction in the amount of analyzed partial solutions as with strategy append, but to a strong increase in computation time from 4.6 min to 8.5 min. a reason could be the constant size of the distance matrix during the branch-and-bound process with strategy include.



in the following, we compare both branch-and-bound applications with solving the vrp-cc using the commercial solver cplex to the linearized formulation(milp). in heinicke et al.(2015), it was found out that(milp) could be faster solved with cplex, if some additional subtour-elimination-constraints are iteratively added. therefore, we used this approach for our experiments here. to further improve the performance of cplex, we start the calculation with an initial feasible solution, which is the same as used as upper bound in the branch-andbound methods. beside this, we use the default settings of cplex.



in this paper, other instances are used as for the calculations in heinicke et al.(2015). these instances have a stronger influence of customer cost into the solution structure. comparing the travel costs of an optimal solution of a vrp-cc instance with the optimal travel costs of a comparable instance without customer costs shows that considering customer costs leads in average to an increase in travel costs by 23% in the new instances, but only to 4% in the instances used for heinicke et al.(2015). because of that, the influence of customer costs is higher and the computation times for solving instances using cplex



next, we analyze the influence of the number of jobs. therefore, we split the instances into three groups by the number of jobs. as expected, instances with more jobs are in average harder to solve than instances with less jobs. in each group, both branch-and-bound variants are in average better than solving the milp-formulation with the commercial solver. thereby, strategy append performs better than strategy include.



we differ between an increase less than 5%, between 5% and 25%, and larger than 25%. each of these groups contains approximately one-third of the 100 instances. as it can be seen, again solving(milp) with cplex is much more sensitive regarding the customer costs. instances with an increase in travel costs less than 5% are solved fast with cplex and with the branch-and-bound approach using strategy append. an increasing influence of the customer costs leads to significantly larger computation times for cplex. our branch-and-bound approach with strategy append solves the instances with an increase in travel costs of more than 5% in average within 2.6 min which is in average faster than with strategy include. with it, the strategy append has in each of these three groups in average the best performance.



finally, we tested our branch-and-bound algorithms on 100 benchmark instances and compared the performance of both with the application of the commercial solver cplex to a linearization of the problem. we found out that the branch-and-bound approaches could better handle the time-dependent customer costs. both branch-and-bound algorithms solved these instances with significantly less computation time than the commercial solver.



tion method for a certain instance. for a further improvement of the branch-and-bound methods, even better bounds for the customer cost part should be developed. additionally, it could be analyzed whether other bounds for the travel cost part improve the performance of the branch-and-bound approaches. another interesting topic of further research concerns lower bounds for the whole problem taking into account travel costs and customer costs.



