we present an approach to systematically derive safety cases for automatically generated code from information collected during a formal, hoare-style safety certification of the code. this safety case makes explicit the formal and informal reasoning principles, and reveals the top-level assumptions and external dependencies that must be taken into account; however, the evidence still comes from the formal safety proofs. it uses a generic goal-based argument that is instantiated with respect to the certified safety property(i.e.,



the second subgoal of the top-level strategy is to show that the established variable safety is maintained along all paths. this proceeds accordingly. the final subgoal is then to show that the variable safety implies the validity of the safety condition. this can again lead to any number of vcs. if(and only if) all vcs can be shown to hold, then the safety property holds for the entire program. the evidence for the vcs is provided by the formal proofs; we plan to convert these into safety cases as well.



we have described work still in progress. so far, we have developed the overall structure of the generic program safety case and instantiated it manually. the example shown here uses code generated by our autofilter system, but the underlying annotation inference algorithm has also been applied to code generated from matlab models using real-time workshop, and we expect that the same derivation can be applied there as well. current work involves constructing a more comprehensive, combined safety case that covers the components of the certification system itself(i.e., the formal framework, the inference system and its individual components, and the safety proofs). there we rely on the fact that trust in the complex components of the system can be reduced to trust in simpler components. for example, the use of proof checking mitigates the risk of the automated theorem prover.



