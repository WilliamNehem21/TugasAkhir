the denotational semantics of a regular program can be construed as a relation, easily definable by structural induction on programs. invoking the framework of canonical theories for(iterated) inductive definitions, we consider the first-order theory for program semantic, i.e. with the generative clauses as construction(introduction) rules, and their dual templates as deconstruction(elimination) rules.



since this approach is strictly first-order, it is particularly accessible conceptually, expositorily, and for use of automated theorem proving tools. it also meshes generically with the long-standing tradition of defining program semantics inductively. as soon as an inductive definition is given for a programming language, we automatically obtain the corresponding first-order inductive-definition theory, and can tackle the question of completeness of a logic for that theory.



to focus on the essentials, we consider guarded iterative programs, i.e. regular programs with tests and assignments as atomic actions. this provides a clean separation between the basic programming concepts. the language is generic with respect to an underlying vocabulary v, consisting of a finite set of constant-, functionand relation-identifiers, assigned positive arities when appropriate.



generic methods for associating to a given collection of inductive(i.e. generative) definitions first-order inductive theories are well-known. the semantics of regular programs has a particularly simple form of inductive definition, using atomic production rules, i.e. natural-deduction inferences with atomic premises and conclusion, as follows.



we write indn(reg) for the inductive theory given by the universal closure of the formulas above. we omit the superscript n as well as reg when in no danger of confusion. two weaker theories are of interest. the elementary inductive-theory, ind0 has inductive-elimination restricted to first-order eigen-formulas. the generative theory gen is weaker yet, and has only the inductive-introduction rules, without inductive-elimination. thus gen is an inherently first-order theory, in that it does not have templates intended to approximate a second-order rule.



a point of interest is that first-order proofs of t+ ind0 obtained in the proof of theorem 2.1 do not use the generative(data introduction) rules of the inductive theory ind. a dual observation holds for total correctness assertions(theorem 3.1).



relative completeness throws in the towel not only regarding structures that are not expressive(and for which inductive completeness is unproblematic), but also for programming languages whose termination problem for finite structures is not decidable. in contrast, giving inductive definitions to the semantics of such programs is straightforward, albeit calling for auxiliary constructs(e.g. stacks). the is more subtle. as manifested in, different forms of computational formulas correspond to different program constructs, and the second-order framework does not provide a silver bullet that applies to all constructs. the inductive framework studies here is therefore more appealing and generic: the programming construct in had guides directly the inductive definition, and once it does the match with a program logic is obtained.



