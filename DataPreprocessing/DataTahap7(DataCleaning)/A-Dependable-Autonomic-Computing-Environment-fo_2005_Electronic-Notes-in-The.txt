this paper is part of a r&d project aiming at the definition and implementation of an environment for dependable autonomic computing. the primary goal of the study is the increase of dependability of digital systems using self-healing techniques. mobile agents implement self-testing policies for complex and heterogeneous systems. the aim of this paper is to present the general ideas of the project, describe the design decisions and a detailed view of the current architecture. the research includes design and development of a working prototype.



starting from the idea of dealing with dependability issues during the mission operation of a system, our key point is an extensive use of mobile agents, i.e., autonomous and identifiable computer program that can move from host to host in a network under their own control, to periodically test a set of target systems(self-testing), and in case of failure to diagnose(self-diagnosis) and possibly solve the problem(self-repairing) before a severe malfunctioning occurs(self-healing).



mobile agents are programs that can migrate from one machine to another. mobile agents evolve from the existing distributed computing paradigms with several novelties. the main advantages are: autonomy, even more strongly than non-mobile agents; better support for mobile hosts; reduction of network traffic, since an agent can simply work on site; facilitation for software deployment. they can roam around, gather information about the



the periodic testing of critical component is provided by specific mobile agents. the tests we need to perform are software implemented hardware tests, such as testing the ram of the target system or the hard disk before a failure occurs. as a matter of fact, before failing completely usually components show abnormal behavior, and testing can reveal it, in a similar way as the initial bootstrap memory testing of a pc.



the agency is the core of the environment. the agency receives the information about each target system and generates a healing plan elaborating the settings coming from the local agents and those established by the global administrator. it also creates(activates) new mobile agents and send simple commands(goals) to them.



the manager agent is a mobile agent responsible for the management and the timely execution of the test plan generated by the agency. the manager agent is in charge of a set of target systems and it moves from one to another to check the status of the testing process, retrieve test history and collect results of the tasks performed by mobile agents. it can self-clone if in charge of too many target system.



pabilities needed by the environment and activated by the agency when necessary. an agent moves towards a target system, analyzes available resources and possibly performs its task. it can receive other tasks while it is moving or acting on a specific target system, possibly self-cloning. when it has terminated its tasks, it dies.



agency agents match the local administrator policies with the global policies(policy manager) and, along with the software and hardware information, generate a list of tests to perform(goal generator). the result is a list of goals to communicate to a mobile manager agent. the mobile manager agent in charge of the addressed system moves to the target and if it is the right time(determined by policies/goals constraints) it starts the actions, i.e., it sends to the agency a list of goals each representing a single action to perform, respecting policies/goals constraints.



the agency(goal interpreter) selects an agent able to perform the specific action: if the agent exists in the environment, i.e., it has been already activated, then the agency assigns the action(goal) to the existing agent, else the agency creates a new agent with information coming from the agent repository and activates it with the new action(goal).



the involved mobile agent migrates, moves to the target system and, if the resources are available, executes its task(goal); results are stored in the target system(local agent). the manager agent on duty is responsible for results acquisition and analysis. depending on results, it sends new tasks(goals) to the agency, e.g., a diagnosis action after a failure of a specific test,



local tests are triggered by goals in the test agents. as soon as a new goal is processed by the test agent it belongs to, this agent moves to the involved sut(system under test). here it finds the local agent and its services.



