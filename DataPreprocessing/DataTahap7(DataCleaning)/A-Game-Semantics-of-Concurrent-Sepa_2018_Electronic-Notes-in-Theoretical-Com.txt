in this paper, we develop a game-theoretic account of concurrent separation logic. to every execution trace of the code confronted to the environment, we associate a specification game where eve plays for the code, and adam for the environment. the purpose of eve and adam is to decompose every intermediate machine state of the execution trace into three pieces: one piece for the code, one piece for the environment, and one piece for the available shared resources. we establish the soundness of concurrent separation logic by interpreting every derivation tree of the logic as a winning strategy of this specification game.



satisfying p into a state satisfying q when it terminates, as long as each resource rk allocated in memory satisfies the csl invariant pk. the soundness of the logic was established by brookes in his seminal papers on the trace semantics of concurrent separation logic[5,6]. his soundness proof was the object of great attention in the community, and it was revisited in a number of different ways, either semantic, syntactic or axiomatic and formalised in proof assistants. one main technical challenge in all these proofs of soundness is to establish the validity of the concurrent rule:



our focus in this work is to develop a game-theoretic approach to concurrent separation logic. for that reason, we prefer to keep the logic as well as the concurrent language fairly simple and concrete. in particular, we do not consider more recent, sophisticated and axiomatic versions of the logic, like iris[8,9].



the parallel composition operator c1 c2 enables the two programs c1 and c2 to interact concurrently through mutexes called resources. a resource r is declared using resource r and acquired using with r when b do c, which waits for the boolean expression b to be true in order to proceed. of course, a mutex can be held by at most one execution thread at any one time.



