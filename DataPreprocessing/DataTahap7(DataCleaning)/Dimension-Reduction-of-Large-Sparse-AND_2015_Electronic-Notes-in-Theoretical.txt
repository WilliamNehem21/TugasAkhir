the main features of our reduction algorithm are that it works at the wiring diagram level and it preserves the number of steady states. furthermore, the steady states of the original network can be recovered from the steady states of the reduced network; thus, all steady states are found. also, heuristic analysis and simulations show that it runs in polynomial time. we used our results to study and-not network models of gene networks and showed that our algorithm greatly simplifies steady state analysis. furthermore, our algorithm can handle sparse and-not networks with up to 1,000,000 nodes.



for large sparse networks. also, the steady states of the original network can be recovered from the steady states of the reduced network. as in previous reduction methods, the main idea of our algorithm is that one can use steady state approximations without changing the number of steady states; however, there are some key differences which will explained in section 3. first, the only reduction steps that are allowed are those that result in a reduced and-not network. second, since we are using and-not networks only, we can make additional reductions that cannot be done with other networks. since and-not networks are completely determined by their wiring diagrams, we can store and-not networks efficiently using their wiring diagrams(avoiding the problem that the polynomial representation) and we can state all reduction steps and simplification of the reduced network at the wiring diagram level(avoiding the problem that the boolean representation has).



reduction step r1. here i has one incoming edge from node 0. then, we have fi= 0; and we remove node i by replacing xi with fi= 0. after reduction, node j will only have one incoming edge(from node 0).



reduction step r2. here i does not have any incoming edge. then, we have fi= 1; and we remove node i by replacing xi with fi= 1. after reduction, node k will only have one incoming edge(from node 0).



reduction steps r3, r4. here we have edges from k to j and from k to i of opposite signs, and a positive edge from j to i(other edges may be present as well). after reduction, all incoming edges of i are removed, and replaced by a single edge from node 0.



reduction step r5. node i has two incoming edges only, from k and j; there is also a positive edge from k to j(other edges may be present as well). after reduction, the edge from j to i is removed.



the actual algorithm is given below. the idea is to iteratively apply the reduction steps until the network is no longer reducible(every time a reduction step is used, new reducible nodes may appear). note that there are many orders in which one can apply the reduction steps, and in some cases they can result in different reduced networks(with the same number of steady states). based on the performance of preliminary simulations, the order given below was chosen.



although our reduction algorithm seems to run in polynomial time, the computation of steady states of the reduced network can be much more computationally expensive for general and-not networks. however, for sparse networks the reduced and-not network can be in practice several orders of magnitude smaller than the original network. indeed, for the boolean models and random networks that we study in the next section, the size of the reduced networks, m, had the same order of magnitude as ln(n). this is important because if m= o(ln(n)), then the time to compute the steady states of the reduced network is o(nl) for some l> 0 and thus the total time of steady state computation(reduction, computation of steady states of reduced network, and backwards substitution) is o(n2+ nl)= o(nk), where k= max(2, l).



since the problem of analyzing bns is hard for large networks, many reduction algorithms have been proposed[24,17,18,33]. however, it is not clear if such algorithms scale well with the size of the network. in order to optimize reduction algorithms, it is necessary to focus on specific families of bns. the family of and-not networks has been proposed as a special family simple enough for theoretical analysis, but general enough for modeling[27,29,6]. thus, we propose an algorithm for network reduction for the family of and-not networks. a key property of our algorithm is that it preserves steady states, so it can be very useful in steady state analysis.



we applied our algorithm to three and-not network models, and it performed very well; the reduced networks were several orders of magnitude smaller than the original network and the reduction took less than 3ms. using random and-not networks, we showed that our algorithm scales well with the number of nodes and can handle large sparse and-not networks with up to 1,000,000 nodes. to the best of our knowledge, no other algorithm can handle and-not networks or any other class of(nonlinear) bns of this size.



