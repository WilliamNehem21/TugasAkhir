there are three major aims in this paper. the first is to study the principle to design lts semantics in higher-order calculi, which gives not only the computation steps but also the congruence for higher-order processes. the second aim is to originate an approach to explicitly formulate higher-order substitution. we think higher-order substitution is an essential feature which makes higher order calculus different from first-order calculus. there should be a good formulation for behaviors of a higher-order substituted process p{r/x}. the third aim is to develop new techniques to solve the difficult questions in higher-order calculus such as congruence problems, factorization theorem, and organize the structure of theory with more intuition.



sangiorgi had some very illustrative examples of the problems in,. he pointed out that the separation between the object part(i.e., the process emitted) and the context of a higher-order output prevents a satisfactory treatment of the channels private to the two, and then causes the problems of higher order bisimulation mentioned above. to avoid this separation between object part and context of an output action, he proposed a context bisimucontext respectively, and then become p'. for example, the higher-order test label a(u).q means that the environment can accept an object emitted by p at port a and provide a continuation q after the interaction, and the object emitted will be used to instantiate the higher-order variable u in q.



the second aim is to originate an approach to explicitly formulate higherorder substitution. we think higher-order substitution is an essential feature which makes higher order calculus different from first-order calculus. there should be a good formulation for behaviors of a higher-order substituted process p{r/x}. in fact, we can gain a very intuitive classification on behaviors of process p{r/x}, which are either solely due to a part of p, or solely due toa copy of r, or due to interactions between a component of p and one copy of r, or due to interactions between two copy of r. despite the classification having clear intuition, people have never formulated it explicitly in higher order calculus. the difficulty lies in that p is an open process with free variables, which has not ever been dealt with directly. to overcome this shortcoming, we extend our lts semantics to associate symbolic transition rules for open



the rest of the paper is organized as follows: section 2 states the syntax of the calculi that will be considered in this paper. section 3 states the reduction semantics of our language, and the motivation of our work on the following contextual labelled semantics in detail. section 4 specifies the contextual labelled transition semantics and introduces the corresponding bisimulation in the calculi. section 5 proves the factorisation theorem and congruence properties of the bisimulation. section 6 will show the correspondence between our labelled transition semantics and reduction semantics. section 7 is conclusion and related work.



rules, a set of reduction contexts in which they may be applied, and a structural congruence. so it can be easily formulated in a style similar to that in contextual calculi.(2) as mentioned before, we adopt the contextual point view to work out a new labelled semantics, and essence of the so-called contextual point view is just making explicit the intuition that labelled transitions capture the possible interactions between a term and a surrounding context. so it is helpful to interpret our motivation of the new labeled semantics.(3) if the reduction system is available, the correctness of the new labelled semantics can be shown by proving the correctness between the two semantics.



the test a(u).q and become r, and p' can provide the test, then put them in parallel the system can do an internal communication and become r. in other words, an internal communication of r is due to a reaction of r1 to a test provided by r2, where r1, r2 are some subprocesses of r. we can easily prove the following three lemmas.



