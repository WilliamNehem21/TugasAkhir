consistency and completeness were identified as useful properties of specifications in and in. in the context of specification of embedded systems, completeness of the specification is defined as the specification having a response for every possible class of inputs. in the same context, consistency is defined as the specification being free of contradictory behavior, including unintentional non-determinism. formal definitions of these properties, in the context of abstract state machine(asm) specifications, are given in section 3. traditionally, verifying these properties was accomplished manually by system specifiers, through inspection of specifications. because a specification is likely to evolve during the engineering lifecycle, the ability to verify these properties automatically can ease and shorten the analysis process. language specific verification algorithms have been proposed in and in. in contrast, the approach proposed in this paper is not language specific and can be reused for other languages. the proposed approach achieves verification by translating specifications to formulas in propositional logic, formulating completeness and consistency as a boolean satisfiability problem(sat), and automating the verification procedure by using a generally available solver.



in the asm community, various derivatives of the asm language have been developed, including the asm workbench and the abstract state machine language(asml). a mapping between the asm workbench language(asm-sl) and finite state machines, for the purpose of model checking, was proposed in. a mapping between the asml language and finite state machines was proposed in. the mapping to finite state machines was used for automated test case generation. the mapping proposed in this paper resembles the mappings proposed in these two approaches except that it ignores the effect of rule applications and does not need to generate a global reachability graph. the proposed mapping concerns itself only with relationships between rule guards inside a single machine and hence produces a smaller state space than might be generated through a complete reachability graph.



sat solvers have been used for a variety of automated analysis, including test case generation,. although the sat problem is known to be np-complete, the use of sat solvers has been shown to be useful in a wide range of cases. sat solvers and model checkers show similarities in their benefits, namely automation of the verification procedure and automation of the counterexample generation. sat solvers and model checkers also show similarities in their drawbacks, namely the potential for state space explosion and the resulting intractability of large state space exploration.



rule, ei, to be applied to the environment. the effect of the rule is grouped into an update set, which is applied atomically to the environment at each computation step of the machine. for a complete description of the theory of abstract state machines, the reader is referred to.



the timed abstract state machine(tasm) language is an extension of the asm language for the specification and analysis of real-time systems. the tasm language extends the specification of rules by enabling the specification nonfunctional properties, namely time and resource consumption. the semantics of rule execution extend the update set concept by including the duration of the rule execution and a set of resource consumptions during the rule execution.



informally, completeness is defined as the specification having a response for every possible input combination. in the tasm world, for a given machine, this criteria means that a rule will be enabled for every possible combination of its monitored variables. the monitored variables are the variables in the environment which affect the machine execution. formally, the disjunction of the rule guards of a given machine must form a tautology. the letter s is used to denote an instance of the sat problem. the completeness problem can be expressed as a sat problem in the following way:



the completeness problem is casted as the negation of the disjunction so that counterexamples can be generated by the sat solver. if s is satisfiable, all the assignments that make s satisfiable can be automatically generated by the sat solver. if s is not satisfiable, the specification is complete.



informally, for a state-based specification, consistency is defined as no state having more than one transition enabled at the same time. the definition given in is similar but extended to include other properties of the specification such as syntactical correctness and type checking. the definition of consistency adopted in this approach is the same as in. in terms of tasm specifications, this definition states that no two rules can be enabled at the same time. this definition will lead to a set of sat problems to define consistency: lems can also be composed into a single sat problem. as for completeness, the sat problem is defined in such a way that if the specification is not consistent, a counterexample is automatically generated. if s is satisfiable, all the assignments that make s satisfiable can be automatically generated by the sat solver.



the tasm language is a typed language that includes integer datatypes, boolean datatypes, and user-defined types. user-defined types are analogous to enumeration types in programming languages. the tasm language is a subset of the asm language and does not include all of the constructs of the asm language. for example, the choose construct is not part of tasm. the concepts from the asm language included in the tasm language are the same as defined in. the translation from tasm to sat involves mapping the rule guards, gi, to boolean propositions, bi, in conjunctive normal form(cnf). the following subsections explain how this translation is performed.



in the tasm language, user-defined datatypes and boolean datatypes are simple types that can take values for a finite set. boolean variables can take one of two values(true or false). user-defined types can take one of multiple values, as defined by the user. in typical specifications, user-defined types rarely exceed five or six members.



following type is introduced: type1:={val1, val2,..., valn}. a variable of type to illustrate the generation of the at least one and at most one clauses, the boolean can be viewed as a variable of type type1 where n= 2. first, the set of



< com pop>< expr>, where< var> is an integer variable< comp op> is a comparison operator and< expr> is an arbitrary arithmetic expression that can contain constants, variable references, function machine calls, and operators. the restriction is that the left hand side of constraints can contain only a variable, with no arithmetic expressions allowed. the translation proposed in this section, deals only with linear constraints whose right hand sides are constants. arbitrary symbolic right hand sides will be handled in future work, as explained in section 6. the key idea behind the translation is to convert each integer variable to a userdefined type. this is achieved by collecting all of the constraints on a given integer variable and extracting the intervals that are of interest. these intervals become the members of the user-defined types. once the integer type has been converted to a user-defined type in this fashion, it can then be converted to a boolean formula using the approach from section 4.1. the algorithm to reduce integer variable to user-defined types consists of 4 steps. for each monitored variable of type integer:



one and the at least one clauses, in the same fashion as explained in section 4.1. for a specifications where there is significant use of integer constraints, the use of mixed integer programming(mip) solvers could be better suited for completeness and consistency analysis. this option is investigated in section 6.



erties automatically, using a widely available and optimized tool, a sat solver, is provided. this approach contrasts previous attempts using other languages, which have used special purpose verification algorithms. previous attempts have motivated the use of special purpose algorithms to remove the need to generate a global reachability graph, as would be done in approaches based on model checkers. the translation proposed in this work also removes the need to generate a global reachability graph by constraining the analysis to a single machine and by considering only the structural properties of the specification. the big open question in this work is whether the use of a sat solver to verify consistency and completeness is feasible for archetypical real-time system specifications. the number of propositions can grow exponentially, depending on the nature of the specification. preliminary results indicate that the translation algorithm could undergo further optimization since it appears to be a bottleneck, compared to the time spent in the sat solver. the translation algorithm will be analyzed in detail for time complexity and will be optimized accordingly.



