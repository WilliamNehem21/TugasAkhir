collecting metadata on a family of programs is useful not only for generating statistical data on the programs but also for future re-engineering and reuse purposes. in this paper we discuss an industrial case where a project library is used to store visual programs and a database to store the metadata on these programs. the visual language in question is a domain-specific language, function block language(fbl) that is used in metso automation for writing automation control programs. for reuse, program analysis and re-engineering activities and various data and program analysis methods are applied to study the fbl programs. metadata stored in a database is used to provide advanced program analysis support; from the large amount of programs, the metadata allows focusing the analysis to certain kinds of programs. in this paper, we discuss the role and usage of the metadata in program analysis techniques applied to fbl programs.



the largest portions of software life-cycle costs are due to maintenance activities[2,5,9]. various reverse engineering techniques can be used to support software comprehension and visualization that, in turn, support maintenance. if available, metadata on the programs can be used to guide the reverse engineering and visualization activities. in this paper, we discuss metadata-driven program analysis techniques used for maintaining visual programs.



a visual language manipulates visual information, supports visual interaction, or allows programming with visual expressions. further, visual programming languages can be defined as languages for programming using visual expressions. the visual programming language under study, called function block language(fbl), is a domain-specific language used at metso since 1988. fbl is used in paper machine controls, power plants, and marine automation and in other various continuous real-time control systems.



along the years, the language itself has been modified and further developed. the programs written are stored in project library archives. in the storing process metadata is read from the programs and stored into the database. metadata is used as search conditions, according to which desired programs can be downloaded from local project libraries. for instance, the engineer can look for existing solutions that could be reused for his current purposes. stored programs and metadata together allow detailed analysis of programs themselves, relations of different programs, and statistical reports on the usage of fbl. due to the analysis techniques developed and the syntax of the language, high reusability of programs and their parts have been achieved. the reverse engineering and visualization techniques are discussed in in more detail. in this paper we focus on the metadata itself, describe the role of meta-models used for particular problem domains, discuss the iterative design process, and show statistical data collected on fbl usage along the years.



we first give a brief overview to fbl and discuss the language meta-models and their role in section 2. we then present and discuss metadata-driven methods used for designing, maintaining, and reverse engineering fbl programs in section 3. these benefits include, e.g., high reusability and improved program quality. the metrics used and types of metadata collected to support program analysis are introduced in section 4. we also give some details of metadata statistics and discuss the benefits of using metadata to support program analysis activities. finally, concluding remarks are given in section 5.



with fbl, engineers can design visual programs that connect physical electrical measurement signals to program parameters. those parameters are referenced by symbols containing other values needed as attributes. by connecting these symbols the engineer can create algorithms to control and run actuators, such as valves, motors, and pumps, in the process.



the visual notation of fbl consists of symbols and lines connecting symbols. in fbl, symbols represent advanced functions. the core symbols of fbl, function blocks, are subroutines running specific functions to control a process. a simple example could contain an input symbol to read a water level measurement. that input symbol could be connected to a function block symbol representing a subroutine for calculating and keeping the level. then the function block symbol is connected to an output symbol that will modify a control valve position.



fbl user interface domain is defined by those graphical objects that are needed to implement a visual language. the fbl itself is not a meta-language, but the symbols used contain enough meta-information to define new function block skeletons. this feature is especially useful for mapping the problem and solution domains. namely, the real physical world with devices, e.g. pumps and valves, of the problem domain can be represented as appropriate graphical objects in the solution domain, i.e., in fbl programs. this is also useful when explaining the solutions to the customer: the solutions are easy to understand since they use familiar symbols.



clustering in traditional reverse engineering methods can be constructed, for instance, by taking advantage of the syntax of the programming language used, using software product metrics to identify highly cohesive clusters, or using existing software architecture models and mapping them with the lower level details. software product metrics used for identifying subsystems typically measure inter couplings and intra cohesion of the sets of software elements. in the approach presented in the paper, the syntax of the language is used to construct high-level models for the programs. this together with the usage of metadata stored and metrics values calculated form the basis for the program analysis techniques to be discussed next.



the design process involves multiple domains. the problem domain is the real physical world with devices, e.g. pumps, valves, temperature/ flow measurements etc., which are modeled in a solution domain with fbl language. the fbl diagrams(fbl programs) designed and constructed by the engineer can be further connected to each other. the diagrams that belong together in a solution space are also close to each other in the real world as devices. so, the solution directly reflects the real world situation.



for generating an abstract view from function block diagram, the details of the program are filtered out and only the input and output symbols are preserved. the abstracted program is called function group, indicating that one symbol contains several functions(function blocks and ios). a program visualization function creates new symbols on the fly for each abstracted component. to compare existing solutions, the engineers need few function groups to get the main idea of the principles used in solution.



when re-engineering programs, existing program instances can be changed by extending or modifying them. for instance, new function blocks can be added, parameter values of existing programs can be changed, and connections between function groups can be changed. the engineer can thus create new programs that were first extracted from the database using reverse engineering techniques.



for increasing the degree of reuse and thus decreasing the development times, reusing existing function groups instead of modifying individual programs is preferred. this assumes that the existing function groups are general enough to be usable in various programs. in many cases, the structure of the program itself is reusable but the differences occur in parameter values. for enabling reuse in such cases, a concept of a template has been introduced to fbl. templates are ready-made programs without instance values. they can be used by external module symbols. in other words, templates describe individual parts of process control software, without project specific definitions. actual application instances are created when project specific data is combined with a template. for a template, the environment generates a program according to given parameter values.



change format) in a directory structure corresponding to the project s process hierarchy. these archives are accessible for project engineers by a web interface. these detached project libraries are then bound under a single content management entity. the centralized content management solution stores only the essential application metadata to a content management server and allows the archived files to remain in local project libraries. the stored metadata includes also links to actual application solution files.



project library archives and a database used to store fbl programs together with metadata allow the extraction of various kinds of statistical data of the programs. when extracting and storing metadata from a particular fbl program, a special program is used. the metadata stored is used as search conditions, according to which desired programs can be downloaded from local project libraries. for instance, the user can look for exact solutions using a specific tool by defining criteria to match a description or a primary function block. navigating in a process hierarchy is also a way to search fbl programs. this is a common way to find similar problems and existing solutions. all the information that is used in a search/ navigation is based on metadata. metadata includes: a description of the fbl program, a process hierarchy it belongs to, parameters used, and primary function block and i/o types.



a rough estimate for the project complexity metric is calculated as an average: number of function blocks divided by the number of i/o connections. when analyzing traditional programming languages, a metric lines of code(loc) is often used. a corresponding metrics used when analyzing fbl programs is number of entities(noe), where an entity is a symbol, text, a line, or any other graphical object in the diagram.



even though a lot of metadata is stored on each fbl program, its amount is relatively small compared to the amount of programs(diagrams). as an example, information that is archived is currently roughly from 200 projects. there are about 40 gb of compressed diagrams, while the amount of metadata is only about 850 mb. typically, the access rate is about 2000 searches in a month.



as an example scenario, the engineer can give conditions like description and process area to find certain type of solutions. as a result, he might get a list of a couple of hundreds of diagrams. by using the information provided in this list and other more detailed metadata on the programs, the user can further focus the search to limit matching results. the user can also quickly view the actual visual programs.



special tools implemented by karaila and his engineering group support another, less user-dependent way to use metadata to find programs that could be reused. these tools analyze implemented fbl programs. the tools look for basic program structures that are used multiple times in different fbl programs and use the following metadata in its matching algorithm: entity count of a fbl program, primary function block count, and function block count. this is used as a fingerprint to make first level matching faster and easier. the second level is more detailed and makes the actual comparison between the fbl programs.



calculations are based on metadata stored in the database. summary groups are sums of loop types and primary function blocks. project analysis window shows an average number of different io types from diagrams and the total amount of each io type. this information can be used to estimate the scope of similar projects. entity and function block counts and averages give an estimate of the capacity needed(memory and load). finally, complexity is used later to analyze the project working hours. when selling a new project with similar process& devices, the complexity value can be checked to ensure we should allocate the right amount of hardware(devices) in that kind of project.



in small scale projects templates are used heavily but the same templates appear only few times. namely, there are a lot of templates that are used only few times. in bigger projects, however, same templates are reused more often. the statistical values show that in 2000 diagram instances there are over 400 templates and a bit over 10% hand-made instances where templates have not been used. most of the hand-made instances are not fbl-based diagrams. instead, they are other needed instances, for example user interface modules and diagnostic modules that are not implemented with fbl. thus, the templates are heavily used in practice.



in this paper we have discussed metadata-driven program analysis techniques used to support re-engineering and reuse of visual fbl programs. fbl is a domain-specific language used in automation industry. fbl is used e.g. in paper machine controls, power plants, and marine automation and in other various continuous real-time control systems. we have especially discussed the role and usage of metadata, characterized the design process, and discussed some statistical values collected on fbl usage along the years.



the core of fbl was implemented in the late 1980s. the software quality and usability has been improved based on internal measurements carried out at metso and based on feedback from satisfied customers. in the programming environment, there has been a steady evolution and a desire to improve it. lessons learnt from the long history of using fbl have guided the development of the program analysis techniques and especially helped the fbl environment developers to conclude what kind of metadata is needed and useful for program analysis, reuse, and re-engineering purposes.



as a part of our future work we aim at further studying the role of fbl meta-models, especially the domain models. the metadata-driven program analysis techniques could be improved if there was a semantic relation between the metadata and the meta-models, namely, if metadata with semantic meaning could be used. this means that information from the real world would be tied with existing metadata. this semantic information could help us e.g. in the problem of recognizing a template for a device automatically.



