to make proofs less prolix and more formal. while a wieldy and accessible calculus that captures the full power of games may be unattainable, calculi for restricted yet non-trivial subsets of game-based models are very handy. they illustrate the game semantics in an applied setting, making the subject more accessible to those who find its abstractness daunting. but, more importantly, such calculi can actually serve as a foundation for a new and practical approach to program analysis, predicated on solid theoretical results. a similar avenue of research, but as applied to static analysis, is explored by hankin and malacaria[8,9].



the reader is not expected to be familiar with game semantics in order to understand this article. also, it is not possible to condense such a rich topic in a few pages, but good and comprehensive introductory material is available. the specific games model used to interpret foil and on which we base the present regular language model is the one developed by abramsky and mccusker[5,1]. in this section we will only introduce some of the key intuitive concepts of game semantics, especially as applied to call-by-value games.



represented by a game, but by a family of games. a strategy interpreting a term has two distinct stages, a protocol stage in which one of the members of the family is selected, followed by a play in the selected game. intuitively, this mirrors the fact that, in call-by-value, all arguments are evaluated exactly once before the body of the function is evaluated. accordingly, free identifiers can have only one value throughout the evaluation of a term. in contrast, callby-name allows identifiers to correspond to different values at various points in the evaluation.



a regular-language representation of the game semantics of foil is defined as follows. with types we associate games, represented as regular languages over an alphabet denoting the moves. with terms we associate strategies, represented as regular languages over the disjoint sum of the alphabets of the types of the free identifiers and the term itself.



the semantics of if is directly specified in the games semantics. looping in game semantics is defined as an abbreviation using the recursion combinator. a general recursion combinator is not specified in this treatment, but the fixed point can be calculated by hand; the semantics of while above is the result of that calculation.



we have presented a games-based regular language semantics for an imperative language with first order procedures using call-by-value function application, with arrays and variables passed by-reference. the model is obtained directly from the game semantic model[5,1] by working out the details of the categorytheoretical presentation and by observing that much of the games apparatus(justification pointers, etc.) is unnecessary in handling the present language subset.



