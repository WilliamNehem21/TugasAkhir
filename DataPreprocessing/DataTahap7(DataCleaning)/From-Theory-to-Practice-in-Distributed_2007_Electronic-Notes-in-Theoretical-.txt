this talk will start by presenting theoretical results on determinism for asynchronous distributed components. it will then show how to apply those results in a practical implementation, available as open source within the objectweb open source community. further, current work aiming at defining a joint european component model for grid computing(gcm) will be summarized. finally, it will conclude with challenges at hand with component systems, especially work related to capturing behavioral properties. current work aiming at defining behavioural models and techniques for hierarchical components will be introduced.



within the gcm, collective operations, previously achieved at the level of objects, are being abstracted into elements of the interface. this shift first represents an achievement in terms of readability, and reuse. second, functional methods can be used in various contexts, standard non-collective code and at the same time in powerful group interactions. moreover, it also achieves an important increase in the level of abstraction used by the programmer: interfaces versus the old api style for controlling parallelism, multicasting and synchronizations. finally, it permits typing of collective behaviour.



from an historical stand, with a hierarchy of modules then objects then components, components could be viewed as moving backwards in programming evolution. we are moving to a more static topology, while we have shifted from module(static assembly) to objects where the inter-connection between pieces of code is often purely dynamic. with components, the interconnection is static, and can only move back to dynamicity using controllers at execution, like binding controllers. in other words, only some specific entities of the architecture authorize the introduction of dynamicity. somehow, components can be viewed as dynamicity under control! nature: remote method invocations typed with interfaces. one would not be able to check large systems without some of the guaranties given by a static type system. the absence of unstructured call-backs and ports makes a tremendous difference with respect to verifying a component system.



