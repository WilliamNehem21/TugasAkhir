the remainder of this paper is structured as follows. section 2 documents background and related work undertaken in this field and section 3 documents our experimental design and methodology. section 4 presents and analyses our platform independent instruction timing results and section 5 compares these results against results acquired using the rdtsc assembly instruction. finally, section 6 concludes the paper and identifies some future areas of research on this topic.



we can model this quantisation effect using standard statistical techniques to achieve high resolution timing in the presence of low resolution clocks. lilja documents the use of bernoulli trials to achieve high resolution timing. beilner presents a model of event timing and presents timing results using his technique for the times taken to pass a message between two processes. danzig et al. use the technique to develop a hardware micro-timer to time machine code executing on sun 3 and sun 4 workstation.



in contrast, work on bytecode timing is relatively sparse. herder et al. present the results for java bytecode timing, although, the technique used to gather such results is not documented. wong et al. present a technique for the measurement of bytecode execution times, although, the final technique is not platform independent and relies on native method invocations.



the analysis of machine level instruction execution timings has also been undertaken. the work of peuto et al. was directed toward the production of an instruction timing model to model cpu performance measurements. architecture manufacturers such as intel and ibm also detail the execution time in clock ticks of the machine instructions associated with their architectures.



albert et al. propose a framework for the cost analysis of java bytecode. this technique involves transforming the iterative bytecode structure to a recursive representation, and inferring cost relations from this representation. in, albert et al. apply their previously proposed framework to java programs that include operations such as: recursion, single loop methods, nested loops, list traversal as well as dynamic dispatching.



stark et al. presented a decomposition of the jvm into a number of sub-machines. each sub-machine has the ability to execute particular subsets of the jvm instruction set. we also adopt this approach, by concentrating on individual cores of the jvm and their respective programming paradigms, and believe that a clearer understanding of the interaction of a java application and jvm can be gained. in particular, we concentrate on reporting timing results of the 137 jvm instructions that compose the imperative core of the jvm.



the platform independence of our technique is insured by using only standard java library timing methods. there are two timing methods available for consideration: system.currenttimemillis and system.nanotime. our choice was based on timing precision and accuracy and as such the former of the two was chosen. this choice was made as system.nanotime cannot guarantee nanosecond accuracy. all java timing classes, containing the jvm byte code instruction to be timed, were engineered using the byte code engineering library(bcel).



all experiments conducted where carried out on a rocks linux cluster containing 100 nodes. each node contained one 1.13ghz intel pentium iii dual core processor with 1gb of ram and a cache size of 512kb running the linux centos operating system release 4.4(kernel version 2.6.9) executing at run level 3 with no x-server. the sun java(tm) 2 runtime environment, standard edition(build 1.5.0.07-



the identification of a number of groups of instructions, where each instruction within a group exhibits similar execution time, would help in reducing the dimensionality of any timing model dependent on knowing the execution time of each jvm instruction. in performing the cluster analysis we choose a granularity value as a cut-off point, so that when the instructions in a cluster differ by less than the granularity value we do not subdivide them further. thus there is a trade-off: small granularity values give better accuracy at the cost of a larger number of groupings.



in this paper we have presented a technique for the timing of java bytecode instructions that is platform independent. we have investigated the effect of timer overhead and the importance of subtracting this quantity from instruction timings. we have characterised the execution times of all java imperative instructions. we have considered the clustering of instructions based on their execution times and finally we have presented a comparison of our technique against instruction timings acquired using the rdtsc assembly instruction.



the contributions of this paper are: first we have presented a technique that statistically estimates the execution time of java instructions within a particular confidence level. in particular, we can quantify the error associated with each instruction timing. we have characterised instruction execution times and have identified a group of imperative instructions, primarily floating point conversion instructions, that execute considerably slower than all other instructions. we have presented a technique that clusters instruction timings within a predefined granularity. finally we have identified a strong positive linear relationship between instruction times acquired using our statistical method and those acquired using the rdtsc assembly instruction. we have modeled this linear relationship and have identified that platform independent instruction timing analysis under estimates the execution times of instructions by approximately 23%. however, the strength of the linear model still allows us to accurately calibrate the measurements.



for future work, we intend to quantify the effect of processor pipelines and cache miss rates on instruction timings. we also intend to carry out our experiments on different platforms and investigate the correlation of results acquired from different jvm implementations. we also intend to extend our instruction timing model to include instructions from within other cores of the jvm. as part of future work we also intend on applying our results to existing jvm models. in particular, we intend on using our instruction execution times, as part of a larger model to predict the execution times of java applications.



