the unifying theories of programming(utp) provide a framework that allows for the integration of a variety of programming languages with different computational paradigms within a unified relational model. it captures the meaning of imperative, functional, declarative and concurrent languages, for example, and identifies common features. it also provides a uniform semantic presentation of programming theories, and shows how links between them can be formulated and reasoned about. the semantics of a variety of integrated programming and modelling languages are based on the utp[7,12,2].



with the existing semantic encoding, there are a few subtle complications related to reasoning about refinement statements as the above. they mostly arise from the fact that neither a dynamic notion of utp theory nor of instantiation of a theory are provided. instead, that encoding introduces a global universe of variable names with no restrictions imposed on their types. concretely, a type of bindings(records) that associate names to values is introduced and predicates of all theories are modelled as sets of bindings.



we identify two problems with this approach. firstly, such axioms would not merely restrict the predicates of a singular utp theory but in fact all utp theories in the current proofpower theory scope. this is partly due to utp theories being organised in a static hierarchical manner, and ultimately each theory being characterised by further restrictions on the general theory of relations whose underlying predicates would be constrained by axioms such as the above. for this reason it would not be possible for two predicates in which variable x has different types to coexist within the same proofpower theory scope, a crucial limitation that we overcome in this work. the hierarchical presentation of utp theories, which is explored in, has crucial benefits in terms of reusing definitions and laws, hence our aim is not to abandon it but rephrase it in a dynamic way.



section 2 further details the main principles and ideas of the utp; the following section 3 then presents the relevant parts of our semantic encoding defining the notion of alphabetised predicate, utp theory and instantiation. section 4 surveys how we reason about utp theories in general, section 5 is concerned with refinement laws and reasoning about particular specifications, and section 6 addresses the formulation and proof of properties about theory links. section 7 discusses a few relevant design issues and revisits the introductory refinement conjecture, and in section 8 we finally draw our conclusions.



the alphabet of a theory defines the variables that correspond to a relevant observable property. in programming theories these could be, for example, state variables, but also auxiliary variables that may record termination of the program(okay), traces of events while the program executes(tr), for example. healthiness conditions identify the set of predicates with the right alphabet that belong to the theory.



operators include skip(iia), the assignment x:=a e and the conditional p a b d q. the subscript a of these operators is an alphabet that needs to be given as a parameter. any construct in the utp must specify the alphabet of the corresponding predicate; where the alphabet cannot be determined from the operand(s), it has to be explicitly provided.



as already said, the semantic model for an alphabetised predicate is a set of bindings describing the valuations that render it true. the potential bindings that can be used in representing predicates are, however, subject to type restrictions. the formal characterisation of an alphabetised predicate is a tuple defined as follows.



ensures that the universe of a predicate does not contain information that is not relevant to its meaning. this could result in anomalies when combining predicates of different theories that have incompatible universes. the second constraint ensures that the bindings of a predicate respect the type constraints imposed by the universe.



the type utp theory allows us to represent arbitrary instantiations of utp theories within the same proofpower reasoning scope. to make the process of constructing theories more convenient, we provide functions for generic instantiation, instantiation through strengthening existing theories, or specific instantiation of common utp theories. the inherent hierarchy of various types of utp theories is directly reflected by the proofpower definitions which provide their instantiation means.



one of the motivations for instantiation is to permit reasoning about the predicates of particular utp theories, and construct verification arguments based on refinement. although utp theory has the ingredients to distinguish various theories, we have to provide further means to characterise the predicates of these theories. the predicates of a given utp theory object are determined by the function theorypredicates.



alphapredicate: the argument has to be a predicate of the respective theory. similarly, the range may be specified to be predicates of specific theories. an example is the definition of the skip operator for designs, which is different from the relational skip iir.



to express this law more concisely, we provide an alternative definition which parameterises truep with a utp theory. conceptually, this allows us to speak of predicates such as true, x:= 1, y'= 2, ii, and so on within specific theories. the following illustrates how this results in a more compact rendition of the above law.



an alternative approach is to formulate and prove a collection of algebraic(refinement) laws specific to particular utp theories. this is achieved by explicitly stating the family of theories within which it holds. in the case of nondeterministic choice we can formulate the following law that allows us to easily prove the above refinement.



use of a posteriori constraints being imposed on existing variables as they are not checked; this has been taken into considerations when recasting the existing definitions and encoding. for example, to handle the restrictions on the type of okay and okay' in a theory of designs, we do not impose any constraints on a previously introduced set, as in. instead, we define a set des universe which explicitly specifies the domain of the instantiation function instdestheory presented in section 3.1. to apply instdestheory to some universe u, we have to prove that u introduces the correct type restrictions on the auxiliary variables. if this is not the case, the result of the function application is undefined, and this can be detected as soon as we attempt to prove properties about instdestheory u because of the absence of knowledge about its value. this is not, however, an inconsistency and does not raise the possibility of vacuous proofs.



we have presented a semantic encoding of the utp in proofpower-z that provides facilities for theory instantiation and thus allows us to mechanically reason about utp theories in a specific as well as general manner. previous work on mechanised reasoning in the utp was geared towards proving laws valid in families of theories rather than properties of particular models. in contrast, our approach supports reasoning about(elements of) specific instances of theories, and as almost a side effect, about theories in general.



