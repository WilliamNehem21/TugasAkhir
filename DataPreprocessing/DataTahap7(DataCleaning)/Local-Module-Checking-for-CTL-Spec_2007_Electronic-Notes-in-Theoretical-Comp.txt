with the advent and widespread use of embedded systems, which are ubiquitous reactive computing systems ranging from simple home appliances to very complex applications in avionics and defense, the need for formal methods in the design of reactive systems is growing. one very common approach to verification of reactive systems has been model checking. a model checker takes a formula in some temporal logic as a desirable property and performs formal analysis over a finitestate model of a system(called a kripke structure, a special class of finite state machines). the model checking process is essentially an automated reachability analysis task over the finite state model of the system. this task either terminates with a proof that the temporal property holds over the model or on failure generates a counter example.



an open system maintains an ongoing interaction with its environment. hence, the state-space of such a system may be partitioned into a set of states that are open(also called external or environment states) and another set of states that are closed(also called internal or system states)[8,9]. an environment state reacts to events in the external environment of the open system and the environment is considered asynchronous and uncontrollable. a system state, on the other hand, takes no inputs from the external environment and the system automatically chooses one of the transitions based on some internal decision(such as say the value of a variable or the result returned by a function). kupferman et al. have recently shown that model checking may not be enough for open systems due to the presence of environment states and when branching formulas are considered in the specification. the proposed technique, called module checking, takes the asynchronous environment into account while doing a proof for branching-time logics.[6,5] further discuss techniques devoted to issues concerning verification of open systems.



we have developed a local module checker by extending nusmv. local module checking has been compared with the generation of the maximal environment under which the given ctl property is satisfied to demonstrate the performance gain of the proposed approach. the benchmarks are examples from nusmv with both environment and system states.



in contrast to model checking where all transitions in every state of the model are always enabled, module checking is specifically directed for verification of models of open systems with states where the environment decides which transitions are enabled. typically, in models of open systems, modules in short, the states are partitioned into two sets ss and se where ss consists of system states with all outgoing transitions enabled while se is the set of environment-controlled states where some(at least one) transitions are enabled. note that, the environment can enable one or more transitions but cannot disable all transitions.



it is important to note here that the above is not an implementation of global module checking. global module checking advocates the need to check if the given property is satisfied by the module under all environments. however, the above approach constructs only a single environment under which the given ctl property is satisfied by the module. however, unlike the local module checker which attempts to generate a small witness, the algorithm for global module checking constructs the biggest environment under which the module satisfies the given property. this is done by enabling all but those transitions in reachable environment states which may lead to the dissatisfaction of the given property. it was observed that on the average, computing the maximal environment under which the original ctl property is satisfied consumes more time than computing a small witness under which it fails.



note that for many modules, the original property and its negation were both satisfied under different environments. a majority of models had multiple start states. in these cases, the local module checker(and the maximal witness generater) was executed on each start state. models with dense transition relations such as dme1 and syncarb5 took significantly more time. models with relatively sparse transitions relations such as abp4 and idle took lesser time even though they had a higher number of reachable states. the local module checker took slightly longer when the original ctl formula was satisfied by the module(abp4, pqueue, periodic).



