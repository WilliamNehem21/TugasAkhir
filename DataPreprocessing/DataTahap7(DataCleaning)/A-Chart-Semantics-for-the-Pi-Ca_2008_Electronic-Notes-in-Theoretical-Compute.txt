this paper explores a different direction, the use of mscs as a formal semantics, in terms of potential execution histories, for known code. we work within a process calculus, the pi-calculus, although the ideas should apply to other languages. the semantics of the pi-calculus is typically specified as a reaction or reduction relation, or as a labelled transition system[30,39]. we propose a form of msc as an alternative.



to explain some of the basic ideas and to see some of the benefits of a chart semantics for the pi-calculus, we describe a simple example. we suppose there is a single stateful server s(n, s) which when called with a value n' and a session channel c, responds by sending on c its current state n, provisions a private service r(c) to handle the session, and changes state to s(n', s). here is pi-calculus code for such a server, together with a client c(n', s) that initiates such a session, and then runs a(n, c) where n is the previous state of the server and c is the session channel.



the pi-chart below shows interactions between one server and two clients. pi-charts are in the spirit of mscs but do not conform to the letter of the standard. in particular, we allow processes to fork, and to generate fresh names.



mantics is hard to visualize; listing the series of intermediate states can lead to an overwhelming amount of syntactic detail. conventionally, reduction and transition relations are closed up to associativity and commutativity of parallel composition. hence, it is hard to track the evolution of individual threads within a system. one solution is to introduce syntax for abstract locations, although this increases the amount of syntactic detail when visualizing reductions. on the other hand, pi-charts have a two dimensional representation that is easily rendered pictorially. the graphical structure allows detail, such as process labels, to be omitted with



little risk of ambiguity. vertical paths in a chart track the evolution of individual processes; in our example, we see that s(n, s) is an ancestor of r(c1), s(n2, s), and r(c2), but not of the other processes at the bottom of the chart.(there is, though, a causal relation between s(n, s) and all the processes at the bottom.)



appendix a shows how charts can usefully illustrate the behaviour of biological reactions expressed in the pi-calculus. appendix b is a case study of proving properties expressible with pi-charts. we introduce a type system built from standard notions of name groups, group creation, and usage bounds on channels. formal data flow and usage properties are conveniently expressed using charts. theorem b.1 establishes bounds on data flow and channel usage guaranteed by the type system.



let p be the set of all processes. names identify communication channels. we write fn(p) for the set of names occurring free in p. let p{y/x} be the outcome of substituting y for each free occurrence of x in p. we write a, c, x for finite tuples of names.



each pi-chart has a top, the nodes with no predecessors, and a bottom, the nodes with no successors. a core idea, formalized later as theorem 3.7, is that a pi-chart represents a computation starting with the processes at the top, and ending with those at the bottom. we formalize top and bottom below, together with other notations needed for a compositional definition of pi-charts: new(g) is the set of names generated within a chart; gnil is the edgeless graph consisting of the terminal nodes of g, that is, those labelled with 0.



crazzolara and milicia establish explicit formal links between mscs, formalized as pomsets, and the semantics of the security protocol language(spl). spl can be seen as a simple process calculus, with broadcast communication, but without process forking as in the pi-calculus. they define an algorithm for constructing an msc from any finite trace in the transition semantics of an spl program. their main formal result is that the events of such an msc can be linearized to match the trace and moreover that every linearization of the msc corresponds to a trace of the original spl program. their mscs are extracted from an existing semantics for spl, rather than being defined directly.



although a chart corresponds to a single execution trace, in future we envisage verification tools for proving properties about the set of all charts generated by a given process. for example, this could be useful for validating high-level protocols expressed as pi-calculus processes. in cases where the desired properties do not hold, a visual execution trace representing a counter-example could be presented to the user.



the chart shows how one of the genes, in this case gene(a, b), transcribes a protein(b), which immediately blocks gene(b, c). gene(c, a) transcribes protein(a) soon after, which blocks gene(a, b).the gene(a, b) and gene(b, c) both remain blocked, waiting for a slow unblock delay to fire, while gene(c, a) is able to freely produce protein(a) and start the first oscillation cycle.



