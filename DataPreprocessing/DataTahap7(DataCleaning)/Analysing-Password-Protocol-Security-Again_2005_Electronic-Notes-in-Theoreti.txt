unfortunately, assuming ideal encryption to analyse password protocols is not realistic, since most practical encryption schemes are far from this ideal. in practice, password protocols are designed to be secure when instantiated with a particular encryption scheme, which makes the security against dictionary attacks dependent on the chosen cryptosystem. typically, the security of an encryption scheme is characterized by certain properties that the ciphertexts satisfy. for instance, an encryption scheme is said to be repetition concealing if an adversary cannot detect two instances of the same message encrypted with the same key(to achieve this, probabilistic or stateful encryption is needed). similarly, an encryption scheme is which-key concealing if an adversary cannot deduce if two messages are encrypted under the same key. besides these general properties, usually each particular cryptosystem has its own subtleties that can also provide useful information to an adversary. for example, a public key in rsa consisting of a pair(n, e) can be distinguished from a random string because e is odd and n contains no small prime factors. as discussed by mellovin and merritt, this simple fact allows a dictionary attack over eke when instantiated with rsa.



which-key concealing, and ciphertexts and public keys are indistinguishable from random noise. interestingly, our analysis helped us to identify a vulnerability of eke that arises when ciphertexts are identifiable. to solve this, we propose a simple modification that(to the best of our knowledge) is novel.



v.{x= v} can represent the situation in which a term v has been sent to the environment, but the environment may not have the atomic names that appear in v. still, the environment can refer to v by using x.



besides names and variables, we have the usual pairing constructor, along with its projections. given a name k representing a private key(and thus usually appearing restricted) we can derive a public-key pk(k) that can then be used for(public key) encryption 4. we also define the usual hash constructor. our constructors for encryption(both symmetric and asymmetric) take a name r as randomness parameter. this allows us to model probabilistic encryption. by explicitly considering the randomness parameter as a name, say r, we can model easily repetition concealing vs. revealing cryptosystems by simply restricting or not r(this modelling was already suggested in). on the other hand, decryption is deterministic.



(a1) first, in particular cryptosystems, it can be the case that ciphertexts are distinguishable from pure random noise, even though the plaintext or encrypting key is not leaked. for example, a usual indication of the presence of a ciphertext can be found in the length of the messages(this can happen, for example, when padding is weak or non-existent). in block ciphers, for instance, ciphertexts typically consist of a certain number of blocks(e.g. a multiple of 128/256 bits). similarly, numbers close to each other in rsa also give a good indication of a ciphertext. as another example, in the mceliece cryptosystem every ciphertext is a codeword, with a small vector error added to it. this makes ciphertexts distinguishable from random noise.



process ps models what happens after the session was established successfully. note how the public key pk(ks) is exported in variable pks. we assume that none of the values used during the protocol appear in ps, and also that ps never discloses ks. if the decryption fails, then the process would abort(executing the implicit 0 of the else branch). the user process u is:



acknowledgements. we would like to thank pieter hartel and the anonymous reviewers for helpful comments. we would also like to thank jonathan herzog for mentioning a helpful comment that lead to this work. this work was carried out in the context of the licensescript project, supported by the telematica instituut.



