we first describe protocol composition logic(pcl) in brief to help make the paper accessible to readers unfamiliar with pcl. we then discuss the well-known transport layer security(tls) protocol, which we use as a running example throughout the paper. readers familiar with pcl and the analysis of tls using pcl may skip to section 3.



the proof system extends first-order logic with axioms and proof rules for protocol actions, temporal reasoning, properties of cryptographic primitives, and a specialized form of program invariance rule called the honesty rule, described in section 2.3. we list below the axioms we use in this paper. for the proof of soundness of the axioms and the rules, we refer the reader to[6,11,7].



in this section we discuss the transport layer security(tls) protocol. broadly, tls involves two principals called the tls client and the tls server. tls guarantees mutual authentication and establishes a shared secret between the two principals. we focus on the proof of the authentication property and identify the program invariant that it needs. we also established other security properties of tls as part of a larger study on ieee 802.11i.



we start by describing our encoding of pcl programs. recall from section 2.3 that we must show that the invariants holds at the conclusion of every initial segment of every protocol that an honest principal may execute; we describe invariant checking process for one such initial segment, the general case is simply a conjunction of such steps.



pcl programs are modeled as a set of facts involving the action predicate. the action predicate has the form action(thread, actionnumber, output, actionname, input). for instance, the first initial segment of the tls client role(tls: client0 from section 2.4) is written as the following set of facts. the second fact action('x', 1.1, t1, cat,[nx, vx]) asserts that thread x concatenates terms nx and vx to generate the term t1. the actionnumber field is ordinal and helps assert the ordering of actions within a thread.



outputs, the action on the network is treated as a side-effect. in general, the number of inputs to an action depends on the type of action. the main difference between the pcl program listing and the logic program encoding is the explicit modeling of the concatenation actions. an alternative encoding could have used the list construct, but we found that this leads to computational inefficiencies in practice.



we now discuss the proof of the main theorem. we show that invariant checking is sound for a standard decision procedure on logic programs. recall from section 2.3 that the invariant must be deemed to be true for every initial segment of every protocol that the honest principal executes; we describe the process for one such initial segment and show that, if our decision procedure outputs failure on the query



in the following proofs, we prove that a decision procedure employing sldresolution in a left to right, depth first manner is sound for checking invariants. we also use the fact that sld-resolution tries every rule in the logic program before failing. most prolog interpreters implement sld-resolution in a left-to-right, depth first manner which means that we can use standard tools to realize the decision procedure. in particular, we used swi-prolog as our prototype tool.



