the purposes of this article are 1) to measure the benefits of the modular approach and its drawbacks in terms of execution time and accuracy using parametric examples and a newly developed benchmark suite for loop invariant analysis, alice, 2) to present a new technique developed to reduce the accuracy loss when computing loop invariants, namely control path transformers, 3) to evaluate the accuracy gains this new technique and older ones, previously discussed in but not implemented, provide with alice test cases and 4) to compare the execution times and accuracies of different tools using either precondition propagation or transformer computation. namely, we compare aspic, which is a standard abtract interpretation(ai) tool based on widening and acceleration, pagai, a smt-based ai tool, the integer set library, isl, which is a library including a transitive closure for presburger relations and pips[15,14], which is a compilation framework using polyhedral sets to abstract transformers and preconditions. the comparisons are difficult because the tools have different input and output languages, but this is dealt with by the alice framework.



the outline of the paper is the following. since the transformer-based approach is unusual, we introduce it briefly in section 2. we then present a first set of experimental results to explore the accuracy and execution time issues existing with the techniques presented in(section 3). accuracy issues encountered can be traced back to early convex hull operations, and several techniques designed to postpone them as much as possible are detailed in sections 4 and 5. finally, we measure the impact of these improvements with alice(section 6) and conclude.



the algorithms used in pips assume no cycles in the call graph and proceeds as follows. first, each program command s, elementary or compound statement or procedure call, is over-approximated by an affine transformer s, p, possibly using information about a precondition p of s. this is a bottom-up procedure, detailed in the next paragraphs, because a default value can be used for the precondition p when no information is available. each function is analyzed once and its transformer is reused at each call site. then, preconditions are propagated from the program starting point using the transformers.



note that the pure bottom-up approach may be used or not. since transformers are not computed concurrently but by traversing the ast, information gathered previously can be used right away. the range of a transformer or the condition of a test can be used as a precondition for the next statement to improve the accuracy of. this explains, for instance, why condition n 60 appears in the transformer of statement n++;.



pips has been developed as a compilation framework, able to process large applications interprocedurally. it is important to check that the modularity provided by transformers results in the expected speed improvement and to measure the extent of its negative impact on accuracy. we show firstly that pips obtains accurate results in a small amount of time with respect to three other tools, aspic, isl and pagai, when dealing with loop nests and procedure calls. we then recall previous experimental results showing a lack of accuracy when dealing with small test cases previously published to illustrate invariant generation algorithms.



since the tools have very different structures and execution times, we report either directly the sum of the user and io times reported by the time command for aspic, isl and pagai, or the times obtained using log_timings for the transformer and precondition passes of pips. in this way, the c parsing part of pips is eliminated, as it is for aspic and isl who use internal formats and for pagai who uses clang for parsing, and we compare the execution time of the passes of pips that might be replaced by new passes based upon the other tools. furthermore, the evolution of the execution times for each tool is fully relevant and interesting.



accuracy of various invariant generating tools. version 1.0 supports three tools, aspic, isl and pips, and contains 102 test cases gathered from papers dealing with loop invariant or termination. it uses the fast format as neutral reference format and provide different encodings of each test case.



the modular approach, as implemented in pips, is effective in terms of accuracy and execution time when dealing with large programs using function calls and nested loops. however, it lacks accuracy when computing invariants for small transition systems often targeted in the literature about automatic invariant generation. the accuracy loss is mostly due to convex hulls performed in the transformer space before the transitive closure is approximated, but several integer overflows are also observed.



we are dealing with structured code. a control path set is built for each loop body. when a test or a loop is found, each pre-existing control path is duplicated to take into account the true and false branches, or the loop entrance and skip. this is not performed recursively down the branches or the inner loop bodies. thus the total number of control path is at most 2k, where k is the number of(possibly compound) statements in the loop body.



p0 is the precondition holding the first time the loop is entered. p2 is obtained after two iterations with different control paths. p+ corresponds to the case when only one control path is used for all iterations; it includes p1, the precondition of the second iteration. finally, p3+ is the loop precondition corresponding to all the longer control paths with at least three iterations and two different control paths.



the formula used to compute the loop invariant has been unrolled to take into account explicitly up to three iterations. it is possible to generalize this to k steps, with an exponential increase in the number of terms. but we are lacking experimental cases justifying this development.



intermediate computations may generate polyhedra with huge coefficients, leading to arithmetic overflows even with 64-bit integers, because constraint constants are transformed into coefficients by the convex hull operator. eventually, when an overflow occurs, some constraints may be dropped, and the resulting invariant is less accurate than it should. to address this problem, we added gmp support to some of the pips polyhedral operators. this seemingly purely pratical implementation decision allows for a drastical simplification of the polyhedral algorithms because overflow exceptions no longer have to be handled. it turns out that this positively impacts both the execution time(about 6 times faster now) and the comparison between transformerand precondition-based analyses.



the invariant information is attached to control nodes. if their number is increased, more precise invariants can be found when using polyhedral invariants because the global invariant is the disjunction of the node invariants. also, the behavior of the program may become easier to analyze because fewer arcs may join the split nodes. however, the presence of new nodes usually increases the analysis time and a trade-off must be found between accuracy and node number.



as pointed out in, there are different ways to encode the swap, and the above invariant may be more or less easy to generate. however, regardless of the encoding, the behavior is always periodic. more information is preserved if the transitive closure of the loop transformer is computed as a function of one of its powers. for instance, the square is useful for idempotent function and functions with a period of 2:





case popeea[22,11] has a non-convex invariant, which can only be found by a convex tool if new control points are added. the heuristics used by alice, fsmnodesplit, probably fails to discover a proper node splitting. case ticket is interesting because it is easy to make the invariant convex. however, the number of control paths is large and the convex hulls used by pips lead to overflows when the while loop is unrolled. the algorithm is described as a transition system and the way it may be coded in c is critical to its analysis by pips.



these improvements, most of them described in, have been implemented in pips and tested against the 102 test cases of the alice benchmark. the results presented in section 6 show that three improvements have a positive effect and that pips is now about as accurate as more specialized tools such as aspic and isl. so, even though alice is a very useful first step, the developement of a general benchmark for research about loop invariants, affine or not, is still an open issue. the choices made for alice and its heuristics, fsm2c, should be revisited to support larger test cases and scalability studies. for instance, it would be useful to store c version of the test cases to ease the addition of new cases and to simplify the use of c analyzers such as pagai and pips.



