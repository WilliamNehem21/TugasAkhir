betweennesscentrality: the betweenness centrality is a widely used graph parameter related to community structures. in particular, the betweenness centrality of a vertex v is defined as the sum, over all pairs of nodes s and t different from v, of the ratios between the number of shortest paths from s to t passing through v and the number of shortest paths from s to t(for more information, see[22,33] and the references therein). despite numerous works like[9,4,17], no truly subquadratic algorithm computing the betweenness centrality is known, even of a single vertex(betweennesscentralityv). moreover, in, it is quadratic with respect to the input size, apart from logarithmic factors. our results show that the complexity of computing the subset graph is not due to the output size only, but it is intrinsic: in particular, we will prove that even deciding whether the subset graph has no edge is hard. this excludes the existence of a truly subquadratic algorithm to check if a solution is correct, or a truly subquadratic algorithm for instances where the output is sparse.



in section 2 we will define some of the problems we will analyze and we will introduce the notion of quasilinear reducibility, while in section 3 we will prove the new hardness results(the proof of all other reductions are included in the extended version of this paper). section 4 provides positive results for the recognition of transitive graphs and of comparability graphs. section 5 concludes the paper and provides some open problems.



the proof of the above theorem in contains all the steps from the k-sat problem to the graphdiameter2or3 problem. these steps are, instead, separated in the proofs appearing in the extended version of this paper, in order to show the hardness of an interesting intermediate problem, that is, the computation of the diameter in the case of split graphs(and, therefore, in the case of chordal graphs). the remaining part of this section is devoted to the proof that all hyperbolicity problems are harder than graphdiameter2or3. let us start by stating two lemmas.



