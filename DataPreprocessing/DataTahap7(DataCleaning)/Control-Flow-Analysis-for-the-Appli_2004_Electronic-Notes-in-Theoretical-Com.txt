accordingly to the intuitive semantics, in the first example a1, fst(x) at runtime evaluates to a name(n2). the second example a2 shows a process that creates a new name(n2), signs it with a private key pri(n1) and sends it. another process receives it, checks the signature and uses n2. note that for a2 to work, the term check(sign(n2, pri(n1)), pub(n1)) should evaluate to ok and removesign(sign(n2, pri(n1))) should evaluate to n2.



although we decided not to use general-subst, we cannot simply discard it. while we do not want to introduce new variables(via general-subst applied left-to-right), we should permit the elimination of variables and the application of substitution processes to adjacent processes(via general-subst applied right-to-left). to this purpose, we introduce the following reduction relation.



there is no rule for 0 since it cannot do any action. moreover, we note that a conditional is executed only when the terms are ground and otherwise it behaves as 0. inputs and outputs also behave as 0 unless the subject is a name(or is reduced via>> to a name).



in this section we show the correctness the cfa of section 4 with respect to the formal semantics of section 3 by proving a subject reduction result. most proofs are by structural induction or rule induction, and are quite straightforward. in the case, we simply sketch the proof.



in this scenario, two participants(a and b) share a long term symmetric key with a trusted server(s): the key kas is known only to a and s, while the key kbs is known only to b and s. the participant a generates a new key kab and wants to share it with b. to perform it in a secure way, a sends the new key to s, encrypting it with the key that shares with the server. the server s simply decrypts it and encrypts it again, this time using kbs; then it sends it to b. principal b receives the key from the server and an encrypted term m from a: now the continuation b' can decrypt the key from the server and then decrypt m.



