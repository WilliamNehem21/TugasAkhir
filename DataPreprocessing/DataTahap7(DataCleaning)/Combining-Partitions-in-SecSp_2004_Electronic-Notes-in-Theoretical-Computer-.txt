secspaces is a data-driven coordination model that supports a tuple-based coordination space extended with mechanisms for controlling and authenticating the access to entries. this is achieved exploiting the notion of(symmetric and asymmetric) abstract partitions inside the space. in this paper we consider one of the limitations of secspaces: it is not well suited for supporting the atomic access to more than one partition at once. in order to tackle this limitation we extend the secspaces model introducing an operator to combine partitions; output operations can use the new operator to make an entry visible in more than one partition, and data-retrieval operations can use it to access atomically more than one partition. we formally define, in terms of a process calculus, this notion and we demonstrate the flexibility of this new mechanism via examples.



coordination languages and models aim at providing mechanisms and languages for developing distributed applications in which the description of the internal behaviour of the active components and the description of their interdependencies are distinct and separated. in order to support this separation, general interaction models have been developed; one of the main approaches consists of separating the computation from the interaction information, and locating the former inside the active components and the latter inside a socalled coordination infrastructure. this approach is called data-driven coordination when the interaction information is stored inside a shared data space. linda and its dialects[8,10,7,6] are the most prominent representatives of this family of coordination languages.



the native coordination model does not include any support for controlling the access to the data. for example, any process able to access the repository is also able to introduce, retrieve and consume any of the tuples inside the repository itself. recent distributed applications such as web services, applications for mobile ad hoc networks(manets), peer to peer applications(p2p) are inherently open to processes, agents, components that are not known at design time. when the linda coordination model is exploited to program the coordination inside this class of applications(see e.g. wssecspaces for web services, lime in the context of manets and peerspaces for p2p applications) it is convenient to extend the native coordination model with mechanisms for controlling the access, for authenticating the producer/consumer of data, for ensuring the secrecy of information, and so on.



secos follows a quite different approach. the access rights are not associated to the agents, but all control information are stored inside the data. more precisely, secos supports two forms of locks which are called symmetric and asymmetric. the former exploits the same key to protect and access the information, while the latter uses a pair of keys, one to protect and another one to access. this two locking techniques can be applied to protect either one single field inside a tuple or the whole tuple. in the first case the used locks are called field-locks, while in the second one, they are called object-locks.



a more recent proposal, called secspaces, continues the approach initiated by secos by refining its access control policies. more precisely, secspaces refines the idea of object locks while field locks are not modeled. however, this is not a limitative approach because field locks can be easily encoded in our model. for example, in secos it is not possible to discriminate between the non-destructive readers and the destructive consumers of a tuple, and there is neither the possibility to avoid a reader of a tuple to reproduce exactly that tuple. in secspaces, on the other hand, it is possible to associate to the tuples two different access control information, one to be used for non-destructive read and the other one for destructive input operations. moreover, when a tuple is accessed in secspaces, the reading process receives only the coordination information inside the tuple and not the access control information; thus, it is unable to reproduce exactly that tuple.



secspaces essentially permits to associate to the tuples two pairs of information, that now we call entries. each pair(p, k) contains a symmetric access information p(called symmetric partition) and an asymmetric access information k(called asymmetric partition). for both kind of access information a default value is defined, thus processes can also explicitly set only one or none of them. in order for a reader to access an information, it must demonstrate the knowledge of p as well as of k, the access information corresponding the asymmetric partition k. two of these pairs(p, k) are used; the first one is considered in the case the reader is willing to perform a non-destructive read operation, and the second is considered for destructive input operations.



in this paper we investigate, in the context of secspaces, the problem of modifying during the lifetime of the application the access control policies. this is particularly useful in applications where the participants may become able to access new resources because, e.g., they pay for it, or in applications where processes may access the shared resources according to an associated level of trust, and this level may increase or decrease according to their runtime behaviour.



tha native secspaces model is not particularly suited to support applications with this dynamic aspects. for example, if two separated groups of users decide at run time to join in a unique group, it is necessary to explicitly modify the access control information stored inside the entries currently used from both those groups of users. an alternative solution is to permit the users to exploit more expressive access rights indicating the intention to atomically access the data of both groups. suppose, on the other hand, that



it is worth noting that these extensions involve only the symmetric partitions and not the asymmetric ones. this follows from the fact that the two kinds of partitions are intended to represent different kinds of information. the symmetric partitions are used to limit the access to entries, while the asymmetric partitions are used to authenticate the producer/consumer of an entry. to this aim, the asymmetric partitions are intended to be produced and distributed using off-line mechanisms(such as standard public key infrastructures pki) and not the mechanisms provided by the secspaces coordination model.



the coordination primitives of secspaces are the classical ones of linda: out(e), in(t) and rd(t). the output operator out(e) inserts an entry e in the space. primitive in(t) is the blocking input operator: when an occurrence of an entry e matching with the template t is found in the space, it is removed and its content is returned. the read primitive rd(t) is similar to in(t), but in this case the entry e is not removed from the space.



access permissions on entries are expressed by the control fields; in order to discriminate between the rd and the in access permission, entries have two occurrences of control fields, one associated to in operations and the other one to the rd operations. differently from entries, templates have only one occurrence of control fields that is not associated to a specific operation: they are dynamically associated to the operation the agent is willing to perform(i.e., rd or in).



the asymmetric partition fields, differently from partitions, make it possible to discriminate between the write and the read/remove permission of an entry, simply by exploiting the different needed knowledge to produce or to read/remove an entry. for instance, in order to read an entry having asymmetric partition field set to k the process must use k as asymmetric partition field of the template, that can be an unknown value for the producer of that entry(because in only k is needed). therefore, following the same idea of partitions, properly distributing these values we can assign processes the permission to perform a subset of possible operations on that entry.



performing the access to partition c and to c' until a matching entry is found. on the other hand, in order to produce an entry that should appear in more than one partition, an occurrence of the entry can be introduced in each partition in which it should be available. transactions are necessary because, in order to consume that entry, the in operations should perform atomically the removal of the matching entry from each partition in which it appears.



while it is easy to manage the insertion of new entities in the group, because it can be done simply by transmitting(in a secure way) the secret partition of the group to the entity that is willing to enter(technically this is obtained by scope extrusion, see section 3.2), it is more complicated to manage the removal of certain entities from the group communication, that is an usual function of group key management systems, because a new partition should be created and distributed to the processes in the group except the one to be removed. a more general problem is to restrict the access to certain entries to a subgroup of entities in the group. section 4.1 explains how to manage the group restriction by exploiting the merge operator. finally, section 4.2 describes how to combine partitions in order to manage, at run-time, the coordination among two(or more) independent groups of processes. more precisely, we intend to provide a support for those applications that need to publish some data and make them available to more than one group of users, or to control the flow of exchanged data among different groups.



