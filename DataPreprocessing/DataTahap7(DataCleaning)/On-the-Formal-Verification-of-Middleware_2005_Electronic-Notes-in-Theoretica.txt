distribution middleware is often integrated as a cots, providing distribution facilities for critical, embedded or large-scale applications. so far, typical middleware does not come with a complete analysis of their behavioral properties. in this paper, we present our work on middleware modeling and the verification of its behavioral properties; the study is applied to our middleware architecture: polyorb. then we present the tools and techniques deployed to actually verify the behavioral properties of our model: petri nets, temporal logic and advanced algorithms to reduce the size of the state space. finally, we detail some properties we verify and assess our methodology.



formal modeling and middleware engineering are usually considered as two different expert domains. for instance, they are considered either by separate teams of the project or at separate steps in the design process. to efficiently reach our objective, we propose to reconcile system modeling and middleware engineering, and join enst and lip6 efforts. the enst has a long experience in middleware implementations, including glade, the only industrial implementations of the distributed system annex of ada 95; adabroker an open source corba orb. the lip6/src department has a long experience in the development of algorithms and tools to apply formal methods to distributed systems, it has developed the cpn-ami tool-suite to model and then analyse systems using petri nets.



these two approaches are complementary. proof-based techniques allow the analysis of infinite systems. however, the use of a theorem prover is a very difficult and a very technical task that is hard to automate. on the contrary, model checking is dedicated to finite-state systems but modeling and verification can be done using graphical toolkits and most steps can be automated.



class of states under r. let us mention that computation of symmetries is very fast since it is a structural property of the petri net. its complexity is thus related to the size of the specification(number of places and transitions), but not to the state space size.



state-space and the automata of the formula. it is thus usually of complexity polynomial over the product of the sizes of the automaton of the ltl formula, and of the state-space itself. however, we construct our symmetry-aware symbolic synchronized product on the fly, and we adapt the relation r'(our zoom setting) under which we build the successors of a state, to the arc of the ltl automaton with which it is being synchronized.



properties on a quotient reachability graph on a computer having 512mb of memory without swapping. we also observe that the quotient graph evolution decreases. as an example, from 4 to 5 threads, the quotient graph increases by a factor of 80% and from 5 to 6, by a factor of 57%. at a given stage, it should reach an asymptote(e.g. when adding new threads does not impact



the tools we used have a significant role to achieve verification. our models were created using cpn-ami, a petri net case environment that integrates structural analysis tools and model checkers. we then analyse data type symmetries and compute the reduced state space using the greatspn tool-suite and extensions for ssp. finally for ltl model-checking, we used the model checking library spot, in conjunction with greatspn. all these tools have drivers available that make them plug-ins, homogeneously accessible from cpn-ami, and hiding the complexity of their interactions from



thus, we achieved the complete verification of key middleware behavioral properties. this is a first step towards the construction of a proof-based middleware. to reach this goal, we had to improve the schizophrenic architecture in order to address both distribution functions and behavioral verification requirements.



