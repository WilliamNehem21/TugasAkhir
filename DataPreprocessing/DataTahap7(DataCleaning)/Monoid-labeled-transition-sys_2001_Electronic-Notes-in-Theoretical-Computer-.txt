in general, we shall assume the labels to define a commutative monoid, i.e. a commutative, associative operation with a neutral element 0. this allows us a coalgebraic interpretation of labeled transition systems as a map from states to graded sets of successor states. this view will be seen to provide an interesting intertwining of coalgebraic structure with algebraic properties of the monoid.



another motivation for this work is the study of set-functors. in previous work([gum98],[gsb],[gs00]) we have studied the coalgebraic significance of various preservation properties of set-endofunctors. here we construct such functors, that are parameterized by a commutative monoid, so we can custom build functors by selecting commutative monoids with appropriate algebraic properties.



in the applications of coalgebras one often has type functors which satisfy an important technical property: they preserve weak pullbacks. this is to say that a(weak) pullback diagram is transformed into a weak pullback diagram. many results in coalgebra theory(e.g.[rut00]) hinge on this property. in[gsa] it was shown that a functor f preserves nonempty weak pullbacks if and only if bisimulations between f-coalgebras are closed under composition. now consider corollary 3.10. if its converse is true then by lemma 3.5



one might wonder, whether in general, simulations could not have been defined by just one clause of 3.9 so that condition(ii) would automatically be satisfied for arbitrary-semilattices l. notice, however, that with such a definition we would not have been able to show that simulations are closed under composition.



one motivation for this study was to provide a repository of examples of setendofunctors with particular combinations of preservation properties. this we achieve by parameterizing a certain class of functors with algebraic structures and translating the functorial properties into corresponding algebraic laws. for instance, theorem 5.13 can be used to obtain an example of a functor weakly preserving nonempty kernel pairs, but not weakly preserving nonempty pullbacks: simply choose for m any nontrivial abelian group.



