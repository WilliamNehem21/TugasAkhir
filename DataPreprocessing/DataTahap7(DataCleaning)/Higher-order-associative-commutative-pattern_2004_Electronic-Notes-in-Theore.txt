syntactic matching techniques[16,5] are based on pattern matching or unification. the advantage of these techniques is that they are generally quite efficient and can be fully automated. furthermore unification and pattern matching can be applied to higher-order logics, and are therefore compatible with our aim of supporting adaptation of components through the use of higher-order parameters. the main disadvantage of unification based ap-



in section 2 we summarise existing approaches to pattern matching and unification of higher-order logics, including existing approaches to associative commutative matching of first order logics. in section 4 we define our expression language, give a description of parameter instantiation, and describe a purely syntactic pattern matching algorithm for the expression language. in section 5 we give a specification for associative commutative matching. in section 6 we define an(incomplete) associative commutative pattern matching algorithm for higher-order expressions. in section 7 we discuss how this matching technique can be used to support component retrieval.



higher-order unification has also been utilised in programming languages. as an example lambda-prolog extends standard prolog, by allowing parameters to range over functions and relations. as a result reasoning in lambdaprolog relies on higher-order unification rather than standard unification.



this problem can be solved by doing case analysis on the whether or not e is a member of the list s. this can be achieved using a case analysis library component. the specification of the top-level function in this library component is shown below, where p and q are parameters.



z. function names are represented by lower case identifiers f, g and h for functions of arity 1 and greater, and the identifiers c, d and e for constants. function parameters are represented by the upper case identifiers f, g, and h.



parameter instantiations are often defined using placeholders. the instantiation f~ ph(1)+ ph(2) indicates that applications of f with at least two arguments are replaced by the application of+ to the first and second arguments of f. more concretely, f(x, y) would be replaced by x+ y using this instantiation.



we now give an informal description of an algorithm for matching mathematical expressions that works on structural induction on the pattern. the algorithm for matching terms follows the structure of the abstract syntax for terms given in section 4.1. note that while placeholders only occur in expressions used in instantiations, they are considered here for completeness.



in its subterms). an example is matching the pattern(g(x, y)+ z)+ h(c) and the query(x+ h(c))+(z+ y). one possible match can be achieved by instantiating g~ ph(1)+ ph(2). we describe how this match is generated



example 6.1 given the pattern p=(g(x, y)+ z)+ h(c) where+ is an acfunction and g is a parametric function, and query q=(x+ h(c))+(z+ y) from ex. 5.7. then the algorithm for generating matches for p and q proceeds



the second extension that we consider is for queries of the form g(b1,.., bm), where g is an ac function, and patterns of the form f(as), where f is a parameter, and as is a argument list of the form a1,.., an, and at least one of the arguments is a function application involving the ac function g.



for queries of the form g(b1,.., bm), where g is an ac function(it is assumed that the query has been flattened with respect to g), and patterns of the form f(as), where f is a parameter, and as is a argument list of the form a1,.., an, the algorithm proceeds as follows: for bags of the form[u1,.., uk]], where k> 1, generate the set of matches between the expression g(as(u1),.., as(uk)), and the query g(b1,.., bm), merging each result with the instantiation f~ g(ph(u1),.., ph(uk)).



has been flattened with respect to+. the first step then is to generate the set of multisets satisfying the conditions from step 1 above. we note that the weight with respect to+ of the first and second arguments of the pattern is 2, while the weight of the other two arguments is 1. therefore the set of possible multisets is:



and one instance of the third argument. for each multiset an instantiation of the parameter g is also created; for the multiset[[1, 3]] the instantiation g~ ph(1)+ ph(3) is formed. each new term is then matched against the query and any instantiations representing successful matches are merged with the corresponding new created instantiation of g.



there does not appear to be any published decidability or complexity results for higher-order ac matching, however several results have been published for first order ac matching[7,3]. these papers prove that first order ac matching is decidable, however there are pathological cases which take exponential time to compute. eker, shows that for cases where there is only a single ac function, solutions can be calculated in polynomial time.



the algorithm described in this paper has been used as part of the care library retrieval tool. the algorithm(as with other parts of the retrieval tool), has been implemented in prolog. because prolog is a high-level language, the implemented algorithm is quite similar to the algorithm described in this paper. the algorithm uses backtracking to calculate all solutions.



a further enhancement that could be made to the retrieval tool is to combine theorem prover based matching with our existing pattern based matching. this could be achieved in two ways. the first approach would be to implement separate matching algorithms, i.e., theorem prover based and pattern matching based, then make a decision on which one to use based on the form of the pattern and query. an alternative is to use a theorem prover that supports higher-order logic[14,4]. such provers provide support for higher-order unification, however they could be enhanced by adding support for associative commutative matching, as described in this paper.



