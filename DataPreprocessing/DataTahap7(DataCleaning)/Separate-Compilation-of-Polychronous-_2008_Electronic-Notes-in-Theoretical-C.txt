to gain from the flexibility and ergonomy that separate compilation services would offer, we propose a simple analysis and code generation technique that addresses this limitation. our approach consists in weakening the global safety objective usually targeted in related frameworks: isochrony. instead, we consider a more liberal one of weak isochrony recently proposed in.



endochrony guarantees that the system responds to events incoming from an asynchronous environment by locally and deterministically choosing which of them needs to be synchronized at all times. endochrony ensures the insensitivity of local computations and communications to global network latency. but, it is unfortunately not compositional.



a different approach is proposed by girault in the context of the lustre and esterel languages. it consists of the replication of the automaton obtained from the synchronous module and then on the optimized elimination of replicated transitions, replaced by inter-partition communications. of course, distributed code generation is based on the objective of globally preserving the formal property secured locally: endochrony.



our approach consists in maintaining a less costly yet compositional objective of weak-isochrony while considering the composition of endochronous modules. this appears to be a much more cost-effcient approach to code generation. our contribution consists in an implementation of this methodology that efficiently reuses most of polychronys compilation tool-chain to propose a simple synthesis scheme ensuring the aimed compilation objectives.



the article presents existing and contributed compilation techniques in the manner of a tutorial and through a series of illustrative examples. it does not address or prove the related formal aspects. instead, it merely relies on existing analysis algorithms(and proofs) implemented in polychrony.



the article starts, section 2, as a tutorial on the signal data-flow specification language and on its analysis of synchronization and scheduling relations. section 3 continues this tutorial with a presentation of the code generation techniques currently implemented in polychrony, the toolset supporting the signal language. our contribution, built upon these techniques, is presented in section 4.



the data-flow synchronous formalism signal supports a representation of the control-flow and data-flow graphs of multi-clocked specifications for the purpose of analysis and transformation. in this structure, a clock c denotes a set of instants and defines a discrete sample of time. it is used as the condition upon which(or the time at which) a data-flow relation is executed.



the most interesting part is the transition function. it translates the structure of the hierarchy and of the serialized scheduling graph in c code. it also makes a few optimizations along the way. for instance, r has disappeared from the generated code. since the value stored in y from one iteration to another is the same as that of r, it is used in place of it for that purpose.



also notice that the return code is true, line 11, when the transition function finalizes, but false if it fails to get the signal y from its input stream, line 4. this is fine for simulation code, as we expect the simulation to end when the input stream sample reaches the end. embedded code does, of course, operate differently. it either waits for y or suspends execution of the transition function until it arrives.



the buffer process satisfies the property of endochrony. literally, this means that the buffer is locally timed. in the transition function of the buffer, this is easy to notice by observing that, at all times, the function synchronizes on either receiving y from its environment or sending x to its environment. hence, the activity of the transition function is locally paced by the instants at which the signals x and y are present.



for instance, the composition of the producer and of the consumer is weakly endochronous. the presence of all signals in this composition is locally determined from the value or presence of signals in either the producer or the consumer(it is deterministic) and the very order of execution: producer first, consumer first, or both, does not matter(they satisfy the diamond property). this is the very definition of weak endochrony in.



in the controlled main program, variables prefixed with pre_ register the values of signal(of corresponding suffix) until the next cycle. the generated r variables translate the synchronization obligation implied by the reported clock constraint as r= ra&& rb. functions named{r|w}_main_x read and write the signal x.



a necessary condition is that the graph of p| q must be acyclic and a sufficient condition is that the p| q should not incur a reaction to the absence of a signal i.e. that all clocks in the graph of p| q should have a disjunctive form.



the generated code is otherwise unchanged. we obtain a concurrent code generation scheme that modularly and compositionally supports separate compilation. it efficiently uses existing report functionalities of the present implementation of polychrony to effectively support the synthesis of a controller that is able to assemble endochronous processes so as to maintain a global objective of weak isochrony.



we write t(s) for the chain of tags of a signal s and min s and max s for its minimal and maximal tag. we write v(b) for the domain of a behavior b(a set of signal names). the restriction of a behavior b to x is noted b|x(i.e. s.t. v(b|x)=



x). its complementary b/x(i.e. s.t. v(b/x)= v(b)\ x) satisfies b= b|x b/x. we overload the use of t and v to talk about the tags of a behavior b and the set of signal names of a process p.



