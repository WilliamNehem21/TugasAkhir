automatic differentiation(ad) is a powerful technique for computing derivatives of functions given by programs in programming languages. ad is superior to divided differences because ad-generated derivative values are free of approximation errors, and superior to symbolic differentiation because it can handle code of very high complexity and because it gives strong computational complexity guarantees. there exist many ad systems 3(in the form of libraries and code pre-processors). a majority of these ad systems are built on top of imperative programming languages(fortran, c/c++), whereas the idea of ad is most naturally embodied in a functional programming language. indeed, the differentiation operator is almost a paradigmatic example of a higher-order function. however, despite a huge body of research 4 and proliferation of ad implementations, a clear semantics of ad in the presence of first-class functions is lacking, which inhibits the incorporation of ad into functional programming. siskind and pearlmutter discuss the problems one faces trying to extend a functional programming language with ad operators. in particular, they emphasize the subtleties of ad of higher-order functions. they



siskind, j. m. and b. a. pearlmutter, using polyvariant union-free flow analysis to compile a higherorder functional-programming language with a first-class derivative operator to efficient fortranlike code, technical report tr-ece-08-01, school of electrical and computer engineering, purdue university, west lafayette, in, usa(2008).



