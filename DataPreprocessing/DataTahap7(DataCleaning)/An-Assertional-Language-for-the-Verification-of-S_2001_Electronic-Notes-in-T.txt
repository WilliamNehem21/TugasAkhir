cation is to verify a property for any of its possible initial con gurations see(e.g.[2,6,10,8,14]). to illustrate the problem on a practical example, let us consider petri nets as abstract model of concurrent systems. via the abstraction that maps processes to tokens, we can describe the behaviour of our system via places and transitions, and a possible initial con guration as an instance of a parametric initial marking(e.g., where k 1 tokens are in a given place). the goal here is to verify a given property for any value of the parameters in the initial marking(e.g. for any value of k). for safety properties, the previous problem can be



we propose an assertional language to symbolically represent in nite collections of states for systems parametric in several dimensions. for this purpose, we found technically convenient to combine notions coming from di erent elds like high level petri nets, constraints, multiset rewriting, and constraint logic programming. in particular, the notion of constraint is central to our construction. following the terminology of, constraints can be viewed as formulas interpreted over a xed domain, and for which one uses specialized decision procedures, e.g., to test satis ability, and entailment. more in detail, our approach works as follows. to smoothly extend the ideas used in[1,2,8,14], we adopt colored petri nets(cpns) as our general model of parameterized concurrent systems. basically, cpns are petri nets in which tokens can be colored with structured data. di erently from however, our presentation of cpns is based on a combination of constraints with a restricted form of multiset rewriting. as shown in, multiset rewriting allows one to locally specify the behaviour of



veri cation and automated deduction. in fact, at least in principle, it is possible to express veri cation problems as the ones considered in the paper using ac rewriting and specialized theories to represent and handle colors. as we will discuss at the end of the paper, it turns out, however, that the strategies used in existing automated deduction tools are not well-suited to solve problems like the one we are interested in(e.g. computing p re starting from and upward closed set of states). we believe that the application of automated theorem provers to solve parameterized veri cation problems, as well as nding decidable fragments and accelerations techniques are among the more interesting future direction of our research. in section 2 and section 3, we will brie y recall all concepts we need for our assertional language. the language is de ned in section 4. in section 5



we will discuss how to incorporate the language in the backward approach, and discuss the analysis of our case-study. in section 6 we discuss related works and discuss a number of open problems we plan to address in our future work. finally, in section 7 we will draw some conclusions.



colored petri nets(cpns). based on the previous de nition, a colored petri net can be viewed as a tuple hp; ri, where p is a set of predicates representing place names, and r is a set of multiset rewriting rules representing transitions. in the rest of the paper we will call con guration a multiset of ground atomic formulas. con gurations are the`generalization' of petri net markings, where a token in er x(a nonnegative integer, chosen non-deterministically), moving to the state wait(x);(5) waiting processes can choose to go back thinking;(6) a resource x is assigned to a waiting process provided the semaphore of its monitor is not locked(i.e. the monitor is idle);(7) when a process releases the resource the monitor resets the lock. note that in the previous speci cation we simply express the local interaction between one process and one monitor(the power of multiset rewriting). the initial con guration of the protocol consists of the con guration start, that in turn generates a con gurations in which all processes are thinking, and all monitors are idle. for instance, a possible run from start is as follows(we will use)i to indicate the application of rule(i)):



i=;(where p ost=p re is the transitive closure of p ost=p re). when applied to parameterized veri cation, the backward approach has two advantages:(1) computing p re can be done independently from the initial con guration;(2) bad con gurations often form upward-closed sets. let us explain this intuition using our example. the safety property of the multiple test-and-lock protocol is that only one process per time can use a given resource; thus, sbad is the set of con gurations containing the minimal violations: use(n) j use(n) for some resource-id n. to formalize the idea of`minimality' of a set, let us introduce the following ordering between con gurations:



in general the reverse implication does not hold. as a counter-example, simply take the rule p! q1 j q2 and the singleton set s consisting of the multiset q1. then, p re(s)=;, whereas the multiset p belongs to p re(u p(s)). however, the following property holds.



this de nition can be extended to sets of constrained con gurations with disjoint variables(indicated as s; s0;:::) in the natural way. for instance, if s is the singleton containing use(x)juse(y): x= y, then inst(sbad) is the set of con gurations having the form use(n)juse(n) for any n. note that inst(sbad) does not model our intuition that constrained con gurations should generate all violations. thus, instead of taking the set of instances as` at' denotation of a set of constrained con guration s, we choose the rich denotation:



for instance, in our rst example we have that sbad=[[sbad]] as desired. in the rest of this section we will show how to formulate operations on sets of con gurations at the symbolic level of constrained con gurations w.r.t. the`rich' denotation[[]]. we anticipate here that all operations will be parametric on the constraint language used in the speci cation.



intuitively, p re treats a con gurations as`representation' of its upward-closure. for instance, consider d= f0; 1g, and the rule p(x)! q(x): true. then, p re(fq(1)g) returns p(1) as well as p(0) j q(1). in fact, p(0) rewtites into q(1), whereas p(0) j q(1) rewrites into q(0) j q(1) that belongs to the upward-closure of q(1). the new operator satis es the following property.



for instance, consider p(x; y)! q(x; y): x 0;y= 1. given the singleton s with q(u; w): u= 1;w 0, pre(s) should contain p(x; y): x= 1;y= 1 as well as p(x; y) j q(u; w): x 0;y= 1;u= 1;w 0(e.g., p(4; 1) j q(1; 5) rewrites into q(4; 1) j q(1; 5) 2[[s]].) the latter constrained multiset can be obtained by setting m0= b0=(the empty multiset) when applying pre to s. the new operator enjoys the following properties



in their seminal paper, abdulla and jonsson proposed an assertional language for timed petri nets in which they use dedicated data structures to symbolically represent markings parametric in the number of tokens and in the age associated to tokens. in, abdulla and nyl en formulate a symbolic algorithm using di erence constraints to represent the state-space of time petri nets. our approach is an attempt to generalize the ideas of[2,3] to problems and constraint systems that do not depend strictly on time. in our opinion the combination of multiset rewriting and constraints is an elegant way to achieve the goal.



