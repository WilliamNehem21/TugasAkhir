in the unified modeling language(uml) different views of software systems are specified by different models. the abstract syntax of the modelling languages is defined precisely in the uml standard, but the(dynamic) semantics up to now are only sketched in natural language descriptions. moreover, the correspondences between the different models are not described precisely. in this paper i present an abstract semantic domain that has been defined independently of the uml and can be used to provide formal semantics for the different modelling languages. since one common domain is employed also the integration of the different viewpoint models is supported by this approach.



in the uml standard the abstract syntax of the language(s) is defined precisely using the meta model. the semantics, however, in particular the dynamic semantics of the behaviour models, are only informally described in natural language. obviously, this leads to a certain lack of precision, and some important design decision are left open. furthermore, the are no precise statements about the semantic interrelations and correspondences between the different models. that means the integration problem cannot be addressed satisfactorily yet.



in order to establish transformation systems as an internal model of the uml the different modelling techniques have to be mapped to this domain, i.e., their semantics have to be defined in terms of transformation systems. thereby the meaning of the constructs can be made precise, and the correspondences between the different techniques can be formulated, since all languages are interpreted in the same domain. due to the complexity of the uml languages these mappings should be defined incrementally of course, starting with kernel languages that are extended step by step.



semantics of a uml model as a set of transformation systems, that contains all admissible interpretations as elements. furthermore, different models may address different levels of abstraction and granularity. for example, some models specify single objects whereas others concern collections of objects. thus mappings of transformation systems are needed, like projections, that allow us to relate such different models and formalize their correspondences. sets of transformation systems as formal semantics of viewpoint models, together with the appropriate mappings reflecting their correspondences, then allow us to define the semantic integration of a collection of models by the intersection oftheir admissible interpretations. a collection ofmodels is consistent ifthe intersection is not empty, and it is complete ifit has exactly one element, i.e., ifall models together specify the system completely.



as mentioned above the domain of transformation systems beyond the single models also provides composition operations and development relations. as an added value ofthe approach presented here these can be reflected to the uml languages to discuss and make precise notions ofobject composition and refinement for example. this aspect, however, will not be discussed further in this paper.



transformation systems are extended labelled transition systems, where both the transitions and the states are labelled. the unlabelled part ofthe system, given by a set of control states and transitions, is just a directed graph, called the transition graph of the system. it represents the skeleton of the dynamic behaviour, by stating the existence of control states and transitions, without showing their internal structure or contents. the labels for the transition graph are provided by the data space of the system, that contains all possible data states and data state transformations according to the given static structure.



a system snapshot, given by the states ofa collection ofobjects and their links, can be modelled by replacing algebras as data states by families of algebras, where each member represents the data state of one of the objects. in this way the projection to a single object is supported, and collections need not be encoded into single algebras artificially. then object references can be represented by introducing designated class sorts and additional reference functions that map elements of class sorts(= object references) to members of the family of algebras(= object states). a state of a system is thus formally modelled by o.t is evaluated in a snapshot, starting at a designated algebra c0, asfollows. evaluation of o yields a reference r= oc0 in a class sort of c0. applying ref 0 yields the index j= ref 0(r) ofthe algebra cj, where finally t is evaluated. the term marriedwith.name evaluated at object c0 for example yields'sabine',



elements of the corresponding class sort. the relation models the links as instances of the association in the actual state, whereas the constants make possible to navigate along the association. they can be restricted accordingly to represent uni-directional associations and multiplicities. compositions and aggregations are represented analogously; concerning the static viewpoint they are just associations.



finally inheritance relations give rise to extensions of the local class data space signatures, where the signature corresponding to the super class is added to the one of the subclass. note that the extensions of the local class data space signatures w.r.t. the relations must proceed in the right order. for example, associations are inherited, whence the association attribute role has to be added before the inheritance relation is translated. more details on the translation from class diagrams to diagrams of transformation specifications can be found in.



as mentioned above a data space usually contains much more data states and transformations than intended. although finally the mapping from the transition graph selects the right parts, the data space can also be reduced in advance by adding further constraints or axioms to the data space signature. according to the structure of transformation systems and data spaces(and signatures) they can be grouped as follows.



pre and post conditions constrain single transformation steps. in order to constrain the set of transition graphs, i.e., the overall behaviour, other specification means have to be considered. as opposed to the static properties and pre and post conditions, there is no canonical choice in this case. in



the discussion ofthe specification means should have shown the intended application to the uml already. in a uml model object constraints specified in the object constraints language ocl are used to reduce the set ofdata states and transformations. the most important features, data invariants, navigation, and pre and post conditions have been discussed above, indicating the intended mapping ofthe ocl. other behaviour specifications are specified next.



in a transition system semantics for uml state machines has been defined, based on a corresponding construction in for statemate state charts. since it is very close to the aspired transformation system semantics it only remains to rephrase this construction w.r.t. the terminology of transformation systems and to point out which items are under-specified and lead to sets ofadmissible interpretations. the main difference with is in fact that the action semantics are assumed to be specified completely there, whereas in the transformation system approach all admissible interpretations of the given information are considered.



4. global clock and local timer states(see for details). furthermore, since a unique data state has to be attached to the control state, sufficient data state information has to be added which the complete data state can be recovered from. this additional data information is represented in the formal object model introduced in for example by taking the cartesian product of(pure) control states and data states. considering the corresponding pairs immediately as control states is just a formal variant that is needed here to obtain the label mappings as total functions.



to define the data states the attribute declaration of the corresponding class, including the concerned data types, has to be given at least.(in fact, state machines cannot be built without a corresponding class.) it yields the algebraic part of the data space signature. the corresponding algebras may have a fixed part for the static data types. the values of the independent attributes in an algebra representing a data state must be obtained from the control state it is attached to. that means, these values must be contained in the control state. further derived parts, like derived attributes, can then be constructed to obtain the complete data state. different interpretations are admissible at this point if static data types are declared but not completely



the transitions for the transition graph are given by sets of state machine transitions that are enabled(w.r.t. a given event e and a condition), consistent, maximal, and have highest possible priority(see[5,9]). their input and output control states in the transition graph are given as defined in the state machines semantics. note, however, that these now contain also data state information. in the example mentioned above for example at least the value ofthe attribute att must be given in the control state in order to obtain its data state. accordingly, each transition also determines the data state transformation corresponding to it. this yields further choices for admissible interpretations, since the effect ofthe method m is not specified. corresponding ocl constraints in the class could reduce the number of interpretations, but need not determine exactly one.



according to the semantics ofstate machines each transition(ofthe transition graph) contains exactly one event. this fact will be used for the composition ofstate machines represented by the corresponding composition operation applied to the transformation systems associated with the state machines. it is based on a synchronization ofsteps, where in this case a method call(event) can be synchronized with the execution ofa method(action).(concerning the definition and further discussion of composition operations for transformation system see[6,8].)



transformation systems constitute a formal semantic domain for the interpretation of different software specification techniques. by mapping a language to this domain its semantics can be made precise and formalized. moreover, relations between different languages can be investigated on the semantic level. reflecting these back to the syntactic level correspondences between different models are obtained. furthermore, also consistency of heterogeneous specifications can be checked due to the interpretation in one common domain. this yields a very flexible and general integration framework for software specification techniques.



