we propose a biologically inspired system which computes on double structures of mobile strings by means of rewriting rules that have a biotechnological implementation, by resembling dna computations. its computational universality may be straight deduced from a few formal language theoretical results of one of the authors. such a dna-like computational device is naturally described by a membrane system which concludes the paper.



1 the first author thanks vincenzo manca for giving her the inspiration to work on double structures by means of bio-inspired string operations. both authors are very thankful to nato grant pst.clg.976912, the institution which kindly founded the presentation of this paper.



duplicated whenever the cellular division occurs, and the double stranded molecule is copied inside the cell in such a way that each strand works as template for one of the strands to assembly. thus, nature employs a template driven algorithm to copy dna strings, with a computational complexity linear in time and space. in a formal context of oriented symbols and strings floating in a fluid environment, the following(starting, doubling and separating) rules guide a bilinear duplication algorithm where two copies of a given string are systematically obtained.



potential to implement arithmetical operations, and, to this aim, the interest for building-in dna turing machines was widely addressed(see for example and). along this direction, in the implementation of a two states autonomous dna automaton was shown, beside a logical design for a biomolecular turing machine, unfortunately forced to wait until the parts needed to build it are invented. on the same research line, although still at a just theoretical level, in this paper we propose a universal dna-like system which computes on double structures of mobile strings by means of rewriting rules that have a biotechnological implementation.



essentially three types of operations are enough in order to obtain universal computations, as one can see from[6,7,8]; they are duplication, triplication, and division by six. our system processes the information encoded on floating strings by simulating these three operations. it is able to execute any program of a register machine, since it has also a mechanism to switch from one instruction to another one and to perform jump instructions.



finally, in section 3, we present the natural description of our dna-like system by means of a membrane structure. indeed membrane systems are biologically inspired containers of floating strings. they are a discrete device(only discrete quantities are involved) which takes explicitly into account the notion of compartments, whereas the way how the evolution rules work recalls the computational strategies of formal grammars, that traditionally were applied to the analysis of biological structures. in nature eukaryotic cells keep together the genes, the rnas and proteins that they encode, as well as the products of their activities, and cellular compartmentalization is the key of the organization of biomolecular systems, such as networks of proteins underlying the main cellular functions. it is essential for the evolution of all living organisms.



regardless to the number of copies of such a string. it is transformed by means of operations in each step of computation, as usually on the tape of a turing machine. the initial string encodes the given numerical input, and when one of the operations modifies it, the string encoding the number obtained after the application of that operation is produced.



case of instructions which are decrements, that correspond to divisions, during the computation we use further(primed) indexes, among{1',..., p'}. however the total number of the involved pointers is bounded by 2p, where p is the number of the instructions of the given program.



given a register machine program, it may be simulated by a program with p labeled instructions that double, triplicate, or divide by six the numerical information, or represent a jump. in the above system the first step is performed only at the beginning of the program. then, whenever the current label j points to a doubling or a triplicating instruction, the rewriting rules of the step 2, part(a) and part(b) respectively, are applied in a deterministic way. in both these cases the operation is completed when no other rule related to that operation can be applied,



in the case of duplication, a translation of the first symbol a into the string 2a has to be done(i.e., a symbol 2 and a symbol a are juxtaposed as lower string of the double structure) before performing the copying of the remaining string, and in the case of triplication, a translation of the last symbol a into the string a3 has to be done after a usual copying of the string. while in the case of division, the copying is performed after the elimination of both the first and the last symbol of the string.



let p be a register machine program with p labeled instructions being duplications, triplications, divisions by six, and jumps. we call a the set of labels such that the corresponding instructions are duplications, b the set of labels corresponding to triplications, c the set of labels that correspond to jumps, and d the set of labels such that the corresponding instructions are divisions by six. of course, a, b, c, d form a partition of the label set.



