second, techniques like model checking and theorem proving are performed on abstractions. these are given in some form of formalized transition systems, or, more general, behavior models. 3 the assumption then is that the piece of software that is to be checked is embedded into a correctly functioning environment that meets the tacit assumptions in the model. now, the environment may be very complex, and formal verification technology cannot ensure whether or not the environment behaves the way it is anticipated in the system to be checked. the point is that verification technology like model checking or deductive theorem proving necessarily operates on abstractions.(our notion of) testing operates on actual devices in their actual environments, and both activities are necessary.



the contribution of this paper is a catalog and discussion of applicable abstractions for model-based testing. we also relate models for testing purposes to other models in the development process. sec. 2 sheds light on the nature of abstraction in the context of model-based development and model-based testing. sec. 3 reviews abstractions for testing that are used in the literature. sec. 4 discusses limitations of different abstractions, and sec. 5 concludes. related work is cited in the respective context.



the abstraction gap that is resolvable by compilers and linkers is more or less specific to a domain. while the concept of procedures is common to all programming languages, the swing api is restricted to the domain of gui programming, the iso-osi stack applies to communication, and the mda is arguably concerned with business information systems rather than embedded real-time systems. it is certainly one of the most challenging and demanding tasks to develop abstraction techniques which are more or less domain specific and can be automatically translated to the concrete level using compilers, linkers, and the like.



to summarize, abstractions occur in two forms. they can be simplifications where missing information can be inserted automatically, and they can be simplifications where information is deliberately missing in order to keep the model simple. simplifications tend to be domain-specific, and the ultimate goal of model-based development seems to lie in finding these abstractions that are applicable to all systems of a given domain.



by abstractly specifying the crucial parts, e.g., those that are error-prone by experience, in rather small test models, one gains the advantages of small and manageable models. models that can be used for full production code generation, on the other hand, can be seen as implementations, and it is a dubious endeavor to extract code and test cases from the same model.



the case study described in concentrates on testing the protocols between a smart card and its environment, a terminal. therefore the model abstracts from the complex realization of all cryptographic functions implemented by a smart card. these functions and their responses are represented only symbolically by yielding data of type encrypteddata when a command encrypt(data) is issued. no cryptographic computations are performed in the model. instead, these computations are performed at the level of the driver component(see above).



the approach described in uses separate models for testing different functionalities of the posix standard. the first model was developed for testing the byte range locking interface fcntl. this interface provides control over open files in order to deal with processes which are accessing the files. the model restricts the posix standard by allowing the extension of a file only once. the paper mentions a second model which was developed for testing the posix fork() operation.



main, an operation including its operands is represented by a byte string at the concrete level. in the model, an operation and its operands are conveniently symbolized by a string(a name). with this kind of model, the behavior of the smart cannot be tested directly if it receives byte string which are for example one byte too short or too long, respectively. it is up to the test engineer to decide whether to cope with such illegal input at the level of the model, or at the level of the driver component.



intense data abstraction can lead to information loss that cannot be coped with for test case generation. for example we recall the smart card model abstracting from file contents already discussed in sec. 2. with this model only static properties like file length but not the dynamic evolution of file contents could be verified.



it is hard to detect feature interaction when functional abstraction is applied to build separate models for testing distinct functionalities. for instance, in, separate models are used to test different operations of the posix standard. these models help to verify the correct functioning of these operations in a stand-alone manner, but leave open the detection of unmeant behavior caused by feature interaction of these operations.



finally, problems can arise if temporal abstraction is intensively used in the model. obviously, in the domain of distributed real time systems a rigorous use of temporal abstraction can prohibit the detection of faults which stem from the intricate interleaved timing behavior of the separate components. as a counterexample, in, temporal abstraction is explicitly not used to test a processor. in order to trace generated test cases and to check the expected performance a clock cycle in the model corresponds exactly to a clock cycle in the real processor design.



nevertheless, w.r.t. these limitations, we believe that model based testing is one of the most promising methodologies which will scale up for verification of complex systems in the near future and additionally provide a well structured process for increasing the quality of hardand software systems. note that some see testing as model-based by definition: testing is always performed with a more or less explicitly defined intended behavior, i.e., a model.



many activities of software engineering involve abstractions. today, abstractions are predominantly used as language constructs(e.g., procedures), transparently moved into the runtime environment(garbage collectors), used in the form of interfaces to libraries, components, or communication infrastructure, and as architectures. abstractions related to the behavior of a system



on the one hand, the specification describes the system under development in an abstract and comprehensive way. this is usually done in an informal and incomplete manner. the informal and incomplete specification is needed to build test models in the first place: test models are then refinements of the specifications. on the other hand, test models abstractly implement only parts of the more comprehensive specification, but these parts are implemented completely and unambiguously(functional abstractions, cf. sec. 3). test models can then be perceived as a supplement to specification documents which completely specifies the crucial parts of the system for verification. in principle, specifications and test models could be built at the same level of abstraction, completeness, and precision, but then one must solve the question whether a supplier or an oem builds the model. this is, for instance, the situation in the automotive industries.



