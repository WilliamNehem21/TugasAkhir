This paper presents the performance evaluation of a second-order Particle-in-Cell (PIC) algorithm implemented using second-order finite elements and ghost particles. The ghost particles have associated weights and offsets, representing a charge distribution in the algorithm. A comparison with a first-order algorithm on modern compute architectures is also conducted.

The WARP code, developed at Lawrence Berkeley National Laboratory (LBNL) and Lawrence Livermore National Laboratory (LLNL), employs an explicit three-dimensional PIC algorithm to model the behavior of high-intensity ion beams. It uses a second-order leapfrog method and linear interpolation functions between particles and grid points. Additionally, the code utilizes an electrostatic Poisson solver instead of the Finite Difference Time Domain (FDTD) method and includes versions capable of adaptive mesh refinement (AMR) and two- and three-dimensional electromagnetic implementations.

The algorithm uses second-order weighting functions to deposit charges on adjacent cells, transitioning smoothly to first order at problem boundaries. Testing on a conducting sphere in a square grid demonstrates exact charge conservation within the bounds of round-off error. However, further testing is needed for three-dimensional problems with strong electric and magnetic fields.

The electrostatic PIC method within Empire-PIC models plasma behavior using electric and magnetic fields on an unstructured grid, with field values stored at each grid node. Discrete particles in the simulation are associated with grid positions, electrical charge, mass, and velocity. The particle's velocity is determined by multiplying its charge-to-mass ratio by the electric field value at its current location, and its position is updated using the time step size.

The core electrostatic PIC algorithm includes a step where particles deposit their charge contribution back onto grid nodes before the next field solve. This process is carried out using atomic addition operations to prevent race conditions between threads.

A second-order algorithm, along with its implementation details, is outlined in the paper. Pseudocode for the algorithm is provided. The algorithm employs first and second order finite elements and subparticles to compute the electric field values felt by each subparticle. Similar to the traditional PIC algorithm, particles in the second-order method deposit their charge contribution back to the grid nodes before the next field solve.

Performance comparison with the first-order implementation is done using two-dimensional two-stream instability and Landau damping problems. Tests involve up to 1 million particles on a grid, and performance metrics include execution time, memory bandwidth, and scalability.

The paper concludes that while second-order methods currently perform and scale worse versus first order, they are becoming more viable on modern architectures. Future work includes using convergence analysis to quantify accuracy improvements and resolving performance issues to improve performance and scaling behaviors in second-order problems. Additionally, the authors plan to extend the algorithm to function on electromagnetic simulations.