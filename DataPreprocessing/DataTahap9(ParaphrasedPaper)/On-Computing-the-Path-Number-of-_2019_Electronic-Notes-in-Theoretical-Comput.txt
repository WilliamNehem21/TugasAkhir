The algorithm requires that all edges and descendants of a specific node (i.e., the node in which xef= 1) belong to the same path. As the algorithm makes branching decisions, it attempts to expand the current path by branching on a variable associated with an angle containing either edge e or f. This process is repeated for each descendant node until the path can no longer be extended, at which point a new path is initiated. To facilitate this approach, information about the paths induced by fixed variables is stored in each node of the search tree, and this strategy has proven to be effective in various instances, as demonstrated in the following section.

Our computational experiments were conducted on an Intel Xeon CPU E5-2603 with 32 GB RAM, using CPLEX 12.8 for solving integer programs via traditional search with a single thread. The code was implemented in C++ and compiled with GCC 5.4.0. A time limit of 10 minutes was imposed for all runs.

A fundamental feature of the Biased Random-Key Genetic Algorithm (BRKGA) lies in its adoption of a standardized problem-independent encoding for solutions, where each chromosome comprises a fixed number of random keys (or alleles) as real numbers over the interval [0, 1). Consequently, all evolution steps are also problem-independent. We construct a path decomposition by iteratively adding angles to an initially empty solution, processing angles in a greedy manner based on their associated allele values. The addition of an angle to a partial solution is subject to specific conditions, akin to constraints from our Integer Linear Programming (ILP) model.

The BRKGA heuristic was implemented using the libBRKGA library, with control over parameters such as the fraction of elite individuals, fraction of mutants, and probability of allele inheritance from elite parents. We found that the heuristic often identifies a certificate for a given graph with a small population and few generations. When verifying Conjecture 1.1, we utilized a strategy involving population size adjustment and consecutive generations until a certificate was found or the population reached a certain size.

We describe a heuristic employed when the BRKGA failed to produce a certificate for Conjecture 1.1, particularly in dealing with dense graphs. To address the challenge posed by dense graphs, we randomly select edge-disjoint paths to augment the decomposition, thereby reducing the number of variables and symmetries in the resulting graph.

This paper presented an ILP model for computing the path number of a graph G and discussed its application, along with heuristics and theoretical results, in verifying Conjecture 1.1 for a substantial collection of graphs. Using the methods outlined, we successfully verified all 11,716,571 non-isomorphic connected graphs with ten vertices within 35 minutes, utilizing a single thread.

In future work, we aim to verify Conjecture 1.1 for all 164,059,830,476 graphs with twelve vertices and compute their path numbers. Additionally, we believe that Model 1 can be leveraged to develop an approximation algorithm for the problem of computing the path number of a graph.