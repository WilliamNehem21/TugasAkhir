The academic paper discusses the evolution semantics of formalism elements within the context of the Simthesys framework. It highlights the utilization of non-specialized solving engines to enable the solution of models and the automatic generation of formalism-specific reusable solvers. The paper also provides insights into how formalisms can be created in Simthesys by demonstrating the successful implementation of three well-known modeling languages.

The paper is structured as follows: It begins with a brief overview of the Simthesys approach to multiformalism modeling in section 2. Section 3 introduces the exponential transition-based family of formalisms, while section 4 describes the implementations of SPN, TFCQN, and GNQN. Section 5 presents the solution engines for the aforementioned family, and conclusions and future work are outlined in section 6.

Simthesys, a new framework for performance-oriented formalisms, is based on the explicit definition of the syntax and semantics of atomic components of a formalism, as well as on a set of non-specialized solving engines utilized to automatically and transparently generate formalism-specific reusable solvers. The framework distinguishes formalism elements through their properties and behaviors, and models are described using the Model Description Language (MDL) documents.

The Simthesys framework is designed to integrate with the Drawnet tool and the Osmosys framework. Drawnet facilitates the rapid development of performance evaluation tools by providing data structures and automatic creation of graphical user interfaces, while Osmosys supports the definition of formalisms and models for multiformalism and multisolution techniques.

The paper introduces the Exponential Event Formalisms (EEFs) family, where primitives represent entities capable of generating events occurring after exponentially distributed time. Solution engines expose a behavior schedule used by implementations of the initevents behavior to define the execution policy and update the model's state. State rewards and impulse rewards are used to compute statistics related to the model's state and event firings, respectively.

The TFCQN formalism, a variant of QN, presents the concept of finite capacity queues with blocking mechanisms. The paper discusses the implementation of TFCQN, including the handling of blocking policies and discrete events representing the termination of customer service.

In essence, the paper demonstrates the implementation of three formalisms within the Simthesys framework, emphasizing the framework's use of behavior to define formalisms and their semantics independently of the solver used. The research provides a detailed description of implementing a formalism and its solver in Simthesys, paving the way for future exploration of multiformalism models and their real-world applications. It proposes avenues for further research, such as exploring additional formalisms and enhancing the usability of behaviors through the design of a dedicated scripting language.