The Unified Modeling Language (UML) has emerged as a widely adopted standard for visualizing, specifying, constructing, and documenting object-oriented software systems, and is widely used in both industry and research. It is a graphical language that encompasses various diagram types for different purposes, with the syntax of these diagram types being defined in the UML metamodel. However, while the semantics of the language constructs are only provided in natural language, there is a need for a formal foundation for UML as it is intended to aid software engineers in constructing precise models. The graphical notation is complemented by the Object Constraint Language (OCL), which allows for expressing constraints that cannot be conveyed by the diagrams in a textual manner. While UML 2.0 is in the finalization stage, the language definition is still informal.

The graph transformation system consists of graph transformation rules and a working graph, which represents the system state of the modeled system. The system state undergoes changes during the system's runtime as graph transformation rules are applied to rewrite parts of the working graph. The paper presents the fundamental concept of system states and the translation of a given UML model into a graph transformation system, with a focus on rules derived from statechart and collaboration diagrams. Notably, the approach integrates OCL, using OCL expressions from the model within the rules.

Several other works have provided precise semantics for parts of UML through graph transformation. An integrated semantics akin to the one presented in the paper has been introduced for class, object, and statechart diagrams. Although this approach does not encompass interaction diagrams, it is extended to include interaction diagrams at the instance level. However, the operations have to be specified by single rules, thus only atomic operations are considered. Furthermore, the modeller is required to enhance the UML model with graph transformation, making the approach not purely UML-conformant compared to the approach presented in the paper.

The paper proceeds with an example model featuring class, collaboration, and statechart diagrams, followed by an overview of system states in general. It then delves into the formal background of the graph transformation approach and the translation of a model into a graph transformation system, with a focus on the generation of rules related to sending messages. The paper concludes with a discussion of future work and a summary of the presented approach.

It is also explained that the translation from a UML model into a graph transformation system aims to provide a precise formal semantics for a significant portion of UML. The paper focuses on constructing graph transformation rules representing the sending of messages as specified in a collaboration diagram. Additionally, the concept of system state as a graph representing the current state of the modeled system and being transformed by graph transformation rules as the system evolves is detailed.

Furthermore, the paper outlines future work, including the completion of a user-friendly GUI tool for evaluation through case studies and exploration of how the approach can be expanded to encompass UML features not yet covered, as well as the assertion of properties of UML models through examination of the resulting graph transformation system.