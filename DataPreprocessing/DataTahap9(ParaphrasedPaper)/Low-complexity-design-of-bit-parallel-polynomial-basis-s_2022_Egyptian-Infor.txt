The Galois field, also known as the finite field, is named after the renowned French mathematician Evariste Galois and serves as the foundation for various applications such as cryptography, digital signal processing, pseudorandom number generation, switching theory, and error-correcting codes. Storing data in Galois fields allows for effective management and manipulation. Finite fields are constructed based on modular arithmetic, which is widely utilized in mathematics and serves as a fundamental building block of number theory. Modular arithmetic finds practical applications in calculating checksums, error detection for International Standard Book Numbers (ISBNs), public-key cryptography systems used in modern commerce, and error detection systems for bank identifiers.

Arithmetic operations, including division, multiplication, addition, subtraction, and exponentiation, can be performed on finite fields. Addition and subtraction are simple XOR operations, while division and exponentiation involve repeated multiply and square algorithms. However, multiplication is a complex process and requires significant computation time. To achieve faster multiplication in finite fields, efficient multiplier architectures must be designed. Finite field elements can be represented in three ways: dual basis, polynomial basis (also known as canonical basis or standard basis), and normal basis. Among these representations, the polynomial basis is preferred due to its ability to be adapted to different systems without the need for external circuitry, as well as its lower complexity compared to normal and dual basis multipliers.

Encryption schemes such as AES, RSA, NTRUE, and torus-based cryptography rely on finite field arithmetic for high-speed encryption to ensure efficient data security. This paper proposes a bit-parallel systolic polynomial basis multiplier to achieve fast computations. The use of cut-set retiming in the multiplier design significantly improves the critical path delay of the bit-parallel systolic multipliers, resulting in an efficient multiplier with the best area-delay tradeoff. This multiplier can be extended to work with specific polynomials such as trinomials and pentanomials.

The paper is organized as follows: Section 2 covers the literature on bit-parallel polynomial basis systolic multipliers. Section 3 discusses the fundamentals of the theoretical bit-parallel systolic polynomial multiplier. Section 4 introduces an algorithm for a bit-parallel systolic multiplier of the polynomial basis and describes the multiplier architecture. Section 5 presents the results and discussions of the proposed multiplier, focusing on complexity and comparison. Sub-section 5.1 compares the FPGA implementation results of the proposed multiplier with previous best-reported bit-parallel polynomial basis systolic multipliers for m= 8 and m= 163, while the conclusion is outlined in Section 6.

The research explores arbitrary GF(2m) fields and shows that an irreducible pentanomial-based bit-parallel polynomial basis multiplier offers lower space and time complexity. Additionally, a bit-parallel and a bit-serial systolic array multiplier based on least significant bit (LSB) first algorithms are presented. An optimized architecture for Montgomery multiplication with reduced area and space complexity is also proposed. Furthermore, the paper introduces a method to reduce the space and time complexity of all irreducible polynomials by employing modified interleaved modular multiplication.

The proposed multiplier achieves the lowest time complexity and area-delay product. FPGA implementations demonstrate that the proposed multiplier is 90% delay-efficient and 18% area-efficient, with a slight increase in power consumption. As a result, the area-delay product is lower compared to other multipliers.

The research modifies the logic components of the processing elements of the polynomial basis systolic multiplier to achieve the best tradeoff between area and time complexity. It is observed that the proposed systolic polynomial basis multiplier over irreducible polynomials achieves 66% and 17% less time complexity for m= 8 and m= 163, respectively, compared to the best-reported multipliers in the literature. The area complexity obtained by the proposed multiplier matches with the best results available, and the area-delay product is 89% and 17% lower than that of existing multipliers. Since it is regular, modular, and scalar, the proposed multiplier is well-suited for VLSI implementations and can perform computations faster due to its concurrent nature. The low critical path delay of the proposed multiplier can be further optimized to work with trinomials and pentanomials.