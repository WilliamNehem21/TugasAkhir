The timed concurrent constraint language (TCCP), an extension of the concurrent constraint paradigm (CCP) introduced by F. de Boer et al., is utilized for specifying reactive and embedded systems. This paper presents the StructGenerator system, which constructs a symbolic representation (referred to as a TCCP structure) to model the behavior of a TCCP program. The resulting structure enables program verification using a model-checking algorithm. The StructGenerator system, implemented in C++, takes as input a file containing the specification of a TCCP program and generates the associated TCCP structure. This paper covers the design and implementation of StructGenerator, along with the execution of two practical examples to demonstrate its functionality.

The CCP model, which employs a store-as-constraint approach rather than a store-as-valuation approach, serves as the basis for TCCP. TCCP extends CCP by introducing a notion of time in the language semantics and new agents to handle negative information. Verification techniques for concurrent and reactive systems, such as model-checking, have been widely developed in recent years. The model-checking algorithm for TCCP transforms a TCCP program into a symbolic representation (TCCP structure) for verification. Although similar to the classical approach, the TCCP structure differs from the Kripke structure, necessitating reformulation and adaptation of the verification algorithm to the CCP model.

The TCCP language, covered in Section 2, extends the CCP model by incorporating a notion of time within the semantics. Agents in TCCP are synchronized by a global clock, and the execution of a program involves asking and telling information to the store, consuming time for consults and updates. The TCCP structure, presented in Section 3, models TCCP traces and introduces difficulties in dealing with the monotonic nature of the TCCP store. Section 4 demonstrates the use of StructGenerator through two practical examples, while Section 5 concludes the paper.

The paper concludes by highlighting future work, including considering new agents, adapting the model-checking algorithm to the structured computation model of TCCP, and improving the tool's interface to automatically display the graphical version of the relation between nodes.