The second criterion concerns space safety, which defines a program transformation as space safe if it does not increase the complexity of programs. Although this criterion is important for program transformations used in compilers, the authors argue that it is too lenient, especially as it does not impose any restrictions for programs without inputs. The authors propose a new criterion that applies to whole-program transformations and examine the connection between properties of local and global transformations. They also review previous studies on safety criteria for program transformations with respect to performance and emphasize the need to develop semantics, particularly profiling semantics, to formalize the performance of programs. The authors assert that while many program transformations used in compilers appear to be space efficient, some are only space safe. They point out that to demonstrate space efficiency, it is necessary to consider numerous operational semantics details of the source language. The authors note that a strong improvement relation is needed to induce a space efficient transformation even for the composition of local transformations applied multiple times in one compiler phase. They also demonstrate weak efficiency for stack space in a simple functional language and believe it will not be overly challenging to address execution time or heap space. Additionally, the authors explain that they have not found examples of local program transformations that meet the criteria of weak improvement relations or semi-strong improvement relations. They intend to show that various optimizations formalized as local program transformations have these types of properties, drawing on the work of Gustavsson and Sands who have developed a theory of space improvement relations for call-by-need programming languages.