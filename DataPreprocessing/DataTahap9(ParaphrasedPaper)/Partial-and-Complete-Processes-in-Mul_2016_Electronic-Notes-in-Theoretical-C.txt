In the context of multiparty conversations, it is common for participants with similar roles to be executed by processes that follow a consistent pattern, differing only in the senders and receivers of communication actions. To facilitate a more flexible and less rigid development of processes, we propose a translation tool that enables the writing of processes in a simplified syntax, called partial syntax, where the names of senders/receivers for input/output operations are omitted. By adding the missing information, partial processes can be automatically translated into complete processes, for which an operational semantics is defined. The use of partial syntax allows for the implementation of similar participants using the same process template.

The translation from partial processes to complete processes is formalized using natural semantics through a set of rules, which implicitly define a recursive translation and type checking function. The soundness and completeness of both the natural semantics rules and the corresponding algorithm can be easily proven.

The concept of multiparty sessions is motivated by its applications to financial protocols in the context of the development of the language scribble. Previous theoretical works on multiparty session types are referenced. The paper utilizes a distributed calculus where each channel connects a master endpoint to one or more slave endpoints. The process syntaxes in the paper are similar to those in a reference, with the main difference being that the communications are asynchronous. The paper takes advantage of the flexibility of partial syntax for dealing with self-adapting protocol participants. The bisimulation of a synchronous multiparty session calculus is also studied, where the calculus syntax differs from the complete syntax due to the lack of multiple receivers. 

The paper provides examples in section 2 to introduce global types and partial syntax. The entire calculus and the type system are presented in sections 3 and 4, respectively. Section 5 concludes with the natural semantics rules for mapping processes written in partial syntax to processes written in complete syntax. Lastly, a translation and type checking algorithm is provided.

Multiparty session programming involves two steps: specifying the intended communication protocols via global types and implementing these protocols as processes. The specifications of the manager-factories protocol are explained through examples using global types, where each participant is coded by a number. The session names and processes are then described with references to the global types.

Delegation is then introduced to enrich the protocol. The new global type introduces a scenario where both factories accept a new session offered by a unique transport company, and the factories delegate the transport company to send the delivery date to the manager.

In the last example, the protocol with delegation is further enhanced to include recursive-branching behavior. In this scenario, the manager negotiates repeatedly with the factories for the number of items to supply. The process concludes with the manager communicating their decision to the factories, and in case of acceptance, contacting the transport company.