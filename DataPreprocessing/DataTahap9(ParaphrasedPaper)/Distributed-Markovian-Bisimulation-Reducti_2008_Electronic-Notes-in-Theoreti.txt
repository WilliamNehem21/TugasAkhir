Therefore, this study presents a distributed algorithm for computing the markov-ap bisimulation using a signature-based approach. Unlike the algorithm utilized in previous work, our signature-based algorithm is more memory-efficient and, in some cases, faster. Additionally, we are not aware of any prior distributed approaches for computing the quotient of any notion of a stochastic bisimulation relation.

The paper is structured as follows: Section 2 introduces the syntax and semantics of csl, the notion of markov-ap bisimulation, and a signature-based definition of markov-ap bisimulation. Section 3 details a distributed implementation for the signature-based computation of the markov-ap bisimulation quotient. Section 4 presents several case studies commonly used in stochastic verification, which are further explored in Sections 5 and 6.

Choosing an initial partition is crucial for computing the bisimulation quotient. For markov-ap bisimulation, the initial partition involves grouping states together based on the same state labeling. The partitioning is then refined during the computation until no further refinement can be found, resulting in a fixed-point.

One case study examines a peer-to-peer protocol based on Bittorrent, where clients attempt to download a file divided into k blocks. Another case study focuses on a system consisting of two sub-clusters, each with n workstations, connected in a star topology. A cyclic server-polling system with n stations is also analyzed, and a kanban system with four cells is modeled as well.

Section 5 demonstrates the feasibility of the signature-based reduction algorithm using the case studies from Section 4, comparing the time and memory efficiency of the serial algorithm with that of mrmc. The evaluation of the distributed version of the algorithm is the focus of the subsequent section.

It should be noted that the complexity of mrmc is o(m log n) for n states and m transitions, while the complexity of ltsmin is o(mi), where i is the number of iterations needed. There is a significant difference in time efficiency between the two algorithms due to this complexity disparity. Future work will investigate the effectiveness of using incremental signature computation for markov(-ap) bisimulation, particularly in cases similar to the cluster example.

Furthermore, the paper discusses the computation of the markov-ap bisimulation quotient for all formulae from Section 4.3 in isolation and notes that none of the sets of state labels induced by these formulae result in a reduction of the state space size. In cases where different rates are not considered, the state space of the kanban system can be reduced when computing a simple strong bisimulation quotient. For instance, for n=3, the state space can be reduced from 58,400 to 33,200 states.