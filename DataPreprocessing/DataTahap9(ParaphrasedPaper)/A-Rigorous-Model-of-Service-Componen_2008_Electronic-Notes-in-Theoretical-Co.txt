The Service Component Architecture (SCA) provides a platform-independent component model for service-oriented development, allowing modeling of service components with different communication mechanisms and implementation languages. However, it currently lacks a formal foundation for system specification and verification. This paper addresses this gap by introducing a formal service component signature model for the specification of the SCA assembly model. In line with the concept of independence in SCA, the paper proposes a language-independent dynamic behavior model for specifying the interface behavior of service components through port activities. Furthermore, the paper discusses the compatibility relation between components and provides transition rules for mapping business process execution language for web services (BPEL) to dynamic behavior expressions and then to Petri nets, enabling verification of SCA-based systems using existing tools. A case study is presented to demonstrate the rigorous construction of a web application using this approach.

The emergence of computer network technologies has made service orientation a prominent theme in software development. Service-Oriented Computing (SOC) facilitates collaborative and remote development of software through the Service-Oriented Architecture (SOA). Many industrial standards, such as web services and the Open Services Gateway Initiative (OSGi), have been proposed in the spirit of SOA, focusing mainly on service communication and composition.

The contributions of the paper consist of four parts: introducing a formal service component signature model, proposing a language-independent dynamic behavior model, providing a method for translating BPEL to dynamic behavior expression, and presenting a verification method for SCA-based systems using Petri nets. The paper is organized as follows: section 2 presents a component model for the SCA assembly model and the operational semantics of the dynamic behavior model; section 3 models BPEL interface behavior with SCA and verifies BPEL processes by mapping dynamic behavior expressions to Petri nets; section 4 includes a case study to illustrate the formalism and the verification process; section 5 reviews and compares related work; and section 6 concludes the paper and discusses future directions.

The syntax of the component dynamic behavior expression is defined, and the paper emphasizes the use of port activities to describe the component's dynamic behavior. The translation of the dynamic behavior expression into Petri nets allows for the analysis of the SCA model of online shops using various tools, such as design/net, spin, smv, smc, iota, and design/cpn, enabling simulation and analysis of properties such as boundedness and liveness.

The paper also discusses existing work in formalization and verification for SCA, highlighting the unique contributions of the proposed dynamic behavior model and the rigorous approach to service-oriented development. The authors share their approach of using existing tools for verification and emphasize the convenience of modeling systems using SCA based on the dynamic behavior model.

Overall, the paper presents a rigorous approach to supporting service-oriented development based on the Service Component Architecture, addressing the need for formal specification and verification in SCA-based systems. A case study and support from various funding sources are also provided.