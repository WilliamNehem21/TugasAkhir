Several task scheduling algorithms have been developed, including heterogeneous earliest execution time (HEFT), critical path on a processor (CPOP), critical path on a cluster (CPOC), dynamic level scheduling (DLS), modified critical path (MCP), mapping heuristic (MH), and dynamic critical path (DCP). The study by Topcuoglu et al. compared the performance of HEFT, CPOP, DLS, and MH algorithms and found that HEFT outperformed the others. Additionally, they found that DLS outperformed MH, while CPOP and DLS showed comparable results. Furthermore, the performance of HEFT was compared to the heterogeneous n-predecessor decisive path (HNPD) algorithm, where HNPD combined both list-based scheduling.

A new algorithm called Longest Dynamic Critical Path (LDCP) has recently been introduced, which introduces a new attribute to accurately identify task priorities in the High-End Computing and Communication Systems (HEDCSS). The performance of the LDCP algorithm has been compared to HEFT and DLS algorithms.

This paper introduces a new algorithm called Sorted Nodes in Leveled DAG Division (SNLDD) for static task scheduling in HEDCSS with a limited number of processors. The motivation behind this algorithm is to generate a high-quality task schedule necessary for achieving high performance in HEDCSS. The main principle of the SNLDD algorithm is to divide the directed acyclic graph (DAG) into levels and sort the tasks in each level based on their computation size in descending order. A comparative study between SNLDD and LDCP algorithms showed that SNLDD outperforms LDCP in terms of schedule length, speedup, efficiency, and system behavior quality.

The remainder of the paper is organized as follows: Section 2 defines the task scheduling problem and necessary terms, Section 3 introduces the LDCP algorithm, Section 4 introduces the new SNLDD algorithm, Section 5 presents the new procedure SPOP applied to both LDCP and SNLDD algorithms, Section 6 presents a comparative study between the developed and existing algorithms, and finally, Section 7 provides the conclusions.

The LDCP algorithm constructs a directed acyclic graph for each processor and computes the Longest Dynamic Critical Paths (LDCPs) to identify task priorities. SNLDD, on the other hand, divides the DAG into levels and assigns tasks to processors based on size and dependency conditions, simplifying the task classification process.

A comparative study between SNLDD and LDCP algorithms using sets of parallel application graphs and a standard benchmark task graph set showed that SNLDD outperformed LDCP in terms of schedule length and speedup. After adding the SPOP procedure, the performance improvement ratio of SNLDD over LDCP increased to 22% in terms of schedule length and 28.6% in terms of speedup.