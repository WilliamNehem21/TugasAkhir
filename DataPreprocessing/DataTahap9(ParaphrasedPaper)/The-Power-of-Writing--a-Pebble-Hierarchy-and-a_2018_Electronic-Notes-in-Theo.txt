This paper explores the concept of pebble automata, which form a hierarchical series of discrete computation models ranging from finite state automata (0-pebble automata) to the model of one-tape Turing machines. The authors investigate the potential of this hierarchy as a pedagogical tool for teaching automata theory and delve into fundamental questions regarding the capabilities of pebble automata.

The authors discuss the possibility of the hierarchy being strict or finite, and its implications for understanding the evolutionary process from 2DFAs to Turing machines. The paper is organized into three sections, with the first introducing pebble automata and fundamental questions, the second examining the relationships between the hierarchy of language classes and other formal language classes, and the third providing concluding remarks on the use of the pebble hierarchy as a teaching narrative.

It is noted that pebble automata are quasi-writing machines, and distinctions are made between standard and unrestricted pebble automata based on their ability to visit empty cells of the input tape. The teaching potential of pebble automata is highlighted, as it allows for the emergence of fundamental phenomena in computer science at the lower levels of the hierarchy.

The authors emphasize the significance of pebble automata in demonstrating sophisticated problem-solving strategies at the lower levels of the hierarchy. They also advocate for the inclusion of material on context-free grammars and pushdown automata in theory of programming languages courses, considering them as valuable additions to the evolutionary tree of computation models starting from finite state automata.

Furthermore, the authors point out the importance of pushdown automata as an additional branch of the evolutionary tree, showcasing the use of pebbles to simulate counters and pushdown stacks. The paper acknowledges the support from Colciencias and the Universidad Nacional de Colombia for enabling the authors' research.