Static program analysis involves extracting semantic information from a program without actually running it. An example of this type of analysis is the definition-use analysis, which is used to examine data-flow program dependencies. This analysis is conducted on an abstract representation of the program that encompasses variable definitions and their use in each program statement.

A highly efficient datalog program analysis technique, utilizing binary decision diagrams (BDDs), has recently been developed in the BDDbddb system. This technique is suitable for large programs and competes with traditional imperative approaches. The computation is achieved through fixed point computation starting from the everywhere false predicate or some initial approximation based on datalog facts. Datalog rules are then applied in a bottom-up manner until saturation is reached, exhausting the computation of all solutions satisfying each relation of a datalog program. These solution sets are then utilized to address complex formulas.

In contrast to existing techniques, the "Able Atoms" approach focuses on demand-driven methods in program analysis. It acknowledges that all program updates, such as pointer updates, may be interconnected, necessitating exhaustive computation of all results. As a result, improving top-down evaluation remains desirable for program analysis applications. Recent work by Zheng and Rugina has shown that demand-driven context-free language (CFL) reachability using worklist algorithm can be favorable compared to an exhaustive solution, particularly in terms of memory consumption. Our technique to solve datalog programs based on local best resolution aligns with this direction and offers a new approach to demand-driven program analyses.

The datalog approach to static program analysis can be summarized as follows: program elements, including variables, types, code locations, and function names, are grouped in respective domains. By considering only finite program domains, datalog programs ensure safety, as query evaluation generates a finite set of answers. Each program statement is broken down into basic program operations, such as load, store, assignment, and variable declarations. Each type of basic operation is represented as a relation within the datalog program, describing a set of tuples satisfying the corresponding relation. Program analysis entails querying extracted relations or computing new relations from existing ones.

The final part of the program specifies the type of information that can be inferred from the extracted program information. In this case, the rules infer potential points-to relations from local variables and method parameters to heap objects, as well as potential points-to relations between heap objects through field identifiers. These rules model the effect of the input relations over the heap.

The datalog program, for instance "vp(x,y).," where x and y are variable arguments of vp, aims to compute the complete set of variables x that may point to any heap object y at any point during program execution. The datalog query is not specified in the datalog program, but is provided independently by the user.