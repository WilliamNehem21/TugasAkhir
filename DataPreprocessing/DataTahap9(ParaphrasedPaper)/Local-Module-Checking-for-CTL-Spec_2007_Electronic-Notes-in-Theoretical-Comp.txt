With the increasing use of embedded systems in various applications, there is a growing demand for formal methods in designing reactive systems. Model checking, a common approach for verifying reactive systems, involves analyzing a finite state model of the system against a desired temporal logic property. However, this method may not be sufficient for open systems, which interact with their environment and have both open (environment) and closed (system) states. To address this, a technique called module checking has been proposed for open systems, taking into account the asynchronous nature of the environment and branching-time logics in the specification.

In this study, a local module checker has been developed by extending NUSMV. The performance of the proposed approach has been demonstrated through comparisons with the generation of maximal environments under which a given property is satisfied. Unlike model checking, which assumes all transitions in every state of the model are always enabled, module checking is specifically designed for open systems where the environment controls which transitions are enabled. The local module checker partitions states into system states (with all transitions enabled) and environment-controlled states (with some transitions enabled by the environment). It should be noted that the proposed approach is not an implementation of global module checking, as it only constructs a single environment under which the given property is satisfied by the module. 

Furthermore, for many modules, both the original property and its negation were satisfied under different environments, and there were multiple start states in the majority of the models. The local module checker was executed on each start state in these cases. Additionally, it was observed that models with dense transition relations took more time to compute than those with relatively sparse transition relations, and the local module checker took slightly longer when the original CTL formula was satisfied by the module.