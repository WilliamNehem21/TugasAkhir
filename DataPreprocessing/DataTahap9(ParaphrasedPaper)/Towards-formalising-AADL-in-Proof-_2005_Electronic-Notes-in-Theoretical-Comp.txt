This paper outlines initial efforts to formalize the Architecture Analysis and Design Language (AADL), focusing on representing its data model. It contrasts two approaches: set-based representation using the B modeling framework and higher-order logic representation using the Isabelle proof assistant. The authors present a transformation of a simplified part of the AADL metamodel related to flows.

The paper addresses static aspects such as partitioning into packages and dynamic aspects related to active entities, communication, and timing, reflecting the industrial need to model and reason about complex software/hardware artifacts. The authors are partners in the Topcased project, which includes Airbus and aims to develop a workbench with AADL as its main modeling language.

The formalization of the AADL language is still preliminary and incomplete. The paper provides a small example in Section 4 to demonstrate the direction of the formalization. It concludes in Section 5 with a discussion of related work and potential extensions.

The paper defines the AObject class (the top of the AADL class hierarchy), its immediate subclass NamedElement, and a Connection class. AObject can have multiple comment attributes, NamedElement has a name attribute in addition to the inherited comment attribute, and Connection has three non-inherited attributes, two of which are references to elements of the FeatureContext class.

The paper also discusses the challenges of giving precise meaning to constructs in Ecore, based on an informal understanding of the underlying concepts. It describes how an Ecore description can be encoded in set theory using the B syntax and outlines principles of data modeling. Additionally, the paper presents a transformation example using the B language.

The paper explores a deep embedding approach, where elements of the language are encoded rather than directly represented in the target language. It discusses the fixed class structure in AADL and the need to explicitly encode such constraints.

The transformation example involves a simplified part of the AADL metamodel that describes the concept of a flow. It explains the allocation of new objects, the declaration of connections between objects, and the verification of preconditions and invariants.

The paper also considers the scalability of embedding set theory in higher-order logics and suggests exploring the AADL class structure as the class structure of an object-oriented program, treating transformations as methods of these classes.

Overall, the paper presents approaches for translating the Ecore language into different formalisms and emphasizes the importance of specifying and proving correct transformations of AADL models.
