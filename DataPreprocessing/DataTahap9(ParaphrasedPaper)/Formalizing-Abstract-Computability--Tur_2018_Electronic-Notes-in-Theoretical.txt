Our research on the Turing category computation model involves constructing a formalized type-theoretic language to describe key concepts, laying the groundwork for proving abstract interpretations of standard theorems in recursion theory. This formalization provides greater organizational structure, consistency, and correctness when working with unformalized presentations, which may omit important details.

The objective of our work is to formalize the mathematical framework of Turing category theory, which describes a precise model of computation. We aim to verify that our formal description fits the selected categorical model exactly. To achieve this, we utilize a library for general category theory and adopt the style of definitions and formalization strategy used in this library as a starting point.

In addition to formalizing categorical concepts, we provide examples of categories to validate our formalization approach and formalized results. Our main example involves formalizing traditional computation on natural numbers, demonstrating its adherence to the Turing category model formalism. We also formalize restriction categories, including familiar categories of partial functions and the category of topological spaces and partial continuous functions.

Furthermore, we define notions such as total subcategory and trivial restriction structure, and formalize restriction products, restriction-terminal objects, and cartesian restriction categories. We also formalize comp(a) and the Karoubi envelope of comp(a) as cartesian restriction categories.

Through our formalization, we discovered additional properties such as idempotent maps and open maps, which allow an abstract characterization of ranges. The tools we developed enable the modeling of both partial and total computation constructively, providing a structural and hierarchical integrity to the study of abstract computation.

Our formal results confirm what has been shown in the literature, but formalization also reveals omissions in definitions, proofs, and propositions. Notably, we formalized a constructive version of the category of sets nn and partial recursive maps between them, which represents traditional computation categorically. This had not been done previously.

Our work also encountered proofs requiring specific versions of the axiom of choice. Furthermore, we discuss the potential of using the Lean system for future formalization of categorical examples of abstract computation in a more integrated way than the Coq development.