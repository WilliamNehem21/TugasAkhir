This paper presents our approach to modeling mobility and performance information at the design level, based on translating a UML2.0 model into a process algebra, specifically using PEPA nets. Once the process algebra model is generated, performance analysis of the system can be conducted. The paper demonstrates the application of this approach to investigate the performance of a software retrieval service.

The software retrieval service, which employs knowledge-driven agents, enables mobile users to select, retrieve, and install software. Our approach allows for the natural modeling of both the service architecture and the service process.

The structure of the paper is as follows: Section 2 provides an overview of the UML diagrams and PEPA nets formalism, and outlines the automatic translation process from a UML model to a PEPA net model. Section 3 presents a case study of a software retrieval service, including a description of the service, its corresponding UML model, the generated PEPA net model, and the performance analysis of the service. Concluding remarks and future work are discussed in Section 4.

The informal description of the semantics of interaction operators in the UML2.0 superstructure specification is also provided in the paper. The meaning of the operators used in this context—such as "alt," "par," and "loop"—is explained to enhance the understanding of the translation process.

The software retrieval process involves several agents, including both static and mobile agents, each with specific roles and behaviors. The behavior of agents at each place in the system is described in detail, highlighting the interactions and responsibilities of the agents involved.

The modeling of the software retrieval service using our approach is illustrated. The translation of agents into object types and the depiction of their behaviors using state machine diagrams are explained. Additionally, the communication between different object types is described to provide a comprehensive understanding of the service modeling.

The approach has been implemented using the Enterprise Architect tool 2, which supports both IOD and XMI import/export functions. Future work includes addressing design consistency and completeness issues, exploring translation complexity, and further exploring the unique features of UML2.0 in the context of the presented approach.