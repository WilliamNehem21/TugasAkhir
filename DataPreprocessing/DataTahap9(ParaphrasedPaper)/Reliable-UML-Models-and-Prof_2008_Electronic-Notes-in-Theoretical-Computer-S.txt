In recent years, model-driven architecture (MDA) has become increasingly significant in software development. This encompasses related techniques such as model-driven development (MDD) and model-based testing. The central concept in MDA is the platform-independent model (PIM), which serves as the foundation for all other activities, including transforming into platform-specific models (PSM), generating code, validating, verifying, and testing. Consequently, the model becomes the focal point of the software development process across various scales and domains.

The Unified Modeling Language (UML) is accompanied by the Object Constraint Language (OCL), which facilitates model navigation and the formulation of constraints, among other useful mechanisms. The profile mechanism, in particular, has received significant attention since the standardization of UML2, as it enables tailoring of UML to specific domains.

As new ideas emerge in software development, new modeling strategies are necessary, especially for UML, as successful applications of UML in the context of MDA impose new demands on the language. Presently, UML lacks formal semantics and its static semantics are only partly formally defined by OCL constraints. Behavioral semantics and additional static semantics are outlined in natural language, which introduces numerous ambiguities.

The ambiguous nature of UML's definition is partly intentional, as developers aimed to avoid fixing all semantic details to accommodate the application of UML to various software systems. Semantic variation points allow adaptation of UML to specific domains, reflecting the diverse needs of each application area. Even when UML is used as a broad approach, developers tend to employ domain-specific semantics to interpret their models, which contributes to the success of profiles.

On the other hand, while behavioral interpretation of models may differ across domains, a sound structure is essential as a foundation, given that behavior is invariably related to structure in UML. Moreover, transformations and code generation require an unambiguous structure as the source. However, the current formalized static semantics of UML are inadequate for ensuring sound models, thereby necessitating validation of models by the tools processing them. This limitation is notably disappointing in the context of models using profiles, as each profile may define additional static semantics that must be considered.

Enhancing semantics can be achieved through analysis of the UML specification and formulation of constraints. Section 4 of the paper addresses the extension to profiles, while section 5 discusses the automated validation process, with section 6 presenting future work and further discussion.

The specification of a modeling language is structured into two parts: syntax and semantics. Syntax is divided into abstract syntax defining the language elements and concrete syntax providing a usable notation for users, while semantics ascribe meaning to the language, encompassing static semantics and behavioral semantics.

Critics argue that a certain level of formality is essential for reasons such as clarity, extensibility, and interoperability. However, this does not imply that every detail in UML must be explicitly specified; rather, a robust foundation and well-defined extension mechanism that allow tailoring of UML to specific domains would be more convenient. Numerous approaches have been proposed to address formal (behavioral) semantics for UML, focusing on subsets of UML inspired by specific domains, such as real-time systems. Static semantics, however, are not extensively discussed.

For UML, OCL serves as an appropriate means to define static semantics, as it enables automatic navigation in the model and checks. However, constraints in the UML specification documents often exhibit flaws and are not comprehensive, leading to some static semantics being concealed in the semantics section of each modeling element, which should ideally contain behavioral semantics. To rectify this situation, steps must be taken to rectify mistakes in existing constraints, formalize constraints in natural language, identify static semantics in descriptions, and formalize missing parts.

The concrete validation process is executed with the tool Use, which requires a (meta)model in textual notation as input. The tool implements set-theoretic semantics and includes an interpreter for evaluating OCL constraints. The evaluation time depends on various factors, including the number of elements in the model, instances of the modeling element, number and complexity of constraints. The complexity is generally polynomial with respect to these inputs.

The validation of OCL constraints of the UML metamodel with the Use tool has been performed for UML1 and UML2.0, and this has been extended to UML2.1 in the current work. However, thorough correction and formalization of constraints for class and object diagrams of UML2 have not been previously undertaken. Similarly, the validation of profiles has been exemplified, but extending this process to other profiles remains an avenue for future work.

In conclusion, the improvement of static semantics of UML should be prioritized to strengthen the foundation of the language. Furthermore, more work is warranted to incorporate static semantics for UML into new versions of the language.