This paper advocates for the development of a multicore implementation of the C++ Standard Template Library (STL) for Cilk++. The authors argue that by leveraging generative technologies of C++, containers, algorithms, and functors could be effectively implemented to take advantage of multicore processing. The paper also outlines the performance impact of memory fences on communication-intensive parallel applications and explores the challenges in achieving asynchronous asymmetric communications for streaming networks.

The C++ STL, designed for generic programming, defines containers as class templates and allows the implementation of algorithms as function templates. It is extensible, enabling the addition of new containers or algorithms to work with existing ones. The authors emphasize the importance of iterators in bridging the gap between containers and algorithms, and highlight the STL's flexibility in accommodating extensions.

The authors examine the suitability of Cilk++ as a platform for executing applications on multicore machines, leveraging its runtime system to manage parallel execution using computation workers. They note that while Cilk++ provides high-level constructs for parallelism, the STL is not optimized for multicore environments, presenting an efficiency bottleneck. To address this, the authors re-implemented the vector container of the STL to enhance its parallelism.

The paper details the use of lower-level constructs in Cilk++ to manage parallelism within the re-implemented vector container, including the challenges of manual scheduling and the techniques used for parallelization. The authors also discuss the use of reducers to ensure atomicity in modifying shared variables within algorithms.

In summary, the paper proposes a multicore implementation of the C++ STL for the Cilk++ platform, highlighting the reimplementation of containers and algorithms as well as the development of a more advanced framework for functors. The authors measure the speedup of applications resulting from their approach.