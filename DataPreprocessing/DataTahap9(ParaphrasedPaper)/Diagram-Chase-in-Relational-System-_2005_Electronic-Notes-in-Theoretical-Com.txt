The functional approach is often too limiting for many software analysis tasks due to the non-deterministic nature of specifications, which allow for one-to-many associations of elements. Additionally, functions are not completely adequate for modeling the semantics of predicate transformers or analysis formalisms like dynamic or temporal logics. Therefore, there is a need to extend from functions to relations, as relations are fundamental in formal methods such as B or Z in software development.

Our approach not only visualizes algebraic axioms through a sound and complete diagrammatic calculus, but also provides intuitive and powerful derived rules for transforming and decomposing diagrams while preserving important properties. These rules capture the informal diagrammatic style of rewriting theory and can be applied to relational software development with methods like B or Z.

The use of relational diagram chase in rewriting is well-established and provides a standard way of reasoning in this domain, offering a unified formalism that combines the rigor of formal logic and algebra with the informality of diagrammatic proofs. This approach enables a proof engineer to sketch a proof using diagrams and incrementally refine it using derived rules, with underlying algebraic semantics facilitating mechanized verification of diagrammatic arguments.

In this paper, we informally present the main concepts behind our diagrammatic calculus and provide illustrative examples. We also outline future work, including the implementation of the calculus and its integration into a formal method. The subsequent sections of this paper detail the use of rewriting diagrams for modeling concurrent systems, propose an algebraic semantics for semi-commuting relational diagrams, and introduce transformation and preservation laws for diagrams. Additionally, we present diagrammatic induction techniques and examples, discuss coinduction, and conclude with suggestions for future research.

We also identify the need for the design and implementation of a graphical front-end that facilitates the explicit manipulation of diagrams, supports user-defined transformation rules, and allows for a seamless transition between algebraic and diagrammatic reasoning. The question of how to present proofs using this approach remains open.