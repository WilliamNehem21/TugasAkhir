The use of code generation to implement software product lines from abstract specifications written in domain-specific languages (DSLs) has become increasingly popular. Instead of synthesizing code from scratch or transforming DSL specifications, this paper suggests leveraging the similarities among products in a domain to generate them using analogy. This entails adapting a previously developed domain product to obtain the final products. The paper also explores the capabilities and limitations of existing tools and languages for implementing such generators and proposes a new language, the Exemplar Flexibilization Language (EFL), to address these limitations.

EFL introduces new operators to overcome limitations of regular expressions and supports integration with parsers to manage complex exemplar modifications. It also facilitates the implementation of crosscutting generators to handle variability across the exemplar, as well as the decomposition and combination of generators. The following sections of the paper provide a summary of EFL, discuss its capabilities in overcoming regular expression limitations, present successful applications of EFL in solving examples from generative programming literature and developing real software product lines, and conclude the presented work.

To quickly develop a DSL interpreter, one technique involves embedding it into a dynamic general-purpose language, where all the capabilities of the host language are implicitly available from the DSL. EFL is currently implemented as a library in the Ruby object-oriented language, taking advantage of Ruby's extensibility to make the EFL concrete syntax reasonably usable within the host language's concrete syntax.

The paper also delves into the types of regular expression engines, specifically deterministic finite automaton (DFA) and nondeterministic finite automaton (NFA) engines. It highlights the challenges of writing complex and time-efficient regular expressions for NFA engines and discusses how EFL addresses this issue through the introduction of the zoom operator (>) to facilitate the step-by-step writing of regular expressions. Additionally, EFL leverages Ruby's metaprogramming capabilities to automate the generation of regular expressions for specific cases.

In evaluating available tools and languages like text templates, regular expressions, meta-parsers, and transformation languages for implementing generators, the paper introduces EFL as a language that overcomes important limitations of these tools and languages. The paper emphasizes that EFL can complement, rather than replace, existing tools and languages by easily integrating with many of them.