This paper serves as an introduction and overview of the functional quantum programming language, qml. It defines and explains the syntax of qml, presents a new qml definition of the quantum teleport algorithm, and briefly introduces the categorical operational semantics of qml in the form of annotated quantum circuits. The paper also discusses the denotational semantics of qml in terms of superoperators and presents an implementation in Haskell of the qml semantics as a compiler.

The development of a language for quantum computation is an active research area, driven by the desire to apply established formal reasoning and verification techniques within a quantum framework, understand quantum computation behavior, aid in the development of new algorithms, and gain a deeper understanding of their functioning. This paper specifically focuses on the syntax, features, and compiler for qml, allowing both classical and quantum control. Notably, the syntax and semantics for qml have been completely redeveloped in this work to address previous problematic interpretations, particularly regarding coproducts and orthogonality.

The quantum teleportation algorithm, which describes the transport of a quantum state using classical communication, has been faithfully implemented in qml to demonstrate and explain the language's syntax and the compiler. The paper also highlights the use of advanced Haskell features, such as monads and pattern matching, in the implementation of the operational semantics. Additionally, the paper outlines the ongoing development of qml and the compiler, which is an evolving project aimed at incorporating extensions and new features into the language and compiler as they evolve.

The compiler serves as a valuable tool for testing and developing new qml algorithms, facilitating immediate feedback on the behavior of functions and enabling experimentation with quantum programming in a manner familiar to computer scientists, logicians, and physicists with functional programming experience. Future extensions to the compiler may include the ability to export typed circuits as images or in notation compatible with tools such as Matlab and Mathematica, as well as exploring relationships with the measurement calculus, the Haskell qio monad, and other formalisms to introduce new features and useful abstractions.