We present a novel approach to analyzing sharing in object-oriented programs using abstract interpretation. Sharing occurs when two variables are associated with data structures that overlap. We demonstrate that linearity analysis can significantly enhance sharing analysis. To this end, we introduce a combined domain that incorporates information on aliasing, linearity, and sharing. Our approach utilizes a graph-based representation of aliasing information, which naturally encodes sharing and linearity information, and defines the necessary operators for analyzing a language similar to Java.

In object-oriented languages, program variables often point to complex data structures that may overlap in memory, as is the case with Java programs, where objects are stored in a shared memory called the heap. Identifying whether two data structures may overlap is the goal of sharing analysis, with implications for program parallelization and distribution, as well as for improving other types of analysis like shape, pointer, class, and cyclicity analysis. We draw on existing research on sharing properties in logic programming as a basis for designing our enhanced abstract domain for sharing analysis. In particular, the inclusion of a linearity property has proven valuable in dealing with sharing information. We present a new combined analysis of sharing, aliasing, and linearity properties.

We illustrate the enhanced sharing analysis through a specific example and discuss the significance of linearity in proving that two subtrees do not share. Our proposed abstract domain, called Alps, integrates aliasing, linearity, and sharing analysis for object-oriented languages and offers all the necessary abstract operations. To the best of our knowledge, this is the first attempt to combine sharing with linearity for Java programs. We also anticipate implementing Alps as an abstract domain for the Jandom static analyzer.

Existing research has proposed abstract domains for analysis of object-oriented languages, introducing two domains for definite and possible aliasing. However, these domains do not consider sharing or linearity properties.