In a previous study, a termination analyzer was created for Java bytecode, which translates a Java bytecode program into a constraint logic program and then proves the termination of the latter. However, the efficiency of the termination analyzer is hindered by the construction of a proof of termination for the generated constraint logic program, which often becomes excessively large. This paper introduces a set of program simplifications aimed at reducing the size of the constraint logic program without altering its termination behavior. These simplifications eliminate program clauses and/or predicate arguments that do not impact the termination behavior of the constraint logic program. These simplifications substantially reduce the time required to build the termination proof for the constraint logic program, as demonstrated in our experiments.

Termination analyses have been previously developed for logic programs, functional programs, and term rewrite systems, which have relatively simple and well-understood semantics. More recently, termination analysis has been extended to imperative programs, dealing with primitive values only, lists, or any dynamic data structure. In all cases, termination is typically demonstrated by showing that some well-founded measure decreases along loops and recursion to prevent divergence. When dealing with generic data structures, the shape of the computer memory needs to be approximated, as destructive updates modify dynamic data through shared pointers.

These simplifications, based on the removal of irrelevant clauses and predicate arguments for termination, are novel. Furthermore, we present these simplifications collectively and prove their correctness in a uniform setting, which has not been done before. Additionally, we experiment with these simplifications on the termination analysis of real, large software, which has not been done previously. Specifically, these simplifications have never been applied to the termination analysis of Java bytecode.

The presented simplifications have been shown to significantly reduce the time needed to build a termination proof of the program. Removing an argument from the clauses of a constraint logic program decreases the time needed to build a termination proof of the program, as it leads to better efficiency in the data structure implementing the linear constraints and a chance for distinct clauses to get merged. The experiments conducted in this study demonstrate the effectiveness of these simplifications in reducing the time required to prove termination for real, large software programs.

We also provide details of the hardware and software used for our experiments, along with the time required for building a proof of termination with the original technique and with the successive application of simplifications described in this paper. The results show that, in general, more simplifications lead to better efficiency, although this relationship is not always straightforward and can vary based on the specific program being analyzed.