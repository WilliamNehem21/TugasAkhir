Logical frameworks are languages that are used to represent formal systems found in programming language semantics, logics, and protocol design. These frameworks are not committed to specific foundations and are mainly concerned with the representation of formal systems rather than reasoning about their properties. Modern logical frameworks have been extended to incorporate linear types for resource awareness, ordered types for modeling systems that access resources in a specific order, and monadic types for capturing concurrency.

In the LLF setting, the language L+ is first-order, intuitionistic, and non-linear. It inherits proofs by induction over arbitrary higher-order types, including those utilizing both linear and intuitionistic assumptions. L+ supports quantification over LLF contexts and can be used to reason about meta properties of languages encoded in LLF.

The syntax and semantics of L+ indicate its intended use as a meta logic to reason about LLF encodings. Proofs within this meta logic serve to demonstrate the validity of statements, lemmas, or theorems, and are viewed as total programs via a realizability interpretation, with fixed input/output behavior determined by the formula's type. The paper aims to discuss how the meta level interfaces with LLF contexts, and the proof theory, with an example used to illustrate the concepts under examination. Additionally, the paper addresses the impact of the meta-theoretic view of openness on the LLF level and provides a categorical or model-theoretic explanation of proof within the meta logic.