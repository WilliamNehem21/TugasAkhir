The proof general tool, widely used by experts in theorem proving for various interactive proof systems, exhibits evident limitations stemming from its evolution from simple command line systems. These limitations include the use of ASCII-text input format with minimal support for Unicode or Tex-like markup, as well as a simplistic linear progression in the proof-checking process, requiring explicit undo and redo commands to manage changes at different positions in the document.

As theorem provers have become more powerful and workstations are now capable of handling multi-threaded applications, it is timely to move away from the single-threaded viewpoint of user interface synchronized with an underlying proof-checking process. Some provers now offer multiple foci of attention, and text editors have evolved beyond linear ASCII-based layout, enabling more sophisticated editing and proof-checking capabilities.

The PGIPD protocol facilitates communication of document changes using specialized commands such as <createcmd> and <editcmd> from display to broker, and <newcmd>, <delcmd>, and <replacecmd> from broker to display. This protocol, while asymmetric, can be abstracted in terms of Xupdate, allowing for standard, symmetric, and bundled modification capabilities, enhancing the transactional capability of the display protocol.

Moreover, advancements in theorem proving call for changes in the presentation of menu entries and actions, with on-demand computation of submenus becoming desirable to optimize performance. When a user selects an action from the menu, resulting modifications to the document are communicated via the broker to the display, closing the menu and triggering the execution of the specific instance of the action within the prover.

To accommodate further displays with advanced layout possibilities, translators can be developed to abstract the display document format, simplifying it for the broker, and guiding heuristics for the layout of new or modified text. Additionally, the infrastructure of PGIP 2 and a (partial) mapping from Coq into GeoProof could enable working simultaneously in GeoProof and CoqIDE. Furthermore, multiple views, commonly found in IDEs for programming languages, can offer new ways of interacting with proof assistant systems.