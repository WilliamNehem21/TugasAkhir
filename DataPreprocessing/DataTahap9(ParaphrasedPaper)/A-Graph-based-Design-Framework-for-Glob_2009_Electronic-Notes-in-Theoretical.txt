This academic paper introduces a framework, T GGA, for designing and analyzing global computing systems using dynamic software architectures. The framework integrates typed graph grammars and the alloy modeling language to specify dynamic software architectures that represent systems evolving their topology at runtime. The paper demonstrates the benefits of this framework through its application to an automotive software system.

Dynamic software architectures (DSAs) are necessary for describing the structure of a system in terms of components, their interactions, and their composition patterns, especially in the context of global computing systems (GCS) where the system topology may change at runtime. The paper discusses various definitions of dynamicity for software architecture models and highlights the need for models that can describe and enact system changes during execution.

The paper presents a comparison of tools such as AGG, VMTS, and GXL for designing typed and attributed graphs, with AGG standing out for providing full support for cardinality constraints. It also explains the selection of Alloy as the preferred tool due to its support for typed hypergraphs and verification aspects.

The paper outlines the structure of the remainder of the paper, including the formalization of programmed dynamic software architectures (PDSAs) using typed graph grammars (TGGs), the Alloy implementation of TGG aspects, the application of TGGA in designing an automotive system, and concluding remarks along with future work.

Furthermore, the paper delves into the formalization of PDSAs using TGGs, explaining concepts such as nodes, ports, and edges within the context of typed graphs. It presents the Alloy implementation of typed graphs and emphasizes the importance of defining an Alloy module containing all the necessary elements for each new system design.