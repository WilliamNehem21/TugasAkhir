This academic paper presents a method for dynamically analyzing the behavior of real-time programs under different scheduling algorithms. The method involves defining generic timed automata for each scheduling algorithm, which can then be instantiated with data for a specific set of tasks. The resulting network of instantiated timed automata can be automatically analyzed using the model-checker tool UPPAAL to ensure that correctness properties are satisfied, and to calculate various scheduling metrics. The paper focuses on presenting generic specifications for uniprocessor scheduling using the Immediate Ceiling Priority Protocol (ICPP) and the Earliest-Deadline-First (EDF) algorithm, and analyzing the behavior of a mine pump controller implemented in Ada95 under each scheduling algorithm.

The paper argues that in order to analyze programs rather than just specifications, it is necessary to consider how they will be scheduled for execution in an implementation environment. It discusses the challenges associated with analyzing possible schedules for a given set of tasks under a particular scheduling strategy, such as the complexity and potential errors in generating the timed automata model of scheduled tasks. To address these challenges, the paper introduces generic timed automata templates that can be instantiated with parameters to represent the behavior of a typical task under a specific scheduling strategy.

The main contribution of the paper is to demonstrate how different scheduling strategies can be defined using generic timed automata, and how these generic automata can be used to analyze properties of a set of tasks under different scheduling strategies. The paper describes the various states that a task can be in (ready to run, running, or waiting) and explains the process of modeling scheduling strategies using timed automata and the UPPAAL model checker. It also discusses techniques for reducing the state space and model checking time, such as using coarser time grains and integrating scheduling theory into the analysis.

In summary, the paper presents a method for dynamic, automated analysis of real-time programs under different scheduling algorithms, using generic timed automata and the UPPAAL model checker to ensure correctness properties are satisfied and to calculate scheduling metrics. It emphasizes the importance of considering the scheduling of tasks in an implementation environment and introduces techniques for reducing the complexity of modeling scheduled tasks with timed automata. Additionally, it discusses the extension of the model to incorporate protected objects for task communication.