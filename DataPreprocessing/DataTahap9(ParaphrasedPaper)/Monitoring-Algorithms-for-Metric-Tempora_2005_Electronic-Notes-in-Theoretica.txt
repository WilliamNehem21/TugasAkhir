The paper demonstrates that the monitoring algorithm for Metric Temporal Logic (MTL) has improved bounds for certain sublogics, including Linear Temporal Logic (LTL). It also indicates that the algorithm's bounds for past and future time LTL are on par with the best-known monitoring algorithms for these logics. Furthermore, the paper establishes lower bounds for monitoring MTL and its sublogics, demonstrating that the proposed algorithm is close to being optimal.

The NASA runtime verification system, Java PathExplorer (JPax), offers monitoring algorithms for past and future time LTL. As MTL provides a more general framework than LTL, there is a clear motivation to extend LTL monitoring algorithms to MTL in order to accommodate both qualitative and quantitative specifications related to timing constraints. The algorithms presented in the paper, when applied to LTL specifications, are as efficient as or more efficient than the specialized algorithms in JPax.

The logic formalism Eagle, designed for use with JPax, combines temporal aspects and data to define temporal operators and support time. The paper demonstrates the ability of Eagle to define and implement various finite trace monitoring logics, including Metric Temporal Logic. Additionally, the paper notes that recent independent work has shown upper bounds of O(m^2*2^m log m) for space complexity and O(m^4*2^mlog^2m) for time complexity for Eagle when specialized to future and past time LTL, which are comparable to the bounds established for the MTL monitoring algorithm when specialized to LTL.