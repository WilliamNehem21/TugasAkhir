The paper discusses the distributed object calculus, an approach that ensures no side-effects and allows activities or processes to be placed on different machines without sharing between them. It explains that various languages have been developed based on the actor paradigm, including those directly featuring actors, distributed active objects like the proactive library, or other derived paradigms. The paper introduces the calculus aspfun as a simple model for such languages and highlights that its abstract nature allows for the analysis of related languages. It also discusses the typing environment and object type formation rules, emphasizing the absence of infinitely nested object types and proving classical typing properties in the context of distributed active objects. Additionally, the paper compares the communication model of ambienttalk to the asp calculus, noting differences such as the use of queues for message sending, asynchronous invocation of handlers, and automatic asynchronous calls on futures. It highlights the potential difficulty in understanding the flow of control in complex applications in ambienttalk and suggests the potential for adapting the framework introduced in the paper to prove the absence of deadlocks in ambienttalk.