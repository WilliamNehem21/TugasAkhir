The role of substitution in hoare logic is crucial, as it is used to interpret assignments. When developing a computer-based implementation of hoare logic, the choice of a suitable substitution implementation is essential. This paper compares various definitions and implementations of substitution within a logical framework in an attempt to enhance efficiency.

We begin by defining substitution as a logical formula. Typically, this is achieved by specifying the syntactic modifications that substitution applies to expressions. However, we opt for a semantic definition that elucidates the behavioral relationship between the original expression and its substituted counterpart.

The notation [v/i]q denotes the substitution of all occurrences of i by v in q. This conveys a semantic alteration of state through a syntactic representation of substitution. Therefore, the efficient implementation of substitution is of great interest when incorporating hoare logic into a logical framework.

To facilitate understanding, we establish the logic in which the formula q is written. We adopt the one utilized in our PCC applications, which is detailed in the appendix. Although this is a higher-order calculus grounded in a polymorphically typed lambda calculus, it is pertinent to emphasize that we do not employ type polymorphism in our presentation. Furthermore, the same techniques and results hold when applied to a different calculus, potentially even an untyped one.