The paper discusses graph patterns, which are incomplete graphs containing holes that can be filled with terms or sub-terms. A distinction is made between left patterns and right patterns, with the possibility of variable substitutions in right patterns. The study also introduces concepts related to space leaks, wherein objects persist in memory even when they are no longer needed due to poor programming or language specification issues. The paper proposes the inclusion of space semantics in language specifications to compare implementations and avoid leaks. It also examines the notion of accuracy in evaluators and the relationship between input size, initial graph size, and space usage. Additionally, the paper delves into the significance of garbage collection systems and their role in investigating space-safe translation. The paper advocates for the development of accurate evaluators as abstract models of space usage, and discusses the challenges associated with modeling space behavior in graph-based systems. Finally, the study addresses the abstract definition of space behavior for graph garbage collectors and translators, emphasizing the need for a general rewriting framework to ensure desired properties.