This study introduces a novel method for creating debugging tools for lazy functional programming languages, which involves replaying the execution of a lazy program with a strict semantics by capturing information about unevaluated expressions. The captured information, referred to as an oracle, is concise and contains the number of strict steps between the discarding of unevaluated expressions. The method has been successfully utilized to develop a debugger for lazy functional languages. Furthermore, the paper formalizes a technique for automatically recording and replaying step information, demonstrating the soundness of the approach and proving properties related to the resources required to compute the oracle information.

In addition, the paper discusses the extension of the approach to functional logic languages, providing examples and illustrating the relationship between generators and free variables. It also addresses the projection of search trees to values and the implementation of search strategies as tree traversals. The paper presents the development of a debugging tool for the Curry language and outlines further potential applications, including the handling of unification and constraint solving in the context of the proposed technique.

Overall, the study showcases a technique for efficiently capturing program data in lazy functional languages and expands its applicability to encompass the features of lazy functional logic languages. Additionally, it outlines future work to incorporate unification and constraint solving into the framework.