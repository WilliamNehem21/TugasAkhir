lustre serves as a specification and programming language to describe synchronous data-flow computations, particularly in reactive control/command systems, such as in electrical power production applications. The resulting code can either be automatically generated or hand-coded, depending on efficiency and code reuse considerations. In this paper, we focus on basic selection mechanisms after briefly introducing Lustre and the resolution procedure used in GATEL.

Lustre, a member of the synchronous data-flow language family developed at the Grenoble INP, is used in industry due to its benefits and is equipped with both textual and graphical notations. We describe the reactive behavior of a system with four inputs and three outputs, highlighting the use of the assert directive for stating invariant properties. Additionally, we discuss the efficiency of GATEL, which relies on specialized heuristics for variable selection and consistency checking.

The paper also addresses the specification of the environment, emphasizing the need to filter out unrealistic behaviors from the model. Two approaches for describing test cases in GATEL are presented, along with a discussion of a splitting technique for the domain of validity. However, we acknowledge the challenges in handling real and floating point numbers in GATEL.

In summary, this paper provides an overview of Lustre, its application in industry, the reactive behavior of a system, the efficiency of GATEL, methods for test case description, and the challenges associated with handling real and floating point numbers in GATEL.