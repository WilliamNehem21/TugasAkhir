The existing approaches manually write the control code that enforces constraints. This code is not well-modularized, making it difficult to reuse and maintain. Additionally, the code may not adhere to the formal specification, and manual changes are required when the specification changes. The rest of the paper is organized as follows: Section 2 introduces the Z specification language, Petri nets, and aspect-oriented programming. Section 3 presents the approach for controlling the architecture evolution of component-based applications. Section 4 describes a case study on a collaborative authoring system. Section 5 discusses related work, and Section 6 concludes the paper.

The Z notation provides a formal specification language based on set theory, mathematical logic, and refinement theory. It allows for the description of system states and state changes. Aspect-oriented programming (AOP) separates crosscutting concerns from the functional code of a software application, introducing join points, pointcuts, and advices.

Join points represent specific points in a program's execution, and pointcuts select a set of join points for executing crosscutting functionality. Advices are pieces of code that implement crosscutting functionality and are associated with pointcuts. This separation of concerns in AOP reduces the complexity of distributed applications and bridges the gap between application implementation and formal specification.

The proposed approach defines constraints in the architectural style and coordination protocol without modifying the functional code of the application. By using aspects, the control and coordination code is separated from the functional code, simplifying the management of distributed applications. Furthermore, if the formal specification changes, only a few well-defined modules, namely the aspects, need to be modified in a non-invasive way.

The system specification involves defining component types, relations between components, and architectural properties using first-order predicates. Ensuring system consistency and reasoning about the architectural style is done using the Z/EVES tool, which supports syntax and type checking as well as theorem proving.

The paper also discusses the construction of a collaborative authoring application using a three-phase approach involving writing, reviewing, and control management modules. The control module oversees the application's architecture evolution, enforcing static and dynamic constraints by using aspects to interpret formal pre-conditions generated from the operation and style schemas.

In the proposed approach, the main contribution lies in controlling software architecture evolution in a modular way using aspects, combining aspect-oriented programming and formal methods to enable reliable and modular verification. The use of an aspect-based control module improves the modularity and reusability of control code, as well as separation from business logic.

Future work includes studying expressive pointcut languages to better express temporal relationships and investigating their potential to replace the usage of Petri nets in the approach. Additionally, automatic generation of control and coordination aspects will be targeted.