The multi-view and multi-notational nature of UML serves the purpose of allowing the division of an overall system model into multiple views, which can then be broken down into manageable chunks. Each individual view focuses on a different aspect, facilitating analysis and comprehension. This decomposability also enables the distribution of modeling tasks among a development team, and is crucial for tool support, as it would be challenging for a tool to handle a single large and complex model. UML also aims to support system modeling at various levels of abstraction, but without clear means for information hiding, this goal is less straightforward. Therefore, additional effort is needed to enhance UML's support for model transformation and refinement.

Following this introduction, we introduce the refinement calculus for object systems in Section 2. We then outline the concepts for extending the model to handle component systems in Section 3. Section 4 briefly discusses the relationship between object systems and component systems.

We will adopt the Java convention for writing a class specification and assume that an attribute is protected when it is not marked as private or public. Different types of attributes are used to illustrate how visibility issues can be addressed. Similarly, various types of methods can be included for a class. However, we will omit the declaration of parameter types, assuming that they are declared at the beginning of the main program and remain unchanged thereafter.