democles 5 is a tool that supports the EP language, which can be utilized to create a platform-independent model of a system. This study demonstrates how the EP language can describe a group of related systems and presents a code-generation technique based on templates.

The Formal Template Language (FTL) is a formal language designed for expressing templates of any target textual language, with a general mathematical semantics not tied to any specific platform or execution environment. FTL is generative in nature, as it specifies sentences of a given target language, such as Java and Objective-C, and generates sentences when provided with an instantiation.

The EP model discussed in Section 6 is platform-independent, addressing problem domains, graphical user interface, and persistence concepts without committing to any platform-specific details. The development team of the EP model included three members, with only two being experts in Android and iPhone. However, all developers were able to comprehend and process the EP platform-independent model and generate applications for both iPhone and Android. The EP model served as a platform-independent medium through which different users could communicate.

Initially, the development of the model may progress slowly due to the need for more templates and the time required to build and refine them. However, once the templates are in place and mature, the development process becomes relatively fast and straightforward, enabling the model developer to become independent of platform developers.

The experimental findings indicate that the model-driven development (MDD) approach effectively assists developers who are not experts in a target platform in creating platform applications from models. Nevertheless, the approach has limitations and opportunities for improvement, which are discussed in detail.

The approach presented in the study offers the automatic generation of different application variants, relieving application developers from dealing directly with variability, which is encapsulated within the templates infrastructure. However, the current EP-based approach does not support dealing with variability at the modeling level, despite the occasional need for it.

The experiment demonstrates several usability benefits of developing applications at the modeling level, including enabling non-platform experts to participate in development and fostering collaboration between platform experts and designers. However, the level of tool support for MDD falls short in comparison to modern platform-specific development toolkits.

While the study has successfully built a model from which a practical mobile application could be generated, the case study is relatively small, and complexities arise when the EP models become large. Efforts are being made to improve modelling in large-scale scenarios.

The approach presented in the study is a variant of the FTL-based modeling framework proposed in earlier works. It entails defining the semantics of UML notations based on catalogues of FTL templates, with each catalogue encapsulating a specific semantic interpretation of the notations.

The study distinguishes its FTL-based approach from other MDD frameworks, which use template languages that are not formally defined and are made up of simple placeholder constructs only. FTL is formally defined and offers a rich set of constructs, including placeholders, lists, choice, template naming, and modules.

A comparison is drawn with the MDE approach based on domain-specific modeling languages (DSMLs) proposed by Balasubramanian et al, which covers more system aspects than the EP-based approach, such as architectures and deployment. In contrast, the presented approach uses templates as intermediate representations of code, based on formal languages like EP and FTL.

Overall, the study's approach, based on formal languages and templates, provides valuable insights, including the potential for improvement in accommodating large-scale models and addressing variability at the modeling level.