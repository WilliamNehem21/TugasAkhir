The increasing use of computers to control complex systems, such as in the traffic domain, has led to a need for formal modeling and verification techniques to ensure safety-critical applications, such as collision-free assistance systems for vehicles. To address this, combined specification techniques have been proposed to model various aspects of complex systems, including state spaces, communication between system components, real-time constraints, and interfaces to a continuously evolving physical environment. However, the automatic verification and analysis of these combined specifications remain a major research challenge.

This paper provides an overview of the combined specification language CSP-OZ-DC in Section 2, followed by an approach to automatic verification of real-time properties in Section 3. Case studies performed in this context are reported in Section 4, while Section 5 describes the tool support available for the approach. The paper concludes in Section 6.

In the context of the European Train Control System (ETCS) with two trains, several classes are involved, such as RearTrain, LeadingTrain, RBC, CommunicationNetwork, Track, and Driver, wherein objects of classes are combined into systems using CSP operators.

It is noted that the semantics of CSP-OZ-DC specifications are generally infinite state systems due to clocks and data values, making reachability generally undecidable. However, as demonstrated by case studies, automatic verification using techniques such as ARMC has been successfully applied to various examples.

An application of the verification approach dealt with a parametric elevator, where safety properties dependent on communication, data, and time were verified automatically using ARMC. The specification of the elevator comprised both infinite data and continuous real-time components.

The current version of ARMC has a limitation in that it cannot exploit the parallel composition present in the phase event automata (PEA). This limitation, which leads to state spaces that are too large to be computed, will be addressed in future work. The paper also discusses the PEAToolkit, which provides automatic computation of the parallel product of PEA and the translation of PEA into TCS, the input representation for model checkers. Additionally, the tool provides visualization of counterexample traces in the Syspect tool.