This paper provides an overview and expansion of previous research on the concept of machine development within the domain-theoretic framework. It outlines the principles of developmental computation and illustrates how interactive computation can be seen as a transitional stage between classical and developmental computation. The paper critiques classical computation, highlighting its limitations in influencing the evolution of real computers, and demonstrates how interactive and developmental computation address these shortcomings. It emphasizes the broader scope of developmental computation compared to interactive computation. Additionally, the paper outlines a formal framework for developmental computation and briefly discusses the current frontier of research in this area.

In section 2.5, the paper affirms that processes producing strings of characters or other objects fulfill specific constraints. It also clarifies the distinction between finiteness and finitarity, emphasizing that developmental and interactive computations are considered finitary rather than finite.

The paper argues that the transition to developmental computation is primarily a conceptual and epistemological step, rather than a technological one. It involves moving beyond the fundamental concepts of classical computation, such as machines, programs, and algorithmic computations, and embracing the basic notions of a general theory of complex dynamical systems, including organization, development, and adaptation. The adoption of a general theory of complex organized dynamical systems, particularly the theory of biological organisms proposed by Jean Piaget, is highlighted as crucial for this transition.

To illustrate the concept of machine development, the paper presents a preliminary model of developmental steps for machines, acknowledging that the model is incomplete but sufficient for grasping the essential aspects of the idea of machine development.