The problem of accidental misuse of shared files by authorized users is prevalent, and this paper suggests using a type system based on static analysis to prevent such misuse. The proposed type system would intercept user commands in a file system and enforce policies on each file, ensuring that commands related to file manipulation undergo type checking to avoid violating the files' policies. The primary focus of this paper is on a specific policy that allows file owners to limit the number of times a file can be read by restricting the number of times it can be copied. This approach could be expanded to cover other properties.

The paper emphasizes that information flow control can be enforced either statically or dynamically, with the former using type systems as the dominant approach for securing information flow. The subsequent sections of the paper discuss security types and file policies, language syntax, and semantics for file manipulation, as well as the type system, type checking algorithm, related work, and conclusions.

The enforcement of the policy to limit the number of times a file can be read is achieved by restricting the access to copy operations and controlling information flow caused by all operations. This involves defining three security types (uc, lcn, and nc) to specify different policies on copy operations for files. The paper also highlights the property that commands in the language are monotonically increasing, ensuring that file types never decrease during command evaluation.

The paper guarantees the soundness and completeness of the type system regarding the operations semantics and defines a sound and complete type checking algorithm. Furthermore, it differentiates its security types from conventional security levels by representing both access control and information flow policies, restricting operations performed on types and the resulting information flow.

The authors suggest extending the presented language and type system while preserving their desired properties in future work. They also discuss extending the type system to enforce additional policies on read and write operations and incorporating ownership and authorization information into the file labels to control user access to different file operations. Additionally, the paper introduces the idea of commands that can manipulate file policies and extends the type system to accommodate these commands with typing rules and an accompanying typing algorithm.