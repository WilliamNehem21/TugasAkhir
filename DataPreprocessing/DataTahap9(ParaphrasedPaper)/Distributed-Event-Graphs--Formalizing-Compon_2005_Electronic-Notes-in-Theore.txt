We utilized the Atom3 meta-modelling tool to put into practice these concepts, collaborating with Hans Vangheluwe from McGill University in Montreal in the construction of Atom3. Atom3 facilitates the description of visual language syntax through meta-modelling and the establishment and execution of graph transformation rules. Customized modeling environments can be automatically generated from these high-level descriptions. We developed a modeling environment for DEGs and enhanced it with a code generator that generates standalone applications. This approach allows for visually modeling and analyzing applications in Atom3, followed by the generation of code from these models.

In the SPO approach, a production is represented as a single (partial) mapping from the left-hand side to the right-hand side. When applied, dangling edges and nodes or conflicting edges due to the identification condition are removed. Consequently, rules in the SPO approach may have secondary effects, which is the approach pursued in this article.

In the context of graph grammars for defining visual languages, these languages are specified by either a generating or a parsing grammar. Generating grammars can produce all valid models of the language, while parsing grammars reduce the valid models of the language to an initial symbol.

In both approaches, it is essential to ensure consistency in models at each level (intra-level consistency) as well as between the specification and the instance levels (inter-level consistency). With a single meta-level, textual or graphical constraints need to be employed in order to ensure consistency, whereas with two separate meta-levels, consistency between both levels is guaranteed by design.

The rules governing event scheduling and behavior modification in the modeling formalism are designed to model applications in a manner akin to event-driven programming environments. The ability to visualize the user interface for each component and modify it in response to events allows for dynamic control over the user interface of the model within Atom3.

The framework defined in this work shares some similarities with the DEVS formalism. The combination of a formal definition of a language using meta-modelling and graph transformation, together with code generation capabilities, enables the analysis of the model prior to the generation of the application. This paves the way for further investigations into model properties such as parallelism, deadlock, non-determinism, and functional behavior.