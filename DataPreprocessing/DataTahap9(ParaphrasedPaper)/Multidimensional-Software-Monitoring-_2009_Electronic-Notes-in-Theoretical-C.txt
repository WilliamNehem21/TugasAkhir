The software industry is increasingly focused on evaluating software quality, as high-quality systems typically result in lower total cost of ownership. To provide managers and software developers with insight into the quality of the software systems they are developing, there is a need for a software quality monitoring system. It is important for the metrics calculated on the software system to produce a comprehensive yet meaningful report. The Software Improvement Group has developed the Software Monitor, an analysis and online reporting tool for monitoring the quality of a software system during development.

At the Software Improvement Group (SIG), our expertise lies in evaluating and monitoring the quality of software systems. From our experience, most development teams can provide a general estimation of which parts of their system are challenging to maintain, but these estimations are usually no more than educated guesses. We have observed a demand for quality reviews at the management level, but there is often a lack of knowledge required to perform such reviews.

Additionally, it is essential for the reporting side of the monitoring system to offer drill-down functionality to easily navigate to problematic areas in the code. This drill-down should be available on multiple dimensions, such as the file-system dimension and a logical (language-specific) hierarchy. For instance, in a Java project, a package hierarchy linking levels of package/file/class and methods could be envisioned.

OLAP cubes are commonly used to store measurements and numeric facts categorized by dimensions. By keeping track of the sales and properties of products, companies can generate reports of sales by product, by product category, or by store. In our case, we use OLAP cubes to store calculated software metrics, with dimensions supporting the storing of metrics in a file-system dimension, a language dimension, and language-specific dimensions such as the package dimension for Java. By using an OLAP cube as a data store, the results of multiple calculations are stored in a single place, allowing for flexibility in reporting.

In the development of custom SAP modules, it is important to maintain the quality of the software system. The Code Inspector is a static analysis tool that can verify programs, forms, and reports written for a SAP system, checking for errors in the ABAP code and adherence to naming standards, among other checks. The Maintainability Model provides insight into the maintainability of the software system by mapping source code properties onto the ISO 9126 standard.

The Maintainability Model calculates metrics for the systems under analysis, including the volume per unit, cyclomatic complexity, and duplication. These metrics are related to the total size of the system and grouped into bins to show the distribution of metrics such as McCabe values and unit sizes within the system. Additionally, the number of deprecated keywords and statements used in the system are counted, with an increase in this metric indicating the use of deprecated functionality.

In terms of related solutions for measuring software quality through metrics, there are two separate groups of tools. The first group contains tools that can potentially replace the Software Monitor system, while the second group includes existing front-ends for OLAP cubes that could theoretically be used with the cube generated by our monitoring system. However, there are reasons for not using these tools, as explained in sections 5.1 and 5.2 of the paper.

While there are various stand-alone programs and editor support available for calculating metrics on the source level, there are limitations such as language support and the lack of system-level overview. In response to this, we are exploring the possibilities of differentiating the functionality of the monitor based on the user's role and creating a benchmark application to relate the characteristics of similar projects. Additionally, efforts are underway to define the semantics of calculated metrics on different levels and explore the potential for a more dynamic and interactive interface.