This paper discusses the concept and practical applications of a plan language within the realm of mathematical web services. A plan is a document that outlines the usage of various mathematical web services to address specific problems, functioning akin to a program with most function calls being handled by these services. Plans are characterized as multiple-state choreography documents and can be categorized as abstract, unresolved, or resolved, based on the degree of familiarity with the web services involved in the choreography. Plans can be instantiated into a composition language, such as BPEL, or into a mathematical routine, such as a Maple routine, for execution.

When describing plans, the paper distinguishes between abstract plans, which entail mathematical functions outlined by ontologies or classifications like GAMS, unresolved plans, which are abstract plans with some mathematical functions replaced by actual invocations of web services, and resolved plans, where all mathematical functions are substituted with corresponding web service invocations.

The paper highlights the significance of mathematical computing within computer science and proposes an architecture for a web service-based framework to discover and deploy mathematical packages. It emphasizes the abundance of packages for numerical and symbolic computation and notes their usage in academic and commercial contexts, citing examples such as Maple and Mathematica for symbolic computation and the NAG libraries for numerical computation. The text espouses the potential of web services in simplifying integration between systems, facilitating the utilization of specialized packages within broader computer algebra systems.

The paper underscores the potential of service-oriented computing to enable access to agile mathematical processes through loosely coupled, standards-based mathematical services. It also considers the commercial implications of mathematical packages and addresses the need for effective billing, transaction, and security mechanisms in such contexts.

Additionally, the paper discusses the challenges associated with invoking multiple mathematical routines and proposes the use of plans and a planning environment to restore the flexibility and usability of interactive systems. It advocates for a planning language to empower end-users to construct programmatic combinations of routine calls and outlines the requirements for such a language in terms of flexibility and translation to various target languages.

The paper also touches upon the need for more specific experimentation with users and services to address specific needs, and considers the inclusion of web services within abstract plans. Furthermore, it delves into the components and functions of the Execution Manager (EM) within the proposed architecture, discussing its role in supervising the invocation of mathematical web services and the options for executing resolved plans, either directly or through third-party composition languages.

Ultimately, the paper presents a comprehensive exploration of the concept and practicalities of utilizing a plan language in the context of mathematical web services, addressing the architectural, commercial, and practical implications of such a framework.