This paper focuses on the application of timed concurrent constraint programming (TCC), as defined by Saraswat et al., to describe reactive systems. The TCC framework leverages the features of declarative programming and incorporates the notion of time into its semantics. The authors propose introducing model checking techniques to a user-defined finite time interval, effectively constraining the program's behavior space to a finite representation and making model checking algorithms applicable. They highlight the significance of TCC's ability to detect both positive and negative information, which is essential for modeling reactive and real-time computations. The paper discusses the formalism for representing the model and the constraints necessary to ensure its finiteness. The authors propose building abstract versions of model collections directly from the TCC specification using a declarative constraint-based language. They also utilize the explicit notion of time present in TCC to restrict variables and obtain models suitable for classical model checking. The paper presents a detailed analysis of the TCC language, its semantics, and its fundamental constructs such as positive ask, unit delay, abortion, and timing constructs. Additionally, the authors discuss the construction of a finite graph representation of a TCC structure associated with a given TCC specification, and they outline the process of ensuring the finiteness of the graph construction. Furthermore, the paper introduces a method for constructing a formal model for reactive systems, emphasizing the necessity of capturing system state transitions. The authors describe how state transitions can be represented using first-order formulas, with the transition function taking an additional parameter to express the transition to the next time instant. They also elaborate on the construction of a graph representation of a TCC structure and define the processes for specific syntactic constructs like tell, positive ask, parallel operations, hiding, and procedure calls. The authors note that TCC's structural differences from classical approaches prevent the direct application of classical model checking techniques to the constructed graph structure. They explain the need to introduce restrictions on variable domains to ensure the finiteness of the representation. Overall, the paper presents a comprehensive exploration of TCC as a framework for describing reactive systems and outlines the formalism and methodology for representing and constraining the behavior of TCC-based models for formal verification.