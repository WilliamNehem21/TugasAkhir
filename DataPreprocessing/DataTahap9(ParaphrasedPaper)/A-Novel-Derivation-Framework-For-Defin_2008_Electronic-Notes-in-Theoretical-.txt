Can a closed atom be derived from a specific logical program? Determining this is an undecidable problem. In addressing this problem, two broad approaches exist: an accurate approach that does not guarantee termination, and a terminated abstract approach. Both approaches have their own advantages and disadvantages. This study introduces a new derivation framework for the definite logical program. The framework includes a derivation algorithm, an abstract and refinement approach for the fixpoint, and an algorithm for predicting fixpoint termination.

The introduced abstract and refinement approach calculates a safe approximation of the fixpoint using a variant of the depth(k) abstract domain and refines the computed abstract fixpoint by increasing the threshold k of the depth(k) abstract domain. The abstract fixpoint constructed terminates, and the derivation algorithm will terminate when using it instead of the fixpoint. If the result of the derivation algorithm using the abstracted fixpoint indicates that the closed atom is not derivable, it is indeed not derivable since the abstracted fixpoint is a safe approximation. If the result of the derivation algorithm with the abstracted fixpoint shows that the closed atom is derivable, and it is also derivable from the unabstracted rules in the abstract fixpoint, then a derivation witness (a derivation tree) of the closed atom can be constructed using the same approach. Otherwise, the abstract fixpoint is refined by increasing the threshold k, and the derivation algorithm will use the refined abstract fixpoint to address the derivation problem again.

Our approach supports the abstract refinement iteration analysis framework. The variant of the depth(k) abstract domain can only be refined by increasing the threshold k, as there are no explicit refinement methods for the above approximation algorithms. The derivation, construction of derivation witnesses, and refinements can all be mechanized.

Note that a definite logical program has a finite number of rules, and infinite logic rules in the solved-form fixpoint arise from repeatedly applying the same set of rules. This can lead to infinite repetition of selected variant goals or selected goals with recursively increasing term size. Termination can be characterized by checking whether there is infinite repetition of selected variant goals or selected goals with a recursive increase in term size.

Our prediction algorithm is more precise and efficient. Firstly, if the loop into relation is not restrictively defined over the heads of offspring of the same logic rule, the algorithm may predict that the solved-form fixpoint of the logic program model does not terminate, even though it actually terminates. Thus, our predicting algorithm is more precise. Secondly, instead of checking all heads of solved form logic rules to predict termination, we only need to check those heads of offspring of the same logic rule in a definite logic program, improving the algorithmâ€™s efficiency.

This paper introduces a termination prediction algorithm for the solved-form fixpoint of a definite logical program. Based on this prediction algorithm, the non-terminational accurate approach and the terminated abstract approach are combined to solve the derivation problem more efficiently. The experimental results show the practicality of the termination prediction algorithm and validate the effectiveness of the novel derivation framework for definite logical programs.