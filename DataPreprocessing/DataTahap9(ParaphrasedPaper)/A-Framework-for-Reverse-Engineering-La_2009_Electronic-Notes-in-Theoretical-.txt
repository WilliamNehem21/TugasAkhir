When evaluating the quality and sustainability of large C++ code bases, it is essential to use tools for extracting various information from the source code, including architecture, structure, code smells, and quality metrics. Additionally, it is important for this information to be presented in a way that allows for correlation, identification of outliers, and detection of anomalies. In this paper, we introduce "SolidFX," an integrated reverse-engineering environment (IRE) specifically designed for C and C++, with capabilities for code parsing, fact extraction, metric computation, and interactive visual analysis. The design of SolidFX incorporates and extends existing code analysis and data visualization techniques to make them scalable for handling millions of lines of code. We describe the design decisions made in constructing SolidFX and discuss its application in real-world industrial code bases, including assessments of maintainability, modularity, detection of coding patterns, and complexity analyses.

Over the past few years, there has been an emergence of tools to support program understanding, software maintenance, reverse engineering, and reengineering activities. Many of these tools rely on static analysis of the source code to extract information, perform fact aggregation and querying, and provide interactive presentation. However, for the C++ language, there is a lack of static analysis and reverse engineering toolsets that meet these criteria. The complexity of the C++ language, including its various dialects, mixed C and C++ code, and preprocessing, poses challenges for robust static analysis of large C++ code bases. While there are existing C and C++ static analyzers, few of them are integrated into a framework providing query, metrics, and interactive visualization tools that are scalable and user-friendly for software engineers.

We also discuss the classification of C++ static analyzers into lightweight and heavyweight analyzers. Lightweight analyzers, such as srcml, Sniff+, gccxml, and others, perform partial parsing and type-checking, making them faster and simpler to implement and maintain. However, they lack the detailed information required for visual analyses. On the other hand, heavyweight analyzers, such as DMS, Columbus, ASF+SDF, and others, provide accurate and complete static information but are slower and more complex to implement. We present our approach of using a heavyweight analyzer based on the Elsa parser, and discuss the advantages and limitations of this approach.

SolidFX is designed to cover a wide range of analyses, from local variable level up to system architecture, and allows for integration of third-party analyses via plug-ins. The parser, query and metric engine, and data views form the core components of SolidFX, and we illustrate the application of our tool on real-life code bases, as well as the feedback obtained from actual customers.

We share the details of the fact extractor, a component of SolidFX that analyzes projects one source file at a time, saving information on lexical, syntax, type, and preprocessor elements in a database. Using the Elsa parser as the foundation, our fact extractor produces a parse forest of all possible input alternatives, adding complex typechecking, scoping, and symbol lookup rules to create an annotated syntax graph (ASG). We also discuss the use of visualization tools and layout libraries for generating diagrams and metrics, and the integration of external views for extending the capabilities of the IRE.

Finally, we present case studies showcasing the practical usage of SolidFX in a number of industrial projects, highlighting its effectiveness in conducting reverse-engineering and code assessment sessions with the same ease as software development in integrated development environments (IDEs). We conclude by discussing the future directions of extending SolidFX to support more advanced static analyses and predefined analysis packages.

In summary, this paper introduces SolidFX as an integrated reverse engineering environment for C and C++, presenting its design, application, and future development directions. The IRE provides a comprehensive set of tools for analyzing large C++ code bases, offering users the ability to conduct reverse-engineering sessions with the same ease as software development in IDEs.