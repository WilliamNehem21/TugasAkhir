The paper examines groupware systems, particularly focusing on the asynchronous and dispersed groupware system known as Thinkteam. It discusses various design issues in groupware systems, such as data sharing, user awareness, and concurrency control, within the context of Thinkteam. The paper employs model checking to formalize and verify properties relevant to the correctness of groupware protocols, including the addition of a pub/sub notification service to the Thinkteam protocol. The study also makes assumptions and formulates specific properties that the Thinkteam protocol must satisfy.

One of the properties tested is the "unique lock/file" property, which ensures that at any given time, only one user may possess a lock on a particular file. Similarly, the "keep file locked" property verifies that a lock on a file is not released as a result of a checkinout. The paper also addresses the issue of users receiving notifications and updates for files they are not registered for, and the ability of users to retrieve files from the system. Additionally, the study highlights that the Thinkteam protocol does not mandate users to return files they have checked out, and suggests potential solutions for addressing this issue.

The paper demonstrates the feasibility of using model-checking tools like Spin to verify the specifications of the Thinkteam protocol, and indicates that the concurrency control and awareness aspects, complemented by a pub/sub notification service, are well-designed. However, it also discusses the issue of users not being obligated to return checked-out files, and raises the possibility of redundant message copies to mitigate message loss in the system. The paper suggests that this problem requires further investigation, considering the specific human interactions inherent to groupware protocols.