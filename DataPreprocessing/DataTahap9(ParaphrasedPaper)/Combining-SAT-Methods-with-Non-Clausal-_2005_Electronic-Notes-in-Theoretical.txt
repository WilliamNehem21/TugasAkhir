The process of deciding arbitrary first-order formulas can be seen as a combination of propositional search and a decision procedure for conjunctions of first-order literals. By using Boolean satisfiability (SAT) methods for the propositional search, the overall decision procedure's performance can be enhanced. We demonstrate how integrating certain SAT methods with non-clausal heuristics developed for first-order decision procedures can lead to a reduction in the number of decisions required compared to each method used in isolation. In situations involving large formulas with significant Boolean structure, the size of the propositional search tree tends to have the most significant impact on overall performance, making heuristics and efficient search algorithms for SAT crucial. We illustrate how combining SAT methods with non-clausal heuristics designed for first-order decision procedures results in a method that requires fewer decisions to decide a formula than either method on its own. Existing methods for propositional satisfiability and non-clausal search heuristics are reviewed in Section 2. Our implementation, which combines these methods, is described in Section 3. Section 4 presents quantitative results obtained using CVC Lite, a proof-producing decision procedure for a combination of theories without quantifiers.

In the first-order version of the Davis-Putnam-Logemann-Loveland (DPLL) algorithm, variable assignments are replaced with first-order assumptions. Propositionally satisfying assignments are verified by submitting the conjunction of first-order literals induced by a propositional assignment to the first-order decision procedure. If the first-order decision procedure is online (such as CVC Lite), first-order literals can be submitted as the partial assignment is constructed, rather than when a propositionally satisfying assignment is found. This allows the algorithm to identify at an earlier stage that a partial assignment does not satisfy the formula first-order.

CVC Lite uses a strategy of generating conflict clauses based on proof assumptions. The ICS decision procedure performs optimized trial-and-error elimination of irrelevant literals in a clause rather than tracking dependencies on assumptions. On the other hand, Verifun takes an intermediate approach, as it does not produce proofs but retains enough dependency information to enable the production of conflict clauses.

An important challenge in the DPLL algorithm is the selection of splitters. The order in which splitters are chosen can have a substantial influence on the algorithm's performance, as a specific choice may prune a large subtree of the decision tree. SAT solvers, such as Chaff, incorporate decision heuristics that work well on many purely Boolean problems represented in conjunctive normal form (CNF). Leveraging the structure of a non-clausal (non-CNF) formula can guide the search for even more effective outcomes.

However, potential issues may arise when encountering a sub-problem that contains a splitter already in the cache but is ineffective for the specific sub-problem at hand. This becomes particularly relevant when a splitter has been added to the cache due to its effectiveness for a small sub-problem, as it is unlikely to be effective for a significantly larger sub-problem. Furthermore, a poor choice of splitter in a large sub-problem results in more additional work compared to a small sub-problem.

In conclusion, the combination of fast search with CNF clauses and the caching heuristic outperforms either method used in isolation in terms of the number of decisions required, albeit being somewhat slower than the caching heuristic alone.