Significant efforts have been devoted to the functional analysis of software systems, resulting in the development of sophisticated methodologies and tools for verifying and validating the functional behavior of software from the early stages of its lifecycle. However, non-functional attributes such as performance and security have not received the same level of attention. Only in recent years has there been a focus on integrating non-functional analysis throughout the entire software lifecycle, aiming to bridge the gap between the software development process and its non-functional validation.

This paper seeks to address two main challenges in software analysis: integrating functional and non-functional analysis, and automating the incorporation of analysis feedback into software models. The need for integration, particularly at the architectural level, has been emphasized in the recent past. The paper introduces a framework designed to address these integration challenges at the architectural level. The framework aims to highlight the inter-relationships between functional and non-functional aspects that may not emerge from separate analyses. It proposes using an intermediate representation, based on XML, as a common platform for applying both functional and non-functional analysis and for integrating the analysis results back into the software models.

The paper also aims to familiarize software engineers with stochastic process algebra (SPA) as a software model notation. SPA allows for the performance analysis of concurrent systems, incorporating temporal information through continuous random variables. Additionally, the paper introduces the concept of semantic relations, expressed in XML, to transfer analysis feedback from one notation to another and enable integration.

The integration core, outlined in the paper, provides a common representation of various analysis notations through XML and facilitates the integration of analysis results and feedback at the software architecture level. The core establishes semantic relations among entities within different notations, allowing for the integration of analysis feedback between approaches. The paper proposes an incremental approach to framework implementation, introducing missing schemas and rules needed to integrate each pair of analysis approaches.

Furthermore, the paper discusses the potential integration of modeling tools using the Eclipse framework, such as UML modeling tools, and their applicability within the integration framework. It also outlines the possibility of leveraging development environments for languages like Java and C++ integrated with the Eclipse framework to bridge the gap between software models and code.

The paper concludes by emphasizing the XML-based integration core as the foundation for an inclusive integration of different analysis methodologies. It outlines guidelines for embedding new methodologies within the framework and discusses potential future directions, including expanding the scope of the framework to other software lifecycle phases.