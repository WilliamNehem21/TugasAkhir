The ots/cafeobj method is a formal approach for modeling systems, specifying models, and verifying model properties. We present a new approach for verifying the satisfaction of invariant properties in a state machine S based on a simulation from S to another, more abstract state machine in the ots/cafeobj method. We illustrate the proposed method using three communication protocols as examples.

We have been developing the ots/cafeobj method, primarily employing induction on the structure of reachable state spaces of state machines to verify invariant properties, referred to as the induction-based (invariant) verification method in this paper. In the ots/cafeobj method, observational transition systems (OTSS) are used as state machines, and cafeobj, an algebraic specification language and system, is employed to specify OTSS and verify their properties. Several case studies have been conducted, including [14,16,11].

The remainder of the paper is structured as follows: Section 2 provides a description of OTSS. Section 3 introduces cafeobj. Section 4 defines simulations from OTSS to OTSS. Section 5 introduces the simulation-based invariant verification method. Section 6 defines compositions of the simulations from OTSS to OTSS. Section 7 discusses related work, and Section 8 concludes the paper.

These proofs are known as proof scores. The "open" keyword creates a temporary module importing a given module, while the "close" keyword destroys the temporary module. Each fragment enclosed with "open" and "close" in proof scores is referred to as a proof passage. The proof score consists of two proof passages. Cafeobj returns "true" for each of the two proof passages, indicating that...

In addition, we compare the ots/cafeobj method with i/o automata, Z, B, VDM, and Event-B with regard to whether do events (or transitions or actions) have guards (outside of which events cannot occur), preconditions (outside of which events can occur, but their outcomes are not defined), or both. Actions have guards in i/o automata, and events have preconditions in Z, B, and VDM, while Event-B has both guards and preconditions. The effective conditions that transitions have in the ots/cafeobj method are more akin to guards than preconditions, but are not exactly the same. In the ots/cafeobj method, transitions can be implemented in any state, even if their effective conditions do not hold in the state. If transitions are applied in a state where their effective conditions do not hold, however, nothing changes.