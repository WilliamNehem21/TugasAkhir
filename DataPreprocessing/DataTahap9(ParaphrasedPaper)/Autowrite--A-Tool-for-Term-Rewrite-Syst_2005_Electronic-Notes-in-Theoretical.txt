Autowrite was initially created to verify the call-by-need properties of the examples detailed in the referenced work. At that time, there were generally no alternative proofs available for this purpose. It is equipped with tree automata constructions related to call-by-need theory, as well as various operations concerning terms, term rewrite systems, and tree automata.

In the initial version of autowrite, the graphical interface only provided access to call-by-need properties and a few other basic properties. However, the updated version boasts several additional functionalities. Particularly noteworthy is the capacity to directly manipulate (load, save, and combine with boolean operations) bottom-up tree automata. Furthermore, online timing information has been integrated, and significant enhancements have been made to run-time performance through improved data structure choices. These new features have facilitated the testing of numerous properties of the examples outlined in the referenced work, for which straightforward proofs are not readily available.

A ground term is devoid of variables, while a linear term does not contain multiple instances of the same variable. A redex is defined as an occurrence of the left-hand side of a rewrite rule, and a normal form is a term devoid of redexes. The collection of all ground normal forms of a term rewrite system (TRS) denoted by nf(r). An extended TRS (ETRS) is categorized as left-linear, right-linear, or linear if the left-hand sides, right-hand sides, or both sides of its rewrite rules consist of linear terms, respectively. Moreover, an ETRS is termed right-ground or ground if the right-hand sides or both sides of its rewrite rules are ground terms, respectively. An orthogonal TRS, as a left-linear TRS lacking critical pairs, possesses the property that each term has at most one normal form.

We subsequently introduce the approximation mappings s, nv, and gr. For a given TRS r, the strong approximation s(r) is obtained by substituting the right-hand side of each rewrite rule with a variable that does not appear in the corresponding left-hand side. Similarly, the non-variable approximation nv(r) is generated by replacing the variables in the right-hand sides of the TRS rules with fresh variables.

The next step involves verifying that the current term is not recognized by the existing automaton, as it is not in a normal form. Following this, we compute the complement of the current automaton, which identifies reducible terms, and confirm that the current term is recognized by the complement automaton. Finally, we validate that the complement automaton does not recognize the empty language.

The fundamental concept is to steadily compute the automaton. Initially, we construct the rules with a constant left-hand side, thereby establishing the initial set of reachable states. Subsequently, we determine the rules whose left-hand sides encompass the current accessible states, potentially yielding new reachable states. This process continues until no new reachable state is produced.