In the second phase of ensuring reliability, it is essential to implement a small, manually verifiable proof-checker to oversee the proofs, independent of the potentially intricate machinery responsible for constructing those proofs. By employing a proof assistant that adheres to the de Bruijn criterion, a considerably high level of reliability can be attained.

The derivation system functions in a syntax-driven manner, where only one rule is applicable for each sub-goal in a derivation. Consequently, a book constructed using our derivation system is structured in a transparent manner and generally exhibits less ambiguity than texts in the Concrete Mathematical Language (CML). For instance, the derivation rules enforce the explicit specification of all parameters for a constant that is utilized, as well as the absence of free variables in a book.

The Weak Type Theory (WTT) can serve as a starting point for translating mathematical texts into type theory. We demonstrate how an extended version of WTT containing logic (i.e., WTTL) can be utilized to achieve a type-theoretical translation of CML texts that faithfully preserves the structure. This necessitates the addition of definitions for all logical operators and rules to the context of the judgment in type theory.

One approach to accomplish this is to formulate the theorem in the language of a proof assistant and employ its tactics for verification. However, this results in the creation of a distinct proof structure dictated by the proof assistant. Upon completion of the proof, a proof term and the corresponding proof script are obtained, but their relationship to the original proof becomes unclear.

Several works have addressed the introduction of definitions in a pure type system, with some extending this to encompass parametric definitions. The rules presented in Section 3 are derivable from these works. Most existing theorem proving systems support some form of definitions, often used to simulate forward reasoning. Notably, in our case, global definitions are only required to reflect the declarative aspects of proof representation.

In a small-scale case study, we have demonstrated that within currently available systems, it is plausible to opt for an alternative representation of proofs that faithfully mirrors the structure of the informal arguments formalized in the proof. This not only enhances confidence that the formal proof aligns with the author's original intention but also facilitates tracing back which parts of the formal proof correspond to specific segments of the informal argument, thus enhancing maintainability. By commencing the formalization process as closely aligned to the informal representation as possible, the risk of formalization errors is reduced.

In recent years, various proof checking systems including Coq, Mizar, PVS, LEGO, Nuprl, Agda, HOL, and Isabelle have seen successful implementation. Although many of these systems have matured, wider acceptance of proof assistants by mathematicians outside the theorem proving community remains a goal to be realized.

Given the sufficient development of their foundations, the time has come for proof assistants to be embraced as a valuable research tool for mathematicians. To achieve this, the threshold for using them must be lowered, making the formalization process more accessible even to mathematicians who are not experts in type theory. It is our hope that this paper has demonstrated how some of these objectives could be realized within the existing systems.