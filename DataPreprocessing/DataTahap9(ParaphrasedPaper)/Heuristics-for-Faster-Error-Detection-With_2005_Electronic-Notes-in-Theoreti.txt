The paper discusses the concept of black box testing, where the internal structure of the system under test (SUT) is not known. The authors demonstrate the effectiveness of simple coverage metrics in uncovering errors in such scenarios by measuring the coverage of specified system behavior, i.e., the interaction with the environment. They introduce an automated testing method called exploration testing, which uses a deterministic LTS (Labeled Transition System) to explore the behavior of the SUT. The method involves sending inputs, listening to outputs, and restarting the testing based on the current state of the LTS.

The main contribution of the paper is the introduction and comparison of heuristic algorithms designed to quickly reveal errors, as well as demonstrating how to split the problem of designing a specification coverage-aided test selection algorithm. The authors compare the performance of these algorithms by testing them against conference protocol systems with two and three conference protocol entities, aiming to measure the number of test steps needed to identify errors. The tests involve correct and mutated protocol entities, with the mutated entities producing erroneous service.

The paper formalizes LTS and coverage criteria, presents the test engine architecture, and describes the heuristic algorithms in different sections. Three coverage classes (111, 001, and 010) are used, with each class defining specific requirements for covering the LTS. The authors also discuss the decision processes for sending inputs, listening to outputs, and calculating the current state of the system.

The paper highlights the performance differences between algorithms with varying step evaluation functions and coverage metrics, showing that certain algorithms perform better in uncovering errors in the system under test. Furthermore, the authors discuss the limitations and capabilities of the proposed algorithms and provide insights into their experimental setup and results.