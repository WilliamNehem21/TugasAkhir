In order to effectively access the raw syntax of VS COBOL II, it is necessary to convert the syntax diagrams into a representation format for grammars. The chosen format, a form of EBNF in GRK, supports the preservation of layout details, including line-breaks. However, it currently requires further development to ensure the preservation of specific IBM-related elements. Additionally, the need for stronger concepts in language restrictions and generalizations from prior literature is recognized, and efforts to incorporate these concepts are in progress.

The grammar inferred from the re-engineered IBM reference is not directly used for parser generation and grammar export to GDK. Instead, a series of additional transformations are applied to prepare the grammar for deployment, including the resolution of ambiguities, simplification of overly complex productions, and elimination of unsupported permutation phrases. Following these transformations, the final grammar, without DCG-specific adjustments, is exported to GDK, where it generates an operational BTYACC parser.

While grammar inference has seen success in various applications, efforts to infer grammars for programming-language parsers are relatively limited in scope. In addition, the necessity for grammar transformations to facilitate the reuse of raw grammar knowledge, the expression of informal grammar knowledge, and the accurate documentation of grammar evolution is emphasized. The authors express interest in refining their approach to incorporate these inference concepts.

The authors express gratitude for the collaboration with Jan Kort and acknowledge the contributions of GRK to the broader engineering of grammarware. They also acknowledge the contributions of Paul Klint, Steven Klusener, and Chris Verhoef, as well as other grammar experts including Mark van den Brand, Jim Cordy, Kris de Schutter, Jean-Marie Favre, Jan Heering, Niels Veerman, Ernst-Jan Verhoeven, and Joost Visser.