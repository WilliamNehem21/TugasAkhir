There are persistent performance issues in many software systems. To address these, model-based prediction methods aim to address performance problems during the early stages of the design process in order to prevent the implementation of architectures that cannot meet certain performance goals. These methods use architectural models, such as UML models, to create formal analysis models. It is challenging to improve performance properties in isolation, as changes made to enhance performance often impact other system properties, such as cost or maintainability. Therefore, decisions to alter the software architecture must take into consideration other non-functional properties.

In response to the challenge of solving identified performance problems, we propose an approach to automatically optimize the performance of component-based software systems. This involves generating and evaluating design alternatives based on performance analyses of the software architecture. Our approach introduces the use of metaheuristic search techniques, such as random-restart hill climbing and genetic algorithms, combined with formalized performance domain knowledge as heuristics to systematically create and evaluate new architecture candidates.

The paper is organized as follows: Section 2 discusses the optimization of extra-functional properties using heuristics and undirected search. Section 3 presents our specific approach for performance predictions in component-based systems, and describes our current prototype implementation based on the Palladio Component Model (PCM). In Section 4, we present a proof-of-concept case study to demonstrate the behavior of the prototype. Finally, Section 6 discusses related work in the area of model-based software performance improvement, and Section 7 concludes the paper.

The PCM, which is a modeling language designed for performance prediction of component-based systems, allows for the specification of component behavior and performance properties in a parametrized form. This information can be combined with specifications of component assembly, user behavior, and resource environment to create an architectural model. A model transformation into a discrete-event simulation of generalized queueing networks allows for the prediction of various performance metrics for the system and its individual components.

The performance prediction approach can be tailored to account for specifics of component-based systems. The PCM instances include usage profiles, representing the number of users and their input parameters, which can affect system performance.

The automated performance improvement approach involves manipulating the PCM instances to generate and evaluate new candidates. During the search, the system automatically transforms candidates into generalized queueing network systems and analyzes them using discrete-event simulation to assess their performance.

In the future, we aim to integrate more sophisticated metaheuristics that consider multiple criteria and perform multicriteria optimization. Additionally, we plan to incorporate learning techniques into the approach to identify correlations between design options and performance for specific systems, and to add an interactive mode for software architects to evaluate candidates during the search process. Furthermore, we intend to integrate a cost model and extend the prototype with more design change operations and performance domain heuristics.

In summary, our approach provides automated support for exploring the design space of component-based systems and can facilitate the creation of high-quality software designs while saving effort for software architects.