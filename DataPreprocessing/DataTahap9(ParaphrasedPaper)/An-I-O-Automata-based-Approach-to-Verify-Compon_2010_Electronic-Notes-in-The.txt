This paper discusses the implementation of component-based systems using platforms like CORBA, Fractal, or .NET, with a focus on verifying the correctness of assembled components. The authors are particularly interested in components described by interface automata, which specify action protocols for scheduling calls of component actions. They compare their work to related models of interoperability and propose an approach that emphasizes the action semantics in the verification process.

The paper is structured as follows: Section 2 describes interface automata, their definitions, and the algorithm used for verifying compatibility between component interfaces. Section 3 presents their approach for verifying interface compatibility, and Section 4 applies the approach to a case study of a vehicle cycab. The paper concludes with a discussion of the authors' work and future research directions.

The authors use I/O automata, which are labeled transition systems, to model distributed and concurrent systems. They propose an approach for verifying compatibility between component interfaces based on I/O automata and the work of L. Alfaro and T. Henzinger. This approach considers the action semantics in component interfaces, which is a departure from previous models that only consider action signatures.

The authors propose to annotate transitions in an interface automaton with pre and post conditions of actions to enhance the verification algorithm. They formalize adaptations to the approach of L. Alfaro and T. Henzinger in order to introduce action semantics in the interface automata. The composition condition remains similar to the existing approach, where the composition of automata is only possible if their actions are disjoint, except for shared input and output actions.

They apply their approach to a case study involving a vehicle cycab, and through a series of computations and analyses, determine that the interfaces of the vehicle and station components are not compatible.

The paper concludes by outlining two research directions: the development of a verification tool that considers pre and post conditions of actions for checking interface compatibility, and the refinement of composite components to define conditions under which a set of assembled components satisfies constraints of the composite component.

Citation: Becker, Steffen, Sven Overhage, and Ralf Reussner. "Classifying software component interoperability errors to support component adaption." In Crnkovic Ivica, Stafford Judith, Schmidt Heinz, and Wallnau Kurt (Eds.), Component Based Software Engineering, 7th International Symposium, CBSE 2004, Edinburgh, UK, Proceedings, pp. 68-83. Springer, 2004.