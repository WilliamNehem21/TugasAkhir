Automaton (RA) possesses a finite state space; however, it is susceptible to state explosion. To alleviate this issue, various minimization methods have been suggested to convert a timed automaton (TA) into an automaton with significantly fewer states than the corresponding RA (3, 15, 5, 6, 14, 1).

Hypothesis 2.1 assumes that each TA is deterministic, meaning that if tr1 and tr2 are two transitions carrying out the same event from the same location, and are both enabled at the same time, they will lead to the same location and reset the same clock(s).

It is evident that the two expressions define the same timing constraint. In this scenario, setexp can be utilized to obtain the second specification from the first one. The programming of the alarm corresponds to a set event, and the occurrence of the alarm corresponds to an exp event.

Setexp, which transforms a TA a=(l, a, c, t, l0) into a SEA, setexp(a), is carried out in two steps. Step 1 does not modify the structure of a: it replaces the resets of transitions by set events (substep 1a), and rewrites the guards of transitions in the form of order constraints relative to exp events (substep 1b). Step 2 generates setexp(a) that explicitly describes all the possible orders of events, including set and exp events in addition to the events of the alphabet of a.

Lines 3-4 consider the case where exp(ci; k) represents the expected next expiration of ci, and another exp(ci; k') becomes expected after exp(ci; k). In line 3, the assignment models the occurrence of exp(ci; k) and the expectation of exp(ci; k') as the new expiration (k' is indicated by kr(ci)[1]). In line 4, k' is removed from kr(ci) because kr(ci) is a sequence that specifies the values to which ci will expire after its next expiration, exp(ci; k').

Theorem 6.1 asserts the correctness of setexp and suggests the possibility of transforming a study of a system modeled by a TA into a non-real-time form (i.e., setexp(a)), thereby enabling the adaptation of non-real-time study methods. This concept has been employed in conformance testing (7, 10) and supervisory control.

Property 6.2 is more compelling than property 6.1 as it does not restrict the modification of the constants of guards by multiplying all of them by the same value. Determining a class of TAs in which property 6.2 holds is non-trivial, and we aim to explore it in the near future.

Properties 6.1 and 6.2, as well as Remark 6.1, demonstrate the advantage of using SEA instead of RA. In practice, unlike RA, the state space of SEA does not increase with the magnitudes of the constants used in timing constraints.