The execution of the PEMA involves two main phases. In the initial mining task, the mining agent divides the database into non-overlapping partitions based on the number of available data sites in the system. For relatively small databases, this process results in a specific number of transactions being evenly distributed across the initial partitions, with any remaining transactions being allocated to a final partition. This approach aims to account for the impact of the initial approximation. The paper assumes that the database is situated on secondary storage and that the total available memories are predetermined.

The proposed system operates dynamically, with the data agent performing horizontal segmentation or partitioning of the database when the average transaction length is small. For large datasets with lengthy transactions, the data agent uses vertical partitioning to enhance the mining algorithm's performance. This hybrid approach, which combines horizontal segmentation, vertical partitioning, and incremental mining, represents an innovative method put forth in the paper. This approach becomes essential as real-life databases are typically fragmented across multiple locations. Notably, the PEMA can be utilized to mine both real and synthetic datasets, regardless of their existing distribution across various data sites. Additionally, it can dynamically and vertically partition large datasets with long transaction lengths. This flexibility allows the PEMA to adapt to the available number of mining sites. Moreover, the PEMA can perform both global mining and partial global mining, wherein a data miner is only interested in specific parts of the data or specific data sites. The study presented in section four demonstrates the PEMA's capability in achieving partial global mining.

The experiments aimed to analyze the impact of the number of data sources, the size of datasets in terms of records, and the size of datasets in terms of items. The experiments were conducted on four virtual machines, and the performance metrics examined included response time, communication overhead, and the relative performance of the PEMA algorithm compared to other existing algorithms, such as Apriori, AprioriTFP, and FP-Growth. Subsequent experiments were performed using the datasets Connect4 and Covertype, with varying minimum support and confidence thresholds. The results indicated that the PEMA outperformed the other methods, especially at a 75% minimum support threshold for the Connect4 dataset. The experiment also demonstrated that the size of messages exchanged improved as the minimum support threshold increased. Throughout the experiments, the PEMA exhibited strong performance, though a slight drop was observed as the minimum support threshold increased.