The primary concept in a time-dependent network is that the time delay of a link is contingent on the specific time when the link is utilized. This approach is natural in various scenarios, such as the transmission of data packets over the internet or the movement of cars within a road network. It accounts for the phenomenon that the delay induced by a link hinges on the path taken to access that link. Generally, solving shortest path queries on such networks is challenging, but certain important special cases enable the use of rapid algorithms. These types of networks have been studied in existing literature, as referenced in [7,8]. The application of this type of modeling for routing passengers is described where the main focus is on travelers who utilize cars within the road network.

The authors investigate the feasibility of computing optimal itineraries for the German railway system. This issue is also illustrated in [7,8]. They propose several heuristic runtime enhancements that facilitate swift responses. Our modeling aligns with these heuristics, as they can be readily integrated into the time-dependent algorithms. We anticipate that our modeling and algorithmic approach will lead to substantial improvements in runtime, thereby accommodating larger or more detailed networks (including local buses, extending to the entire European network). Due to the lack of real-world data, our approach is theoretically compared against existing models. The network modification considered in [7,8] solely modifies the station element of the utilized graph, and our proposed algorithms can easily adopt the acceleration techniques outlined there.

Through basic calculations regarding problem sizes and modern hardware capabilities, it appears feasible to precompute the responses to all potential queries and store the outcomes on a hard disk. If the network size permits this, it can be a viable alternative to an algorithmic solution, particularly when the network is not overly large. However, this approach still requires rapid itinerary determination in a preprocessing phase.

The authors assume the presence of a set, denoted as "t," which represents time, such as real numbers, integers (e.g., seconds since 1 January 2000), or the set {0:00, 0:01, ..., 23:59}. The only assumption made is that there is a complete ordering of the elements in "t." Sometimes, an additional assumption is made that an addition operation is defined over "t."

These definitions impose certain limitations; for instance, at a station, it is not possible to differentiate between continuing on the same train and making a transfer. Moreover, travelers are not allowed to use other means of transportation, such as walking 200 meters from one station to another. In section 5, these issues are addressed, allowing for the imposition of restrictions on the maximum number of transfers or accounting for the time required to walk inside the station as part of a transfer.

It should be noted that there are alternative models to the one presented. For example, one could deviate from the edge cycle at a single station and explicitly have an edge if a passenger can actually change trains, as suggested by a combination of arrival/departure events. This model generally involves a larger number of edges but allows for a more detailed representation. For instance, it ensures that walking inside the station actually facilitates the transfer.

In this section, the terminology for time-dependent networks (or graphs, which are essentially equivalent) is developed, and the correctness of a fastest path algorithm applicable to our specific situation is proven. We omit a discussion of the feasibility of shortest path queries in a more general setting, which allow for negative delays and/or non-monotonic functions. In this more complex context, specifying a waiting policy becomes important, and discussions on this type of network can be found in [7,8].

The domain of time is a linearly ordered set denoted as "t." In this section, no assumption is made regarding the existence of an addition operation defined on "t." Typical examples of the set "t" include real numbers and integers, but finite sets also present interesting scenarios.

The "earliest arrival" question for a source node "s," a destination "d," and a departure time "t" seeks a timed path "p" from "s" to "d" with the minimal arrival time. Similarly, the "latest departure" question is well defined when an upper bound for the arrival time is fixed, whereby it seeks a path with the latest departure time at "s" under the condition that the arrival time does not exceed the specified arrival time.

Given an itinerary "i," a timed path "p" is identified in "g" in a manner that ensures its arrival at a specific station does not exceed that of "i." Therefore, "p" is a timed path that reaches the destination no later than "i" does.

A well-known potential technique involves modifying the value used in the priority queue by a lower bound on the remaining path length to the destination. When the network is embedded in the plane, this method can be an appropriate multiplier of the Euclidean distance to the destination. Another method to reduce the size of the examined part of the graph is to omit edges and nodes that are not relevant to the current "s" and "d." In extreme cases, precomputed shortest paths for all possible choices of "s" and "d" can be stored, enabling the on-the-fly disregard of irrelevant edges, allowing the algorithm to solely explore the path itself. This method, however, requires minimal memory for storing the precomputed result and necessitates easy evaluation of whether a link can be disregarded. A good example of this technique is the pruning strategy used in [7,8].

The time spent by the algorithm maintaining the priority queue is not considered in this section. There are various existing results in literature detailing how to obtain rapid priority queues in this context, such as utilizing the fact that edge weights are integers. This type of priority queue can be used for time-dependent networks as well, particularly when time is restricted to integers. Additionally, it is noted that even a more substantial modification to the shortest path algorithm proposed in [7,8] can be readily incorporated into the time-dependent algorithm.

A modular approach involves implementing the link-traversal functions completely independently of each other. This implies having a procedure that yields the value "fuv(t)" given "t," which can be achieved with log2(k) comparisons, assuming "k" represents the number of connections from "u" to "v" (i.e., k=|cuv|).

Let "d" represent the out-degree of the node in the time-dependent network corresponding to "a." To circumvent space overhead, all the outgoing events of a station "a" can be placed into an array sorted by their departure time. This can be done by first inserting "d" such events (referred to as primary entries), leaving "d" empty spaces, then placing the next "d" events, and so forth. For each outgoing direction, the next event after "t''" is inserted into the empty entries of "a" (referred to as secondary entries). All primary entries are placed into one balanced search tree.

Despite the last presented algorithm being the fastest concerning asymptotic worst-case running time on the unit-cost RAM, it may not be the fastest in practice. Factors such as the potential to save constant factors in the running time are difficult to predict and significantly impact actual running times. Moreover, the performance on a real machine can be heavily influenced by cache faults. In this regard, the last algorithm may not be ideal, potentially leading to a cache miss for every item placed in the priority queue, whereas list lookup could benefit from the locality of the used entries, especially if the priority queue is small enough to fit into the cache.

Alternatively, instead of using an array with primary and secondary entries, a persistent linked list can be considered as a more efficient approach which changes as time progresses within the preprocessing. This method has similar asymptotic behavior and can be easily extended to the exploration saving idea detailed in section 4.6.

The algorithmic problem thus far assumes that the transfer between trains takes no time and incurs no cost, which is unrealistic. Incorporating some time for walking inside the station in the itinerary, thus extending the network as minimally as possible, is an attempt to create a more realistic representation of transfers. Each platform is considered to be a station in its own right, connected by walking links that abide by either the geometry of the station or encompass a star to the station concourse. The link traversal functions for the walking links feature a constant delay, i.e., they are of the form f(t) = t + c, where "c" reflects the walking distance (this assumes that addition is defined for the set "t").

The aforementioned modeling of train changes can also be utilized to count the number of changes. Without further extending the network, changes of trains are only considered when it involves moving from one platform to another. For a more precise modeling, virtual platforms can be introduced, with one for every train line, enabling the exclusion of train changes within a single train line. It is noteworthy that this essentially converges back to the explicit network if every train has to be regarded as a train line of its own.