Software visualization (SV) tools are designed for use in the early stages of a programmer's learning process to teach fundamental programming concepts, algorithms, and the software development cycle. These tools convey important information through graphics or animations. While visual representations are thought to be beneficial, previous assessments of SV tools have suggested that they do not significantly improve learning outcomes. However, certain experiments have indicated that they motivate students when learning algorithms or basic programming skills.

In a study by Ben-Bassat Levy et al., the pedagogical benefits of Jeliot 2000 (the predecessor to Jeliot 3) were compared with the use of an integrated development environment (IDE), TurboPascal, for tracing programs among high school students in an introduction to programming course. The study found that while Jeliot 2000 provided a viable working model for program execution that students could understand and follow, it did not benefit the strongest and weakest students, as it was either too simple or too complex for them. Another experiment gathered qualitative data from 35 students using Jeliot 3 in a second programming course, revealing challenges for students with varying levels of programming experience. Novice students were more positive about using Jeliot 3.

Kehoe et al. suggested that a different approach was needed to demonstrate the effectiveness of algorithm animations, hypothesizing that the pedagogic value of such tools would be more apparent when used in an interactive setting, such as a homework assignment and accompanied by instructional support. A meta-analysis emphasized the significance of how animations are administered to students rather than the content being visualized.

Observations during lab sessions revealed that complete novice students exhibited a common behavior, with their primary goal being to pragmatically complete the course by solving assigned tasks, and their secondary goal being to understand how their solutions were achieved. Both groups of students found Jeliot 3 useful for debugging their programs, despite encountering difficulties in understanding compound assignments and the steps taken in its animation. It was also noted that the transfer of knowledge from the tool to the student was not always successful, even after explicit explanations of the animations.

In conclusion, while students found Jeliot 3 animations difficult to understand initially, they nevertheless found them useful for debugging their programs. Furthermore, most students found Jeliot 3 easy to use and continued to use it.