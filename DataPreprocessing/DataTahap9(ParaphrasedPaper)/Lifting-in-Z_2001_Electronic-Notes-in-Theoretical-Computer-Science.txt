The use of formal notations such as z is beneficial for creating clear specifications and proofs of those specifications. This paper explores a specific style of specification that is particularly relevant to control theory and real-time specification applications. The notation defined in this paper allows for the precise description of concepts in these fields without excessive complexity or notational clutter. While the defined notation has been used by practitioners in these fields for some time, we demonstrate that it can be formally defined within the draft standard z, and that the resulting specifications are amenable to proof.

The capability to define clear specifications and undertake proofs using formal notations like z is attributed to the rich language of pre-defined concepts and types available, which allows for concise, precise, and accessible specifications. Although classical first-order predicate logic can be used to express everything that can be written in z, the resulting specifications would be less approachable.

Several works related to the specification of timing properties in z are discussed by Duddy et al. In their discussion on lifting, they highlight the importance of using an appropriate collection of function operators when describing the properties of continuous timed histories to write understandable specifications. Additionally, a less algorithmic approach, described by Brien et al., achieves similar results by defining a family of lifted functions, operators, and relations, which avoids the use of points in the definitions whenever possible to simplify proof.

In this paper, we construct the necessary apparatus for general lifting in z, drawing inspiration from different approaches presented earlier. We also demonstrate two applications of the lifting capability â€“ making abstract real-time specifications more concise and readable, and formalizing algebraic reasoning methods used in process control engineering.

We show that z, with lifted operators as defined above, can be used to solve problems in process control theory, simplifying algebraic proofs significantly. Additionally, by formalizing control theory principles in z, we enable checking and analysis using existing z tools, contrasting with previous work on modeling embedded systems in traditional formalisms such as petri nets, state-machine models, state-transition automata, and interval calculi.

Finally, the paper aims to bring to a wider audience material that was previously only available in unpublished technical reports, reviewing previous descriptions of lifting in z where results from one algebra were lifted into another.