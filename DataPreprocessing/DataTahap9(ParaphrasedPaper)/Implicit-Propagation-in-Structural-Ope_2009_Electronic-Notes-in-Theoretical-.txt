In contrast to the transition system specification in process algebra, a structural operational semantics (SOS) of a programming language typically involves auxiliary entities such as stores and environments. When formulating SOS rules, these auxiliary entities often need to be carried over unchanged from the premises to the conclusions. The conventional method to achieve this is to explicitly propagate these entities using variables. However, explicitly referencing all such entities in each rule can become cumbersome and can limit the direct reuse of rules in different language descriptions.

This paper introduces a novel interpretation of SOS rules, where each auxiliary entity is implicitly propagated in all rules in which it is not explicitly mentioned. This new interpretation offers significant simplification of the notational representation of SOS rules and enhances their reusability. The proposed approach builds upon the foundational principles of modular SOS but eliminates the notational complexity associated with grouping auxiliary entities together in labels.

The paper focuses on enhancing the pragmatic aspects of SOS, assuming familiarity with the standard framework. It also discusses the ordering of premises in abbreviated rules, highlighting how it affects the evaluation of sub-expressions. Furthermore, the paper introduces the exception convention to enable implicit propagation of exceptions, while leaving the propagation of the environment explicit. It notes that these conventions have not been widely adopted in SOS descriptions of other languages.

Implicit propagation of unmentioned variables, a concept familiar in imperative programming languages, has been utilized in various semantic frameworks. The paper's contribution lies in formally incorporating implicit propagation within the structural style of operational semantics. It outlines the process of interpreting SOS specifications as modular SOS (MSOS) specifications to enable implicit propagation and provides examples to illustrate the benefits of reformulating SOS specifications using implicit propagation.

Additionally, the paper discusses the limitations of implicit propagation in the context of dynamic semantics involving concurrency or interleaved effects. It also acknowledges the potential for using both styles of semantics in the same language. The paper concludes by summarizing its contributions and outlining plans for future development.

The paper also delves into the use of SOS specifications to define semantic relation symbols and their inductive definitions. It contrasts the representations of transition system specifications in process algebra with those of programming languages and introduces the concept of positive rules. Lastly, it discusses the generation of semantic relation symbols in an I-MSOS specification and the unique determination of variables based on the argument sorts.

Overall, the paper offers a novel perspective on SOS rules, presenting a more efficient and reusable approach that could potentially advance the field of operational semantics in programming and specification languages.