There is a scarcity of advanced tools for visually representing problem-solving processes in automated deduction and proof searches. On the contrary, the field of constraint programming has a rich history of developing information visualization techniques to aid both programmers and end users in understanding problems, searches, and solutions. This paper explores the potential adaptation of concepts and tools from the constraint programming domain for use with automatic theorem provers.

The focus of this investigation is not on interactive theorem proving, as the applicability of visualization ideas from constraint programming is limited in this area. It is acknowledged that visualization plays an important role in interactive theorem proving, but it is not the primary focus of the current study.

The paper also addresses a specific problem involving the movement of trains along railway tracks, and emphasizes that the constraint graph only represents the existence of constraints without detailing their content. This abstraction level can reveal the relationships between different parts of a problem and illustrate the pathways for information transfer by propagators associated with constraints. Notably, it is independent of the problem's satisfiability.

During the search process, the constraint graph can be dynamically visualized to show variables with assigned values, reduced domains, and the decision-making progress. This animated representation aids in forming a mental image of the search in progress and contributes to understanding the effect of variable choice heuristics and the impact of constraints.

The visual metaphor for representing constraint graphs often involves depicting vertices as circles or spheres and edges as straight lines, with some variations in representing vertices to include text. The layout of constraint graphs may reveal clustering and symmetry but can also result in cluttered displays. Additionally, visual representation of search trees is an integral part of constraint programming toolsets, offering static or dynamic views of the search process.

While some aspects of visualizing search trees can be easily modified, representing complex processes such as backjumping in modern SAT solvers poses significant challenges. The paper discusses the analogies between decision variables in theorem proving and primitive function symbols in the problem's language, as well as the domains of decision variables and their interpretations in proof problems.

The paper also highlights the open question of effectively displaying the graph of derived formulae and emphasizes the importance of visualization tools in understanding both the static semantics of logical formulae and the search process. It suggests that visualization tools offer the potential to achieve better levels of abstraction and intuitively showcase key features.

The discussion concludes by noting that there are remaining challenges in utilizing visualization for performance debugging, understanding the user or programmer's information needs, and effectively displaying large numbers of derived formulae.