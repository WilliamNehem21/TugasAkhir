The manipulation of map expressions through direct algebraic methods may not feel intuitive to humans compared to developing inferences in first-order logic, as it may seem too machine-oriented for manual exploitation. However, using a representation based on labeled graphs drastically changes this perception by enabling the abstraction of non-essential features and providing an intuitive visual handling of map specifications. Various approaches with this perspective have been proposed in previous works.

In our research, we take the initial step towards creating an automated tool for mechanizing visual map reasoning. To achieve this, we utilize agg (algebraic graph grammar), which offers a visual programming platform for graph transformation-based applications. These applications are described using graph grammars, which comprise an initial graph and a collection of graph rewriting rules. agg facilitates the visual manipulation of both the initial graph and the rewriting rules, allowing for formalization of the graph grammar and subsequent manipulation of the initial graph.

Assuming that ' is a conjunction of atoms (9 x1)(9 xk)(l1^^ln) and vars(') represent all variables occurring in ', with x1, xk in vars(') and li in the form xli pli yli, where xli, yli (ranging over the domain u of discourse) are variables and pli is a map expression of l, it is evident that free variables may be interspersed within existentially quantified variables.

It is important to note that variables x, y, and p are instantiated with specific attribute values when the left-hand side graphs are applied to a particular graph. The applicability of rules is determined when p is instantiated with p1\p2 (first rule), p1;p2 (second rule), and p^ (last rule), where p1 and p2 denote general map expressions. Their applicability is checked using Java methods, namely proj1 and proj2, which return the map expressions p1 and p2, respectively.

In this paper, we have presented an initial attempt to implement graphical techniques for map representation and reasoning. An intriguing future development would involve designing and implementing a more advanced proof assistant that can perform backtracking or suggest the "better" rule for application. The realization of these features could be seen as the first step towards creating an automated map reasoning tool based on graph transformation techniques.