The operational transformation (OT) approach has been suggested as a solution to the divergence problem in real-time groupware. This technique involves an algorithm that adjusts a previously executed operation from another site based on local concurrent operations in order to achieve convergence. OT has been implemented in various group editors and replication-based groupware systems and offers several advantages, such as independence from replica state and enabling unconstrained concurrency.

While OT has been successful in managing simple collaborative objects like string objects, dealing with complex objects, such as filesystems or XML documents composed of multiple primitive objects, poses challenges in formally designing their OT algorithms due to the multitude of updates and synchronization scenarios. To address this, we propose a compositional method for specifying complex collaborative objects in this paper. Our method allows for the design of an OT algorithm for a composite collaborative object by reusing the OT algorithms of component collaborative objects. This enables the incremental combination of correct small collaborative objects to build more complex ones that also satisfy convergence conditions.

The paper is organized as follows: Section 2 provides an overview of the OT approach, Section 3 presents the formalization for specifying collaborative objects and OT algorithm ingredients, Section 4 introduces two constructions for composing collaborative objects in an algebraic framework, and the conclusions and future work are presented in the final section.

In order to maintain convergence, an OT approach has been proposed, which involves an application-dependent transformation algorithm for merging concurrent updates. This algorithm is denoted by a function "it" called inclusion transformation.

We demonstrate that it is possible to achieve this method using a boolean function "poss" that indicates the conditions under which a method is enabled. The OT algorithm is denoted by the function symbol "it," which takes two methods as arguments and produces another method.

Furthermore, the paper describes how to build complex collaborative objects from components using two kinds of composition, inspired by the work of Goguen et al. We establish a theorem stating that the consistency property can be obtained by composing consistent components to produce a consistent composite object, provided that the components are independent.

As a first step towards providing a compositional method for specifying and verifying complex collaborative objects, we propose two constructions for composing collaborative objects. The first construction combines several components without allowing them to interact, while the second enables components to communicate through a shared part. We also provide sufficient conditions for preserving certain properties by both constructions.

Future work includes investigating the composition of arbitrary numbers of collaborative objects using dynamic composition, studying the semantic properties of the compositions proposed in the paper, and implementing these compositions in the tool called Vote.