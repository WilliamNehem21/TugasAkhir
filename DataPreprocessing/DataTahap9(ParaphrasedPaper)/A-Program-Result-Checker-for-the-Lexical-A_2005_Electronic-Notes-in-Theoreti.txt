Theoretical discussions have proposed program result checking as an effective approach for constructing formally correct compiler front ends. However, its practical application to real-life compilers has not been demonstrated. The success of result checking in real-life scenarios is critical to establish it as the preferred method for implementing compilers correctly. This study presents a formal specification and verification of the lexical analysis of the GNU C compiler within the theorem prover Isabelle/HOL using program checking. The results demonstrate that formal specification and verification techniques are capable of handling real-life compilers.

Program checking is a method aimed at improving program reliability, assuming the existence of a black box implementation computing a function. A checker for the function verifies its output against a given input.

The lexical analysis of the GCC compiler is verified by recalculating its results using a formally validated implementation and comparing it with the output of the GCC. This verification process involves specifying the lexical analysis within the Isabelle/HOL theorem prover and discussing the most pertinent parts of the specification. To ensure that the checking architecture integrates well with the GCC system, simple modifications of the GCC code are made to extract the computed tokens and their values.

Previous work, such as the Verifix project, has employed program checking to guarantee the correctness of compiler implementations, particularly in the context of frontend verification. The program checking approach has also been utilized in various projects focusing on correct compiler implementation, including backend optimizations of the GCC. Moreover, formal verification of compiler frontends has been explored in different contexts, such as in the verification of lexical analysis using mechanical theorem provers like Nqthm.

The study sets up an architecture for checking the results of frontend computations, specifically for lexical analysis, and demonstrates how to specify the task of scanning tokens within Isabelle/HOL. By minimally modifying the C source code of the GCC system, the study shows that program checking can effectively handle large, non-academic compilers widely used in practice. The proposed checking method is not limited to the GCC or the C language and can be applied to other compilers as well. Future work aims to connect the checking architecture with related research providing a formal proof in Isabelle/HOL for the generation of a functional lexical analyzer from a regular grammar, offering a completely verified result of the lexical analysis.