The various software modules comprising a system are not stand-alone entities; rather, they require interaction following a particular coordination protocol to achieve a shared objective. However, encapsulating this coordination within individual modules hinders their reusability, independence, maintenance, and evolution. Aspect-oriented programming (AOP) has shown promise in addressing such crosscutting concerns, including coordination, by separating it from computational modules and encapsulating it externally. This paper details the implementation of coordination protocols outside computational modules using general-purpose aspect-oriented programming languages.

Software modules within a system need to communicate according to a coordination protocol to integrate heterogeneous modules into a single application. Aspect-oriented programming, particularly in component-based systems, has demonstrated potential in addressing crosscutting concerns by separating coordination from computational modules. The paper then outlines an example of an auction system and justifies coordination as a crosscutting concern. It provides background on aspect-oriented software development and explains how coordination can be handled as an aspect, demonstrating a specific implementation using Jasco. The paper also discusses the implications of the approach and provides reflections on related work, as well as conclusions and areas for future research.

Furthermore, the paper explores the use of pointcuts to inject crosscutting concerns at specific execution flow points within software modules. It introduces Jasco as an aspect-oriented extension to Java and explains its concepts of aspect beans and connectors. The paper also discusses how pointcuts and aspects can be applied to transitions in state machine semantics, emphasizing the benefits of encapsulating coordination concerns into aspect-oriented modules. Additionally, it explores the challenges and potential solutions related to aspect-oriented programming, emphasizing the impact on system modularization, development, maintenance, and evolution.

The paper concludes by discussing the potential of using aspect-oriented programming to encapsulate coordination concerns and its impact on system maintenance, evolution, and reusability. It also highlights the application of design patterns and coordination models in addressing coordination problems and suggests avenues for future research and development in this area.