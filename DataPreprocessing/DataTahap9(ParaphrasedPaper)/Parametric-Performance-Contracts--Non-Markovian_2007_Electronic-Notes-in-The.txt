Despite ongoing hardware advancements, software systems still frequently encounter performance issues. One potential solution for this issue within component-based software architectures is to predict performance early in the development process by combining performance specifications of prebuilt components. However, many existing methods in this domain overlook various influential factors on component performance. In this paper, we propose a method to compute the performance of component services by accounting for external services and different usage patterns. We employ stochastic regular expressions with non-Markovian loop iterations to model the abstract control flow of a software component, and probability mass functions to detail the time consumption of internal and external services. An experimental evaluation comparing our approach's results with measurements on a component-based webserver reveals that, using measured data as inputs, our method can predict the mean response time of a service with less than a 2 percent deviation from actual measurements.

Specifically, in order to accurately specify the performance of a component, it is imperative to consider multiple external influences, as components must be deployable by third parties and may utilize external services, diverse hardware, operating systems, middleware platforms, and interaction with various user groups. Existing approaches often fall short in considering all of these factors.

Our approach is precise, as it leverages discrete probability mass functions to model the time consumption of both internal and external computations, and is also compositional and parametric. Furthermore, we demonstrate that our method can be used to check performance contracts for component services specified in the Quality of Service Modeling Language (QML).

The main contributions of this paper are the introduction of a new concept for modeling loops with probability mass functions and the presentation of an experimental evaluation of our approach on a prototype component-based software system. Additionally, the paper is structured as follows: Section 2 details our modeling approach based on service effect specifications, stochastic annotations, and calculations; Section 3 delves into the description of our experimental evaluation and presents the results; Section 4 discusses related work; and Section 5 concludes the paper and outlines future research directions.

Overall, our approach aims to provide comprehensive support for design decisions during the early stages of a software system's lifecycle, particularly with regards to assessing the timing and resource efficiency of a component-based software architecture. This is essential for avoiding the costs associated with redesigning the system after implementation commences. In our future work, we plan to investigate the applicability of our approach on existing black box components, explore the time complexity of our calculations, and conduct further experimental evaluations to validate our method.