One approach for recovering design information involves the use of logic meta programming, which employs logic programming to pose queries on a program. By utilizing a library of logic rules defining high-level relationships between program elements under specific conditions, developers can gain insight into a program by querying it for such relationships.

Our recent exploration has focused on creating pattern detection rules based on behavior using an ad-hoc model derived from execution trace information. However, we believe that a more theoretically-grounded model based on abstract interpretation research could offer a superior alternative. We seek feedback from the abstract interpretation community regarding this position. To provide context, this paper elaborates on the current lmp approach in Section 2, offers a detailed description of a specific design pattern in Section 3, contrasts the current structural-based pattern detection approach with our proposed behavioral-based approach in Sections 4 and 5, and considers the potential uses of abstract interpretation in Section 6.

Logic meta programming utilizes a Prolog-like language for reasoning about object-oriented programs and has been applied to various problems in object-oriented software engineering, including reasoning about object-oriented design, checking programming patterns, supporting software application evolution, and verifying architectural model conformance. We used the Soul logic meta programming system to conduct experiments on Smalltalk programs, and its generic nature allows for application to most class-based object-oriented programming languages, such as Java.

Logic queries are used to verify hierarchical relationships between classes and to detect classes that are part of another class's hierarchy. One example logic query verifies if the "string" class inherits from the "object" class, while the second query finds all classes directly inheriting from the "object" class. The logic evaluator attempts to logically prove the predicate for the given arguments in the first query, while it returns all the values for the variable ?x that satisfy the predicate in the second query.

Furthermore, we are exploring approximate reasoning in parallel to achieve more flexible software pattern detection. Initial experiments have shown that approximate reasoning helps overcome minor discrepancies between the necessary facts to prove a pattern's existence and the actual program facts. Future research may involve investigating how these two approaches can be conceptually combined: approximate reasoning about approximate program semantics.