This academic paper discusses the use of clocks in signal compilation. A clock is associated with the presence of a specific input variable and determines the instants when computations take place. In this context, a variable serves as a data-flow conveyer and, through its clock, as a sporadic event used to control behaviors.

The paper emphasizes the importance of clocks in specifying control in signal programming, as they indicate when computations occur. Clocks are commonly used in signal, with any object related to a computation being associated with clock operators. However, the synchronization induced by the under-sampling when operator also involves boolean variables, leading to more complex control behaviors.

The paper outlines an algorithm for building partition trees and iteratively processing synchronization choices for clock variables. The process involves computing definitions and ensuring the respect of dependencies in computations. The specification is declared to be endochronous if a single tree is obtained, with the master clock being the root. If no suitable expression is found, the paper presents a rewriting system to handle incomplete cases.

Before delving into technical details, the paper provides an overview of the main aspects of the signal compilation process and fundamental concepts related to clock calculus. It explains the formalization of clocks as sets of instants and their use as propositional variables to encode the boolean part of specifications, clarifying the differences with the traditional encoding into z/3z.