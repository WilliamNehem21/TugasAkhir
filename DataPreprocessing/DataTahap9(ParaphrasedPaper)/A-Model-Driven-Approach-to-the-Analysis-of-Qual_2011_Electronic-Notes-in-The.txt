The style of service-oriented architecture (SOA) is widely utilized in the development of distributed applications, resulting in an increasing number of available web services. As a consequence, it is essential to consider not only the functionality, but also the non-functional properties when selecting the best service. Bass suggests the use of quality scenarios to precisely define the application's quality attributes.

To achieve precise optimization in selecting the best service from a set of quality combinations, it is necessary to define an optimization strategy. However, it may not always be possible to guarantee compliance with quality scenarios at runtime, due to external factors such as failures in services offered by third parties or defects in legacy applications that implement the supplied services.

The paper is organized as follows: Section 2 examines the concept of self-adaptability, Section 3 provides an introduction to the case study used for validation, Section 4 presents the proposal, Section 5 describes the experiment conducted to validate the proposal, Section 6 discusses other proposals based on quality attributes, and Section 7 concludes with the results and termination of the proposal.

Self-adaptive systems are capable of adjusting themselves to changes in running conditions without or with minimal human intervention, thus ensuring reliability, robustness, and availability. The case study focuses on the property registry business process, specifically the landlord risk scoring activity, which is critical to the uninterrupted operation of the system.

The utility repository contains information related to adaptation-objective preferences, and when a failure on the quality attribute scenarios is detected, alternative services are evaluated to replace the faulty service. The self-adaptive system model introduces virtual services to facilitate system self-adaptation, seeking to free the consumer from a specific service and ensuring compliance with quality scenarios.

The proposal concentrates on uncertain quality attributes, such as response time, availability, and reliability, and suggests a method for finding and analyzing potential points of self-adaptation in software architecture during the design stage.

Lastly, the proposal introduces an extended architecture description language (ADL) called ABC/ADL, used by a reflective-based middleware architecture called PKUAS for making self-adjustments in the implementation. Some limitations of this proposal include the use of EJB components and the potential for the system design to differ from the proposed architecture in implementation.