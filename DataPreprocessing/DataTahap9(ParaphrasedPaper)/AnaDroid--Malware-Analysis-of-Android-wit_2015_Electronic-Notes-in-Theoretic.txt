The traditional approach to malware detection faces several challenges, including the high cost of analysis, the limited ability of automated analyses to identify specific behaviors, and the subjective nature of determining whether a behavior is malicious in the context of a specific application. In response to these issues, we suggest an alternative method called semantic-based program analysis with human involvement. This approach allows analysts to use semantic predicates to search and filter analysis results and make informed judgments about the maliciousness of behaviors. We propose a tool that enables analysts to dynamically adjust the speed and precision of the analysis, inspect suspicious states of execution, and generate permission and profiling reports to aid in identifying common malicious behaviors.

To gain a detailed understanding of how security-critical resources are utilized, we advocate for statically analyzing applications to determine how data is accessed, where sensitive data flows, and what operations are performed on the data. Our proposed approach of semantic-based program analysis with human involvement aims to systematically characterize the behaviors of mobile applications and addresses the limitations of automated malware detection. We provide a detailed analysis of our approach, including the syntax of object-oriented bytecode, techniques for analyzing android-specific issues, tool implementation, related work, and a conclusion.

In addition, we discuss the technical aspects of our proposed approach, including the abstract CESK* machine used for analyzing object-oriented bytecode, the analysis of specific features such as multiple entry points of android apps and reflection APIs, and the tool that provides analysts with a library of semantic predicates to facilitate search and filtering of analysis results. Furthermore, the proposed approach allows for dynamic trade-offs between speed and precision and enables analysts to statically inspect details of every suspicious state of execution to make informed judgments about the malicious intent of the application. Moreover, we outline the generation of permission and profiling reports to aid in identifying common malicious behaviors and demonstrate the effectiveness of our approach through case studies.

The paper is organized as follows: Section 2 presents the syntax of object-oriented bytecode and illustrates a finite-state-space-based abstract interpretation of the bytecode. Section 3 discusses analysis techniques to address android-specific issues, and Section 4 presents the implementation of the tool with user-supplied predicates. Section 5 discusses related work, and Section 6 provides a conclusion.

Furthermore, we discuss the application of dynamic taint analysis in identifying security vulnerabilities in Android apps, as well as approaches designed to prevent privilege escalation. However, we note that these approaches typically overlook implicit flows raised by control structures to reduce run-time overhead. In response, we propose a human-oriented semantic-based program analysis for Android apps, which systematically and quickly characterizes behaviors and provides analysts with the ability to make informed judgments about the malicious intent of the application. Additionally, the technique includes the generation of permission and profiling reports to assist analysts in identifying common malicious behaviors, as demonstrated by case studies in the extended report.