Recent years have seen a significant rise in the interest and adoption of component-oriented software construction approaches, with the assembly of large software from pre-built, plug-in compatible software components leading to shorter development cycles. This trend has been underscored by the establishment of industry standards such as EJB, CORBA, .NET, and web services infrastructures. Furthermore, it is emphasized that component orientation is not only relevant to enterprise systems, but also benefits embedded systems, particularly programmable logic controllers (PLCs) used in industrial automation processes.

The paper provides an overview of the authors' approach in section 2, with a focus on the treatment of data-control flow dependent white box components in section 3. The authors highlight the importance of abstract interpretation as a theory of sound approximation of program semantics, noting that while it can theoretically deliver perfect results, the exponential growth in the number of possible paths for conditional jumps and loops necessitates the merging of intermediate data at certain program points to safely approximate results.

The authors introduce the concept of abstract interpretation for approximating worst-case execution time (WCET) of real-time software, noting that control flow analysis is necessary to identify the worst-case scenario, and low-level analysis is essential for determining timing behavior, especially in modern CPUs. Furthermore, they point out that there are different approaches for predicting nonfunctional properties of component-based systems, with a focus on analyzing data flow-control flow dependencies between components.

The paper concludes by presenting the authors' application of their approach to analyze data flow-control flow dependencies between components using abstract interpretation, with a practical example from the PLC domain. The authors express their intention to extend their abstract interpretation-based approach to achieve tighter predictions and to develop a method for deriving data-context dependent execution time information in a highly automated manner, with the aim of reusing this information during the prediction of WCET properties without reanalyzing the components' structure.