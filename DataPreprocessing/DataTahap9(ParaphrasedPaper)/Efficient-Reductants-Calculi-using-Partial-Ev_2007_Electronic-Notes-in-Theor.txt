The academic paper describes multi-adjoint logic programming as a flexible framework that combines fuzzy logic and logic programming. In this framework, a multi-adjoint logic program consists of rules, each annotated by a truth degree and a query to the system. Goals in a multi-adjoint logic program are evaluated in two computational phases, and admissible steps are systematically applied during the operational phase. To support the computation of reductants, the paper introduces a preliminary definition of the concept of partial evaluation (pe) for multi-adjoint logic programs and goals, adapting techniques from the field of partial deduction of pure logic programs. The paper discusses the optimization of pe-reductants construction using an adaptation of the notion of unfolding tree, which dynamically limits the generation of useless nodes. The paper also presents an algorithm that is parametric with regard to computation rule, order rule, and search strategy, as well as a stop criterion to ensure termination of unfolding.

The paper emphasizes that the choice between breadth-first and depth-first strategies for accessing list leaves does not significantly impact the elimination of useless nodes and discusses the impact of the order rule in the removal of useless nodes. Additionally, the paper provides an example illustrating the benefits of the threshold-based technique for computing pe-reductants when compared with other techniques. It also demonstrates the efficiency gains achieved in constructing and executing pe-reductants. The paper concludes by discussing the importance of reductants in achieving completeness in multi-adjoint logic programming, presenting a method for computing pe-reductants using partial evaluation techniques based on unfolding with dynamic thresholds, and highlighting the benefits of the technique through comparative examples.