We introduce a novel variation of the Earley parsing algorithm designed to efficiently handle context-free grammars with regular right-hand sides. Our approach encompasses the core state-machine driven algorithm, the translation of grammars into state machines, and a reconstruction algorithm. Additionally, we provide a theoretical framework for the algorithm and discuss optimizations. Finally, we evaluate the performance of the algorithm through implementation testing.

Theoretically, our parsers are most related to Woods' augmented transition networks (ATNs), which similarly handle regular right sides directly and have been previously utilized for Earley parsing. Our formalism employs a new type of finite-state transducer, enabling us to express optimizations that notably enhance performance compared to ATNs. Some of these optimizations bear resemblance to those used by the Earley parsers of Aycock and Horspool, which don't directly handle regular right sides.

We establish the relationship between grammars and parsing transducers, specifying sufficient conditions under which a given transducer will parse the language of a given grammar. We present an algorithm for constructing an appropriate transducer based on a given grammar as input. Furthermore, we introduce a deterministic, Earley-style recognition algorithm based on parsing transducers. We demonstrate that, for a given transducer, it recognizes the same language as the nondeterministic pushdown algorithm. We adapt the algorithm for parsing and present an algorithm for parse reconstruction. The parsing algorithm's performance is evaluated by comparing it to previous approaches, and related work is discussed.

Earley parsing is a top-down parsing method that is capable of parsing any context-free language. It conducts a breadth-first search of all potential leftmost derivations of the input string. The upper bound for Earley parsing is O(n3), where n denotes the size of the input. Earley revealed that his algorithm functions in O(n2) time for unambiguous grammars and in linear time for a large class of grammars. Our version of Earley retains the O(n3) upper bound, especially to handle regular right sides. It also aligns with the work of Scott, who demonstrated how to efficiently modify the traditional Earley algorithm to construct a shared packed parse forest (SPPF). Forest reconstruction is discussed in the relevant section.

The reconstruction process is initiated during the parsing process itself. We extend the algorithm to build an (Earley) parse graph during parsing. Each node of the graph corresponds to an Earley item in an Earley set. Directed edges from a node describe the rules used during parsing to add the Earley item to the Earley set. Predecessor links are traversed until reaching an item with no links, which must be a callee of some call. Subtree reconstruction is accomplished using a recursive call to make_parse_tree. Some items may be the target of more than one transition, resulting in multiple links, in which case the algorithm nondeterministically selects a single link to follow with the abstract choose function.

We argue that the Earley graph embodies all of the parse trees for an input, and we outline the method to reconstruct a parse tree from the Earley graph. However, a more accessible representation of the parse trees, a parse forest, is desirable. We have implemented a parse forest reconstruction algorithm, but have limited space to describe it in full. Instead, we discuss some intricacies arising from our use of parsing transducers.