To advance and enhance the type systems of popular object-oriented programming languages such as Java, C#, C++, Scala, and others that rely on class name information for defining object types and subtyping, it is crucial to establish a precise mathematical model of these languages. Accurate models are essential for thorough reasoning and analysis of mainstream object-oriented programming languages, while imprecise models can lead to erroneous conclusions.

The denotational model of nominally-typed object-oriented programming, known as NOOP, has been developed to address this need. NOOP was invented and developed by Dana Scott, along with others including Gordon Plotkin, within the context of domain theory and denotational semantics. While previous research in denotational semantics has focused on functional programming languages such as Lisp and ML, the present work aims to provide a similarly precise model for mainstream object-oriented programming languages.

In a related line of research, Reus and Streicher have developed an untyped denotational model of class-based object-oriented programming, which largely disregards type information and incorporates nominal information solely to analyze dynamic dispatch. This model was designed for analyzing mutation and imperative aspects of object-oriented programming.

This paper introduces formal definitions for class signatures and related constructs as syntactic entities capturing nominal information present in objects of mainstream object-oriented software. Embedding class signature closures within NOOP objects results in nominal objects, enhancing the precision of NOOP models to align more closely with objects in languages like Java, C#, C++, and Scala.

It is important to note that not all members of a set are class signatures, and class signatures are derived from the text of classes in object-oriented programs. Given that object interfaces form the basis for defining types in object-oriented type systems, class signatures serve as the formal foundation for nominally-typed object-oriented type systems, ensuring consistent and appropriate usage of objects within a program.

Additionally, the paper defines exact class types and discusses the correspondence between inheritance and subtyping in nominally-typed mainstream object-oriented programming. It also outlines future research possibilities, including the definition of a minimal nominally-typed object-oriented language and the establishment of its denotational semantics within the framework of NOOP to prove type safety. Overall, the paper underscores the necessity of including nominal information in an accurate model of nominally-typed mainstream object-oriented programming for better understanding and advancement of object-oriented programming and current object-oriented languages.