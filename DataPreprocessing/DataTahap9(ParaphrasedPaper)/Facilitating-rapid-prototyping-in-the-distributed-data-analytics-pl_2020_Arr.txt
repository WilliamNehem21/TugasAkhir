The paper describes oodida, a system designed for concurrent distributed data analytics with an emphasis on the automotive domain. Unlike traditional systems that transfer all data to a central server for processing, oodida processes in-vehicle data at its source. The system enables data analysts to create and validate assignment specifications using a Python library, consisting of on-board tasks carried out by the on-board unit (OBU) and off-board tasks executed on a central cloud server. To address the time-consuming and disruptive process of updating the system, the paper introduces an active-code replacement feature that allows custom code to be executed without redeploying any part of the installation, thereby facilitating rapid prototyping.

The paper provides a detailed overview of the active-code replacement feature, including its background, implementation, and design considerations, as well as its impact on rapid prototyping. It also highlights the benefits of the system, such as cost savings and faster insights for data analysts. Additionally, the paper discusses the process of verifying user-provided code and the deployment of tasks to client processes. It emphasizes the significance of active-code replacement in enabling the rapid deployment and execution of new computational methods without disrupting ongoing tasks.

Moreover, the paper compares the active-code replacement feature of oodida with other related systems, such as MUC and Polus, and discusses its limitations and future directions for improvement. The authors emphasize the importance of active-code replacement in providing a safe and efficient alternative for data analysts to deploy custom code on the system, despite certain restrictions on user-defined code modules. Ultimately, the paper asserts that active-code replacement enhances the interactive workflow for data analysts and enables rapid prototyping in practical settings.