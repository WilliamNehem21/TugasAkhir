In the context of lc-graphs, when a plus-variable (or minus-variable, lambda-variable, etc.) is observed, it is referred to as a plus-node (or minus-node, lambda-node, etc.). Additionally, a node in g is defined as a terminal node if it has an out-degree of 0. It is important to note that plus-nodes commonly appear in terms labeling negative axiomatic formulae, even though they are still identified as plus-nodes. These occurrences stem from the following two lexical unfolding rules.

Lc-graphs depict the substitutions that must be executed in the final step of proof net construction. Each plus-node corresponds to a redex for a substitution that must be replaced with a term composed of the plus-nodes and minus-nodes that it points to. Considering this perspective, the significance of the lc-graph integrity criteria to proof net construction can be illustrated.

Considering plus-nodes, they receive incoming arcs either through a negative occurrence (which receives one arc from an axiom link) or through a lambda-node parent. A plus-node labeling a positive terminal formula has neither of these, and hence has an in-degree of 0.

Additionally, if v is not a minus-daughter of a lambda-node, then it has an in-degree of 1, as determined by proposition 4.1 and proposition 4.2. Furthermore, according to proposition 4.7, every intermediate node on the paths u; v and w; v is a plus-node and thus has an in-degree of 1.

The axiomatic label referred to in proposition 4.9 is called the axiomatic reflection of the proper root node. If a positive terminal formula is a basic category (and therefore also an axiomatic formula), then the axiomatic reflection of its proper root node aligns with the proper root node itself.

As the lc-graph is acyclic, its nodes can be topologically sorted. By consistently choosing the most highly ranked redex according to this order for expansion, the rank of the most highly ranked redex decreases at each variable substitution step, leading to the termination of variable substitution.

It is also asserted that under given conditions, each subterm v:s corresponds to a lambda-node with a minus-daughter v and a plus-daughter u, wherein the occurrence of v in s implies that there exists a path u; v.

The remaining nodes in the lc-graph are introduced at a location in the lexical unfolding with a negative formula beneath them. The proof of the path-accessibility of these remaining nodes from the proper root node is inductively based on the number of lexical unfolding steps down to the lowest such negative formula. The base cases include the minus-nodes labeling negative terminal formulae and the minus-daughters of lambda-nodes along the path from the proper root to its axiomatic reflection.

The consideration of terminal plus-nodes and improper root nodes emphasizes the occurrence of positive and negative occurrences falling outside the sublinkage but deriving from the same lexical unfolding. Among the integrity criteria, i(2) stands out as it specifically demands the absence of a cycle, making it easy to enforce incrementally.

The paper also highlights the need to address how to combine lc-graphs during parsing to avoid exponential growth in the size of the set of lc-graphs attached to each edge. It is suggested that if two lc-graphs for the same edge can both produce an integral spanning linkage, then both of them share the same set of paths from improper root nodes to terminal plus-nodes. However, unique sets of these paths cannot be used to prune away lc-graphs of sublinkages.