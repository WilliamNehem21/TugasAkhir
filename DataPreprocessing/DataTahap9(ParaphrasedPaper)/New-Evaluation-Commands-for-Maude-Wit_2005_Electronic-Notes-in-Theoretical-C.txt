The paper discusses the capabilities of Maude, a language for rewriting logic, in handling infinite data structures and avoiding infinite computations through the use of strategy annotations. It emphasizes the challenges that strategy annotations can pose in computing the normal form(s) of certain input expressions. To address these challenges, the authors introduce two new commands, "norm" and "eval," within the Full Maude extension, which enable Maude to compute normal forms of initial expressions even when traditional strategies are unable to do so. These commands have been seamlessly integrated into Full Maude, making them easily accessible within the programming environment.

The Full Maude extension is an implementation of Maude written in Maude itself, providing object-oriented programming notation and a module algebra that allows for modular combinations of Maude modules. The paper outlines the usage of the new commands in executing Maude programs within Full Maude, and highlights the significance of these functionalities for metaprogramming and the development of formal tools.

The authors provide detailed explanations of the internal mechanisms of the "norm" and "eval" commands, including the underlying meta-functions and their interactions with the system. They also describe the process of extending Full Maude to support these commands, as well as the transformations and evaluations involved in their execution.

The paper concludes by discussing the potential applications of the new commands and the advantages of using Full Maude as a platform for implementing such extensions. It also highlights the relatively low computational overhead introduced by the preprocessing step of the "eval" command compared to other computational tasks within the system. The authors suggest future directions for enhancing the capabilities of Maude through Full Maude and similar extensions.