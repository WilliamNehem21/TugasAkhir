In practical terms, the concept of web service composition is commonly expressed using either choreography or orchestration languages. The former defines the rules governing interactions among all the services involved in a specific application, while the latter allows for programming a designated service, known as the orchestrator, responsible for coordinating the services externally. These two approaches have been developed separately by industrial consortia and international organizations like W3C and OASIS. Of particular note, the WS-CDL and BPEL4WS specifications are among the most widely recognized languages for web services technology dealing with choreography and orchestration, respectively.

This model is founded on the concept of a software connector that controls data flow by linking data items to input and output ports. Typically, the coordinated entities are treated as black boxes defined by a set of ports through which data values are transmitted or received. Ports are characterized by polarity (either input or output) and may also have a type to classify the permissible values.

In exogenous coordination models, such as OR, components are black box entities accessed through strictly syntactic interfaces. The role of an interface is confined to managing port names and, if applicable, admissible types for data items flowing through them. For a web service, however, specifying the corresponding workflow pattern is as crucial as describing the available actions or orchestrating structure. This leads to the following definition: ports are interface points through which messages flow. Each port has an interaction polarity (either input or output), but in general, connectors are agnostic to the data values flowing through them. Another specific characteristic is the ability to construct complex connectors from simpler ones utilizing a set of combinators.

A drain has two input but no output ports, causing it to discard any data item that crosses its boundaries. A drain is synchronous if both write operations are required to succeed simultaneously (implying that each write attempt remains pending until another write occurs at the other endpoint), and asynchronous if write operations in the two ports do not coincide. The formal definitions are as follows: its effect is to connect ports with identical polarity. The aggregation of output ports is accomplished through a right join (c i> z), where c is a connector, i and j are ports, and z is a fresh name used to identify the new port. Port z asynchronously receives messages sent by either i or j. When messages are sent simultaneously, the combinator selects one of them in a nondeterministic manner.

The language semantics aspect remains a challenge for future work. Whether formal models, such as the one discussed in this paper, can be useful in providing precise semantic foundations for emerging languages for web service composition (e.g., BPEL4WS, XLang, or WS-CDL, among others) is a matter we plan to address in future research. Its relevance from the perspective of software engineering should not be underestimated.