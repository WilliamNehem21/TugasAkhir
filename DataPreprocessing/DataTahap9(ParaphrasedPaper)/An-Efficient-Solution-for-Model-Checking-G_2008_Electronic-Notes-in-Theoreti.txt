This paper introduces a novel method for verifying graph transformation systems using model checking. The approach involves transforming AGG specifications into BOGOR models, thereby enabling support for both attributed typed graphs and layered transformations. The resulting models are suitable for verifying properties expressed as combinations of linear temporal logic (LTL) and graph transformation rules. The initial experimental results demonstrate significant improvements over existing approaches in terms of both performance and expressiveness.

The paper identifies a limitation in reasoning about local changes in single rules, which hinders a comprehensive understanding of the global behavior of the underlying graph. To overcome this limitation, the paper proposes an analysis solution that enables users to reason about how different rules impact the overall behavior of the graph. The existing model checking tools, CheckVML and Groove, are acknowledged for their capability to provide such analysis; however, their limitations in supporting layered graph transformation systems and efficiently managing dynamic systems are noted.

The paper outlines the process of translating graphs into the Bandera Intermediate Representation (BIR), the input language of the model checker, and representing properties using linear temporal logic and specific-purpose rules. The resulting data is fed into BOGOR for verification. Notably, the approach can handle dynamic systems, though with a restriction on the maximum size determined by a user-defined threshold.

The paper also briefly introduces BOGOR in Section 3 and justifies its selection as the model checker of choice. Section 4 describes the approach and illustrates how a graph transformation system is encoded in BIR through an example. Additionally, Section 5 presents experimental results and compares them with existing approaches, while Section 6 offers concluding remarks.

Furthermore, the paper discusses the foundational work by Heckel et al. on the verification of graph transformation systems through model checking, as well as the methodology presented by Baresi and Spoletini for analyzing graph transformation systems using Alloy. The limitations of the Alloy analyzer with respect to dealing with a-priori limited domains are highlighted.

Finally, the paper introduces the key constructs and features of BIR, the input language, for modeling languages of verification tools. After defining data structures, the paper outlines the process of creating a main thread, dividing it into locations, and instantiating the type graph and implementing the host graph. The encoding of rules is detailed, addressing the matching and acting sub-problems, and the paper compares the approach to CheckVML.

The paper concludes by discussing the properties that can be verified and extends the applicability of the approach to hierarchical graph transformation systems. It highlights potential performance improvements by combining layered graph transformation systems with inheritance and concludes by suggesting avenues for future work.