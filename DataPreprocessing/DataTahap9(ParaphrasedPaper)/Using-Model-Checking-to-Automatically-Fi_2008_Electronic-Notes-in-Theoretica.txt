The combination of downward and upward simulations presents a comprehensive and sound approach for verifying relational data refinement in state-based specification languages like Z and B. Previously, it was demonstrated that both downward and upward simulation conditions can be fulfilled using a CTL model checker, which was implemented in the Sal tool suite. However, it is often challenging to find retrieve relations. This paper proposes a method to utilize the Sal model checkers to generate retrieve relations.

Sal, a tool-suite for analyzing and verifying systems specified as state-transition systems, aims to integrate various verification tools operating on an input language that serves as a common format for translating programming and specification languages. The input language, used for specifying systems, encompasses several features and can even function as a specification language on its own. The tool-suite comprises a simulator and four model checkers, including LTL and CTL model checkers.

A specification is defined as a Sal context, such as the context "alloc" representing the unique number allocator. A context combines various definitions, including types, constants, and modules, for describing the state transition system. Data refinement refers to the substitution of a concrete specification for an abstract one, provided their behaviors align. The paper describes an example refinement of the Z specification and introduces an incremental approach for building the abstract and concrete transition systems during execution.

The existence of a retrieve relation indicates a refinement, and the paper presents a method for leveraging model checkers to automatically discover retrieve relations. Furthermore, it outlines how simulation conditions for data refinement can be encoded in Sal using branching time temporal logic CTL.

To verify the refinement with a CTL model checker, the abstract and concrete specifications are combined into one by merging their state variables and operations. The applicability condition is used to determine if the concrete operations can be performed from any related concrete state whenever an abstract operation can be performed.

The paper concludes by acknowledging the limitations related to the size of the state spaces that can be handled and proposes potential approaches for alleviating these limitations, such as the use of optimization features, data abstraction, predicate abstraction, and data independence. Furthermore, it suggests future exploration of these techniques to improve the efficiency and scalability of the proposed approach.