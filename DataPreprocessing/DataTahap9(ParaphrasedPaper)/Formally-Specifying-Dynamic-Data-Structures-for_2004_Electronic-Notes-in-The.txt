In the multimedia and embedded systems community, designers grapple with data management at various levels of abstraction, ranging from abstract data types and dynamic memory management to physical data organizations. In the pursuit of significantly reducing energy consumption, memory usage, and/or execution time, optimizing data structures is essential. However, the complexity of describing and implementing such optimized implementations is substantial. Therefore, there is a practical need to accurately (i.e., mathematically) describe these intricate dynamic data organizations.

The traversal operation, as demonstrated in the aforementioned example, involves an access operation in which all stored records (r) in the data structure need to be accessed. Due to the dynamic nature of multimedia applications, it is not initially known which records are stored in the data structure. Traversal is a prevalent access operation in multimedia applications, as evidenced by various case studies, indicating that memory-related energy consumption can significantly decrease for data structure 2 (as compared to data structure 1) due to the reduction in the number of data accesses, despite the increase in memory footprint.

This paper addresses the specific problem of developing a formal model that enables a designer to succinctly and unambiguously express the exact behavior of nontrivial, yet cost-effective, dynamic data structures. The contribution of this paper lies in extending separation logic [9, 10, 11] in terms of syntax and semantics and utilizing it as a specification language for dynamic data structures. The key contributions in terms of formalization are twofold: (i) sparseness and (ii) access operations, which are demonstrated using data structure 1 as an example. The term "data structure" is used interchangeably with "heap," where data structure 1 is synonymous with heap 1.

The specification states that the data structure contains eight consecutive heap cells starting at location l, with a sparseness of two out of eight elements. However, the specification is overly restrictive, as it specifies exactly which two heap cells contain a record (i.e., v1 and v7) rather than expressing that any two of the eight heap cells can contain a record. This characteristic needs to be modeled, as it is the primary source of complexity in dynamic data structures for embedded multimedia applications. The paper later demonstrates how to formally address sparseness.

In dealing with dynamic changes to the data structure, the paper extends the original syntax and semantics to incorporate notions of input heap and output heap. The input heap corresponds to the original data structure (i.e., before the insertion has occurred), and the output heap corresponds to the data structure that contains the record v3. Insertion is just one of the access operations formally defined in this paper.

In addition to the references provided in the introduction, this paper draws inspiration from the verification literature, particularly from sources such as Yang's discussion of soundness and completeness of separation logic and Ahmed et al.'s use of type systems in conjunction with a variant of separation logic to describe hierarchical memory layouts.

In the context of designing and implementing embedded devices, such as hand-held devices, the primary objective is to reduce energy consumption for a given task. In the subdomain of multimedia embedded systems, data management significantly contributes to power consumption. Polyhedral models are often used in this community, for instance, in optimization tools, to mathematically model data storage and access.

In the following sections, the paper commences with the original syntax from section 3.2 and the original semantics from section 3.3, and extends both syntax and semantics to model practical problems encountered in their applications.

Although formula (3) naturally follows from formula (2), the paper explicitly states formula (3). The objective is to describe specific properties of a data structure irrespective of whether these properties can be derived from other logical formulas (cf. section 2, where the work is related to the program verification community).

Inductive definition 4 describes how to traverse an array, defining the boundary of the traversal by l and n, characterizing the current heap cell being consulted by i, applying function f to the value v stored in the current heap cell, and representing the sum of all function applications during the traversal with ves.

The paper extends the original syntax (section 3.2) and semantics (section 3.3) to model changes by changing the relation s, h|= p to s, hi, ho|= p, where hi denotes the input heap (i.e., the heap before the change has occurred), and ho denotes the output heap (i.e., the heap after the change). The paper does not split the stack s into an input stack si and an output stack so.