This paper introduces jalapa, a tool designed to enforce usage policies on Java bytecode programs using history-based policies defined by usage automata. The tool achieves this by rewriting the Java bytecode to incorporate hooks for enforcing the specified policies at runtime. One of the limitations of the current approach in Java, such as stack inspection for enforcing security policies, is its inability to handle privileged calls effectively, thereby compromising security. Therefore, to address this issue and the limitations of stack inspection, the paper proposes the use of history-based security mechanisms, which offer greater expressiveness and the ability to check the entire execution history.

The paper provides an overview of jalapa, detailing the methodology for securing Java applications through local usage policies. It also discusses the design, implementation, and artifacts of the tool, and highlights present and future challenges. To illustrate the methodology and key features of jalapa, an example is provided involving a web browser and its plugins. The example demonstrates the application of confinement policies to control the behavior of plugins downloaded from untrusted sources and ensure they do not violate security measures. Additionally, the paper explains the implementation of these policies using usage automata, and the steps involved in instrumenting the compiled program with hooks to enforce the specified policies at runtime.

Overall, the paper emphasizes the need for a more expressive and theoretically sound security mechanism that can be practically implemented and transparent to programmers, while also minimizing runtime overhead. It concludes by discussing the soundness and completeness of the runtime mechanism implemented by jalapa with respect to policy compliance.