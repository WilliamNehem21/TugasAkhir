The gdpll procedure, an extension of the well-known dpll procedure created in the early 1960s for first-order logic, is defined by four basic operations (reduce, eligible, satcriterion, and filter) specific to a given logic. The original dpll procedure is a special case of gdpll when applied to propositional logic.

We present an algorithm for the satisfiability problem in euf logic within the gdpll framework. Because this algorithm is an instance of gdpll, we need to verify its soundness and completeness based on the conditions outlined in Section 3.

Testing and verification pose significant challenges for the development of complex systems, particularly in hardware and software. Recently, theorem provers have been utilized to verify a pipelined microprocessor, with the method proposed by Burch and Dill greatly improving verification techniques. The dpll procedure, which serves as the basis for some of the most successful propositional satisfiability solvers, was originally developed for first-order logic but has primarily been employed for propositional logic due to its inefficient treatment of quantifiers. In this chapter, we outline the fundamental concepts of gdpll as the general version of the dpll procedure, with a detailed description available elsewhere.

The dpll algorithm is a backtracking-based, complete algorithm for determining the satisfiability of propositional logic formulas in conjunctive normal form, employing three rules: the unit clause rule, the splitting rule, and the pure literal rule. These rules reduce a formula based on specific criteria, with a function "reduce" assumed to perform all the reduction rules. Like dpll, gdpll incorporates a splitting rule, which conducts a case analysis based on an atom "a."

In Section 4.1, we demonstrate that the set of reduction rules is terminating, guaranteeing the existence of at least one normal form. However, we show through an example that the rules are not confluent, leading to non-uniqueness in the normal form.

The function eligible() enables the selection of literals from purely positive clauses of length greater than one, i.e., from the core of a formula. Consequently, we can terminate with "sat" as soon as the core of the reduced formula becomes empty and the formula does not contain the empty clause.

Furthermore, we conducted experiments with random formulas involving approximately 1000 clauses and 10 different symbols. The eufdpll algorithm successfully solved all these problems. However, the barcelogictools program (winner of the smt-comp 2005 competition) achieved the same results and was notably faster in determining the solution.