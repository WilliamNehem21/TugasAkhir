The enhanced cost-based scheduling algorithm is employed in the realm of cloud computing to minimize both makespan and cost, while also enhancing the computation-to-communication ratio. This algorithm ascertains task priorities based on the cost and profit of resources, subsequently categorizing tasks into three groups (low, medium, and high) according to their priorities. A job grouping algorithm is then utilized to execute tasks within each group.

The core concept of the GTS algorithm involves classifying tasks into categories based on their attributes, as articulated in the TS algorithm. Each category consists of tasks with similar attributes and is arranged for scheduling based on the weights assigned to the attributes of tasks in the TS algorithm. In this framework, the scheduling pertains to the categories, rather than the individual tasks. The first scheduled category comprises tasks with high attribute values or high priority, and within the selected category, the task with the shortest execution time is scheduled first.

The primary aim of the study was to introduce an algorithm for cloud computing that minimizes the execution time for all tasks, with low latency for high-priority tasks. The GTS algorithm was devised to schedule tasks into services driven by quality of service (QoS). This algorithm integrates various task attributes, such as user type, task priority, task size, and task latency, to gauge task priority.

The GTS algorithm achieves lower latency for tasks with urgent priority, with reductions of 12% and 9% for 50 and 100 services, respectively, compared to both the Min-Min and TS algorithms. Furthermore, it accomplishes lower latency for longer tasks than the Min-Min algorithm, with reductions of 57% and 54% for 50 and 100 services, respectively. Additionally, GTS demonstrates almost identical load balancing performance compared to the TS algorithm.