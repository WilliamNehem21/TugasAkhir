This academic paper introduces an action compiler designed to work with an action semantics-based compiler generator. The action compiler generates code with faster execution times compared to other action compilers, and in some cases, only has a two-fold difference in performance compared to the code produced by the GNU C compiler. By targeting Standard ML, the code generation process is made simpler and easier to implement. The action compiler has been tested on a description of the core of Standard ML and a subset of C.

The paper presents an approach that connects a front-end generator with an action compiler to create a compiler for a specified language. Previous research has demonstrated the generation of compilers that produce code up to ten times slower than handwritten compilers, and in some cases, as fast as only two times slower. To achieve these results, some constraints have been placed on the actions handled by the compiler, and the implementation of the code generator in the action compiler is often complex.

The action compiler annotates and transforms actions in several steps, performing type inference and code generation without undertaking optimizations on the actions. Instead, it generates code that can be readily optimized by MLton.

The paper introduces action semantics (AS), which combines denotational semantics and operational semantics. AS uses inductively defined semantic functions to map programs and declarations to their denotations. These denotations are actions rather than higher-order functions.

Actions are expressed in action notation (AN), a formal notation resembling English. AN consists of a kernel defined operationally, from which the rest of AN can be reduced. Actions are constructed from yielders, action constants, and action combinators, with yielders comprising data, data operations, and predicates.

The paper outlines the rules for translating actions into Standard ML, as well as the use of type information and the challenges of code generation. It also discusses previous work on compiling actions and outlines the limitations of the action compiler.

The paper concludes by mentioning future work, such as improving code generation and type inference to allow for more natural language descriptions. Additionally, the paper discusses challenges related to data representation and strong typing in the target language, Standard ML.