Frequently, to evaluate the effectiveness of newly proposed calculi, various research groups have developed prototype implementations of the calculi that could function as core programming languages for mobile distributed systems. In response to the increasing number of experiments and the need to simplify the implementation phase, a generic Java framework called "IMC" (Implementing Mobile Calculi) has been created. IMC serves as middleware for the implementation of different distributed calculi, aiming to provide the necessary tools for the implementation of runtime systems of new languages derived from calculi for mobility. The primary goal is to enable implementers of new languages to focus on the specific aspects of their system and rely on the framework for standard mechanisms related to distribution and mobility, thus avoiding the need to deal with low-level details. Java was selected as the production language due to its numerous useful features for building network applications with mobile code, as many existing implementations of mobile and distributed systems are written in Java.

IMC facilitates transparent code mobility, allows dynamic composition of communication protocols, and enables node topology management. These mechanisms are abstracted as much as possible to simplify, for example, transitioning from one specific communication protocol to another without modifying other parts of an application. IMC can be used directly without any specific advanced feature, but users have the option to customize parts of the framework by providing their own implementations for the interfaces used in the package. These customizations can take advantage of design patterns such as the factory method, abstract factory, template method, and strategy, which are utilized throughout the packages. The framework was designed to achieve both transparency and adaptability.

For instance, in the case of code mobility, the framework provides essential functionalities to make code mobility transparent to the programmer, automatically handling issues related to code marshalling and dispatch. It also allows adaptation to various network topologies (e.g., flat, hierarchical, peer-to-peer networks) and message dispatching and forwarding. To the best of our knowledge, there are no other similar general frameworks available in the literature.

The main functionalities and interfaces of the framework are organized into three main subpackages: protocols, mobility, and topology, which handle communication protocols, code mobility, and network topology, respectively. These components are presented in the suggested order for implementing a runtime system for a mobile calculus. The framework is designed to abstract away the specific communication layers to enable reusing protocol implementations independently from the underlying communication means. This abstraction is realized through specialized streams for writing and reading, providing high-level and encoding-independent representations of information to be sent or received.

A participant in a network is represented as an instance of the class "node" in the "topology" package, which acts as a container of running processes and provides the means for a process to access resources contained in a node and to migrate to other nodes. The framework also provides implemented protocols to deal with sessions, where a session manager instance keeps track of all the sessions. Additionally, the protocol used by the participants of a JDPI network is described, with messages exchanged by these participants, and the protocol used by each network component introduced. The framework simplifies the implementation of this part through the use of the mobility and protocol packages of IMC.

Further details are provided on the implementation patterns and behaviors of various classes within the framework, such as adeptnodecoordinator and jdpifnode. Additionally, two simple mobile agents implemented in JDPI are described, showcasing the capabilities of the framework. Due to space limitations, detailed implementation examples are available for download.