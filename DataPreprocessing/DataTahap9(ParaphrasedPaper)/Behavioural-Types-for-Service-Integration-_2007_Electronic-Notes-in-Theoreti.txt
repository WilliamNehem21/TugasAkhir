The issue of service integration is widely acknowledged as a critical challenge in component-based software engineering. Existing component-oriented platforms address software interoperability at the signature level through interface description languages (IDLs), which specify the functionality of heterogeneous components. However, while IDLs can address signature mismatches, they do not guarantee correct interoperability, as discrepancies in component interaction behavior can lead to undesired deadlocks.

Due to this, research has focused on advocating the use of formal methods to describe the interactive behavior of software systems, particularly for detecting behavioral mismatches. Various formalisms, such as finite state machines and process calculi, have been proposed to extend IDLs with behavioral information.

This paper discusses the development of behavioral types, which are rigorous typing disciplines aimed at synthesizing the essential aspects of service interaction behavior while allowing for efficient automatic verification of important system properties. In contrast to computationally complete contract languages like BPEL4WS and WSCI, the expressive power of behavioral types is below Turing-completeness. Various types, including session types, action types, usage types, and process types, have garnered increasing attention.

The objective of this paper is to provide an overview of the current state of the development of behavioral types for service integration. The paper introduces a simple example of service integration and demonstrates how it can be modeled using finite state machines, process algebras, and behavioral types. It then analyzes different proposals of behavioral types, identifies relevant properties, and presents challenges that need to be addressed for behavioral types to have a meaningful impact in the software world.

Behavioral types offer a middle-ground approach between computationally complete contract languages and formalisms based on finite automata, allowing for modular specification of complex systems through diadic interactions. They are designed to provide a clear and disciplined high-level abstraction for describing complex interaction behavior, while also offering a formal basis for analysis and verification.

Additionally, the paper discusses the integrative role of behavioral information with non-functional information, such as service-level agreement (SLA) information, to achieve high-quality service aggregations and addresses the importance of automatic type-checking tools for behavior-aware service look-up. Furthermore, it highlights the need for solid guarantees regarding behavioral conformance and security issues for the widespread industrial application of behavioral types.