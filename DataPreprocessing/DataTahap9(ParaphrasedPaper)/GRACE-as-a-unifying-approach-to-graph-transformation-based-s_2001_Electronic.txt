For instance, the determination of the sequence in which rules are to be applied is a crucial aspect. Graph class expressions serve the purpose of constraining the application of certain rules to specific sets of graphs or filtering out a subset of graphs that can be generated by a given set of rules. Typically, a graph class expression can take the form of a logical formula describing a graph property such as connectivity, acyclicity, or the presence or absence of specific node or edge labels.

In a similar vein, we have introduced a framework for hierarchical graphs in which graphs featuring distinguished sets of nodes from an arbitrary graph are amalgamated with acyclic graphs and bipartite connection graphs. A connection graph establishes a relationship between the distinguished set of nodes and the nodes of the acyclic graph, thereby imposing a hierarchical structure on the graph.

A transformation unit defines a binary relation on graphs based on the selection of binary relations in the import part. However, the selection of these relations poses a question. One possibility is to store the relations in a relation library and reference them by their names. Alternatively, the relations specified by transformation units can be used. The combination of these approaches leads to the concept of a transformation module, which can be viewed as a network of transformation units that interact with each other, with the connections reflecting the structure of usage. Furthermore, each module possesses an import interface, serving a similar function to the import component of units, and an export interface containing the units provided by the module to the environment, which may subsequently be imported by other units and modules. More formally, a transformation module can be represented as a system mod=(import, body, export), where body represents a set of transformation units, and import denotes a set of identifiers.

Semantically, a transformation module specifies a set of binary relations on graphs, with one relation corresponding to each export unit, contingent on the choice of imported relations. If the network underlying a module is acyclic (and finite), the semantics are constructed level by level using the interleaving semantics. The process commences with the transformation units that exclusively utilize relations from the import interface and progresses incrementally, incorporating units whose usage component already has a specified semantics. In the case of cyclic usage structures, the interleaving of rule applications and used relations is repeated indefinitely, starting from the imported relations and the empty relations for the body units.

This unit encompasses two rules with an identical left-hand side and two alternative right-hand sides. The first rule eliminates an edge when applied as defined in Section 2.4, while the second rule is an additional rule that has not yet been introduced. It can be applied to a node with a degree of one, resulting in the removal of the node and its only incident edge.

In the context of the semantic relation of "connectivity-test-undir," the number of edges by which any connected graph can be transformed into a single node holds significance. Taken together, this signifies that for the semantic relation of "connectivity-test-undir," a graph g is linked to the single-node graph if and only if g is connected, thus representing a valid connectivity test for undirected graphs.