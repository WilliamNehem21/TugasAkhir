The introduction of the tactic calculus and the definition of its semantics extend beyond mere syntactic packaging of the underlying system of open terms by enabling the definition of proof-search procedures as terms in the tactic calculus. These search procedures incorporate constructs such as unification, failure handling, and recursion, which are not available in the underlying calculus. The purpose is to ensure that the outcomes of such procedures are related to the calculus of open terms, thereby guaranteeing the soundness of the interactive proof construction process. The soundness theorem also establishes a relationship between the state of the prover before and after the execution of a tactic, indicating that the execution of a tactic intended to solve a goal involves more than just introducing a new axiom.

An instantiation operation is introduced to assign a value to an unknown. It is noteworthy that meta-variables in the calculus of open terms have declarations of the form ?m[x1: a1... xn: an]: a (typically given in a context), and instances m[t1... tn] occur in terms.

The tactic system allows for non-terminating recursion without imposing syntactic constraints to ensure termination. The rationale for this decision includes the observation that a terminating system will necessarily be incomplete, and in the presence of unification constraints, formulating a syntactic criterion for termination appears to be a challenging problem for which a satisfactory solution has not been found.

A tactical is generally defined as a mapping that transforms proof states by solving and introducing meta-variables generated by tactic terms. The most fundamental tactical is the tactic application tactical, which evaluates a tactic term in the context of the current goal and instantiates and introduces meta-variables as prescribed by the tactic. Other tacticals encompass various types of composition, failure handling, and tacticals for handling naming purposes.

Due to space limitations, a detailed discussion on tacticals and their semantics is not possible. However, section 4.1 provides an overview of the intended semantics of the tactic application tactical, which is crucial for the subsequent discussion on the semantics of tactic terms.

The rule for evaluating defined tactics ensures that the arguments of the tactic are well-formed, propagates them through the body of the tactic, and evaluates the result. The symbol "t" in this rule represents one of the tactics defined in section 3.

Finally, our work has been influenced by the pure pattern type systems (PPTS) of Barthe et al., an extension of previous work on the rewriting calculus. Our approach relates to this work in that in a PPTS, a pattern is abstracted and then matched to the actual argument provided to the function, resulting in an instantiation, similar to our approach. However, it is distinct in that in a PPTS, matching is performed (as opposed to unification), making the pattern reduction localized only to the redex being contracted, whereas in our case, there may be side effects that render the reduction non-local.