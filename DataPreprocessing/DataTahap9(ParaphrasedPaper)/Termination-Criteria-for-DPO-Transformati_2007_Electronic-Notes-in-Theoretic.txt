Recently, there have been advancements in proving the termination of graph and model transformation systems, and some transformation tools now support the checking of termination criteria. This issue arises primarily from the need to generate an output model within a finite number of steps when using graph transformation for model transformation, whether by creating a new output model from scratch or modifying existing models.

A definition for the termination of a graph transformation system is essential, and the definition used in previous work is extended in this paper to include the treatment of a layering control structure. The definition is further expanded to accommodate arbitrary control structures.

The existing definition of e-concurrent productions and the concurrency theorem have not been extended to productions with application conditions, so the present work focuses on plain productions, and the results presented in the paper are valid when the rules contain negative application conditions.

To demonstrate the practical relevance of the termination criteria proposed, two case studies are examined, using transformation idioms from a specific source to analyze their termination properties. The leaf collector pattern, which identifies leaf elements in a tree structure, is one of the transformation idioms studied, and its termination properties are explored. 

If the input graph does not contain directed cycles, the transformation terminates, and this condition can typically be guaranteed in model transformation systems. However, in cases where such constraints do not exist in the model, the leaf collector may need to be extended to avoid nontermination. 

The paper also discusses termination criteria for graph rewriting as applied to program transformation, focusing on a specific problem domain and providing abstract and concrete termination criteria. The DPO approach, which includes a measure function f to establish abstract termination criteria, is also explored in the paper.

In summary, the paper addresses the issue of termination in graph and model transformation systems, presenting new termination criteria and demonstrating their practical relevance through case studies. The paper also extends existing definitions and explores various approaches to defining termination criteria for transformation systems.