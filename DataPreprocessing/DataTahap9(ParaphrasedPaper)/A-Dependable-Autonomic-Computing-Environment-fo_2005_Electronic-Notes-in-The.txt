This research paper forms part of a research and development initiative focused on creating a framework for reliable autonomic computing. The primary objective of the study is to enhance the reliability of digital systems through the implementation of self-healing techniques, employing mobile agents to execute self-testing policies for diverse and intricate systems. The paper aims to present the fundamental concepts of the project, elucidate the design choices, and furnish a detailed overview of the current architecture. The research encompasses the design and development of a functioning prototype.

The central premise of the project resides in addressing reliability concerns during the operational phase of a system, with a particular emphasis on leveraging mobile agents—autonomous and identifiable computer programs capable of autonomously traveling between network hosts—to conduct regular testing of target systems (self-testing) and, in case of failure, diagnose (self-diagnosis) and potentially rectify the issue (self-repair) prior to the occurrence of severe malfunctions (self-healing).

Mobile agents are programs that can migrate from one machine to another, representing an evolution from existing distributed computing paradigms with several distinctive features. Their key advantages include autonomy, particularly compared to non-mobile agents, enhanced support for mobile hosts, reduced network traffic, and simplified software deployment. These mobile agents are designed to move around and gather information about the systems under test.

Specific mobile agents are responsible for conducting periodic testing of critical components, such as software-implemented hardware tests for components like RAM or hard disks, to preempt failures. This approach is based on the observation that components often exhibit abnormal behavior prior to complete failure, akin to the initial memory testing of a personal computer.

The core of the environment is represented by the agency, which receives information about each target system and formulates a healing plan based on inputs from local agents and global administrators. It also initiates the creation and activation of new mobile agents and communicates simple commands (goals) to them.

The manager agent, a mobile agent tasked with overseeing and executing the test plan generated by the agency, is responsible for a set of target systems and moves between them to monitor the testing process, retrieve test history, and collect results from tasks performed by mobile agents. It can self-replicate if responsible for too many target systems.

The environment relies on various capabilities that are activated by the agency as needed. An agent moves toward a target system, assesses available resources, and performs its designated task. It can receive additional tasks while in motion or engaged with a particular target system, and may undergo self-replication. Upon completion of its tasks, the agent ceases to function.

Agency agents align local administrator policies with global policies (policy manager), and in conjunction with software and hardware information, generate a list of tests to be conducted (goal generator). Consequently, a list of goals is produced and communicated to a mobile manager agent. This mobile manager agent, responsible for the designated system, moves to the target, and if conditions (determined by policy/goal constraints) are favorable, initiates pertinent actions by conveying a list of goals, with each representing a specific action, to the agency, while adhering to policy/goal constraints.

The agency (goal interpreter) selects an agent capable of performing the identified action: if the agent is active in the environment, the agency assigns the action (goal); if not, a new agent is created using information from the agent repository and activated for the new action (goal).

The involved mobile agent migrates and moves to the target system, executing its task (goal) if the requisite resources are available, with the results being stored in the target system (local agent). The responsible manager agent is accountable for acquiring and analyzing the results, subsequently sending new tasks (goals) to the agency, such as a diagnostic action following the failure of a specific test.

Local tests are initiated by goals within the test agents. Upon processing a new goal, the test agent moves to the system under test (SUT) and interfaces with the local agent and its services.