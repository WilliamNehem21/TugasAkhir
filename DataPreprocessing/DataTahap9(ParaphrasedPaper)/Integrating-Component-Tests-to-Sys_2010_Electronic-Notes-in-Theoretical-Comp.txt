In numerous fields such as automotive systems and production and automation, embedded software has emerged as a primary driver of innovation, leading to a growing demand for software-controlled functionality. To address this increasing demand, a component-based approach to software system construction has become fundamental in contemporary software engineering. This approach not only reduces the complexity of the overall engineering process but also facilitates the creation of customized systems by combining pre-fabricated components with those custom-made for the specific system.

Subsequently, this paper discusses the context and contribution of the presented approach and then formalizes observations about components and networks of components in Section 2 to establish the basics for the applied techniques. Section 3 introduces a method for generating test cases on a system level from test cases for components, and Section 4 summarizes and compares the presented approach with other methods of test case generation.

The paper introduces components as the building blocks for constructing reactive systems in this section, describing the behavior of a component as a transition system that controls its interaction with the environment or surrounding system via input and output signals. The notion of observations is extended to systems described as networks of communicating components. The behavior of a transition system in terms of simple single-step executions is defined, where each transition corresponds to a single step of computation or interaction.

Using these elements, the interface inout s of a network s in terms of its input and output variables is defined as a subset of the combined interfaces inout ci of its components ci, with non-interface variables considered to be hidden variables used only for internal communication.

Test cases are introduced as sets of observations, defining the validity of a test case of a component as its containment in the behavior of the component. The notion of an integrated test case is also introduced, illustrating its ability to test a component's behavior at the system level. The automatic generation of integrated test cases using model checking is also discussed.

A test case and its graphical representation are interpreted as the set of observations about the component under test that correspond to the prescribed behavior. A test case characterizes all legal behaviors of the component under test and is a super-set of all the expected observations of the component.

The paper concludes by summarizing the presented approach and providing an outlook into other possible areas of application of the basic techniques, as well as comparing the technique to other work on automatic test case generation. The focus of the described technique is on supporting issues of integration testing, and it is set into perspective with other approaches on integration testing, such as those based on coverage criteria, mutation testing, and various techniques of component testing applicable during system integration.