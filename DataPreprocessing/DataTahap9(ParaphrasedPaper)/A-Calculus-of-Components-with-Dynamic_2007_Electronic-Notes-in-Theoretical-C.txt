The paper focuses on addressing conflicts in software composition and presents two paradigmatic solutions within a formal framework. It demonstrates the soundness of both solutions in preventing the combination of ill-formed components and formally compares them.

The structure of the paper is outlined: Section 2 provides an informal introduction to the r-calculus, while Section 3 extends the calculus with the receive primitive and discusses the problem of ensuring safe composition. The hiding-based solution is presented, and in Section 4, the constraint-based solution is introduced and compared with the hiding-based approach. The paper concludes in Section 5 with a summary of its contributions and a brief discussion of related and future work. The formal definition of the r-calculus along with proofs is included in the appendix to assist the reader.

The paper also addresses the internalization of solving clashes by renaming in the context of software composition provided by mixin modules. It examines the limitations of generalizing this approach to higher-order cases and discusses the drawbacks of the hiding-based approach compared to the constraint-based solution in this context.

Furthermore, the paper distinguishes its approach from related work, particularly in the context of dynamic software updating and the extension to a higher-order calculus. It emphasizes the general framework for software composition and the integration of the receive primitive in the language, distinguishing it from other approaches.

Additionally, the paper highlights the investigation of an even more abstract framework for safe combination of local and retrieved code via dynamic checks in a higher-order calculus, signaling potential future research directions.