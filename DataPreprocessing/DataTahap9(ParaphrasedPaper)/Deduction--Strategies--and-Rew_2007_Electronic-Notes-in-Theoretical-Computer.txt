The paper emphasizes the importance of specifying automated deduction methods declaratively rather than procedurally. It suggests that inference systems should be proven correct regardless of implementation details, and different algorithms to implement a given inference system should be specified as strategies to apply the inference rules. The inference rules themselves can be specified as rewrite rules, and by using a high-performance rewriting language implementation and a strategy language to guide rewriting computations, modular implementations of both the inference rules and the algorithms controlling their application can be obtained. The paper presents the design of a strategy language for the Maude rewriting language that supports this modular decomposition through system modules for specifying inference systems and separate strategy modules for specifying strategies. It also provides set-theoretic semantics for the strategy language, presents different combinators, and gives examples of its application in automated deduction and programming language semantics, such as operational semantics of the ambient calculus and the two-level operational semantics of the parallel functional programming language Eden.

The strategy language allows for the specification of strategy expressions that control the way a term is rewritten, including the application of rules with variables instantiated by substitutions and the use of strategy expressions to check the rewrites in the condition of a rule. Recursion is achieved by giving a name to a strategy expression and using this name within the expression or in related strategies. The paper also discusses strategy declarations and abbreviations for strategy expressions, as well as the association of strategy expressions with strategy identifiers using patterns as arguments. It illustrates the application of the strategy language with examples such as a simple game involving arithmetic operations on natural numbers.

The paper describes the implementation of the strategy language as a prototype using Maude metalevel features and the ongoing implementation in C++ to integrate it with the rest of the Maude system. It also discusses the functions for finding all the solutions for the application of a strategy to a given state term and the processes and tasks involved in executing strategies, such as managing the process queue and informing the owner of a process or task about its success or termination.