This section introduces the formalisms utilized in the paper, particularly focusing on the types of petri nets that are being considered. The various refinements of petri nets are described, providing a brief overview of type refinement and a more detailed explanation of subnet and node refinements. Although the formal specification for type refinement is not fully presented here, a sufficient description is provided to facilitate understanding of the discussion in Section 5.

The petri net refinements discussed are built upon colored petri nets (CPN). Initially, the definition of refinement is tailored for place/transition petri nets and subsequently extended to incorporate colors in Section 4.5.

A petri net is illustrated as a bipartite graph, with each pair of a place and a transition having at most one arc in each direction. The behavior of an arc is indicated by its direction and the value of 'w'. It should be noted that in cases where 'w' is null, there is no arc present.

As mentioned earlier, three types of refinement have been defined and briefly described to aid the reader in comprehending the discussion in Section 5. Additionally, a concise mathematical description of the subnet refinement is also provided, given that it will be formalized in Section 4. These three types of refinement are presented here and further elaborated on later.

The formal definition of subnet refinement is given in this section. Similar to type refinement, only a preliminary idea of this refinement is provided. The formalization of this refinement has been accomplished using one of the methods explained in Section 4, with further details referenced in Section 5.

The subnet refinement can be viewed as an extension of the initial abstract net with a subnet linked exclusively by input arcs to abstract net transitions. This is designed to ensure the preservation of behavior, as the addition of inputs to transitions imposes more constraints on firing. Therefore, if a transition is enabled in the refined net, it remains enabled in the abstract net.

Through the use of the Coq proof assistant, this paper tackles the refinement problem, with considerations made for different levels of automation. The user can either provide the proof in a formal manner, or significant proof tasks can be automated. Coq was chosen for specifying and proving the refinement problem.

The formal proofs of the subnet refinement formalization (Lemma 2.7) are presented in commented Coq code, utilizing the three sets of formalizations introduced in Section 3. The distinctions between the three possibilities lie mainly in the approach to achieving the proof and the level of generalization, whereas the properties introduced by these different representations are not relevant in the proofs.

There is a plan to address the problem using an interface to Petri Net Markup Language (PNML), which is currently undergoing standardization within ISO/IEC 15909-2. PNML aims to become the common language for Petri net tools and can be directly translated into Coq, generating the places, transitions, and arcs.

The primary goal is to develop a Petri net refinement specification that allows a user unfamiliar with formal proof assistants to carry out a formal proof. While the topic of refinement has been extensively explored for other specification languages (e.g., B, VDM/RAISE), to the best of the authors' knowledge, there has been no such work or formalizations of CPN and proofs of refinements.