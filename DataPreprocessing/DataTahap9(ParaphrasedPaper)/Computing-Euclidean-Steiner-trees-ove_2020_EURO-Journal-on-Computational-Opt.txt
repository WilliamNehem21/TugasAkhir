The classical Euclidean Steiner Minimum Tree problem involves a set of points known as terminals, and it has a wide range of applications. The most efficient publicly available implementation of this problem is the Geosteiner package by Juhl et al. (2018), which employs a two-phase approach first introduced by Winter (1985). The first phase generates a superset of full components, while the second phase calculates the minimal subset of this superset to obtain a Steiner tree. The algorithms for the first phase are based on the approach of Winter and Zachariasen (1997), while the second phase is based on an approach by Warme (1998). Additionally, the second phase can be solved using an algorithm for the Steiner tree problem in graphs, as demonstrated by Polzin and Daneshmand (2003). The paper contains computational studies and various improvements detailed in subsequent papers.

The authors also explored several variants of the Euclidean Steiner tree problem, including obstacle-avoiding Steiner trees (Zachariasen and Winter, 1999), Steiner trees in other metrics like the Manhattan distance (Warme, 1997), and Steiner trees that lie within polygons. They note that the specific problem they are investigating has not been previously considered.

The authors propose an algorithm based on a structural theorem of Steiner minimum trees over segments, which enables the use of an approach similar to the one implemented in Geosteiner, allowing them to reuse the implementation of the second phase. Their approach provides an exact solution and is more efficient than an inexact solution when sampling given segments.

The paper is organized as follows: in the subsequent section, the problem is formally defined, and necessary notations and definitions are introduced. In section 3, the main theorem is proved, and the modifications required for the algorithm of the first phase in Geosteiner are discussed. Section 4 demonstrates how to reduce the size of the computed superset of full components. Computational experiments are presented in section 5, followed by the conclusions in section 6.

The paper also introduces the concept of terminal segments and Steiner points within a topology. The authors clarify the specific definitions used in their problem and how they differ from previous work by Brazil and Zachariasen (2016) due to the more general nature of their problem.

In the second phase, the authors aim to select a minimum cost subset of the enumerated full components to form a Steiner tree. This process is explained to work similarly to the classical Steiner minimum tree. The superset of full components is interpreted as weighted hyperedges in a hypergraph, and the minimum cost spanning tree in the hypergraph is computed. The authors utilized the implementation provided by Juhl et al. (2018) in their experiments.

Various pruning tests are discussed, including the implications of geometry on arc restriction and the lune property, and their application in the study.

The authors implemented the algorithm for constructing a superset of full components of an optimal Steiner tree in Java, using only the basic pruning tests known for the classical Steiner minimum tree problem. They utilized the implementation of Geosteiner 5.1 by Juhl et al. (2018) for the selection of the full components of the optimal tree. All experiments were conducted on a single core of an Intel Core i5 2430m processor with 2.40 GHz and 6 GB DDR3-SDRAM memory.