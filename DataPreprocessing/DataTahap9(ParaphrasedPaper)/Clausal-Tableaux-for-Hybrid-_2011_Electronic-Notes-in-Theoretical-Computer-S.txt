The loop ctct is introduced in this work, where the pair ds is satisfactory and contributes the clause d as well as the connection ctds. The assertion ct is then actualized, but the new clause d introduces two unfulfilled assertions, ds and dt. To fulfill ds, a clause supporting the formula is required.

In this paper, a language-theoretic semantics for programs is established, treating formulas as indivisible entities. This semantics forms the foundation for the regular reasoner, separating it from the propositional reasoner. It also plays a critical role in the correctness validations of the modal reasoner. The semantics is a modification of the language-theoretic model of Kleene algebras with tests.

A quasi-branch that satisfies all its assertions may not necessarily have a model. To ensure the existence of a model, specific conditions are imposed on quasi-branches, which serve as invariants of the modal reasoner. One such condition is loop freeness.