Another distinguishing aspect of TRS is its utilization of the elaborate theory of types in PVS to represent TRS objects, such as binary relations (functions in an abstract type t:[t->t]) and substitutions (the subtype of functions from variables to terms:[v->term], with a finite domain). This approach facilitates the straightforward specification of higher-order theorems. In contrast to the first-order formalization of the critical pair theorem in ACL2 presented in previous work, TRS naturally and clearly formalizes higher-order rewriting theorems using the higher-order specification language of PVS.

Section 2 provides the essential background on PVS and the specification of basic abstract reduction notions, while Section 3 outlines the elements used in the specification of the theory TRS. Additionally, Section 4 demonstrates the utility of TRS by showcasing the formalization of the Knuth-Bendix critical pair theorem. Lastly, Section 5 presents related work before concluding.

PVS offers modularity through parameterized theories, a rich type system, and concepts like subtypes and dependent types. The language provides a wide range of built-in constructs for expressing various notions. PVS specifications are organized as a collection of theories, with the most salient ones collectively referred to as the prelude. Each theory primarily consists of declarations, which introduce names for types, constants, variables, axioms, and formulas, as well as importings that permit the importation of visible names from other theories. Parameterized theories are advantageous as they allow for more generic specifications, as exemplified in the ARS PVS theory presented below.

The complete TRS development in PVS 4.2 comprises 350 specified lemmas spanning 2745 lines (82k) and 50489 lines (3.4m) of proofs, which additionally encompass 124 TCCs. The theory ARS encompasses 65 lemmas, five of which are TCCs only.

The work in pretends, like the one presented here, to be a comprehensive formalization of the theory of rewriting. However, in contrast to this work, ARS and TRS were developed using the higher-order language of PVS to represent higher-order objects of the theory of rewriting in a natural manner. Notably, this direct and elegant representation of second-order objects such as reduction relations makes it possible to diagrammatically represent concepts and results from the theories of ARS and TRS.