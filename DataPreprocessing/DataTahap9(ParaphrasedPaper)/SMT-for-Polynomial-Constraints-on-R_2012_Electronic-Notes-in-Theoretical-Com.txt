We utilize a technique called lazy theory learning to interact with MiniSat 2.2. Initially, a satisfiability (SAT) instance provided by a SAT solver describes potential combinations of input ranges. If interval arithmetic (IA) reports unsatisfiability (IA unsat), these combinations are eliminated from the next SAT search by memorizing them as learned clauses for the SAT solver. If IA reports validity (IA valid), any instances within the ranges are satisfiable. If IA neither reports validity nor unsatisfiability (IA sat), each polynomial is examined by testing.

The paper is structured as follows: Section 2 outlines the polynomial constraints and theory learning strategy in terms of abstract DPLL. Section 3 details variations of interval arithmetic and introduces new proposals, Chebyshev approximation intervals (CAI1 and CAI2). Section 4 describes testing strategies. The framework of our Satisfiability Modulo Theories (SMT) solver is presented with examples in Section 5. Preliminary experiments on small examples from SMT-LIB benchmarks are reported in Section 6. Section 7 discusses related works, and Section 8 concludes the paper and outlines future work.

Satisfiability modulo theories (SMT) is a procedure used to detect satisfiable instances under a background theory. A typical arithmetic theory is Presburger arithmetic (linear arithmetic) over integers and real numbers. It decomposes a problem into SAT solving as case analysis and theory as arithmetic conjunctive constraint solving. The interaction between SAT solving and theory involves lazy and eager strategies, which are discussed in detail as abstract DPLL modulo theories.

Reducing the number of unnecessary test cases is crucial for improving efficiency. For example, if we have 10 variables, each with 2 test cases, we would have a total of 210 instances. To solve this problem, we divide constraints into small groups (where constraints in a group share some variables) and compute satisfiable test cases for each group first.

In our approach, we use MiniSat 2.2 as a backend SAT solver to find a satisfiable combination of input ranges for all variables. A satisfiable (SAT) instance is then sent to IA for checking. If the SAT solver returns unsatisfiability, we conclude "unknown" if testing is applied; otherwise, we conclude "unsat" for the final result.

Polynomial p1 was checked by af1, af2, CAI1, and CAI2, all of which gave SAT results. For problem p2, while af1 and af2 detected "unknown," CAI1 and CAI2 detected "unsat" because the latter provided better results for overapproximation than the former in this problem. The initial interval decomposition divides given ranges of variables into ranges with a width of 1.

RSolver develops a pruning algorithm to remove unsatisfied elements, while ISAT applies a tight interaction of SAT solver and eager theory propagation. Thus, conflict detection and theory propagation are directly applied for the SAT solver to provide new assignments. Our approach combines testing (as under-approximation) with interval arithmetic, offering more opportunities to conclude satisfiability, and guiding a more likely range decomposition. We also apply Chebyshev affine intervals instead of using CI in RSolver.
