Reverse engineering often starts with fact extraction through parsing when analyzing a software system. A fundamental component of a fact extractor is the underlying meta-model, which specifies the components and relationships to be extracted. In this study, we propose a meta-model for the Delphi programming language and compare it with the Dagstuhl Middle Model (DMM). We also share our initial experiences with a fact extractor currently in development. The evaluation of our fact extractor with two open-source software applications is presented, highlighting its capabilities, unresolved issues, and reflections on the case studies.

Reverse engineering, particularly architecture recovery, focuses on extracting higher-level representations, such as software architecture, directly from the software system (i.e., the source code) to assist developers in assessing, maintaining, and evolving large-scale software systems. To generate such architectural views, current reverse engineering tools process various artifacts available for the system under study, including source code, scenario profiles, documentation, domain information, and expert knowledge.

Fact extraction from source code seeks to identify information about the system, such as class names and function calls, and serves as a crucial step in reverse engineering techniques. It must often be performed as the initial step before conducting higher-level reverse engineering analysis or architecture recovery activities. The extracted information is aggregated in a fact base or repository, providing a basis for further analysis or recovery tasks.

The structure of this paper includes an overview of the Delphi programming language, a comparison with C++, a description of our Delphi meta-model, its validation with case studies, a discussion of related work, future work in this area, and concluding remarks.

Our fact extractor only identifies calls to libraries and third-party software when access to their source code is available. The lack of access to source code for external entities may lead to missing information, such as elements and relations. We also highlight that the DMM lacks full support for the Delphi programming language, particularly with regards to namespaces (units) and properties, which are considered crucial concepts in Delphi and are supported by our meta-model.

We plan to conduct additional case studies to validate the capabilities of our fact extractor, leveraging its low-level information about the software system to facilitate architecture recovery and documentation. Furthermore, our future work includes using the fact extractor in architecture recovery projects, ensuring its alignment with the introduced meta-model.