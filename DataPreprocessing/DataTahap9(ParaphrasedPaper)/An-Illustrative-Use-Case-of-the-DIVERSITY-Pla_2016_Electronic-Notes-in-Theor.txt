Symbolic execution was originally introduced as a means of executing programs with symbolic parameters instead of concrete numerical values, and computing logical constraints on those parameters at each step. This approach allows the computation of program semantics and their efficient representation in an abstract manner. Model-based testing (MBT) is a widely used application of symbolic execution, where it has been employed to select parts of the symbolic model representation, particularly in cases where models may be infinite due to unbounded loops, and to generate test data from these chosen parts using constraint solving techniques. The increased efficiency of solvers in recent years has contributed to the wider adoption of symbolic execution for these purposes. Many tools based on symbolic execution have been developed for various formal analysis applications, including in the context of (model-based) testing. In comparison to these tools, the Diversity platform aims to provide an extensible platform that accommodates a range of formal analysis possibilities, offering a common symbolic execution platform.

In our framework, a system is defined by a set of asynchronously communicating state-transition systems (STS) that also involve data passing. For instance, when a value is output on a channel (i.e., written to a buffer), it may be consumed later by a different STS using an input action on the same channel (i.e., reading from the buffer).

The firmware is responsible for scheduling the execution of hardware commands according to attached priorities and executing the commands in several phases. It is tasked with preprocessing the received commands for maximum efficiency, adding relevant information, and separating the commands into sub-commands. Additionally, it computes an execution schedule on the fly and sends the sub-commands to the hardware based on this schedule.

We have implemented various exploration strategies for generating the symbolic tree, such as random traversal, classical breadth-first search (BFS), and depth-first search (DFS) traversals. These strategies are accompanied by heuristics that associate weights with each explored condition, thereby influencing the order of exploration.

We conducted trials with different values of k, recording the success rate for 10 trials. For the most effective execution among the successful trials, we also recorded metrics such as the number of execution steps computed, the number of jumps, the execution time, and the number of explored conditions. The symbolic exploration strategy was parameterized with a fixed maximal depth of 5 for the exploration of a sub-tree, the retention of 7 explored conditions in the event of a hit (i.e., at least one transition of interest was covered), and the selection of 5 explored conditions in the event of a jump (i.e., no transition of interest was covered in the sub-tree at the end of its construction).