This paper presents tilc, an interactive application designed to facilitate the teaching and learning of fundamental concepts in pure untyped lambda-calculus. It provides a user-friendly graphical interface that enables users to interact with a parse-tree of lambda-terms and automatically replicate these interactions in the lambda-term itself. This graphical interaction encourages students to engage with lambda-terms, thereby facilitating the learning of lambda-calculus syntax and operational semantics.

The paper is organized as follows: Section 2 briefly explains the language considered in tilc, outlining the basic concepts of pure untyped lambda-calculus. Section 3 details the main features of the tool, using examples to illustrate them and providing an overview of the tool's modular architecture. Finally, in Section 4, the paper concludes and discusses potential future extensions of the tool based on initial feedback from its usage in Girona and input from other locations where the tool is being utilized.

The syntax of lambda-terms can be defined using a BNF grammar. Assuming an infinite set of variables denoted as v, with x, y, z, etc. representing arbitrary variables, the grammar for lambda-terms encompasses any redex, which is considered to be in normal form. A redex is said to occur at the left of another redex if its first lambda-abstraction is located further to the left. The leftmost outermost redex is defined as the leftmost redex not contained in any other redex. The normal reduction order involves firstly reducing the leftmost outermost redex. For example, a term with two redexes is not in normal form.