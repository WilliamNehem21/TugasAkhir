The paper's structure includes an introduction of the graphical approach in section 2, which presents basic definitions and notation. Section 3 establishes and proves conditions for extending monad composition using the graphical approach. Additionally, the paper introduces the problem of generalizing sets of terms in section 4, which sparks an interest in composing monads and a visual interface for corresponding calculations. The conclusions in section 5 summarize the findings, and an appendix contains a standard proof of proposition 3.2 to demonstrate the natural handling of natural transformation properties in the graphical approach.

The paper presents examples of monads and swappers that enable monad compositions. It emphasizes the significance of obtaining sufficient conditions for a composition of monads to be a monad, illustrating how this approach simplifies the complexity of checking monad conditions. The paper also introduces the notion of a completely distributive lattice L, providing the example L={0, 1}.

The paper's impact lies in two aspects. Firstly, it contributes to methods and tools for generating monad compositions, with a focus on composing various powerset monads with the term monad to extend many-valued logic programming. Secondly, it introduces a categorical instrumentation for unification within the framework of using generalised terms.

The complexity of proving composability conditions increases with the complexity of the functors. However, the graphical support provides a benefit by simplifying composability proofs, leading to further examples of monad compositions that offer useful scenarios for generalised terms. The graphical approach is not only a theoretical tool for better understanding the composition of natural transformations but also holds potential for automation and management of computing with natural transformations through a graphical interface.