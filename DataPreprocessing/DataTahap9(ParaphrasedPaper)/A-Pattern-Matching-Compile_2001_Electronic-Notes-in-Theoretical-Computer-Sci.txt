We introduce a new tool, called mtom, designed to efficiently implement rule-based transformations in industrial applications. The tool is meant to bridge the gap between rewriting implementations and practical applications, providing a way to implement well-identified parts of complex applications using rewrite rules. mtom is designed to be integrated with the rest of the application, which is typically written in imperative languages such as C, C++, or Java. It does not depend on a specific term representation and allows users to define and execute rewrite rules on existing data types. The paper outlines the features supported by mtom and discusses its potential applications in industrial and rule-based language implementations.

Rules for matching patterns can be directly implemented in the imperative language, allowing users to work with their own or existing data structures for terms. mtom provides a many-to-one matching compilation, generating functions for matching input terms against a given set of patterns. The tool is designed to be general and simple, performing matching only at the top position of the input term. Furthermore, mtom can generate skeleton functions for normalizing term construction, providing flexibility for users to implement their own evaluation strategies.

The paper presents the design and features of mtom, and outlines its potential applications and advantages in integrating rewriting implementations into practical applications. It also discusses the flexibility provided to users in defining their own term representations and evaluation strategies. The paper concludes by outlining the structure of the following sections, which provide a detailed explanation of the mtom approach and features, and comparisons with existing works in the field.