In recent years, there has been a remarkable increase in the use of timetabling applications. Timetabling involves the allocation of resources to objects in space-time, while adhering to certain constraints, in order to achieve a set of desired objectives, also known as the cost function. Due to the NP-completeness of timetabling problems, they are typically addressed using four main techniques: evolutionary computing, integer programming, constraint programming, and constraint logic programming. Evolutionary computing is based on simulating natural evolution to stochastically explore solutions.

This paper presents a programmed search approach based on knowledge about the solution structure. The method involves quickly generating a seed using local search space pruning, which serves as the starting point for classical propagation and labeling techniques in constraint solving. In contrast to stochastic approaches like evolutionary computing and simulated annealing, this method allows for the rapid identification of an initial solution while still enabling a comprehensive search of the entire solution space using efficient constraint solving techniques. This approach is particularly suitable for problems where solutions closely align with the seed due to the inherent problem structure.

The paper is organized as follows: Section 2 describes the specification of a concrete real-life timetabling problem, while Section 3 details the programmed search approach. Sections 4 and 5 outline the implementation using OPL 3.7 and TOY 2.1.0 systems, respectively. Section 6 presents performance results over a calendar year, comparing and analyzing the outcomes from both systems. Finally, Section 7 summarizes conclusions and proposes future work.

The timetabling problem involves assigning workers to time slots, with distinctions made based on worker qualifications. Each team requires a worker with a qualification level 2 and two workers with a qualification level 1. Work shift rotations and rest periods following night shifts are also considered, along with constraints related to working hours and holidays. The paper specifies a programmed search approach to efficiently find solutions to this complex problem using constraint solving techniques.

The paper also evaluates the performance of the programmed search approach using OPL 3.7 and TOY 2.1.0 systems, highlighting the advantages and limitations of each system. It concludes by identifying potential areas for future exploration, such as incorporating array data structures with decision variable indexing, memory usage analysis, and the addition of an algebraic component to the language to streamline constraint declarations.