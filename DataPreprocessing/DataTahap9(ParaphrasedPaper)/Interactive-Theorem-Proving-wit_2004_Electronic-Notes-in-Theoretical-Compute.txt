The human reasoning style is better matched by the core system than by automated reasoning calculi such as the resolution principle. However, because these calculi were designed for proof-theoretic purposes, interactive proof frameworks based on them still face numerous problems, particularly with regard to the presentation of proofs and the application of assertions.

In response to these challenges, we have developed a communication layer, known as the task layer, on top of the core system. This layer takes advantage of the core system's strength in applying assertions and provides a mechanism for structuring proofs. The task layer comprises a data structure for referencing subgoals together with a set of inference rules defined over this structure. Additionally, the layer provides a proof data structure that represents the proof history.

The representation used in the task layer is an indexed formula tree (IFT), which mirrors a proof state in matrix calculi. This allows us to utilize the rules from these calculi to construct a matrix proof, providing an efficient representation of variable dependencies. The core-calculus utilizes proof states consisting of an IFT representing quantifier and substitution dependencies, along with a kind of working copy actively manipulated by replacement rule applications (FVIFT). The calculus consists of twelve rules, including a cut rule, that transform a proof state into exactly one derived proof state. The system is augmented with the ability to focus the reasoning process on arbitrary subformulas, without necessitating the decomposition of the formula.

We have found that supplying optimal support for focus and rule choice is still challenging. The context of a formula is currently available only as a long and unstructured list of replacement rules, and the number of replacement rules generated from a subtree of an FVIFT is exponential in the number of nodes in that tree. However, the inherent flexibility in proof construction provided by the core system must be controlled during automatic and semi-automatic proof construction.

To address these challenges, we have introduced a task layer for the core system which structures and displays core proofs and aids interactive proof construction. The task layer helps to focus the reasoning process and provides a formal definition of the task data structure, along with a set of implemented task manipulation rules. These rules span from simple logic manipulations to complex rules and speculative rules. One particularly useful rule is the apply-rule, which facilitates the application of assertions by automatically selecting the appropriate replacement rule.

The task layer serves as an interface to the user and aims to keep as independent as possible from the underlying logic layer, with the ultimate goal of making the logic layer exchangeable. This distinction between the abstract level reasoning and the expansion into verifiable proofs at the logic layer is an essential aspect of the task layer's development.

Overall, the task layer represents a significant advancement in interactive proof construction and provides a robust interface for enhancing the core system's reasoning capabilities.