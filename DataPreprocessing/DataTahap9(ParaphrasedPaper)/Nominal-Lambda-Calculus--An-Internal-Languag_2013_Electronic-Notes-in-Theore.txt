(types of functions that depend on atoms) and types of abstractions. We investigate the theoretical properties of nlc, define fm-cartesian closed categories, thereby establishing a categorical interpretation for nlc, and demonstrate soundness and completeness through nlc-classifying categories. As a result, nlc serves as an internal language for fm-cccs. A notable characteristic of nlc is its unique method for encoding freshness using dependent types, offering a new approach to studying the interaction between freshness and higher order types.

Note 1.1: The main category utilized in this study is fmset[5,15], while the category of nominal sets fmnom is also relevant. The properties of fmset are less well-known than fmnom, but both are toposes.

Note 2.1: Until section 5, we focus on a subset of nlc to fully motivate the use of a form of dependent typing for our extension of nel with higher order functions. Abstraction and concretion will be addressed later in the paper.

We introduce two crucial lemmas for proving important facts about nlc. Lemma 3.2 is employed in induction steps where a bound variable in an abstraction also appears in the environment of the abstraction. For an example induction, refer to the proof on page 11 of lemma 3.3, and page 169 for a detailed explanation of the problem. Lemma 3.3 is used in proving proposition 3.4, which underpins our semantics and classifying category construction.

To achieve a completeness result, we need to construct a cartesian closed category from nlc syntax. To accomplish this, we enhance the types, expressions, and rules with a form of dependently typed atom-abstraction. This results in the final form of nlc (with abstraction) for which we have a categorical model that is both sound and complete. It is important to note that we only provide a summary of the details in this preliminary paper, with a full journal version to follow.

Classifying category and categorical completeness: The concept of a classifying category, topos, etc. is a standard one in category theory. To demonstrate completeness, we show that we can construct an fm-ccc from the syntax of an nlc theory (proposition 5.1), together with a generic model (propositions 5.3 and 5.4).

Future work: Our primary motivation for this work is to develop a formal framework for nominal higher order functions, with the aim of proving it as a conservative extension over nel by nominal gluing. Nominal gluing is ongoing, but our preliminary results regarding the yoneda lemma and cartesian closure of nominal functor categories have been presented. With a successful gluing proof, we may be able to derive a form of categorical normalization result, guiding the work towards a more applied direction by constructing an abstract machine for nlc along with its implementation. Is there a form of nominal categorical abstract machine?

We have considered the possibility of presenting the original nel using dependent types in place of freshness assertions. However, the resulting type theory might differ. These dependently typed theories, where a# x: s is wholly replaced by x: sa, might be more expressive than nel theories. This is a topic for future exploration.

Acknowledgments: We extend our gratitude to Ranald Clouston for his extensive comments, John Power for his generosity and assistance during a public holiday, and for other valuable inputs from Martin Hyland and Bill Lawvere. We also thank others who have provided useful insights that have enhanced this paper. Lastly, we express our appreciation to Andrew Pitts for his extensive discussions on an earlier version of this paper, which contained an error, and for assisting with its correction.