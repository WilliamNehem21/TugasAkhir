This paper focuses on model-based testing, which involves deriving test cases from a model representing software behavior. The model can be generated from a formal specification or designed by software engineers using diagrammatic tools. Section 2 provides an overview of model-based testing approaches, while section 3 outlines the technologies to be used in the rest of the paper. Section 4 presents the authors' new contribution, which is still in its early stages. The paper concludes in section 5 and suggests directions for future work.

Scenarios are commonly used to model and analyze software systems, but because they only represent possible execution paths, they are often combined with state machines. State machines are also widely used in component-based developments to provide a more complete description of the system.

One approach to creating state machines is synthesizing them from scenarios, where a state machine is generated for each process in the scenarios, considering all the events belonging to that process. Various algorithms and tools have been proposed for synthesizing state machines from scenarios.

The synthesis process aims to ensure that the resulting state machine accurately represents the scenario specification, capturing all and only the interactions expressed by the scenarios. However, sometimes the synthesized state machine exhibits behaviors that were not present in the original scenarios, known as implied scenarios. Implied scenarios arise from a mismatch between local and global behavioral views and have been the subject of analysis in prior research. An approach proposed in this paper utilizes message sequence charts (MSCs) and high-level MSCs (HMSCs) to synthesize a behavioral model and detect implied scenarios on the synthesized model.

It is important to note that not all implied scenarios are necessarily undesired behaviors; some may need to be accepted or discarded based on their impact on the system. The paper describes a process involving positive and negative scenarios to update the initial specification and iteratively analyze scenarios and state machines. This process aims to identify and classify all implied scenarios as negative or positive by the end.