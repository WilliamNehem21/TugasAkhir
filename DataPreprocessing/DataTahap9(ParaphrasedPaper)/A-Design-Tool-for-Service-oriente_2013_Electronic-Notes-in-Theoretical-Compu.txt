This paper introduces a tool for designing service-oriented systems (SOS) using the resource-aware timed behavioral language Remes. The tool provides a graphical environment for composing services and a textual interface for system description and composition. It allows for automated traceability between the two design interfaces, enhancing the potential of system design by intuitive service manipulation. The paper presents the design principles, infrastructure, and user interface of the tool.

The paradigm of service-oriented systems (SOS) has been proposed to address software integration and composition using loosely coupled and autonomous abstract modeling entities called services. To meet the needs of designing and ensuring the quality of service (QoS) of SOS, an extension of Remes has been developed to enrich it with service-oriented features, such as service interface description, dynamic service composition, and means to check service compositions.

The tool presented in the paper allows for the behavioral modeling of services, integrated textual service composition, and generation of correctness verification conditions for service compositions. It enables tracking changes between graphical and textual views and the automated generation of corresponding verification conditions. The paper outlines the overall approach, the tool workflow, the user interface, model traceability, and verification condition generator.

The tool comprises two functional units - the diagram editor view (DEV) and the console view (COV). DEV is responsible for creating and displaying service compositions using a visual modeling interface, while COV supports the textual description of the system and generation of correctness verification conditions for service compositions.

The tool facilitates system composition using services as basic units, which are registered in a service repository and can be invoked and composed in different ways. Services can be composed using serial, parallel, and list constructors, and are connected via edges on control points.

The user can compose services either graphically or textually, and the tool supports visualization of transformations between the two interfaces, enabling consistency checks, information exchange, and traceability links. The tool also provides a round-trip between views and establishes traceability between the tool views, encompassing service syntax, composition, and correctness conditions.

The paper describes the tool's specification, modeling, and analysis capabilities for SOS and its ability to detect errors. The tool adopts Remes as the service model and uses a hierarchical language for composing existing services into new ones. It provides interfaces for defining both functional and extra-functional behavior of services and allows for rapid modification of compositions through the console. The correctness verification of services is done via the strongest postcondition calculus, and the tool awaits integration with model-checkers and provers for automatically verifying the generated correctness conditions.