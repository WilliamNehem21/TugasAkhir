This academic paper emphasizes the importance of defining comprehensive contracts for software component interfaces, encompassing not only normal behavior but also special cases and tolerated exceptions. Specifically, the paper focuses on the behavioral properties of use cases in the context of the common component modeling example (CoCoME). It introduces the deontic-based specification language CL for articulating the full specifications of use cases and compares three particular properties using both deontic and operational specifications. The paper posits that operational specifications are suitable for normal cases but less adaptable for exceptional cases. This hypothesis is experimentally supported by comparing specifications in CSP (operational) with specifications in CL, revealing distinct differences in the descriptive power of the formalisms.

The paper is structured as follows: it provides a general overview of CoCoME in the next section, followed by a presentation of the CL language and the CoCoME specification in section 3. Section 4 details the three properties to be specified using CL and CSP, and briefly discusses the suitability of LTL and CTL as specification languages in this context. The paper compares the specifications in section 6 and concludes in the final section.

The paper includes an example use case from CoCoME, where the system is obligated to display a full list of items and items running low, allow the manager to enter the amount of items to order, and then place the order and display the order ID. The distinction between the system permitting the manager to perform certain actions and the system being obligated to respond is not explicitly described in the CoCoME specification, but rather assumed from common expectations.

Another example introduces the "completecorrect" action, where the supplier is obligated to send complete and correct information upon delivery. If this obligation is violated, the manager is in turn obligated to send the order back; otherwise, the order is processed, and the system is obligated to update accordingly.

The paper also outlines the specific behavior expected at the cash desk, emphasizing that customers are restricted in the amount of goods they can purchase and must pay cash in order to expedite transactions. Additionally, it describes the relational calculus of object and component systems (RCOS) as a method for developing component-based systems, with syntactic expression of behavioral aspects through UML diagrams and translation to CSP for verification purposes.

Regarding specification styles, the paper demonstrates that CTL and CSP enable the specification of exceptional behavioral aspects in a contract, which cannot be expressed in other notations such as LTL, allowing for the specification of full contracts. However, it notes that model-based formalisms cannot express global properties such as fairness or liveness of a transition system, as they primarily model individual transitions.

Finally, the paper discusses the potential for analyzing the different specification styles, highlighting the amenability of LTL and CTL to model checking. However, it also acknowledges challenges in applying these methods to certain types of specifications, particularly in the case of contrary-to-duty actions. It underscores the difficulty in relating system behavior back to deontic operators and notes the loss of compositionality of contracts for exception handling or contract violations with the encodings used in these approaches. Additionally, it points out the complexities in reasoning about deontic inconsistencies in temporal logics and operational models.