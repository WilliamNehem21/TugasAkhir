The csp-casl specification language provides a unified framework for modeling both processes and data in distributed systems. Our paper details the integration of the hets and cspprover tools to address the challenges posed by csp-casl in combined theorem proving for processes and data. We emphasize the essential role of automated theorem and proof generation in isabelle/hol for the development of this new tool. Through an industrial case study, we demonstrate the scalability of our approach to complex problems.

Our work focuses on providing theorem proving support for csp-casl and showcases its applicability to practical systems such as the ep2 standard. The csp-casl language incorporates a straightforward yet potent concept of refinement, which involves both data and process refinement. While data refinement is well-established in the casl context with existing tool support, we concentrate on process refinement. We leverage existing tools for casl (hets) and csp (csp-prover) which rely on the isabelle/hol theorem prover. This re-use is facilitated by the two-step approach of defining the csp-casl semantics, where data specified in casl is first translated into an alphabet of communications and then used within the processes with standard csp semantics.

The structure of our paper is as follows: Section 2 introduces the csp-casl semantics and presents a case study from the ep2 system. Section 3 describes the existing tools we employ, and Section 4 outlines the architecture of csp-casl-prover. We delve into theorem 2.1, which enables the decomposition of a csp-casl refinement into a casl refinement step followed by a csp-casl refinement step. We emphasize the automatic translation of csp-casl refinement over constant data parts into the input language of csp-prover to address the second step of the decomposition.

The construction of an alphabet of communications in isabelle/hol is crucial, and we detail this process in Section 2.2. Subsequently, we utilize this type within csp-prover to form the type alphabet proc of csp processes over the alphabet of communications. This enables us to discharge theorem 2.1 using various theorem provers such as isabelle/hol or spass. The hets tool is implemented in the functional programming language Haskell and employs a rich type system to capture mathematical notions. It utilizes monadic programming to simulate states within Haskell.