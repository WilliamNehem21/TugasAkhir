The paper discusses the challenges and limitations of current approaches and tools for implementing distributed systems, emphasizing the need for explicit mechanisms to define, coordinate, and implement distributed algorithms and communication patterns. It also presents non-trivial scenarios related to distributed events in order to illustrate the problems encountered in debugging and testing tasks of distributed middleware.

The paper argues for the explicit construction and coordination of complex interactions and communication patterns in distributed applications. It introduces a model for detecting atomic events on any node participating in a distributed application and proposes the use of finite state automata-based models to detect complex event patterns. The paper also describes the main components of an event-based kernel library and its distributed architecture, as well as the concepts of aspects, distributed pointcuts, and distributed advice.

The paper suggests that the proposed model and library can be used to build a sophisticated distributed aspect-oriented language and presents potential future areas of exploration, including the extension of the model and the development of applications such as a fully distributed debugger for Java and dynamic graphical modeling tools.