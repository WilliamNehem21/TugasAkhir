The paper addresses the problem of establishing the satisfaction of a security property by system code annotated with preconditions and postconditions. The authors propose a five-step process for establishing the property. The first step involves proving that the system code is a refinement of the state machine underlying the TLS. The authors demonstrate that all kernel code falls into three major categories, namely event code, trusted code, and other code, which significantly reduces the verification cost. They then establish a mapping from the code states to the states in the TLS, as well as a mapping from preconditions and postconditions in the TLS events to the preconditions and postconditions that annotate the corresponding event code.

The authors separate the demonstration of the benign nature of trusted code and other code and prove that the TLS satisfies properties guaranteeing data separation. By showing that each property is preserved under refinement, they conclude that the kernel code is secure. The natural language representation of the TLS facilitated communication between evaluators and the formal methods team during certification and helped resolve issues early in the process. The authors emphasize the importance of preserving security properties under refinement, particularly safety properties. They also discuss the rarity of manual annotation of source code in the wider software industry and propose techniques for checking and deriving annotations from programs to address this challenge.

Furthermore, the paper highlights the need for new techniques to construct tests from formal specifications, as well as the potential of generating test cases from preconditions and postconditions to check code for errors. The authors underline the significance of automatic test generation from annotated programs in providing high assurance of both security and functional correctness of the code. They also emphasize the need for similar research focusing on programs written in other languages, such as C, to enhance the validation process.