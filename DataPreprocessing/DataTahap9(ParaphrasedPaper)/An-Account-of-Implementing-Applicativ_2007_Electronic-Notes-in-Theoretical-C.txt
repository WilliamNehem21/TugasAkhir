The creation of labeled transition systems from system specifications depends significantly on efficient rewriting or related techniques. This paper presents the implementation of two rewriters in the mcrl2 toolset which work on open terms and utilize nonlinear match trees. A comparison is made with other commonly used efficient rewriters.

The paper begins by introducing the relevant part of the mcrl2 data language for rewriting and the general architecture of the implemented rewriters. The matching algorithm used is discussed, followed by detailed descriptions of the innermost and jitty rewriters. The paper concludes with an analysis of benchmarks to evaluate the performance of the rewriters.

Match trees determine the matching of terms, with each node representing a basic instruction that guides the matching process. The paper explains the rules and optimizations used in matching, and the specialized function for a function symbol. Strategies for rewriting rules are generated from a given set of rewrite rules, and the translation process is discussed, including the addition of annotated function symbols and annotated copies of rewrite rules.

The paper also addresses the performance of the jitty rewriter compared to the innermost rewriters in generating labeled transition systems. The results of benchmarks suggest that the innermost rewriter can compete with the best rewriters currently available for closed term rewriting, and the jitty rewriter shows improvement but is slightly slower due to the construction of more intermediate terms which is expensive.

Furthermore, the paper discusses the implications of adapting rewriters for open term rewriting in functional languages to support labeled transition system generation. The authors argue that such adaptation should be feasible, potentially providing functionality from the expertise of the functional programming community to users of tools centered around process behavior and theorem proving.