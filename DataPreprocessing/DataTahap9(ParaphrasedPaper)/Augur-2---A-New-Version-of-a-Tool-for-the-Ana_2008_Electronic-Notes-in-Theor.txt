This scholarly paper outlines the design and the current status of the ongoing development of the verification tool augur 2, an evolution of augur 1, designed for analyzing graph transformation systems by approximating them with petri nets. The motivation for this new development stems from the need to establish an open, adaptable, and inclusive verification environment. Augur 2 is anticipated to encompass additional features and novel analysis techniques compared to the preceding version.

The initial stages involved the creation of a basic tool that processes gtxl files to generate gxl files. Subsequent iterations required continual incorporation of new attributes and functionalities. Additional algorithms were integrated to facilitate analysis of petri nets based on coverability graphs and backward reachability. Furthermore, an interface to graphviz was established for visualization purposes, and the ability to designate forbidden paths in graphs using regular expressions was also added.

Augur 1 was primarily tailored for approximating unfolding of graph transformation systems, which made it challenging to implement the aforementioned changes and resulted in multiple versions of the tool, each with distinct functionalities. As a result, the new version, augur 2, is designed with a more comprehensive and adaptable software architecture, offering a wider array of analysis and visualization methods.

Augur 2 introduces the capability to work with attributed graphs—graphs with attributes such as integers and strings assigned to nodes and edges—thus necessitating plans to expand existing analysis techniques accordingly. Efforts are being made to enhance input and output support, including the development of an interface to agg. Additionally, a simple programming language for manipulating pointers, translatable into graph rewriting, has been defined to serve as an additional input method.

The tool relies on hypergraph rewriting, where left-hand and right-hand sides can be nearly arbitrary hypergraphs. While the tool adheres to certain restrictions, such as discrete interface graphs and prohibiting node deletion, efforts are underway to relax the constraints for the forthcoming version, augur 2.

Given that graph transformation systems are generally turing-powerful, over-approximation techniques are necessary for their analysis. The tool abstracts graph transformation systems using petri nets, a simpler formalism for which several verification techniques have already been developed. The tool is rooted in an approximated unfolding technique for graph transformation systems, incorporating folding steps that over-approximate but guarantee accurate results.

Central to the software design are the implementation of algorithms as classes. Each program module working with common data structures should be realized as an algorithm, with the flexibility to integrate new algorithms over the system's lifetime. Furthermore, various tools exist for the analysis of graph transformation systems, with some focusing on translating these systems into the input language of a model checker, while others concentrate on developing specialized methods for graph rewriting. Augur 2 encompasses these insights and aims to expand the current capabilities of augur 1 to provide comprehensive analysis and verification functionalities.

In conclusion, this paper outlines the development plans for augur 2, an advanced analysis and verification tool based on unfolding techniques. Augur 1 already possesses some of its anticipated functionalities, and the core part of augur 2, including database management, has already been implemented. Augur 2 is expected to facilitate further case studies that will offer valuable insights for the ongoing evolution of verification techniques.