Debates about the advantages and drawbacks of different formalization techniques for lambda-calculi often rely on subjective arguments, such as the difficulty for humans to read de Bruijn indices or the similarity of nominal approaches to reasoning styles employed in informal proofs. This paper aims to compare four formalizations based on de Bruijn indices and names from the nominal logic work in order to provide concrete insights into the pros and cons of these two formalization techniques. The conclusion is that the relative merits of the different approaches depend on the specific task at hand and the goals of the formalization.

When constructing a formal proof in a theorem prover, blindly applying automatic proof tools often leads to a dead end. A more successful strategy involves starting with a rough sketch containing a proof idea and then translating this idea into actual proof steps in the theorem prover. This approach to formalizing proofs is strongly promoted by the Isar language of Isabelle, particularly in the case of the substitution lemma in the lambda-calculus.

The primary purpose of de Bruijn indices and names from the nominal logic work is to enable more sophisticated methods of representing binders and significantly reduce the effort required to formalize proofs. This is illustrated in the context of the substitution lemma in Section 2 and further exemplified in Section 3 with a brief overview of the formalizations for the narrowing and transitivity proof of subtyping from the PoplMark Challenge. Section 4 provides concluding remarks.

Similar to Barendregt's informal proof, the formalized proof proceeds by induction on the structure of 'm'. However, unlike the informal proof, the induction hypothesis needs to be strengthened to quantify over all indices 'i' and 'j'. This strengthening is necessary in the de Bruijn version to successfully address the lambda-case. With this strengthening, the lambda and application cases become routine.

We have examined formalizations based on de Bruijn indices and names from the nominal logic work. The former approach is well-tested and widely used in many formalizations, while the latter is still undergoing substantial development within the nominal datatype package. Extrapolating from the submissions to the PoplMark Challenge, it appears that theorem proving experts using de Bruijn indices can in principle solve all problems encountered in programming metatheory. Furthermore, the reasoning infrastructure required for de Bruijn indices (primarily arithmetic over natural numbers) has been a part of theorem provers such as Coq and Isabelle/HOL for a long time. In contrast, the nominal datatype package has only been implemented in Isabelle/HOL, with little research on replicating these results in non-HOL-based theorem provers.

Another advantage of de Bruijn indices is that they do not introduce classical reasoning into the formalization process. In contrast, the nominal datatype package employs classical reasoning principles in several instances. It is currently unclear whether a constructive variant of the nominal datatype package that offers the same convenience is achievable. Linked to the aspect of constructivity is the infrastructure to extract programs from proofs, which exists in Isabelle for proofs with de Bruijn indices but is nonexistent for proofs using the nominal datatype package.