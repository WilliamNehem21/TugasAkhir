The example used in this discussion is the mining control system case study, a simplified system in the mining environment that manages mineral extraction from a mine producing water and emitting methane gas. The system comprises pump control, air extractor control, and mineral extractor control sub-systems. This paper focuses on applying a methodology to the air extractor control sub-system to elucidate the theoretical concepts explained further in the paper.

The significance of software architecture has been widely acknowledged as an effective tool for enhancing software quality and reducing production time and costs. Specifically, a software architecture specification serves as a comprehensive system description early in the development life cycle. It offers a high-level behavioral overview of components and their interactions (connectors), as well as a static structure description of the system.

The proposed modeling language, based on the idealized fault tolerant component model, encompasses both the structural and behavioral specifications of a fault-tolerant architecture. The structural aspect outlines the composition of components and connectors into normal and exceptional parts, as well as their relationships. On the other hand, the behavioral aspect specifies the intended interactions of components and connectors, adhering to the rules defined by the idealized component model.

The structural model employs UML components, including normal and exceptional components, to represent the fault-tolerant behavior, as well as ports to handle communication with other components and specialized ports for exceptions communication. Additionally, UML component interfaces are utilized for exceptions propagation, with stereotypes representing handlers and raisers. Meanwhile, the behavioral aspect is described through UML state diagrams, offering a clear representation of component behavior, including exceptional behavior demonstrating recovery measures to restore the system to an error-free state.

Similar to traditional specification-based testing approaches, test cases are viewed as paths covering the behavioral graph derived from the state machine-based specification. These test cases are produced by adequately covering the state machine model of the system. Furthermore, architectural-level test cases are identified by extracting critical service information from the structural model and understanding how the implementation of the system is expected to operate at runtime from the behavioral model of critical and exceptional components.