The light affine lambda calculus is a computational model designed for polynomial time computation. However, some of the terms in this calculus are considered to be erroneous. Intuitionistic light affine logic (ILAL) types only accommodate terms that are error-free, but not all of them. To address this issue, two type assignment systems with intersection types have been introduced. The first system ensures that pseudo-terms that are typable are exactly the error-free terms, while the second system ensures that typable pseudo-terms are those that reduce to normal terms without errors.

Another approach to representing polynomial time computation is through the proofs-as-programs paradigm and linear logic. Two variants of linear logic with polynomial cut-elimination, namely light linear logic and soft linear logic, have been proposed. These systems refine system F and enable the characterization of polynomial time functions. Through the Curry-Howard correspondence, these systems allow the creation of programs that can be evaluated in polynomial time.

The concept of light lambdaterms encompasses terms for which normalization can be carried out without encountering errors. This aligns with the versatility of light lambda-calculus, which can be applied in various contexts beyond second-order ILAL. For example, K. Terui uses it to extract programs from proofs in the context of light affine set theory. Furthermore, extensions of ILAL using recursive types, such as those proposed by other researchers, are also worth considering. This paper aims to address the challenge of classifying light lambdaterms without errors. In Section 3, a formal definition of terms that can reasonably be considered error-free is provided. These terms are referred to as...