The goal of our research was to introduce support for bookmarks in a programming language, allowing users to mark a subterm as bookmarked and later return to that location. Furthermore, we aimed to develop a mechanism for detecting and handling invalidated bookmarks resulting from changes made to the term, particularly when manipulating subterms.

The CLASE framework makes it easier and more intuitive for users to perform operations on a string, and it includes support for bookmarks within the cursor, as explained in section 5. In addition, section 6 delves into related work and provides a conclusion.

Expressions within the framework are categorized as either lambda abstractions, application expressions, or variable expressions, along with associated types. The design of our cursors is akin to the zipper design pattern, enabling efficient upward and downward movement within the term.

Moving around the term involves building a stack of contexts, which necessitates the use of a new data type, referred to as path, to ensure compatibility between consecutive contexts. Furthermore, the framework incorporates data types, primitive movements, and reflection capabilities to facilitate navigation within the language.

In the case of simple languages like the "lam" language in our instance, the framework provides a template Haskell function that automates the generation of modules containing the language instance. Additionally, CLASE offers generalized movement operators, which can be used independently of the cursor's context, and a means for managing multiple tree locations through bookmarking.

Our work builds on the concept of one-holed contexts as discussed in related research, and it explores an alternative approach to the cursor library. In contrast, a different approach to cursor management was explored in previous literature, focusing on parameterizing the zipper library with a traversal function and using delimited continuations for tree navigation in the context of filesystems.