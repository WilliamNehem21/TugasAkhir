The sharing of service or data among tenant applications on a SaaS platform is challenging due to security mechanisms that isolate tenants from accessing each other's data. Despite the coexistence of tenant code and data in the same database, the SaaS security mechanism ensures the separation of tenants.

A service-oriented SaaS approach, employing SOA (service-oriented architecture), separates SaaS domain knowledge from SaaS infrastructure to facilitate various domains. Easysaas introduced a development framework to simplify SaaS development by leveraging SOA and SaaS domain ontology.

Variation points represent locations where variation occurs, and variants are the alternative selections. Software product families incorporate variability management to deal with these differences. Methods for discovering commonalities among different software systems, as well as performing domain engineering to identify commonalities and variabilities within a family of products, have been described. Additionally, a systematic method for providing components that can be extended through variation points has been discussed, along with a proposal to use explicit variability models to derive customizations for individual SaaS tenants.

Crowdsourcing, where tenants with domain knowledge are assigned tasks, allows tenants to outsource some application development tasks to experts. All tasks in each step within the SaaS environment can be outsourced to tenants.

Goodness and importance are computed in two layers: batch layer and real-time layer. The batch layer involves calculating after a certain period in a batch manner, while the real-time layer allows for fast but approximate results. Batch-based calculation can handle a large number of tenants or components and provides accurate results. On the other hand, real-time-based calculation can quickly handle updates but only delivers approximate results.

This paper puts forward a tenant-centric approach to assist tenants in building and publishing customized components and data rapidly and easily. It introduces crowdsourcing as the core of the component development life cycle. Moreover, static and dynamic models have been developed to rank tenants and components, and a ranking architecture is presented to handle cases when the number of tenants and components becomes excessive. Experimental results have demonstrated the effectiveness of the static model, dynamic model, and rank computation architecture.

It is worth mentioning that the proposed tenant-centric approach and ranking architecture in this paper have been inspired by the work of Tsai. Moreover, the paper suggests the integration of public wisdom through crowdsourcing into the component development life cycle. The proposed static and dynamic models aim to rank tenants and components effectively, and the experimental results validate their performance.

The author, Yinong Chen, holds a Ph.D. from the University of Karlsruhe (KIT), Germany, and has substantial professional experience in computer engineering and academia.