Specification-based testing (SBT) focuses on creating test suites based on formal program specifications. Recent work in this field has emphasized the combined use of formal methods and testing to develop high-integrity systems in a cost-effective manner. In the algebraic domain, SBT involves verifying whether implementation under test (IUT) satisfies the specified axioms. Tests are carried out from selected test cases, typically axioms, to exercise referenced operations. An oracle assesses the output criteria based on the test results, essentially checking whether the specification axioms are satisfied by the IUT using a finite test data set.

To establish testing as an effective verification technique, there is a need for well-founded methods and strategies that support the automation of testing activities. Despite exploratory attempts to apply formal SBT in industrial settings, there is still considerable effort required to make testing a standard activity in formal frameworks. The accurate interpretation of test results, proper selection of finite test sets, automation, and technology transfer are all crucial aspects.

Veritas, a model checker for an object-oriented Petri nets modeling language called RPOO, utilizes CTL temporal logic for properties specification. The tool exploits the object-oriented view of RPOO models, thus obviating the need to deal with the syntax of Petri nets for specifying atomic propositions. Veritas is implemented in the SML language.

Testing from a structured specification requires considering the structure of the specification, as the semantics of specifications is given in a compositional manner. This is essential for making sense of axioms. Challenges encountered when testing from structured specifications include defining particular test sets for different signatures, groups of axioms, or individual axioms. It may also be impractical to test certain functions based on a finite test set, particularly more complex and time-consuming ones.

The evaluation module of Veritas is responsible for verifying properties described in the specification against the provided state space. The tool provides textual reports and graphical representations of the evaluation results. The evaluation module utilizes algorithms based on CTL formula checking.

In order to address specific challenges, the operations chosen correspond to a small set of primitive operations that enable the analysis of individual problems encountered when testing from structured specifications. These operations can be combined to define more complex ones, such as enrichment and arbitrary union or sum of specifications found in the literature.

To address the various obstacles faced, the development of test interfaces for the test oracles was carried out according to the planned test. These interfaces contain functions that generate test data sets in SML, and the translation from CASL to SML libraries was performed based on predefined rules. Additionally, the construction procedure used by Veritas to check the path specification was analyzed indirectly by collecting path test data sets from model checking experiments.

The process of building the test interfaces has also led to improvements in the Veritas documentation, promoting a thorough investigation of interfaces and internal algorithms to ensure the correct functions are called with the right parameters. The final test code produced is significantly larger than the IUT code, and it can be reused to run regression tests.

Overall, the paper discusses the advantages and limitations of the approach followed, including the benefits of specification-based testing for validating code and specifications by providing a bridge between them. The tests produced can be used to check future versions of Veritas and other similar model checkers with respect to the CASL specification, as well as to test any new tools developed by the local research team to cooperate with Veritas.