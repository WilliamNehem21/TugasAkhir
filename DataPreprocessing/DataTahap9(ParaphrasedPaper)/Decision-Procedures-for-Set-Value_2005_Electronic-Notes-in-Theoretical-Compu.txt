This paper investigates reasoning methods for programs that manipulate data structures specified using set-valued abstract fields associated with container objects. We compare the expressive power and complexity of specification languages based on 1) decidable prefix vocabulary classes of first-order logic, 2) two-variable logic with counting, and 3) nelson-oppen combinations of multisorted theories. These specification logics can be employed for verifying object-oriented programs with supplied invariants. Additionally, by selecting a suitable subset of properties expressible in such logic, the decision procedures for these logics enable automated computation of lattice operations in an abstract interpretation domain, as well as automated computation of abstract program semantics.

The paper addresses the challenges posed by abstract data types, which can create an unlimited number of instances during program execution, especially when each instance is implemented using multiple dynamically allocated objects that form a linked data structure. The proposed approach involves using abstract set-valued fields as specification variables to describe operations of an abstract data type. The analysis of the program is divided into two parts: 1) verifying the correctness of the implementation of the abstract data type with respect to the set specification, and 2) verifying the correctness of the remaining program where the linked data structure is replaced by abstract set-valued fields.

The paper also discusses the design principles behind the hob project, emphasizing that reasoning about programs with complex data structures becomes simpler when data structure operations are specified in terms of abstract sets of objects associated with each data structure. The hob project splits the verification of programs with such data structures into two tasks: 1) using shape analysis (or other analysis or verification techniques) to verify that the data structure implementation conforms to the specification given in terms of abstract set variables, and 2) using only the abstract set variables in the rest of the program to reason about the behavior of the data structure. The research aims to extend this approach for dynamically instantiated data structures as well.

Moreover, the paper explores the dynamic instantiation of linked data structures, which is a central feature of current object-oriented programming languages. It investigates extending the hob project to verify programs that use dynamically instantiated linked data structures, and proposes a method to specify a linked data structure attached to an object using a finite number of set-valued object fields.

The paper focuses on the verification of programs that manipulate objects with set-valued fields, and presents an approach that uses assume/guarantee reasoning with user-supplied annotations to completely separate the analysis of the implementation of the class from the analysis of the context. Additionally, the paper explores decision procedures for set-valued fields, which can express relationships between sets associated with the same object, aliasing between object references, and relationships between sets associated with different objects. These decision procedures enable the automation of reasoning about programs with set-valued fields, allowing developers to verify a range of invariants of object-oriented programs. Moreover, by selecting an appropriate subset of properties expressible using such constraints, a decision procedure for these constraints enables an analysis to automatically derive the lattice operations in the abstract interpretation domain and to compute abstract program semantics (transfer functions).