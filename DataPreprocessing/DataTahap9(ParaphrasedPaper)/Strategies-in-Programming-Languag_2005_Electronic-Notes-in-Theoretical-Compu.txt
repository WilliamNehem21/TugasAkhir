In the realm of lazy functional programming, various syntactic annotations, such as strictness annotations and global and local annotations as seen in the Clean language, have been introduced to drive local modifications in the fundamental lazy evaluation strategy. The goal is to achieve more efficient program executions. In these languages, constructor symbols are implemented as lazy, meaning that their arguments are not evaluated until required. This approach allows for the creation of data structures that contain elements which, if evaluated prematurely, might result in errors or failure to terminate. While there are several implementation overheads associated with this feature, lazy functional languages like Haskell enable explicit syntactic annotations on the arguments of datatype constructors, which permits immediate evaluation. 

An early attempt to harness programmable strategies as a programming tool is evident in Kirchner's work. Kirchner also outlines several strategic challenges, such as the need to develop languages and combinators for specifying and constructing strategies, analyzing properties of strategic rewriting (such as reachability, termination, and confluence), evaluating and transforming strategies, and utilizing strategies in real-world applications and modern technologies, including theorem proving, programming, XML technology, production and business rules, biocomputing, and more.