We introduce a refinement type system for the LF framework showcasing the decidability of type-checking, even with intersection types, by enforcing well-typedness of only canonical forms. Our bidirectional rules for LF and type refinements enable the derivation of subtyping structural rules, instead of treating them as primitive. With examples from the domains of logics and programming languages, we demonstrate the expressiveness of our system.

Since its inception, LF has served as a platform for formalizing reasoning about deductive systems and, more recently, as the Twelf metalogic for encoding the metatheory of complex programming languages. We have employed LF to mechanize the metatheory of such languages, which are challenging to reason about manually.

In the subsequent sections, we present our refinement type system along with illustrative examples, followed by an exploration of its metatheory and the provision of proof sketches for crucial results, including decidability. We show that subtyping in our approach is defined only on atomic types, but we establish the presence of subtyping at higher types by proving the soundness and completeness of the usual declarative rules with respect to an intrinsic notion of subtyping. We conclude by discussing related work and summarizing our findings.

The non-determinism associated with intersection type checking, as demonstrated by Reynolds, leads to PSACE-hardness even for normal terms in our system. However, employing techniques like focusing, we anticipate that practical cases can be efficiently analyzed for the purpose of sort checking.

Another example we present is the calculus of constructions, which typically involves redundant constructs at the level of objects, families, and kinds. By utilizing sorts, we can enforce stratification and devise simpler typing rules, resembling those assuming the infamous "type: type."

In this segment, we articulate several metatheoretic results about our framework, following a pattern similar to prior work using hereditary substitutions. To save space, we omit proofs that are analogous to those from prior work and only provide sketches of novel results. For complete proofs of all theorems, we refer the interested reader to the companion technical report.