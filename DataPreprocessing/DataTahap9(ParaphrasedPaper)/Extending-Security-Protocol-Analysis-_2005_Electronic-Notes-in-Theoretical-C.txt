We contend that existing formal analysis tools for security protocols are not fully effective and provide only limited assistance to designers of modern complex protocols, protocols in constrained environments, and security APIs. We believe that the conventional assumptions such as perfect encryption need to be relaxed, and other potential threats, such as partial information leakage, must be taken into account for formal tools to remain useful and gain widespread real-world application. Through simple example protocols, we demonstrate several attacks that are crucial to avoid in security API design, but have not yet been modeled using formal analysis tools. We aim to distill the fundamental concepts underlying these attacks and articulate them as essential functionalities for future research and tool development.

In contrast, theorem provers operate at a higher level of abstraction to search for chains of logic that serve as a convincing proof that a specific property always holds, or to find a counter-example in the process. Various proof search strategies, often based on the foundational resolution strategy proposed by Robinson, are employed.

Additionally, reasoning logics, such as the ban logic, have been instrumental in the comprehension and advancement of formal analysis of security protocols. However, the ban logic itself has not been widely utilized for identifying flaws; primarily, it has been employed for retrospective analysis. Individual researchers frequently employ custom extensions and enhanced logics in the protocol design process.

The analysis of security APIs closely parallels the analysis of protocols. For instance, a cryptographic processor that is network-attached and utilized as a service by one or more users, similar to a trusted third-party in a security protocol, provides its functionality through an application programming interface (API). Users are able to outsource their sensitive and computationally intensive security operations to a dedicated, optimized device, which may also have additional security features and responsibilities not typically found in a standard personal computer.

In practice, disclosing error conditions and codes often results in leaked information, which can be explicitly conveyed in a message or indirectly revealed through timing patterns indicating abnormal execution or premature termination of an operation. Bleichenbacher and Manger have both proposed attacks on various RSA padding schemes, wherein an error response or the timing of such a response leaks information about the plaintext, enabling a chosen ciphertext attack on RSA. Often, information leakage may not be apparent during the design process but becomes evident during implementation. The challenge for attackers lies in the possible inability to clearly identify the type of information being leaked and how it can be exploited. Automated analysis to detect such issues in security APIs would be advantageous. Integrating existing tools to reason about Triple Data Encryption Standard (3DES) as three individual cryptographic operations appears to be straightforward. The key challenge here is not just the ability to reason, but rather the capability to...