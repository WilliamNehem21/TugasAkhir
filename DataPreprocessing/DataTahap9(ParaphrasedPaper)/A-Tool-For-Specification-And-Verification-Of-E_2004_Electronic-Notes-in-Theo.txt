The remainder of the paper is structured as follows. In Section 2, we examine the key technical constructs used throughout the paper. In Section 3, we introduce and discuss a method for verifying epistemic properties of a multi-agent system (MAS). Section 4 provides a detailed presentation of the tool that enables us to perform this verification, while in Section 5, we demonstrate how this methodology can be applied to a well-known example.

Over the past two decades, advancements in data manipulation techniques, particularly those utilizing binary decision diagrams (BDDs), have significantly enhanced the efficacy of this approach. Model checkers employing BDD-based techniques can now scrutinize a large number of states. Additionally, alternative methods involving automata have been developed.

Following this approach, a variety of systems, including communication protocols and hardware components, have been verified using temporal languages. While these systems are not agent-based, they represent standard distributed processes. If we wish to apply this methodology to agent verification, we must integrate these techniques with an agent-based semantics, such as interpreted systems.

Regarding model checking of epistemic formulas, this paper utilizes Akka 4, a Kripke model editor that supports model testing by Lex Hendriks. Akka enables the input of a model description and evaluation function for checking formulas. It imposes no restrictions on formula syntax, allowing for the incorporation of multiple modal operators and nested modalities. The model and evaluation function, in Akka syntax, are provided by the parser in the previous step.

The translated specification can be input into the translator to generate the SMV code for Example 8. This SMV code can then be utilized by NuSMV to produce the set of reachable states. For Example 8, this comprises 96 out of 629,856 potential combinations of local states and actions as represented in NuSMV. 

Logical analysis has historically played a vital role in examining communication within multi-agent systems, encompassing both human and computer interactions. While verification of communication protocols has relied on theorem provers and model checkers centered on temporal languages, these tools are suitable for low-level communication protocols but are not designed to represent other modalities, such as knowledge. In this paper, we endeavor to bridge this gap by outlining a path from a concrete MAS specification to the construction of execution traces and property verification.

We have specifically presented a tool for model checking epistemic formulas in multi-agent systems, employing interpreted systems as a framework for MAS specification. We have also suggested how a model checker for temporal models (NuSMV) can be employed to verify epistemic properties. We have discussed a software tool for facilitating the necessary translation.

The compilation into SMV, generation of global states, and testing of epistemic formulas all exhibit reasonable scalability. However, while this approach may not match the speed of the fastest methodologies, it is noteworthy that it facilitates the establishment of a link between protocol specification and model checking by automatically compiling one specification into another, thereby enabling verification of epistemic properties.