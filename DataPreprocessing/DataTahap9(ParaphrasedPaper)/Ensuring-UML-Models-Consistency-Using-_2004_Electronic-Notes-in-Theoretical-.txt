The importance of ensuring consistency in UML models is growing, and having a tool to check this consistency is highly beneficial. Using the XMI standard, consistent models can be transferred from the checking tool to any UML tool. This paper demonstrates, through practical examples, that employing a framework based on OCL is a valuable approach for verifying UML models. The examples reveal deficiencies in the UML definition and demonstrate that OCL provides the necessary support for managing tool peculiarities.

The problem of checking UML model consistency is becoming more challenging due to the increasing number of UML users and the growing number of models being exchanged between different users and tools. Additionally, the use of MDA in application development requires models to be semantically correct. Detecting and resolving model errors in the early stages of software development can lead to faster time-to-market and reduced costs. Constructing models within a methodology framework for specific application domains and programming languages underscores the importance of automating operations such as checking the model against methodological rules, application profile-dependent rules, and target programming language rules. OCL facilitates the straightforward specification of these rule categories and has been part of UML since its first publication, serving as the only textual formalism for defining UML static and user model semantics.

Different UML tools support various types of checks using different methods. While tools supporting scripting languages offer flexibility, they also have drawbacks, such as the need to manage and reuse specifications effectively. The paper presents models created using popular tools, and using OCL, inconsistencies in the models were identified that were challenging or even impossible to detect using existing case tools.

The Kent Modeling Framework (KMF) provides tools to support model-driven software development, with its core tool, ToolGen, used to generate modeling tools from metamodels. KMF supports the transfer of UML models using XMI, but the downloadable tool version is still in the early prototype stage and may not be suitable for checking real-life models.

While the well-formedness of UML models may not always be correct, existing tools often provide limited information in identifying the causes of rule failure. For instance, the Use UML tool offers OCL support at the model level, but its repository implements only part of the UML 1.3 metamodel, making it difficult to check the well-formedness of UML models comprehensively.  

The experiments in the paper confirm that using OCL to check UML model consistency is a valuable approach with tangible benefits. In particular, OCL can identify various types of inconsistencies not detectable by other approaches and can account for the peculiarities of different tools. This demonstrates the value of OCL as a potential de-facto industry standard for checking UML model consistency.