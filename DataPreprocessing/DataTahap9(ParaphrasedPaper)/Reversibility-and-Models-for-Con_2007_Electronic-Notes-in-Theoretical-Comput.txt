The reversible version of CCS, known as CCS with Communication Keys (CCSK), allows for modeling and analyzing bidirectional behavior of systems, such as the binding and unbinding of molecules in biochemical reactions. The definition of CCSK is presented in the style of structural operational semantics (SOS), and it also includes a procedure for converting operators of other process algebras into reversible operators using the SOS approach. The key idea is to convert dynamic operators (which can be destroyed in a transition) into static operators (which are preserved) using new auxiliary operators. For example, both sides of a choice (p + q) are retained. As a result, process terms in the new reversible language do not change their overall structure during computation. A crucial part of the procedure involves the use of communication keys, which are unique identifiers assigned to and recorded in the syntax of past actions, and are essential for the communication mechanism to function correctly in both forward and reverse directions. In contrast, in reversible CCS (RCCS), past behavior, including communication, is stored in external devices such as memories.

In the academic literature, a labeled transition system (LTS) may or may not have an initial state. An LTS is defined as a structure that specifies a transition relation with no initial state, while an LTS with an initial state can be seen as a rooted labeled transition system.

For example 3.4, we consider the parallel switch described in [10, example 1.1.7], where the bulb will light if either of two switches is closed. This serves as an example of "orcausation," where a disjunction of events causes an event. If we have events b (bulb), respectively, they are clearly fr bisimilar and have auto-concurrency and auto-causation, respectively. It is worth noting that CCSK processes a|a and a.a are not fr bisimilar. Using the notation from [reference], after performing a, a, the resulting configuration is given by...

The paper also discusses the order-preserving nature of the system, with a demonstration of a<c b if and only if a<d b for all appropriate events identified by their labels a, b. An assumption for contradiction that a<c b and not a<d b is made, and a detailed explanation follows to prove the order-preserving property.