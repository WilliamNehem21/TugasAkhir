The SOC paradigm has seen successful instantiations in technologies such as CORBA, DCOM, J2EE, and IBM WebSphere, with web services emerging as the most successful recent instantiation. These web services allow for the publication, location, and invocation of operations via XML messages conforming to standard formats, and have inspired the development of new languages and technologies, as well as significant investments from international companies.

However, current software engineering technologies for SOC still lack rigorous formal foundations, presenting a gap between practical programming and theoretical formal methods and analysis techniques in the design of SOC applications. Addressing challenges such as asynchronous interactions, concurrent activities, workflow coordination, business transactions, failures, resource usage, and security within a diverse component environment requires new approaches. As a response, process calculi have been proposed as a foundational research cornerstone for the specification and analysis of concurrent, distributed, and mobile systems.

Building on process calculi and the standard language for orchestration of web services (WS-BPEL), a new process calculus called COWS (Calculus for Orchestration of Web Services) has been developed to specify and combine service-oriented applications while modeling their dynamic behavior. COWS is designed to handle distinctive features of web services, including correlation-based communication, compensation activities, service instances and interactions among them, and race conditions.

The paper presents the main features and syntax of COWS, using an Italian-English translation service as a modeling example. The symbolic operational semantics for COWS are introduced and applied to the monadic variant, with plans to extend it to polyadic communication in subsequent sections.

Distinctive features of COWS include asynchronous communication, polyadic synchronization, pattern matching, protection, and delimited receiving and killing activities, making it different from existing process calculi. Additionally, the authors have developed a number of analysis methods and tools for COWS, including a type system for checking confidentiality properties, a logic and model checker to express and check functional properties, and a stochastic extension for quantitative reasoning on service behaviors.

For more information and examples illustrating the unique features and expressiveness of COWS, readers are referred to additional resources.