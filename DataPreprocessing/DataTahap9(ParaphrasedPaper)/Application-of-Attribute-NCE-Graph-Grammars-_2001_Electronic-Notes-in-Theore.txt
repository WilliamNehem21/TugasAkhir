This paper focuses on the manipulation of tabular forms for program specifications using a specific graph grammar, HNGG. The editing methods are formalized by expanding the concept of the Cornell program synthesizer to attribute-directed graph grammars (ADGG). The paper also discusses the algorithms involved in these editing methods.

Editing tabular forms mechanically is a critical aspect of software engineering methodology. The Cornell program synthesizer, known for its successful use of attribute grammar, is often described as a structured and text-based editor. Tabular forms can be represented using various models, and we assign each item in the tabular form to an attributed node to naturally represent their order and location. As tabular forms are generally unbounded in terms of the number of items and have a meaningful order, they can be denoted using a graph grammar.

We suggest that mechanical processing of tabular forms can be effectively achieved through syntactic manipulation of graphs. Within HIFORM, the inner structure of each form is defined by an attribute-directed graph grammar, and HIFORM forms are specified by the graphs generated by this grammar.

We introduce an editing method based on the attribute-directed graph grammar of tabular forms with a uniform cell size, incorporating attribute rules for mechanical drawing to edit valid tabular forms as defined by the ADGG. An editing algorithm with attribute rules for primitive drawing is presented, which operates in linear time.

These syntactic editing methods could be extended to the manipulation of spreadsheet languages. We are currently reconstructing attribute rules for more advanced drawing techniques and are exploring other manipulation operations such as division and combination. Additionally, we are in the process of developing a tabular-form editor system.