Numerous source-to-source transformation tools rely on top-down parsers, which constrain users to employ grammars without left recursion. However, removing left recursion from a given grammar often results in a less readable form, hindering a user's ability to focus on the original grammar. Furthermore, when a tool is implemented based on a different grammar than the one in the original language definition, questions arise regarding whether the tool captures the semantics of the original language. Additionally, existing semantic implementations for the original grammar cannot be directly reused.

This paper addresses the automatic migration of software, specifically the semantic rules, induced by a change in the grammar. It revisits the issue of left recursion removal in the context of grammar adaptations and demonstrates that, while removing left recursion, the semantic rules can be migrated automatically. This allows a programmer to continue using semantic rules on a left-recursive grammar, and the paper explains and justifies this problem.

The need for left recursion removal in grammars stems from the requirement to adapt the grammar to meet technical demands. Many syntactical structures are naturally expressed using recursion, often involving both left and right recursion. However, tools like ANTLR, JavaCC, TXL, and Prolog-based tools, which are somewhat involved in recursive descent parser generation, may lead to infinite recursion. Left recursion removal has been known in the field of compiler construction for over 40 years, predominantly regarding context-free grammars or compiler development. However, the necessity of left recursion removal arises not only in compiler construction, but also during language development, prototyping, and software maintenance, especially for adaptations in already used and tested grammars.

The technical challenge associated with left recursion removal is that it often results in a less readable grammar, necessitating more complex semantic rules. Furthermore, when a language's syntax is modified due to technical demands, the semantics are also altered, raising questions about the unchanged meaning of a language construct. Additionally, if there are semantic rules for the left-recursive grammar already in place (e.g., logic language), their compatibility with the changed grammar needs to be addressed.

The paper includes sections discussing attribute grammars, the algorithm for left recursion removal for S-attribute grammars, and a prototype implementation of the approach using TXL. It also highlights the importance of grammar engineering and the structured process of recovering grammars from language references, compilers, and other artifacts. Additionally, it discusses related work on automatic migration of transformation rules after a grammar extension has been made, emphasizing the reuse of existing semantic rules for the new grammar.

In summary, this paper contributes to the field of grammar adaptations and focuses on semantic rules associated with grammar productions. The approach aims to reuse existing semantic rules for the new grammar and offers programmers the opportunity to specify semantic rules on a grammar closer to a grammar specification. However, one disadvantage of the approach is the doubling of attribute numbers and the introduction of additional copy rules, which adds complexity and overhead to the tool construction process. Nonetheless, the paper provides the necessary transformation steps for the grammar and justifies the approach.