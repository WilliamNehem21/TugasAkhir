There are various methods for implementing program visualizations, ranging from simple moving picture animations to more sophisticated visual interpreters that can work with any program code. While basic visualizations like moving pictures may have limited interaction with the user, program visualization tools such as Jeliot 3 and VIP offer more flexibility and are freely available for introductory programming levels.

A typical program visualization tool displays the visualized program code in a window, which may also include brief comments to aid in explaining the program's execution to the student. To prevent the source code from becoming excessively long due to additional instructions, these instructions can be placed in a separate window and made visible only when the corresponding line of code is being executed. By adding annotations to define the visibility of instructions based on the program's execution order, the tool developer can make the instructions more effective and engaging for the student.

In order to support interactive elements within the visualization, it is proposed to use the visual interpreter for interpreting visualizations and implementing exercises. Annotations can be used to hide certain parts of the code for testing purposes, with the test results determining the display of instructional text for the student. Additionally, the input stream behavior during code visualization and testing is discussed, emphasizing the importance of pre-defining input for testing in order to ensure fairness and eliminate potential cheating.

It is suggested that this functionality can be easily incorporated into an existing interpreter-based visualization tool, allowing for the creation of visualization exercises that actively engage the student. Attention is also drawn to the interpreter's effectiveness, particularly when running tests in hidden code, and it is recommended to ensure that the interpreter is efficient enough to run tests within a reasonable timeframe.

Overall, the addition of annotated instructions to a visualization tool can significantly expand its pedagogical utility, allowing for the development of engaging visualization exercises and problem-solving scenarios.