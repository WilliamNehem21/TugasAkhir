A new set of algorithms [7, 8] is currently under development to support multi-core verifications using the spin model checker. The design of these new algorithms has been guided by the principle of minimizing interference with existing algorithms for verifying safety and liveness properties. These extensions are intended to maintain the existing verification modes and optimization choices, such as partial order reduction, bitstate hashing, and hashcompact state storage. Furthermore, the computational complexity of the verification procedure remains unchanged, ensuring that the verification of all correctness properties remains linear in the size of the state graph, even when parts of the search are conducted in parallel. The efficiency of the spin algorithms is well-known, and efforts are being made to preserve this advantage, as it can be challenging to outperform a single-core run.

This paper provides a more detailed exploration of one of the new algorithms, focusing on the algorithm for verifying safety properties. This algorithm is based on a stack slicing method, which not only aims to scale performance linearly with the number of available CPU cores but also presents unexpected benefits. The algorithm begins with the start() routine being initiated on each CPU, with a unique core_id number passed to each one. The depth-first search procedure involves checking for the preset handoff depth and subsequently transferring the state to another CPU if certain conditions are met. Additionally, a garbage collection process is implemented to recycle redundant stack frames, which introduces the need for locking and may impact overall runtime performance.

Despite its relatively simple load balancing method and minimal interference with the existing depth-first search process in spin, the performance of the slice stack algorithm is surprisingly good. The handoff depth contributes to both locality and independence between cores, while also facilitating trivial load balancing. Moreover, different engineering tradeoffs can be considered to optimize the algorithm's performance.

The paper also discusses the performance comparison of multi-core algorithms across different models, as well as the impact of verification complexity on the performance of the algorithms using different numbers of cores. Various experiments and performance evaluations were conducted, and it was observed that in some cases, the performance of the alternative algorithms on a higher number of cores did not significantly surpass that of the spin algorithm on fewer cores. The paper acknowledges that the results were not exclusively positive for spin, as there were instances where the dual-core liveness verification algorithm in spin 5.0 did not yield a meaningful improvement. Despite this, the paper highlights that identifiable improvements can be achieved in specific cases and emphasizes the need for continued exploration to discover generalizations and extensions of the algorithms.