From this perspective, the concept of intersection on types may initially appear obscure due to the crucial nature of the introductory rule. Specifically, the introduction rule states that a term "m" has type "∧" if and only if the same term "m" has both type "A" and type "B." In logical terms, "∧" becomes a proof-functional connective, restricting the classical conjunction; the proof of the "∧" formula depends essentially on intensional aspects of the component subformulas, as they must be proved by the same proof.

As formal definitions will clarify, both the order and position of each formula in a hyperformula are significant. However, during the derivation, a component of a hyperformula can move to a different position for fusion with another component. For this reason, we use a special marker, "∅," to denote a hole in a parallel composition. In other words, "∅" can be considered as a logical constant, whose meaning is simply the lack of information. It does not contribute to forming implicative and conjunctive formulas, but rather to forming hyperformulas.

The global rules (!i) and (!e) involve the entire hyperformula. With (!i), one may discharge an assumption only if the same activity is done in all the other components simultaneously. This means that what is really discharged is a component of a parallel composition of assumptions, and each component of the hyperformula-assumption is discharged by each component of the hyperformula-conclusion.

In order to deduce an "∧" formula, a richer context is required. Firstly, all the assumptions used in all the conclusions must be composed in one "∧" formula. Then, several copies of this "∧" formula, composed by "j" in one hyperformula, are available as assumptions for the deductions, which have to proceed in a parallel way in order to fuse their conclusions at the final step. In other words, the main difference between a deduction of "j" and a deduction of "∧" consists in using different resources (assumptions) in a different way during the parallel deductions of "j" and "∧," respectively.

In this section, we define a labeling procedure that associates terms to proofs. This annotation of proofs by terms is instrumental to the isomorphism between t^a and hl. Informally speaking, the first step will consist of labeling the context of a deduction by associating distinct lambda variables to hyperformulas, which are assumptions. Once a labeled set of assumptions is provided, any (!i) and (!e) rule application will correspond to performing an abstraction and an application on the label, respectively. Local rules, namely (^i), (^e), and (jw), do not modify the term decorating the proof. Finally, the term associated with the entire proof will encode, by its structure, the deductive history of the proof.

A first step toward this result is to define an interpretation of formulas and hyperformulas as types. Formulas of Definition 3.1 can be understood as types, mapping propositional variables, "!" and "∧," into type variables, arrow and intersection on types.

Consider the case when the last applied rule is (!e). Then, by the induction hypothesis, bi"∈ m: i!i and bi"∈n: i, where bi=(∅)i. Hence, by using the typing rule (!e), we obtain the thesis bi"∈mn: i.

The most interesting application of the logic we propose here should be the definition of an explicitly typed lambda calculus with intersection types. This would be a very powerful functional language, in which all (and only) strongly normalizing terms-programs have a well-typed version. It is in this context that we are currently investigating such a typed lambda calculus. Deduction rules of hl and labeled proofs suggest a smooth solution to this further issue.

We would like to express our gratitude to a group of Ph.D. students in Siena, C. Bianchini, D. Luchi, and S. Sadocco, for their helpful discussions and ideas that originated the notion of parallel deductions presented in this paper. We are also thankful to F. Barbanera and M. Dezani for their useful suggestions.