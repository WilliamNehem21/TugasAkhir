The paper introduces a new constructor, "link," to establish the necessity of proofchecking deductions of type t with deductions of type t j. This approach allows for constructive reasoning about the admissibility of valid statements in t via t j.

The paper also discusses how different implementations of the instack module signature, such as using lists or arrays of integers, can result in varying computational values due to the induced changes in the links within the source code.

As part of future work, the paper aims to expand the computational relevance of the full calculus (jcalc) by connecting it with higher-order module systems, where module signatures can refer to other module signatures that are implemented by a third module. The linking processes in such systems would fully utilize the type system. Additionally, the paper mentions that cut-elimination results are currently being developed.