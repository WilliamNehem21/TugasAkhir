In this study, we investigate the potential utility of the Feijen and van Gasteren programming method in the construction of security protocols. This method focuses on the generation of concurrent programs from a formal specification and relies on common concepts such as invariants and pre- and post-conditions. We demonstrate that fundamental security principles like secrecy and authentication can be effectively specified using this approach. By making some minor extensions, the formal reasoning style of this method can be adapted for use in the domain of security. To illustrate our approach, we examine an authentication protocol and a public-key distribution protocol, as well as their composition. While this work does not introduce new protocols, it offers a new perspective on describing, constructing, and reasoning about security protocols.

Ensuring the formal correctness of security protocols is generally considered crucial. The most common approach to achieving this is through verification after the protocols have been designed, with typical methods including automated state-space exploration and interactive theorem proving. However, the actual process of designing and reasoning about security protocols is still widely regarded as complex.

Various specific approaches for reasoning about security protocols have been put forward. In contrast, we explore the use of a general method that provides greater flexibility and enables integration with techniques developed for other application domains. A similar approach has been investigated in the context of data refinement, though its complexity remains a challenge.

At the core of the Feijen and van Gasteren method for constructing concurrent programs is the principle of simplicity of exposition. This method is rooted in the classical axiomatic theory of Owicki and Gries, wherein reasoning about execution traces is replaced by reasoning about assertions and invariants, i.e., predicate abstractions of states. This method has proven effective in various application areas. In this study, we examine its potential for the formal derivation of security protocols.

To showcase our approach, we reconstruct the authentication protocol of Needham and Schroeder. Our derivations naturally avoid the well-known attack identified by Lowe. In addition to this classical authentication protocol, we also consider a public-key distribution protocol and discuss their composition.

In the following sections, we provide an overview of the theories and methods used in our approach. We then describe our derivation approach and present our specification of authentication. We illustrate our approach using an authentication protocol and a public-key distribution protocol, and we explore the composition of security protocols using these results. Finally, we draw conclusions and outline potential future work.

The programming language used for the components is based on the guarded command language, and the semantics of the atomic statements follow from the weakest liberal precondition (WLP) and weakest precondition (WP) predicate transformers. Communication between components is facilitated using messages, and the types of messages can be defined recursively.

We elaborate extensively on the formal reasoning approach by providing a detailed derivation of the authentication protocol of Needham, Schroeder, and Lowe. Our work is based on the authentication specification, focusing on singleton sets of honest components for simplicity reasons.

Our treatment of intruders is based on a technique for faulty channels. We also address progress and termination of security protocols, particularly focusing on the communication behavior of the intruders.

Throughout the study, we emphasize the importance of simplicity and the need for manageable derivation techniques to prevent the introduction of errors and to highlight design decisions. We present simple specifications for secrecy and authentication using pre- and post-conditions and invariants. We also slightly modify an existing approach to address the interference caused by intruders.

In conclusion, we assess the effectiveness of the general reasoning style from the Feijen and van Gasteren programming method in the context of security protocols. We highlight the avoidance of known attacks and the natural development of protocols, and we stress the importance of maintaining manageable derivation techniques to avoid errors and emphasize design decisions. We also suggest potential future work in the form of developing an approach for automatically verifying the derived annotation using theorem provers, while maintaining a focus on notational concerns to effectively derive and reason about protocols.