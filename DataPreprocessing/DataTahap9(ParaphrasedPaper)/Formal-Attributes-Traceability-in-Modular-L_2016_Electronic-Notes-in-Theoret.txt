The development and implementation of domain-specific languages (DSLs) can be accelerated by employing modularization and component reuse. While various modular development frameworks have been created to facilitate information sharing among components through attributes, the use of modularization can lead to isolated development and inconsistent attribute usage due to a lack of coordination. This paper presents a type system that enables the tracing of attributes and static validation of composition against the semantics of DSLs. To address issues related to attribute well-definedness, the paper also introduces a formalization of the framework Neverlang, along with a small-step operational semantics and a type system for type-decorated slices. Additionally, the paper outlines a type inference algorithm and discusses how the proposed system can be applied to related work.

One approach to easing the development of DSLs involves modularizing the language and its implementation by composing loosely coupled language components. The paper discusses several modular development frameworks, such as LISA, Jastadd, Silver, Spoofax, and Neverlang, that have been developed to support this approach. These frameworks allow for the definition and implementation of language components and support the composition of these components through their syntactic descriptions.

In Neverlang, a language component, referred to as a "slice," defines its syntax and semantic roles, along with associated semantic actions written in a Java-like DSL. Semantic actions can reference nonterminals using labels and are used to define, access, and modify attributes of syntax trees. However, the dynamic nature of attributes in Neverlang can lead to situations where attributes are undefined when needed, causing potential errors during computation.

To address the issue of attribute well-definedness, the paper presents a formalization of Neverlang and introduces a version of Neverlang where semantic actions and nonterminals are decorated with types to specify the definition and use of attributes. This allows for the static assessment of whether the code of semantic actions is well-typed with respect to the given decorations, thus preventing potential runtime errors. The paper also outlines an algorithm for inferring the necessary type decorations and discusses the application of the proposed system to non-modular development frameworks.

Overall, the proposed type system aims to trace attribute definition and use, ensuring that well-typed components do not cause runtime errors due to attribute misuse. The type decorations required for the type system can be inferred from the definition and use of attributes in the semantic actions associated with the components, without requiring knowledge of the entire language implementation.