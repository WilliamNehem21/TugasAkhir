High-level replacement systems (HLRS) are an extension of graph transformation systems to encompass structures beyond graphs. These systems involve defining transformation rules using morphisms within a given category, allowing one structure to be replaced with another within that category. Similar to other specification formalisms, HLRS are subject to modifications during their development, including local changes (modifying individual rules), modular changes (combining two replacement systems to form a larger system), and global changes (replacing a replacement subsystem with another). These different modification approaches are analyzed, and some results are presented to describe the behavior of the modified system in relation to the original one(s). The applications of HLRS span from graph transformations to diagrams in visual languages and modeling to algebraic high-level nets.

HLRS were developed as an expansion of graph grammars to accommodate structures other than graphs, building on the idea of using pushouts of graph morphisms within a graph to replace a substructure with another graph. This concept has been applied in a rule-based approach to modular system design, wherein a rule represents the visible interface of a module and a direct interfacing of components. Formalizing HLRS for an arbitrary category C involves using a distinguished class of morphisms in the construction of the rules. In the category of graphs, injective graph morphisms are used, while in the category of algebraic specifications, injective strict specification morphisms are employed. The essential concepts of HLRS are reviewed, with further details provided elsewhere.