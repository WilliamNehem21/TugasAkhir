This academic paper introduces the concept of histories into OCL to describe the external behavior of objects and groups of objects, enabling the reasoning about the behavior of complex systems at both local and global levels. The paper formalizes a notion of compositionality through a compatibility predicate on histories, which allows for the verification of models during the early stages of system design.

The paper also discusses the additional behavioral concept of message expressions in OCL 2.0, and highlights a limitation of these expressions. Following the principle of encapsulation in object-oriented programming, the paper separates specifications into local and global parts to describe the behavior of individual objects and their collaboration towards a common goal.

The rest of the paper is organized as follows: it summarizes the proposal on extending OCL with message expressions and demonstrates a weakness in their approach; it describes the notion of events and histories used in the extension of OCL; it explains how the method facilitates compositional specifications and reasoning; it outlines a compositional verification method, and finally draws conclusions and compares results to related work.

The paper illustrates that the proposed extension, based on histories of events, can emulate the message expressions of OCL 2.0 and is more expressive. Additionally, it emphasizes that the proposed extension does not introduce new syntactic constructs to the language and does not require changes to the OCL meta-model. However, it acknowledges that expressions based on histories may be challenging to read.

In summary, the paper provides a formalized approach to historical specifications in OCL and demonstrates its advantages over existing message expressions in OCL 2.0, positioning it as a more expressive and conservative extension of the language.