In this academic paper, the authors explore the formulation and analysis of security concepts within the framework of declarative programming, focusing specifically on confinement properties. They use concurrent constraint programming as the reference language and employ a probabilistic version of this language (pccp) to illustrate the distinction between probabilistic and nondeterministic confinement through program examples. As imperative and constraint programming involve different roles for variables, a direct translation of the notion of confinement is not feasible. Therefore, the concept of identity confinement is introduced, which is more suitable for constraint languages. Additionally, the authors present an approximating probabilistic semantics, which serves as a basis for the analysis of confinement properties and demonstrate its correctness by comparison with the operational semantics of pccp.

Previous approaches have predominantly focused on imperative programming languages, whereas the authors' choice of a declarative language, particularly the pccp language, is motivated by its simple and mathematically sound semantics, which forms the foundation for a systematic program analysis design. The ultimate goal of this research is to develop a methodology for probabilistic security analysis of (probabilistic) programs that resembles classical program analysis methods.

Furthermore, the authors discuss the concept of confinement in the context of imperative programming languages, particularly with respect to the values of high and low level variables. They highlight that nondeterministic confinement is comparatively weaker than probabilistic confinement, as it is unable to capture situations where the probabilistic nature of an implementation may potentially allow for the detection of confidential information. They also mention recent contributions to this problem, such as type-system based security analysis and the use of probabilistic power-domains.

The paper proposes a control-flow analysis approach and provides an abstract specification of the analysis, focusing on essential elements for detecting confinement property violations during program execution. The analysis is proven to be safe with respect to the semantics of the language.

The syntax and basic execution model of pccp are described and compared to those of ccp, with a particular emphasis on the introduction of probability and probabilistic parallelism in pccp. This is followed by a discussion of the effects of certain pccp agents and a consideration of infinite computations in the context of probability distributions.

The authors introduce a notion of observables specific to the probabilistic case, which differs from the classical notion of input/output behavior in ccp. They also define a general notion of computational paths and describe their aim of constructing a framework for analyzing confinement properties of pccp programs.

They outline an analysis aimed at identifying different behavioral structures of agents by abstracting the full semantics and focusing on possible transitions between stores with their associated probabilities. The paper concludes by discussing the possibility of reconstructing the full semantics from this approximated semantics by considering maximal paths.

I hope this helps. Let me know if you'd like me to elaborate on any specific details or to further rephrase any part of the paper.