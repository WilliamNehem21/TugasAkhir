The task mapping problem in heterogeneous systems involves assigning tasks to processors in order to optimize system utilization, load balancing, and minimize execution time. This requires the use of scheduling algorithms. In this paper, we focus on dynamic scheduling for heterogeneous computing systems. We introduce the clustering-based HEFT with duplication (CBHD) algorithm, which combines the triplet clustering algorithm and the HEFT algorithm to efficiently schedule and map tasks on heterogeneous machines. The paper is organized as follows: Section 2 provides an in-depth explanation of the HEFT algorithm, while Section 3 introduces the triplet clustering algorithm. In Section 4, the CBHD algorithm is presented, and Section 5 discusses the performance evaluation and comparative study among CBHD, HEFT, and triplet clustering algorithms. The conclusion is presented in Section 6.

In the CBHD algorithm, tasks are grouped into clusters using the triplet clustering algorithm, and the HEFT algorithm is then used to order tasks within each cluster based on their rank value. Additionally, tasks may be duplicated on processors to improve the performance of the scheduling algorithm, particularly in terms of load balancing and overcoming computation overhead.

The algorithm aims to achieve full utilization and load balancing among processors in the heterogeneous system while minimizing the makespan. Processing is conducted by mapping the main processor (pi) to execute the task and the duplicated task on another processor (pj). Once the duplicated task is completed, the tasks dependent on it begin executing immediately, ensuring that all machines are utilized concurrently.

A simulator called the Distributed Algorithm Simulator1 is used to evaluate the performance of the CBHD algorithm. This simulator supports various network topologies and message passing architectures, and can be executed on a computer with specified hardware capabilities.

Comparative analysis with the HEFT and triplet clustering algorithms shows that the CBHD algorithm outperforms both in terms of makespan reduction (by 2.5%), load balancing improvement (by 70%), and increased processor utilization (by 10%). The CBHD algorithm is available in two versions: with and without duplication. The version with duplication achieves the best performance in terms of makespan, utilization, and load balancing.