The paper introduces an extension of the subclass relation in the context of class properties obtained through modular static analysis. By considering arbitrary class properties, the paper shows that the subclass relation can be represented as an order relation on the abstract domain used for class analysis. This approach leads to a more semantic characterization of class hierarchies and enables effective modular analysis of polymorphic code without the need for theorem provers or unsound methods like runtime assertion monitoring. The paper also demonstrates that class hierarchies can be defined based on arbitrary class properties, and that behavioral subtyping can be formalized within the abstraction interpretation framework, allowing for the use of standard techniques such as domain refinement to improve precision. 

Furthermore, the paper highlights that formalizing behavioral subtyping within the abstraction interpretation framework allows for the application of abstract domain refinement techniques to enhance the precision of observables, leading to more refined class hierarchies. The proposed approach is believed to be effective for designing and developing problem-specific object-oriented languages, such as smartcard programming languages where security is crucial, and for embedded systems that require a constrained subclass relation to ensure adherence to space and time constraints. 

Looking ahead, the authors plan to extend the work to address challenges related to multiple inheritance and Java interfaces. This includes developing a specification language for non-typing properties and using it to prove that a class correctly implements an interface.