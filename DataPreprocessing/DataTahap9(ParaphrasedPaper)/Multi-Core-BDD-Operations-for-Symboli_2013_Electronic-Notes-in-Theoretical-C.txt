This paper discusses the development of scalable parallel binary decision diagram (BDD) operations for modern multi-core hardware in order to improve the performance of reachability analysis in model checking. Unlike existing approaches that focus on performing multiple independent BDD operations, the goal of this work is to parallelize the BDD operations themselves. The paper notes that previous attempts at parallelizing BDD operations have been hindered by communication costs in shared memory.

To address this challenge, the paper proposes symbolic model checking, which represents all states using boolean functions stored in memory using BDDs. The concept of speedup is introduced as a measure of performance gain when parallelizing an algorithm, and the paper explores task-based parallelism frameworks such as Cilk, OpenMP, and Wool for implementing parallelism. It presents the advantages of using the Wool framework for parallelizing symbolic reachability and discusses its scalability in fine-grained task-based parallelism compared to other frameworks.

The paper also discusses load balancing and the impact of concurrency conflicts on parallel programs. It explains the use of non-blocking algorithms to avoid the negative impact of locks on speedup. Furthermore, it details the encoding of values in 32 bits to prevent integer overflow and presents experimental results using a representative selection of models to demonstrate the performance and scalability of the parallel BDD operations.

The experimental results show that the parallel implementation achieved relative speedups of up to 32 using 48 cores, outperforming the popular BDD package Buddy which reached a speedup of up to 12 using the same setup. The paper concludes that parallelizing BDD operations at a low level is a promising approach to achieving significant speedups for symbolic reachability on multi-core processors with a non-uniform shared-memory architecture.