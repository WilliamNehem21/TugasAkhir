In large component-based systems, the growing concurrency among components has posed challenges for applying formal verification techniques to ensure interaction correctness. To address this, we have employed parallel LTL-like model checking to handle the complexity of the models. Our approach was applied to verify a complex model of a real system created within the COCOME modeling contest, focusing on checking the validity of the model and the correctness of the system by examining various temporal properties. These properties include component-specific characteristics, such as local deadlocks of components and correctness of given use-case scenarios.

In recent years, the software industry has increasingly adopted component-based software development as an alternative to traditional techniques. While this approach significantly reduces development costs through the use of reusable components, it raises concerns about the correctness of systems, particularly when components are provided by different vendors.

We used the CI automata language to model the behavior of component-based systems, representing each component as a labeled transition system with structured labels and a hierarchy of component names. For property specification, we utilized a modified version of linear temporal logic, referred to as CI-LTL, designed to express properties related to component interaction.

The tool Divine, which we used for verification, offers various LTL model checking algorithms. In our case study, we employed the OWCTY algorithm due to its efficiency in a distributed setting, despite its higher time complexity in certain cases.

In our modeling example, a trading system was depicted to manage sales in a chain of supermarkets, with various functionalities including interaction with cashiers, inventory management, and interactions with external components. The large size of the model led to challenges in generating the complete state space for verification, necessitating the composition of an automaton representing the user to restrict possible behaviors and reduce the state space. We observed that some properties were valid while others highlighted potential issues in the system.

Verification of the model under given usage scenarios revealed various insights, including the reduction of the state space due to hierarchical composition of components and the relation between local deadlocks and component-blocking properties. By introducing and explaining the results of verifying twelve properties of the trading system, we demonstrated the practical application of the CI-LTL verification technique using parallel model checking.

Looking ahead, we plan to further enhance our verification techniques by exploring reduction methods to handle even larger systems, such as partial-order reduction and symmetry reduction, while also seeking new reduction methods tailored to component-specific characteristics of verified systems.