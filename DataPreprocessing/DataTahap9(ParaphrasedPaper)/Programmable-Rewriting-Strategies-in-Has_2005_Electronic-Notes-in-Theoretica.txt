Various forms of programmable strategies are prevalent in computer science, with applications in areas such as rewriting, theorem proving, parallel functional programming, and attribute grammars. For example, evaluation strategies without traversal control have utility in rewriting, while in theorem proving, strategies are employed as proof tactics and tacticals. In parallel functional programming, strategies are used to synthesize parallel programs.

In the context of type generics, the definitions of type genericm, generict, and genericq are provided as generic representations of monadic operations, transformations, and queries. The combinator gmapt:: generict-> generict is introduced as a nonmonadic variation on alltp, and its type is described using type aliases for readability. Additionally, a more specifically typed scheme stop_tdtp is reconstructed to fix the monad for the argument type to maybe, ensuring success of the composed strategy.

In the realm of attribute grammars, strategies and attribute grammars are seen as complementary, with the former being more operational and emphasizing traversal, and the latter being more declarative and emphasizing attribute dependencies. Combining strategies and attribute grammars is recognized as a promising area of research. Attribute grammars, like strategies, can be conveniently embedded into Haskell.

Furthermore, strategies are regarded as beneficial for processing XML documents, particularly in providing the illusion of an XPath-like language for controlling fully typed XML transformations. While functional combinator libraries for XML processing exist, they are noted to lack the typing strength of functional strategies, suggesting the potential for strategies to enhance the control of fully typed XML transformations.