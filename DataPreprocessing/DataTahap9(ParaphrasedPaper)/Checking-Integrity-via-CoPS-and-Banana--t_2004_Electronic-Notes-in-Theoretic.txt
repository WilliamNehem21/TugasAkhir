In recent years, there has been extensive research into safeguarding sensitive data from unauthorized access, focusing on both system and network security. Typically, information is protected through access control policies that restrict entities (e.g., users, processes) from accessing data. The flexibility of these access control policies varies, with some policies allowing entities to change their own access rights. For example, mandatory policies prohibit entities from altering access rights; multilevel security, which associates entities and data with ordered security levels, is an example of such a policy. However, even with multilevel security policies in place, data can still be indirectly leaked by trojan horse programs. The paper introduces a process for checking and editing protocols, utilizing a tree structure to navigate between processes. It also discusses confidentiality measures, such as the partitioning of ambient labels into high, low, and boundary categories to confine confidential information. Additionally, the paper proposes an abstract domain for a more sophisticated control flow analysis to detect information leakage, along with a post-processing module to interpret the results of the analysis within a boundary-based information-flow model. The paper also describes the implementation of the "banana" tool in Java, its compatibility with web browsers supporting Java, and its use for modeling server and client actions. Furthermore, the paper explores the role of an intruder in corrupting the integrity of the system by bypassing security checks, and discusses applying static analysis techniques to detect information leakage and verify system security. Finally, the paper expresses gratitude to individuals who provided suggestions and comments, as well as those involved in the development of the tools.