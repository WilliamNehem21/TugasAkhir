The use of freely available experimental transformation languages has started to encourage practical application of textual transformation notations. The upcoming QVT transformation languages could potentially bring about standardization or at least interchange capabilities for these experimental languages. On the other hand, graphical transformation notations have not been as successful, and there are several identified drawbacks to their use. In this paper, we explore the limitations of graphical transformation notations, propose potential solutions, and discuss modifications in the UMLX notation and tool support aimed at enhancing usability and compatibility with QVT.

As model transformations continue to evolve, tools based on better meta-models such as ATL or Tefkat have enabled more practical and rigorous transformation processes. However, the proprietary nature of the transformation language for each of these tools restricts their wider application. The imminent QVT standard, comprising a suite of three languages, may alleviate compatibility issues by either rendering existing languages obsolete or defining an interchange point to facilitate transformation across different languages.

We investigate the reasons behind the relative lack of success of graphical transformation notations, and consider the appropriate measures to rectify this situation. We analyze the advantages and disadvantages of textual and graphical notations before examining the specific factors contributing to the success or failure of various graphical notations. We also delve into a detailed examination of different graphical transformation notations, noting their similarities in principle but significant differences in practice, particularly with respect to transformation rules. Additionally, we outline tool support for UMLX and propose notational enhancements to align with QVT.

Textual notations exhibit less susceptibility to scalability issues compared to languages such as C or Java. With the use of multiple source files and hierarchical language constructs, large line counts can be effectively managed, although this may result in slightly increased line count.

While a textual notation may face challenges in identifying all instances of a specific concept, such as a variable, graphical notations are adept at presenting interrelated concepts in a declarative manner. Each concept is represented as a graph node denoted by a symbol, and the interrelationships are depicted by graph edges, making it easy to identify all relationships involving a particular node.

In the revised merged QVT submission, minor stylistic deviations such as omission of class name underlines and line decorations are introduced. The omission of line decorations raises concerns regarding the differentiation between composition and association, as well as the disambiguation of multiple associations involving the same classes. Similarly, the use of a more conventional graph transformation notation in AGG leads to the omission of underlines and line decorations, while instance names are replaced by instance numbers.

Various graphical transformation notations, such as GRE and GREAT, have explored the utilization of multiplicity in the style of UML. For instance, GREAT recognized the potential of non-unit multiplicity to support patterns involving sets of objects rather than just individual objects. Additionally, UMLX was inspired by GRE but introduced declarative preservation and evolution relationships, further extending the capabilities of graph theory to support keeping and evolving elements.

The UMLX editor provides support for partitioning a design into sheets using three different diagram types: meta-model diagrams for maintaining Ecore meta-models, transformation rule diagrams where UMLX transformations are depicted, and transformation context diagrams for aggregating UMLX-defined or QVT-defined rules as part of a QVT-compatible transformation.