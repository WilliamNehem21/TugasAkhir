Open systems have clearly defined interfaces that outline how a system can interact with any environment. For instance, the method header specifies input values and types for method invocation, and such an invocation resolves the nondeterminism of that interface at runtime. The parallel composition of process algebra terms and modular model checking also express and analyze open systems, along with the external nondeterminism arising from their interactions with environments.

In transition systems, it is only possible to choose one interpretation of nondeterminism if it is to be applied uniformly within a transition system. Thus, another class of models is recommended for expressing resolvable and persistent kinds of nondeterminism within the same model. The approach proposed in this paper involves using a type of ready-simulation to address persistent nondeterminism present in transition systems, in which exactly one transition per label and source state points to a set of successor states, rather than using multiple transitions per label and source state.

The paper first informally discusses the semantics of state machines. At each step, a single event is dispatched from the event pool, where the order of dispatching is not specified. This event enables a transition if its source is currently active, it is its trigger, and its guard evaluates to true with respect to the current variable assignment. Among all enabled transitions, one is chosen, and its corresponding action is executed. Output events can only be sent in intermediate states. If the action is different from a send-action, a hypertransition subsuming all the possible outcomes is derived. If no transition is enabled for an event, a transition to the state that abstracts.

The formal semantics is assumed to be given in terms of transition systems obtained by derivation rules (small step semantics). The derivation rules utilize an evaluation function, calc, for the state machine actions, which maps a state machine action together with a variable assignment to a variable assignment (and possibly additional information).

The derivation rules are then adapted to obtain hypertransitions, by replacing the target of the derived transition with a set consisting of the original target. When calc is used for the derivation, the target set contains all possible variations with respect to the result of calc. A random choice operator can be used to express a probability distribution, and probability distributions are a form of persistent choice. For example, the probabilistic choice of a successor state of state s in a Markov chain expresses a nondeterministic choice that remains nondeterministic each time state s is visited. This persistence can be controlled to some degree through the use of familiar tools from stochastic processes.

The approach can also handle under-specified randomized choices, where only sets or intervals of allowed probabilities are given. Adaptations to the formal semantics are made by modifying calc such that sets of distributions rather than distributions are obtained.

The paper also discusses state machines without persistent choice, where refinement patterns of statecharts are presented, and the underlying formal semantics are streams, thus not handling persistent nondeterminism. State machines are mapped to terms of CSP, providing a stronger semantics through trace and failure-based refinement. 