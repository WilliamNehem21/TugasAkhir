The complexity of rewriting strategies expressed in operational terms can make them difficult to understand and reason about. This paper presents a weakest precondition logic for reasoning about strategies programmed in the stratego language, which can express properties of terms of arbitrary depth using the modal mu-calculus. The paper illustrates the use of this logic by characterizing properties of several reduction strategies for the lambda calculus with explicit substitutions.

Strategies for term rewriting are widely used in automated deduction systems to implement syntactic theories, such as theorem-proving and program transformation. These strategies involve evaluating conditions for applying rewrite rules, determining the order of exploring subterms, and prescribing bindings and scopes of pattern variables. Designing strategies can be as complex as any other programming task and can benefit from appropriate language support and logical characterization.

The paper outlines a programming logic for strategies, treating strategies as programs over a domain of terms, controlled through recursion and non-deterministic choice. The weakest-precondition logic provides a formalism for reasoning about such programs, interpreting predicates over a domain of term structures. The paper further introduces rules for constructing strategies in the stratego language, which supports explicit recursion and first-class constructs for strategies and patterns.

In addition, the paper discusses the significance of strategies for rewriting terms with variables and introduces the concept of environments for binding variables and transforming terms. It demonstrates how complex strategies can be defined in terms of basic binding and building strategies and provides examples of rule definitions in stratego. Furthermore, it explores the use of computational tree logic (CTL) for expressing properties of the substructure of terms in a logic capable of characterizing strategies.

The paper also discusses specific strategies for reducing terms in the lambda-calculus and presents examples of related work. Finally, the paper concludes with insights on the implications and potential future directions for this research.

Source:
D. Du, K. McDonnell, E. Nanos, Y.S. Ramakrishan, and Scott A. Smolka. "Software Design, Specification and Verification: Lessons Learned from the Rether Case Study." In Proceedings of the Sixth International Conference on Algebraic Methods and Software Technology, Volume 1349 of Lecture Notes in Computer Science, pages 185-198. Springer Verlag, 1997.