The use of visual language techniques is essential in the development of software systems. Specific visual notations are often employed, necessitating the use of tool environments comprising visual editors and simulators. Extensive work has been carried out to conceptualize and provide tool support for creating these desired tool environments, utilizing meta-modeling concepts, grammar-based approaches, or logical methods. This paper focuses on generators based on graph transformation, namely diagen, atom3, and genged, which enable precise definition of visual modeling languages and the creation of corresponding visual environments. Additionally, the paper explores the integration of graph transformation-based tool generation with the Eclipse technology.

The paper discusses the development of visual editors based on a graph-transformation approach to define visual language syntax, where a graph grammar is used to specify the visual alphabet and language syntax. The Eclipse technology, particularly the Eclipse Modeling Framework (EMF), is employed for graphical editor development. EMF generates Java classes for manipulating the model and provides basic support for model element manipulation. The paper presents the initial development steps of a new tool environment called TIGER (Transformation-based Generation of Modeling Environments), which combines formal visual language specification techniques with advanced graphical editor development features offered by the Eclipse Graphical Editor Framework (GEF).

The paper also provides an overview of the TIGER framework's architecture and aims, demonstrating the generation of editors for graph-like diagrams based on a visual language specification and an AGG syntax grammar. Furthermore, it highlights the potential of TIGER in generating modeling environments based on formal graph transformation specifications and integrating with Eclipse and GEF.

TIGER's core packages, including the VL specification and generator components, are described, showcasing the generation of various components such as diagram editors, simulation, animation, analysis, and model transformation. Additionally, the paper outlines the use of the Graph Transformation Exchange Language (GTXL) format for saving VL specifications and the role of the JET compiler in editor generation.

Overall, the paper illustrates the concept and software architecture of TIGER, emphasizing its integration of formal visual language specifications using graph transformation with graphical editor development features offered by Eclipse-GEF. The current stage of development focuses on generating graphical editors for graph-like languages, with a demonstration using a petri net example. However, it acknowledges that further comparison with non graph transformation-based generators is beyond the scope of this paper due to the early stage of TIGER's development.