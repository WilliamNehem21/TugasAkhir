Significant research has been conducted in the realm of visualizing and analyzing the execution of Java programs, with various systems developed for this purpose. For instance, Jinsight and a system by Walker et al. visualize trace information generated by an instrumented version of the Java virtual machine, focusing on program execution patterns and event-based object relationships. However, these systems primarily support offline visualization and are not tailored for visualizing distributed systems.

Jive, another tool, offers online visualization of Java programs and is designed for dynamic analysis of program data. While it supports non-distributed systems, it falls short in addressing distributed system visualization. Snodgrass presents a method for distributed debugging and monitoring, involving the use of relational algebraic queries to track runtime dynamics.

To address the need for visualizing distributed systems, a new approach is proposed. This involves the use of plug-ins that register intermediate processing agents (IPAs) with other IPAs instead of directly with a data collector. These IPAs operate in a hierarchy to streamline the information sent to the data collector, thereby reducing the overall load. Additionally, the approach supports scalability and enables multiple overview plug-ins to simultaneously visualize a distributed system.

The proposed system comprises a data collector that receives events and forwards them to an event mapper, which updates the world view periodically and stores events in historic data. The historic data can be saved to disk for offline event replay. Furthermore, the system includes IPAs, event mappers, historic data, and world view, which are detailed further in Section 5.

When defining triggers for events, the system takes into account actions performed by the entity. It delineates whether the event should be triggered at the start or end of a method invocation (or a constructor), and specifies the event sent to the visualization, along with its associated values.

The 'update(string item, object value)' function specifies that the state of an entity has been updated, and provides details of the updated value and its identifier. These events are typically used in conjunction with the watch declaration.

The overview plug-in utilizes the JJTree software to parse the Event Specification Language (ESL) and instrument the relevant Java classes by inserting profiling statements for various events in the ESL. These statements convey information about the events to the IPAs, enabling visualization of programs without direct access to their source code, as long as entity specifications are available.