Although functionality is the primary consideration when selecting a component for an application, non-functional properties (NFPs) are becoming increasingly important. These NFPs should be taken into account from the beginning of the design process and should influence the selection of components rather than being determined after the fact. Designers should be able to estimate the NFPs of the system being developed at any point in time.

In order to express upper bounds, a stricter predicate, ro, is utilized. These predicates are value-based and correspond to resource specifications that approximate bounds using predicates. However, they rely on a detailed functional specification that demonstrates the concrete implementation. The base values used in the specifications (e.g., initialization of an entry in the stack) are not clearly stated.

The COMPAS project uses a matrix to represent the import-export relationship of components, indicating the probability that one method calls another in a particular transaction or workload. This information is extracted from traces, and the system must be complete before evaluation can commence. The goal is to predict the system's behavior under new workloads based on measurements, but the development process itself does not address performance issues during system construction.

For the purposes of this paper, a general component model is used that describes components as software building blocks with declared interfaces of services offered and interfaces imported from other components. The model is similar to an enterprise JavaBeans component model, focusing on the main properties.

Having this information is crucial when considering the NFPs of components. However, the current relationship does not display the dependence on the parameters of the methods, which would be more useful but also make the relationship more complex. The intention is to start with the elementary form and then extend it later.

The implementer of a component determines which interfaces to import, and components and their exported methods are annotated with NFPs. These NFPs must be consistent with the NFPs of the components offering the imported interfaces, with response time used as an example.

For response time, important resources considered are CPU and memory, and their usage generally depends on the platform and data processed. Data values, which may be of simple types like integers with limited value ranges or more complex types like video or images, are crucial for identifying the relationship between resource usage and an NFP.

The COMQUAD project uses an extension of CQML to describe the resource usages of NFPs. CQML+ allows specifying the resource demands a component has, and although this paper focuses on CPU and memory usage, the extension is designed to accommodate arbitrary resource types.

In order to respond within a given time bound, the squareroot must rely on methods contained in the imported interface for the component to return its answers within a given (smaller) bound. Based on definitions of quality characteristics, different qualities are defined and associated with the component in the CQML+ profile.

To reason about non-functional properties of the whole system under construction, the properties of all components must be considered. For example, the response time of each component's methods, which depends on available resources, should be taken into account when one component calls another.

If the response times need to be increased, the testing of resources can be repeated. If all else fails, it may be necessary to create an alternative assembly if the chosen assembly exceeds the available resources or a given resource limit.

The formalism also permits inquiring about available resources and using them to calculate method response times, but this is considered to be less interesting as available resources are only known at runtime.

Other NFPs apart from response time must also be considered, although at the moment they need to be investigated individually before a unified approach can be identified. It is believed that the approach presented is applicable to NFPs other than time and space, as long as they are additive, and further investigation is planned in future work.