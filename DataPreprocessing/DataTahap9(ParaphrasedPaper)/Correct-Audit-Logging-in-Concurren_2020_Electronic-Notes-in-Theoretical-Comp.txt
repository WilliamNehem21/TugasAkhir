The utilization of audit logging in conjunction with preventive measures has two primary applications. First, post-execution analysis of audit logs enables the detection of security breaches based on the recorded evidence, thus emphasizing user accountability and deterrence. Second, audit logging is employed to identify existing vulnerabilities in preventive security mechanisms and improve them. The effectiveness of comprehensive security measures depends on the accuracy and efficiency of the generated audit log and subsequent analysis. However, challenges in audit log generation, correctness, and efficiency have been observed, leading to security risks such as data breaches, as highlighted by the Open Web Application Security Project.

The semantic framework proposed for audit log generation is limited to linear process executions, constraining its applicability to systems with a single thread of execution. For instance, in the context of a medical records system, audit logging is considered an extension to the web server program, and logging depends on events occurring within the same program execution thread. As systems migrate to a service-oriented architecture (SOA), with the prevalent use of microservices, the nature of communication and execution also evolves, necessitating the investigation of alternative approaches for ensuring correct and independent audit logging.

The correct generation of audit logs can be defined based on an execution trace and a logging specification. The verification of the correctness of the instrumentation algorithm includes ensuring that it does not introduce new stuck states to the system. Additionally, the extension of the class of logging specifications is essential to address specific use cases, such as revoking user privileges and logging message transmissions between specific agents.

As our concurrency model is based on process calculi with message passing for interprocess communication, exploring models that address audit logging in concurrent environments utilizing alternative approaches for IPC, such as shared memory and files, is warranted.