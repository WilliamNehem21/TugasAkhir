This paper presents a method for modeling the semantics of a subset of the Architecture Analysis and Design Language (AADL) using Event-B. The semantics of the subset are gradually introduced to enable formal text traceability against the informal specification. The approach starts with a general computational model and then incrementally adds elements of AADL, culminating in the introduction of a family of schedulers. The correctness of the development is proven using the Rodin platform.

The primary goal of the Event-B development is to demonstrate that the scheduler obtained at the final refinement level satisfies the properties introduced as invariants in the successive refinements. In other words, the aim is to prove that the scheduler is consistent with the semantics of the subset of AADL under consideration. Additionally, the development aims to introduce elements of AADL semantics incrementally, with each element constraining or instantiating the previously defined computational model.

The paper describes the static and behavioral aspects of the model, including the structure of nodes, connections, and computation functions. The dynamic state of the system is defined by the data in input ports and the operations that govern their evolution. Several events, such as dispatch and valued events, are introduced to manage the behavior of the system.

The paper concludes by highlighting the incremental and invariant-preserving nature of the approach, which guarantees the correctness of the abstract views defined at the initial levels of development and the compatibility of the schedulers with the AADL execution model. The work is suggested to be extended by incorporating timing information, introducing real-time scheduling algorithms, and studying data structures to simplify the proof process.