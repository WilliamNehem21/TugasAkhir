This paper explores the process of translating the semantics of a register-based Intermediate Representation (IR) to stack-based code. The authors propose a new program representation called treegraphs, where nodes encapsulate computations that can be represented by depth-first search (DFS) trees. They also introduce the notion of treegraph edges to manifest computations with multiple uses, which are incompatible with the consuming semantics of stack-based operators. Rather than saving multiply-used values in temporaries, their method keeps all values on the stack to avoid costly store and load instructions. The paper proceeds as follows: Section 2 provides background information and surveys related work; Section 3 introduces the treegraph IR and the basic treegraph scheduling algorithm; Section 4 discusses the minimization of overall stack manipulation costs; Section 5 presents experimental results; and Section 6 draws conclusions from the study.

The authors reference previous work in the field, including the study of generating register-based code for arithmetic expressions by Andrei Ershov, Sethi and Ullman's algorithm that generates optimal code for arithmetic expressions using Ershov numbers, and Aho and Johnson's use of dynamic programming to generate optimal code for expression trees on CISC machines.

The paper also includes discussion of the "instruction fetch k" operation, which duplicates element k (counted from the top) and pushes the duplicate onto the top of stack, incrementing the stack size by one. If there are fewer than k elements on the stack, the machine will enter an error state and terminate the execution.

The authors conducted experiments on an Intel Xeon 5120 server running Linux CentOS 5.4 with kernel version 2.6.18. They selected 24 C benchmark programs from the testsuite that comes with the LLVM compiler infrastructure. The paper notes that their tinyvm backend cannot handle floating-point values and struct arguments yet, which influenced their choice of benchmarks. Additionally, the authors implemented their treegraph scheduler with the LLVM compiler infrastructure for tinyvm, a stack-based embedded systems VM for C.