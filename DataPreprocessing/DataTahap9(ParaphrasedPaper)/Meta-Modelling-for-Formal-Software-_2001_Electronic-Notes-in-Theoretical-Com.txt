This paper introduces a method for constructing large software systems using multiple models that are instances of a single meta model. These models represent different views of the program and are composed together to define the program's specification. Transformations are utilized to convert the views into program fragments, which are then combined to build the entire program. This approach has been successfully applied to construct various practical systems.

The method described in this paper offers a unified way of constructing industrial-scale software systems by using multiple models that are all instances of a single metamodel. This unified approach simplifies the description of both the models and the resulting system and has been extensively applied to construct medium and large-scale programs that are currently in operational use.

The paper begins by discussing the effectiveness of using multiple models for software development and presents examples of how different models can be employed to construct program analyzers and decompose large problems into smaller components. Furthermore, it addresses some remaining challenges when using this approach.

The paper also demonstrates the use of a general transformation method for the model instance 'mi', which allows for the scaling-up of the approach to handle large programs. This technique enables the implementation of general transformations that can be applied to all instances of 'mi', thus providing a scalable method for handling large programs.

Additionally, the paper provides examples of using multiple models in program analysis and illustrates the application of semantic models into simpler models to enable uniform analysis and coverage of program properties across different languages.

In conclusion, the paper presents an approach to developing complex systems using multiple related models, which have been successfully employed in the development of large applications.