Railway interlocking systems (RIS) are typically designed to align with the layout of stations, and any changes to the station layout necessitate corresponding modifications to the RIS, leading to significant resource and time costs. To mitigate the effort required for modifying RIS, an object-oriented approach can be employed, wherein only the new neighboring structure of the objects needs to be specified when the station layout changes, rather than completely overhauling the entire interlocking system.

Along the railway track, another critical infrastructure component is the signal, which controls train movements by displaying aspects such as clear and stop. Some signals also indicate the permitted speed of the track section, although this aspect is not considered in the present work.

In the context of multi-object checking, a d1 formula holds if and only if the outermost d formula holds; otherwise, a counterexample must be generated. When model checking is utilized to verify the outermost d0 formula, an initial part of a counterexample is produced, serving as a local counterexample that forms part of a global counterexample if it does not involve communication with additional objects. Conversely, if the local counterexample involves communication with other objects, it remains a component of a global counterexample.

The effectiveness of the algorithm is rooted in the provision of a corresponding communication scheme by each communication partner. However, the selection of a random counterexample for each object does not necessarily guarantee the generation of a global counterexample. To address this, an alternative approach involves automatically choosing a different counterexample for the initiating object that displays a different communication scheme, or enabling users to interactively inspect the generated part of the global counterexample.

Both solutions have drawbacks, with the first solution employing a greedy/backtracking algorithm and facing efficiency challenges when local counterexamples need frequent regeneration, potentially leading to a less clear illustration of the error in the global counterexample. In contrast, the second strategy may not provide sufficient information for users to determine whether the partial global counterexample accurately represents the error's origin.

The paper outlines a strategy for generating counterexamples for multi-object checking and demonstrates its applicability through a case study involving a UML-based RIS, acknowledging the criticality of RIS in ensuring safety throughout their lifecycle and investigating an object-oriented approach for interlocking systems to conserve resources in adapting to amended railway layouts. Furthermore, the successful application of multi-object checking in verifying UML-based RIS emphasizes the importance of concentrating on safety aspects, with graphical counterexamples aiding in identifying and correcting unhandled situations within state machines.

The methodology presented contributes to improving understanding and communication across different disciplines, thereby enhancing the overall system development process. Additionally, a more comprehensive verification strategy is proposed, which offers illustrative counterexamples and automates test case generation based on checking conditions during the early stages of system development.

Pavlovic, O., R. Pinger, M. Kollmann, and H. Ehrich. "Principles of formal verification of interlocking software." In Proceedings of the 6th Symposium on Formal Methods for Automation and Safety in Railway and Automotive Systems (FORMS/FORMAT 2007), edited by E. Schnieder and G. Tarnai, 2007. (To appear)