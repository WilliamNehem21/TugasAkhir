Automated deduction tools are often powerful and complex, which increases the risk of containing bugs and delivering incorrect results. To ensure the reliability of these tools, it is suggested to develop certifiers that check the results of the tools using a trusted proof assistant. A framework is presented in this paper, illustrating the essential steps to develop stand-alone certifiers that efficiently verify generated proofs outside the employed proof assistant. This framework has been used to develop certifiers for various properties, such as termination, confluence, completion, and tree automata related properties.

As automated provers like SAT-solvers, SMT-solvers, automated first-order theorem provers, and model checkers gain popularity for software verification, their complexity raises the probability of bugs leading to wrong answers. Therefore, the reliability of the generated answers is often compromised as the complexity of the prover increases.

The paper also discusses the validation of certificates for solvable PCP instances and highlights the various design choices and challenges in the process of developing a certifier. It proposes the use of LCF-style proof assistants for increasing reliability, which relies on a small trusted kernel and allows for more high-level proofs to be broken down into kernel-primitives without adding new axioms.

Furthermore, the paper introduces a type of functions from strings to strings and discusses the use of proof assistants to enforce the show-law, which ensures that a show-function does not modify an incoming string. Additionally, it explores the connection between the certifier and the semantic object PCP, and suggests measures for ensuring that the string obtained from the parsed input corresponds to the intended input.

Finally, the paper concludes by presenting a framework to develop stand-alone certifiers, using a simple certifier for PCP as an example, and emphasizes the reusability of methods for integrating error messages and theories on parsing and show functions.