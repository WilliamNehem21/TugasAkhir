The use of component-based software has been widely acknowledged as an essential technology for creating high-quality and complex software systems. In this context, the practice of sharing collections of components has become customary for applications with a component-oriented architecture. These components, developed independently by various providers, are reused as self-contained modules, necessitating the identification of component dependencies to ensure interoperability.

Several techniques have been developed to ensure the interchangeability of components, with examples including those detailed in references [12,13]. These approaches are based on Liskov's substitution principle, originally introduced in the context of object-oriented programming. They utilize interface types to establish a subtyping relationship between components and allow a new component to replace an old one only if the new component is a subtype of the old one. There are different variations of interface types, such as those augmented with behavioral descriptions like automata. Some recent research has pointed out that the stringent condition of pure subtyping, while ensuring safety of the replacement, is overly restrictive. Consequently, a less restrictive notion of substitutability has been proposed, depending on the specific context. In this modified approach, a new component may safely replace an old one in certain systems, disregarding interfaces not utilized in that context.

The structure of the paper is as follows: Section 2 introduces the concept of dependencies and provides an example of a mail server in Linux GNU to illustrate this concept. Section 3 presents the approach to substitutability, gradually refining the definitions of substitutability. Section 5 outlines the substitutability checking algorithm, while Section 4 illustrates some examples of substitutability. Section 6 discusses related work, and the paper concludes with Section 7, which also outlines potential future work.

Intra-dependencies are defined by the component producer and are used for installation, while inter-dependencies arise from installation and are used for deinstallation and replacement. Both notions are briefly explained here, but further details are provided in the paper.

Contextual substitutability is closely tied to the context, which reflects the resources and architecture of the target system. Ideally, this context would encompass the dependencies of all components within the system. However, representing such a context would result in a complex and computationally demanding logical statement. Hence, a conservative approximation of the context description has been chosen. The definition of the context is summarized as presented in the paper.

In comparison to existing substitutability approaches, the condition (nc) is innovative as it enables the consideration of various forms of component effects on the context, thereby ensuring system safety. In an extended version of the system, not detailed in this paper, there is a specification of non-functional properties. The replacement of a component by another might impact system properties and may therefore be prohibited. An example of such substitution is further discussed in Section 6.