This paper builds upon prior research on the compilation of higher-order imperative languages into digital circuits by introducing concurrency, a crucial aspect in the context of hardware compilation. The study leverages an existing game model to simplify correctness proofs. The target designs for compilation are asynchronous event-logic circuits, which align naturally with the language's asynchronous game model.

One of the challenges addressed is the discrepancy between the essentially asynchronous semantic model used and the synchronous nature of the target circuits, leading to difficulties in proving correctness. The authors have addressed this issue in an ad hoc manner, but they are now investigating a systematic approach for synthesizing synchronous circuits from asynchronous specifications.

Additionally, the paper discusses the concept of basic observable actions for various types, such as commands, boolean expressions, and variables. It also presents the representation of the game model for the language in terms of a fragment of event logic.

The study also demonstrates that, under the same assumptions about the environment's behavior, the circuit will not have any failed traces. This is an important finding, as it ensures that the composition of correct traces does not lead to unfavorable interactions.