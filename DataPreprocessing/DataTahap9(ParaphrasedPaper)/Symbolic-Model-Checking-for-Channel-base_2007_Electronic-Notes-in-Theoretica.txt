In the last 15 years, there has been significant development in languages and models for coordination that offer a formal description of the code used to connect components, and can also serve as a starting point for formal verification. This paper focuses on the latter aspect specifically for the exogenous coordination language reo. In reo, the code for connecting components is represented by a network of channels generated through a series of operations that create channel instances and connect them in nodes. The semantics of reo networks have been described in various but consistent ways.

The paper is organized as follows: Section 2 provides a brief introduction to the coordination language reo and constraint automata, which serve as an operational model for reo networks. Section 3 explains the syntax and semantics of the logic BTSL. Section 4 outlines the main steps of the BTSL model checking algorithm and describes our symbolic implementation. Section 5 presents experimental results, and Section 6 concludes the paper.

The BTSL model checking problem involves an input of a reo network, potentially together with constraint automata that specify the interfaces of the components connected to the source and sink nodes of the network, as well as a BTSL formula to be checked for the network. The automata for the components connected to the sink or source nodes describe the environment in which the network operates and may restrict the nondeterminism in the network's automaton. The paper also discusses the application of the BTSL model checker to two case studies, with the results achieved using specific hardware and software configurations. It also reports on the identification of a deadlock situation through a backward analysis, noting the number of iterations and the computational resources utilized.