The utilization of integrated formal description techniques shows promise in the specification of multi-aspect systems. To address this, we have introduced an extended state diagram (ESD) formalism, which integrates state diagrams and formal data description languages within a unified framework. The objective is to augment the implicit communication mechanisms of ESD with explicit descriptions of communications, achieved through the use of synchronization vectors. Additionally, we explore the application of interaction diagrams in this context.

The growing complexity of systems has necessitated their description from various perspectives, leading to the emergence of aspect-oriented programming and aspect-oriented software development at both programming and specification and design levels. To tackle the specification of multi-aspect systems, we have proposed an integrated formalism derived from several experiments on the subject.

In order to enhance the interaction capabilities of ESDs, we expand our initial proposal with alternative communication mechanisms, specifically synchronization vectors, while maintaining formal consistency. The use of interaction diagrams is also considered, providing supplementary communication capabilities that align with the existing ESD semantics.

It's important to note that our aim is not to provide formal semantics for a specific dialect of state diagrams, but rather to formalize the extension of these diagrams with formal datatypes in a modular fashion, extending their semantics. We assume that the underlying semantics (referred to as basic) are operational, described using labelled transition systems (LTS).

Our semantics are presented through a series of rule groups. The initial groups are used for type-checking and evaluating terms, while subsequent groups extend the basic semantics to describe the individual evolutions of extended diagrams by incorporating variable bindings, input event queues, and output event queues. We then describe possible modifications in the queues of each diagram as a result of an open-system semantics, leading to a comprehensive set of LTSs.

Explicit communication policies play a pivotal role in enhancing the reusability of integrated specifications by removing specific communication information from the sequential components. In this paper, we propose extension mechanisms to explicitly specify interactions between ESDs, with synchronization vectors expressing diverse synchronization policies. Although interaction diagrams are less expressive, they benefit from a specifier-friendly graphical representation.
