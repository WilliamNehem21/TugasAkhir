Visual rewriting methods are increasingly being utilized to represent transformations of systems specified through diagrammatic sentences. Researchers are transitioning from solely defining the static aspects of languages through parsing processes to also modeling their dynamic behavior. Graph transformations, in particular, are a widely used formalism with various applications such as parsing, model animation, and transformation. The widespread adoption of UML as a tool for specifying software and general systems has raised new challenges, including issues related to software and model evolution.

High-level replacement units can be characterized as part of a graph transformation approach, consisting of a category of objects, a category of rules, an application operator, control expressions, and graph class expressions. A replacement unit is a transformation unit with initial and terminal graphs consisting of objects from the category. Additionally, the set of imported units for a high-level replacement unit is always empty. Unlike transformation units, the semantics of high-level replacement units is determined by derivation sets.

It should be noted that the termination of replacement units is not always guaranteed. If an expression allows for a rule to be applied indefinitely to the result graphs, the replacement unit may not terminate. Conditions for the termination of replacement units are subsequently provided.

In addition, negative application conditions (NACs) have proven to be useful when applying graph transformation to practical problems. More recently, NACs have been incorporated into the high-level replacement framework, and efforts are being made to formulate termination results for replacement units while taking NACs into account.