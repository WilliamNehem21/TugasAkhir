The paper introduces "plan," a programming language specifically designed for active networks, which can also be considered as a model of mobile computation. Plan extends the paradigm of imperative functional programming in a sophisticated manner, allowing for recursive and remote function calls, and facilitating interaction between host and mobile code. The paper discusses the specification of plan in the rewriting logic language Maude, showcasing the techniques used for specifying the operational semantics and formalizing variable binding constructs and mobile environments. The formal modeling approach supported by Maude is illustrated through various applications, including executing plan programs, analyzing them using search and model-checking, and proving properties of both specific plan programs and the plan language in general.

Active networks, as discussed in the paper, are programmable networks with nodes that provide execution environments for programs received from other nodes. One key feature of plan is its support for remote function execution, where functions can be invoked to execute in the environment of a different network node. Additionally, plan incorporates resource awareness to ensure that all programs are terminating, and provides interfaces for interaction with host nodes.

The paper is organized into three main parts: syntax, network, and semantics. The syntax component details the formalization of the syntax of plan as an algebraic data type in Maude. The network part models fundamental network concepts such as locations, addresses, connections, and routing, providing the necessary detail for the plan specification. The semantic part focuses on reflecting the multilevel concurrency of active networks in the computation state, establishing clear boundaries for the scope of effects and information access.

To specify the semantics of plan, the paper describes the representation of the global active network state and introduces a reduction machine that forms the basis for operational semantics. The paper emphasizes the use of syntax-based semantics to simplify the reduction machine and establish a direct connection between expressions and reduction contexts.

Furthermore, the paper elaborates on the process of hole filling through metavariable substitution and generic substitution, emphasizing the need for a second notion of substitution for object variables that respects the binding structure of the language.

The paper also covers packet rules, which include emitting, delivering, and routing packets in transit. It describes the plan construct onneighbor, which initiates remote function calls, and introduces the onremote service for remote invocation on arbitrary locations.

The formal model presented in the paper undergoes testing to ensure its accuracy and effectiveness, highlighting the iterative nature of developing a formal model and the importance of refining the specification through practical testing and refinement. This version represents a significant advancement over an earlier iteration, providing a higher-level representation and simplifying the mathematical analysis involved.