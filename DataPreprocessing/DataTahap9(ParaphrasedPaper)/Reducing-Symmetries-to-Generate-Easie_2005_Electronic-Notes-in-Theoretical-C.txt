Discovering countermodels is an effective method for refuting false conjectures. In first-order predicate logic, finding models is a problem that cannot be determined, but if a finite model exists, it can be discovered through exhaustive search. Translating the problem of generating finite models in first-order logic to the satisfiability problem in propositional logic is possible, but a direct translation may not be very efficient. This paper explores strategies for considering symmetries to simplify the resulting problem. It introduces a static method for adding constraints, which approximates the least number heuristic, and a dynamic method that involves using a model searcher to generate a set of partial models and then subjecting each partial model to a propositional prover. The paper also presents an analysis and comparison of these two methods.

Unlike theorem proving, disproving false conjectures has received less attention, but it is crucial because the validity of these conjectures is unknown. The paper highlights the significance of the subject and the limitations of using a resolution-based theorem prover for false conjectures.

The paper discusses the two main approaches to finite model generation in first-order logic and evaluates their benefits and drawbacks. It also explores the potential for combining these approaches to improve efficiency and examines different ways of leveraging symmetries in problem specification to simplify the resulting satisfiability problem instances. Examples and experimental results are provided to support these discussions.

The paper is structured as follows: it starts by explaining basic concepts and notations, as well as the two approaches to model finding. It then presents an example illustrating the importance of reducing symmetries and introduces two approaches for adding constraints to the original problem. The first approach is static and produces only one instance, while the second approach is dynamic and usually generates more than one instance. It also includes examples demonstrating the strengths and weaknesses of these approaches.

The finite model generation problem is defined as the task of finding an interpretation of all function symbols and predicate symbols in a set of first-order formulas, such that every formula is true under this interpretation. Alternatively, it can be viewed as a constraint satisfaction problem, with the goal of finding a set of assignments to cells that satisfy the input clauses.

The paper also delves into discussing the practical application of the least number heuristic, as well as specific constraints that can be used to eliminate isomorphic models in the context of the finite model generation problem.

In summary, the paper explores various strategies for addressing the challenges associated with finite model generation in first-order logic, considering both static and dynamic approaches, and provides insights into the potential synergies between these methods to enhance efficiency and effectiveness in addressing the problem.