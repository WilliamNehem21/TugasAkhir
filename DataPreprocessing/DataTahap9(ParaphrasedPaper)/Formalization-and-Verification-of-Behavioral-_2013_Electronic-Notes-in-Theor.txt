Dynamic software updating (DSU) is a method for updating software systems while they are running. Existing research on the correctness of dynamic updating has primarily focused on ensuring that updates are deployed correctly at the code level, such as ensuring that procedures refer to data of the correct types. However, less attention has been paid to verifying the correctness of dynamic updates at the behavioral level, such as ensuring that updated systems behave as expected and that unexpected behaviors cannot occur. In this paper, we introduce an algebraic methodology for specifying dynamic updates and verifying their behavioral correctness using off-the-shelf theorem proving and model checking tools. Our methodology is general in that it can be applied to three commonly used updating models in current DSU systems.

Dynamic software updating is a promising technique for maintaining software systems by updating them on the fly without causing downtime. Ensuring the reliability of dynamic updates is crucial, as the updated systems must behave as expected, particularly for mission-critical systems that require continuous operation, such as traffic control and financial transaction systems. Our approach is general in two aspects: it can be used to formalize the three main dynamic updating models (interrupt model, invoke model, and relaxed consistency model), and it focuses on formalizing the design of dynamic updates rather than the code, allowing it to be applied to various program models.

Dynamic software updating differs from traditional static updating, as it allows updates to be applied to running systems without the need to stop and restart them. Several systems have been developed to support dynamic updating of software systems, each tailored to specific types of systems and programming languages.

Behavioral correctness of dynamic updates refers to the requirement that the behavior of the systems after being updated must meet certain desired properties. We can specify and verify these properties using algebraic languages and verification systems.

In our ongoing work, we plan to extend our approach to verify more complex dynamic updates, such as the update from the NSPK (Needham-Schroeder Public Key) authentication protocol to its modified version, NSLPK, with the goal of ensuring the mutual authentication property is satisfied after the update.