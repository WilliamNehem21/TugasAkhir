The main boilerplate refers to two systems, the writer and the fifo. This style of specification requires the use of two different functions and is represented by the relationship between the push function in the main system and a new function, function_001, which we will call "add" for clarity. The events and observations in the occurrence of the main specification, such as beg(m), occ(e1), and obs(s1) in the model of system design execution traces, are mapped to component ports. P2.1 represents a safety property, while p2.2 represents a liveness property, and formal semantics have been defined for both properties.

A well-known repository of patterns for functional properties is discussed, with the semantics of these patterns being defined in computation tree logic (CTL) and other logic languages. According to this approach, each property is specified using a scope (six different patterns) and a property pattern. The scope selects the subset of the model state-space where the property is expected to hold, and the property pattern defines the expected occurrence of a given event/state or the relative order of multiple events/states during system execution.

For extra-functional properties, previous authors introduced patterns for real-time specifications and organized them in a unified framework, adding new patterns to the existing repository. Another set of patterns for timing properties has also been proposed. Additionally, a repository of patterns for probabilistic properties has been presented, focusing on real-world requirements related to reliability, availability, performance, safety, security, and performability.

The process of properties derivation involves creativity, depends on two types of models, and is influenced by the form of the system design process (top-down vs. bottom-up design). Human involvement cannot be entirely eliminated from this process and can only be partially automated. In the following section, we will review some notable proposals for tool support from recent literature.