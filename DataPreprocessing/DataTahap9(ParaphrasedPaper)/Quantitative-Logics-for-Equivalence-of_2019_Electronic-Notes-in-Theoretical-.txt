The use of boolean logic does not easily accommodate various instances of effects, such as the conjunction of probability and nondeterminism. The literature on compositional program verification demonstrates the utility of quantitative (e.g., real-number valued) program logics for confirming programs with probabilistic behavior, potentially in conjunction with nondeterminism [14,21]. The paper provides examples that illustrate the quantitative approach. Certain examples, such as the combination of nondeterminism with probabilistic choice or with global store, do not align with the boolean-valued framework, but are compatible with the quantitative framework. However, there are also instances, such as probability, global store, and cost, where the quantitative approach is a more natural fit, even though they also conform to the boolean-valued framework.

We employ a simply-typed call-by-push-value functional language similar to that in [16,17], along with general recursion and a base type for natural numbers, thereby creating a call-bypush-value variant of PCF. Additionally, we incorporate algebraic-effect-triggering operators following the approach of Plotkin and Power. Initially, our focus is on the part of the language devoid of effects, as we aim to consider effects independently of the underlying language.

We define a quantitative logic that expresses behavioral properties of terms. Each type has a set of formulas that can be satisfied by terms of that type to varying degrees. These degrees of satisfaction are represented by truth values from a countably complete lattice.

At the heart of the logic's design is the interpretation of algebraic effects. In CBPV, effects are observed in producer types FA. To articulate observable properties of FA-terms in our logic, we include a set of quantitative modalities that elevate formulas on A to formulas on FA. We aggregate a selection of quantitative modalities into a set Q.

We introduce for neutral nondeterminism. We can view the nondeterministic choice as being overseen by an external agent, which selects a strategy for resolving the nondeterministic choices, similar to a Markov decision process. For example, E0 and E2 respectively maximize and minimize the expected score (see for more descriptions of nondeterminism with probability). Similarly, C0 and C2 respectively minimize and maximize the cost.

In this paper, program properties (or observations) are considered the primary means of describing program behavior. According to this perspective, the extension to quantitative properties is straightforward. Alternatively, one could view relations (or comparisons) as primary and, instead, generalize them to quantitative relations. The resulting theory is that of metrics, akin to what is outlined in [2,4,20]. Investigating the relationship of the logic presented in this paper, or a variation thereof, to metrics (such as those in [citations]) is a matter for future research.