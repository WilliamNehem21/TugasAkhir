The latest proposal for OCL 2.0 introduces two semantic descriptions: a metamodel-based semantics that uses UML to associate the semantic domain with language concepts, and a formal semantics based on a set-theoretic approach called object model. Unfortunately, these two semantics are currently inconsistent and incomplete, as the formal semantics does not consider the newly introduced concept of OCL messages, and both semantics lack an integration of statecharts and a semantic definition of state-related operations.

This paper aims to address the inconsistency between the two OCL semantics by focusing on a formal semantics for OCL messages. The objective is to provide a foundation for consistency between the two OCL semantics by extending object models and presenting an extended definition of a system state that encompasses all relevant information needed to evaluate OCL expressions concerning OCL messages.

In this article, a particular instantiation of an object model is referred to as a system, which exists in different states as it changes over time. However, the formal semantics provided in the OCL 2.0 proposal is incomplete, as it does not allow reasoning about currently activated statechart states or sent messages, thus making it impossible to provide a formal semantics for state-related operations and operations on OCL messages.

The concept of OCL messages, newly introduced in the OCL 2.0 proposal, specifies behavioral constraints over messages sent by objects. An OCL message refers to a signal sent or an operation called (synchronous or asynchronous). To check whether a message has been sent, the "hassent" operator can be used. The paper also introduces explicit call identifiers to distinguish messages sent from source objects to target objects and discusses the differences between synchronous and asynchronous operations.

The article extends object models and system states to give semantics to message-related operations that could not previously be formally defined. Additional runtime information, such as currently executed operations and histories of signals and messages sent, must be considered to evaluate expressions that access OCL messages. This article seeks to contribute to the finalization process of OCL 2.0 by providing a formal semantics for OCL messages and corresponding operators and operations.