The importance of safety cases for software certification has been on the rise, with models playing a critical role in gathering and combining information for these safety cases. This position paper outlines an ideal model-based safety case that incorporates defect hypotheses and failure characterizations, and identifies open research issues stemming from this framework.

The use of models is central in the construction of safety cases. While earlier approaches were based on structured reviews of models, more recent methods have employed formal verification techniques for model analysis. However, the systematic definition of these models remains uncommon, and there is still an open issue regarding the justification of the appropriateness of underlying models for safety cases, particularly in terms of deriving relevant hazards, system failures, and component faults, as well as reasoning about the causal chains linking them.

A safety case serves as a structured line of arguments demonstrating the safety of the system under consideration. However, combining the wide array of information required for this argument presents a challenge, and no single safety assurance method can comprehensively address the complexity of safety issues. Therefore, formal verification, statistical testing, process conformance, and other information must be integrated to form a convincing argument.

Model-based development has become a prevalent approach in the construction of embedded (control) software, with models describing nominal functionality and being used for in-the-loop testing and production-code generation. In certain domains, the generation of production code from models has already become standard practice.