In contemporary times, there is a growing trend of employing computers for the representation of mathematical entities. Computer-generated images are extensively utilized for the analysis and simulation of real-world processes and their mathematical models. Our objective is to explore a formal framework that enables the definition of the computational complexity of real sets, specifically measuring the complexity of rendering the set on a computer. Within this framework, we present a novel finding on the computability of Julia sets.

Julia sets are well-known depictions of highly complex chaotic systems, generated by a remarkably simple mathematical process. Throughout the past century, these sets have been deeply investigated within the context of complex dynamics. Julia sets not only serve as intriguing mathematical objects but also serve as a valuable source for captivating images. Numerous computer programs, some of which are freely available online, have been developed to generate these images. Algorithms for computing Julia sets have been presented and discussed in various sources.

In the subsequent discussion, we will enumerate the nonuniform information utilized by the algorithm. This information can be derived from the initial data (i.e., the coefficients of p(z)), as will be expounded later, as per Theorem 8.4. Despite this, we choose to classify it as nonuniform in order to spare the reader from overly intricate technical specifics.

The existence of a value c > 1, as described above, has been established and can be readily proven using a compactness argument. However, our contribution lies in the constructive computation of such a c, which proves to be significantly more challenging. This is especially crucial in Theorem 8.4, where we establish a uniform construction.

This paper also addresses the relationship between the distance d(jp, pl(x)) and the distance d(jp, x), as long as d(jp, pl(x)) does not exceed a certain threshold (o(1/n)). When d(jp, pl(x)) surpasses this threshold, we employ Algorithm 1 to estimate it. Notably, Algorithm 1 runs efficiently in this context, as it is designed to provide estimates with a precision factor of o(1/n) = o(1/2log n), thereby resulting in exponential running time in log n. Utilizing an estimate of the ratio d(jp, pl(x))/d(jp, x), we are able to obtain a reliable estimate of d(jp, x).

Information regarding Julia sets can be derived from the coefficients of p(z). However, this process may potentially take an indefinite amount of time, contingent on the hyperbolic polynomial p. Consequently, there exists an algorithm, polynomial in precision n for computing jp, which is uniform provided that p(z) is hyperbolic. Although we will not provide the proof here, for an in-depth discussion of the main ideas of the proof, please refer to the recommended source.

Douady, A., "Does a Julia set depend continuously on the polynomial?" Proceedings of Symposia in Applied Mathematics: Complex Dynamical Systems: The Mathematics Behind the Mandelbrot Set and Julia Sets, Vol 49 (1994), ed. R. Devaney (Providence, RI: American Mathematical Society) pp 91-138.