This research paper demonstrates the use of visualizations to understand the effects of optimization passes in computer programs. The authors modified two procedural abstraction post pass optimizers to visualize the differences in machine code before and after optimization. The visualizations generated by this process help in gaining insights into the inner workings of the optimization passes.

While visualizations are commonly used in fields like mechanical engineering, chemistry, physics, and medicine, their application in computer science, particularly for program understanding, is limited. The authors highlight the challenge of representing large traces of program executions in a comprehensible manner, and note the ongoing research in developing suitable visualization techniques.

The paper also discusses the findings from the authors' visualization of a compactor, noting that limiting the search for fragments to whole basic blocks may decrease the efficiency of the compactor.

Furthermore, the paper presents a comparison between traditional procedural abstraction and tail merging procedural abstraction, addressing a gap in earlier research. The results show reductions in program size for both methods, with tail merging procedural abstraction demonstrating slightly higher reduction percentages for real programs.

The authors propose the development of an interactive program map, such as a Java applet, to allow users to explore program abstractions interactively. This tool would facilitate the display of program maps, as well as the visualization of references between procedure abstractions, and provide real-time feedback on program size and estimated run-time based on profiling information.