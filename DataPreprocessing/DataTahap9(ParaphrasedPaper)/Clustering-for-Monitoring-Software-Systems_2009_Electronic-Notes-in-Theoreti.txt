The study discussed in this academic paper focused on the comprehension of low and medium-level concepts and relationships within software systems, particularly in C and COBOL legacy systems. The approach involved using functions as entities for C programs, with attributes defined based on the use and types of parameters and variables, and the types of returned values. Clustering techniques were then applied to group subsets of source code based on custom similarity metrics, and an evaluation approach was presented for assessing the usefulness of dynamic dependencies as input for software clustering algorithms.

The paper also highlighted the use of clustering algorithms, specifically traditional hill-climbing and genetic algorithms, to support the automatic recovery of the modular structure of a software system from its source code. Additionally, it introduced a method for performing clustering on software measurement data to comprehend a software system and evaluate its maintainability. This method employed the k-attractors clustering algorithm on metrics reflecting the design aspects of a software system and its quality and maintainability.

Furthermore, the paper emphasized the storage of collected data, attributes, and metrics in structured XML files due to their interoperability and wide acceptance as a standard for data representation and exchange. The XML format allowed for further processing and analysis using various tools. The study also proposed an alternative approach for monitoring cluster changes across software versions by performing the clustering procedure for each version and using the clusters as input for a hierarchical clustering process.

Overall, the paper offered insights into an alternative approach for analyzing software systems using clustering techniques and emphasized the importance of extracting data from various programming languages, including C++, C, and COBOL, to enhance the understanding and maintainability of legacy systems.