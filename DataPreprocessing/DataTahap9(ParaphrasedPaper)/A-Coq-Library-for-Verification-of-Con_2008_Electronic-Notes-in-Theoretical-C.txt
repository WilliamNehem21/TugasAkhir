Concurrent programs are prevalent in various domains such as network servers and database applications, and it is essential to formally verify them to ensure their correctness and security. The primary challenge in formally verifying concurrent programs lies in the vastness of their state space, which can be extensive due to non-determinism and even infinite for non-terminating applications like reactive systems.

Previous work utilizing proof assistants has predominantly focused on abstract concurrent systems rather than realistic concurrent programs. While there have been numerous formalizations of pure concurrent calculi, and experiments combining proof assistants and model checkers for minimal concurrent languages, the verification of realistic concurrent programs remains cumbersome due to the lack of datatypes. Additionally, the extensive nature of previous proof developments raises doubts about the practical feasibility of such verifications. As a result, the satisfactory formal verification of realistic concurrent programs has not been adequately addressed.

The process of verifying formal proofs can be facilitated by a collection of lemmas, particularly those based on confluence properties. These lemmas aid in reducing the state space that needs to be explored during verification, resulting in more efficient formal proofs.

The approach employed in the paper can be characterized as a deep embedding, as the syntax is defined as an inductive type used to define the operational semantics. However, the integration of Coq functions also gives it the characteristics of a shallow embedding.

An important aspect in the specification language developed in the paper is the formalization of strong fairness, which is crucial for writing satisfactory specifications for realistic concurrent programs. The paper addresses the encoding of the fairness assumption and provides the semantics of the formulas in the specification language.

One of the principal challenges in proving properties of concurrent programs is dealing with non-determinism, as verifying a property requires checking all possible runs, which can be costly and often infeasible due to infinitely many runs or unknown processes.

The paper evaluates the feasibility of verifying concurrent programs using a library and presents a case study of verifying the SMTP receiver part of an existing mail server. The study compares the verification process using the proposed library with a different approach that involves building a faithful functional model of the application in Coq.

In conclusion, the paper aims to address the formal verification of realistic concurrent programs, acknowledging the challenges associated with non-determinism and the vast state space while proposing a collection of lemmas and tactics to facilitate formal proof. It also provides insights into the feasibility of verifying concurrent programs using the proposed library through a case study.