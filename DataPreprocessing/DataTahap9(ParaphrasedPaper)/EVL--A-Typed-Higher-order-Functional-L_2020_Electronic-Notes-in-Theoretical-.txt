We introduce evl, a minimal higher-order functional language designed for handling generic events. The concept of generic events expands on the traditional notion of events that has been commonly used in fields such as database management, concurrency, reactive systems, and cybersecurity. In our language, event specifications are represented as records, and we employ polymorphic record types for typing events. We demonstrate how the higher-order capabilities of evl can be employed in the context of complex event processing (CEP) to define higher-order parameterized functions that address typical CEP techniques.

Similar to tuples, the type of a particular list in this notation is closely linked to the size of the list. While a more practical approach would involve adding lists and list-types as fundamental concepts in the language, in our effort to keep the language minimal, we refrain from doing so. Furthermore, although we often use constants (numbers, booleans, strings, etc.) and operators (arithmetic, boolean, etc.) in our examples, we do not include constants or operators in the grammar of the language, opting instead to represent them as free variables. In a more comprehensive approach, the grammar could be extended to encompass other data structures and operators for numbers, booleans, lists, etc.

Consider the example where a generic event "firedanger" is defined and a function called "check" is created to determine the risk of a fire breaking out in a specific location based on the associated weather information. The function "check" generates an appropriate instance of "firedanger" to report the relevant fire danger level.

We explore the application of evl in the context of complex event processing (CEP), which encompasses various techniques for handling streams of events, including event processing, pattern detection, relationship detection, filtering, transformation, and abstraction. Given that evl is a higher-order functional language, we delve into its higher-order capabilities to define higher-order parametrized functions that cater to standard CEP techniques.

The canonical model for event processing is founded on a producer-consumer framework, where an event processing agent (EPA) retrieves events from event producers and distributes them among event consumers. This process often entails filtering or translation. Filtering is necessary as not all events may be relevant or accessible to every consumer, while translating allows for modification, addition, or removal of information based on specific consumers. Event processing can take on various forms, including one-event in/one-event out processing, processing a collection of events as a whole, or producing a set of events as output. For instance, an incoming event may be split into multiple events, each containing a subset of the information from the original event.

Evl can be employed to program event processing agents, enabling the processing of raw events produced by event processing systems and the generation of derived events. These derived events can then be forwarded to event consumers.

Transformation event processing agents can be stateless (processing events individually without considering preceding or succeeding events) or stateful (processing influenced by preceding or succeeding events). They can further be categorized as translate, split, aggregate, or compose agents.

For instance, an event processing agent is described that "composes" partial weather information obtained from two different sensors to produce a complete instance of "weatherinfo." Additionally, a "pattern detect event processing agent" is defined as an agent that performs pattern matching on input streams, emitting derived events if it detects a specified pattern in the input events.

Pattern-detect agents are particularly relevant in publish-subscribe systems, where consumers can subscribe to selective events by specifying filters using a subscription language. Such systems extend traditional publish-subscribe functionality by enhancing the subscription language to consider complex event patterns.

In dealing with event processing applications, events often exhibit similar structures and meanings. By specifying the structure of an entire class of events instead of each event individually, we establish a relationship between generic and specific events. Evl, based on the typed language, extends the language by allowing explicit subtyping between record types.

A retraction event relationship refers to an event referencing a second event, indicating that the second event is a logical reversal of the event type that references it. This has relevance in access control systems with obligations.

In the context of processing flows of information, two primary models are pivotal in research: the data stream processing model and the complex event processing model. A survey of information processing systems revealed a need for a language that combines features of data processing and event detection. Evl appears promising in bridging the gap between these two models.

Future work on the evl language involves the representation of events as records and the consideration of more advanced operations on records, which are not presently part of evl but could be beneficial for both CEP and the treatment of obligations in access control models.