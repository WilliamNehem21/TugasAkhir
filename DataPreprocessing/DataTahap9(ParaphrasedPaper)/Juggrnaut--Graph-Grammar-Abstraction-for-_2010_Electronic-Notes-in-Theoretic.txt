We propose a new abstraction framework for heap data structures using graph grammars, specifically context-free hyperedge replacement grammars, as a formalism for effectively representing dynamic data structures. Our goal is to extend verification techniques to handle programs manipulating pointers within complex and potentially unbounded dynamic data structures. To demonstrate the utility of our framework, we instantiate it for binary trees and apply it to the Deutsch-Schorr-Waite traversal algorithm, showcasing its support for verification tasks such as checking heap invariants, completeness, and termination.

Another grammar-based approach to heap abstraction is discussed in a related work; however, it only supports tree data structures, whereas our framework, utilizing hyperedge replacement grammars, can handle not only tree-shaped data but also interconnected structures like cyclic lists.

Verification of the Deutsch-Schorr-Waite tree traversal algorithm has been addressed in prior studies. We find this algorithm to be an interesting case for demonstrating the practical applicability of our approach and for comparison with existing results, as detailed in Section 4.

Our approach is unique in that it provides a novel and descriptive method for specifying abstractions across a wide range of heap data structures. It supports dynamic memory allocation with unbounded heap sizes and destructive updates, and can be extended to concurrent programs with dynamic thread creation.

Hyperedges, treated as separate entities in the graph, are mapped to sequences of attached vertices, with connections between hyperedges and vertices termed as "tentacles." We consider isomorphic copies of a hypergraph to be identical, except for vertex and hyperedge renaming. A hypergraph is substantial if its vertex set is non-empty.

Our abstraction function only abstracts heap parts consistent with the grammar, such as binary trees. However, this does not mean that the framework is unable to handle inconsistencies in the heap, which would refer to parts violating data structure definitions. In such cases, the inconsistent parts remain concrete while other heap parts are abstracted.

We have implemented the Juggrnaut framework in a prototype tool for verifying properties of pointer-manipulating algorithms. This tool exhaustively explores the abstract state space and can evaluate LTL formulae on the generated state space.

We utilize the LTL model checker integrated into our tool to verify completeness and termination of the Deutsch-Schorr-Waite algorithm. Although the state space is more complex and larger than before, its generation takes less than 5 minutes. Upon completion of state space exploration, we can verify the LTL formulae in 10 and 21 seconds, respectively.

We have presented and implemented the Juggrnaut framework for analyzing and verifying pointer-manipulating programs operating on dynamic data structures. The abstraction mechanism is parameterized through a hyperedge replacement graph grammar modeling the data structure(s) employed in the program. We have illustrated how heap states can be abstractly represented and abstract state spaces can be generated. Our theoretical findings have been implemented in a prototype tool, enabling exploration of abstract state spaces and evaluation of LTL formulae.