The question holds significance for several reasons. Firstly, it serves as a means to establish the boundaries of the applicability of turing categories in the study of computability. If the total maps of a turing category cannot be precisely equivalent to, for example, the linear time functions, then the utilization of turing categories as a framework for exploring feasible computation at lower complexity levels becomes impracticable. Conversely, if it is known that the total maps of a turing category can operate at such low complexity levels, then turing categories can be employed as a tool to formally integrate computability and complexity theory, facilitating a seamless exchange of concepts between these fields.

Of particular interest is not only the question itself, but also the methodologies utilized to provide a resolution. The demonstration that a cartesian category, which satisfies specific conditions, can be incorporated as a category of total maps within a turing category is reliant upon two key ideas. Initially, it utilizes the yoneda embedding to establish a canonical category of partial maps into which the original category can be embedded. Subsequently, the concept of a stack machine in the presheaf category is employed to construct a partial combinatory algebra, which in turn gives rise to the desired turing category. A stack machine can be viewed as a categorical implementation of the canonical rewrite system in combinatory logic, augmented with additional data.

The exposition commences by exploring the more general question of how a category can emerge as the subcategory of total maps of an arbitrary restriction category. This inquiry leads to the concept of a totalizing extension of the given category. It is shown that the category of totalizing extensions of a specific category possesses a final object, which naturally forms a restriction category. This insight enables the general question of finding a turing category that extends a given cartesian category to be translated into the task of identifying a partial combinatory algebra in this final extension, whose total maps encompass the given maps. This perspective allows for the proposal of essential conditions for a cartesian category to represent the total maps of a turing category. To demonstrate the sufficiency of these conditions, it is illustrated that a combinatory algebra in the final totalizing extension, constructed using a simple abstract machine, includes elements that represent all the total maps, in accordance with theorem 4.12 of a referenced source. Finally, more straightforward sufficient conditions are presented to illustrate the extensive applicability of the theorem.

Collectively, the essential conditions for being the total maps of a turing category must include the requirement for the total map category to be cartesian (i.e., possessing finite products), given that turing categories are inherently cartesian. The remaining conditions are somewhat more technical, but notably, in many cases of interest, these conditions are considerably simplified.

It is pertinent to note the concept of a preinitial object, which is defined as an object for which at most one map exists from that object to any other object. If any object with a map to h is itself preinitial, it is referred to as strict preinitial. Preinitial objects are commonplace; for instance, in the category of (commutative) rings, z is the initial object, while zn is preinitial for each n. However, neither z nor zn are deemed strict preinitial.

An example is presented to illustrate a total map category that possesses a universal object but cannot be the total maps of a turing category. Specifically, in the case of a meet-semilattice category, where the only element is the identity on the top, it is necessitated that this identity be disjoint from itself, ultimately causing the top and bottom to collapse, and thereby invalidating the category's ability to consist entirely of preinitial objects.

The step partial function is highlighted as the aggregation of all its individual components. For the function to be well-defined, it is imperative that all these components are compatible, meaning that they align on domain overlaps. Those which are situated in distinct components of the stack object are inherently disjoint and hence compatible. However, establishing the compatibility of the implementation of names within the same component is required.

In an effort to consolidate the abstract notion of computability encapsulated in turing categories with the examination of feasible computation (e.g., linear, logspace, ptime, etc.), it is imperative to ascertain whether these functional complexity classes can form the total maps of a turing category. Prior work has demonstrated the natural description of both logspace and ptime functions as the total maps of turing categories. However, in order to derive these results, it was necessary to rely heavily on established facts from complexity theory, such as the universal simulation of transducers and turing machines with an overhead that can be accommodated within logspace and ptime, respectively. Notably, the inclusion of linear time maps in this approach encountered challenges, as there is no widely accepted machine model capable of universally simulating itself with a linear time overhead, thereby complicating their ready inclusion in this framework.
