The authors suggest dividing tools into front- and back-ends, with an operational semantics serving as the connection between them. They focus on the back-end and propose a versatile, mathematical framework for developing software through stepwise refinement. Refinement is defined differently across formalisms, and the authors demonstrate that their general model can encompass various existing refinement definitions. They emphasize the importance of flexible refinement in building specialized definitions such as operation and data refinement. The paper presents an informal definition of refinement, a motivating example, and the technical details of the semantics for the tool's back-end. The authors emphasize that the paper is about refining entities represented by operational semantics and not about the specific syntax used to define them. They also discuss the need to formalize refinement while considering the contexts and observations of the entities involved. The paper presents a model of the observer as a passive user who observes or interacts with entities, without blocking their events. The authors highlight the flexibility and guarantee preservation of their model, which allows theory morphisms to be viewed as refinements. They also discuss the introduction of nondeterminism in state-based flexible refinement and the relationship between abstract and concrete machines. Overall, the paper provides a new and general definition of refinement and demonstrates its application to expand the state space and set of operations of an entity.