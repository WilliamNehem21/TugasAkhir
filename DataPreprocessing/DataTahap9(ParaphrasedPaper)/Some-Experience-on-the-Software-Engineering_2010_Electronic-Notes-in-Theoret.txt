The paper discusses the representation of internal expressions using normalized BDDs/MTBDDs and describes the differences between BDDApron and Apron. It highlights the representation of expressions as general Boolean expressions instead of constraints in BDDApron and notes that the operations supported by BDDApron are identical to those supported by Apron.

Additionally, the paper mentions the advantages and drawbacks of the approach, including efficient memory management and the challenges of combining front-end and solver components. It also discusses the importance of modular components, emphasizing the fixpoint solver and abstract domain components as the most modular elements and the difficulty in achieving modularity in the front-end part of the analyzer.

The paper touches on the complexity of APIs in a modular design and the use of a high-level language like OCaml to improve API quality. It also compares the approach with the pag tool, highlighting differences in architectural choices such as integrating solver, abstract domain, and front-end components into a single package and providing a specialized specification language for defining abstract domain datatypes and transfer functions.