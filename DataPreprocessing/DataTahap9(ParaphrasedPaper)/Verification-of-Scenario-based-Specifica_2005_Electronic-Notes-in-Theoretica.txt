When defining the meaning of message sequence charts (MSC) graphs, there are two interpretations for the concatenation of basic MSCs, denoted as m1 and m2. In synchronous concatenation, all the events in m1 occur before any event in m2, while asynchronous concatenation corresponds to concatenating two MSCs instance by instance.

In this paper, all the verification algorithms assume synchronous concatenation in the semantics of MSC graphs, which enables the algorithms to be modular in nature. This means that the verification task can be broken down into smaller tasks that can be verified at each vertex. Verification algorithms for asynchronous concatenation are more intricate, as they require the construction of a global reachability graph from the input MSC graph.

For simplicity, it is assumed that x and y do not contain any negative user-defined events. Given a set of sets x, the notation x represents the union of the sets in x (e.g., {{a, b}, {a, c}} = {a, b, c}). The algorithm 2 presented in this paper implements proposition 3.7 to determine whether a given vertex u is always followed by another vertex v in a graph g, with respect to specific start and end vertices in g. The algorithm essentially conducts a recursive depth-first traversal of the graph g, starting at u and backtracking when reaching any vertex in l. The global array visited of boolean flags marks vertices that have already been visited.

The authors express gratitude to the BMF Tool project team for implementing their ideas and providing valuable feedback. They also appreciate the support and encouragement of Prof. Mathai Joseph throughout the duration of this work. The first author extends thanks to Dr. Manasee Palshikar.

Additionally, with respect to timers, the meanings of an instance and a message depend on the system being described. An instance does not necessarily stand for a computer program; it refers to some active agent or entity. Similarly, a message does not necessarily represent an actual data message; it may refer to some kind of exchange of information. A message has a name and no further structure or details (in the simplest case). An MSC is not concerned with the actual mechanism or channels of message transmission, except to assume that messages are always delivered in order without any loss or corruption. Furthermore, the send operation is non-blocking, meaning the sender does not wait until the receiver receives the message.