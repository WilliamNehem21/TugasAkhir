As noted in the research, the debugging phase of software development is often overlooked in the computer science community, despite taking up a significant portion of the overall development time. While the RML language is easy to learn, the absence of debugging facilities has previously led to challenges in understanding, debugging, and verifying large specifications. To address this issue, we have developed a debugging framework for RML, which is based on abstract syntax tree instrumentation in the RML compiler and supplemented by some runtime support. Additionally, type reconstruction is performed at runtime to present values of user-defined types.

The RML editor component offers several features, including syntax highlighting, auto-indentation, code completion, type information, and error highlighting. This component acquires necessary information from the RML parser and the RML compiler, gathering errors and type inference information from the latter.

All components of the SOSDT utilize the features of the Eclipse framework, which are populated with information from the RML parser and the RML compiler. When a file is saved, the RML parser reads the file, updates the internal RML model information, and triggers the update of the RML browser. Additionally, upon saving, the RML file is sent to the RML compiler, which provides error information to be displayed in the problems view and type information used to update the internal RML model.

Mini-Freja is a call-by-name pure functional language, and the test program calculates prime numbers. Performance comparison of the Prolog translation (mf.pl) was conducted on a Fedora Core4 Linux machine with two AMD Athlon XP 1800+ processors at 1500 MHz and 1.5GB of memory during April 2006.

As a result, we have designed and implemented a prototype of an integrated environment to support such development. Initially based partly on Emacs, the current version is integrated into Eclipse as an SOSDT Eclipse plugin. Some RML users who have debugged their specifications using a prototype of this environment have provided positive feedback and suggestions for improvement. However, there is still ample room for improvement in this environment. In the future, we aim to enhance the debugger's execution speed and implement additional features. Our ultimate objective is to provide a highly integrated and supportive integrated development environment (IDE) for RML based on the Eclipse platform.