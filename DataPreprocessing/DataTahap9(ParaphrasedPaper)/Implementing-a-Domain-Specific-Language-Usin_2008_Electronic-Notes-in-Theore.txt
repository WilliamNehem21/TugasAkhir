This paper details the process of re-implementing a domain-specific language, called apply, for low-level computer vision and image processing using transformation tools. The authors compare this experience with traditional compiler implementation techniques, highlighting the unexpected advantages and practical challenges encountered during the implementation. They discuss the specific features of the apply language, the influence of using stratego/xt on language design, and the development of the current apply compiler in comparison to the original C-based implementation.

The authors also introduce new metaprogramming style language extensions added to the apply language as a result of the experience gained from using transformation techniques for compiler implementation. These extensions include known expressions, apply statements, defined expressions, and assert statements, which serve to provide hints to the compiler for optimizations and make it easier to write stratego rules to generate code targeting specific APIs.

Furthermore, the paper discusses the advantages of using concrete syntax in transformations, which facilitated the development of the apply language to enhance its expressivity without compromising performance. The authors compare the complexity and effort involved in programming the original compiler and the current implementation, highlighting the increased code manipulation and optimization capabilities of the current implementation.

Additionally, the paper presents a comparison of the generated code performance between the old and current compilers, showing that the current compiler produces more optimized code and achieves better performance. The authors demonstrate that implementing a compiler through transformation to a general-purpose language is a practical approach for achieving a non-embedded domain-specific language.