This academic paper introduces a novel approach to program verification using a proof-assistant. The approach involves automatically translating programs into tail-recursive functions within the logic of a theorem prover. This method improves upon established techniques such as hoare logic and verification condition generation by eliminating the need for annotating programs with assertions. This makes the proof process more aligned with the theorem prover and easier to implement than a trusted verification condition generator. The tool has been implemented in the HOL4 theorem prover.

The paper builds on the work of Camilleri and Melham, who defined a big-step operational semantics for programs in HOL. The paper considers states as finite partial functions from variable names (of type string) to integers (of type int). It defines evaluations over expressions using neval and beval.

Assignments update the value of a variable and can be implemented using a let-expression. For example, the effect of the assignment "b = a + b" can be captured by "let b = a + b in (a, b)." This fact is expressed in a theorem.

To verify a program using a verification condition generator, one typically annotates the code with assertions. For a program, one must invent a precondition, a postcondition, and, for a loop, an invariant and a variant. Representing imperative programs as recursive functions, inspired by McCarthy, was crucial in this work. Ideas from separation logic were used to aid automation by keeping specifications free of side conditions, and ideas from decompilation into HOL were used to handle loops. The programming environment used is the HOL4 theorem prover.