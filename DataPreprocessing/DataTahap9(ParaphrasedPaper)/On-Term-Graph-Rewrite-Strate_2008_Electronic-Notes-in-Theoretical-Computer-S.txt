In this paper, we examine the rewrite relation within a specific category of term-graphs known as admissible. An admissible term-graph is a term-graph that does not contain cycles involving defined functions. We establish a syntactic condition that ensures the set of admissible graphs remains closed under rewriting and demonstrate the confluence of the admissible graph rewriting relation, even in the presence of collapsing rules.

The confluence of a rewrite relation allows for deterministic and efficient evaluation of expressions using rewrite strategies. Such strategies have been extensively studied in the context of finite and infinite orthogonal term rewriting systems (TRSS). We introduce a strategy for computing outermost needed redexes based on definitional trees within the framework of orthogonal constructor-based TRSS. We show how definitional trees can be leveraged to design an efficient strategy in the presence of orthogonal constructor-based term-graph rewriting systems (TGRSS), particularly emphasizing that the resulting strategy achieves c-hyper-normalization on the class of admissible graphs and yields shorter derivations.

The structure of this extended abstract is as follows: We revisit the definition of term-graph rewrite systems in the subsequent section. Section 3 presents the class of admissible term-graphs and establishes the confluence property for admissible TGRSS. An efficient rewrite strategy is outlined in Section 4, followed by concluding remarks.

Given the complexity of computing with general cyclic term-graphs even in the presence of orthogonal rewrite systems, we introduce the class of admissible term-graphs as a category for which confluence results can be established and efficient strategies can be devised. This class draws inspiration from imperative programming, where defined procedures and functions work on data structures built using specific constructors such as records and pointers, and where cyclic expressions like n: fact(n), n: tail(n), or n:+(n, n) lack meaningful interpretation.

We present a well-defined notion of outermost node and outermost redex within the framework of admissible graphs, taking into account the absence of paths between nodes labeled with defined operations, reflecting the structure of admissible graphs. Our strategic approach has been extended to accommodate parallel rewriting in the context of weakly orthogonal rewrite systems, as well as to include needed narrowing steps. Moreover, the framework presented in this paper has been augmented to handle non-deterministic functions in declarative (functional and logic) languages. Ongoing research involves exploring further extensions of the strategy in a broader context, such as term-graphs with priority.