The meaning of a proof language depends on how it represents the state of a proof following the application of a logical rule. This information is often meaningless logically, but it is crucial for describing the control mechanism of the proof search in the language. In this paper, we introduce a monadic datatype for representing the state information of a proof, demonstrating its utility in the pvs theorem prover. We also show how this representation can be used to develop a new set of powerful tacticals for pvs called pvs#, which offer simpler and clearer semantics compared to standard pvs tacticals.

Previous attempts to formalize the semantics of the pvs proof language recorded the state of a proof using flags added to the proof tree representation. Our approach demonstrates how proof state information can be elegantly modeled using a simple monadic datatype. We define the datatype and its properties in section 2 and illustrate its application in designing new pvs tacticals, pvs#, in section 3. Furthermore, we describe the implementation of the monadic datatype in pvs# in section 4.

In functional programming, monads are commonly used to describe imperative features like side effects and exceptions. A program p is viewed not as a pure function from a to b, but as a morphism from values of type a to a datatype mb, where mb represents the combination of side effects in p and its return value b. Monadic operators associated with the datatype follow monad laws and provide a way to build and compose programs.

We refer to the concrete representation of a possibly incomplete proof tree as a proof object. The formalism presented here employs a coarse abstraction of this representation, assuming that proof objects provide the means to distinguish the set of current goals among all open goals. Using x as the type of proof objects, and x, y, z as instances of x, we define the monadic datatype mx. The paper also introduces a tactical, (#catch t1&optional tag t2), which behaves as t1 if it does not raise an exception. If t1 results in an exception named tag, then it evaluates t2. If tag does not correspond to the name of the exception, the exception is propagated.

Ongoing work in this area includes the development of new tacticals for pvs#, the meta-theoretical study of monads in proof languages, and their application to other theorem provers. The concept of monads is expected to play a central role in the design and semantics of proof languages for procedural theorem provers in the long term. Furthermore, the monadic datatype has already been implemented in the fellowship proof assistant.