The format of an abstract specification of a system often differs from the structure of its implementation, as the latter typically involves a greater number of interacting components. Including architectural details in the initial specification can obscure the essential functionality and complicate reasoning, especially in the case of real-time embedded systems where software components interact with a continuously changing non-software environment. Refactoring real-time specifications is therefore desirable to address these challenges.

Real-time Object-Z, an extension of Object-Z for specifying real-time embedded systems, incorporates the notation of the timed interval calculus (TIC), enabling the specification of real-time constraints and interactions with a continuous environment. This paper aims to adapt the Object-Z refactoring approach to Real-time Object-Z. However, the current definition of the formalism does not support object instantiation, so defining a semantics of objects in Real-time Object-Z is necessary.

The paper is organized as follows: Section 2 introduces Real-time Object-Z using a speedometer example, while Section 3 discusses object instantiation in Real-time Object-Z and presents a means of specifying synchronization between operations in different objects. Section 4 explores the adaptation of the Object-Z refactoring approach and refactors the speedometer example to reflect a specific design, and Section 5 examines the issues of refinement and compositionality that arise from the semantics of objects, before concluding in Section 6.

In Real-time Object-Z, the specification of object occurrences and real-time histories is crucial. However, the current definition does not support object instantiation, which presents a challenge in representing the value of an object at any instant. The paper discusses these challenges and the need for object instantiation support in Real-time Object-Z. It also explores the effects of refining various parts of a class and the implications for real-time histories.

Furthermore, the paper discusses the need to simplify class definitions and the removal of features and operations that are not referenced in the specification. It also addresses the issue of operation synchronization and overlapping in time, and how this is captured in Real-time Object-Z.

Overall, the paper aims to address the challenges and limitations of Real-time Object-Z by proposing adaptations to support object instantiation and address the complexities of real-time specifications.