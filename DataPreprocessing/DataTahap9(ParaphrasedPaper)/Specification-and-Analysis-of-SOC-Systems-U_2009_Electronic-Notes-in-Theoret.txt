In this paper, we demonstrate our approach by focusing on the use of cows (calculus for orchestration of web services), a process calculus specifically designed for specifying and combining services, and for modeling their dynamic behavior. We introduce the calculus and one of the analysis techniques it enables, which is based on the temporal logic socl and the associated model checker cmc. To showcase the applicability of our tools, we present a comprehensive case study from the financial domain, which is first specified in cows and then analyzed using socl to express significant properties and cmc to verify them.

We illustrate our approach by concentrating on cows, a process calculus designed for specifying and combining services, and modeling their dynamic behavior. Cows is a formalism for service-oriented systems, inspired by ws-bpel, which allows for the natural translation of cows specifications into ws-bpel code and vice versa. This enables the development of tools for semi-automatic ws-bpel code generation and program verification using cows-based analytical tools. We introduce the calculus and its operational semantics and demonstrate the expressiveness of cows by specifying a significant financial case study within the eu project sensoria.

We present a large case study from the financial domain investigated within the eu project sensoria on software engineering techniques for service-oriented applications. We provide an informal specification of the scenario, followed by a more detailed uml-based one and finally a formal cows specification. We also outline some desirable properties of the application, which are later formalized by socl and checked against the cows specification with the support of cmc.

The uml4soa includes the representation of send & receive actions, and it introduces the possibility of installing compensations for executed activities in case of failure. The uml4soa allows for modeling fault handling activities that forcibly terminate other concurrent activities.

The case study was initially modeled in uml4soa and then translated manually into cows. We propose the future work of defining systematic and semi-automatic translations of uml diagrams into cows. Additionally, we aim to extend the semantics of uml4soa activity and explore the possibility of translating cows terms into ws-bpel programs or developing a running environment for executing cows terms.