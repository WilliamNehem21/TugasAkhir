The ability to interrupt the normal execution of a system is an important feature in programming and specification languages. Process algebras have been expanded to include an interrupt operator, and a new class of event structures, known as interrupt event structures, has been developed to provide a truly concurrent semantic for process algebras that incorporate interruption. Interrupt event structures are more expressive than other event structures in terms of event trace execution, and they can differentiate between simultaneous event executions and event interleaving. The paper also demonstrates the consistency between the operational and denotational semantics of a process algebra containing an interrupt operator using bisimulation.

Interrupt mechanisms are increasingly utilized in programming languages and have become especially important in reactive, concurrent systems. For example, interrupt mechanisms are often used in scenarios such as interrupting and resuming downloads from the internet. Various interrupt mechanisms have been added to process algebras to support such scenarios, and one common approach is to use an interrupt operator, denoted as ">>," where a process behaves like itself but can be interrupted by another process.

It is crucial to have true concurrency models that accurately capture the independence of events. Event structures are commonly used for this purpose, but standard event structures are limited in their ability to describe interrupts. To address this limitation, interrupt event structures have been introduced, which can model the cancellation of event disabling. These structures are more expressive than other event structures and can distinguish between event interleaving and simultaneous event executions. Additionally, the paper introduces a process algebra with an interrupt operator and provides operational and denotational semantics using interrupt event structures, along with a consistency result between the two semantics.

The paper is organized as follows: Section 2 introduces interrupt event structures, Section 3 examines their expressive power, Section 4 presents the process algebra, the two semantics, and the consistency result, and Section 5 discusses related works. Additionally, a technical constraint called "approximation closedness" is necessary to obtain a complete partial order when defining interrupt event structures but is omitted from the paper for readability.

Lastly, the paper discusses the extension of interrupt event structures with termination and action labeling information to provide denotational semantics for the process algebra. A causality result based on bisimulation is presented, and action execution, including termination information, for labeled interrupt event structures is introduced before the consistency result is presented.