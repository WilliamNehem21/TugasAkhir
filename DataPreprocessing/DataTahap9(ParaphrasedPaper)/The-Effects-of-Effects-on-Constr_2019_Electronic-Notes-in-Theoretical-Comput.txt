However, this paper demonstrates that the conventional rationale for constructive mathematics makes an implicit assumption about the nature of computation. This assumption is that the computation used to construct an object, in order to prove its existence, is deterministic. Notably, the computational systems underpinning major proof assistants are all deterministic, with even undecidable systems like Nuprl coincidentally employing deterministic computational systems. Despite significant research on modeling and reasoning about non-deterministic computation constructively, non-deterministic computation has not been directly integrated into the computational systems supporting proof assistants.

It is proposed that the technique of Continuity Checker (CC) can still be employed in the presence of non-determinism, as state can be used to memoize computations. Therefore, CC can be implemented by memoizing the computation contained in the proof of totality. This implies that constructive systems aiming to directly support probabilistic or non-deterministic parallel algorithms should also accommodate some form of state in order to be consistent with CC and the unification of the reals.

While the discussion primarily focuses on constructive type theory, the findings are intended to be relevant to set theory as well. To achieve this, type theories with appropriate expressiveness are explored. Multiple type theories are constructed to evaluate the various impacts of effects, and known tools are used to generate the necessary boilerplate, with background provided on topos theory and tripos theory corresponding to models of type/set theory and higher-order logic.

A tripos is presented as a model of higher-order dependent predicate logic, and is used solely for the purpose of constructing toposes, with the process for doing so applicable to any model of higher-order logic over any type theory.

It is noted that the determinism of application is crucial for the proof that realizability models demonstrate CC. However, it is shown that determinism is not relevant to the realizability interpretation of higher-order logic. Rather, determinism is considered a historical artifact imposing an artificial constraint, and realizability can be formulated based on non-deterministic, i.e., relational, combinatory algebras. Consequently, relational combinatory algebras are developed and shown to naturally form a model of higher-order logic, with this generalization significantly impacting constructivism, as simple actions such as a coin flip can change CC from being necessarily true to necessarily false.

A subtlety is addressed regarding the deterministic nature of partial combinatory algebras (PCAs) and the termination predicate needed for relational combinatory algebras (RCAs), as an application in RCAs can succeed in one execution yet fail to terminate in another.

The paper mechanically verifies its contributions, providing formal definitions and statements of lemmas and theorems in an appendix, but does not walk through the proofs in detail, directing interested readers to interact with the Coq proofs themselves.