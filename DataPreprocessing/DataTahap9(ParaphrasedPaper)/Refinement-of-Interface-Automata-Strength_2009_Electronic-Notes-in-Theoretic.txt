The combination of two compatible interfaces can be incorporated into at least one design due to the non-input-enabled characteristic, which allows for certain input actions to be disabled at every state, unlike in the cases of input/output (i/o) automata and Communicating Sequential Processes (CSP). Interaction occurs through the synchronization of shared input and output actions, while the internal actions of concurrent automata are asynchronously interleaved. This enables automatic compatibility verification and refinement checking. The formalism of interface automata has been used as a formal model for specifying the interface behaviors of software components in various instances. Previous work has enhanced the model of interface automata to achieve more reliable verification of component interoperability by considering the semantics of actions. The method proposed enriches the transitions of interface automata by introducing pre- and post-conditions of actions, which are atomic prepositions over a set of variables. However, the prior work does not cover the entirety of interface automata with regard to refinement. This paper aims to present the refinement of our extended interface automata.

The role of the refinement relation is to formalize the relationship between the abstract and concrete versions of the same component. For i/o automata, refinement is typically defined as trace containment or simulation, ensuring that the output behaviors of the refined automaton are behaviors allowed by the abstract one. However, such definitions of refinement do not hold for non-input-enabled settings, such as interface automata. In the case of interface automata, if the set of legal inputs of the refined interface is a subset of the inputs allowed by the abstract one, then the refined interface could be used in fewer environments than the interface abstraction. A new approach is adapted for composing interface automata, and an alternating approach is used for refining them.

Alternating refinement simulation is defined to study refinement between alternating transition systems. These transition systems are introduced as a general model for component-based systems, allowing for the study of adversarial relationships between individual system components. Unlike in labeled transition systems where each transition represents a possible step of the system, each transition of an alternating transition system corresponds to a possible move in a game between different components. The refinement of interface automata is based on this approach by viewing them as alternating transition systems. Specifically, a refinement of an interface automaton indicates that the refined component can offer more services (input actions) and fewer service demands (output actions). This article adapts the alternating refinement simulation of interface automata by considering the relationship between pre- and post-conditions among the input and output transitions of an automaton and their corresponding refinements. Essentially, a refined version uses more variables to formulate pre- and post-conditions of the refined and added input actions. We assume that the pre- and post-conditions of the remaining output actions do not change. The article also discusses strengthening the semantic constraints on the offered services and not on the demanded services, as the component may ignore whether the demanded service was refined or not in the environment.

I/o automata, introduced by Nancy A. Lynch and Mark Tutle as labeled transition systems, are commonly used to model distributed and concurrent systems. The labels of i/o automata fall into three categories of actions: input, output, and hidden actions, with input actions being enabled at every state of an automaton.

The approach presented extends interface automata by considering action semantics to ensure more reliable verification of component interoperability. The checking of component compatibility uses only action signatures, which are insufficient to decide if two interfaces are compatible or not. This approach uses pre- and post-conditions over a set of variables to annotate the actions of interface automata, adding semantic effects that can be useful for strengthening compatibility checking. The proposed algorithm verifies the composition and compatibility between interface automata by taking into account the pre- and post-conditions of actions.

The composition condition remains the same as the preexisting approach. The composition of two automata may occur only if their actions are disjoint, except for shared input and output actions between them. When composed, shared actions are synchronized, while all other actions are interleaved asynchronously.

The verification steps in this approach are the same as in the previous approach, except that action semantics are considered. The proposed algorithm verifies the compatibility of two interface automata by checking if their composition is nonempty. It is noted that this approach does not increase the linear complexity of the previously proposed one. Lastly, it is added that the associative criterion of the composition operator between three automata is undefined when some of them are not composable.

The aim of the refinement relation is to concretize an abstract version of a component interface, moving it from a higher-level understanding to a more concrete specification. While traditional types of i/o automata define refinement as trace containment, the refinement of interface automata is based on an alternating refinement relation in the spirit of simulation. A more concrete version of an interface must be used in stronger environments than its abstraction, such that the refinement must allow more legal inputs and fewer outputs than the abstract version.

Defining pre- and post-conditions of actions of the refined interface must adhere to certain constraints. When refining a component, new services are added to the provided services (input actions) by defining new action signatures, while the former operations are strengthened by adding additional constraints on their pre- and post-conditions. It is noted that in the refined interface, an old input action must have fewer preconditions than its corresponding action in the abstract one, and its post-condition must be stronger than the corresponding post-condition in the abstraction.

The concept is illustrated by applying refinement to the component vehicle of the CYCAB car component-based system. The CYCAB car is a new electrical means of transportation designed primarily for free-standing transport services, controlled entirely by a computer system and capable of automatic operation in various modes.