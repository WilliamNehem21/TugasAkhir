This academic paper introduces the Adaptive Competitive Learning (ACL) neural network algorithm, which is designed to group similar input feature vectors and determine the appropriate number of clusters in a given data set. The algorithm uses a newly proposed ACL criterion to evaluate different clustering structures, selecting the one that consists of the minimum number of compact and balanced clusters. The neural network architecture chosen is also efficient in terms of complexity, with the least number of neurons required. The performance of the ACL algorithm is compared with a recent algorithm in the literature, demonstrating its superior accuracy and robustness, particularly with sparsely distributed data sets.

The ACL algorithm utilizes the ACL criterion to determine the optimal number of output neurons in the neural network for clustering a given input data set. This criterion aims to achieve a cluster structure that is dense, well-separated, and balanced, with minimal parameters to be estimated. It selects the neural network that represents minimal within-cluster variations and a minimum value for the product of the relative weights of clusters in the data set. The paper further discusses the evaluation of the ACL algorithm in comparison to the EMCE algorithm, showing its accuracy and robustness in determining the number of clusters and allocating input feature vectors in various data sets, particularly those with sparse distribution.

In addition, the paper presents experimental results using different data sets with varying cluster structures, demonstrating the effectiveness of the ACL algorithm compared to the EMCE algorithm, especially with sparsely distributed data sets. The ACL algorithm is found to be less sensitive to the curse of dimensionality and does not impose a specific cluster shape on the data set, unlike the EMCE algorithm which relies on a Gaussian shape for data clusters. These results highlight the advantages of the ACL algorithm in accurately and robustly determining the number of clusters and allocating input feature vectors.