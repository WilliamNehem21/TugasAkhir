The imperative statements in Creol are briefly introduced in this paper, which discusses both standard statements and statements that are specific to a concurrent or distributed context. This section covers basic statements, while section 4.4 addresses composition operators.

Without the await statement, the program would block on the reply statement l?(result) until the associated method invocation had terminated. This behavior is typical of transparent futures, where the reply statement could be implicit by identifying l with reply.

Method calls in Creol may be local or remote. Local synchronous calls occur when o is omitted or evaluates to self, and they are executed immediately to avoid object deadlock. On the other hand, a remote synchronous call o.m(e; y) is implemented as an asynchronous method invocation t!o.m(e) followed by the reply statement t?(y), for some fresh label t. In this case, the calling object is blocked while the remote method executes, and the values assigned to the output parameters become available in y.

The paper introduces the choice operator with the following definitions: a statement s is enabled if it can execute in the current state without immediately releasing the processor. For instance, await b is enabled if b evaluates to true; otherwise, it is disabled. If s is enabled and does not block immediately, then s is considered ready. The statement l?(y) is always enabled, but it is only ready if the associated reply has arrived.

The paper presents two method bodies in which asynchronous method calls are made to server1 and server2. In the first method body, a nondeterministic choice selects the first reply for further processing, while ignoring the other. In the second method body, both replies are processed, and the order of processing depends on which reply arrives first. The paper also discusses a nondeterministic merge operator.

The paper primarily focuses on the basic model of concurrency and communication in Creol, while a more comprehensive discussion of this model and its formal semantics can be found elsewhere. Additionally, the paper references the integration of first-class futures, an industrial case study of the ask communication system, type systems for asynchronous method calls, and extensions of Creol for service-oriented computing and wireless communication. Creol also supports runtime reprogramming of distributed systems through a dynamic class construct, allowing objects to evolve in a type-safe manner without interrupting the overall system execution.