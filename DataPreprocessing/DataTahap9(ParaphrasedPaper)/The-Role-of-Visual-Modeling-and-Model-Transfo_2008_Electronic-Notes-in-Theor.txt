The manual top-down analysis explicitly outlines the flow of business information within the subprocesses by annotating input and output data with abstractions such as claim, policy, and customer information, which are then connected to model the data flow within the process. This information is then placed into a data store depicted by a repository symbol, serving as a variable in the target programming model, and the loop is initiated using a control-flow edge. After the loop ends, the altered claim message and control flow are passed to the process interface via another map activity.

There has been a shift from representing business processes primarily with flow diagrams to linking them with business objects and state machines. The semantic relationship between different forms of models and their role in business-level and programming models presents an interesting area for research.

While academic solutions have been created for declaratively describing model transformations, the prevalent industrial practice involves plain code. To accelerate and enhance the quality of transformation development, a model transformation framework has been developed, offering an API for business-process models represented in IBM WebSphere Business Modeler along with a set of elementary transformations for reuse.

The transformations often include extensive code to validate the source and target models, ensuring that the model is suitable for the transformation and that the resulting target model meets specified design constraints. Managing these validations and design constraints at the code level presents a significant software maintenance challenge, particularly as models evolve with each software product update, and transformations need to account for numerous dependencies between business and IT-level models.

Quality assurance for models is a fundamental concern related to managing design constraints. While there is an intuitive understanding of what distinguishes a good model from a bad one, practical and user-friendly solutions to enhance the quality of process models by enforcing design constraints are lacking. Additionally, scalable (albeit possibly incomplete) algorithms for detecting typical design errors in process models that could result in poor runtime code have yet to be incorporated into any business-process modeling tool.