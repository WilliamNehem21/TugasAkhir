The Unified Modeling Language (UML) is widely used in both industry and academia, despite its informal semantics and ambiguities. On the other hand, OhCircus is a formal specification language that unifies Z, CSP, the refinement calculus of Morgan, and object-oriented theories. This paper integrates UML class diagrams and OhCircus by expressing UML elements in terms of OhCircus constructs, while introducing the concept of a class model to capture associations and global constraints. The integration is then used to prove the refinement of associations as attributes, a common industry practice that relates analysis, design, and implementation.

In contrast to existing approaches that map UML into a more formal language, our approach treats UML at the same semantic level as the formal language. For example, UML classes are mapped directly to classes in our chosen formal language. Additionally, this paper details the main elements of UML class diagrams and OhCircus specifications and presents the translation of a UML class diagram into an OhCircus specification, where the concept of the class model is introduced. The paper also explores the refinement in UML diagrams using associations as attributes. Finally, it presents the conclusion and outlines areas for future work.

UML encompasses several diagrams that express the static and dynamic aspects of an application. Class diagrams, in particular, are commonly used to model concepts in software development projects and represent the structural aspects of the system. The paper discusses various aspects of class diagrams, such as multiplicity, navigability, and generalizations, and provides corresponding representations in OhCircus.

The OhCircus language is described in detail, including class declarations, the state clause, and methods. The paper introduces the idea of a class named "model" to capture the structure of a class diagram, including sets of instances of classes, relationships, and global invariants. The paper also explains how inheritance and associations are represented in the class model.

The paper also presents two class diagrams related to abstract and concrete models and explains the operations identified by the class models for the refinement. It discusses the analysis of refinement in UML and its connection to the refinement theory of Z, and explores the formal proof of the validity of design patterns using the proposed mapping.

In summary, the paper contributes to the formalization of UML using the formal specification language OhCircus, and specifically focuses on UML static constructions and the representation of associations as fields. It also discusses the application of the refinement theory to UML diagrams and presents directions for future work in the area of software engineering.