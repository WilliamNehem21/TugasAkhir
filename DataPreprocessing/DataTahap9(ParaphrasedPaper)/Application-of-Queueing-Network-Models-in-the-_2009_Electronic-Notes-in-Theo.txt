This paper introduces a method for modeling database designs using queueing networks, which enables database designers to assess the dynamic behavior of the database design and experiment with different design decisions. Unlike other methods focusing on the performance of the database system software architecture, our approach abstracts detailed levels of database system design, concentrating on information available during the design phase. We validate our method by evaluating the performance of the TPC-C benchmark under different workload conditions, highlighting the impact on database design decisions.

Existing commercial database performance tuning tools primarily emphasize post-deployment tuning, drawing recommendations from query optimizers and statistics obtained from working production databases. However, there is a lack of performance evaluation tools specifically targeting database designs. Therefore, our aim is to establish the validity of our method in effectively modeling database designs, serving as a crucial first step towards a comprehensive framework for evaluating database designs and systems.

The paper is organized as follows: it discusses related work in Section 2, describes the application of queueing networks to database designs in Section 3, presents the performance analysis of the TPC-C benchmark in Section 4, and concludes with future work considerations in Section 5.

In the field of performance evaluation, most methods and approaches focus on evaluating software architecture performance modeled on physical hardware devices, with little emphasis on database system performance at a detailed level. Our work seeks to address this gap by providing a method for evaluating database system performance during the design stage, thereby potentially avoiding post-deployment performance issues related to database design flaws.

At the database design stage, our method allows database designers to use queueing networks to evaluate the dynamic behavior of the design before the physical deployment of the database system. This empowers designers to consider the effects of concurrency and the interaction of different transactions, thereby optimizing performance early in the development process.

We demonstrate the capability of our queueing network model in effectively representing the database system, as it captures the expected behavior of database transactions using details of the database design, transaction costs, and specified assumptions, without needing the same level of detail present in benchmark implementations. Additionally, our model exhibits comparable performance behavior and transaction response time patterns to prior benchmark implementations.