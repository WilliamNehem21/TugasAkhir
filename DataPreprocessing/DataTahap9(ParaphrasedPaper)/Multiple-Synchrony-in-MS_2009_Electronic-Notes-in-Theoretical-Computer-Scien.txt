This study was inspired by the need to model scenarios of mobile device applications for automatic test generation purposes. The researchers utilized the PowerToolkit (PTK) developed by Motorola Labs to automatically generate test cases from Message Sequence Charts (MSC) diagrams. However, they found that modeling applications involving multi-synchronization with standard MSC resulted in difficult-to-understand diagrams with unintended behavior. Despite this motivation, the approach taken is application-independent.

Several extensions to MSC have been proposed, adding features such as liveness, scenario triggering, object-orientation, shared-variable communication, and synchronous messages. However, to the authors' knowledge, none have introduced multiple synchrony or used Communicating Sequential Processes (CSP) as a semantic model for MSC. The paper is organized as follows: Section 2 introduces the basics of standard MSC, followed by the definition of the authors' extension in Section 3. Section 4 presents the semantics of MSC in CSP, and Section 5 addresses conclusions, applications, and future work.

The paper proposes an extension to MSC that allows users to specify synchronous communication, where two or more MSC instances can be synchronized on the same event. Additionally, the paper proposes an algorithm to convert from the extended MSC to the standard MSC.

In modeling complex systems, it is essential to provide a mapping between different architectural views, and the paper proposes using synchronous communication as an atomic event observed by the environment. The paper also discusses the concept of time abstraction and the mapping of asynchronous messages in the extended MSC.

The paper introduces the concept of the interleaving operator |||, which combines processes in parallel. The formal semantics of an MSC diagram is described by combining two dimensions using the parallel composition rule.

The formal semantics of an MSC diagram is described by combining two dimensions using the parallel composition rule. For example, the processes instancei ensure the correct order of events along the life axis of each instance, whereas the processes messagej enforce that every send event comes before a receive event. In the standard MSC, there is no synchronization among instances, as they always communicate via asynchronous messages. The paper demonstrates how synchronous messages are represented as a single event in CSP, and provides an example of modeling a conference call dialogue using the extended MSC.

In summary, the paper extends MSC with synchronous messages, allowing for both synchronous and asynchronous messages to appear in a diagram, and provides algorithms for conversion between the extended and standard MSC.