This paper discusses various techniques to address the state explosion problem in model checking, which include symmetry and partial order reduction, bit state hashing, and hash compaction. Despite these techniques enabling the verification of larger problems, they are limited by the number of states that can be stored on a single workstation. If the model checking algorithm exhausts resources on the workstation before completion, the problem must be altered to reduce the size of its reachable state space.

The paper presents an empirical study of the static partition algorithm, demonstrating the level of load imbalance that exists between processes on different supercomputing platforms, leading to high idle times and large search queues. To mitigate this, the paper proposes a load balancing algorithm based on generalized dimensional exchange (GDE) to reduce idle time and improve speedup in distributed model checking. The study also includes testing using models from a model database, showing the efficiency of the load balancing algorithm in reducing queue sizes and improving error discovery.

Additionally, the paper discusses the use of state caching to reduce the number of messages and hash lookups in distributed model checking and highlights the benefits of the GDE load balancing algorithm in reducing queue sizes and improving error discovery. The paper concludes by suggesting future work in developing load balancing schemes independent of user input and investigating other dynamic load balancing schemes.

Overall, the paper emphasizes the importance of load balancing techniques in addressing load imbalance and improving the efficiency of distributed model checking on supercomputing platforms.