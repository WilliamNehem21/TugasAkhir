This article presents our experience with if, an open validation environment designed for distributed software systems. Given the increasing complexity of such systems, existing tools are unable to fully cover the validation process on their own. The if environment was developed using an expressive intermediate language and provides the ability to integrate multiple validation tools, offering advanced techniques currently available. Results from several large case studies, including telecommunication protocols and embedded software systems, confirm the practical value of this approach.

Automated validation of distributed software is an important goal for improving the production of correct industrial systems, such as communication protocols and embedded systems. Despite significant ongoing research and tool development in this area, practical challenges persist. On one hand, software descriptions are typically provided in high-level formalisms, such as programming languages or formal design notations like LOTOS, SDL, or UML. On the other hand, a diverse array of tools is required to cover the entire development process, operating at different levels of program descriptions. While multiple interesting tools are available, both commercially and academically, none of them singularly fulfill all the practical needs.

Commercial tools, such as ObjectGeode, TAU, Statemate, and Rational Rose, offer various development facilities, such as editing, code generation, and testing. However, these tools are generally limited to basic verification techniques and have limited interoperability with other tools. On the other hand, numerous academic tools, such as SMV, HyTech, Kronos, UPPAAL, SPIN, and INVEST, provide a wide range of efficient verification facilities but often support only low-level input languages, restricting their industrial use.

The specification level represents the initial program description, typically expressed using an existing language like SDL, which is then automatically translated into its if representation to be processed. The primary input specification formalism is SDL, but connections with other languages, such as UML, LOTOS, and PROMELA, are being considered.

Processes in the if environment are based on timed automata with deadlines, extended with discrete variables. Process transitions consist of guarded commands involving synchronous/asynchronous inputs and outputs, variable assignments, and clock settings. Buffers in the environment have various queuing policies, may be bounded or unbounded, and can be reliable or lossy.

A well-defined API enables consultation and modification of the abstract tree of the if representation. High-level transformations based on static analysis, such as live variables computation, or program abstraction can be applied due to the explicit representation of variables, clocks, buffers, and communication structure. This API is also suitable for implementing translators from if to other specification formalisms.

Symbolic representation in the environment expresses sets of states and transitions of the LTS using characteristic predicates over a set of finite variables, implemented using decision diagrams (BDDs). Existing applications based on this API include symbolic model-checking and minimal model generation.

The SSCOP (Service Specific Connection Oriented) protocol, standardized under reference ITU-T Q.2110, was the subject of formal validation using the if environment. This protocol, originally designed for reliable data transfer between high bandwidth network entities, is currently restricted to underlayers of the AAL layer (ATM Adaptation Layer). The protocol provides services for connection control, data transfer, and error detection and was described using SDL by France Telecom R&D. The formal validation of the SSCOP specification was challenging due to its size and complexity, leading to the adoption of specific slicing criteria to simplify the specification automatically prior to validation.

The MASCARA (Mobile Access Scheme based on Contention and Reservation for ATM) protocol, designed for wireless ATM communication, was also subjected to formal verification using the if environment. The protocol mediates between geographically distributed access points and mobile terminals via a wireless link. The formal verification focused on the dynamic and static control aspects of the protocol, with the SDL description running to 300 pages.

The if environment has been utilized for the analysis of several SDL specifications, including the SSCOP and MASCARA protocols, as well as the Ariane-5 flight program, which is part of the embedded software of Ariane-5 launchers. Ongoing industrial case studies including real-time multicast protocols (PGM and RMTP-II) and the Session Initiation Protocol (SIP) have also demonstrated the advantages of combining multiple techniques working at different program levels.

The paper suggests the first direction of improvement for the if language, focusing on allowing parameterized descriptions and dynamic creation and destruction of components. Additionally, enhancements will be made to the description of components, including the possibility to express structured control using composed states (similar to statecharts).