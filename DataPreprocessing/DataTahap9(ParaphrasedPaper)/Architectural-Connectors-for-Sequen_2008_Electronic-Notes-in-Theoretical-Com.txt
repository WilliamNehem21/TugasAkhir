A modeling approach that we find particularly compelling involves the utilization of architectural connectors[1,13]. In this approach, architectures are constructed using two types of entities: components and connectors. Components are not interconnected directly, but through connectors. Components implement certain functionalities, while connectors describe the interaction policies of the interconnected components. Originally, the language employed for specifying and modeling the components and connectors was CSP in the references [1,13]. This approach was subsequently extended by Fiadeiro, who, in a sense, generalized the approach by placing it within a categorical context. In this instance, the modeling language used was the coordination language community.

In our work, we have developed a very versatile approach for modeling component-based systems that aims to enable the definition of component concepts associated with various formal or semi-formal specification methods. The objective was to instantiate this generic approach to any chosen method, provided that it satisfies certain properties. We outlined different instantiations using Petri nets, graph transformation systems, or algebraic transformation systems. Later, we expanded this approach by allowing for components to have multiple interfaces and adapted it to accommodate architectural connectors. The details of this approach are described in [reference], with preliminary results presented in [reference].

In this section, we will outline the fundamental elements of our generic framework. Specifically, building upon the approach introduced in [reference], we consider two types of constructs: components and connectors. Components are entities that offer specific services. Informally, a component comprises a body and n interfaces, referred to as ports. The body fully defines or implements the services provided by the component. On the other hand, a port presents an abstract view of the body, encompassing its behavior and the services it provides. Conversely, the body of a component can be viewed as a refinement of its interfaces. We refer to these refinement relations as transformations.

Components are connected via architectural connectors. In particular, a connector consists of two or more interfaces, known as roles, and a body (defined in terms of the glue in [reference]). Each role describes the expected behavior and services provided by the component to which it will be connected, while the body describes the interaction between the components that are connected through the given roles. In this context, the body of a connector extends the specifications included in the roles by defining an interaction policy over them. We say that in a connector, the roles are embedded in the body.

To link a role to a given port, they must be compatible. Specifically, for compatibility, the port should be a refinement of the role. Before defining the semantics of this type of composition, we need to specify in detail the basic elements (or parameters) that a concrete modeling or specification framework must provide to instantiate our generic framework for defining concrete notions of architectural components and connectors.

Additionally, to ensure the existence of a union of parallel consistency, it must be verified that the diagram S'' built by applying the implementation I to S embeds all the diagrams S''. Thereafter, it must be ensured that S'' can be built.

Furthermore, the refinement between this interface and the body of the component is simply an embedding. The component associated with the set of buttons located on each floor could be described in the same manner as the previous one. It should be noted that this would not hold true if there were two buttons per floor.