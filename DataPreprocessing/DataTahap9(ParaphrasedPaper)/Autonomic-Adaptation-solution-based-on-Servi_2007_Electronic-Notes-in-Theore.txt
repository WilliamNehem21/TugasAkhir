Today, we live in a world where the computing and telecommunications infrastructure as well as the software services built upon it are becoming increasingly widespread and varied. Services are implemented using a distributed architecture consisting of interconnected components, which can be published, updated, and removed by different providers on an ongoing basis.

In certain environments, such as mobile systems, it is not feasible to predict all the contextual elements that may impact a service at any given moment. Instead of having services that only offer the features envisioned by the service developer, it may be preferable to have proactive services capable of identifying and suggesting new, unforeseen features to users. Furthermore, a service that relies solely on components predefined in advance cannot take advantage of new components that are released after its creation.

This paper is structured as follows: the next section introduces various existing adaptive systems; section three presents the service-context meta-model, its usage, and its integration into an adaptive platform architecture. Section four describes a simple prototype that has been implemented to test the proposed model. The final section discusses the evaluation, conclusions, and future work.

Context is currently represented using various model types, such as lists of attributes, object-oriented models, ontology-based models, and contextual graphs. To establish a unified model, we suggest using the same model for both the context and the service. This implies that the context is also viewed as an architecture composed of interconnected contextual components, including the user, terminal, network, environment, and so on.

Component attributes are attributes that are related to the entire component, such as memory, CPU, APIs, and operating system, and are typically associated with physical and logical resources. Each attribute has a name and a domain of possible values.

Several contextual components are involved in the system, including the user, terminal, network, and server machine. For example, the terminal comprises the display as an output device and the keyboard as an input device. Terminal devices act as intermediaries between the user and the software components, and factors such as external light can influence the visibility of the terminal screen. The observer module extracts information about the context and the service, utilizing dedicated components known as observers.

The service deployment engine utilizes the Java Reflection API to deploy service component instances and establish the connections between them. When a service is deployed, the service-context graph producer initializes the service and context graph. In this scenario, the context is implicit; the user is always connected to the service through the human-machine interface (HMI), and each service component always utilizes the host resources. The example considers only one contextual component—the user—and one information flow attribute—the language.