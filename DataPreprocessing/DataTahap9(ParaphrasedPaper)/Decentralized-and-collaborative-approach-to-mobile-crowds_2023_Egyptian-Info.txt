The involvement of multiple parties in mobile crowd sensing systems is likely to give rise to conflicts of interest. This is exacerbated by the centralized nature of the system, which may lead some parties to perceive bias on the part of the service provider. Therefore, there is a pressing need for a system that engenders trust and gives participants a voice in its operations.

In another paper, while privacy concerns in completing tasks involving private user data are addressed, there is no provision for rewarding or incentivizing workers in such a system. The paper points out that a large number of tasks today are being addressed using centralized crowdsourcing systems, which are vulnerable to single points of failure. It proposes a decentralized approach to crowdsourcing systems, and discusses performance and security issues such as DDoS attacks, along with strategies to prevent them. It also introduces a novel approach for block generation, which is essential for the development of a decentralized platform for data collection and processing. This approach resolves issues related to forking and centralization. Additionally, the paper presents a trust system to identify and prevent malicious entities from harming the mobile crowd sensing system as a whole, and includes architectural diagrams, as well as mathematical and graphical representations for comprehensive comprehension and implementation.

Kafka, an open-source, distributed streaming platform developed by the Apache Foundation, facilitates the creation of real-time event-driven applications that continuously produce and consume data records. It operates as a cluster across multiple servers or data centers, with additional servers running Kafka Connect to import and export data as event streams, integrating Kafka with existing systems such as relational databases and other Kafka clusters. The Kafka cluster is highly scalable and fault-tolerant, ensuring continuous operations without data loss in the event of a server failure.

In the system, each node acts as both a producer and a consumer, writing and consuming messages from topics. Topics can be distributed across different brokers coordinated by Zookeeper in Kafka. To enhance performance, nodes working on the same task or in the same area can use different partitions of the same topic. The details to add the block are sent as a value following Avro schema. Apache Kafka supports three schema formats (JSON, Avro, and Protobuf) for key or value. Messages are stored in a topic and can be read by nodes at any time, as the offset associated with the topic is tracked. Messages are encrypted using the receiver's public key before being sent, and decrypted using the receiver's private key upon receipt. A trust system based on RSA, an asymmetric cryptographic technique for encryption and decryption, is presented to prevent malicious entities from harming the system.

A blockchain is proposed as a decentralized platform for computation and data storage, where each node maintains its own chain of blocks to store message records. The distributed structure of the blockchain, with each block validated by the entire system or majority, enhances security and prevents tampering. Consensus algorithms and proof of work mechanisms ensure that only valid blocks are added, with no single point of failure and protection against malicious attempts to alter the blockchain.

In summary, this paper presents a decentralized mobile crowd sensing system that supports continuous feedback between nodes, aiming to address problems encountered in traditional centralized systems. The implementation of a feedback mechanism, integrated with an encryption layer, is intended to enhance the reward system and promote continuous improvement. The paper does not delve into the specifics of implementing a reward system, but the concepts introduced may contribute to refining traditional reward systems. Future enhancements may focus on improving the system's security and privacy features, such as maintaining the privacy of node identities in a system with thousands of nodes.