For non-critical software, the process of verification and validation (V&V) is typically informal and carried out by the software engineer responsible for the development. However, critical systems are subject to a comprehensive assessment by an independent third-party expert, as mandated by standards that dictate the level of organizational independence among the development teams. The assessor is required to thoroughly evaluate the entire development process, from the system level down to the embedded software. It is important to note that, in the event of damages caused by the system, the assessor, who holds legal liability, will refuse to commission the system under evaluation if there are any doubts regarding its safety, security, or reliability demonstration. As a result, developers of critical systems are highly motivated to facilitate the assessment process of their products, particularly in relation to verifying compliance with the standards throughout the life-cycle.

The remainder of the paper is structured as follows: Section 2 presents the textual specification of the voter, while Section 3 outlines the key characteristics of FOCAL. In Section 4, we detail the assessment requirements for safety-critical development and their implementation in the FOCAL tool, in a manner similar to a software quality plan. Section 5 provides a detailed model of the voter, and the paper concludes with further discussion and future directions in Section 6.

Sensors are susceptible to various types of errors, such as bias offset, scale factor, and transient faults resulting from sensitivity to spurious or environmental factors (e.g., temperature, pressure). Redundancy is a primary technique utilized to safeguard safety-critical systems against transient faults. There are different types of redundancies, chosen based on whether safety, reliability, or both characteristics are prioritized for the system. Essentially, each redundant component performs the same function, and in the event of a failure, the remaining components detect and continue to provide the service.

A voter is commonly employed to process the output from redundant components. For instance, voters are utilized in scenarios such as temperature acquisition by multiple sensors in a boiler or the processing of the emergency brake signal of a train from several computer replicas. The fundamental principle of a voter is to compare input values based on a specified consistency relation and then produce an output value according to predefined rules. A voter comprises two main components.

At present, FOCAL serves as a prototype of an integrated development environment (IDE) for a language that supports high-level mechanisms, including inheritance, late binding, redefinition, and parametrization. The confidence in proofs submitted by developers hinges on formal proof verification. This language has been formally described and studied. The method introduced by the keyword "rep" exposes the data representation of species values and is referred to as the carrier type. FOCAL is designed to collaborate with automated tools to facilitate the automated generation of proofs by theorem provers, with current support for the automated theorem prover Zenon and experimentation with the rewriting-based prover CIME.

In the context of critical software, the design must adhere to specific design rules, which are guidelines aimed at facilitating the safety demonstration and incorporating all constraints arising from the hardware supporting the software and pre-existing external components. Notably, FOCAL offers a means to incorporate external components into the model, while also acknowledging the challenge of ensuring their safety given that they are typically black boxes.

FOCAL is closely aligned with the COQ proof assistant and serves as its final assessor. COQ is a well-established system used in both industrial and academic domains, instilling confidence in its verifications. The use of a formal proof checker as an assessor of the proofs eliminates the need for manual verifications and mitigates the risk of errors in the verification process. The choice of using COQ means that any automated prover collaborating with FOCAL must be able to provide a COQ proof trace as output.

Looking ahead, FOCAL is undergoing a complete rewrite to enhance compilation and streamline the integration of new features. The language is also exploring other system paradigms, such as synchronous features, higher-order parametrization, and a certified C back-end, while remaining mindful of the requirement for independent authority assessment prior to commissioning.