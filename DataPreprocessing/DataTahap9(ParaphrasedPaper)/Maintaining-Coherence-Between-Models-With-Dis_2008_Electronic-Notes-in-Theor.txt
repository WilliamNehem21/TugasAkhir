This academic paper discusses the challenges of maintaining coherence between code and models in integrated development environments supporting software and model evolution. The paper proposes a method for building and updating a full correspondence between Java code and UML models in an incremental way, rather than resorting to model reengineering or code regeneration. The approach is based on using distributed graph rewriting to manage modifications in the code and the underlying UML model.

The paper outlines the construction of a distributed graph from individual models using synchronized rules, and demonstrates how to construct the interface graph and associated morphisms based on the assumption that the two models (AST and UML) already exist and are coherent. The paper also discusses the extension of the approach to handle incoherent models and the identification of reasons for failure.

The paper includes an illustration of the approach to constructing the correspondence, detailing a general template for transformation units and providing an example. The authors emphasize the use of Java AST as the basis for the construction process and describe the process of constructing the correspondence in the Eclipse IDE. The paper also explains the Eclipse implementation of a transformation unit and discusses the steps involved in building the Eclipse implementation.

In conclusion, the paper presents a comprehensive method for managing coherence between code and models, and discusses the practical implementation in Eclipse.