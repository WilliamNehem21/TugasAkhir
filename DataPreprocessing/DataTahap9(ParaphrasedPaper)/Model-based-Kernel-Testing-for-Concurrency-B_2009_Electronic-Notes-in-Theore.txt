Despite the increasing demand for custom operating system kernels in embedded devices, the development and testing of kernels continue to face significant challenges due to the complexity of the kernel code, the inability to perform unit testing, the presence of numerous concurrent behaviors, and the lack of adequate tool support. To address these issues, this study proposes the Model-Based Kernel Testing (Mokert) framework, which employs a combination of model checking techniques and testing methods to detect concurrency bugs in the kernel. This framework was successfully applied to the file systems of the Linux 2.6 kernel, where it identified a data race bug in the proc file system.

There are limited tools available to support kernel testing, as the side effects caused by testing tools in the kernel space can disrupt the kernel or lead to unexpected behaviors. Additionally, testing tools often rely on libraries that cannot be utilized in the kernel environment. Consequently, kernel developers commonly resort to using printk() or kernel logs as the main debugging aid.

This study proposes a model-based testing framework for concurrency bugs in the kernel, leveraging model extraction and model checking techniques as an alternative approach for analyzing kernels. Model checking allows for independent analysis of each component of the complex kernel by modeling the component and its related environment in an abstract manner. It also enables the exhaustive exploration of numerous scenarios and the generation of concrete counterexamples, which can facilitate debugging. However, a pure model checking approach alone presents challenges, as developers may not be able to determine whether a detected counterexample is an actual bug or a false alarm.

The Promela modeling language, used in the Spin model checker, shares similarities with the C programming language, providing control statements, complex data structure modeling, and support for inline functions.

The Mokert framework applies the analysis results from model checking to the original target program to assist in debugging concurrency bugs in the kernel code. This enables users to replay a counterexample repeatedly, aiding in the identification of the genuine cause of the issue in the kernel code, rather than solely in the corresponding abstract formal model.

Kernel bugs are often reported through manual code inspections, discussions, or artificial scenarios without actual testing, further highlighting the challenges of kernel testing. Mokert can help validate bug patches by modifying the model according to the patch and using model checking to verify its effectiveness in removing the bug.

At runtime, the Mokert framework employs a controller thread and a monitor thread to control thread scheduling and monitor the target threads for correct replay of counterexamples. A failure in replaying a counterexample triggers the monitor to notify the user with logging information and potential reasons for the failure.

In a case study involving vfs_readdir() and do_rmdir(), it was discovered that the data race detected from the model was a false alarm, demonstrating the importance of refining the model to prevent such false alarms.

In conclusion, this paper proposed the Mokert framework as a solution for detecting concurrency bugs in the kernel. By applying the results of model checking to the actual kernel code, the framework enhances user confidence by confirming the exhaustive model checking results on the real kernel code. The effectiveness of the framework was demonstrated through case studies on the file systems of the Linux 2.6 kernel, leading to the identification of a hidden data race bug in the proc file system.