Description logics (DLs) such as Racer, Pellet, and Fact++ are utilized for processing knowledge in the semantic web. DLs are a group of logics employed to represent conceptual and terminological knowledge, with ALC being a foundational logic that can be extended to the more expressive SHOIN logic, which aligns with the Ontology Web Language (OWL).

Formally verifying the reasoners for DLs could enhance both their dependability and that of the semantic web. Nonetheless, carrying out the formal verification of reasoner properties for DLs demands substantial time and resources. Furthermore, if formal verification of different reasoners for a logic is conducted, analogous problems will likely need to be addressed for each one.

The presented algorithm in this stage is generic in that the strategy for the application of completion rules is not predetermined; rather, it depends on a selection function encoding the strategy. The correctness of the algorithm has been established, assuming certain generic hypotheses about the undetermined selection function.

PVS offers a built-in prelude and loadable libraries that furnish standard specifications and verified facts for numerous theories. PVS specifications are encapsulated as theories that can be parameterized with respect to types and constants, and the definitions and theorems of one theory can be utilized by another theory through imports.

In this segment, we outline the techniques of type and operator refinement developed in PVS to establish connections between different specifications of the same concept. This is based on the premise that proving properties about a program heavily relies on the used datatypes and its specific implementation. Therefore, the objective is to verify the desired properties for a generic program specification, which can then be transferred to specific instances.

This section details the construction of a generic algorithm corresponding to the specification of the generic framework described in Section 3. Our aim is to ensure its termination, soundness, and completeness can be deduced from the properties of the generic framework using the methodology of refinements discussed in Section 4.

It's important to note that the applicability of a rule is not solely determined by the instance axiom of an ABox L. To capture the notion of rule applicability, the type activation (Activ) is introduced in the generic framework. Activation is a structure comprising an instance axiom AA and a witness X, which makes it applicable. We then refine the type Activ in a natural manner and specify a function that computes a list of ABoxes obtained by applying rules corresponding to an activation AC to L.

The function F(L) selects an activation applicable to L, with which the algorithm progresses to the next step of the completion process. As per typing considerations, for a given ABox L, F(L) yields a list of activations. Hence, if there is no activation applicable to L, F(L) yields the empty list.