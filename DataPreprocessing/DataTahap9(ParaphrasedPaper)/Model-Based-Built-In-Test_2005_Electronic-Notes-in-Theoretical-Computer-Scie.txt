The authors argue that while assertions are valuable for error detection during test execution, they are fundamentally different from the concept of built-in testing, which necessitates the presence of test cases as an integral part of components. They discuss the limited consideration of model-based design, specification, and execution of built-in tests, particularly in the context of model-driven architectures (MDA). The paper proposes the use of UML 2.0, together with the UML 2.0 testing profile, as the technological foundation for model-based component and test development. The paper then delves into the principles of built-in tests and explores the generation, specification, and execution of built-in tests, providing an example to illustrate the application of model-based built-in tests. Furthermore, the paper addresses the challenges related to testing and the advantages of model-based development techniques and UML for testing. Additionally, it investigates coverage criteria and arbitration in the context of the UML testing profile, and discusses the mapping of test specifications to the JUnit framework and TTCN-3 language.

To exemplify the individual components and steps involved in model-based built-in tests, the authors present a case study of the RIN system, a communication system supporting floor maintenance staff. The case study illustrates the process of registering a valid client through a built-in test component and testing the RIN server component, including the steps taken and the evaluation criteria used.