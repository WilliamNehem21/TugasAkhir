This paper discusses the increasing importance of concurrency and concurrent programming in mainstream software engineering, driven by factors such as the widespread availability of multicore/parallel architectures and internet-based systems. The paper presents simpa, a library-based extension of Java that offers high-level agent and artifact abstractions on top of the basic object-oriented layer, aiming to structure concurrent applications. The authors propose a core calculus of agents and artifacts, leveraging techniques from object-orientation and concurrency theory, to pave the way for identifying a true language extension for simpa.

The simpa framework provides programmers with agent-oriented abstractions as fundamental building blocks for defining the architecture of complex concurrent applications. Agents and artifacts, as high-level coarse-grained abstractions in simpa, are used to model task-oriented and function-oriented components of a system, respectively. In addition to fine-grained support, simpa aims to provide a higher-level approach for organizing and structuring concurrent applications.

The paper is organized into several sections. It begins with an overview of the A&A meta-model, followed by a detailed description of the simpa framework and technology. Subsequently, the paper delves into the formal development of a core calculus for agents and artifacts, with a focus on abstract analysis of properties related to well-formedness, safety, and liveness. The paper concludes with a discussion of related works and a summary of the key points covered.

Simpa is designed to work seamlessly with the standard Java compiler and virtual machine, without requiring specific extensions to the Java framework. The approach aims to maximize the reuse of the widely adopted Java platform. However, the authors also acknowledge the need for a new full-fledged language and platform called simpal, which is currently under development.

The A&A meta-model introduced in the paper draws inspiration from human work environments, where individuals interact using speech-based communication and shared artifacts. The paper describes the modeling of information flow from artifacts to agents and introduces primitives for coordinating activities and analyzing their state.

Overall, the paper presents a framework for developing concurrent applications using agent and artifact abstractions within the Java programming language. It aims to provide a formal foundation for structuring concurrent applications while leveraging mainstream programming languages with principles from concurrency theory.

The authors highlight that their approach is a subset of the full simpa framework, focusing on coordination artifacts. The paper presents a formal development of the core calculus, which simplifies certain features of the simpa framework to facilitate technical analysis and lay the groundwork for future research on the subject. The paper emphasizes that the approach is designed to integrate seamlessly with the object-oriented setting and paves the way for further analysis and technical advancements in the field of concurrent programming.