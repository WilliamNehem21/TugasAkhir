In this research, we conduct a comparative analysis of three rule-based programming tools utilized for constructing an expert system designed for microbiological laboratory data validation and monitoring of bacterial infections. The initial version of the system was developed using kappa-pc, and we present an evaluation of its implementation and performance by contrasting it with two more contemporary tools, namely jess and ilog jrules. To assess each tool, we created three basic test applications capable of carrying out specific tasks pertinent to our expert system.

This study is part of a project aimed at monitoring nosocomial infections, which are diseases acquired by patients after their admission to a hospital. These infections pose a greater threat compared to non-nosocomial infections because they are caused by bacteria that are highly resistant to antibiotics.

The key role of a microbiological laboratory in performing analyses, particularly antibiograms, is crucial as clinicians rely directly on these outcomes to define therapeutic approaches. Our system should also be able to identify critical scenarios such as unexpected bacterial resistance or contagion events within a hospital unit, and alert the microbiologist. Therefore, the test applications were designed to replicate these essential functions involving bacteria antibiograms.

Our initial effort involved the development of the first prototype of the ESMIS system, which takes a rule-based approach to recognize critical situations and generate corresponding alerts. The rules applied were derived from an analysis of international standard guidelines for microbiological laboratory practice, along with expert recommendations.

The initial prototype was implemented using kappa-pc, a tool for expert system development. Subsequently, we needed to select a tool for implementing the final ESMIS prototype. After evaluating available commercial tools, we decided to further investigate and test jess and jrules. The features offered by these tools are detailed in section 4.

In order to assess each tool, we created three simple test applications capable of performing specific tasks relevant to ESMIS. For each tool, we describe the techniques used to implement these applications and the resulting performance achieved in each trial. The performance of the test application is one of the criteria guiding our selection, as ESMIS is expected to operate in real time.

The paper follows a structured organization. Section 2 presents basic concepts of microbiological data analysis, while section 3 outlines the specifications of ESMIS. Section 4 provides detailed descriptions of the various development tools, and section 5 describes the test applications along with their performance results. Section 6 offers an overall comparison of the tools, and section 7 concludes the paper.

The antibiogram for an individual bacterium indicates its resistance to a range of antibiotics. A strain of bacteria with the same species and identical antibiograms represents a specific entity. 

The developed system should be capable of utilizing all available information, providing comprehensive support for laboratory personnel in the validation task, and ensuring adherence to the standard antibiotic testing guidelines commonly used by microbiological laboratories.

To achieve these goals, an expert system programming approach was adopted, a technique widely employed in the medical field since the 1980s. In an expert system (also known as a knowledge-based system), knowledge about the problem is represented using specialized data structures and rules, which are then applied to available data to perform specific tasks.

The system is designed to perform tasks such as predicting antibiotic results for a particular species and testing common relationships between antibiotic results. It also generates intelligent reports, issues alarms concerning bacteria and patient histories, and introduces an automatic validation step in the process. The presented rules and their implementation are detailed for each tool.

It was decided to use the jess and jrules tools for further investigation and testing. Each tool has its own inference engine and rule syntax, and we delved into the specifics of their operation and capabilities.

Furthermore, the jrules tool incorporates a truth maintenance system and offers database connectivity via a Java API, which provides access to relational databases. On the other hand, the kappa-pc testing application utilizes its dedicated language, while the jess and jrules testing applications were merged into a single Java application.

To evaluate the performance of each tool, we formalized a set of rules obtained by analyzing the NCCLS document for the Staphylococcus aureus species and incorporating expert recommendations. This was done to simulate the real-time testing scenario involving the importation of bacteria antibiograms, execution of controls, and the return of evaluation results to laboratory personnel.

In conclusion, the performance of the test applications is a critical factor in the selection of the final tool, as ESMIS is intended to operate in real time, handling tasks such as importing bacteria antibiograms and performing controls while returning evaluation results to laboratory personnel. Thus, the comparative analysis of the tools and their performance in specific tasks will guide the ultimate tool selection for implementing the final ESMIS prototype.