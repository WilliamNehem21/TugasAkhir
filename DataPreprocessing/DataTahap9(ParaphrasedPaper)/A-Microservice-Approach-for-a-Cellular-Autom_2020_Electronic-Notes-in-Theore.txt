Multiple tools have been independently developed to aid in parallel programming, yet some of these tools are not widely known or considered due to their complexity. Existing parallel programming environments have specific purposes, leading to a lack of tools that can integrate various parallel approaches.

To address this integration issue, we propose a virtualization approach using containers, also known as operating-system-level virtualization. Containers enable the deployment of self-contained computational environments. In this study, three containers were utilized to deploy a parallel programming skeleton tool, a parallelizing compiler, and an online code editor to support these tools.

The paper is structured as follows: Section 2 provides an introduction to relevant concepts such as containers, microservices, and cellular automata. Section 3 discusses related studies, while Section 4 presents the proposed service-oriented architecture for developing parallel programs. Section 5 demonstrates the modeling of the game of life using the proposed framework, and Section 6 presents the evaluation of the microservice approach. Finally, Section 7 outlines the conclusions and future work.

Additionally, Parcel-6 is a computing library implemented in C for multiprocessor computers, clusters, and grids. It can be linked with C and C++ programs and is capable of automatically parallelizing the source code for multiprocessor machines.

The analysis and parallelization with compiler directives (OpenMP and OpenACC) are provided as microservices attached to a central service, unlike the Parallware Trainer. Each microservice represents an independently developed functionality supporting the parallel programming process in cellular automata models.

The user is provided with a stencil template (a cellular automaton model in the C99 programming language) through the Parallel Templates (PT) service, which is then completed by the user using the Code Editor (CE) service and parallelized with the PragCC (PC) service. The entire application or proposed prototype is referred to as "Coder," and the details of the services and how the complete application operates are described below.

The experiment considers different sizes for the cellular space: 250^2, 500^2, 750^2, 1000^2, 1250^2, 1500^2. These values are used to observe the quality of the optimizations suggested by the tool as the size of the cellular space increases. For each grid size, 100 generations of the cellular automaton are simulated. In order to reduce the number of outliers, the processing time for each size of the cellular space is calculated 10 times, and the total time to calculate 100 generations is measured in seconds. The hardware and software used in the experiment are described in detail.