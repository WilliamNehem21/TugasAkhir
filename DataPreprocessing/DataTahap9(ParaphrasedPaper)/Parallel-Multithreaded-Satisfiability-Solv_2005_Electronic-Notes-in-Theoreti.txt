This paper presents a highly optimized, parallel multithreaded algorithm for solving the propositional satisfiability problem (SAT). SAT has been a fundamental problem in the theory of computation for over four decades and is of great practical importance in various disciplines, including hardware verification, artificial intelligence, and computer vision. The paper discusses recent advancements in optimization techniques for the core DPLL algorithm, such as watched literals, conflict analysis, non-chronological backtracking, variable state independent decaying sum (VSIDS) decision heuristics, and restarts, all of which have been incorporated into the parallel solver described in the paper.

The paper also details the dynamic partitioning of the search space to evenly distribute the workload among working threads. A list of available tasks is maintained to minimize thread waiting times and the time needed to find a new task. When a new open variable is introduced by a thread, a description of a task associated with the variable is added to the list of available tasks. The paper explains the process of task selection, task removal, and the management of the list's size. Additionally, the paper addresses the implementation of termination signals and the distribution of conflict clauses to ensure efficient and effective parallel execution.

The authors conducted an analysis of the solver process behavior relative to other processes in the system, load distribution of threads inside the process, and the distribution of function calls within the threads. The analysis did not reveal the cause for the degradation of performance as the number of working threads increases. The paper also discusses the distinction between this work and previous studies, highlighting the investigation of parallel execution of a SAT solving algorithm on a single multiprocessor workstation with shared memory architecture, as opposed to executing on a cluster of network-connected machines. The impact of shared memory architecture on cache performance and the advantages of parallel execution on a single multiprocessor workstation are also explored in the paper.