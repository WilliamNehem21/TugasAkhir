The use of definite descriptions in the style of Frege and Russell has a rich history and has been applied to the development of functional programs, and subsequently to the development of correct imperative programs. In this study, we investigate the application of definite descriptions in functional programming, drawing on their well-established use and definitions by Frege, Russell, Quine, and Scott. We also consider their significance in relation to assertions, which play a central role in the development of imperative programs according to Dijkstra, Gries, and the refinement calculus.

When termination proof is not an issue, it is relatively straightforward to create a partially correct program. The proof of termination utilizes induction, from which a simple functional program is obtained. Building on this, a completely correct imperative program similar to one proposed by Dijkstra can be developed. Further properties of the specification are extrapolated from the functional program, leading to the derivation of an alternative functional program. While straightforward to develop, transforming this alternative program into an imperative form is non-trivial, requiring the conversion of linear recursion to an appropriate tail-recursive form, which can then be directly transformed into an imperative program.

The imperative program includes a loop that iterates through odd integers until it reaches a value, x, such that 2k(x^p r) x< 2k. Although the program halts when tested with given inputs, testing alone does not guarantee correctness. If the loop terminates, the program should produce the correct result.