The paper introduces a new programming language named MOQA, which is designed to facilitate the analysis of program execution times. The language is based on fundamental operators and their semantics are defined in previous works. The paper focuses on presenting generalized versions of three basic MOQA operations: projection, unary product, and split.

The paper is structured as follows: Section 2 introduces various concepts, including the notion of random preservation. The distinction between random preservation and automatic random preservation, not previously addressed in the literature, is discussed. Section 3 defines isolated subsets of a poset and local transformation, which are used to express the constraints on the application of MOQA operations. In Section 4, MOQA operations and their generalizations are introduced, followed by a discussion on the random preservation property of the generalizations in Section 5.

The paper provides a self-contained discussion, introducing necessary concepts from previous works. The use of subscripts and indices is minimized for clarity, and the notations are defined accordingly. The paper also introduces the concept of the Hasse diagram of a poset.

The notion of output multiset is introduced to keep track of the number of inputs corresponding to a specific output, followed by the introduction of multisets and their constructors. The paper also discusses the concept of local transformation, in which a transformation of an object modifies the digraph locally. The relationship between isolation and local transformation is then examined.

The paper introduces the concept of a near-lpo, which is a modified version of a labeled partial order where the largest label is replaced by a fresh label. The behavior of the "pushdown" operation is illustrated using an example, and an algorithm is presented to implement this concept.

The paper also discusses rp-domains and def-domains of MOQA operations, pointing out that the generalized operations extend the domains of definition of the corresponding MOQA operations and also extend the domains of random preservation. The generalizations are shown to provide non-trivial and substantial extensions compared to their MOQA counterparts.

Overall, the paper introduces three generalized MOQA operations that offer several advantages over their corresponding MOQA operations, including an extension of their domains of definition in a non-trivial and meaningful manner. The paper also presents evidence that these extensions are non-trivial and extensive based on the generalized examples provided.