In this scenario, writing can lead to changes in the perception of memory. This typically does not occur, but when it does, only a portion of the address space is affected. Inferring what may have changed from what has not can facilitate effective reasoning about such memory updates.

In our current work, we are utilizing a simplified model, specifically a basic machine abstraction that does not consider memory permissions beyond the mapping/unmapping of virtual addresses. Since these permissions are considered as additional attributes of virtual addresses, they can be readily integrated into our logic. Previous research has demonstrated how to incorporate actual machine encodings with separation logic, and we anticipate that our logic can similarly be connected to machine encodings.

As mentioned earlier, virtual memory is a hardware-enforced abstraction that provides each executing process with its own perspective of memory, into which segments of physical memory can be dynamically inserted. It introduces an additional level of indirection, whereby virtual addresses may potentially map to physical addresses. Memory access is typically performed using virtual addresses only, although hardware devices may directly modify physical memory. Direct memory access can be simulated by using a one-to-one virtual-to-physical map.

The inclusion of virtual memory in separation logic raises questions about what it means for two predicates to be separate, as well as the type of state space that needs to be divided into sub-states to express their distinctness. We aim to make assertions at three levels: virtual to physical, physical to values, and virtual to values. Additionally, we seek to maintain the utility of separating assertions in this context while remaining aligned with traditional separation logic notation.

The structure of our paper is as follows: We provide an explanation of basic notation in Section 3, discuss the virtual memory abstraction and our specific implementation of it in Section 4, introduce our logic in Section 5, examine its properties in Section 6, discuss related work in Section 7, and conclude.

Based on our framework, we define an instantiation of a greatly simplified machine, where each 32-bit pointer points to a 32-bit word in memory within an address space containing 2^32 words. Notably, traditional implementations use 8-bit values. Our three machine types are designated as vptr, pptr, and val, representing virtual pointers, physical pointers, and values, respectively. On this machine, we define the types of the three memory views described in Section 2.

The former type asserts that a property not reliant on the heap's area being altered remains true after the update. The latter type is a weakest-precondition rule suitable for backward reasoning, indicating that if p holds for a heap with the entry p set to v, then p will continue to hold after the update, as this is precisely what heap-update accomplishes. Henceforth, we will refer to these as the global and weakest-precondition rules, respectively.

Upon completion of the operation, the address space remains unchanged except for all the virtual pointers mapped to the physical address at which the heap was altered (via heap-update-v). Nevertheless, as mentioned in Section 5, vp cannot alias with any other virtual pointer under separation conjunction, thus the modification of the heap will only be evident through one virtual address: vp.

Separation logic has been successfully employed in the verification of context-switching code. Tuch et al. demonstrated the extension of separation logic to reason about C programs involving pointer manipulation. Presently, our work employs a simplified machine model with only one type and does not integrate hoare logic. We believe that our framework accommodates the addition of these extensions.

In summary, we have presented an extension of separation logic that enables reasoning about virtual memory and processes running within it. Our logic facilitates the representation of predicates concerning memory at three levels: the virtual map, the physical heap, and the virtual address space. The notation abstracts away complex details, appearing very similar to classical separation logic. Furthermore, our logic maintains the pure and intuitionistic properties of separation logic without exposing the underlying abstraction. We have formalized our work in the Isabelle/HOL theorem prover.