The capabilities of modern mobile phones as powerful computing devices have expanded beyond their original function of providing mobile wireless telephone services. These devices now support a wide range of applications, such as personal information managers, web browsers, media players, and games, many of which rely on network access. Unlike standard computational resources, the cost of network access is influenced by external factors, such as the business model of the phone operator, making it a resource that users prefer to manage closely due to the associated costs.

The remainder of the paper is organized as follows: Section 2 presents relevant information about MIDP, Section 3 introduces the resource management library, and Section 4 enhances it by incorporating policies. Additionally, Section 5 outlines the security properties guaranteed by the library and provides a deployment scenario. Section 6 discusses related work, and Section 7 presents the concluding remarks.

To implement messaging, MIDP and WMA need to be augmented in three key areas, involving the addition of a new wrapper method to the WMA interface, the implementation of an extended class, and revisions to the MIDP method connector.open.

The resource management API is designed to be extensible, allowing for the monitoring of new resources by adding new resource types and appropriate instrumentation. Furthermore, the API can accommodate more flexible policy oracles beyond user input.

While concerns may arise regarding potential information leaks and data security, it is argued that for resource-safe MIDlets, sensitive information does not leak from the manager as long as it is handled appropriately.

The resource management library, including its instrumented methods, must be trusted, as its correctness is not easily verifiable. However, as MIDP does not support the download of trusted libraries, midlets using the resource management API must provide the library as part of their own jar file. Trust in the library can be established through the endorsement of a trustworthy third party, such as the network operator.

Runtime monitoring is vital for enhancing software reliability, and various frameworks and tools have been developed to support resource-aware applications and enforce security. In particular, the resource management API presented in this paper focuses on security enforcement, while other frameworks emphasize adapting application behavior in response to resource fluctuation.

The paper also discusses the limitations of temporal logic in expressing resource protocols and highlights the design of a Java library for tracking and monitoring the use of external resources on MIDP mobile phones. This library aims to improve the flexibility of runtime monitoring while maintaining security guarantees against resource abuse.