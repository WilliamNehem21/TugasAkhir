Contemporary compilers use advanced compilation techniques to ensure the safety of the resulting binary code. Type systems are a crucial tool for maintaining type information across various intermediate languages during the compilation process, which typically starts with a source language and culminates in machine language. Various methods, such as PCC and TAL, have been proposed to express safety conditions. Meta-logical frameworks like Coq, NuPRL, and Isabelle/HOL offer sophisticated interactive proof search tools. However, using these tools requires a commitment to a specific way of representing the inference systems involved, such as typing relations and operational semantics. In this paper, we utilize Twelf as a representation language for specifications, algorithms, and their meta-theory.

The paper is organized as follows: Section 2 discusses Twelf, Section 3 introduces F!, Section 4 tackles issues concerning substitution, and Section 5 provides a reduction semantics before demonstrating type soundness in Section 6. An example of how to use our encoding is presented in Section 7, while Section 8 outlines future work and evaluates the results.

F! is a type theory introduced by Girard as a tool for proving properties about higher-order logics. Its expressive power has led to its adoption as the core of the Flint system and TILT in type-directed compilation. There are different approaches to encode F! in LF, with one example being to represent expressions, types, and kinds as individual syntactic categories and then encode the related typing relations explicitly. However, for this work, we have chosen an implicit representation and index types by kinds and terms by types.

The type system of F! is strongly normalizing, and while it may seem suitable to represent F!'s type level directly in LFâ€™s simply typed-calculus, this approach becomes unsatisfactory due to its incompatibility with polymorphic quantification. Hence, we encode F!-types in LF as type families indexed by their respective kinds. The type level of F! forms a strongly normalizing-calculus, and without further discussion and formalization, we assume this fact as given. The paper also addresses the introduction of canonical and atomic forms, providing benefits such as additional inversion lemmas.

In our original proposal, we integrate the well-typedness condition into the Twelf encoding, avoiding the need for a separate typechecking and type-normalization phase once a term has been constructed in LF. We also present the implementation of the proof, where the type annotation signals Twelf's type reconstruction algorithm.

This paper can be viewed as a case study on the use of meta-logical frameworks in the design, implementation, and verification process of data structures and algorithms, particularly in the area of safe intermediate languages. The encoding and properties of F! have both theoretical significance and practical applications related to compilers and proof-carrying code. In future work, we plan to extend F! to Mini-Flint by adding additional features and develop a compiler from Mini-Flint to typed assembly language. Moreover, we aim to extend F! to support intensional type analysis, with applications including tagless garbage collection and polymorphic marshalling.