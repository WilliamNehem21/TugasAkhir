The paper introduces conspec, a policy specification language based on automata. The language prioritizes expressiveness over clean semantics, and it provides a formal semantics through security automata. Conspec specifications can be utilized at different stages of the application lifecycle to enable the formalization of various policy enforcement techniques.

As the usage of mobile devices grows, secure mobile application development becomes more significant. Mobile devices store personal information that users want to safeguard, and they offer access to valuable functionalities like GSM services and GPRS connections. Concealing these resources from third-party applications would severely limit application development for mobile platforms. Therefore, there is a need to provide controlled access to sensitive resources through fine-grained, sometimes application-specific, constraints on execution.

The paper outlines how security specifications can be enforced at the development, installation, and runtime stages of the application lifecycle. The objective is to combine static verification and monitoring to effectively enforce security properties on mobile devices. The application is associated with a contract, which describes the intended security-relevant behavior of the program, simplifying tasks related to security enforcement. Additionally, the paper describes a new language called conspec (contract specification language) that can be used to specify user policies and application contracts. The paper provides a formal semantics for conspec and briefly explains the formal treatment of several activities in the framework based on this semantics.

During the development phase, developers specify the intended security-relevant behavior of their applications using the policy language. The compliance of the contract and the application can be checked through static verification, and the application can be signed by a trusted third party. Alternatively, proof-carrying code can be used to convey assurance in program-contract compliance. If contract compliance cannot be statically verified, an execution monitor can be inlined in the program at this stage to ensure compliance at runtime.

At runtime, the behavior of an application can be checked against a policy by monitoring. The paper introduces conspec, a language inspired by the policy specification language pslang, which was developed for runtime monitoring. However, conspec introduces new modifiers and extends the use of programming language constructs. The paper also describes how conspec policies can be inlined for monitoring, similar to pslang policies.

Overall, the paper presents conspec as a language that can be used to specify user policies and application contracts, and it provides a formal semantics for the language. The paper also discusses enforcement of security specifications at different stages of the application lifecycle and describes how conspec policies can be inlined for monitoring. However, it acknowledges that some aspects of its approach, such as inlining for monitoring, lack formal proof of correctness.