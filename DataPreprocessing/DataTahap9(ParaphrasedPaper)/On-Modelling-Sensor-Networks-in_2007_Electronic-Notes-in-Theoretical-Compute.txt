Due to the limited capacity of the nodes in a sensor network, it is essential for the network's model to monitor key performance metrics, as they will determine the suitability of the network's design or protocol. An effective model of the network should allow for adaptable monitoring and efficient execution. The principles outlined above provide guidance for the development of such a model.

A significant subcomputation of concurrent message transmissions is an example of a pattern that not only allows for flexible monitoring but also offers an opportunity for improved efficiency. This pattern effectively reduces the size of the state at each concurrent step to accommodate the concurrent transitions, and further optimizes the deterministic observation of the state after each concurrent step.

In constructing an optimized model of a sensor network, the incorporation of time is justified for two reasons. Firstly, time plays a crucial role in a sensor network, as network lifetime and various latency measures are important criteria in evaluating different network designs due to the limited power of nodes. Secondly, time helps in identifying concurrent transitions, as transitions are considered concurrent when they occur at the same time. Therefore, the optimized model of a sensor network described above is best specified in an extension of maude that supports the specification and analysis of real-time systems, known as real-time maude.

Additionally, the size of the state can be further optimized for specific applications by adhering to a third principle: use the smallest state size required, without making it larger. This principle can be applied in two scenarios. First, due to the wireless nature of communication, it may be appropriate to represent a node outside the localized area of activity with a smaller state than an active node during message propagation. Second, in some protocols, once a node's participation ends, representing the network without that node may be possible. Various experiments demonstrate the effects of these further optimizations, with the most extensive optimizations significantly improving execution times.

An example protocol is used to illustrate certain concepts related to modeling sensor networks and to test them with the proposed techniques. The protocol chosen for this purpose is flooding, which is used to demonstrate how to model wireless communication and support the collection of metrics. The techniques proposed are not reliant on the specific method of implementation. The flooding example addresses two common considerations in any sensor network protocol as presented here.

Pure flooding in a dense, wireless network leads to a high rate of collisions and redundancy. To alleviate these issues, random delays in retransmissions are introduced to mitigate collisions, and a limit on the number of retransmissions is imposed to reduce redundancy. A count-based scheme that incorporates these measures can be specified for cb-floodingnodes.

The state consists of two parts: one part models the activity of the network, with each node represented by an object capable of transmitting messages, while the other part holds the observations and derived metrics, represented by global properties of the network and not associated with any individual node-object. The cycle of rewrites imposes constraints on these parts during state transitions. During a concurrent step, only the state of node-objects may change, and during an observation, only the state of the metrics-objects may change. Adhering to the second principle, parts of the state that cannot change should not even have a failed attempt to change.

For instance, in the flooding example, metrics such as latency, cumulative number of transmissions, and collisions are of interest to determine the success of message delivery to all nodes in the network.

The limited range of communication of wireless nodes necessitates that a message will reach a distant node by being relayed from neighbor to neighbor, as a sensor network is a multihop network. In many protocols, a message sent by one node induces a propagation of messages, and at any given time, different nodes may have varying levels of involvement in the propagation.

This running example illustrates these concepts, showing that some nodes may be actively involved, some may be temporarily uninvolved, and others may be entirely uninvolved at a given time.