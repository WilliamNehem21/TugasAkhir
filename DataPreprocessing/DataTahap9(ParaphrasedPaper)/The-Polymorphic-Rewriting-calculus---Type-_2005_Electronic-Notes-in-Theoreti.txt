This academic paper attributes several favorable characteristics to the rhof system, including subject reduction, type uniqueness, and decidability of typing. The paper then describes the application of a classical type-erasing function to rhof, resulting in the creation of an untyped rho-calculus, and notes that the related type inference system is isomorphic to rhof and also enjoys subject reduction. Both the rhof and untyped rho-calculus systems are presented as essential calculi for polymorphic rewriting-based programming languages. The paper also explores the potential existence of a logical foundation underlying the type systems through an associated action, where the recognition of a pattern instance triggers a corresponding term rewrite. Additionally, the paper highlights the advantages of rewriting-based languages, such as the ability to handle nondeterminism through a collection of results and the non-exclusivity of pattern-matching. The paper further discusses the extension of the lambda-calculus to integrate patterns and matching, and the enhancement of constructions with rewriting logic, presenting a generalization of the lambda-calculus in the form of a rewriting-calculus. The paper emphasizes the rewrite rule formation as the basis for the abstraction mechanism in the rewriting-calculus, and notes that the lambda-calculus is obtained when every pattern is a variable.