The process of database reengineering involves creating a new database from an existing one and adjusting the associated software components. This migration process consists of schema conversion, data conversion, and program conversion. This study examines the possibility of transforming application programs using code transformation patterns derived from database transformations. It introduces a new approach that integrates database and program transformations and presents a prototype tool based on this approach.

Migrating application programs poses a significant challenge due to the complexity and size of the source code, making it difficult to maintain readability during migration. The paper explores the potential of transforming application programs using code transformation patterns derived from database transformations. It presents a new approach that couples database and program migration and describes a prototype tool based on this methodology.

The paper is organized as follows: Section 2 defines the problem of database reengineering and presents a systematic methodology. Section 3 outlines a transformational approach for each step of the reengineering process. Section 4 introduces the concept of co-transformation in the context of database applications reengineering. Section 5 describes the architecture of a tool developed to support the reengineering process, and concluding remarks are provided in Section 6.

One aspect of information system reengineering involves reengineering the database, which entails creating a new database from an existing one and adapting the associated software components. This paper focuses on converting legacy systems to modern database technology, involving steps such as schema conversion. The resulting database can be difficult to maintain and inefficient, while program conversion is typically easier and automated, albeit leading to long-term maintenance challenges.

A semantic migration approach can result in a higher-quality target database. This approach involves recovering the conceptual schema of the legacy database and using it to design the target database, albeit at a higher cost. The paper also introduces "db-main," a case environment developed to facilitate database engineering processes and application renovation.

The complexity and uniqueness of reengineering projects necessitate programmable, extensible, and customizable tools. "db-main" includes features for extending its repository and functions, as well as a 4GL(voyager 2) for developing customized processors. Additionally, the ASF+SDF meta-environment supports the program conversion step in data reengineering by providing tool generators for defining programming language syntax and specifying program transformations.

The paper concludes that compound, semantics-preserving transformations can model various database engineering processes, including reverse engineering and database design. Database conversion involves reverse engineering and database design, and migration from one technology to another can be represented by compound transformations. "db-main" automatically generates and maintains a history log of schema transformations and can derive mappings between legacy and new databases.

In the wrapper-based code organization, program conversion is carried out in two steps: generating a data wrapper that emulates the legacy data management system (DMS) on top of the new database, and transforming the legacy programs to access data through the generated wrapper. Additionally, wrapper generators have been developed for COBOL-to-SQL and CODASYL-to-SQL data migration using the "db-main" tool, addressing model, API, and schema mismatch problems.