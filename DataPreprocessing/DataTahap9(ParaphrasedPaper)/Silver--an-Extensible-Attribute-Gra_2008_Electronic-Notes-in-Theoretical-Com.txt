Attribute grammar specification languages, much like other domain-specific languages, offer significant benefits to their users, such as high-level declarative constructs and domain-specific analyses. However, they are not as widely adopted as their proponents expect due to practical obstacles, including a perceived lack of both domain-specific and general-purpose language features needed to address various aspects of a problem. In this paper, we introduce Silver, an extensible attribute grammar specification language that incorporates general-purpose features like pattern matching and domain-specific features such as collection attributes and constructs for supporting data-flow analysis of imperative programs. By doing so, Silver becomes an attribute grammar specification language with a rich set of language features. We have implemented Silver in itself using a Silver attribute grammar and utilize forwarding to implement the extensions in a cost-effective manner.

Domain-specific languages offer several advantages over general-purpose programming languages by allowing problem solutions to be expressed using the notational constructs of the problem domain. These languages are often declarative, leading to concise programs. However, they also have disadvantages, as outlined by Van Deursen et al., including specific challenges for DSL implementers.

In the domain of language analysis and translation, attribute grammar specification languages offer many advantages but are not as widely used as they could be. Attribute grammars were developed almost 40 years ago by Knuth, and there has been ongoing research in such systems since then. Our experience using attribute grammars primarily involves Silver, a language we have developed to incorporate an extension to AGs called forwarding, which has proven useful in the specification of extensible programming and modeling/specification languages. We have used Silver to specify an extensible implementation of Java 1.4 and several modular language extensions.

To address some of the challenges associated with attribute grammars, we implemented Silver as an extensible language through a series of bootstrapping steps. We extended core Silver with general-purpose and domain-specific language features to create the full-featured version, including pattern matching, type-safe polymorphic lists, collection attributes, and constructs for building control flow graphs for imperative programs and performing dataflow analysis via model checking.

Furthermore, we described attribute definitions and sample production declarations in Silver, including the use of higher-order attributes and transformations that add declarations and attribute definitions to productions. The specification also covers the composition of attribute grammars, the semantics of import, and the role of main production in Silver.

In conclusion, the development of Silver as an extensible attribute grammar specification language reflects the need for language evolution and demonstrates a framework in which general-purpose and domain-specific features can be easily combined. This approach allows for the modular extension of the host language to meet evolving language requirements.