The analysis of memory regions and recursive functions is increasingly important in the study of data structures. When using relational abstract domains, calculating summaries of memory regions containing multiple abstract variables becomes complex. In this paper, we address this challenge by introducing two key operations, fold and expand, for calculating such summaries in any numeric relational domain and demonstrate their optimality. We extend a previous approach that focused on memory cells modeled by a single abstract variable.

The remainder of the paper is structured as follows: we illustrate our techniques with examples, then formalize the summarization of relational information using a generic concrete numeric domain in section 2. We lift the developed operations to abstract domains in section 3 and prove their optimality. The paper concludes in section 4.

To make the states manageable, we use abstract domains to map a set of variables to abstract properties. While it is initially assumed that each program variable is represented by exactly one variable in the abstract domain, this is not always the case for more advanced analyses. For instance, a C variable holding a struct may be represented by multiple abstract variables, one per field. Additionally, elements of an array or multiple dynamically allocated heap regions may be represented by the same abstract variable, where the abstract variable over-approximates the content of each concrete memory cell. Gopan et al. discuss implementing transfer functions that manipulate these summarizing variables to illustrate their approach.

In one example, we show how a write access to an array creates a memory cell represented by a variable x in the abstract domain, which is initialized to zero. Subsequent iterations result in the creation of a second memory cell with a value of 1, represented by a variable xj. The new memory cell is merged with the existing one using the fold operation, resulting in x containing a summary of the previous values of x and xj, such as the interval [0, 1].

The work of Gopan et al. focuses on analyzing arrays over single scalar values, leading to a loss of precision when summarizing compound memory cells. While arrays occasionally range over compound memory cells, they are common in the analysis of heap allocated structures, as illustrated in another example.

The question arises whether folding memory en bloc is always more precise than folding element-wise. Surprisingly, this is not always the case, as demonstrated in an example exhibiting a 4-dimensional state. Furthermore, we propose different partitioning choices for applying fold and expand operations, each leading to a different abstraction and precision.

Based on our findings, we demonstrate that summarization for an abstract numeric domain can be implemented using appropriate functions, and it provides the best approximation of concrete operations for that domain.

In conclusion, our work proposes a family of abstractions that have the same precision but retain different relational information using generic fold and expand operations. Identifying the most suitable approach for a given application remains a topic for future research. Additionally, it is an open question whether the optimality result can be extended to incomplete abstract lattices, which is particularly relevant for common relational numeric abstract domains like convex polyhedra.