This paper presents a novel adaptation of latency-insensitive design components, focusing on optimizing the area footprint of shell-wrappers by partially integrating them with their input relay-stations. The modified relay-station, referred to as a retry relay-station, is demonstrated to be correct in its implementation, and comparative results between a standard approach and our new implementation are provided for both FPGA and ASIC platforms.

In essence, the latency-insensitive design (LID) can be viewed as a synchronous interpretation of established asynchronous protocols. The key departure from asynchronous design lies in LID's utilization of the conventional synchronous design flow, without claiming to resolve timing closure challenges, which necessitate meticulous floor-planning, partitioning, and interconnect planning.

Area optimization is crucial in VLSI implementation, and we observe significant area savings in the shell-wrapper for both data and control paths, resulting in reduced overhead for each IP and facilitating finer-grained design.

The ASIC implementation yields an area improvement ranging from 8.9 to 10.7 percent, with negligible slack on larger designs requiring numerous buffers. Our new implementation scales comparably to the regular approach for the control segment, achieving notable area savings.

Regarding FPGA implementations, the outcomes are less conclusive due to their dependency on architecture and heuristics. However, the ASIC implementation demonstrates substantial power reductions of approximately 40% in dynamic power and 11-18% in static power consumption.

A primary challenge in LID pertains to inserting relay-stations to attain timing closure, as highlighted in the introduction. High latencies often result from wire congestions in routing channels, making the addition of relay-stations in such areas problematic and complicating the placement-and-routing process.

To address this issue, we introduce a solution incorporating latches to optimize placement and routing, thereby minimizing area while leveraging time-borrowing through latch usage instead of flip-flops. Although our retry relay-stations are implemented using flip-flops, it is possible to use latches, potentially yielding additional gains in area, power, and clock speed for ASICs.