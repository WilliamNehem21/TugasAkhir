This paper has two main objectives. The first is to define the concept of cost-recurrence systems (CRSs) and argue for their use as a universal language for conducting cost analysis. The idea is that CRSs abstract away language-specific features and provide a way to estimate the cost of a program. Additionally, the paper aims to establish the correctness of CRSs and develop an evaluation mechanism for them, demonstrating their language-independent nature. The second objective is to discuss the unique features and challenges associated with CRSs. The paper highlights the differences between CRSs and recurrence relation systems (RRSs) and identifies the limitations of existing computer algebra systems (CAS) in handling CRSs. It also explores the practical applications of CRSs in performance debugging and code certification. The paper makes significant contributions in terms of defining cost models for various resources, outlining a language-independent definition of CRSs, and discussing the practical use of CRSs in performance debugging and validation. Additionally, it emphasizes the importance of obtaining closed-form solutions or bounds for CRSs and their applicability in inferring program performance.