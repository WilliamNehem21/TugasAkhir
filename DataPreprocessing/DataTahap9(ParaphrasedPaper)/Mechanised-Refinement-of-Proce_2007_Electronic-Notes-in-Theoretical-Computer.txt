Therefore, we have developed a tool called "refine" for educational purposes to facilitate the process of refinement. The initial version of the tool lacked development management facilities and did not support procedures and recursions in the supported language. In this paper, we present a new version of "refine" that addresses these issues.

In Section 2, we provide a brief explanation of refinement calculus and the laws related to procedures and recursions that we consider. Section 3 introduces "refine," while Section 4 describes the results of integrating the procedure and recursion laws. Finally, in Section 5, we summarize related and future work.

During the refinement process, each step involves transforming the current program or a subprogram of the current program by applying a refinement law. Some transformations generate proof obligations, and if these obligations can be discharged, the correctness of the resulting program is guaranteed.

A specification takes the form w:[pre, post], where the precondition (pre) describes the initial well-behaved state of the program execution, and the postcondition (post) describes the possible final states if the precondition is satisfied. The frame(w) lists the variables whose values can change. The precondition and postcondition are defined using the predicate calculus. If the initial state satisfies the precondition, the variables listed in the frame can be modified such that the final state satisfies the postcondition. If the initial state does not satisfy the precondition, the result cannot be predicted.

For example 2.1, we consider a program that computes the square root of the inverse of a positive number with an initial specification x:[0< x, x^2= 1/x0].

One aspect of the development involves introducing a block defining a procedure that computes the square root of a number. The refinement management feature allows saving and recovering developments, including information about proof obligations and generated code. "Refine" also associates proof obligations with the laws that generated them, allowing users to track the source of specific proof obligations.

To support the application of laws related to procedures, a facility for code collection has been implemented. This feature allows recording an updated view of the developed program and considering the refinement of its constituent commands.

The tool "refine" has been successfully used in teaching for almost four years and has been proven to be an effective educational tool. It comprises about 45,000 lines of code in 203 classes and has been extended with a tactic tool called "Gabriel," which allows the definition of refinement tactics for routine law applications. The tool also provides documentation, tutorials, and development examples on its website.