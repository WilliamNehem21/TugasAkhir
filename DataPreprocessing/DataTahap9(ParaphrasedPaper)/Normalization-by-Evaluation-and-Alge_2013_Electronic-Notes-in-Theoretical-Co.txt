We discuss the representation of computational effects through algebraic signatures, where inp is a binary operation and out0, out1 are unary operations. Notably, we observe that the normalization algorithm applies regardless of the specific algebraic signature used to represent computational effects. Other effects, such as non-determinism, probability, memory access, and logic programming, have also been expressed algebraically. Our framework provides a general approach suitable for all these examples.

Our approach involves using algebraic signatures to describe the simple effects involved in computation. For instance, we can represent input/output effects of bits over a fixed communication channel using binary operation inp and unary operations out0, out1. Furthermore, our algorithm is applicable to a range of computational effects that can be expressed using an algebraic signature. 

While our language model includes only essential features to showcase our contributions, concerns such as recursion and sum types can be addressed using established techniques. We provide a brief overview of the main concepts discussed in this paper.

We have extended the semantic analysis based on presheaf categories to elucidate normal forms by evaluation (NBE) with sum types for pure languages without computational effects. Additionally, Filinski and Lindley have examined NBE for effectful languages with sums from a practical standpoint. Their approach treats type case expressions as computations rather than as values, allowing them to leverage the residualizing monad for pattern-matching on atomic values.

Our study explores normalization by evaluation for a language featuring higher types and computational effects specified by an algebraic signature. Notably, our algorithm is applicable to any notion of computation that can be expressed using an algebraic signature. A pivotal aspect of our work is the transparent and modular semantic analysis of normalization by evaluation, with the residualizing monad being central to our analysis.