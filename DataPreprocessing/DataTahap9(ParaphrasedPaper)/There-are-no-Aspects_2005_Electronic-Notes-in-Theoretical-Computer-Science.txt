Currently, there is no consensus on component-based software engineering (CBSE), with different approaches advocating for black-box, grey-box, or white-box component composition. This paper adopts the Szyperski vision of CBSE, which favors black-box component composition.

The main argument presented in this paper is that a specialized aspect module should not be utilized, and instead, aspect-oriented composition mechanisms should be applied to existing module constructs. This approach eliminates the need to modify software components in order to change the composition mechanism. To support this claim, the paper introduces a modeling framework called Cocompose and a programming language named FuseJ. Both of these approaches enable the separation of the composition mechanism from the behavior specification. Cocompose employs model-driven development (MDD) to apply various composition mechanisms to generic design elements, allowing the postponement of specific implementation decisions to the lowest level of design.

FuseJ is a programming language that incorporates aspect-oriented ideas, enabling the implementation of all concerns as Java beans. It also provides a robust composition mechanism that accommodates both aspect-oriented and component-based compositions in a non-intrusive manner.

The paper proceeds to introduce the Cocompose modeling framework, which advocates for an explicit aspect-oriented composition mechanism at the design level, and then presents the FuseJ programming language, which aligns with the concepts of Cocompose. It further discusses the tool support being implemented for the Cocompose/FuseJ approach, explores related work that avoids introducing an additional modularization construct for aspects, and provides concluding remarks.

Cocompose is positioned as a framework that enables the stepwise refinement of software designs using MDD and supports the automatic determination of appropriate refinement alternatives. It addresses the limitations of current object-oriented (OO) design approaches such as UML, which prematurely eliminate alternate refinements by forcing developers to commit to specific constructs.

The paper emphasizes the communication of gates using connectors to describe both regular and aspect-oriented compositions between components. It underscores the advantages of deferring the aspect-oriented interaction specification to the component composition mechanism, promoting the reusability of components and enabling the reuse of existing components within an aspect-oriented context.

The authors propose that FuseJ allows for the description of all concerns within a software system as regular components and provides an expressive composition mechanism for combining them, thus streamlining the refinement process at the lowest level of design.

The paper aligns Cocompose with the Model-Driven Architecture (MDA) standard, illustrating how Cocompose fits into the MDA vision with its use of meta-level solution patterns for layered refinements and transformation from a platform-independent model to a platform-specific model.

Furthermore, the paper discusses the modeling of optional and alternative features using solution pattern roles and alternative concept refinements in Cocompose.

In conclusion, the paper contends that the specialized aspect module is unnecessary and proposes a modeling framework and a programming language that do not introduce an additional aspect module, but instead provide a powerful composition mechanism supporting aspect-oriented composition. While the paper acknowledges that the proposed FuseJ gate and connector language is a preliminary version and may have limitations in expressing complete aspect-oriented composition possibilities, it suggests that scalability issues in the Cocompose approach can be overcome based on initial experiences and requires further real-life experiments to ascertain its feasibility.