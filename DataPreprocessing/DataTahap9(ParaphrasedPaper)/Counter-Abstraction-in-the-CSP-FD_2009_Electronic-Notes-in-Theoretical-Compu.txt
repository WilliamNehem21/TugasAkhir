Apt and Kozen have demonstrated that the problem is generally undecidable, and the only feasible approach is to constrain verification to a specific class of systems and provide a sound (though not necessarily complete) method for this class. The considered systems consist of a set of identical node processes, with the general form of such systems being determined by the number of node processes, denoted as n.

In practical scenarios, the context f typically describes a controller process that is executed in parallel with the nodes. German and Sistla have established the decidability of uniformly verifying problems within this family of systems with such a context. However, the provided algorithm is doubly exponential, limiting the verification to very small instances of a problem.

Related work has explored systems with a structure similar to the one used in this study, employing a model with synchronous communication between processes. The verification algorithm comprises two parts: the first part creates a finite abstraction independent of the number of processes in the concrete system, and the second part evaluates the CTL-X specification on the abstract state machine.

Failures are employed in system analysis to enable the verification of specifications pertaining to both safety and the availability of events. Notably, the results presented in this paper are derived using operational semantics, and they apply to the entire CSP language as long as the processes are non-divergent and have no termination events.

A transformation method is introduced in this section, which generates a system bisimilar to the given number of node processes. The scheduler's role is to allocate CPU time among the processes, where cores represent the number of processors in the system. The scheduler consists of cores interleaved processes, with each representing a single processor resource.

The implementation involves interleaving all node processes and executing them in parallel with the scheduler process, synchronizing on common events. Furthermore, events indicating that a process no longer requires CPU time are renamed to a single event "stoprun" for specification verification purposes.

The study aims to establish a specification asserting that there are never more than a specified number of processes in the running state. Additionally, the study defines conditions related to events "load" and "interrupt" in the system.

The paper discusses the creation of an abstraction for a concurrent system using unbounded integer counters. It introduces an improved abstraction method with the introduction of a threshold z for the values of each counter. This method aims to address the issue of unbounded state space size depending on n.

The exploration of potential areas of improvement in applying the method includes considerations for systems that use node identifiers in their definitions. This presents limitations, and the paper intends to address this challenge by employing techniques from data independence to reduce the state space of node processes to a fixed finite type.