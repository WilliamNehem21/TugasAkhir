The task becomes somewhat simpler when dealing with a deterministic input automaton. Deterministic tree languages comprise a specific, yet efficient, subset of all recognizable tree languages (achieving deterministic automaton can be done in exponential time, when feasible). Determining the level within the deterministic hierarchy can be achieved through reduction to a similar problem for word automata, as explained in Remark 2.4 below. It should be noted, however, that the level of a deterministic language within a non-deterministic hierarchy may be arbitrarily smaller than that within the deterministic hierarchy.

For a given tree t in t(a), there exists a unique sequence of a^ that defines sections of the tree accepted by different strongly connected components (SCCs) of a^. An automaton without acceptance conditions can be designed to compute, in each node, the state of the unique sequence of a on t. The desired automaton can be formed as a product of this automaton and (1, 2) automata, with one for each SCC of a^. The latter automata serve to verify if all paths of the sequence of a^ that persist within a specific SCC are accepting. The combination of these automata will yield a (1, 2) automaton that recognizes t(a).