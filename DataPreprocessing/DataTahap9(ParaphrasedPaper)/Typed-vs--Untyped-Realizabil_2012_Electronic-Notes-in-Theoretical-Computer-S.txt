This paper is part of a research project that aims to establish a semantic foundation for program extraction from proofs. One of its contributions is a soundness proof for a language of realizers of proofs involving inductive and coinductive definitions. The natural language of realizers for these definitions is a typed lambda calculus with types representing initial algebras and final coalgebras, and terms representing structural recursion and corecursion. The paper investigates a more general calculus that allows fixed points of arbitrary type operators and the definition of functions using general recursion. The advantage of this generality is that the results will be applicable to all conceivable extensions of the theory of realizers of inductive and coinductive definitions.

Reynolds also studied a similar problem and established a coherence between the typed and untyped meanings of expressions based on cpo models of a version of pcf. However, there are some differences between Reynolds' work and this paper. Reynolds considered simple types over the base types of natural numbers and booleans, while this paper allows arbitrary recursive types. Reynolds also includes subtyping, which is not included in this paper. In terms of typed semantics, Reynolds interprets typing derivations in a typed model, while this paper interprets terms with a typed abstraction in an untyped model.

This paper focuses on the constructors nil (nullary), pair (binary), and left, right, in (unary). The first four constructors are intended to be self-explanatory. The constructor "in" is used to model type fixed points up to isomorphism. Many definitions and results could be extended to an arbitrary set of constructors.