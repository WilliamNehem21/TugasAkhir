In this paper, we provide an overview of the current status of concurrency theory and its impact on industry. We discuss the historical developments and potential future prospects of concurrency theory, particularly in relation to process calculi, which are key in disseminating concurrency theory concepts. We analyze both the successes and shortcomings of process calculi and aim to pinpoint the factors that have hindered their widespread adoption. In light of this, we propose the development of new formal specification languages that integrate concurrency features from process calculi with the standard concepts found in algorithmic languages. Additionally, we highlight two significant advancements in the software and hardware industries that create new avenues for applications of concurrency theory.

Our article is structured as follows: Section 2 outlines some significant achievements of concurrency theory and process calculi. Section 3 addresses three primary challenges that have restricted the usage of process calculi in industry. Section 4 discusses two important developments in the software and hardware industries and explores how these advancements present new possibilities for concurrency theory. Finally, in Section 5, we present a few concluding remarks.

In the context of our discussion, the two questions raised in the introduction resemble the ongoing debate between pure mathematics and applied mathematics. Similar to the pure mathematics domain exemplified by the Bourbaki group, there exists a pure concurrency theory school that is often driven more by the abstract elegance of theoretical outcomes than their practical utility. Conversely, akin to applied mathematics represented by J.J. Lions and colleagues, there exists an applied concurrency theory community that draws inspiration from real-world problems.

Identifying companies with a strong demand for reliable concurrent systems is relatively straightforward, as there are more such companies than research teams in concurrency theory. Typical application areas include communication protocols, distributed systems, hardware architectures, embedded systems, and security protocols.

In the United Kingdom, the CCS and CSP communities have continued to work with their preferred calculi. It is noteworthy, however, that, based on publications, the definition of CSP has gradually evolved to become quite similar to LOTOS, particularly for the untimed aspects. Moreover, the principles of CSP have led to the development of new languages such as FDR2 and Occam, supported by compilers and verification tools.

The lack of user-friendliness, which significantly impedes the dissemination of process calculi, is a consequence of inadequate technical decisions. While process calculi represented a scientific breakthrough, their design was not devoid of errors. We briefly discuss two main mistakes, which are directly related to the two questions raised in the introduction of this article.

Concurrency theory has historically been founded on modelsâ€”descriptions of real-world systems simplified to retain only relevant aspects for concurrency study. Early on, these models were formalized, especially with the emergence of process calculi.

Despite the widely prevalent use of models in various scientific and engineering fields (e.g., physics, biology, civil engineering), formal concurrency models have remained confined to specific topics such as formal methods and model-checking with minimal impact on computer science in general.

Similar to how linear algebra is applicable to both the automotive and aerospace industries, the majority of process calculi have been implicitly designed to be general-purpose and expressive enough to model concurrent systems across diverse domains, except for a few calculi like Circal and CHP, which explicitly target hardware circuits.

With the increase in silicon circuit surface area, there is a corresponding increase in electric consumption, with as much as 50% or more of the energy being used solely to propagate the global clock throughout the circuit. Additionally, the regularity of synchronous designs makes them susceptible to espionage (e.g., through observation of their electromagnetic emissions), posing a challenge for secure applications such as cryptography. Consequently, the synchronous design paradigm is being questioned, and there is a growing interest in asynchronous logic for circuit design. However, asynchronous logic is more prone to errors than synchronous logic, heightening the risk of deadlocks, thereby underscoring the critical role of functional verification. In this regard, process calculi and model checking tools can significantly contribute to the design of accurate asynchronous circuits.