This paper examines a structural method for automatically modeling the performance of applications based on skeletons. The approach combines performance evaluation process algebra (PEPA) and a pattern-oriented hierarchical expression scheme, which is crucial for updating performance models in parallel and distributed systems based on current resource states.

The synchronization technique conforms to the concept of bounded capacity, ensuring that components cannot be accelerated through synchronization. The shared activity duration is determined by the minimum of the random variables associated with each contributing activity. Additionally, passive components may participate in synchronized activities at the rate expected by their partner component, denoted by the symbol "t."

The skeleton hierarchy tree provides comprehensive system structural and component details, from which additional information can be automatically derived as needed (e.g., the data dependency graph connecting tasks).

The process of generating PEPA performance models from a structured application description involves three phases. Firstly, a directed acyclic graph representing data dependencies between task components is derived from the skeleton hierarchy tree. Subsequently, process definitions for each task component are determined, and finally, the system is modeled by combining the task and skeletal components based on their hierarchical organization.

The paper condenses case investigations by highlighting relationships between different interaction functions, such as identifying deal as a special case of farm and pipeline as a special case of deal.

Furthermore, the study demonstrates an automated approach for generating PEPA performance models from skeleton-based applications. This approach is valuable in systems requiring regular and dynamic updates to the performance model based on resource status. The study also highlights the advantages of the generated models by contrasting performance achieved through various task replication schemes.