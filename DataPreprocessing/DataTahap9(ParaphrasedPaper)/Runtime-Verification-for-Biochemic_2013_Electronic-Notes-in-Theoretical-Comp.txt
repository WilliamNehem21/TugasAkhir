The biochemical paradigm is well-suited for modeling autonomous systems, and new programming languages are emerging based on this approach. However, in order to validate such programs, it is necessary to precisely define their semantics and provide verification techniques. In this paper, we discuss a higher-order biochemical calculus that models system states and dynamics through rewriting abstractions, such as rules and strategies. We extend this calculus with a runtime verification technique to automatically discover instances of property satisfaction failure. The property specification language considered is a subclass of LTL safety and liveness properties.

We introduce the concept of port graphs and rewrite rules, as well as a rewriting relation on port graphs, to model complex systems with dynamic topology and concurrent and distributed interactions among components. We demonstrate the capabilities of the port graph calculus in modeling autonomous systems and biochemical networks. We also present an implementation of the port graph calculus in the Porgy environment.

Our goal is to enhance confidence in biochemical models of autonomous systems by ensuring that the current execution is consistent with the expected properties of the system and by detecting violations of safety properties to recover from problematic situations. We advocate for the use of runtime verification as a technique to increase confidence in the correctness of system behavior with respect to its formal specification. We propose a method for verifying invariant properties of biochemical programs and demonstrate a runtime verification technique that allows a running program to detect its own structural failures.

The paper is organized as follows: we provide an overview of the abstract biochemical calculus, its syntax, and semantics in the next section. Section 3 discusses the Kripke structure associated with a biochemical program and the set of temporal formulae considered. In section 4, we formalize runtime verification in this context and extend the calculus to simultaneously perform computation and verification steps. Finally, we draw further perspectives in section 5.

In future work, we plan to implement the runtime verification technique described in this paper in the Porgy system, an environment for visual modeling of complex systems through graphs and graph rewriting rules. We anticipate applications to wireless sensor networks and biochemical signaling pathways to aid their formal model development by analyzing random executions and critical properties.