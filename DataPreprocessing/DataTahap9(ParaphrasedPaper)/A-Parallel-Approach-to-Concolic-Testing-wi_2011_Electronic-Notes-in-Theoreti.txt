Automated software testing is a widely used approach for identifying software bugs, with the crucial step being the selection of appropriate test inputs. Some testing tools focus on automating this step, such as Pex for .NET applications and Cute for C programs. The underlying techniques for automated test data generation, including symbolic execution, have evolved over time. Symbolic execution, which was first introduced in the 1970s, uses symbols to represent input values and provides alternative execution semantics. Constraint solvers have advanced this approach by enabling the acquisition of precise concrete inputs to guide program execution from symbolically represented program states. This concept has inspired numerous works on automated testing, including concolic testing. Concolic testing, a variant of symbolic execution, aims to generate test data automatically by employing both symbolic execution and concrete program states to guide the process. The concolic testing algorithm monitors the choices of branches during program execution, collects path constraints, and utilizes a constraint solver to generate new test data and explore all feasible paths. To enhance the performance of concolic testing, a parallel algorithm is proposed in this paper. The parallel model dynamically divides the path space into disjoint areas, each of which is managed and updated by different computing units. This allows each computing unit to independently access and analyze the paths within its allocated area, fundamentally removing the need for global synchronization among the parallel computing units. The parallel algorithm implementation includes a runtime task scheduler that enables each computing unit to safely update its own data on a shared global decision tree. The coordination and communication among the different worker units are facilitated by the deterministic scheduler, which assigns tasks to computing units based on a universal independent algorithm, eliminating the need for global synchronization. Experimental results, conducted on an Intel Core i7 CPU running Windows 7 with 6GB RAM, demonstrate the effectiveness of the parallel algorithm in improving the performance of concolic testing. However, the paper also highlights challenges and limitations of the parallel algorithm, such as uneven paths allocation across processors and the impact of path distribution and running time prediction on the scheduler's performance. This work contributes to the application of parallel computing to traditional concolic testing, with potential benefits in utilizing hardware resources for performance gains. Additionally, the paper acknowledges partial support for the authors from various research funds and projects.