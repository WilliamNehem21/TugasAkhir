This paper introduces a novel approach to building evolutionary transaction services, which involves the use of microcomponents and design patterns. The approach is designed to enhance the adaptability of transaction services to various execution contexts. It is implemented in the GOTM framework, which supports the construction of transaction services implementing different transaction standards and commit protocols. The authors argue that using fine-grained components and design patterns is an efficient solution to the problem of evolving transaction services, and their past experiences confirm that this approach does not compromise the efficiency of transaction services.

The common approach outlined in this paper is applied to address the evolution of transaction standards and commit protocols supported by transaction services, which are not well supported by current transaction services. It is based on the concept of microcomponents, which can represent a pool of components, a message propagation policy, or a command to execute. These microcomponents are implemented using the fractal component model and integrated into the GOTM framework. The paper presents the fractal component model and the concept of microcomponents, as well as the construction of design patterns using microcomponents. It also discusses the benefits of the approach, provides a review of related work, and concludes with suggestions for future work.

The microcomponents communicate with each other through their microinterfaces, which identify the functions provided by a microcomponent. The use of microinterfaces, each defining a small set of operations, allows for the factorization and reuse of operations. Furthermore, the design patterns used in the GOTM framework to build evolutionary transaction services are detailed, demonstrating the adaptability and evolution of these patterns to handle different execution contexts.

In the paper, it is highlighted that the use of microcomponents and design patterns does not introduce a performance overhead to the transaction services, and in fact, evolutionary transaction services built on the GOTM framework can outperform legacy transaction services. The authors also propose utilizing mixin-based approaches and model-driven engineering to further enhance the flexibility and control over the architectural design patterns in the GOTM framework.