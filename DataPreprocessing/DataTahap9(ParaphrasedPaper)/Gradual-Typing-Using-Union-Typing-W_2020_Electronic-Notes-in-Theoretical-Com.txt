Programming languages are often categorized based on their typing as either static or dynamic, but there are other typing classifications, such as hybrid typing and gradual typing, that allow for a mix of static and dynamic typing features. Gradual typing languages enable programmers to take advantage of both static and dynamic typing.

In dynamic typed languages like Racket, Scheme, or Lisp, an identity function can be declared as lambda(x)x. This declaration specifies that the type of x is unknown at the moment of declaration, but it must be known during run-time. In a gradual typing system, the declaration should have a type that represents the notion of typing at run-time, and a type consistency notion is crucial at compilation time.

The robustness of typical extensions of functional languages is based on preserving fundamental properties, such as security. Toro and Tanter's meta-theory presents a way to safely extend a language into a gradual one through the abstract gradual typing (AGT) methodology, which is based on abstract interpretation by Cousot and Cousot. The AGT methodology uses abstract interpretation for a sound abstraction using Galois connections to describe computations made in a given system in a different universe.

This paper introduces an extension of a functional language with records, which allows the manipulation of expressions with different types. The gradual extension is achieved using gradual union types to preserve the safety property. The extension of the type system aims to understand the abstraction behind the AGT methodology proposed by Toro and Tanter.

Toro and Tanter combine two proposals into the gradual union typing (GUT) approach, allowing for the existence of disjoint union types and untagged union types. Optimistic type checking ensures that any term is well-typed without explicit projection or case analysis. Disjoint union types or tagged unions (t1 + t2) denote values of different types, with the type system recognizing the type of each element and guaranteeing their types during compilation and execution time.

Based on the AGT methodology, Toro and Tanter propose static semantics for a gradually typed functional language, using gradual unions and unknown typing. Gradual union types restrict imprecise types to denote a finite number of static types, based on the simply-typed functional language. This paper extends GUT by Toro and Tanter with records, which are data types that describe fields and their values with possibly different types.

The incorporation of records into the gradual union typing approach, as presented by Toro and Tanter, contributes to the theoretical perspective on programming language foundations. Adding records to a functional language enables the creation of new types and extends the language to be richer and more versatile. Extending the methodology for languages with gradual typing helps combine the benefits of static and dynamic typing while maintaining properties of consistency and security.

A related work by Garcia, Clark, and Tanter proposes an extension of a type system with records using subtyping, and formalizes a relation of consistency in gradual typing language, following the methodology proposed by Siek and Taha. The approach here differs from theirs as it relies on gradual union types, and presents a static formal system. The dynamic formal part, demonstrating its static and dynamic semantics properties, is planned for future work to achieve a gradual system with records using the threesome calculus for dynamic semantics.