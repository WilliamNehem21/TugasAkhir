In this paper, we present a tool that integrates a general-purpose theorem prover with a pre-existing dynamic geometry drawing interface to improve human-computer interaction in the context of geometrical proofs. With this tool, users can modify the statements of geometric theorems, create and validate their proofs using the theorem prover, and visualize the statements using the drawing tool. The central feature of the tool is an algorithm that calculates the data necessary to draw a construction from the formal statement of the theorem. The paper includes examples of output from our integrated tool, which we refer to as geoview.

To investigate the application of interactive theorem provers in the field of geometry, we have developed a library that aligns with the curriculum taught in French high schools. The courses covered include two-dimensional Euclidean geometry, involving triangles, circles, and fundamental transformations such as translations, rotations, and dilations, as well as three-dimensional geometry, featuring concepts of parallelism, incidence, and orthogonality in relationships between lines and planes. We made the deliberate choice to exclude analytic geometry, where computation takes precedence over reasoning.

We outline a straightforward algorithm for determining a matrix that satisfies specific conditions. First, we construct a matrix m that meets conditions (i), (ii), (iii), and (iv), with the positive entry on each line placed to the left, a relatively simple task. We then enumerate all matrices that satisfy conditions (i), (ii), (iii), and (iv) by shifting the positive entry of each line in lexicographic order. We halt the process as soon as the matrix meets conditions (v) and (vi), which are simple to verify. If the matrix does not meet these conditions, we consider it a failure.

The discussion on free points (in the plane, on a straight line, or on a circle) is valid under generic conditions, i.e., outside specific cases (e.g., three free points in a plane may be collinear, etc.). However, this set of particular cases has finite measure in ?n, so when selecting free points randomly, the probability of encountering these degenerate situations is low.

This method has limitations as it may not generate a construction from a set of solvable geometrical constraints. The reason for this is that we are working with nonlinear constraints on points. These constraints define a significant degree of freedom not on points themselves, but rather on coordinates or more complex structures (e.g., determinants of projective points).

Another consideration is adapting this work to three-dimensional geometry. Depicting three-dimensional objects on a two-dimensional screen presents challenges. Representing planes in three-dimensional space efficiently is difficult. The typical approach is to represent a plane as a parallelogram contained within it, but this means that two intersecting planes do not always appear to intersect in a drawing. Conversely, two non-intersecting straight lines may appear to intersect when depicted on a flat screen.