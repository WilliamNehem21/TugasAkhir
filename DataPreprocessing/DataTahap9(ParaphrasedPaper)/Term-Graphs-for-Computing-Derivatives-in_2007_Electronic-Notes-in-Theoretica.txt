Automatic differentiation is a methodology for transforming a subprogram that calculates a mathematical function into a subprogram that computes the derivatives of that function using rule-based techniques. This is typically achieved through the manipulation of a weighted term graph known as a linearized computational graph. Creating such graphs for imperative programming languages like C/C++ and Fortran presents several challenges, including the need for alias and definition-use information to construct individual statement graphs and then combine them into a unified graph for a group of statements. Moreover, a language-independent representation of the resulting weighted term graph is necessary to enable the use of automatic differentiation algorithms in tools for various programming languages. This paper provides an overview of the construction and representation of weighted term graphs for C/C++ and Fortran as implemented in the ADIC 2.0 framework.

The paper also serves as a reinterpretation of existing work and offers insight into the implementation details pertinent to the use of term graphs for imperative programming languages. The subsequent sections outline the construction of weighted term graphs, describe the static analyses employed in automatic differentiation tools, discuss the procedure for merging term graphs, introduce an XML representation for term graphs, and speculate on how ideas from term graphs could benefit the automatic differentiation community. Furthermore, the paper examines the openanalysis infrastructure, focusing on alias analysis and the use of activity analysis to identify passive variables.

The paper also explores the advantages of understanding automatic differentiation as a rewrite system for weighted term graphs, pointing out the potential benefits of introducing cycles into linearized computational graphs for the development of more sophisticated differentiation algorithms for code with loops and/or recursion. Additionally, it highlights the natural fit of term graphs for expressing and reasoning about automatic differentiation in functional programming languages. The paper concludes by presenting an infrastructure for the static construction of term graphs from imperative programming languages and an XML representation for term graphs, while also acknowledging the use of hybrid static-dynamic techniques in automatic differentiation and proposing future work examining techniques for cases of ambiguous static alias analysis.

Lastly, the paper discusses potential benefits and challenges associated with introducing new vertices into linearized computational graphs through rewrite rules and the impact of these rules on the cost of computing derivatives. It also references the work on bisimilarity in term graph rewriting as a potential source of insight into efficient methods for computing derivatives under such a system and acknowledges the complexities surrounding the guarantee of termination and NP-hardness proof in the context of enhancing differentiation rewrite rules.