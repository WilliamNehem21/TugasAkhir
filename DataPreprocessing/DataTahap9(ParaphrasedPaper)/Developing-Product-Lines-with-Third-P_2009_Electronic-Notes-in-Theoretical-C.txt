The conflict between the increasing focus on product line development and the growing use of third-party software presents a challenge, as product lines require precise control over software for diversity management, while third-party software inherently lacks such control.

In this paper, we present a solution to this issue by merging the Koala component model developed within Philips with the concept of build-level components. By elevating the granularity of Koala components from individual C files to build-level components, both trends can be reconciled. The Koala Architectural Description Language (ADL) is employed to coordinate product composition and diversity management, while build-level components serve as the foundation for integrating third-party components.

Efforts to reduce costs and time to market are key drivers for software product line development. Previously, proprietary technologies were frequently utilized to facilitate rapid product development by managing diversity. However, the current trend is to minimize costs and time to market, which proves difficult to achieve while integrating third-party software with proprietary product line technology.

Koala is a proprietary component technology used for developing product lines, known for its successful application in defining and constructing a wide range of products over the past decade. Its distinguishing features include diversity management through composition and variation, as well as an ADL for defining component compositions and driving code generation.

The Koala component model, comprising an ADL and accompanying tool support, offers a means to define interfaces, data types, basic components, and component compositions. It primarily targets resource-constrained software in the consumer electronics domain, employing a hierarchical structure where larger components are constructed by instantiating smaller components.

This paper proposes the adoption of build-level components as atomic units of composition to extend the application of Koala to more coarse-grained components and enable the integration of third-party software. A specific example of a build-level component utilizing GNU automake and autoconf is provided, demonstrating the feasibility of this approach.

The paper also delves into the nuanced structure of build-level composition and its implications for component abstraction, advocating for a directory-based organization that allows for composite components at the build level.

By integrating the Koala component model and build-level components, this paper showcases a potential solution to the challenge of integrating third-party software with the established Koala component model, illustrating how this approach can be practically implemented.