This research paper explores an extension of XQuery for querying and reasoning from RDF documents. The extension uses a graph-based approach to specify queries against RDF, and it incorporates the construction of answers and boolean predicates for RDF entailment relationship inference. The paper also investigates the implementation of this extension in logic programming, utilizing logic rules to execute RDF/XQuery queries.

XQuery is a typed functional language designed for expressing queries against XML documents. It encompasses XPath 2.0 as a sub-language, which supports navigation, selection, and extraction of XML fragments. XQuery also includes features for constructing new XML values and combining multiple documents.

Previous work has proposed a logic programming-based implementation of XPath and XQuery, enabling the expression of XPath and XQuery queries in logic programming. This implementation involves translating XML documents into a logic program using facts and rules, and executing XPath/XQuery queries by specializing the logic program representing the input XML document and generating specific goals for the query. The resulting answers for the goals can be used to reconstruct the output XML document.

The extension of XQuery explored in this paper allows for querying RDF/XML documents and constructing answers in the form of XML documents, which may represent serialized versions of RDF documents. Furthermore, the paper discusses how to implement this extension in logic programming, involving the representation of RDF documents in logic programs and defining logic rules for inferring information from RDF statements. The translation of XQuery expressions that involve RDF queries into logic programming is also addressed.

The paper proposes an extension of XQuery for handling RDF documents by using a triple-based syntax to represent RDF queries, similar to SQL-style proposals for RDF. The advantage of this syntax is that queries are independent of the selected serialization, unlike many proposals where queries become too complex due to serialization dependencies.

An important aspect of the proposal is its ability to use XML/RDF documents as both input and output, which is lacking in some existing RDF query language proposals. The approach generates XML documents as the output of RDF queries, allowing for the composition of queries. XQuery's ability to specify the XML format of the output document enables it to be expressed as an XML document or as a serialization of RDF.

The implementation of the XQuery extension in logic programming involves representing RDF documents as facts and defining logic rules for computing RDF relationships. The previous work on translating XML documents into logic programming using logic rules and facts is used as a basis for this implementation.

The translation of XML documents into a logic program involves assigning a schema rule to each inner node in the XML document, and numbering the facts to specify the order and hierarchical structure of the XML records. The output XML document is constructed based on the node and type numbering, and the hierarchical relationships between parent and child nodes. The paper presents a detailed translation process, using examples to illustrate the approach, as described in previous papers.

In conclusion, the paper provides a comprehensive investigation of the extension of XQuery for querying RDF documents, its implementation in logic programming, and the translation of XML documents into logic programs. It also discusses the advantages of the proposed approach and its potential application in handling RDF documents.