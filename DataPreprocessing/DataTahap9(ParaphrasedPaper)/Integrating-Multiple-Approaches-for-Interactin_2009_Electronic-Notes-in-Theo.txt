jgrasp 1.8.7 has incorporated three methods for engaging with its dynamic data structure visualizations: the debugger, the workbench, and a newly introduced text-based interactions tab for executing individual Java statements and evaluating expressions. While each method can be used independently, they are designed to complement each other, offering users a range of interactive options. This integration required significant redesign of the jgrasp visual debugger, workbench, and viewers. Furthermore, the structure identifier, which facilitates the identification and rendering of common data structures, was greatly enhanced by analyzing examples from 20 data structure textbooks. The outcome of this integration is a versatile approach for user interaction with dynamic data structure visualizations created by a robust structure identifier.

There are multiple ways to interact with the data structure visualizations in jgrasp 1.8.7, namely: the debugger, the workbench, and the text-based interactions tab. The debugger is commonly used to open a viewer on a data structure object by setting a breakpoint near its creation, running the program in debug mode, and then opening the viewer on the object. The structure identifier determines the data structure type and renders it accordingly, updating the viewer as the program is executed.

Another method to interact with visualizations is through the workbench, which allows users to create objects and invoke their methods using menus and buttons. This method enables users to update the visualization to reflect the effects of the invoked methods.

Research indicates that active modes of interaction with visualizations, such as manipulating elements of the visualization or responding to prompts, are more effective than passive modes, such as simply watching an animation. The context in which the visualization appears also plays a crucial role in its effectiveness. These considerations are fundamental when using the workbench menus and dialogs from the UML window or the edit window, as well as when entering source code into the interactions tab for direct execution. Each approach involves opening a viewer on an instance by dragging it from the debug or workbench tab. This paper will explore using the debugger approach and then demonstrate how users can interact with the visualization using both the workbench and the text-based approaches.