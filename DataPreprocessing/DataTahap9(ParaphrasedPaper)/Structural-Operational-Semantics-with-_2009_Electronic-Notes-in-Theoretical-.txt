We propose a formalism for structural operational semantics (SOS) that incorporates first-order logic formulas as premises. We demonstrate that in most practical applications, this formalism is as expressive as SOS without first-order logic. Additionally, we present a congruence format for (strong) bisimilarity, which is closely linked to the ntyft/ntyxt format.

In comparison to traditional TSSS, our notation deviates in that unbound variables are only permitted in the source of the conclusion of a rule. While traditional SOS examples typically omit set notations when the set of premises consists of a small number of transitions, we retain them for the purpose of comparison. We show that the implicit binding of variables from the source of the conclusion needlessly widens the gap between traditional TSSS and those of our syntax.

Within the syntax of the type of SOS specifications introduced in this paper, known as fol-SOS (SOS with first-order logic), the only dissimilarity with traditional rules, in the case of deduction rules without negative premises, is that the set of premises is combined into a single formula by connecting them with conjunction. We establish that allowing the use of first-order logic formulas in premises does not increase expressiveness for well-defined TSSS; it merely increases conciseness.

While we utilize formulas as premises for SOS rules, we also consider the set of literals used in such a formula. Therefore, we introduce a function to achieve this. We also introduce an auxiliary function for functions in a negative context.

In traditional TSS, the ntyft/ntyxt format constrains the premises such that the right-hand sides of all positive transitions among the premises are variables that are distinct from each other. We require a similar restriction, albeit more complex due to the inclusion of the full generality of first-order logic formulas as premises. We define functions to examine whether the right-hand sides of literals consist solely of variables and whether the unbound variables are unique or not.

A fol-TSS is in the fol-tyft format if all its rules adhere to this format. Similarly, a fol-TSS is in the fol-tyxt format if all its rules comply with this format. A fol-TSS is in the fol-tyft/tyxt format if all its rules are either in the fol-tyft or fol-tyxt format.

We have introduced SOS with the full power of first-order logic in the premises and provided an intuitive semantics that closely aligns with traditional semantics. Additionally, we have extended the ntyft/ntyxt congruence format and the format for congruence in the setting of TSSS. We show that our format is strictly more expressive than the ntyft/ntyxt format. To partially compare our format with the untyft/untyxt format of TSSS, we need to first establish a partial translation from the TSSS to fol-TSSS that preserves at least some of the logical structure of the deduction rules.