Current robustness testing tools like ballista and jcrasher examine program APIs using both random and predetermined inputs to determine if the programs crash. The authors conducted empirical studies on Unix shell programs and Java classes and discovered robustness defects. 

While various verification and testing techniques based on finite state machines have been proposed for traditional software and component software, they mainly concentrate on verifying the correct implementation of functional specifications. As per our knowledge, using a state model for testing robustness is a novel concept. 

The remainder of the paper is organized as follows: the subsequent section introduces components and their robustness problems. Section 3 describes the methodology of the state machine-based testing framework. The experimental results and evaluation of the prototype tool are provided in section 4. Section 5 surveys related literature. Finally, the paper concludes and outlines future work.

The semantics of reactive programs is defined through the concept of reactive designs with an additional boolean observable, "wait," which indicates program suspension. A design, d, is considered reactive if it is a fixed point of h, i.e., h(p) = p.

We implemented the test framework for components implemented in Java, and the test case generation mechanism assumes such testing targets. However, the approach can be adapted to other platforms. Test inputs are generated based on the method calls on the paths. For a method call, a concrete parameter is generated to replace each formal parameter. Instead of creating serializable objects and restoring them at runtime, we generate Java statements that create them. Our approach avoids managing any external object base. A Java metamodel is adopted from Octopus, and an ojoperation instance is constructed for each method call, along with an ojparameter for each parameter. The objects are then translated into JUnit test cases.

The recursion stops when it reaches a primitive type, and we limit the recursion depth to be less than 5 to avoid possible infinite loops and make the experiment more practical. When a construction reaches 5 levels deep, a null reference is returned. This limit is adapted based on our experimental experience.

When a parameter is constrained by pre-conditions, the random generator narrows the sample space accordingly. In RCoS, OCL constraints can be applied to denote a transition in the state machine. Our prototype tool abstracts OCL notations and uses them for effective random generation. 

To test robustness, an invalid method call should be provided at the final step. For invalid inputs (iv1), parameter lists are generated using the same method as for valid calls, but with at least one parameter replaced with an invalid value from a corresponding type pool. Suspicious values that often cause problems are also included. Note that static type checking and refinement typing could make it impossible to use some invalid inputs.

Unchecked exceptions, which are subclasses of RuntimeException, can be thrown by programmers without declaring them in the throws list. An unchecked exception might indicate a broken contract or a bug in the component. 

User-defined checked exceptions can indicate that the component is in the wrong state and not performing its functionality. These exceptions provide a way for testers to add component-defined exceptions to indicate an erroneous state of the component.

Any reported failure indicates that the component crashes. The stack trace of this exception pinpoints the call hierarchy showing how robustness defects are triggered. 

We analyze the unchecked exceptions and find several code segments that optimistically assume the parameters to be valid, which may lead to exceptions. 

Furthermore, we would like to extend our gratitude to the anonymous reviewers for their insightful comments. This work is supported by the National Natural Science Foundation of China (No. 60603036 and No. 60673114) and 863 of China (No. 2006AA01Z165 and No. 2007AA010302). It is also supported by HiGHQSoFD and HTTS funded by Macao Science and Technology Fund.
