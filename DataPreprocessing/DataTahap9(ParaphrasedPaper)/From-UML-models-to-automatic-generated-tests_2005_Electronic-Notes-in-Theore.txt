We need to evaluate not only the graphical user interfaces but also the content of the generated pages. Our contribution addresses these challenges. While there is an extension of UML for web applications, it primarily focuses on the design view, and thus, to produce diagrams that convey the necessary information for our tests, we drew inspiration from and. Additionally, this paper presents the techniques and tools used for component and conformance testing.

Within dotLRN, there are three primary portal types: user, class, and community portals. The user portal serves as the private space for each user, while the class and community portals contain pages related to specific classes or communities. Each of these portal types is further divided into four sections: the main space, the calendar, the files, and the control panel. Pages in dotLRN are comprised of portlets, which are small portals with specific functionalities such as forums, news, or calendars.

A user portal is automatically created upon a new user registration in dotLRN, whereas the class and community portals are created by the site-wide administrator based on user needs. When a new class or community portal is established, the administrator assigns one or more users as portal administrators. For example, in a computer science class portal, the administrators can be the professor and teaching assistants, while in a photography group community portal, the administrator will be one or more students. Portal administrators are responsible for adding content, customizing the layout, and determining the portal's policy.

The navigation map of a web application, as introduced in , is valuable as it provides information about the dynamic content of each web page within the system, as well as the links between different web pages. This information is crucial during the parsing of HTML pages (section 4.3). The navigation map is a class diagram where each web page is a class, and links between pages are associations between the respective classes. This extension of UML for web applications introduces several aspects.

To parse the UML diagrams, we could utilize the API of a UML tool or export the diagrams in the XMI format, allowing parsing using an XML parser. XMI is a standard created by the Object Management Group (OMG) to represent UML diagrams in XML. Exporting to XMI was our preferred solution as it does not tether us to a specific tool.

Although any XML parser could be used to parse the XMI, given the high complexity of the standard, we opted to use a specialized XMI parser included in the System Modeling Workbench Tool 8. This parser is free, open-source, and written in Python, facilitating integration with our code. Its open-source nature also allowed us to address some incompatibility issues that arose when used with XMI produced by the Poseidon tool.

The test method is based on the testing of objectives, which are selected considering the advice of experts and designers. These tests are constructed from user cases and cover all relevant aspects of system behavior. Although we cannot ensure complete error coverage, it can be guaranteed for the selected tests.