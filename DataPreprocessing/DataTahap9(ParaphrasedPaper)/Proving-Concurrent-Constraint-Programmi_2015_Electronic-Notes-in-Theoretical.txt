The relationship between logic and ccp processes (and constraint systems) has been a subject of investigation from the outset. A closure operator semantics was assigned to deterministic ccp programs, which was subsequently linked to the logic of constraints. A calculus for proving properties of ccp programs was formulated, where properties were articulated in a more intricate logic of the constraint system. Works such as [20, 5] establish connections between operational steps of ccp and lcc with derivations in ill. Additionally, research in [13, 4] provided logical semantics for timed ccp languages and developed calculi for verifying temporal properties of programs. A comprehensive overview of these developments is available for interested readers.

LCC processes can be interpreted using pure linear logic, rendering the encoding more natural and direct. This approach allows the application of the advanced meta-theory developed for linear logic to draw conclusions about ccp systems. Furthermore, different notions of observables, not addressed in a previous framework, are studied, and it is demonstrated that there are lcc computations that cannot be replicated by the standard encoding of processes as illf formulas. However, by introducing delays in the encoding, the one-to-one correspondence between illf derivations and lcc computations is reestablished. The behavior of nondeterministic processes with blind and guarded choices is also examined.

In the context of ccp, the store grows monotonically, meaning that agents can only add new information without the ability to delete constraints from the store. To exercise better resource control, the linear ccp (lcc) language was introduced, wherein constraints are viewed as formulas in a fragment of intuitionistic linear logic (ill). The linear constraint system is redefined accordingly.

In a process definition, the formula on the right represents the head p and needs to be focused, positive, and atomic since it originates from a focused implication formula on the left. This entails that the proof must immediately conclude with the initial axiom ir.

The next lemma provides further clarification on cases involving focused formulas on the right, particularly focusing on the shape of derivations in a proof involving banged guards and goals. This shows that such formulas are derivable only through other guards and non-logical axioms. It is also asserted that there is no proof of banged guards and goals if a process definition is chosen to be focused.

A particular derivation in an example is observed not to produce any observable store, raising the question of whether the behavior of ask agents can be restricted to avoid interleaved executions when observing a given constraint. Fortunately, the answer is affirmative, as demonstrated subsequently.

The operational semantics dictates that once the guard c in "ask c then p" is entailed, p is enabled for execution (rule ra). However, the semantics does not mandate the immediate execution of p. An alternative semantics for ask agents is defined to force the execution of p, thereby avoiding interleaved derivations presented in previous examples.

The evolution of "ask c then p" into "ask dj then pj" without producing any constraint is analyzed, and it is concluded that nested asks can be executed at once. Moreover, it is noted in Remark 4.10 that Theorem 4.8 offers a canonical trace to successful lcc computations via focusing, and Theorem 4.9 establishes a one-to-one correspondence between traces of a derivation in logic and traces of a computation in an lcc program.

It is emphasized that the logical control corresponds to the operational semantics, specifically in capturing the behavior of choosing one process from available choices. Moreover, the positive and negative phases of the chosen process further contribute to maintaining a clear logical control corresponding to the operational semantics, which is valid for indeterminate ccp as well.