The use of task models is prevalent in interactive systems design, and this paper aims to address the problem of abstraction level by investigating the feasibility of employing task models as oracles for model-based testing of user interfaces. The chosen notation for task modeling is ConcurTaskTrees (CTT), which offers several potential advantages.

By utilizing task models as oracles, the goal is to make GUI models utilized in model-based testing more abstract and reduce the effort required for their construction. The adoption of CTT as an oracle is expected to provide increased visibility into potential issues such as window management and enable more transparent inclusion of information at a low level of abstraction.

To facilitate automatic generation of test oracles from CTT models, the task sets representing enabled tasks at various interaction points are derived, known as presentation task sets (PTS). A window manager model is employed to handle window placement and removal behaviors, and additional steps are outlined for defining input parameter domains and refining the generated Spec# oracle.

An example demonstrating the automatic generation of Spec# oracles from CTT models for the Windows Notepad editor is presented, emphasizing the tool's ability to transform task models into oracles automatically. The conditions expressed as properties of atomic tasks in the model are also highlighted.

The paper discusses the vision of developing task models to capture all possible interactions with the system and their potential as a complement to traditional usability analysis. However, it acknowledges the need for further analysis on issues such as user variations in achieving goals and testing behaviors outside the task model. The paper also touches upon the importance of testing resilience and potential approaches to incorporating anomalous or boundary behaviors in task models.

In conclusion, the paper demonstrates that task models can be used to economically generate oracles in a model-based testing context, and tool support is being developed to enable automated oracle generation from task models. The advantages and limitations of this approach are thoroughly discussed.