High-performance computing is widely recognized as a key tool for leading in the fields of science and technology. A significant portion of high-performance computing involves using clusters running the message passing interface (MPI) library, which has become the standard in high-performance computing. Our research addresses the challenge of preventing bugs in MPI programs through a combination of techniques, including the use of formal specifications and in-situ model checking techniques. This paper outlines the assessment of these techniques and discusses our future research plans.

MPI programs, like parallel programs in general, can contain bugs. The sources of bugs in MPI programs include the large number of functions in MPI libraries, the informal teaching or learning of MPI, and the need to manually re-tune MPI programs when transferred to a new hardware platform.

We are conducting ongoing research to employ formal methods in order to facilitate the development of bug-free MPI programs. Our approach involves developing a formal model of the MPI library, creating in-situ (run-time) model checking tools, and enhancing model checking efficacy through static analysis support. This paper briefly describes our ongoing work in these areas and outlines our future plans.

The paper is organized as follows: Section 2 presents an overview of our ongoing work in developing a formal specification for MPI. In Section 3, we describe our efforts in developing an in-situ model checker for MPI, which, to our knowledge, is a novel approach for MPI programs. Section 4 presents an assessment of our work to date and draws conclusions for the future.

Our previous work involved capturing approximately 10% of the MPI-1.0 primitives using TLA+. We developed a C front-end in the Microsoft Visual Studio Parallel Debugger environment to enable users to submit MPI programs with embedded assertions for checking using the TLA+ model checker. We also discuss another project with similar motivations, which formalizes the kernel threads procedures of the Win32 API.

Our current work focuses on an in-situ model checker that checks for deadlocks and local assertion violations. We also describe an algorithm for ISP (In-Situ Process), which is highly parallelizable and allows for the exploration of alternative interleavings by other nodes in a large cluster. Our future plans regarding ISP are elaborated in Section 4.

Our future work will involve two distinct phases. Firstly, we plan to rigorously analyze our MPI formal specification and seek feedback to further refine it. Secondly, we intend to develop new combinations of static and dynamic analysis, obtain difficult-to-debug MPI programs, and measure the efficacy of our tools. We also express our acknowledgments to Professor Gary Lindstrom for his impact on the parallel computing research conducted at the University of Utah and for his feedback and encouragement of our research.