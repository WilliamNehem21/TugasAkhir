In this research paper, we introduce an extension of the soft concurrent constraint language to enable the nonmonotonic evolution of the constraint store. To achieve this, we introduce new operations: retract(c), which reduces the current store by c; updatex(c), which transactionally relaxes all constraints dealing with the variables in the set x and then adds a constraint c; and nask(c), which tests if c is not entailed by the store. We present this framework as a potential solution for managing resources such as web services.

Our work is inspired by a nonmonotonic framework for concurrent constraint programming (CCP) and its semantics. The nask and update operations in our framework are soft versions of those described in previous works, while the atell operation, which adds a constraint only if it is consistent with the store, can be modeled with the classical tell of SCCP. We also draw inspiration from previous research on fine-grained constraint removal and nonmonotonic evolution in CCP. Our language allows for a certain level of nondeterminism in contrast to classical SCCP, which is monotonic.

We highlight the significance of checking the consistency level of the store to ensure it does not exceed a given threshold in our nonmonotonic SCCP. Additionally, we discuss composition operators and their modeling of parallelism and nondeterminism in our framework.

Furthermore, we demonstrate the use of the nask operation in a negotiation scenario, where it can be employed for various purposes, such as checking if a policy is still implied by the store.

We chose to extend SCCP with soft constraints in order to represent consistency levels and to provide a means of expressing preferences, fuzziness, and uncertainty. We believe that embedding preference values directly in the language offers a valuable solution for managing SLA negotiation, particularly in cases where QoS is associated with resources. Soft constraints provide a flexible way to model various problems by parameterizing the semiring structure.