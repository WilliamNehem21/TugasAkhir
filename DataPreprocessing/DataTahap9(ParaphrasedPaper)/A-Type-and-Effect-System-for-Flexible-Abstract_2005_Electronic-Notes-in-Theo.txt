Several authors have recently demonstrated the extraction of abstract interpretations of program control flow from higher-order programs using type effect systems. These systems utilize type effects to predict atomic events and their order of occurrence, forming simple labeled transition systems (LTS) on which standard model-checking algorithms can be applied for program analysis. This allows for the automatic static verification of program properties, including resource usage analysis and access control.

Several authors have also explored the use of abstract program interpretation as input to model checking for verification of specified program properties. These works involve extracting abstract control flow as an LTS in the form of a finite automaton, grammar, or push-down automaton, and applying model checking techniques to temporal logics, regular languages, or finite automata. However, none of these works defines a rigorous process for extracting an LTS from higher-order programs.

Some systems are based on linear types, which are different from effect types and present challenges for model checking. Other systems use LTSs extracted from control-flow graph abstractions to model-check program security properties expressed in temporal logic, although they are primarily focused on the programming language rather than the model-checking side of the problem. In contrast, the type-based approach discussed in this paper is defined directly at the language level, and type inference provides a scalable mechanism for extracting an abstract program interpretation applicable to object-oriented programming.

The paper focuses on transformations of history effects in the context of program analysis, presenting the stackification transformation to generate an abstract interpretation of possible stack states at runtime and the exnization transformation to interpret exceptions. The approach allows for the modular treatment of various language features without redefinition of type effect inference.

The program analysis presented is a type and effect inference system where effects approximate program histories, offering benefits in higher-order functional and object-oriented settings, as well as accommodating sophisticated type inference techniques like constraint-based polymorphic subtyping. The uniform approach presented is argued to be simpler and more efficient than combining direct stack- and history-based inference for security mechanisms.