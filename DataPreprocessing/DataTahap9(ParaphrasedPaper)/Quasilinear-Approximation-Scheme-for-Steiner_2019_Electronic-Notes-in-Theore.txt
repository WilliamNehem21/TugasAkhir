Like the approaches of Arora and Borradaile et al., our algorithm relies on recursively dividing the space containing terminals using lines. The proposed algorithm is based on dynamic programming and aims to find an optimal solution that intersects each line a constant number of times and only at specified points called portals. This division, referred to as dissection, begins with a root dissection square, a bounding box encompassing all input points. The side length of this root dissection square, denoted as l, is a power of two and is at least double the length of the side of the smallest square enclosing all terminals in the input. The root square is initially positioned with its bottom left corner at (0, 0) in the plane, ensuring that every terminal is located within the square defined by the points (0, 0) and (l/2, l/2).

We define the child-parent relationship within the quadtree structure, where each square created by dissecting a given square is a child of that square, and the original square is their parent. If a dissection square r encloses another dissection square rj, then rj is considered a descendant of r. The depth of any square is one plus the depth of its parent, forming the nested structure of squares in the quadtree. The depth of a dissection line l, denoted by depth(l), is the lowest depth of dissection squares that l separates. It is noteworthy that the depth of squares that are leaves of the quadtree is at most O(log l).

The transformation process involves two main steps. The first step, partitioning the set t of terminals using the algorithm provided in Proposition 3.1, is shown to yield an optimal solution for the entire instance by considering the union of optimal solutions for each element of the partition, as proven in Proposition 3.1. This partitioning also aids in bounding the diameter of each part of the partition based on the number of terminal pairs it contains and the maximum distance between such terminals, as evidenced in Proposition 3.2. The second step, discretization, involves moving the terminals to the centers of grid cells within an integer grid of granularity one in the Euclidean plane, effectively transforming the original instance.

Prior work by Bateni et al. in 2011 presented a polynomial-time approximation scheme (PTAS) for the Steiner Forest problem in planar graphs. Consequently, a natural avenue for further investigation is the exploration of the existence of a PTAS for the Steiner multi-cycle problem on planar graphs.