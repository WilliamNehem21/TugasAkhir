We present a new iteration of the teaching machine project called quiz generator, which enables instructors to generate assessment quizzes for algorithm and data structure courses with ease. This extension incorporates visualization techniques and takes advantage of the new capabilities of the teaching machine, allowing the addition of third-party visualizers as plugins and the introduction of advanced scripting features. With these new capabilities, we have already developed several types of quizzes that can be applied to any algorithm or data structure for which suitable visualizer plugins exist.

To streamline the process of creating new types of tests, we have chosen to avoid tests based on data structure manipulation and have focused on multiple-choice quizzes instead. Nonetheless, we believe that the range of test types proposed in the subsequent section is comprehensive. Our approach involves integrating quiz generation functionality into the existing teaching machine [4,5] and webwriter++ [3,2] environment. The teaching machine is a program animation tool designed for visualizing the execution of Java or C++ code on a computer, featuring compilers for both languages and an interpreted runtime environment. It has the capacity for visualizations at a higher level of abstraction and allows the addition of arbitrary visualizer plugins. Webwriter++ is a small authoring system that provides automated facilities such as displaying color-stained code within a visual container and interacting with the teaching machine.

In the following section, we describe the five quiz types already included in our framework, and in section 3, we provide a brief overview of the extensions made to the teaching machine and webwriter++ to develop the quiz generator framework. These extensions primarily involve a new plugin architecture and enhanced scripting capabilities. In sections 4 and 4.1, we present a test example and demonstrate how the new features of the teaching machine and webwriter++ enable visualization and assessment of the test. Section 5 examines related work, and we conclude in section 6 by posing research questions concerning the potential use of the quiz generator as a testing tool, rather than solely a self-assessment tool.

Our system supports various types of quiz questions, similar to those outlined in the taxonomy proposed elsewhere, with an emphasis on multiple-choice quizzes. Visualizer plugins are employed in all question types to visualize both input and output.

The quiz generator builds upon a significant redevelopment of the teaching machine in 2006-2007, which facilitated the development of third-party plugins. This development allows instructors to create their own plugins without modifying the teaching machine core. While these plugins are not limited to visualizers, we recognized the importance of visualizers and developed a visualization adapter to expedite third-party development. The objective is to enable experienced developers to create new visualizers within a matter of one to three days. Access to this capability prompted our exploration of developing a quiz.

The quiz generator project required a more sophisticated set of embedded scripting controls for the teaching machine in comparison to what was needed for webwriter++. For instance, our learning web pages currently display a code fragment, allowing students to run, edit, or watch a video about the code. Developing quizzes, however, presents greater demands.

This paper aligns with the third level of the learner engagement taxonomy, aiming to avoid impediments faced by instructors by implementing visualization techniques and making the creation of new quizzes as straightforward as possible within a unified framework. Other related papers contribute background information and test settings for evaluation. Additionally, they address the development of interactive prediction facilities, web-based tools, and a tool-independent approach.