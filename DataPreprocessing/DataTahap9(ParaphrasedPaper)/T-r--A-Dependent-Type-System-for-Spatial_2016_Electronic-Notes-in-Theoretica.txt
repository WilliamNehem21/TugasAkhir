This research introduces a dependent type system for the LLVM intermediate representation language aimed at preserving pointer bounds information to prevent spatial memory safety violations such as buffer overflows. The proposed system combines static analysis and runtime checks to ensure spatial memory safety, and it serves as a foundation for ensuring spatial memory safety in languages that can be compiled to LLVM, such as C and C++.

Several approaches have been suggested to achieve memory safety in C, including systems that maintain their own bounds information and instrument programs to enforce memory safety. Another approach, known as deputy, utilizes dependent types to allow programmers to annotate existing bounds information in C programs, enabling the compiler to identify and insert checks to ensure proper usage. This paper provides an overview of the proposed system, its integration with LLVM, and the type rules and transformations it implements. It also discusses spatial memory safety and the varying levels of granularity at which memory safety is considered.

The paper also discusses the use of deputy to insert assertions in the code to ensure that pointers are within declared bounds before use. Additionally, it explores a compilation pass that removes assertions that can be proven true at compile time, minimizing the performance impact of checks, as well as identifies assertions that can be proven false at compile time, providing static checks when possible. The limitations on expressions that can appear in dependent types are also discussed.

Furthermore, the paper provides background on LLVM IR, a typed assembly-like language for an abstract machine, and highlights its use in program compilation, analysis, and transformation. It explains the static single assignment form of LLVM IR with respect to its registers and the use of branching and return instructions.

Overall, the proposed dependent type system for LLVM IR offers a promising solution for addressing spatial memory safety in languages compiled to LLVM and contributes to the advancement of memory safety mechanisms in programming languages.