Property 4 of conditional term rewriting systems (CTRSs) is crucial and can be ensured by terminating the unraveled CTRSs [6,7,13]. The initial conversion from CTRSs to TRSs for standard CTRSs was investigated by J.A. Bergstra and J.W. Klop. M. Marchiori subsequently revisited this concept as an unraveling, examining its properties such as syntax, termination, modularity, and more. Additionally, he proposed an unraveling for deterministic CTRSs, utilized in the inversion compilers introduced in [10,11]. These compilers transform constructor TRSs into CTRSs that compute (partial) inverses of functions defined in the TRSs, followed by unraveling the CTRSs into TRSs with rules that may contain extra variables. Since terms representing the inverse computation of many-to-one functions might have multiple normal forms as solutions, the intermediate CTRSs produced by the compilers are not always confluent. As a result, this paper does not assume confluence for CTRSs. Nonetheless, the transformation discussed in this paper is sometimes beneficial for simplifying TRSs obtained from the compilers, and an example is demonstrated at the end of the paper.

An alternate approach to simulation-completeness demonstrates that the unraveling for standard CTRSs is simulation-complete for all left-linear normal CTRSs. It was also shown that the unraveling for deterministic CTRSs is simulation-complete for CTRSs if the unraveled CTRSs are either left-linear or both right-linear and non-erasing. The approach in [citation] is not universally applicable to all deterministic CTRSs, while the approach in [citation] is so.

To enable simultaneous evaluation of conditions that can be evaluated in parallel, we enhance the typical unraveling method so that some conditional rules are broken down into less conditional rules. This enhancement is inspired by the unraveling for standard CTRSs. As demonstrated in the proof of Theorem 3.7 below, this improvement is not entirely new, yet it is sometimes effective in reducing the number of unraveled rules through the transformation illustrated in Section 4 (see an example at the end of subsection 4.3).

Furthermore, we were able to reduce the number of u symbols from u(r), remove u symbols, and update the context-sensitive conditions by setting {1,..., n} for all n-ary symbols f, which may be a u symbol.

Relaxing the condition RMC in subsection 4.2 while maintaining simulation-completeness of the unraveled CTRSs is likely impossible. Conversely, tightening RMC is necessary to maintain the feature of conditional rules associated with efficiency of reductions. A related ML program is considered to illustrate this need.

A proposed transformation from join CTRSs into TRSs, applicable to normal CTRSs, was introduced by P. Viry as another approach to remove conditional parts of conditional rules. Unlike unravelings, this transformation does not introduce u symbols but extends the arity of defined symbols. Similar to unravelings, this transformation is not universally simulation-complete for all CTRSs. 
The work on this paper was partly supported by MEXT Kakenhi#17700009 and#18500011. Gratitude is extended to Professor Yoshihito Toyama for pointing out interesting issues about confluence, as well as to the anonymous referees for their valuable comments that have contributed to enhancing the precision of the paper. Additionally, special thanks are extended to Salvador Lucas for his insightful comments, which have helped improve the final version of the paper.