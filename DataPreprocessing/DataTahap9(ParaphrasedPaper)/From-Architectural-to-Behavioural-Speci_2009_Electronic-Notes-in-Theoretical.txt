The paper introduces several tools and methods in the context of a formalism known as COWS, which has been influenced by principles from WS-BPEL. These tools include a type system for confidentiality checks, a stochastic extension for quantitative analysis of service behaviors, a static analysis for establishing information flow properties between services, and a logic and model checker for expressing and validating functional properties of services. This combination of features provides a significant advantage over similar approaches, as discussed in section 6 of the paper.

Furthermore, the paper presents an overview of SRML and COWS, providing a high-level description of the modeling primitives captured by SRML, and a brief peek into the semantics of COWS. This formalism enables the specification and combination of services, incorporating constructs and features from various well-known calculi, such as non-binding receiving activities, asynchronous communication, polyadic synchronization, pattern matching, protection, and delimited receiving and killing activities. These features facilitate the modeling of service instances with shared states, processes playing multiple partner roles, and stateful sessions involving correlated service interactions.

The integration of SRML and COWS is exemplified through an automotive case study in the sensoria project. The paper details how a SRML module corresponds to a persistent COWS service and explains the process of instantiating a module by invoking the operation "create" with the partner name of the module. It also outlines the generation of conversation identifiers to ensure proper communication and prevent interference among instances of the same module.

The work described in the paper is attributed to F. Chesani, P. Mello, M. Montali, S. Storari, and P. Torroni, and it was published in the Journal of Multiagent and Grid Systems in 2009.
