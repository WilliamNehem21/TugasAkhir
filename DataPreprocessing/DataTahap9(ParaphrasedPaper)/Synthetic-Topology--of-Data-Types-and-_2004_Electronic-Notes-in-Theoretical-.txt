The material in sections i and ii is covered in part ii. However, it is shown that aspect iii can be addressed independently of i or ii. The text begins by establishing a synthetic topology of programming-language data types in part i, with no assumptions about classical topology or prior introduction of classical topology. Part iii integrates concepts from parts i and ii, and develops non-trivial computational applications, including a computational version of the Tychonoff theorem. The paper also reviews previously known applications and elucidates the relationship between topology and semantics in program-correctness proofs.

The first chapters of part i delve into the reconciliation of fundamental topological notions such as continuous maps, open sets, closed sets, compact sets, Hausdorff space, and discrete space with the finite nature of computers and the infinite nature of the entities being calculated. One of the key contributions of this work is the explication of the computational nature of compactness. It is observed that a set is compact if, given any semidecidable property, one can semidecide whether it holds for all elements of the set in finite time. The monograph also illustrates the existence of infinite computationally compact sets, for instance, the set of infinite streams of binary digits.

Part i, which focuses on computational concepts, can be comprehended independently of part ii, which centers on mathematics. Computer scientists can utilize part i as a pathway to access part ii, while mathematicians can traverse in the opposite direction. Chapter 3 of part i parallels the central chapter 3 of part ii. Part iii unifies the parallel computational and mathematical developments of parts i and ii, and concludes with various applications.

As stated in the preface, this work traces its origins back to Brouwer. The main topics of chapters 4 and 6 revolve around a synthetic definition of continuity for functions between data types. Objective, operational notions of observation with mathematical and computational precision in specific circumstances are formulated in detail in chapter 2 and explored in chapters 3 and 4. These notions shed light on the disparity between observable and semidecidable properties, leading to a revision of the dictionary, which is summarized in chapter 5.

Of particular interest are two subspaces of the Baire data typeâ€”the Baire space and the Cantor space. The Baire space consists of functions mapping the divergent element to itself and non-divergent elements to non-divergent elements, while the Cantor space comprises functions taking values 0 or 1 on all non-divergent arguments. Moreover, the concept of a subspace being Hausdorff is defined, and examples of Hausdorff and discrete spaces and their subspaces are provided.

The distinction between compact and non-compact spaces is explored, and it is shown that a subset of the space of natural numbers is compact if and only if it is finite. The computational application of these concepts is highlighted, including the computational image of the Cantor space in the space of natural numbers.

The transition from the internal to the external view of data types leads to different definitions for the quantification functional, ultimately resulting in two different specifications. The statement that a predicate is universally valid with respect to the external view is noted to be stronger, but often easier to prove when it holds, than the statement that it is universally valid with respect to the internal view.

Further discussions center on various mathematical properties, including propositions and corollaries, and their implications for topological and computational concepts. The connection between function-space topologies and the classical notion of compactness is established. The computational perspective on observations and computations is detailed, emphasizing the choice of observation or data language.

The paper touches upon various historical and mathematical aspects, including the relationship between domain theory and programming-language semantics, and concludes with real-world applications involving programming languages and denotational semantics.