An approach for deciding the validity of formulas in logic and constructing a counter-model in cases where a formula is not valid is outlined. The initial step involves constructing a graph with two types of arrows, and subsequently reducing the decision problem to identifying specific cycles within this graph. The edges of the graph are obtained by describing sets of arrows, both green and red, along with the boolean expressions that index these arrows. The theorem states that a formula is provable if and only if every instance graph contains at least one specific type of cycle.

To find a valuation such that the corresponding instance graph has no instances of a specific type of cycle, each basic cycle is identified and a valuation is sought to simultaneously break each of the cycles. A naive procedure for computing such a valuation is described, but it is recognized as being highly inefficient due to the potentially exponential number of cycles for a given formula. The issue of eliminating cycles is then addressed, and a possible solution is described.

The prototype implementation represents conditional matrices using sparse arrays, and the boolean functions are represented by nodes of a shared binary decision diagram for efficient boolean computations and extraction of boolean counter-models. The algorithm for computing bi-heights is a modified version of a depth-first search procedure.