The paper discusses the importance of specifying the order and dependencies of model refinements, referred to as completions, in the context of component-based systems. It emphasizes the need to define roles and responsibilities in the development process for managing completions and reducing conflicts. The concept of completions is introduced, encompassing model refinements that provide additional details about a component's functionality and include performance completions that incorporate parametrized resource demands into the model, crucial for analyzing non-functional properties.

Furthermore, the paper highlights the challenge of assessing the impact of design patterns on system quality attributes in a specific scenario and introduces a model-driven approach for evaluating the influence of concurrency patterns on the quality of service of a software architecture. It also identifies the types of annotations needed for connector completions and stresses the importance of specifying the order of completions for accurate performance predictions from the refined model.

The paper presents an approach for integrating completions to reduce conflicts and maps patterns to the roles and responsibilities in the software development process for conflict avoidance. It also discusses the use of adaptation patterns for predicting extra-functional properties and highlights that existing approaches for concurrency patterns and connectors focus on qualitative attributes, such as deadlock-freedom, overlooking quantitative attributes like performance and reliability.