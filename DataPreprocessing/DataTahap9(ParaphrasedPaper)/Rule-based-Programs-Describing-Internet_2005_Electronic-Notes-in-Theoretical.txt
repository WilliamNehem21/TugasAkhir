In this academic paper, the authors introduce a low-level specification language for real internet security protocols. This language is used to automatically generate specifications from high-level TLA-based protocol descriptions. The resulting rule-based programs contain all the necessary information for implementing the protocols or verifying their security properties. The approach has been successfully applied to several well-known internet security protocols, leading to the discovery of certain vulnerabilities.

The authors acknowledge that while there has been significant work in recent years on specifying security protocols, much of this work, including their own, has been limited to simple, toy protocols in the "Alice & Bob" notation, which describes message exchange in a linear scenario.

The main goal of the authors is to handle complex protocols, such as those discussed at the IETF. To achieve this, they developed a new high-level protocol specification language (HLPSL) within the Avispa project, considering the constructions commonly found in the specification of these protocols. They have also created a compiler that transforms a protocol specification in this language into a set of rewrite rules. Instead of presenting the compiler itself in this article, the authors focus on the encoding of high-level properties in these rewrite rules, arguing that rule-based systems provide a natural framework for encoding the properties of cryptographic protocols.

The authors note that the specification of security protocols is important, and it typically involves a three-step process: high-level specification, analysis to identify potential errors, and time-consuming verification of correctness. They express interest in addressing these objectives, particularly the need for clear and understandable protocol specifications that consider the scientific foundations of the protocols.

The paper illustrates the new specification language using the Needham-Schroeder Public Key (NSPK) protocol, specifically the more complex NSPK Key Server (NSPK-KS) variant. The authors also outline how specifications of protocols are compiled into rule-based programs, and describe the syntax and semantics verification process that occurs during compilation.

The authors emphasize the importance of handling complex protocols by demonstrating that their compiler is capable of handling a wide variety of protocols, including both low-level protocols such as TLS and high-level ones such as UMTS-AKA, as well as those recommended by the IETF and protocols currently under development.

The paper also mentions ongoing work with Siemens on the analysis of protocols still under development, such as the AAA Mobile IP protocol, with the aim of contributing to their development by expediting the analysis process.

The compiler described in the paper is implemented in OCaml and documented with OCamlweb. The authors note that it has been designed for the Avispa project to handle real industrial internet security protocols, and they indicate their intention to continue its development to handle even more protocols.

Lastly, the authors compare their specification language with MUCAPSL, noting differences in data structures, primitives, and instructions. They highlight that their language allows for specifying shared information among roles and the creation of multiple role instances, and that its transitions are guarded and not ordered, allowing for non-deterministic application. They conclude that while MUCAPSL offers more features, their simpler language is designed to meet the needs of industrial partners and is powerful enough to specify most internet security protocols. They reaffirm their aim to provide rule-based specifications of protocols to industrial partners to aid in both protocol implementation and verification.