This paper demonstrates the utility of rewriting logic semantics (RLS) as a computational logic framework for operational semantic definitions of programming languages. It encompasses various styles of operational semantics, such as big-step and small-step structural operational semantics (SOS), modular SOS, reduction semantics with evaluation contexts, and continuation-based semantics. The paper emphasizes that RLS does not enforce any particular language definitional style, and highlights its flexibility and ease of use as an attractive feature for exploring new definitional styles.

The research is part of the RLS project, which aims to develop a tool-supported computational logic framework for modular programming language design, semantics, formal analysis, and implementation based on rewriting logic. An important question addressed is how well RLS can express various approaches in the SOS tradition, and the paper aims to answer this question. It also discusses RLS's computational proof theory and initial model semantics, which provide inductive reasoning principles for proving properties in programming language definitions.

Additionally, the paper introduces the translation of write-only fields as well as the strengths and potential applications of RLS in language interpretation and efficiency analysis. It also outlines the comparison of RLS definitions in various programming languages and examines the efficiency and representational distance of these implementations. The paper concludes by highlighting the usefulness of RLS in exploring new definitional styles, particularly for highly-concurrent languages or those involving concurrency, real-time, and/or probabilities.

Overall, this paper represents a significant contribution to the RLS project by showcasing its capability to serve as a versatile framework for programming language semantics and promoting further exploration of new definitional styles.