This academic paper discusses the scenario where two users, u1 and u2, modify a file in a version control system (VCS) by applying patches. If the users concurrently modify the same file, conflicts can arise, necessitating a coherent method for representing and handling such conflicts. The paper proposes the creation of a category, denoted by p, which encompasses all conflicting files in a VCS. The category p is obtained by completing the original category l under all pushouts, providing a universal representation for all conflicting files.

The paper outlines the construction of the category p, with a focus on investigating its properties and providing a concrete description of the construction in specific cases. It also discusses the extension of this model to accommodate more complex scenarios, such as multiple files, different file types, and structured data. Additionally, the paper touches on the modeling of repositories as partially ordered sets of patches and the potential application of event structures labeled by morphisms in p.

Overall, the paper demonstrates how universal constructions can be used to create a category that effectively models conflicting modifications in a VCS, ensuring well-defined merging of file modifications. It also sets the stage for future work to extend the model to address more diverse and complex VCS scenarios.