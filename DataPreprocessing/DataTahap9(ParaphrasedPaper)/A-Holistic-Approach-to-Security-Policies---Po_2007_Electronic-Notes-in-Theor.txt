This platform offers a variety of applications and security services to users in a transparent, seamless, and integrated manner. It is a modular and integrative platform that facilitates the connection of different end user devices, such as PCs, PDAs, and ambient intelligence devices, and supports various network types (e.g., wired and wireless networks) and communication paradigms.

The Sicari platform comprises a kernel running on top of a Java virtual machine, along with a set of essential basic services and optional application services. Applications rely on these basic services, including the authentication manager, identity manager, cryptographic key master, and policy service.

The platform aims to bridge the gap between the informal specification of security policies by the administrator and their corresponding machine-readable policy specification. It supports a subset of XACML and aims to achieve expressiveness that enables the handling of a well-known XACML example.

The policy enforcement component ensures that all security-relevant tasks are in accordance with the underlying security policy. It detects security-relevant tasks, consults the policy decision component, and enforces policy decisions, such as allowing a platform entity to access a platform resource.

Successful authentication of every acting entity within the service infrastructure, via platform authentication, is a precondition for policy enforcement, such as access authorization. The platform provides multiple authentication modules to accommodate different user login procedures.

The policy decision point (PDP) keeps the policy up to date at the policy enforcement point (PEP). Any changes to the master policy at the PDP are communicated to all PEPs using the policy, and the PDP and PEP regularly exchange keep-alive (KA) messages to ensure that the PEP always uses an up-to-date policy.

Specific fields within the communication protocol determine the class and characteristics of the object. Object content is processed by special modules that can interpret the relevant client-specific information. The implementation is based on an open source implementation of the COPS protocol from the University of Waterloo, with extensions to handle XACML and client-specific content.

A concept has been developed to extend the COPS protocol to transport XACML policies as payloads. Any such extensions to the COPS protocol need to consider the peculiarities of the target policy language. The structure of client-type-specific objects and protocol extensions should be specified in a supplementary document defining how the PEP and PDP interpret and handle the policy-specific payload.