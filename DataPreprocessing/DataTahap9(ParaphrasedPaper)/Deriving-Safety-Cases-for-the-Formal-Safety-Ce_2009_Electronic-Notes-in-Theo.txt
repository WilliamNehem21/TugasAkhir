This paper outlines a method for systematically developing safety cases for automatically generated code based on information obtained during a formal, hoare-style safety certification process. The safety case covers both formal and informal reasoning principles and identifies the key assumptions and external dependencies that must be considered. While the evidence is derived from formal safety proofs, the safety case utilizes a goal-based argument instantiated with respect to the certified safety property.

The paper also describes a multi-step strategy for ensuring variable safety throughout the program and demonstrating the validity of the safety condition. The evidence for the verification conditions is derived from formal proofs, with the intention to convert them into safety cases in the future.

The authors note that this work is ongoing and have outlined the overall structure of the generic program safety case, which has been manually instantiated. The example provided uses code generated by an autofilter system, but the authors suggest that the same approach can be applied to code generated from MATLAB models using Real-Time Workshop. They are currently working on creating a comprehensive safety case that encompasses all components of the certification system, such as the formal framework, the inference system, and the individual components, as well as the safety proofs. They propose that trust in complex components can be reduced to trust in simpler components, for example, by using proof checking to mitigate the risk of the automated theorem prover.