In this research paper, we explore the concept of coverage checking for dependently typed data that is formulated using higher-order abstract syntax. Unlike prior studies that focused on coverage checking for closed data, we concentrate on open data that may rely on a certain context. Our work offers potential insights into coverage checking in Twelf and serves as a foundational framework for coverage checking in functional languages such as Delphin and Beluga. Moreover, our work lays the groundwork for proofs through case analysis in systems that reason about higher-order abstract syntax.

The paper defines hereditary substitution recursively, taking into account both the structure of the term to which the substitution is applied and the type of the object being substituted. Due to space constraints, we refer readers to [3, appendix] for further details, and for readability, we omit the subscripts in the ensuing discussion.