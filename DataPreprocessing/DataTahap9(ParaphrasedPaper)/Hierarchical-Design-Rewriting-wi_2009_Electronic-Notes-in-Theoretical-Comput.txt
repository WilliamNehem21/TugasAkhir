In the context of Architectural Design Rewriting (ADR), an architectural style can be seen as an algebra in which the values (i.e., the architectures) are typically graph structures that represent components and their interconnections. These graphs are typed by an interface that expresses the external connection capabilities for composing larger architectures. The operators in this algebra are themselves graph structures with holes, referenced via variables. The application step involves replacing variables with values while respecting the connection capabilities and possibly simplifying the resulting graph structure to a normal form. ADR can utilize different types of graph structures, depending on the specific application domain. For instance, these graph structures may contain special nodes representing system parameters with values over a finite domain, special edges representing constraints on admissible assignments to certain groups of nodes, and a simplification phase that involves performing consistency checks, merging nodes, and solving adjacent constraints. Other examples include using relational structures over nodes as edges or using algebraic theories as nodes and theory morphisms as edges.

This paper introduces a variant of the ADR approach called Hierarchical Design Rewriting (HDR), which employs hierarchical graphs as the underlying algebra of designs. Unlike previous ADR work that only considered flat graphs, HDR allows for the insertion of nested graphs within the edges of the base graph model. This approach takes advantage of the presence of symbolic operators, whose application is modeled as an explicit substitution without a simplification phase, in addition to ordinary interpreted operators. This allows for the representation of partial architectural information and provides a visually clear representation of designs. The paper also proposes the role of derived operators as a disciplined and efficient method for handling partial architectural information.

The paper is structured as follows: Section 2 provides background information on ADR and discusses the issue of partial architectural information. Section 3 presents the implementation of the graph structures underlying HDR. Section 4 demonstrates how to write HDR specifications. Section 5 illustrates the analysis of HDR prototypes using ad-hoc and built-in mechanisms such as rewriting strategies or the LTL model checker. Section 6 provides concluding remarks and outlines potential future research directions on ADR. It is assumed that the reader has some familiarity with the Maude syntax.

The paper distinguishes between two types of edges in the type graph: terminals (t) and non-terminals (nt). Terminal edges represent basic, non-refinable, and concrete components of the architecture, while non-terminal edges represent complex, refinable, and abstract components. The concept of partial and concrete designs is discussed, where a design is considered partial if it contains non-terminal edges and concrete if it does not. Dealing with partial designs is particularly important in service-oriented applications, where the architecture of services is only instantiated when needed after discovery, selection, and binding.

The paper also discusses options for the level of abstraction in ADR modeling, distinguishing between the purely symbolic initial algebra associated with productions and the fully evaluated algebra of concrete designs. The construction proof is abandoned in the fully evaluated algebra, and the only additional information retained concerns the sort of the design, i.e., its interface.

An example scenario is presented to illustrate the design and analysis of software systems using the ADR approach, from the low level of graphs to the algebra of designs. The paper includes flashes of Maude code to demonstrate the implementation.

The operation of constructing graphs is described, sticking to the formal model and resulting in well-formed graphs. A mechanism for debugging purposes is explained, where bad-shaped graphs are a sign of possible bugs.

The main operation over hierarchical designs involves flattening the first non-terminal edge, i.e., substituting the non-terminal edge by the corresponding hierarchical design. This operation, called apply, implements the concept of type-consistent hyper-edge replacement.

The paper also addresses the issue of considering partial architectural information and presents methods for dealing with it. It discusses the introduction of specification mechanisms tailored to the symbolic level, such as modal operators as counterparts to operations of the algebra. Ad-hoc properties can also be defined directly for more efficient implementation.

Finally, the paper highlights the contributions of the prototypical implementation, demonstrating that ADR is not only a theoretical approach but also a tool-supported framework for the design and analysis of software architectures. It outlines a methodology for developing other ADR-suited algebras and scenarios, and validates the suitability of rewriting logic as a formalism for the development and analysis of software systems.

The paper also mentions previous use of Maude in software architecture approaches and how Maude has been used to model and verify software architectures in other contexts.