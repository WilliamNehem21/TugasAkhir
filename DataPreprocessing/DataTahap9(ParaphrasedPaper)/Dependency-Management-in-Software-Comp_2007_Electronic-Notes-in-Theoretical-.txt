The rising popularity of the component approach to system development is driven by the appealing attributes of components. It is envisioned that software will soon consist of extensive collections of components, and the reuse and sharing of components will become common practice. However, components are often created by different groups without clear specification of their dependencies. Consequently, the installation or removal of a component is often risky due to the difficulty in identifying all dependencies. Existing approaches may fail to successfully install a component, resulting in non-functional installed components, as well as unsafe installation or removal that can disrupt the system. In response to the shift towards component-based systems, the goal of this work is to develop a tool with formal foundations to guarantee the success and safety of deployment.

This paper is structured as follows. Section 2 introduces the concept of component deployment and uses the example of a mail server to illustrate deployment dependencies. Section 3 presents our description of dependency deployment, and Section 4 describes environmental constraints. Sections 5 and 6 provide a formalization of the installation and deinstallation of components and the management of their impact on the target system, respectively. Finally, related work is discussed in Section 7, and potential future work is outlined in Section 8.

For instance, a mail server may encompass several components, such as postfix, an MTA (Mail Transfer Agent), fetchmail, which retrieves mail using a mail transport protocol (e.g., POP) from a remote host, procmail, an MDA (Mail Delivery Agent) that manages incoming mails and allows mail filtering, and sylpheed, an MUA (Mail User Agent) for reading and composing mail.

Once a component is deemed installable, the next step is to assess the impact of its installation on the system. This assessment includes new available services, new restricted services, new forbidden components, and new dependencies (represented by a dependency graph). Before outlining the installation rules, we illustrate how this impact is calculated by defining two operations: calcf, which identifies forbidden services and components, and the calculation of the dependency graph.

The process of installation and deinstallation of a component involves verifying its compatibility with the target environment and managing its impact. For example, the installation of Postfix is verified to ensure that it provides the MTA service and contributes to the anti-virus service (sav), while also forbidding the use of the sendmail component (csm). The dependency graph represents the combination of various dependency graphs inferred from the installation of the component.

The removal of a component from the system involves eliminating the nodes associated with the component from the dependency graph. This set of nodes includes all services provided by the component and any optional services dependent on them. After the concrete removal of the component, the system context is updated by removing the component and its associated services and components from the system, as well as removing all relevant nodes from the dependency graph.

A significant amount of research focuses on describing and managing component-based systems. However, existing deployment tools and specifications do not adequately support the description of deployment dependencies. The constraints that can be expressed in these frameworks are limited to constraints on the target environment.