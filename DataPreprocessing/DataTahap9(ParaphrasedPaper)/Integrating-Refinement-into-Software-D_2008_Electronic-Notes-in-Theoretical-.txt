The automatic tool support for formal design through refinement transformations presents a significant challenge. In this paper, we draw attention to this challenge within the research community and propose a component-based model transformational approach for integrating refinement into software development tools. We define the models, their consistency, and correctness within an object-oriented and component-based development process using a refinement calculus known as rcos, developed at UNU-IIST. We formalize correctness-preserving transformations between models as refinement rules in rcos and discuss their potential implementation using the relations language of query/view/transformation.

Inspired by theoretical work in graph transformations and tailored to represent UML-like models, graph-transformation approaches offer visually intuitive notations with formal foundations. Examples of such approaches include Viatra, Atom3, Great, UMLX, and BOTL.

Several tools and development approaches leveraging these transformation languages have been employed to facilitate software development. Furthermore, there have been efforts to study the correctness and completeness of transformations in Viatra, indicating a direction towards introducing formal methods into model transformation languages to enhance software development.

The paper also discusses the process of designing a checkout system, in which a customer purchases items, and the cashier records the purchase items and handles payment. After completion, the sale is logged, and the inventory is updated, and the customer departs with the purchased items.

Detailed design activities are conducted on the component architecture to design each method in each component, followed by verification, testing, and checks using tools such as a model checker or a runtime checking tool (e.g., JML).

Transformations can be invoked to check two models for consistency (no side effect) or modify one model to enforce consistency, depending on the target domain, which may be marked as checkonly or enforce. The paper explains the semantics of checking and enforcement in detail.

The transformation from the object-oriented model to the component-based architecture involves handling the functionality of the use case using multiple components. The approach involves mapping classes into components, assigning methods to components, and detailing transformation rules.

Regarding tool support for correctness-preserving transformations, the paper proposes implementing transformations proved to be correct using rcos and implemented using QVT, followed by importing a source model, parameterizing the transformation based on design decisions, and executing the transformation.

The paper emphasizes the possibility of unidirectional or bidirectional transformations and highlights the need for design decisions in some transformations, providing a framework for interaction between the designer and the QVT tool.

The complexity of transformations may arise from tasks such as component decomposition and composition, posing challenges in the transformation process.

The authors propose implementing the OVT transformation for all the rcos refinement rules, particularly the expert pattern, and suggest that implementing a group of automatic transformations would enhance the utility of the work.

Finally, the paper acknowledges the contributions of Zhiming Liu and Volker Stolz from UNU-IIST and acknowledges support from the project HighQSoftD funded by the Macao Science and Technology Development Fund and the National Grand Fundamental Research 973 Program of China (no. 2002CB312001).