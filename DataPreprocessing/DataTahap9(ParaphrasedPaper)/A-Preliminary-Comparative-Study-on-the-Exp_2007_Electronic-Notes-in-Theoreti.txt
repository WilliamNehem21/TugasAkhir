Several studies on coordination models and languages have focused on software interoperability. These models and languages have evolved from data-oriented models and control-event-oriented models to a new model known as Reo, which is based on the combination of connectors constructed as a set of communicating channels. The expressive power of Linda and Reo models has been studied independently using different approaches. Brogi and Jacquet conducted a comprehensive study on the expressive power of Linda, while Arbab provided examples to demonstrate the expressive power of Reo. This paper aims to compare both models by examining their asynchronous and synchronous behaviors. Linda is based on communication primitives accessing a shared tuple space, while Reo is defined in terms of communication primitives acting on connectors constructed from different types of channels. To ensure a fair comparison, two process calculi will be defined for each formalism, and then compared.

The paper is organized as follows: Section 2 presents the interaction models, their semantics, the two process calculi, and the properties defining them. The comparative method and its application to compare both models is presented in Section 3. The paper concludes with some final remarks and considerations for future work.

Reo's ability to utilize various types of channels allows for the construction of different coordination models. For instance, the bag channel type has one input end, one output end, and an unbounded buffer that accepts and stores data items matching the channel's filter, akin to a multiset. This behavior enables the simulation of Linda's actions over the store, which will be proven in subsequent sections.

Additionally, a process algebra 'L' is introduced, containing the communication primitives of Linda, including the ability to add a tuple (out), remove a tuple (in), and test the presence of a tuple (rd) in the shared dataspace. 'L' also includes standard prefix, choice, and parallel composition operators. Similarly, a process algebra 'R' is proposed, based on the communication primitives of Reo, where agents are constructed through prefix, nondeterministic choice, and parallel composition.

In this section, the comparison of the languages 'L' and 'R' is carried out by formalizing the notion of modular embedding used for the comparison and by analyzing the expressiveness of both languages in both directions. This is done by defining compilers for each case and proving the existence of modular embedding between 'L' and 'R'. Subsequent sections delve into the asynchronous case and compare the expressive power of 'L' and 'R' in the presence of the connector 'LR'. The paper concludes with a discussion of useful results to prove the modularity of the embedding.