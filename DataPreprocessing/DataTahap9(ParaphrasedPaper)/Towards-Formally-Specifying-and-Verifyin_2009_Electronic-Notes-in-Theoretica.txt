In this academic paper, the authors discuss their ongoing work to formally define a correctness condition, called Weakest Reasonable Condition (WRC), for transactional memory (TM). Their objective is to enable fully formal and machine-checked proofs that TM implementations satisfy this condition. They also introduce another, more restrictive condition called prag, which represents common TM implementation techniques. The paper outlines their approach to proving that prag implements WRC through simulation proofs. The authors are developing models of these conditions in the PVS language to enable precise and mechanical verification of proofs. They also plan to demonstrate that popular TM implementations satisfy the prag condition, beginning with simple coarse-grained versions and progressively refining them to model realistic implementations.

The authors emphasize the importance of developing formal and machine-checked correctness proofs for TM implementations, aiming to provide unambiguous and precise definitions that support formal machine-checkable proofs. They also discuss the need for the correctness condition to be semantically useful, easy to understand and reason about, and as permissive as possible to avoid arbitrarily excluding implementation techniques.

The paper provides an overview of the concepts of I/O automata, proof techniques, TM interfaces, and notation used in the rest of the paper. It then introduces the WRC correctness condition and discusses its relation to previous conditions. The authors also present the prag condition and sketch a simulation proof that it implies the WRC condition. They briefly discuss their ongoing and future work, including efforts to prove that every execution allowed by prag is also allowed by opacity.

The paper describes a proof establishing a correspondence between initial states of WRC and prag, as well as the choice of WRC actions for given actions of prag. The authors also mention their work on refining the TL2-CG TM algorithm to successively more realistic implementations, with the aim of proving a realistic model of the TL2 implementation correct. They express the intention to make it easy to reuse parts of the proof for proving variants on the algorithm.

Additionally, the authors plan to eliminate the need to prove backward simulations, which are particularly challenging, by identifying one or more general intermediate automata that can be proven to implement prag using backward simulation proofs. This would allow them, and others, to prove the correctness of a TM implementation using only forward simulation.