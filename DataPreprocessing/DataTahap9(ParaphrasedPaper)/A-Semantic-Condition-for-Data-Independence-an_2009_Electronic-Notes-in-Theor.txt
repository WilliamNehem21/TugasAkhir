In hardware designs, particularly in the context of automatic datapath abstraction tools, it is noted that models may not meet a syntactic definition of data independence, despite the application of conclusions based on data independence. For instance, resources in a design may be used alternately for temporarily storing control information and data, and data may also undergo internal transformations such as shifting, reversing, or splitting. However, it is emphasized that the conclusions drawn from data independence still hold true even in such cases.

Automatic datapath abstraction tools are discussed, which involve mapping VHDL or Verilog RTL implementation models to abstract models in another language for input to a verification tool. Although these tools address the need for users to analyze designs, they are tailored to specific languages and may not identify data independence in cases where resources are utilized for control information and data interchangeably.

Therefore, the paper proposes the establishment of data independence through consideration of the interface behavior of a model. While a semantic definition exists, it is not intended for practical checking as it is expressed in terms of all possible mappings from one set of data values to another. The paper presents a general framework for semantic definitions of data independence formulated in terms of the operational semantics of the program, which can be practically applied to check for data independence in industrial applications.

The paper goes on to establish the sufficiency of certain semantic conditions for data independence, expressed in terms of inputs and outputs of a hardware model, with practical relevance for industrial applications. These conditions assert that any data value observed at the outputs must have been observed at the inputs, and that if two copies of the design with the same control inputs exhibit differing data outputs at any point, there must have been a corresponding difference in the data inputs.

Furthermore, the conditions for data to be captured at an input port or released at an output port are elucidated, incorporating the values and possibly the histories of control signals, with data input and output signals at the ports. The paper also establishes that the possible values of the data output at any time are not affected by input data values at later times.

Importantly, the paper emphasizes the avoidance of modeling code for portability and proposes the use of the results from the preceding sections to establish correspondence between entry and exit events for the system. This involves verifying that a value read from a register and subsequently reaching the data outputs must have arrived at the register from the data inputs. It is stressed that the semantic conditions are robust enough to imply data independence and justify checking properties solely for small finite data domains.

The paper notes that although syntactic checks of data independence are simple and can be performed in one pass of the program text, the complexity of semantic condition checks can be greater, and they can be expressed as PSL formulae evaluated by checking CTL formulae. Despite this complexity, it is observed that checks of the semantic conditions can often be conducted quickly in practice. Additionally, it is suggested that if a model is data independent according to the syntactic definition, model checking is likely to be much more efficient than in the theoretical worst case.