The Maude system is a high-performance system based on rewriting logic with various advanced features. Presently, interaction with Maude is primarily through a command line interpreter, and users who wish to link Maude with other tools or provide alternative display mechanisms typically resort to ad hoc methods such as using Perl scripts or TCL/TK. 

For the initial case study, an ad hoc syntax for messages to the rover graphical object was defined, and the reactions were hardwired in Java code for the behavior of the rover graphical object. Future work includes defining a more general syntax for describing active graphical objects and developing module transformations that automatically add instrumentation for animating object system behavior.

Communication between actors is in ASCII text and is implemented in two layers: the transport layer and the user layer. The transport layer consists of a message that consists of a line of text representing a number followed by the specified number of bytes. The user layer consists of the address of the target actor, the address of the sending actor, and the body of the message, each on a new line. 

The graphics actor is a step towards realizing a graphics algebra with mappings between algebraic data types specified in Maude and related graphical objects. Graphical objects, such as graphs, menus, text, grids, containers, and sprites, are interactive and can be used to interact with related Maude data structures. 

The loop-mode system is used to support building user interfaces by providing a basic read-eval-print loop. A module that includes loop-mode consists of a form [inq,s,outq] where inq and outq are lists of quoted identifiers and s is the system state. 

The operation qid converts a string to a quoted identifier. A rule in the pathway logic assistant module is used to display a graph.

The IOP/IMaude work involves moving from a declarative functional language to an interactive system while retaining a clean semantics and interoperation of tools. 

The Toolbus is a software coordination architecture that utilizes a scripting language based on process algebra to describe communication between software tools. 

IOP provides the ability to program coordination scripts as desired.

We have described IOP, a communications infrastructure that manages a dynamic collection of actors, including basic communications actors, a graphics actor, and actors obtained by adapting existing tools to the communication infrastructure. IOP is being heavily used in the Pathway Logic project and in current and pending Maude projects.