Unfortunately, current graph grammar systems (lggs) are not equipped to effectively define a visual language in general due to the absence of negative application conditions (nacs) and additional conditions for rules. As a result, a new type of graph grammar called contextual layered graph grammars (clggs) has been developed to address these limitations. The clggs support vertex embedding, nacs, and complex predicates, and also include layering conditions to ensure the termination of the parsing process. Furthermore, static analysis techniques such as critical pair analysis are available for identifying a maximum set of rules that can be parsed without backtracking.

Complex cases may pose challenges when using lggs. The clggs are linked to reserved graph grammars (rggs), which are another modified form of lggs. While rggs offer some embedding mechanisms, they do not support the definition of predicates and nacs. Their rules need to be locally confluent to work with the polynomial naive lgg parsing algorithm.

The genged environment implements concepts for visually specifying visual languages (vls), with a vl-specification comprising a visual alphabet and a visual grammar. The visual alphabet defines the types of symbols and links in a vl, while the visual grammar consists of a start expression and a set of context-sensitive grammar rules. These grammar rules not only define language-generating rules but also a convenient set of editing rules. The concepts of vl-specifications can be extended by specifying parsing.

Genged is based on algebraic graph transformation and graphical constraint solving, with a visual alphabet represented by an attributed graph structure signature and a constraint satisfaction problem, and a visual grammar represented by an attributed graph structure grammar. The environment comprises an alphabet editor and a grammar editor, ensuring that only correct visual expressions can be defined by a language designer.

The parsing algorithm proposed in the paper, based on contextual layered graph grammars and critical pair analysis, is implemented using the agg system, resulting in an agg graph parser. This parser is integrated into genged, allowing for syntax-directed editing and free editing in specific graphical editors generated by genged.

The parse rules in genged consist of a left-hand side and a right-hand side over typed graphs, with rules specifying fractions of matching situations that must not exist for a rule to be applicable. Layering conditions are assigned to rules, vertex types, and edge types to ensure termination of the parsing algorithm.

For a simplified example of UML class diagrams, the critical pairs are generated automatically, while the language designer has to define the remaining components. The parse rules express the deletion of visual symbols, ensuring that for each lexical symbol of the visual alphabet, there is one parse rule.

In conclusion, the paper presents a comprehensive approach for defining visual languages, with a focus on the integration of parsing into graphical editing environments.