In practice, a considerable amount of computing power is wasted as machines often remain idle. When using tools such as the task manager in Windows or utilities like top and xload in Linux to monitor CPU usage, it is evident that the typical CPU utilization is only around 1 to 2 percent. This underutilization becomes even more pronounced when multiple computers are involved. In a department with 300 computers, the idle CPU rate is quite significant. Despite this, there is still a need for powerful servers for tasks like compilation and simulation. In some cases, this issue is exacerbated as the number of users increases, and servers with multiple CPUs are unable to handle the load due to users' reluctance to switch to another free server. Effectively harnessing existing computational resources and adapting the load on servers intelligently would be highly beneficial.

In recent years, grid technology that encompasses heterogeneous resources has become a focal point of research in the industry. This technology provides new theoretical and technical support for constructing heterogeneous clusters. Simply connecting computers with varying CPU, memory, disk, and network parameters on an intranet does not form a cluster. Instead, these resources must be logically clustered and allocated computing tasks accordingly. To achieve efficient clustering, we have proposed the study and implementation of a fuzzy-based cluster model, which holds practical significance in integrating existing idle computing resources into a computing device.

The efficiency of a cluster is fundamentally determined by the parallel and serial nature of computing tasks. The computing essence of each node lies in its operational efficiency. Therefore, when applying fuzzy clustering, assigning significant weights to one or several key attributes corresponding to a task is crucial. By doing so, the impact of these attributes can be emphasized, leading to the formation of clusters based on task characteristics and adaptability.

Based on the classification results, it is evident that as the weight of the CPU decreases, the degree of concern regarding the CPU also diminishes. For instance, in the first category, when the CPU's weight is 0.8, only computers 1 and 4 are included, but when it decreases to 0.4, computers 2, 3, 7, 8, and 9 are also added. This highlights that even with variations in CPU attributes, the similarity is quite prominent when considering other factors. Additionally, by adjusting the weights, the desired properties can be better controlled.

Observing the results of clustering with increasing thresholds reveals that the number of clusters and self-groups also increases. This signifies that the distinct characteristics of each computer within the cluster become more pronounced, leading to a higher internal similarity of each cluster and a smaller granularity, resulting in closely-related clusters. With larger thresholds, small clusters that form cannot be separated when clustering with smaller thresholds. The experimental results validate the theoretical findings.