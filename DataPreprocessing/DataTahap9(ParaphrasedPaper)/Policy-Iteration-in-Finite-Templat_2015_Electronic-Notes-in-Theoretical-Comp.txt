In this research paper, we demonstrate that policy iteration can be universally defined within a finite domain of templates using Lagrange duality, without making any assumptions about the templates. The policy iteration algorithm always converges to a fixed point under a simple technical condition. This fixed point provides a safe over-approximation of the reachable values of a program's variables. Furthermore, the paper discusses the selection of well-suited templates and establishes a connection between these templates and invariant algebraic relations. When the templates are appropriately chosen, the policy iteration algorithm developed in this paper can be easily initiated for single-loop programs.

In prior work, we introduced a complete lattice comprising sub-level sets of non-convex functions, which serves as an abstract domain for computing numerical program invariants using abstract interpretation. This abstract domain is parameterized by a basis of functions, similar to the approach proposed by Manna, Sankaranarayanan, and Sipma (the linear template abstract domain), with the distinction that the basis functions or templates we used need not be linear. We also developed a policy iteration scheme using Shor relaxation and semi-definite programming in the case of affine arithmetics and quadratic constraints. However, we only proved that this policy iteration scheme converged to a fixed point of the relaxed semantics. Furthermore, in the examples provided in the prior work, the quadratic templates were supplied by the user or, more specifically, an automatician. These quadratic templates included a Lyapunov function of the affine systems induced by the affine arithmetic programs, and the use of Lyapunov functions as quadratic templates was fully automated by Roux et al.

In this paper, we present a policy iteration algorithm in a finite templates domain using Lagrange duality without restrictions on the arithmetic of the program or the algebraic structure of templates. We also prove that such a policy iteration algorithm converges to a fixed point of the relaxed semantics functional. The paper also addresses the generation of suitable templates in the context of one-loop programs and establishes a link between the notion of good templates and Lyapunov functions. Good templates can be conceived as invariant algebraic relations that aid in demonstrating the correctness of programs. We demonstrate that a judicious choice of templates facilitates a natural initial policy.

The paper is organized as follows: Section 2 provides a recap of the abstract domain based on non-linear templates and abstract semantics functional. Section 3 details the general construction of the relaxed semantics function using Lagrange duality. Section 4 revisits both Kleene iteration and policy iteration in a templates domain and offers convergence proofs. Section 5 discusses the concept of good templates and how policy iteration can be easily initiated in the case of one-loop programs. Section 6 provides applications, and finally, Section 7 concludes.

We quickly review the concept of Lagrange duality and then construct the relaxed semantics on the assignments, tests, and joins. Subsequently, we present the properties of the relaxed semantics that will be used to prove the convergence of the policy iteration algorithm to a fixed point of the relaxed semantics.

During the fixed-point iteration (as in Section 4), the functions vl1 and vl2 are not necessarily p-convex. Additionally, if we take the abstract semantics f(v), we do not have an infimum of linear forms (or at least a maximum of linear forms) on the abstract values vl1 and vl2, a formulation that we require. Finally, we relaxed the abstract semantics f(v) by the supremum itself.

Kleene iteration has the downside that the values vk obtained at a given iteration k (before convergence) do not provide a safe invariant. We demonstrate that policy iteration does not have this drawback; even if it is stopped at an intermediate step, it provides a safe invariant. Furthermore, the convergence of Kleene iteration can be very slow, necessitating coupling with an acceleration technique that provides over-approximations. We round bounds outwards with decreasing precision after a given number of iterations, and during a few iterations, similar to the widening technique used in prior work.

We have proven in prior work that policy iteration on quadratic templates converges to a fixed point of our relaxed functional (as theorem 4.2 here). Importantly, this result holds independently of the restriction on quadratic templates. Combined with theorem 3.1, this fixed point is also a fixed point of abstract semantics.

The choice of the initial policies is crucial for the quality of the fixed point found by policy iteration. For instance, if we know that the values of the variables are bounded, an unbounded first invariant can be a fixed point, and policy iteration stops. The choice depends on the template design algorithm.

We define a policy iteration algorithm in a general setting using a finite domain of templates and prove that the algorithm converges to a fixed point of the relaxed semantics. This result allows us to use characterization tools to verify whether the solution found is the smallest one. We also define the problem of computing good templates and prove that the initialization of policy iteration is enabled by the choice of invariant relations. Future work should include an automatic method to compute the invariant algebraic relations and an automatic way to initialize policy iteration based on the generated relations.