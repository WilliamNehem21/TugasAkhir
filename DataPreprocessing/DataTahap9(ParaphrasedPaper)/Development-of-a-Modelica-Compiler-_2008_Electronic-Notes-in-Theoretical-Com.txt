As an initial step toward creating a flexible modeling environment based on Modelica, a new extensible compiler called jmodelica is being developed using the compiler construction tool jastadd. This tool utilizes declarative features such as reference attribute grammars and rewriting to enable the construction of extensible compilers. In this paper, we present our experiences in building a prototype of the jmodelica compiler and demonstrate how complex compilation problems in Modelica can be addressed in a modular, understandable, and concise manner using jastadd. We also discuss name and type analysis, focusing on the advanced context-dependent rules in Modelica.

The paper is organized as follows: Section 2 provides an overview of the compiler tool jastadd, while Section 3 gives an introduction to the Modelica language. Section 4 describes how key features in the Modelica language have been implemented using jastadd, and Section 5 compares the performance of the jmodelica compiler with two other Modelica tools. Finally, Section 6 presents conclusions and future directions.

The current state-of-the-art hand-coded compilers do not support the fine-grained extensibility required for emerging methods. However, jastadd, which is implemented in Java and generates Java code, fills this gap by offering fine-grained extensibility and is available under an open-source license.

The core of a language implementation in jastadd is specified by an abstract grammar, which is used to generate a Java class hierarchy, including constructors and traversal APIs. Furthermore, behavior of the abstract syntax tree classes is added using aspect modules that support intertype declarations. While most of the compilation is defined using declarative attributes, imperative code can also be used to generate output based on the attributed abstract syntax tree.

We also discuss various aspects of the Modelica language, such as the concept of types and instantaneous events expressed through the when-clause. In addition, we compare the jmodelica compiler to existing Modelica tools such as Dymola and OpenModelica.

Throughout the paper, we highlight how jastadd plays a crucial role in the development of the jmodelica compiler, enabling rapid implementation of complex semantic rules in a modular and easily understandable manner. The use of a declarative approach has also proven valuable for extending the compiler's capabilities in a modular fashion. Our experiences indicate that jastadd is well-suited for the rapid development of compilers.