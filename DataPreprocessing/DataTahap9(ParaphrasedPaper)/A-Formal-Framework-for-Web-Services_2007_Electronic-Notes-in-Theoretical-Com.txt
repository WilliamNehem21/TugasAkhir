We use the term "long running transactions" to refer to nonacid transactions. In this context, error handling relies on the concept of compensation. Many existing choreography languages utilize long running transactions and compensations as a way to describe loosely-coupled activities. Compensations involve application-specific activities aimed at reversing the effects of a previous activity that is part of a larger unit of work being abandoned. Unlike acid transactions in databases, where the transaction coordinator and controlled resource know all uncommitted updates and have full control over the reversal order, in business transactions, the compensation behavior is part of the business logic and needs to be explicitly specified.

The challenge of choreographing web services is addressed by three recently proposed standards: Business Process Execution Language for Web Services (BPEL4WS or BPEL), WS-Coordination (WS-C), and WS-Transaction (WS-T). BPEL is a language for defining workflows that can orchestrate web services, while WS-Coordination and WS-Transaction complement BPEL by providing mechanisms for defining standard protocols to be used by systems processing transactions, workflow systems, and other applications that need to coordinate multiple web services. Together, these specifications address business workflow issues related to connecting and executing web services running on different platforms across business organizations.

Additionally, we note that it is possible to dynamically define the events that an event scope is interested in. For example, consider the process x(t).[p, q]t where the event scope name t is obtained as input on the channel x.

In this section, we present an e-commerce scenario to demonstrate the potential of event calculus in describing long running transactions and business activities. Long running transactions can involve other transactions, so a coordinator is typically required to manage the state of the long running transaction and activate compensations when inner transactions fail. Specifically, we consider the example of a customer application where events such as "ba, abort" and "notok" are used to denoted actions that should be taken when certain activities fail or are successful.

Moreover, we propose two extensions to the event calculus. The first extension facilitates the specification of complex coordination scenarios, such as e-commerce applications, and the second extension introduces new behaviors that can be useful in business scenarios. Furthermore, we consider the foundational framework of our language to be capable of dealing with all aspects of web services coordination, extending beyond just e-commerce applications.

Finally, we address the need for timed transactions in business scenarios, as some researchers believe that incorporating a notion of time in long running transactions can be beneficial both at the model and implementation levels.