We present an initial proposal for a language for strategies in the Maude system, aiming to control the rewriting process at the object level rather than at the metalevel. Additionally, we introduce a prototype implementation built on top of full Maude, leveraging the metalevel and metalanguage features provided by Maude. Furthermore, we provide several examples to illustrate the key features of the proposed language.

The need for strategies to control the rewriting process in the Maude system has traditionally been addressed by developing strategies at the metalevel. Using the reflective properties of rewriting logic, the metalevel module in Maude offers basic operations (referred to as descent functions) that reflect the processes of rule application and rewriting at the metalevel. By utilizing these operations as fundamental building blocks, a wide range of internal strategy languages can be defined at the metalevel within the rewriting logic framework instead of as an additional extralogical feature. However, for users unfamiliar with the metalevel, there are conceptual and notational challenges associated with this approach.

In contrast to the approach taken in Elan, our proposed language is based on a clear separation between the rewrite rules and the strategy expressions, which are provided in separate modules. As a result of this separation, it is not possible in our proposal to use strategy expressions in the rewrite rules of a system module. This separation facilitates the definition of different strategy modules to control the rewrites of a single system module in different ways.

A strategy expression of the form l[s]{b1... bn} represents a basic strategy that applies the rule l with variables instantiated using the substitution s and employs b1,..., bn as search expressions to verify the rewrites in the condition of l. The number of rewrites appearing in the condition must be n for the expression to be meaningful.

Recursion is achieved by assigning a name to a strategy expression and using this name within the strategy expression itself or in other related strategies. Concrete examples of this will be provided in Section 5.

The proposed strategy language emphasizes a strict separation between strategies and rules, allowing for the definition of strategy modules that associate specific strategies with system modules. Notably, at the object level in a system module, there are no strategy expressions, and different strategy modules can be associated with the same system module.

Overall, while we have presented a preliminary proposal and accompanying examples for a strategy language for Maude, leveraging prototype implementation built using metalevel and metalanguage facilities, there remains additional work to be done. This includes extending the prototype to incorporate missing capabilities like breadth-first search and depth bounds, as well as developing further examples to validate the proposal. Furthermore, potential enhancements to the strategy language, such as introducing new combinators and strategy identifiers with parameters, are being considered for future improvements.