The informal design notations, such as ball-and-stick type diagrams, are easy to understand but have limited utility for mathematical analysis of designs. To specify and verify properties of designed systems, formal design notations are required. Additionally, formal models of distributed systems can be simulated, and implementation code can be generated from these models. Middleware-based systems are particularly suitable for pre-implementation modeling due to their highly concurrent nature, which can lead to subtle bugs that may not be captured by informal analysis.

Middleware-based systems are characterized by their highly communication-intensive nature and support for a wide variety of application synchronization mechanisms. Classical architecture description languages (ADLs) typically support only basic forms of interaction and thus cannot naturally express the rich communication disciplines of middleware. In contrast, architectural interaction diagrams (AIDs) provide a parameterized mechanism that supports a wide variety of interprocess communication and synchronization primitives as language-supported constructs. This approach leads to cleaner models and smaller state spaces, as each communication is represented as a single transition. AIDs also eliminate the need for designers to simulate different communication mechanisms manually, which is necessary when using traditional ADLs.

The paper illustrates the utility of AIDs formalism through a study of the event heap coordination framework used in the i-room, an experimental ubiquitous computing environment at Stanford University. The study demonstrates how the AIDs approach is more efficient than conventional modeling techniques and extends the work by introducing a remote procedure call transition into the language syntax. By studying the event heap, the paper argues for the application of the formalism to modeling different types of middleware systems.

A distributed system can be viewed as a collection of multiple agents or processes continuously interacting with each other. To create a formal model of distributed systems, it is necessary to define a base formalism for representing agents, a notion of concurrency, a semantics for inter-agent communication, and a concept of hierarchy.

The paper aims to provide a general mechanism for users to define their own communication systems, which can be seamlessly integrated into the native semantics of the language. Buses are used to achieve this goal.

The i-room OS provides applications with facilities for sharing data and control, and the event heap component of the i-room enables the sharing and coordination of data between applications. The event heap facilitates anonymous communication and discourages strong dependency coupling among applications, leading to better interoperability and fault tolerance.

The paper focuses on defining the event heap as a bus within the AIDs framework, with the goal of using it as a primitive to model and simulate different applications within the event heap framework.

To define the event heap bus, the paper outlines three obligations: providing a set of ports for the event heap, defining the data structure for the bus, and providing bus rules.

The paper presents a simplified example of event heap clients using the event heap bus, illustrating how clients can use remote procedure call transitions to retrieve specific events.

The study makes a case for using AIDs for modeling middleware-based systems and suggests future work to incorporate AIDs into the concurrency workbench framework, provide support for typed communication, and explore the application of AIDs to more complex enterprise middleware systems.

Overall, the paper emphasizes the need for formal design notations for specifying and verifying the properties of distributed systems and demonstrates the potential of AIDs for modeling middleware-based systems.