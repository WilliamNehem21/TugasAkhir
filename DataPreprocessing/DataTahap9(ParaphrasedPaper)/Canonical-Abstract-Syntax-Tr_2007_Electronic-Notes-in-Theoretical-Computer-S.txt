This paper introduces Gom, a language designed for defining abstract syntax trees and generating corresponding Java implementations. Gom features capabilities for specifying and modifying the interface of the data structure, enabling the maintenance of the internal representation of data in a canonical form with respect to a rewrite system. This ensures that the client program only manipulates normal forms for the specified rewrite system, a feature that is often implicit in many implementations.

One of the distinctive features of this system is its independence from specific data structures. This necessitates the definition of a mapping to connect algebraic data structures, which are the focus of pattern matching, with low-level data structures that correspond to the implementation. When given an algebraic data structure definition, efficient support for this definition must be implemented in the target language of the Gom system, as languages like Java or C do not inherently provide such data structures.

Additionally, Gom provides a mechanism for describing normalization functions for the operators and ensures that all terms manipulated by the user of the data structure are normal with respect to those rules. Furthermore, the generated data structure implementation supports the visitor combinator pattern, as required by the strategy language of Gom.

The paper also discusses the integration of Gom with the TOM language, which enhances existing imperative languages with pattern matching primitives. This integration with TOM is particularly advantageous for defining various transformations of structured entities such as trees/terms, hierarchized objects, and XML documents.

The paper then presents a real-world example of a program written using Gom and TOM, specifically an implementation of a prover for the calculus of structure. This demonstrates how rules can be promoted to the level of data structure invariants, leading to a simpler and more efficient implementation of the calculus rules.

In summary, the paper introduces the Gom language for describing algebraic signatures and normalization systems and highlights its integration with the TOM language. This integration enables the formal integration of algebraic developments into mainstream languages, offering benefits such as formally proving implemented algorithms with high-level proofs using rewriting techniques, while obtaining a Java implementation as the result.