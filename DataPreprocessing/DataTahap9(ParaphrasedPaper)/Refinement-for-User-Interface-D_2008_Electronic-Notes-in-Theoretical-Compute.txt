Our incentive for investigating UI refinement is to ensure that the implemented UI aligns with our intended design, thereby providing the same level of correctness assurances as the rest of the system. To achieve this, we require a structured and formal process for transforming our designs into implemented user interfaces.

This approach to UI refinement reflects an incremental method of system implementation known as stepwise refinement. Unlike the traditional approach of starting from a single system specification that formalizes UI behavior as a part of the system, our method extends conventional UI design techniques in a non-traditional, formal manner.

This paper is divided into two parts. Firstly, we examine traditional concepts of refinement and their potential application to UI designs, using this as the basis for informally describing UI refinement and providing examples of its application. Secondly, we explore how different refinement methods, categorized by common underlying principles, may be applied to the concept of UI refinement.

When we discuss substitution, we typically consider observable system behaviors such as input/output traces or interaction with other system components, without regard to visual appearance or cognitive awareness. However, for UIs, visual and cognitive differences are significant, as users can discern visual variations when one UI is substituted for another. Therefore, we consider the principle of treating programs as contracts, rather than mere substitutivity, in the context of UI refinement.

Through a refinement process, our UI descriptions become more specific and less abstract as we incorporate more detailed information about data storage, operations, and appearance. These precise decisions must be made in a manner that avoids inconsistency and preserves previous correct interactions, ensuring that the new version is a specialization of the previous, more abstract one.

Additionally, we consider the dynamic behavior between different UI states through a Presentation Interaction Model (PIM), which represents the active states and available behaviors of the UI. To maintain our contract with the customer, a new UI must provide at least the same functionality as the previous one, and any new functionality must be consistent with the old UI.

Certain aspects of UI refinement, such as visual appearance and style, cannot be directly checked using formal models but are nonetheless important for usability. While formal models primarily address the behavioral and dynamic aspects of UIs, there are limitations to their ability to evaluate certain aesthetic considerations.

We acknowledge that usability issues may be affected by aesthetic decisions and, while we recognize their importance, these considerations are outside the scope of our work. Therefore, we advocate for the use of our methods in conjunction with traditional design approaches, including usability testing, to ensure that usability is not compromised.

The above paraphrasing captures the main points of the academic paper, albeit in a more condensed and rephrased manner. If there are specific sections or concepts that you would like me to further elaborate on or paraphrase differently, please let me know.