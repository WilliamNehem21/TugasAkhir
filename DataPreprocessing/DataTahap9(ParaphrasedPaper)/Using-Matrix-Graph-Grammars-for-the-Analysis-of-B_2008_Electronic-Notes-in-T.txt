This paper introduces a novel method for analyzing rule-based specifications of system dynamics. The proposed approach uses simple digraphs to model system states, which can be represented using boolean matrices. Additionally, rules that model different state changes of the system can also be represented using boolean matrices, allowing for the expression of rewriting using boolean operations exclusively.

The paper also discusses the benefits of using graph grammars for expressing transformations of various types of graphs. These grammars offer visual, formal, and declarative means of expressing transformations and provide analysis techniques for studying rule independence, confluence, and termination. The formalizations are mainly based on category theory and include single and double pushout (spo and dpo).

In order to operate on graphs of different sizes, an operation called completion is introduced, which adds extra rows and columns with zeros to matrices and vectors and rearranges rows and columns to match the identified edges and nodes of the two graphs. The completion process must preserve identifications between elements in different productions.

The paper also addresses implications of identifying both operators and machines, and discusses the extension of the problem to consider any finite number of derivations. The objective is to determine the circumstances under which the final states are isomorphic depending on the permutation applied and the definition of the grammar.

The paper presents strategies for calculating m0 in proposition 6.1 using complementary approaches, and discusses the use of composition, particularly in transforming concatenations of length greater than one into a single production using composition.

There are also discussions on identifying elements for composition, similarities with the concurrency theorem, and non-injective matches in the dpo approach. The authors compare their work with other similar approaches to matrix graph grammars and highlight that their goal is to develop a theory for graph rewriting based on boolean matrix algebra. Additionally, they note the differences in approach and utilize mathematica to implement the dpo approach.