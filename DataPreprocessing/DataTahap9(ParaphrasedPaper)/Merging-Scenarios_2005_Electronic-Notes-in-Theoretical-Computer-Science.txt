Bounded Message Sequence Charts (bmscs) by themselves lack the necessary expressive power, as they are only capable of defining finite behaviors without real alternatives, except for possible interleavings. Consequently, higher-level constructs called hmscs have been introduced to extend the capabilities of mscs. Essentially, hmscs are a type of transition systems labeled by bmscs.

In hmscs, it is generally understood that the first instance able to make a choice selects a behavior, and subsequent instances encountering the same choice must adhere to the chosen scenario. As a result, the msc semantics assumes an implicit agreement between instances, where one instance makes a decision and communicates it to all others.

The local choice property in hmscs can be verified by considering only maximal acyclic paths, making it decidable for finite hmscs. Furthermore, a consensus algorithm can be automatically incorporated to convert a non-local hmsc into a local one, as detailed in Section 5.

A method based on the partially synchronized product of hmscs, inspired by the fibered product of asynchronous transition systems, is proposed as a solution. This involves synchronizing transitions of two support automata and computing the amalgamated sums of the corresponding bmscs to generate new bmscs. The formal definition of the fibered product of hmscs is built on a notion of morphism and bears resemblance to the amalgamated sum of Section 3.

The partially synchronized product, originally introduced by Arnold, is parameterized by a set of synchronization vectors, which determine which pairs of transitions must be synchronized. In this context, pairs of transitions are utilized for this purpose.

To illustrate the application of the hmsc product, a concrete example is provided. Some hmscs may contain non-local choices, which can introduce errors during implementation. The proposed approach integrates a consensus protocol described with hmscs into a non-local system description, effectively automating the integration of a consensus protocol for an arbitrary number of instances participating in a non-local choice.

Notably, the transformation described raises two important issues: the creation of an election protocol for an arbitrary number of instances and the insertion of protocols after choice nodes. To address these, a supervisor with a first arrived, first served policy is added to ensure the locality of choices, and communication messages are used to automate the creation of scenarios involving numerous instances.

Furthermore, a formal notion of merge for bmscs and hmscs is introduced in this paper, based on the notions of synchronous product for transition systems and amalgamated sum, and applied to a concrete example. This allows for inductive definition of merging and composition schemes for an arbitrary number of instances, providing a rough notion of coherence and enabling the creation of libraries of formally defined patterns for reuse after instantiation of a limited number of parameters.

Overall, the composition method outlined in this paper offers the advantage of allowing the automatic creation of concrete scenarios involving numerous instances, which can be useful for deployment, testing, and simulation purposes.