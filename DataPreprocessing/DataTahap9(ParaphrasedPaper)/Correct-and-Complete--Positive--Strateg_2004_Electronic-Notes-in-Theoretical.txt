Strategy annotations are employed in various rewriting-based programming languages to impose constraints on replacements, with the goal of enhancing efficiency and mitigating the risk of nontermination. However, these restrictions can potentially hinder the ability to compute normal forms. In this study, we initially establish the conditions that ensure correctness and completeness in the context of normalization computations with strategy annotations. Subsequently, we introduce a methodology for program transformation that facilitates correct and complete evaluations, which can be applied to obj-like languages.

One specific example involves the explicit strategy annotation for the list constructor 'cons', which disables replacements on the second argument. This approach guarantees termination of computations involving this program, as illustrated in example 4.4.

The issue of termination of rewriting under strategy annotations has been investigated in previous studies [5, 13, 14]. Regrettably, the use of rewriting restrictions may lead to incompleteness, wherein normal forms of input expressions may become unreachable through restricted computation. To address this, we provide a clarification of our understanding of correct and complete computations with positive strategy annotations. We argue that the absence of a widely accepted standard terminology has resulted in misleading definitions, potentially causing misinterpretation of the concepts of correctness and completeness. This is exemplified by the disparate definitions used for these notions in existing literature [18, 19, 21].