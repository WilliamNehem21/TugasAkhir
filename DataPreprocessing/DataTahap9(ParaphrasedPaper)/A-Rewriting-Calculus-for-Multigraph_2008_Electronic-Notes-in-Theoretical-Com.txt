Graphs are widely used to represent complex structures such as communication networks, neural networks, UML diagrams, microprocessor designs, XML documents, and biological systems. The dynamic evolution of these complex structures can be effectively modeled using graph transformation, which provides a rule-based approach. Various formalizations of graph transformation and graph rewriting have been proposed in the literature. For instance, the transformation rule consists of two graphs, referred to as the left-hand side (L) and the right-hand side (R), and includes a correspondence between elements of the L and R graphs. The issue of noninjective matching and handling dangling edges in the host graph at the stage of establishing connections between new and old nodes are important considerations in graph transformation. These challenges are referred to as the identification problem and the dangling problem, respectively. To address these issues, it is essential to develop a framework that appropriately handles unmatched nodes, unmatched edges, and bridges in the host graph. Additionally, in the context of multigraph rewriting, it is necessary to consider the context of the multigraph in which the replacement is performed. This involves enriching the rewrite rules with extension variables to store and apply rewrite steps in subterms. Moreover, an extended rule associated with the matching problem is solved using an acu-matching algorithm, and a strategy is employed to reduce a term to its normal form with respect to the cleaning and restructuring rules.