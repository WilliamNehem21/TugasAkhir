Formal verification techniques are widely used in the design, development, and validation of reactive systems, such as digital hardware and hardware-software embedded systems. These techniques employ precise syntax and semantics to define specifications and models of systems, enabling rigorous verification of properties like correctness, reliability, and security. Model checking, an automatic formal verification technique, is used to check if a model satisfies a given property by analyzing the state space of the model. Model checking has gained popularity for automated verification due to state space reduction techniques and approaches using SAT solvers for bounded model checking. However, the detection of a property failing over a model raises concerns, as it necessitates manual debugging prior to another cycle of model checking. Therefore, automated debugging approaches are essential in the community.

Automatic debugging of certain errors is extremely challenging, if not impossible, while approaches for debugging other types of errors have been recently developed. This paper focuses primarily on the third type of errors, which are introduced due to weak satisfaction causing forced transitions in the model internal in the composite process. The adaptation algorithm addresses this issue by restricting forced transitions to avoid critical failure of the property.

Extraction of a model and a specification from SMV language files is performed using an algorithm incorporated into the popular NuSMV model checker, written in the C programming language. The extraction algorithm conducts a breadth-first search and writes the details of each state traversed, such as labeling and transitions, to an output text file for use in the forced simulation algorithm.

The paper presents various examples where models were debugged to satisfy fairness constraints or prioritize certain sub-processes, demonstrating how a general model can be debugged to meet specific specifications. Although existing formal methods can detect inconsistencies between a given model and specification, manual debugging is often required, which may be time-consuming. Therefore, the paper proposes a formal technique for automated model debugging, which can determine whether a model can be automatically adapted to satisfy a failed specification based on a weaker simulation relation called forced simulation. If the model is forced similar to the specification, the proposed debugging algorithm automatically generates a modifier to adapt the model to satisfy the specification.