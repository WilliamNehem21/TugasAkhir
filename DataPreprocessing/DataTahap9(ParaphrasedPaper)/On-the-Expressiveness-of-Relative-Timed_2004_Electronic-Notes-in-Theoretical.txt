Despite being elegant and straightforward, coordination models based on the Linda style lack the ability to represent time accurately, making them unsuitable for modeling real-life coordination applications. However, industrial proposals such as TSpaces and JavaSpaces, which are inspired by Linda, have integrated time constructs into their models. This paper aims to systematically investigate the incorporation of relative time in coordination models, building on previous work to explore the expressiveness of Linda, Linda extended with a delay mechanism, and Linda primitives extended to include tuple duration and suspension of communication operations.

Gelernter and Carriero have advocated for a clear separation between the interactional and computational aspects of software components and have designed a model called Linda(), which was initially presented as a set of inter-agent communication primitives that could be added to almost any programming language. This set includes primitives for process creation, adding, deleting, and testing the presence or absence of data in a shared dataspace.

The paper also discusses the classical two-phase functioning approach to real-time systems, exemplified by languages like Lustre(), Esterel(), and Statecharts(). This approach involves executing elementary actions or statements in a first phase, assumed to be atomic and have no time cost, followed by the progression of time when no actions can be further reduced or when special timed actions are encountered.

The paper focuses on the study of the first two extensions mentioned and aims to provide a deeper examination of their expressiveness results. The authors introduce new results and comparisons that contribute to a more comprehensive understanding of the expressiveness of these models.

The paper sets out to consider the family of languages L(x), which is parameterized by a set of communication primitives similar to Linda. This set includes basic Linda primitives such as out, in, and rd, along with a primitive for testing the absence of an object from the dataspace.

Additionally, the paper discusses the introduction of time in coordination-like languages, such as concurrent constraint languages and the timed interpretation of concurrent languages presented by De Boer, Gabbrielli, and Meo. These initiatives introduce time by identifying quiescent points in the computation and by providing mechanisms for delaying computations by a unit of time.

Other related research on the expressiveness of timed constraint systems, timed data collection mechanisms, and modular embeddings in coordination systems is also examined, providing a broader understanding of the impact of various timing mechanisms on the expressiveness of coordination models.