In this academic paper, we create a model for security automata using process algebra operators that act as controllers. We propose a logical approach to monitoring systems in order to enforce security policies. Specifically, we express security policies using a temporal logic formula and use process algebra and temporal logic theories to synthesize controller operators.

We introduce four process algebra operators, denoted as y dk x, where x represents the target, y is the program controller that controls the behavior of the target, and k is the name of the corresponding automaton. These operators are capable of emulating the behavior of the described security automata.

Additionally, while other approaches focus on monitoring the entire system to fulfill a given property, we acknowledge that it may be unnecessary or inconvenient to check the entire system. Some components may be trusted, and there may be a need to constrain only the untrusted ones, such as downloaded applets. Similarly, it may not be feasible to build a reference monitor for an entire distributed architecture, but it could be possible for some of its components.

The paper is structured as follows: Section 2 provides background information on process algebras, generalized structured operational semantics (GSOS), logic, and security automata. Section 3 describes process algebra operators (controllers) corresponding to the security automata. Section 4 discusses the automatic construction of controller programs that enforce desired security policies. Section 5 demonstrates the construction of the maximal model for truncation automata. Section 6 presents a simple example, and Section 7 concludes the paper.

Using our framework, we can create a program controller y that enables the enforcement of a desired security property for any target system x. We also present an extension involving four different operators, particularly addressing control actions.

In a simple example, we select the controller operator ds, and then apply partial model checking with the relabeling function fs to the previous formula. By simplifying the result and assuming that y can only suppress c actions, we obtain d//fs as the final output.