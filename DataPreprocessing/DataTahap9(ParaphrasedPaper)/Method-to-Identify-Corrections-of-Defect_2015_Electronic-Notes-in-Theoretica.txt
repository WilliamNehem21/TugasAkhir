Product line engineering represents all valid products within a product line through product line models. Feature models (FMs) are one of the available notations used to represent product line models, designed during the early stages of product line development to identify common and variable elements. Each feature in an FM represents a prominent or distinctive user-visible aspect of a software system, making FMs useful for effective communication with customers and stakeholders.

The primary objective of the research is to develop a technique that can identify the causes of various types of defects in product line models specified with different notations. In this paper, a new method is proposed to identify defects in feature models and to detect potential corrections for each defect. The method utilizes minimal correction subsets (MCSes) for identifying corrections of defects in feature models, a concept derived from constraint programming.

The proposed method entails three main steps: transforming the feature model, identifying defects, and identifying corrections for each detected defect. The transformed model is used to create constraint programs, allowing for automated reasoning about the feature model. By systematically removing constraints from unsolvable constraint programs, the method identifies the MCSes of defects, which are then expressed in natural language for easy understanding by designers.

The method was implemented in a computational tool using Java, with functionality integrated into Variamos, a suite for variability models. The tool uses Java libraries to execute constraint programs and exports the results into an Excel file. Preliminary evaluation of the method focused on accuracy and performance using various feature models, demonstrating the potential for identifying and correcting defects in feature models.

Overall, the proposed method offers a systematic approach for identifying and correcting defects in feature models, leveraging constraint programming and natural language expressions to provide comprehensive and understandable results. The method addresses a gap in existing approaches, which focus on identifying defects but do not provide automated explanations for corrections. Additionally, the method complements existing work on identifying causes of defective feature models, potentially enabling integration to identify defects, causes, and corrections.