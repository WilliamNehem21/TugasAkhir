Advanced and highly efficient techniques are used to guide high-end SAT solvers to explore a narrow section of the state space relevant to specific safety properties. Rather than developing new algorithms from scratch, we utilize a linear arithmetic/propositional encoding that has demonstrated great potential in finite state systems. With this framework, we address the challenges posed by transition systems induced by timed automata through abstraction refinement techniques to handle infinite states.

Abstraction refinement is a promising research avenue for addressing the state explosion problem and infinite state model checking while ensuring the correctness of verification outcomes. By over-approximating system behavior through abstraction techniques, we remove irrelevant constraints to verify specific specifications. If the abstract system is safe, then, by conservative over-approximation, the original system is also safe.

Jhala and McMillan have presented an approach to abstraction refinement for predicate abstraction, using interpolants to generate refinements that consider specific properties. However, their approach depends on selecting appropriate predicates for predicate abstraction. Our approach can be viewed as a scalable approximation of predicate abstraction, with predicate discovery based on the nature of timed automata.

While Kripke structures are derived from finite state programs, our approach addresses the challenges of infinite state model checking introduced by real-time clocks. Additionally, we directly utilize a formula representation tailored for SAT-based bounded model checking.

This paper outlines a propositional logic representation with linear arithmetic for bounded model checking, followed by a discussion on the soundness of the representation. We also introduce a uniform abstraction and expand the perspective on soundness from the previous section to correspond to results about abstraction. Subsequently, we explore how spurious counterexamples can be utilized to refine abstractions before concluding with a summary and future work.

Our representation is designed specifically for SAT solving technology. In addition to providing conjunctive normal form (CNF) where possible, we demonstrate the efficiency of binary clauses and their role in reducing the search space. Moreover, we prove a stronger correctness result as compared to previous analyses by establishing a homomorphic correspondence between concrete and abstract systems.

Future work includes performance comparisons of our implementation on case studies and an analysis of the impact of using a logarithmic encoding for states. Additionally, we aim to improve overall performance by utilizing a SAT solver tailored for bounded model checking with pseudo-Boolean constraints or isomorphy inference. Furthermore, we intend to explore different settings for balancing counter-example guided abstraction refinement and refinement based on Craig interpolants.