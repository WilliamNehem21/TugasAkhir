Context-aware applications have the ability to detect changes in the environment and adjust their behavior accordingly. This process involves three key stages: monitoring, context recognition, and adaptation. During the monitoring stage, raw data from the environment is collected using sensors. The context recognition stage then processes this data and transforms it into useful information for the adaptation process. With this information, the adaptation system can identify the appropriate behavior for the application in different contexts. This paper introduces a context server called multis, which aims to address challenges in the context recognition layer. The multis context server offers several advantages, including the generation of new context data based on ubiquitous computing information.

Ubiquitous computing, originally proposed by Mark Weiser, envisions a future where computers are omnipresent in the environment and seamlessly integrated into daily life. Pervasive computing, a concept embraced by IBM, is a more practical iteration of ubiquitous computing that involves both wired and wireless devices forming a service network. User data, programs, and processing power are accessible through this network, enabling the environment's resources to provide services to the user. This paper treats ubiquitous and pervasive computing as interchangeable terms.

The ISAM initiative proposes an infrastructure where the computational environment is divided into cells, each consisting of wired and wireless nodes that communicate using a peer-to-peer protocol. Applications are developed using ISAM adapt abstractions, a programming language tailored for pervasive applications, along with the ISAM execution environment, ExEHDA. This work, as part of the ISAM initiative, seeks to introduce a context recognition engine for pervasive applications.

In a 2005 publication, the British Computer Society highlighted building scalable ubiquitous systems as one of the foremost challenges in computer science. Context-aware computing was identified as a critical feature of pervasive computing.

Given that multiple applications may concurrently operate within a given environment and share high-level data, middleware support can optimize system resources by facilitating shared data among applications. However, individual applications may have distinct environmental sensitivities and specific requirements. Therefore, the supporting middleware must enable each application to specify its information needs. A context server approach can enhance middleware-based architecture by introducing an access-managing remote component. By transferring aggregated sensor data to the context server and enabling simultaneous multiple access, the use of a context server offers the advantage of relieving clients from resource-intensive operations.

This paper presents an overview of multis, a multi-sensor context server designed for pervasive computing. The paper's structure includes an outline of multis, examination of a case study utilizing a multis prototype to support application execution, analysis of test results from the current multis implementation and application execution, a discussion of related work in the field, and comparisons of multis to existing projects. It concludes with recommendations for future work.

The multis architecture is detailed, beginning with an analysis of the context recognition process. The architectural elements of multis, a programming language for composing sensors, handling disconnected events, and the context compositor subsystem are also explored. Additionally, the sharing of contextual information across applications is outlined.

Sensors play a crucial role in context-aware computing by providing information about the surrounding environment. Given the diverse techniques for acquiring information, an external monitoring system is typically employed for context recognition. Similarly, the multis project utilizes an external monitoring system to collect information from different sources and present it through a unified interface.

An organizational framework for processing contextual information, known as the filter repository, is introduced, with filters stored in a database and dynamically loaded for use. The CD-XML (Context-Definition XML) language is created to enable application programmers to describe how environmental information should be related and processed to generate useful information for the adaptation process.

Multis employs a tree-based contextual inference mechanism to process sensor data and produce contextual information. It supports independence between application code and contextual data processing and presents mechanisms for dealing with undetermined values and disconnection events. Additionally, multis provides support for sharing contextual information across applications and offers multiple approaches for applications to retrieve contextual data.

Tests using the multis implementation showed that the prototype performed well, though challenges were identified when multiple applications were executed simultaneously. Additionally, a comparison of multis to other related projects, such as Solar, Context Toolkit, Aura/CIS, and JCAF, revealed the strengths and weaknesses of each approach.

The paper concludes by highlighting the importance of multis in simplifying the development of context-aware applications by integrating information from various sources, enabling the implementation of context-aware applications, and offering support for the execution of multiple context-aware applications concurrently.