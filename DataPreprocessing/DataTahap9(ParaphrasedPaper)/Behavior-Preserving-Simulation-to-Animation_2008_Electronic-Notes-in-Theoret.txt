For purposes of verification, it may be advantageous to expand simulation to encompass a domain-specific perspective, referred to as an "animation view," which enables the definition of scenario visualizations that are more closely aligned with the application domain than the abstract, graph-based model. This animation view involves extending the original visual modeling language's alphabet with symbols representing entities from the application domain. The simulation rules for a specific visual model are then translated into "animation rules," which conform to the animation view, through a simulation-to-animation model and rule transformation (S2A transformation) process. This consistent mapping from simulation steps to animation steps visualizes the animation steps in the animation view, contrasting the simulation steps, which are represented as changes in the underlying abstract graph model.

The paper is structured as follows: Section 2 introduces an example of an animation view for a radio clock statechart. Section 3 revisits the fundamental concepts of simulation, animation, and model and rule transformation. In Section 4, the primary finding concerning the semantic accuracy of S2A transformation is presented. As a novel contribution, this paper demonstrates that for each S2A transformation, there exists a corresponding "a2s" backward transformation. The semantic accuracy of "a2s" transformations is established for cases without negative application conditions (NACs), with considerations for extensions to accommodate NACs. Section 5 discusses related work, and Section 6 provides a conclusion.

The objective is not only to transform model states, but to obtain a comprehensive animation specification, including animation rules, from the simulation specification. Consequently, a construction is defined to allow the application of S2A transformation rules from "Q" to the simulation rules, resulting in a set of animation rules. The construction is based on the extension of the construction for rewriting rules by rules provided by Parisi-Presicce, allowing the addition of animation symbols to simulation rules even if the S2A transformation rule is not applicable to the interface of the simulation rule.

The paper also establishes the semantic correctness and behavior-preserving nature of the S2A and A2S transformations, demonstrating that S2A is a behavior-preserving model and rule transformation.

Comparatively, the reactive animation approach by Harel, where behavior is specified by UML diagrams, implements the animated representation of system behavior by linking UML tools to pure animation tools such as Macromedia Flash or Director. In contrast, different Petri net tools offer support for customized Petri net animations. Front end enhancements of case tools for simulating/animating the behavior of models are typically specific to a particular modeling language and have not been formally specified or demonstrated to be behavior-preserving.