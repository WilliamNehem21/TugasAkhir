The development of component-based safety critical systems using a light-weight formal method has been recognized as a crucial approach. This paper suggests a method to formally specify and verify the contract of static structure, dynamic behavior, and refinement of component systems based on UML 2.0 superstructure. The verification of the correctness of static contracts can be achieved through type checking of interfaces and connectors, while the dynamic contract can be ensured by assessing the cooperativeness of integrated components, whose contracts are represented using interface protocol state machines and their semantic models, referred to as contract automata. Additionally, the refinement relation between high-level components and their implementations can be guaranteed by defining the alternating simulation between contract automata of components at different levels.

The paper acknowledges that software plays a pivotal role in safety critical systems, such as avionics, aerospace systems, and nuclear power controllers, which possess real-time, dynamic, autonomy, fault-tolerant characteristics and must satisfy critical properties. However, due to the complexity and the need for high confidence, the development, deployment, and operation of these systems face significant challenges.

To verify essential properties of safety critical systems (e.g., via model checking), the dynamic or temporal aspects of interfaces should be specified in the contract. Furthermore, the dynamic contract needs to support component composition and refinement, which are common activities in component-based system development (CBSD).

The Unified Modeling Language (UML) provides various viewpoints and diagrams to represent the characteristics of software systems, and UML 2.0 has significantly improved the descriptive capability of component models compared to earlier versions. This paper formalizes the component model of UML 2.0 for modeling the static structures of safety critical systems. The dynamic lightweight formal specifications are attached to the components to depict the temporal constraints of interface usages by defining interface protocol state machines (IPSM) and their semantic models, i.e., contract automata. The concepts of stateful and stateless are introduced into contracts to differentiate the characteristics of services.

The paper presents a method for specifying and determining the legal environments based on the dynamic contract. It also examines the refinement relation between high-level components and their implementations and checks the refinement consistency for both top-down design and bottom-up construction.

The sections in the paper discuss related work, formal specification of component system structure, static consistencies, dynamic contract and consistency, refinement relation among components, and conclude with future work.

It is recognized that the work presented in the paper does not fully meet the four principles proposed in section 1 and may not align well with UML 2.0. The approach introduced in this paper attempts to establish a light-weight specification and verification method for the composition and refinement of the UML 2.0 component model.

The paper also introduces concepts such as the transition label of a component, the synchronization of interface interaction and time-triggered patterns in system semantics, and the consideration of legal environments for open systems.

The industry is interested in applying formal methods to the development of safety-critical systems based on the component-based paradigm. The paper presents an initial step toward bridging the gap between formal methods and the widely used modeling language UML. It also emphasizes the significance of the improvement of the component model in UML 2.0 and its influence on realizing the purpose. The proposed method and supporting tool are being applied in the practical development of a safety-critical system called safe-ii, with preliminary results showing good usability and providing a rigorous way to develop such systems.

Additionally, the paper mentions that around these formal specifications, model checking of component-based safety critical systems is being studied, especially combined with compositional reasoning to improve scalability. The introduction of real-time models and related performance interfaces into specification and verification is also highlighted as an area for further study.