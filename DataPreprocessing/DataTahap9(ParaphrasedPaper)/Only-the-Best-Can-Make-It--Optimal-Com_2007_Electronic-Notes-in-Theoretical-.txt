Our research significantly contributes to the field of component-based software engineering by enhancing the reusability of components and streamlining the construction process of component systems. Additionally, our approach is not limited to software components, but also applicable to hardware components and in the field of hardware/software codesign. In all these scenarios, components are defined by their functionality and must be selected based on their individual cost and the context of the overall system in which they will be utilized. Furthermore, adaptor code, whether in the form of software or hardware, may be necessary to integrate the selected components.

The paper is organized as follows: Section 2 presents our concept of a component. Based on this definition, Section 3 offers an overview of our approach to component selection and integration. Section 4 covers the essential background on term rewriting and optimal code generation, which is necessary to explain our concept in detail. Section 5 comprehensively presents our method. Section 6 describes the implementation of our approach, and Section 7 provides a detailed presentation of the case studies we have introduced. After discussing related work in Section 8, we conclude in Section 9.

In our approach, we combine term rewriting with A* search to ensure efficient exploration of the search space. We introduce term rewriting with respect to cost functions and then introduce the concept of A* search, followed by discussing the combination of both and considering complexity issues.

A search can be guided by a heuristic function to estimate the cost for the remaining transitions. A* search guarantees minimal exploration of the search space while finding an optimal solution, provided that the heuristic function is admissible. We illustrate the application of A* search to term rewriting in the context of code generation in compilers, an idea initially proposed by a previous work.

The core algorithm functions as follows: we maintain a list of currently active terms. In each iteration, we select the term with the lowest cost from this list and replace it with all possible successors generated by applying a rewrite rule. The algorithm terminates upon reaching a goal term, in which case we report success, or if there are no remaining terms to be examined, indicating failure. The minimum selection in the loop guarantees finding the optimal solution upon reaching a goal term.

We have implemented our approach for constructing component systems based on term rewriting in the ML language, leveraging its higher-order capabilities. The algorithm starts with the input term, computes all feasible successors, and maintains a candidate list to select the least expensive candidate for further exploration.

In this section, we provide details of two case studies. The first case study involves an automotive system, while the second focuses on modeling a software component system using the Enterprise Java Beans (EJB) framework. We demonstrate the process of component selection and integration and the automatic generation of adaptor code from the component specifications.

Overall, our work presents a framework for constructing optimal component systems based on term rewriting strategies, drawing on techniques from compiler construction, particularly optimizing code generation. We emphasize the significance of the heuristic function, as it directly influences the efficiency of the construction algorithm. Our case studies illustrate that a well-designed heuristic can significantly reduce the search space.