Aspect-oriented programming (AOP) introduces new language constructs to enhance the separation of concerns and improve design modularity. It aims to encapsulate crosscutting concerns, which are system features or properties that impact many modules, through the use of aspects. AOP is expected to improve software maintainability by modularizing crosscutting concerns, but there is a need for a systematic transition from existing object-oriented (OO) systems to aspect-oriented decompositions to fully realize the benefits of AOP.

As AOP gains prominence, there is a growing body of literature in software engineering dedicated to concern analysis techniques and refactoring of crosscutting concerns. However, there is a lack of integration of these techniques to support refactoring of crosscutting concerns based on concern analyses. Additionally, existing refactoring approaches often overlook the crosscutting structure of the target concern, leading to inconsistent terminology and a lack of support for detecting concern-related flaws in design modularity.

In this study, we contribute in three ways: first, we define a set of metaphors to classify concerns based on their crosscutting structures, using heuristics to identify occurrences of the octopus and black sheep metaphors. Second, we present refactorings to modularize octopus and black sheep concerns based on the crosscutting structures defined by these metaphors. Finally, we conduct an empirical study involving concerns of 23 design patterns to evaluate the accuracy of our heuristic classification and the applicability of metaphor-based refactorings and propose additional categories and heuristics for refactoring crosscutting concerns based on our experience.

We highlight the limitations of existing refactoring approaches and propose a metaphor-based approach to address these issues. Our approach uses abstract and intuitive vocabulary based on metaphors to classify concerns and express concern-related bad smells, providing a more unified and intuitive way to address design flaws. We also propose additional metaphors to describe recurring structures of crosscutting concerns.

In our evaluation, we demonstrate the effectiveness of our metaphor-based heuristics in classifying concerns and the applicability of our refactorings to design patterns classified as octopus or black sheep. We also discuss the scalability of the refactorings and provide insights into ongoing work and future directions for the development of a refactoring tool that supports our approach.