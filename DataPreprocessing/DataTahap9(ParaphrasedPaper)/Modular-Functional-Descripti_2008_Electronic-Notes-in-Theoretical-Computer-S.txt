This academic paper presents an approach in which functions serve as the fundamental building blocks. Essentially, functions encapsulate behavior defined by their interface, data flow, and control flow, as well as their internal implementation. The interaction between a function and its environment is described through the exchange of data signals and the transfer of control via control locations. Disjunctive composition represents the alternative use of composed functions, while conjunctive composition corresponds to their simultaneous use. However, neither disjunctive nor simple conjunctive composition alone is sufficient to achieve the intended functionality, so a more sophisticated form of combination is needed to define priorities between sub-functions.

A component communicates with its environment through its interface and exhibits completely specified behavior in reaction to specific inputs from the environment. Functions, on the other hand, do not necessarily have fully defined behavior, and it is possible for a particular environment behavior to exist without a corresponding behavior defined by the function itself.

The goal of functions is to provide modular specifications for components with input-complete behavior. To achieve this, a formalization similar to a previously introduced set of functional descriptions is used as a basis, but with the flexibility to support partially defined behaviors and simultaneous combination. 

While functions facilitate the modular construction of complex functionalities, more constructive forms of descriptions are often required for the final implementation, as provided by various tools. The use of power position controlled windows is better suited for implementation using state-of-the-art tools, while the function-based approach is beneficial in the earlier stages of development. Establishing an implementation relation between these different forms of descriptions is necessary for a sound and integrated development process.

To this end, the paper proposes the use of weak second-order monadic structure with one successor function (WS1S) to implement automatic proof support. This formalism specifies functions using predicates over sets of traces and allows for compositional construction of trace sets. Additionally, WS1S can be used to define the implementation relation and to identify counterexamples for functions that violate the refinement relation.

In conclusion, the paper advocates for functional modular development, where functions serve as construction units and transitions form the most basic form. By employing disjunctive and conjunctive composition to combine modules, the paper aims to simplify reasoning about overall behavior and enable the reuse of modular functionalities. Finally, the use of automatic proof support facilitates the implementation of integrated modular behavior through a more constructive form of functional description.