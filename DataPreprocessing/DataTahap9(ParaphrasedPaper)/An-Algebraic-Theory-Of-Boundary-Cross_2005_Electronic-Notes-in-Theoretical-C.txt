Statecharts is a visual language used for specifying reactive, embedded, and real-time systems. This formalism builds upon finite-state machines by incorporating concepts such as hierarchy (state refinement), concurrency, and priority (preemption among transitions). Its popularity in the software engineering community stems from its straightforward graphical syntax and its ability to model complex control software in a hierarchical manner. Variations of the language can be found in several commercial design notations, including room, statemate, stateflow, and UML.

Related research on interpreting boundary-crossing transitions has been conducted by Mikk, Lakhnech, and Siegel. They introduce extended hierarchical automata (extended HA) as an intermediate format to enable the connection of new tools to the statemate environment. Comparable to the Argos language, which does not support boundary-crossing transitions, extended HA facilitates boundary crossing transitions using prioritized transitions.

Other formalisms have also incorporated ideas similar to the entry/exit points defined within this study. The notion of splitting transitions to localize information has been utilized in room. Alur and Grosu define a new language called statechartstype with compositional semantics and modular reasoning. They address boundary-crossing transitions by splitting them into entry and exit points, although their language lacks events, and their trace-based semantics shares modeling challenges with the work of Huizing-Gerth-De Roever.

This section introduces hierarchical state machines (HSMs), which are a subset of traditional statecharts. Like statecharts, HSMs allow the definition of hierarchical state machines with boundary-crossing transitions. However, unlike statecharts, HSMs do not support concurrency, and transition labels can only contain simple events (no trigger/action pairs, no negated events, etc.). This paper focuses on studying HSMs rather than statecharts to explore boundary-crossing transitions, but it discusses how this work can be combined with prior research to develop a comprehensive theory that accounts for other language features.

The section concludes by discussing how hierarchical process algebra (HPA) can be enhanced to model the additional features of statecharts, including concurrency and preemption. A process algebra called SPL was introduced to provide compositional semantics to statecharts without boundary-crossing transitions. The syntax of SPL involves a set of event names and shares some operators with HPA (+, recursion) while also introducing unique operators (emit, parallel composition, restriction, delay). Incorporating HPA into SPL is straightforward by integrating entry, enter, exit, and handle operators and adapting certain definitions to align with HPA transition labels. However, the resulting language is relatively complex, prompting the focus of technical development on HPA in this paper.