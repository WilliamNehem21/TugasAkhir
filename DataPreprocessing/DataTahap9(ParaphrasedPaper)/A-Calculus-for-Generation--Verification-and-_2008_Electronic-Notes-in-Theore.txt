The BPEL language is utilized for specifying web services orchestrations, serving as the standard since April 2007. It defines the execution logic of a business process based on interactions between the process and its partners, coordinating multiple service interactions internally to achieve a business goal.

The subsequent sections of this paper are structured as follows: the next section provides a brief overview of the BPEL language, followed by Section 3 introducing the BP-language, a formalism for modeling BPEL processes. Section 4 presents the mapping from the BPCalculus to BPEL, and Section 5 outlines the verification process, accompanied by a representative example. The paper concludes in Section 6.

To describe the BP-calculus, an abstraction mechanism for BPEL scopes is needed. Scopes serve as containers for BPEL processes and handlers, encompassing primary structured activities, variable definitions, and handlers (fault, compensation, event, and termination handlers). A reduction semantics is typically defined using a structural relation and a reduction relation to express intrinsic meanings of operators and the dynamic evolution of processes through operational semantics.

Fault handlers and compensation handlers are key components of BPEL processes. The fault handler is enabled using the 'enfh' channel and uses a guarded sum to execute an activity associated with the triggered fault, signaling its termination upon completion. The compensation handler, installed at the beginning of a scope, executes its compensation activity and signals the termination of the scope activity if invoked but not installed.

To facilitate formal verification, processes may be specified in either the BP-calculus or BPEL, with the verification results iteratively refined. The final outcome is the generation of formally verified BPEL code.

The proposed verification approach involves specifying processes in the BP-calculus, translating the specification into a syntax compatible with the HAL tool, and mapping the fault handler activities. Similarly, links are utilized to represent connections between activities, defining their roles and allowing for the specification of execution order and interdependencies, with certain restrictions in place to ensure synchronization among activities.