The evaluator module implements the weak unification algorithm and the weak sld resolution principle, serving as the operational semantics of the language. Weak sld resolution is achieved through a meta-interpreter. The subsequent sections elaborate on the specifics of this implementation. When solve(a, da) succeeds with an approximation degree da less than 1, not(a) also succeeds with an approximation degree d = 1 - da. In the case of solve(a, da) failing, not(a) succeeds with an approximation degree d = 1.

The theoretical works [6,7] represent the first development of the concept of unification by similarity, but their usage of intricate notions such as clouds, systems of clouds, and closure operators in their definition may jeopardize the efficiency of operational semantics due to their computational cost. A practical manifestation of this work is the fuzzy logic language likelog, primarily implemented in Prolog using the aforementioned concepts and more direct techniques.

Aspects like the capability to implement user-defined operators and work with modules are not currently addressed in our language. In the future, we aim to integrate these absent features into our language. Additionally, we intend to enhance specific modules of our system, such as the parser, and integrate new non-standard features. With regard to the latter, we are striving to add a repository of fuzzy ontologies and an automatic generator of fuzzy ontologies in a manner similar to the proposed approach.

On a different note, the operational semantics employed by bousi~prolog is realized through a meta-interpreter, representing a cost-effective solution from an implementation perspective but lacking in efficient execution. To address this efficiency issue, we have explored ways to incorporate the weak unification algorithm into the Warren Abstract Machine. Some initial findings for a pure subset of Prolog can be found in. Furthermore, we aim to expand this endeavor to encompass all current and future features of bousi~prolog through a more efficient implementation.