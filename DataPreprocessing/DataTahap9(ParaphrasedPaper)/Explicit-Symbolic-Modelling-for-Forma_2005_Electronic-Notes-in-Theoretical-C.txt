Due to the increasing complexity of computing applications, tools have been developed to assist developers in identifying bugs in hardware and software systems. Two approaches that have been utilized for this purpose are simulation and formal verification. Simulation involves running tests on specific inputs and analyzing the results, enabling evaluation of control and data aspects but only examining a portion of the state set. Thus, simulation can confirm that specifications hold for certain inputs but cannot prove correctness across the entire state set.

Formal methods encompass mathematical-based languages, techniques, and tools for specifying and verifying hardware and software systems. These methods are particularly valuable for complex and critical systems, as they enhance reliability by executing exhaustive searches over problem domains and proving conformity to specifications.

This paper proposes a model for merging explicit and symbolic representations within a formal verification model. By combining explicit and symbolic techniques, the model aims to enable the use of the most efficient technique for each aspect of the model. The related works and main goals are discussed in the following section, followed by the development of the explicit-symbolic model and its generation from a labeled state-transition system. The paper then explores how formal verification tools can utilize the model to verify systems in the Verilog intermediate format, along with the algorithms designed for integrating underlying models. The paper concludes with future steps and considerations.

The proposed explicit-symbolic model integrates explicit and symbolic verifiers and their techniques, leveraging well-known explicit-state model checkers like SPIN and JPF, as well as successful symbolic-state model checking tools such as SMV, NuSMV, and Verus. The paper discusses the flexibility and effectiveness of the proposed model compared to the SLAM project, emphasizing the ability to move variables between explicit and symbolic spaces according to different policies.

The paper outlines a two-step process for generating the explicit-symbolic model, which involves initially creating explicit and symbolic models as projections induced by variable partitioning, followed by their combination to form the explicit-symbolic model. Additionally, the paper applies the explicit-symbolic modeling to models in the intermediate format, describing the key components of the language, generating explicit and symbolic models, and demonstrating the emulation of the original model behavior using the explicit-symbolic model.

Furthermore, the paper discusses the control states, state specifications, and the use of a variable for storing the current state being visited in the explicit-symbolic model. It also involves the explicit definition of system properties in computation tree logic (CTL) and the parsing of atomic propositions.

The paper outlines algorithms for processing atomic propositions and finding all explicit-symbolic states that lead to particular states, exemplifying the application of these algorithms with a specific input state set. The paper concludes by emphasizing the proposed model's contribution to the formal verification of systems and the ongoing efforts to computationally implement the explicit-symbolic model for systems specified in the intermediate format, with an aim to measure the impact of different representations on the verification of control and data-flow intensive systems. Finally, the paper discusses future experiments to provide more information on the representation of control-flow and data-flow and how these choices impact the verification of systems.