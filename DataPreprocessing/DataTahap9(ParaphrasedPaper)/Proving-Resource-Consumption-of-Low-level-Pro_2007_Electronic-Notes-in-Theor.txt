This paper presents a framework and experimental findings related to the verification and certification of resource consumption in programs written in a subset of Java bytecode. The focus is on proving memory consumption for low-level programs annotated with memory consumption on the method level. The annotations are generated from the results of a static analysis for inferring heap space consumption of programs written in a high-level functional language called Camelot. The paper outlines the language, program logic, and axiomatization, and describes the verification condition generator. It also discusses the challenges of reasoning about programs with heap aliasing and suggests potential solutions. The program logic is based on the original program logic for Grail, with modifications to accommodate substitutions and eliminate sorts for heaps, locations, and integers. The authors demonstrate the application of their technique to simple examples and compare it to other approaches in the field. Alternative approaches include the use of separation logic and first-order theorem provers, as well as heuristics for instantiation of an induction scheme to prove shape properties of possibly cyclic data structures. The paper concludes with a discussion on the potential for combining limited, but decidable logics with resources and the use of first-order theorem provers in data structure verification systems.