The initial stage of learning programming often involves students harboring misconceptions about the nature of programming. In an effort to address this, we implemented a kick-start activation at the beginning of an introductory programming course (CS1) to clarify the fundamental concepts of programming. This approach involved introducing the underlying structure of programming, encouraging students to engage in problem-solving and debugging activities related to a realistic computer program, which was presented in a manner that made it accessible and relatable to all students. The use of visualization techniques further facilitated concrete understanding of the example for the students.

Many students enrolling in introductory programming courses lack a clear understanding of what programming entails. Typically, instructors aim to dispel misconceptions by emphasizing that programming is primarily about problem-solving and critical thinking, rather than solely typing program code. Concepts such as algorithms, and tools for implementing and designing programs, such as pseudocode and flow charts, are introduced to familiarize students with the foundational aspects of programming.

Traditionally, instructors use a cooking recipe as an analogy to explain algorithms, as it provides clear instructions similar to an algorithm. However, this analogy has limitations, as it does not directly relate to computers, fails to capture the essence of a programmer's work, and does not effectively illustrate important programming processes such as design, testing, and debugging. To address these challenges, we proposed a new approach called kick-start activation, which delves into the fundamental structure of programming before introducing its surface elements. This approach is especially beneficial for students with little to no prior knowledge of programming.

The kick-start activation involves the use of a relatable and straightforward example that does not involve actual programming language or computer-related details. Instead, natural-language-like pseudocode and flow charts are utilized to convey the fundamental concepts of programming. In our case, we used the hyphenation rules of the Finnish language as the topic for the kick-start activation, as it is a general and familiar subject to the students.

The implementation of the kick-start activation involved engaging students in practical programming-related activities from the outset, with an emphasis on problem-solving and critical thinking. This approach aimed to provide students with a hands-on experience of programming, even if they initially believed they had no prior knowledge of programming. The kick-start activation also incorporated a visualization tool to facilitate students' understanding of the example and enable them to actively participate in testing the algorithm.

We conducted a quantitative survey to evaluate the effectiveness of the visualization tool used in the kick-start activation. The results showed that the visualization was particularly beneficial for students without prior programming experience, as it aided their comprehension of algorithms and flow charts. The positive feedback received from both students and teachers who utilized the kick-start activation suggests that our approach was successful in achieving its objectives.

Overall, our approach aligns with McGill and Volet's conceptual framework of programming knowledge, as it not only addresses syntactic and conceptual knowledge but also focuses on strategic knowledge related to programming phases such as testing and design. Moving forward, potential areas for future exploration include developing a visualization tool that allows students to modify and build correct algorithms, as well as implementing different types of premature algorithms for debugging tasks.
