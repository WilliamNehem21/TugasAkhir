The practical challenges encountered in application form the backdrop for our theoretical investigation. The study can be divided into two phases. Initially, it is necessary to establish semantic and algorithmic tools for verifying global properties, formed using predicate and function symbols, in a partial view where the partial view may lack knowledge of such properties. Subsequently, the development of semantic and algorithmic machinery to enable reasoning across multiple viewpoints is required. Although global property verification is conducted within each partial view, diverse forms of communication between some of the partial views are needed for a more comprehensive global verification of system properties. This paper focuses exclusively on the first phase; the second phase will be addressed in future research.

Additionally, the three-valued semantics is decomposed into two semantics, and their consensus (the union of the Smyth power domain) restores the original semantics. This consensus, in conjunction with a translation of formulas into negation normal form, is utilized to reduce the three-valued semantics to the two standard semantics of first-order logic. Accordingly, three-valued model checking of global properties in a partial model can be simplified to two-valued model checking of standard models of first-order logic.

In our work, we introduce partial models in Section 2, which possess limited access to a global signature. Section 3 employs these models to interpret global terms and formulas, accomplished from first principles by applying the Smyth power domain to the set of semantic elements (for terms) and to the discrete set of ordinary truth values {t, f} (for formulas). We propose a refinement preorder of partial models in Section 4 and demonstrate its soundness, provided that the set of semantic elements remains unchanged. The decomposition of our semantics into two semantics, and the utilization of their consensus as well as the translation of formulas into negation normal form to reduce the three-valued semantics to two standard semantics of first-order logic, are detailed in Section 5 and 6, respectively. Section 7 discusses related work, and Section 8 provides a conclusion.

Furthermore, we expound upon the notion that one partial view can be a refinement of another partial view, signifying that the refining view encodes more precise knowledge of a software system without conflicting with the knowledge of the refined view. We formalize this idea in Definition 4.1, and in Proposition 4.5, we demonstrate that the refining view does not contradict the knowledge of the refined view when the domains of semantic elements of the two views are the same. This establishes that our semantics is sound with respect to the refinement relation under the specified circumstances.

Moreover, in previous work, G. Bruns and P. Godefroid develop a three-valued version of model-checking models of computation tree logic (CTL), along with a notion of refinement. Their temporal logic semantics is shown to be sound and complete with respect to this refinement. The authors associate two Kripke structures with each three-valued model, an optimistic and a pessimistic one, allowing them to implement their three-valued model checking problem as two two-valued model-checking problems for CTL (over Kripke structures). Additionally, S. Guerra develops a framework for specifications of software artifacts, employing default institutions and non-monotonic semantics for linear-time temporal logic based on default institutions. A distance between interpretation morphisms is used to induce a preferential preorder between models and to define the semantics, thus providing a way to capture the consistency across models.