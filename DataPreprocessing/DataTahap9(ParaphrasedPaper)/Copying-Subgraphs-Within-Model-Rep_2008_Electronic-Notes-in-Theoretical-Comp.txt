The current set of operations available in state-of-the-art graph transformation tools allows for conditional creation and removal of nodes and edges in input graphs, as well as initialization or updating of node attributes based on other attributes, parameters, or constants. However, these operations are deemed too limited for expressing model refinements succinctly, particularly due to the absence of an operation for copying subgraphs (multiple connected nodes along with their attributes) to a new location in the host graph. This paper presents a case study that demonstrates the necessity for such an operation, and proposes a syntax and informal semantics for it. It also discusses the integration of this operation into an existing graph transformation language and outlines ongoing efforts towards implementing a model transformation language based on graph transformation to optimize code reuse.

The paper aims to extend graph transformation to enable programming of model transformations at a high level of abstraction while interfacing with the low-level APIs of mainstream model repositories via compilers. The introduction of a copy operator is highlighted as essential for formalizing the model transformation defining the generation process, which is discussed further in the paper.

The focus of current development is on a model-to-model transformation approach that preserves code templates. Story diagrams are utilized to transform models adhering to a specific profile, and the paper discusses how the absence of a copy operator is compensated for in this context. The use of an intermediate layer and modularity mechanisms of story diagrams are credited with managing the complexity of the complete transformation.

The paper also mentions ongoing evaluation of Java as a promising tool for this work. It builds upon a case study by Hoffmann and considers the attributes and links from syntax nodes within method bodies in more detail. Additionally, the use of control structures such as a story diagram<<loop>> is under evaluation to determine their impact on the complexity of rules compared to those using graph variables.