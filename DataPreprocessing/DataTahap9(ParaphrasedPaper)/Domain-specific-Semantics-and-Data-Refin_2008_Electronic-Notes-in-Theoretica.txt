This paper demonstrates the utilization of domain-specific semantics for object models to facilitate the development of transformations aligned with a specific implementation approach. The semantics encapsulate model constraints and domain assumptions using abstract data types, ensuring the correctness of transformations through data refinement. These transformations serve as developmental stages, involving the finalization of method descriptions and validation checks to ensure definedness and consistency. The paper also illustrates the use of transformation compositions for the automated generation of operational systems from formal, object-oriented designs.

The paper commences with an introduction to object modeling and an overview of Booster, a formal, object-oriented language employed for a concise examination of the topics discussed. It then introduces a semantics for object models in Section 3, adequate for analyzing global constraint information. In Section 4, the paper explores the extension of this semantics to incorporate assumptions about the domain of application, expressed as an implementation strategy for post conditions.

A correctness criterion for model transformations is presented, stipulating that a transformation is deemed correct with respect to a specific implementation strategy if it corresponds to a data refinement within the extended semantics. Furthermore, the paper delves into two key aspects of the semantics in the final section: the differentiation between classes and components, and the treatment of inheritance. It also investigates related work in formal methods and outlines potential directions for future research.

The language of object-oriented modeling supports the representation of a design in terms of an object or class model, outlining the characteristics of each class of objects and their associations. A constraint language can be employed to specify pre- and post-conditions for operations, as well as invariant properties for classes and associations. Typically, further operation descriptions are provided in the form of code, written in the target language for implementation.

Additionally, the paper discusses the extension of association declarations to express symmetry properties efficiently, as well as the specification of association invariants based on the target type and multiplicity of associations. Furthermore, it examines the notion of object comparison across different class structures through encapsulation at the component level, enabling the formal comparison of semantics and supporting the concept of refactoring.

The paper also illustrates the transformation of a series of model transformations into the final method specification, which is directly translated into functions in C. The transformations are proven to be correct in accordance with the strategy introduced in the paper, with the objective of simplifying the proofs of correctness in the next version.