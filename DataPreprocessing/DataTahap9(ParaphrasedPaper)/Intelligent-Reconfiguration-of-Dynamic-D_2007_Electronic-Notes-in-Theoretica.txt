The autonomic approach, as described in this paper, bears resemblance to the functioning of Coda (Complex Organic Distributed Architecture). Coda aligns with the cybernetic concepts put forth by the Viable System Model (VSM), which posits that living systems are comprised of autonomous sub-systems with self-organizing and self-regulatory properties that enable them to adapt to environmental changes and manage complexity. In a similar vein, application components and connectors can implement interfaces established by NIDL to enable local management components to control their lifecycle. These components and connectors register with local management components, which oversee their execution and handle non-functional requirements. The information about these components and connectors, along with local management components, is stored in the global manager, functioning as a comprehensive information repository for system traceability.

The principle underpinning the notion of a role is autonomy, with the expectation that roles perform their tasks independently if their Critical Success Factors (CSFs) are met. In the event of a CSF failure, the role seeks assistance from other roles, potentially from a higher-level role with access to additional information and tasks. The higher-level role can adjust the operational parameters of the failed role to enable it to adapt to the prevailing conditions. Additionally, the concept of feedback loops in control systems is extended in Coda, incorporating systemic learning to identify successful operational parameters based on historical information, thereby exhibiting a level of intelligence not typically present in traditional control systems. Moreover, predictive techniques are essential in a Coda-modeled architecture to anticipate resource usage and emergent behavior, for example, identifying new user patterns or service usage.

A key element of Coda's functioning is the monitor layer, which analyzes multidimensional data and monitors business operations in terms of external trends to enable more effective reactive measures. Furthermore, the establishment of survival CSFs for the system indicates whether the system is approaching its capacity, such as the maximum number of service components running on local managers. These concepts were discussed in the context of dynamic integration of distributed components, as presented in the proceedings of the 1st International Workshop on Foundations of Coordination Languages and Software Architecture (FOCLASA2002).
