The implementation of term-graphs based on this formalism offers strategic graph rewriting as a result of Tom providing rewriting strategies and integrating such structures in the language. After introducing the concept of relative positions, we explain how the language can be expanded to provide capabilities for strategic graph rewriting. Finally, we demonstrate the use of this extension through an implementation of lambda-calculus normalization.

The unique aspect of the previous approach is that pattern matching on terms with references built upon t(f, x) is defined as pattern matching on terms of tref(f, x). As a result, there is no need to extend the notion of rewriting, allowing for the reuse of existing results and rewriting tools. However, questions raised by this formalism are at a different level, specifically concerning the desire for the rewrite system to rewrite only valid terms. Establishing non-trivial criteria on rewrite rules implying this property remains an open question. Consequently, the subsequent sections of this paper focus on the technical aspects of the pattern matching problem implementation.

The mapping mechanism provides an algebraic view of certain Java objects, such as viewing integers as Peano natural numbers or an XML tree as a term. It is comprised of a destructive part used by the matching algorithm, and a constructive part utilized by the compiler to build an algebraic term. While the goal is to work on top of classes and mappings generated by Gom, some mappings will be adapted to suit individual needs.

Given the language constructs and terms described in section 2.2, there are multiple ways to express matching against patterns with references. Patterns can be expressed at a low level using positions directly, or through a syntax based on labeling. In each case, it refers to a stated subterm whose position is well-known. To compare two references by value instead of references, a deref operator will be introduced in patterns implemented using Tom mappings.

The classical representation of term-graphs by a labeled graph is similar to ours, though the conditions on rewrite rules are more restrictive (the left-hand side of a rule is limited to trees). For term-graph rewriting in Tom, syntactic term rewriting is utilized. However, this may lead to invalid terms as referenced subterms can disappear or change without a garbage collection phase. One solution would be to integrate a garbage collection phase into the Tom matching process. Alternatively, an attractive approach would be to implement the formalism presented in a different source where the right-hand side of the rewriting rules consists of a set of actions on the pointers.

Tom provides a powerful strategy language inspired by Elan and Stratego, with the purpose of describing how transformation rules should be applied. When dealing with terms with references, the strategy language must be extended to traverse them as graphs.

One notable property of strategic programming with Tom is the ability to obtain the current absolute position inside the visited term during a traversal. This allows, for example, to collect in one pass the set of reduced forms of a term for a given rewrite system. This feature will be utilized in the next section to collect the positions of bounded variable occurrences under an abstraction.

A significant portion of the proposed concepts has been implemented, and efforts are now directed towards defining a rewriting step similar to the one presented in a previous work. Another area of investigation involves devising reference strategies to terminate infinite loops that may arise during the traversal of a graph with cycles. This could be accomplished by employing a map associating counters to visited nodes.

As demonstrated in the last section, this model has interesting applications and offers promising prospects for program transformation and code analysis. Furthermore, the normal form described in section 2.2 provides a solid foundation for experimenting with transformations on term-graphs in a concise and expressive manner.