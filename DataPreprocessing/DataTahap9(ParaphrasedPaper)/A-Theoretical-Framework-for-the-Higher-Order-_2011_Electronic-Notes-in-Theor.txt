The second contribution of this research is the introduction of a formal framework for integrating the algebraic constraint domains fd and r within an enhanced version of the cflp(d) scheme, which can now be applied to higher-order functional and logic programming involving lambda abstractions. This results in the establishment of a robust theoretical basis for higher-order constraint functional logic programming with lambda abstractions and decidable higher-order unification within a new higher-order constraint domain 7, leading to increased expressive capabilities. To illustrate the different cooperative mechanisms supported by our theoretical framework and the advantages resulting from such cooperation in the context of higher-order functional logic programming, we provide examples of cprs-programs involving the collaboration of the algebraic constraint domains fd and r.

In order to implement this technique, our collaborative computation model maintains a store c through the execution of an algebraic constraint collect[...] c (similar to the setof predicate in Prolog).

In addition to the aforementioned works, an important related work in this field is the cflp scheme developed by Mircea Marin in his PhD thesis. This work introduces cflp(d, s, l), a family of languages parameterized by a constraint domain d, a strategy s defining the cooperation of multiple constraint solvers over d, and a constraint lazy narrowing calculus l for solving constraints involving functions defined by user-given constrained rewrite rules. A key distinction from our approach is the absence of declarative (model-theoretic and fixpoint) semantics provided by the rewriting logic underlying our cflp(c) instance (refer to [source] for more details). Another difference lies in the intended application domain. Marin's instance of cflp combines four solvers over a constraint domain for algebraic symbolic computation.