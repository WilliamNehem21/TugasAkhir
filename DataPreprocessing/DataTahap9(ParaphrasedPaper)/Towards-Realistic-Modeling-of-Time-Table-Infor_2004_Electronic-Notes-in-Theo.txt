The time-dependent model offers an efficient solution to the earliest arrival problem by transforming it into a shortest path computation on graph G, assuming that transfers between trains can be performed instantaneously. However, this assumption does not reflect reality. Additionally, this model is unable to address the minimum number of transfers problem, as it does not provide an optimal solution even when considering transfer events and their corresponding times rather than the earliest arrival time. When a transfer is necessary, it becomes impossible to select the best event from all possible options.

The paper is structured as follows: Section 2 presents the original time-dependent model and discusses the solution to the earliest arrival problem with zero transfer times. In Section 3, the paper introduces models that incorporate platform and train route information to address the realistic version of the earliest arrival problem with non-zero transfer times. Section 4 presents the modeling and solution for the minimum number of transfers problem, while Section 5 addresses the combined earliest arrival problem and minimum number of transfers problem. Section 6 introduces various heuristics aimed at expediting the computation of edge costs. Preliminary experimental results are presented in Section 7, and the paper concludes in Section 8.

The validity of the modeling presented can be demonstrated as follows. No two trains can occupy the same platform simultaneously, and the time interval between the arrival and departure of consecutive trains at a given platform provides sufficient time for passengers to transfer between them. If platform information is available, the model can effectively solve the earliest arrival problem with respect to the platform details mentioned earlier. Let G=(V, E) represent the new graph model, with the node and edge sets to be defined subsequently. It is assumed that a set of train routes and their corresponding schedules are provided.

Assumption 3.3 is essential to ensure that waiting at stations for the next train on the same route will not be advantageous. In other words, assuming Assumption 3.2 holds, taking the first available train from station A to station B will not result in missing a subsequent connection from B that could have been used if a later departure had been followed from station A. It will be shown later that this assumption is crucial for the correctness of the model.

The correctness of the model closely resembles that of the corresponding model based on platform information (cf. Section 3.1.1). Furthermore, the algorithm presented in Section 3.1.2 can also be applied to solve the earliest arrival problem based on the new modeling. Its correctness is established by the non-negative delay assumptions of functions f and g, and the non-decreasing nature of both functions (f due to Assumption 3.2, and g by construction).

We now turn to the validation of the model. A proof is provided for the case where the modeling of the earliest arrival problem is based on train routes with variable transfer costs (cf. Section 3.2.2). The case of constant transfer costs (cf. Section 3.2.1) can be demonstrated similarly.

In the scenario of variable transfer costs within the same station, the differing time required for each transfer between the same train routes emerges from the fact that these trains do not always stop at the same platform of the station. The input concerning transfer times considers the specific platforms where the trains make stops. Consequently, for every event e, it is necessary to have information about the first train of every other route that can be followed. For the case of variable transfer costs, each edge that is reached by the event e must have information about the first train of every other route that can be followed. Consequently, for every event e, there must be some information about the first train of every other train route that can be followed. As a result, for the case of variable transfer costs, each edge that is reached by the event e must store information about the first train of every other route that can be followed by use of that event. Having one such pointer very nexte,i' for all pu, we can relax the outgoing edges of all nodes of station s belonging to route r, and thus avoid the relaxation of all other edges (not in route r) among those nodes. This eliminates the need to store any additional information regarding those latter edges. Additionally, it is unnecessary to store same train pointers explicitly.

The implementation of the original time-dependent model employs binary search and utilizes the leda parameterized graph type. The extension with train routes incorporates index values at the route nodes, as described in Section 6. A heap-based priority queue, similar to the lazy variant of pairing heaps, is used. Care has been taken to circumvent the initialization steps for both models at the onset of each query.