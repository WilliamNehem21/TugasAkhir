Our paper focuses on expressing recursion and corecursion in functional programming. We discuss morphisms, particularly catamorphisms, anamorphisms, and their composition known as hylomorphisms, which are used to express recursion and corecursion. We introduce a new method for programming the factorial function using hylomorphism, demonstrating its alternative approach to computing factorials compared to traditional recursive methods. We illustrate our new method using action semantics, a formal method for program description.

We establish that f-coalgebras and the homomorphisms between them form a category, denoted as coalg(f), with f-coalgebras as objects and homomorphisms as morphisms. We define the concept of recursive coalgebras, which are coaIgebras with a unique coalgebra-to-algebra morphism into every algebra, and emphasize their importance in relating coalgebras and algebras in the same category. Additionally, we show how hylomorphisms, based on coalgebra-to-algebra morphisms, align with recursive coalgebras.

In a specific example, we use hylomorphism as a composition of anamorphism and catamorphism, akin to recursive coalgebras. We then describe a function that takes an integer as input and returns a list of elements from n to 1, representing the factorial calculation. The function's type signature is outlined.

We also discuss the use of data entities in action semantics, defined by algebraic specifications, to represent mathematical values such as integers and boolean values, as well as abstract cells that store information. In the functional paradigm, we focus on "evaluate" and "elaborate" actions, omitting "execute" actions and imperative memory-related functions.

We delve into the use of names (identifiers) and their associations, referred to as bindings, distinguishing between global and local bindings, including mutually recursive bindings within letrec expressions. We provide an evaluation description for simple expressions.

We conclude by summarizing our analysis of recursion and corecursion, describing how initial algebras, catamorphisms, terminal coalgebras, and anamorphisms characterize these concepts. We introduce the concept of recursive coalgebras, which relies on unique coalgebra-to-algebra morphisms (hylomorphisms) to establish the relationship between algebras and coalgebras. We present an unusual factorial calculation example using anamorphism, catamorphism, and hylomorphism, along with its description in action semantics. Our paper proposes an alternative method for computing recursive functions using algebras and coalgebras, with future research focusing on the categorical formulation of these principles using monads and comonads.