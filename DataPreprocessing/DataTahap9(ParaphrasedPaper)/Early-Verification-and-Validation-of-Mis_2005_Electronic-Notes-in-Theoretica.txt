To ensure the creation of highly reliable systems, it is advisable to utilize formal methods, which are based on mathematical languages, techniques, and tools for specifying and verifying such systems. Despite some success stories, formal methods have not yet been widely adopted in industry, mainly due to the significant investment required to learn the complex technology and a general resistance to mathematics. To address these barriers, alternative approaches such as lightweight formal methods and invisible formal methods are being explored. The former involves targeted applications with limited scope and analysis to draw relevant conclusions at minimal cost, while the latter aims to provide convenient, powerful, and useful technologies for practitioners to readily adopt.

The remainder of this paper is organized as follows. Section 2 provides background information on KAOS and its formal semantics, while Section 3 gives an overview of the functionalities supported by the toolbox. Sections 4 and 5 respectively detail two mature tools: the Early Analyzer, which focuses on verification, and the Animator, which is primarily concerned with validation.

In the context of this formalization, goals can be incrementally derived from goal specifications to generate a structural model of the system, akin to UML class diagrams. Objects have states defined by the values of their attributes and associations to other objects. They can be either passive (entities, associations, events) or active (agents), which are related through their interfaces composed of object attributes and associations they monitor and control, respectively. The task of the Early Analyzer is to verify the formal consistency of stakeholders' informal statements at an early stage of the process and to produce potential system histories for validation purposes.

Whose responsibility should be examined, and enforcing postconditions rather than preconditions are methods to prevent mistakes. In both cases, the formal analyzer ceases to return counter-examples. The tools used include the BDD-based engine and the SAT-based engines of NuSMV, as well as the CLP engine of Oz. Experiments with Alloy indicate that using tools with high-level input formalisms that optimize their mapping into SAT, BDD, etc., is preferable.

Different mappings replace infinite domains with finite ones (e.g., Alloy) and replace the infinite time structure with a bounded one (e.g., bounded model checking). Due to these adjustments, it is important for the analyst to interpret the results cautiously.

The SceneBeans framework utilized here provides a high level of abstraction and is described in a simple XML format, enabling designers to produce new views and interface them with the simulation engine in a short amount of time. Moving forward, the Early Analyzer will be expanded to support checks addressing obstacles and conflicts, the Animator mapping will be enhanced, and a new component for designing control panels is being implemented. Additionally, other tools such as the acceptance tests generator and the obstacle generator are in the implementation phase or being planned.