This research paper introduces a method for refining software model specifications to include non-functional properties, specifically focusing on performance properties. It proposes a refinement calculus for checking conformance between abstract performance descriptions of software components, based on the Palladio Component Model (PCM) as a description language for performance properties. 

The paper's contributions include a model for parameterized component performance specifications and a refinement calculus. The language for component performance specifications is based on the PCM's performance prediction model, which has been used in industrial case studies and offers methods for predicting quality of service attributes. The paper is structured with an introduction to the PCM, followed by a presentation of the software performance certification scenario and the proposed refinement calculus. It discusses the assumptions and limitations of the approach, reviews related work, and concludes with future considerations.

The refinement calculus presented in the paper checks conformance of external call protocols and resource demands of active resources, such as CPU, memory, and hard disk. It covers different aspects of refinement, including external call protocols, internal actions, and resource demanding service effect specifications in the PCM. The paper highlights the calculus's ability to protect intellectual property by expressing refinement on an abstract level, without exposing internal implementation details and source code, while still providing a certification statement based on formal methods. It also emphasizes the independence of the refinement from the execution environment and the potential inclusion of user behavior modeling and passive resource handling in future work.

In summary, the paper introduces a refinement calculus for software performance specifications, based on the PCM, and outlines its application in a certification scenario for software conformance with performance properties. It also discusses potential future extensions to the refinement calculus to include additional modeling features and handling of passive resources.