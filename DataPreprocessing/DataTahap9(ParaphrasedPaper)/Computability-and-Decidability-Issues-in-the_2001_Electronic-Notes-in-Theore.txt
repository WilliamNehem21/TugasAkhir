Most formal specification languages commonly include static invariants to describe system semantics adequately, but ensuring consistency becomes a challenging task. For a given program specification s and invariant i, the goal is to guarantee that every execution of s, starting from a state that satisfies i, always leads to a state satisfying i as well.

To make the approach of generalized continuity spaces (GCSs) more practically applicable, it is necessary to examine the computability of GCSs and the decidability of preconditions. Establishing a close connection with classical recursion theory is preferred, and this paper aims to achieve that.

The formal characterization of GCSs as per Theorem 4.7 enables us to simplify consistency enforcement to a syntactical replacement (constructing s') and an investigation of a guard, specifically p(s, i, x'). The outcomes presented in Section 5 heavily rely on this simplification, substantiating the practical relevance of the theory.

Given the general form of GCSs in Theorem 4.7, the question arises as to whether an algorithm can be found to compute GCSs and whether the result is effective. In general, the answer to both questions is negative, but we can identify specific cases in which effective GCSs can be computed.

Even if the GCS si can be computed from the given command s and invariant i, the result still includes the preconditions p(s, i, x'). If such a precondition is undecidable, then the GCS will not be effective. In the proof of the next proposition, we leverage the arithmetic hierarchy [1, ch.8].

Considering a decidable i for a state space x={x1, x2} and assuming that s is i-reduced, we use Proposition 4.3 to compute the GCS si. After a complex calculation and some simplifying steps, we obtain certain results.

Furthermore, we demonstrate that the existence and uniqueness of GCSs, the commutativity result, and the fundamental compositionality result extend to the new logic. This enables the examination of computability and decidability issues. However, we find that both properties do not hold in general but are applicable to reasonable subclasses of program specifications.