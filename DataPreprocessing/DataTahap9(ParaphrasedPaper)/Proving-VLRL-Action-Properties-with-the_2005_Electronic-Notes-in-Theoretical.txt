The verification logic for rewriting logic (VLRL) is a modal action logic that captures rewrite rules as actions. It facilitates the verification of properties of systems specified in rewriting logic by enabling the definition of observations of the system's behavior. This approach empowers the user to emphasize specific system facts in each case.

The translation of a VLRL action formula to an LTL formula is detailed, and the paper demonstrates the use of the Maude model checker to prove VLRL formulae. Additionally, the appendix contains the complete specification of the example presented in the paper.

The transformation of the concurrent action "a-enter b-enter" into two steps in the transformed theory is necessitated by the approach taken by the Maude model checker, which operates using one-step rewrites. As it is impossible to predict concurrent steps in advance, each original rule is translated into a single one in the transformed theory, relying on their interleaving to account for all possible concurrent actions. The interpretation of interleaving as a concurrent action is specifically influenced by the second argument when its value is "concur."

Two operations are described involving the modification of states in the context of applying transformed rewrite rules. The first operation adds information about the action used to obtain a state, resulting in extended states. The second operation selects the subterm to which the rewrite rule will be applied and works in conjunction with the last operation to break down a state into its components.

These operations are further elaborated, emphasizing their behavior with specific reductions. The paper suggests that the presented procedure is adaptable to any system specified in rewriting logic. While minor adjustments may be necessary for systems with a commutative and associative structure, the underlying idea remains consistent. It is also noted that for arbitrary theories, the construction may be more complex, particularly if the rules involve terms from multiple sorts, which would then require appropriate modifications to the extension of operators in the signature to actions.