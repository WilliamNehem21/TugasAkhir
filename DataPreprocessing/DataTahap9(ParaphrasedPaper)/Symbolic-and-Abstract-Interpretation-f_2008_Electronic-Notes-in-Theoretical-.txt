We propose a method for abstract interpretations that is adaptable to various data abstractions and specialized for analyzing c/c++ code represented as the gimple control flow graph produced by the gcc compiler. The generic interpreter symbolically handles program transitions and maintains a history of symbolic memory valuations. This approach instantiates an abstract interpreter by selecting appropriate lattices for the data types being analyzed, leading to a specific instance of the generic transition relation. The resulting abstract interpretations can handle pointer arithmetic, type casts, unions, and aliasing issues. We demonstrate how switching between abstractions can enhance the efficiency of the verification process. These concepts have been implemented in the rt-tester tool for test automation and static analysis, which is utilized for verifying embedded systems in avionics, railways, and automotive control.

We have presented techniques for interpreting both concrete and abstract representations of c/c++ programs within the gimple framework, which generates a control flow graph model for each c/c++ function or method. These techniques have been incorporated into a tool and are currently being used for integrated module testing and static analysis of safety-critical embedded systems software in the railway and avionic domains. Applications in the field of automotive control are also being developed, with a focus on model-based test case generation. The tool's intermediate model representation uses the same class of hierarchic transition systems for both code (control flow graph) and model (e.g., UML 2.0 statechart) representation, allowing for consistent test case generation mechanisms in both code-based and model-based testing. We are currently working on a correctness proof for the abstract interpretation semantics, showing that the rules outlined in section 5 always yield a valid abstract interpretation semantics according to definition 2.1.