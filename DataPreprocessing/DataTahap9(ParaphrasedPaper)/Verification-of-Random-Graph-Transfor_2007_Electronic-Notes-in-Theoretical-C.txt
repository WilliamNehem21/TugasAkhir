The paper presents statistical findings from the verification of random graph transformation systems (GTSs) using an over-approximation technique with Petri nets as a verification method. The study also employs a counterexample-guided abstraction refinement approach to improve the approximation and utilizes a software tool called Augur to support the verification process. The central aim of the paper is to evaluate the effectiveness of this technique in successfully verifying the generated systems.

An accompanying software tool, Augur, has been developed to facilitate this verification approach, and several successful case studies have been conducted, such as the verification of red-black trees. Nonetheless, the general problem of verification remains undecidable due to the Turing-completeness of GTSs. Consequently, the study seeks to explore the practical feasibility of verifying GTSs through over-approximation with Petri nets and standard Petri net analysis techniques. This research represents an initial effort to address this question.

The paper also discusses the use of the Double Pushout (DPO) approach as a common method for graph rewriting, with a focus on supporting restricted versions of DPO rules that only permit discrete interfaces, prohibiting the preservation of edges and the merging or deletion of nodes. It is noted that the extension to non-discrete interfaces is theoretically feasible, but handling merging and deletion poses more significant challenges, particularly in modeling negative application conditions using inhibitor arcs in Petri nets.

Additionally, the paper outlines that the computation of the Petri graph is based on an approximative unfolding algorithm designed to preserve key properties of the GTS model, such as locality and concurrency, in the approximating Petri net. The paper refers to additional sources for more detailed information regarding the algorithm.

The study focuses on generating GTSs with hyperedges of arity one or two, with labeled edges and restrictions on edge labels. The paper details the nodes added to the right-hand side of the rules and emphasizes that nodes are not deleted in the process. The specific classes of GTSs are generated in a way that each class includes the previous one, and the study encompasses 100 GTSs in each class to ensure manageability.

Moreover, the paper highlights the total number of refinement steps during the verification of each class of GTSs, with the observation that this value increases rapidly across the classes. Despite this, the number of refinement steps for each GTS is capped at three.

The paper concludes that the statistical results are overall positive, indicating the potential of the approach of approximating GTSs by Petri nets for their verification. It acknowledges the need to compare these findings with results from other methods, although there is a lack of published results for random systems from other approaches at the moment.