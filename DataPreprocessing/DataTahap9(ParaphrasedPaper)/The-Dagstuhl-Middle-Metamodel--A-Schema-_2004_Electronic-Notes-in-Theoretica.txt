The Dagstuhl Middle Metamodel (DMM) is a flexible framework designed to represent static software models. Positioned as a middle-level metamodel, it focuses on capturing program-level entities and their relationships, offering a balance between lower-level abstract syntax graphs and higher-level architectural abstractions. The DMM is capable of representing models extracted from software written in prevalent object-oriented and procedural languages. This article provides an overview of the key features of the DMM.

The practical applications of the DMM have been diverse, with instances such as its utilization in an industrial reverse engineering case study by Moise and Wong, and the availability of a web-based tool that converts C++ source code into DMM using GXL syntax. Additionally, several projects are currently developing schemas that either extend or interface with the DMM.

While the DMM does not encompass a complete representation of programs, such as storing abstract syntax trees, or high-level architectural elements like pipes, filters, clients, and servers, it is designed to cater to middle-level models. Nevertheless, the DMM does not preclude the possibility of extensions addressing higher-level or lower-level concerns.

Some users of the DMM may choose to simplify their models by focusing solely on essential source objects. For instance, rather than storing source objects for every single model object, they may opt to only preserve source objects corresponding to top-level model objects (e.g., classes). However, this simplification may limit the ability of tools using these models to pinpoint the exact location of lower-level model objects within files without additional searching, although such searching can be performed in near real time.

A notable consideration when storing source code information was how to store pointers to the start and end of blocks of source code text within the source part class. One potential strategy was to use character offsets from the beginning of a file. However, the chosen approach was to use line number plus character offset in the line to avoid confusion arising from differences in line-ending conventions.

In order to achieve language transparency, the DMM generalizes several concepts, treating notions such as routine, function, and subroutine as equivalent. Similarly, a method is treated as a type of routine with a relationship to a class, and a class is defined as a structured type with additional features like methods. Despite minor semantic differences across programming languages in implementing these ideas, the DMM abstracts away these distinctions.

While some have proposed abstracting away the differences between method and routine, as well as between structured type and class, the current DMM version has retained these distinctions with the belief that it aids in comprehending the framework better.

In terms of relationships within the DMM, the domain of a sub-relationship is either the same as or a subclass of the domain of a higher-level relationship, and the same holds true for ranges. Models using the DMM are not obligated to represent information about each relationship shown, and if a model aims to represent accesses, it could utilize either.

A robust metamodel should be capable of accommodating a wide variety of tools without the need for inconsistent variants. The collaboration of several metamodel developers in creating a metamodel that can be adopted by all groups is expected to enhance its robustness. The fact that several projects have utilized the DMM with little modification serves as initial evidence of its robustness.