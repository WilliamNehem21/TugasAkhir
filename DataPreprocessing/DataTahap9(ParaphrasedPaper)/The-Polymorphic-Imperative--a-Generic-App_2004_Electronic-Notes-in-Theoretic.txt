The constructor calculus was developed to support generic operations for various data types, including abstract data types. This paper extends the basic constructor calculus to handle constructed locations, enabling the definition of a generic assignment operation that can perform in-place updates when appropriate and allocate fresh memory otherwise. This approach has the potential to reduce the space overhead associated with higher-order polymorphic languages and can express powerful algorithms such as the visitor pattern when combined with existing generic programming techniques.

Three examples are presented to illustrate the benefits of this approach. The insertion sort program demonstrates how to write a space-efficient program using higher-order functions and pattern-matching, while the converge program shows how to iterate a function efficiently in terms of space usage. The visitor program captures the visitor pattern as a generic function of a certain type.

The paper is organized as follows: Section 2 revisits key aspects of the constructor calculus. Section 3 introduces types of locations to the basic calculus, along with primitive operations for creating, reading, and writing them. Section 4 then introduces constructed locations and their corresponding operations, while Section 5 provides illustrative examples. Lastly, Section 6 concludes the paper and discusses potential future work.

The constructor calculus was initially introduced to enable the definition of generic functions such as mapping and folding, allowing these functions to operate on a broad range of datatypes. This work is further elaborated in a separate publication, which clarifies any undefined notation used in this paper and demonstrates how the concepts could be applied to the Hindley-Milner type system, specifically with regards to tuples of bits. The paper also proposes a new term form for each primitive data type to avoid exposing nested patterns in the programming language, with a notable advantage being the ability to reuse the visitor after any changes in the university structure.

This paper demonstrates that the same approach applied to imperative operations, showing that primitive operations for creating, reading from, and writing to locations can form the basis for the definition of generic functions related to these operations. The significant advantage of this approach is that the generic assignment operation can perform in-place updates when feasible and allocate fresh memory otherwise, a feature which has not been achieved in other polymorphic languages to the authors' knowledge.