The standard mobile lidar system typically incorporates various sensors, including a GPS for locating the carrier, an inertial navigation system for determining the carrier's orientation, a laser scanner for measuring distance and angle, and a digital camera for capturing texture details [1-3]. Data acquisition, as a fundamental component of the system, is crucial for mobile 3D laser scanning. While current research on mobile lidar systems focuses on integration and application, minimal attention has been given to data acquisition. In practical scenarios, data acquisition is usually performed using manufacturer-provided programs, leading to issues such as complexity, time discrepancies between sensor activation, and integration challenges within the system. Consequently, developing customized data acquisition software for the comprehensive system is deemed necessary.

To address the complexities associated with relying on sensor manufacturers' data acquisition software, this paper presents the design and implementation of a multi-sensor integrated mobile 3D laser scanning data acquisition system. This system leverages Qt's multithreading mechanism and serial programming techniques to configure 3D laser scanner parameters, as well as acquire and store multi-sensor data. Moreover, the system's versatility allows for deployment across different platforms.

The integration of the GPS, INS, and laser scanner with the data acquisition computer is facilitated through RS-232 to USB and RS-485 to USB converters. Furthermore, the system synchronizes the GPS signals with the INS and utilizes the GPS signal to trigger the digital camera automatically.

The paper demonstrates the utilization of multithreading technology to achieve concurrent multi-sensor data acquisition at the software level. By independent data acquisition by each sensor and enhancing the multi-core computer's efficiency, this approach proves to be effective. As Qt lacks a specific serial control class, the paper utilizes a third-party Qextserialport class to manage serial port control. The system's development is completed using Qt version 4.7.2 and Qt Creator 2.1.0.

The execution of the QThread is initiated by invoking the run() function, necessitating the creation of a QThread subclass instance and the implementation of the run() function. Subsequently, the start() function is called to commence the thread execution, which, by default, triggers the run() function. It is important to note that the laser scanner thread utilizes the manufacturer's API to configure the laser scanner's scanning range and parameters. Additionally, thread synchronization is achieved using the QMutex class to ensure that only one thread can access the mutex at a given time. Qt provides the QMutexLocker class, offering seamless locking and unlocking of the QMutex.