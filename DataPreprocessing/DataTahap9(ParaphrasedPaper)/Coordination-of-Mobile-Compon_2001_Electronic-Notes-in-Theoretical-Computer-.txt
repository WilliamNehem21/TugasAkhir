This paper introduces the paradigm of p!, which facilitates the composition of software components through the use of mobile channels. Components and channels in p! are mobile, meaning that components can relocate while maintaining their existing channel connections, and channels can be disconnected from one component and reconnected to another, thereby dynamically altering the communication topology between components. The p! paradigm is influenced by the iwim coordination model and builds upon previous work on a formal-logic-based component interface description language to convey the observable semantics of components. The primary focus of p! is on channels and their operations, rather than the processes or components they are connected to.

Many of the topics studied in the coordination research community are closely related to fundamental problems in component-based software engineering and mobility. The paper argues that an iwim-like coordination model can support a powerful channel-based paradigm for the composition of software components and can effectively represent the notion of mobility. The work on p! extends and builds upon previous research, introducing a language for dynamic networks of components, a compositional semantics for its asynchronous subset, and a formal model for component-based systems. Additionally, the paper discusses various types of channels and their operations in p!, as well as the mechanisms for connecting and coordinating components through channels.

The paper also describes the key concepts of components and channels in p!, explaining how a component can be instantiated at a specific location and how channels facilitate communication between component instances. The types of channels, patterns used to regulate channel input/output operations, and various input/output operations on channels like read, take, and write are also discussed.

Furthermore, the paper delves into the principles of connectors, which are sets of channels configured in a graph, and the operations used for composing and decomposing nodes in connectors. It also outlines how the constructs in the coordination language manifold can be translated to p!, and how event-based communication and a linda-like tuple space can be implemented using channels in p!.

The authors present ongoing work on p!, including the development of an implementation platform based on mobile channels and the formal modeling of mobile channels and their semantics for a calculus of channels. Additionally, the paper references previous work on a logical interface description language for components, demonstrating the evolution of their research in this area.