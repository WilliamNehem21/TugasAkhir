The distribution middleware is commonly integrated as commercial off-the-shelf software to provide distribution capabilities for critical, embedded, or large-scale applications. However, traditional middleware lacks a comprehensive analysis of its behavioral characteristics. This study presents our work on modeling middleware and verifying its behavioral properties, specifically applied to our middleware architecture, PolyORB. We also discuss the tools and techniques utilized to verify the behavioral properties of our model, including the use of Petri nets, temporal logic, and advanced algorithms to reduce the size of the state space. Furthermore, we outline the properties that we verified and evaluate our methodology.

Formal modeling and middleware engineering are typically viewed as separate domains of expertise, handled by different teams or at different stages in the design process. To bridge this gap, we propose reconciling system modeling and middleware engineering, leveraging the expertise of both ENST and LIP6. ENST has extensive experience in middleware implementations, such as Glade and Adabroker, while LIP6/SRC specializes in the development of algorithms and tools for applying formal methods to distributed systems, including the CPN-AMI tool-suite for modeling and analyzing systems using Petri nets.

These two approaches complement each other. Proof-based techniques enable the analysis of infinite systems, while model checking is suited for finite-state systems and can be automated using graphical toolkits.

We carry out an evaluation of the complexity of the computation of symmetries and state-space, noting that computational complexities are related to the size of the specification but not necessarily to the state space size.

The tools employed play a crucial role in achieving verification. Our models were developed using CPN-AMI, a Petri net environment that integrates structural analysis tools and model checkers. We utilized the GreatSPN tool-suite and its extensions for symmetric state space reduction, as well as the model checking library SPOT in conjunction with GreatSPN for LTL model checking.

As a result, we successfully verified essential middleware behavioral properties, marking a significant milestone towards the development of proof-based middleware. This required improvements to the architecture to address both distribution functions and behavioral verification requirements.