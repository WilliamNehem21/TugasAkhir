The initial implementation of the nominal unification algorithm, while straightforward, is not efficient, as anticipated. It is widely recognized that first-order unification, a specific instance of nominal unification, exhibits exponential time complexity when subterms are not shared, but linear time complexity can be achieved when terms are represented as graphs with maximal sharing. Our subsequent implementation of the nominal unification algorithm in OCaml is centered around the use of termgraphs rather than terms, introducing an additional complexity in achieving a polynomial algorithm due to the necessity of sharing subterms up to permutations of atoms. While the resulting second implementation is not linear due to the introduction of additional computations involving permutations, we can demonstrate that these extra operations are polynomial in nature.

The language syntax for nominal terms was expanded by introducing an operator for modeling name generation, along with a new form of constraint for expressing locality (denoted as a@t). Extended terms take the form a.t, where a represents a set of local names occurring in t, and t is a nominal term that may contain a@t, but not at the top level. Although we omit the unification rules handling and locality constraints in this paraphrase, they are addressed in the original paper.

The initial na√Øve implementation, as outlined above, is straightforward but ineffective. To enhance its performance, we have opted to revise the data structure used for representing terms and unification problems, ultimately representing the entire nominal unification problem as a single directed acyclic graph. This modification enables the derivation of a polynomial algorithm. The algorithm has been implemented in OCaml, a strictly typed, functional programming language with support for imperative features and object-oriented design. The subsequent section of the paper highlights the primary challenges encountered and the techniques employed.

The time complexity of nominal unification remains an area of active investigation. While unification of higher-order patterns, a closely related problem, exhibits linear time complexity, indicating the potential for achieving linear time complexity in nominal unification as well, this remains a challenging area for future research.