This paper describes the implementation of a program transformation technique that removes square roots and divisions from functional programs without recursion, resulting in code that can be precisely computed. The transformation is capable of accepting different subsets of languages as input and provides a certification mechanism when the targeted language is PVS. When applied to PVS, the transformation establishes a relationship between each function definition in the output code and its corresponding one in the input code, specifying the behavior of the produced function with respect to the input one. The implementation of the transformation in OCaml has been tested on various algorithms from the NASA ACCORD project.

In practical systems, it is common to use finite representations and analyze rounding errors using abstract interpretation or interval arithmetic. Alternatively, proving correctness properties directly on the effective implementation the system uses, such as floating point numbers, can be challenging due to the loss of mathematical intuition.

The semantics of the language used in this transformation are straightforward. For instance, the expression "let in x body scope" is interpreted as "let x = body in scope," and "let fun f(v, tv) t body scope" is defined as a function taking v as an argument of type tv and returning an element of type t. The detailed semantics of this language can be found in Chapters 3 and 4. The language permits multi-variable definitions but does not allow partial application. Although not all programs can have square roots and divisions removed, when these operations are eliminated from boolean expressions and all the definitions, the boolean values of the transformed program can be computed exactly, thus protecting the control flow of the program from rounding errors.

In the context of the MiniPVS language, every definition has a scope, allowing for the specification that the transformation is correct by preserving the semantics of the program. However, in a language without scope, it becomes necessary to introduce a mechanism that establishes a correctness relation between each input definition and its corresponding one in the output program. This includes extending the MiniPVS language by adding a constructor that includes a sub-typing predicate in every transformed definition.

The elimination of square roots and divisions in boolean expressions is detailed in the paper, and multiple rules for elimination are discussed. The transformation provides two schemes for square root elimination. It greatly reduces the size of the output file by factorizing large expressions into functions and generating new comparison functions in a separate file to be shared between different transformed programs. The transformation also allows for the restriction of the elimination to expressions built with boolean and arithmetic operators.

The implementation of the transformation, linked with PVSio, can process complete PVS specifications. The paper demonstrates the transformation of a conflict detection algorithm called cd2d, developed by NASA in the ACCORD framework. The algorithm aims to detect loss of separation between two aircraft in a two-dimensional space. A formal verification of this algorithm, assuming floating point arithmetic, is presented. 

The output program is shown to have significantly more lines than the input one, primarily due to the length of the subtyping predicates associated with the transformed functions. All of these subtyping predicates can be proven using the ["grind-reals"] strategy after unfolding the functions of the input program.

In conclusion, the paper presents a program transformation that eliminates square roots and divisions from straight-line programs, enabling exact computation with addition and multiplication. The transformation also incorporates a certifying mechanism to prove the preservation of semantics between the input and output program definitions. The elimination of square roots and divisions in a proof assistant also enables the use of certain decision procedures that were previously unable to handle such operations.