We have developed a security model to ensure data confidentiality within an application by leveraging both mandatory and discretionary access models. Our model extends the semantics of ASP with predicate conditions to create a formal security framework that dynamically checks for unauthorized information flows. As a result, all authorized communication paths are secure, with no risk of information disclosure. This theoretically-grounded contribution has the potential to have a significant impact on distributed object-based applications, particularly those that demand high levels of confidentiality over the internet. Additionally, it addresses a new issue in data confidentiality, namely the authorization of secured information flow transit.

The primary contribution of our work is to provide data confidentiality and secure information flows for asynchronous distributed object-based applications. Our proposed security model heavily relies on security policy rules with mandatory enforcements to control information flow. While information flows are typically verified statically, our focus is on dynamic verifications, achieved through an information control policy that includes discretionary rules and enables dynamic enforcement. This model is built on a strong theoretical foundation, utilizing the ASP calculus and extending its formal semantics with predicate conditions, which enables dynamic checks for unauthorized accesses. Additionally, we have defined and proven an intuitive secure information flow property to demonstrate the correctness of our security model.

We have also aimed for practical use of this model by implementing it into middlewares, such as ProActive, with a granularity that balances efficiency and fine-tunability. Our model is designed for use in scenarios where activities communicate asynchronously without shared memory, using method calls and futures for data-flow synchronization. This paper formalizes the security of information flow for this recent programming methodology, asynchronous service-oriented programming.

Furthermore, we introduce a concept of a "flow-path" to describe system-wide information flows as a route along which information travels, constructed by a chain of communicating activities. Our model ensures the security of information flow through a sound definition of information and secure communications.

Our model, unlike other solutions, offers a simple composition of complex elementary flows tailored to a specific service-oriented framework. This complexity arises from the asymmetric and asynchronous nature of ASP communications. Once these basic secure communications are in place, the security of information flows can be verified in a straightforward and intuitive manner.

In comparison to the work of Bertino et al., who deal with exception-based information flow controls in object-oriented systems, our framework shares similarities with the use of discretionary conditions to bypass strict/mandatory access controls. Additionally, our work complements the approach taken by Attali, Caromel, and Contes, who present high-level rules defining a security policy for grid applications, by focusing on communication actions and confidentiality in information flows specific to service-oriented applications using both discretionary and mandatory approaches.

Finally, we demonstrate the practical application of our model in a financial market scenario, specifically oriented to the stock market, showcasing how our model can transform source information to produce another type of information for use in trade decision processes.