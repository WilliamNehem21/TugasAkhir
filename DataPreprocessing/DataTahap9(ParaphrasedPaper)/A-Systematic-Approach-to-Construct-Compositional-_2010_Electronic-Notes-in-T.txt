To address the inherent complexity of embedded control systems, one potential approach is to adopt a modular, component-based strategy. For each deployment of such a system, such as within a specific industrial plant or railway network, an instance of the embedded system can be created by instantiating various fundamental component types and interfacing them appropriately. In many cases, the number of potential instances for these systems is extensive and essentially limitless.

The remainder of this paper is organized as follows: Section 2 provides an overview of prior research. Section 3 details the composite approach, which is further elucidated with a practical example. Section 4 outlines our intended evaluation of the approach and presents some initial findings. Finally, we summarize our work and identify potential areas for further enhancement and exploration.

Many of the concepts presented in this paper are rooted in the principles of component-based software and model-based engineering. The primary focus of this paper is not to expand upon these principles, but rather to apply these techniques to software testing, specifically in the context of model-based testing. This work builds upon a previous railway domain case study, as referenced, where the utilization of composition operators is articulated.

In most instances, composition operators are typically articulated through natural language descriptions, often accompanied by mathematical specifications, as seen in prior literature (e.g., [5, 21, 13], among others). Notably, there is a lack of formalizations of composition operators in machine-readable language, with the exception of a few basic examples for process calculi.

Numerous compositional techniques exist for mealy automata and more general state-event systems. Statecharts, for instance, can be viewed as a method for succinctly describing the composition of state-event systems. Furthermore, the use of communicating automata, as seen in tools like UPPAAL, provides an alternative approach. Additional compositional methodologies have emerged within the realm of model-driven development, some of which involve describing connectors using process calculi, akin to the approach outlined in this paper. However, these existing approaches were not directly applicable to the specific problem at hand, as they did not adequately address the needs related to markov chains.

Subsequent to the definition of component behavior, the high-level composition operator functions by composing an instance of the central interlocking unit with a series of concrete block instances. When a stimulus characterizing a particular operation on a pathway in the network enters the central interlocking unit, all blocks on that pathway receive the corresponding stimulus within the reservation protocol. If the stimulus elicits a synchronous response, a transactional pattern is employed to ensure that all blocks achieve a consistent state.

The process of describing an instance of a complex system is typically undertaken by domain experts, who often employ their own notation, such as block diagrams or railroad network diagrams. The language used within this context is derived from these notations and is designed to be familiar to domain experts. Additionally, the translation from syntactic elements of the language to instances of the components and composition operators should be straightforward to implement, with each syntactic element optimally mapping to a predetermined set of component instances and composition operator applications.

Moving forward, our objectives include the implementation of a tool to support this approach, which is near completion. We also aim to apply this approach to various examples, including an industrial control scenario. Lastly, we intend to explore how the concepts behind this approach can be leveraged for the quantitative assessment of reliability in complex systems.