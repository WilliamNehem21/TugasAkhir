The growing use of logics, especially non-classical logics, in practical applications presents challenges for automated reasoning. One key issue currently being addressed by the automated reasoning community is how to enhance the scalability of existing successful methods. This can be achieved primarily by either improving the proof calculus or by finding more effective ways of applying the rules, in addition to optimizing the implementations.

Our focus on the strategic level makes Maude an attractive platform for implementation, partly due to its support for reflection, which allows for strategic choices at run-time. This separation between deduction and strategic choices provides the flexibility to experiment with different strategies over the same deductive core, thereby simplifying theorem proving. The isolation of a strategy layer ensures that procedures are easier to understand and less error-prone, as compared to procedures where rules and strategies are mixed. Furthermore, it allows for easier modification of strategies. Although it is ideal to separate the layers, in practice, a mix of both may be necessary, as pruning the search space may be easier to implement through inference rules than tacticals in some cases.

The paper outlines a rewriting logic approach to the implementation of a connection-driven search engine for first-order logic (FOL). The implementation leverages Maude's meta-representation capabilities and explores variations of search strategies at the meta-level. This enables comparison and experimentation with strategies for proof search, as they control the same underlying rewrite theory.

The matrix representation exploits graphical metaphors and effectively transforms any first-order logic formula into a propositionally-structured disjunctive normal form (PDNF). The paper assumes that all input formulas are in PDNF. The proof search with the connection calculus is described as a connection-driven path-exploring process, which incrementally extends partial paths, updates partial substitutions, and adds copies of clauses. Iterative deepening and backtracking are utilized in the strategies for complete proof search.

The implementation components, including the connection-based search procedure, and the function for static copying of clauses are presented separately. The dynamic copy strategy incorporating a possible solution for dynamic fresh clause copies is also discussed. The paper provides the necessary details regarding the functions and strategies used in the implementation of the connection-driven search engine for FOL.