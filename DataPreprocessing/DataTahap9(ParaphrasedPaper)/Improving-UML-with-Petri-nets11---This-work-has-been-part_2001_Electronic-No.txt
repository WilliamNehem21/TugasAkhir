The Unified Modeling Language (UML) is widely known as the standard notation for object-oriented modeling, providing various diagrammatic representations for different aspects of a system under development. While UML is easy to use and visually appealing, it has been criticized for its lack of precision and formal semantics, particularly in the realm of simulation and verifiability. Efforts to improve UML, such as the UML 2.0 standardization, have been hindered by the semi-formal nature of UML, which, despite its syntactical precision, suffers from imprecise semantics akin to informal notations. Researchers and industry practitioners are exploring solutions to address this limitation, but in doing so, they risk compromising UML's inherent flexibility.

This paper proposes an approach to enhance UML with high-level timed Petri nets (HLTPNs) to introduce dynamic semantics without sacrificing UML's user-friendliness and flexibility. The paper discusses the need for formal definitions of dynamic semantics, particularly for notations that describe the behavior of the system, such as statecharts or interaction diagrams. It argues that a coherent semantic framework for UML should encompass notations that define both structural and behavioral aspects of the system.

Existing approaches to providing dynamic semantics for UML have either relied on fixed mappings to formal models, limiting the flexibility of UML, or utilized rule-based schemas that allow for more adaptable interpretations of the same model. The paper highlights challenges in extending UML's formal semantics, including the diversity of notations used for system specification and the absence of a rigid hierarchical framework. It demonstrates the suitability of Petri nets for addressing these challenges and proposes a rule-based schema to formalize a model composed of class diagrams and statecharts diagrams.

Formalizing UML's dynamic semantics with Petri nets enables formal analysis of UML specifications, supporting techniques such as simulation, reachability analysis, and model checking. However, it also raises the issue of mapping results from Petri nets back to UML specifications, which requires further development. The paper explores the potential applications of these formal analysis techniques, as well as their limitations, in handling complex system behaviors and properties expressed in UML specifications.

In conclusion, the paper highlights the potential of integrating high-level timed Petri nets with UML to provide dynamic semantics and enable formal analysis of UML specifications. It outlines the challenges and opportunities in extending UML's formal semantics, emphasizing the need for a coherent framework that encompasses both structural and behavioral aspects of system modeling.