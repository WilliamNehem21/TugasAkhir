The remainder of this paper is structured as follows: Section 2 outlines the use-case model and conceptual class model of a project, as well as introduces the concept of system state. Section 3 presents an algorithm for transforming pre and post conditions into primitive actions. Section 4 delves into the generation and execution of the prototype, which is written in Java. Finally, Section 5 discusses the conclusions drawn from the study and outlines potential future work.

We establish eight primitive actions that are applicable for implementing various system operations, categorizing them into five groups: creating an instance, deleting an instance, updating an object's property or attribute, finding an instance, and checking an object's property. The first three operations modify the system state, while the last two do not. Below, we detail these actions by describing the potential changes they provoke in the system state and the relationship between their input and output parameters.

The 'findobject' action involves checking whether an object with a specific identity and class name exists, returning true if found and false if not. It is also possible to find an object through an association in which it may be contained. In general, all objects in the specified class can be located based on a provided property.

The preconditions of a use case that changes system states can be decomposed into the creation of new objects, creation of new links, deletion of existing objects, deletion of existing links, and updating of attribute values of existing objects. On the other hand, a query use case merely returns a truth value based on the existing objects and links, as well as the attributes of those existing objects. In sum, the truth value of pre and post conditions can be ascertained from four variables, each representing a set of instances, which will be employed for implementing the decomposition of the pre and post conditions of a use case.

'Pre-objects' is a set that logs the objects that should exist prior to the execution of the use case, with the values of their attributes also specified. The elements of pre-objects can only be used as parameters of use cases.
'Post-objects' is a set that is expected to contain the objects that should exist after the execution of the use case, with the values of their attributes declared upon their declaration. The objects in post-objects can either be parameters of the use case or newly created objects resulting from the execution of an action.