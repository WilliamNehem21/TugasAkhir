Current peer-to-peer architectures do not align with the concept of a service-oriented architecture, which aims to enable the flexible assembly of services for specific applications. This inadequacy can be attributed to the lack of adaptable notations for service composition that take into account the dynamic nature characteristic of peer-to-peer architectures. In this study, a novel peer-to-peer architecture called deevolve is introduced, which provides innovative methods for composing services and handling exceptions, such as peer failures. The goal of this approach is to simplify the process of composing and maintaining service-oriented applications, even for less experienced end-users.

Software architectures represent software systems as a cohesive collection of high-level computational elements, such as components, objects, or services, along with their interactions and dependencies. Architectural development aims to move away from low-level, code-centric development toward a more flexible approach centered on the composition of self-contained building blocks. The structure of software architectures is often specified using a formal notation, such as architecture description languages (ADLs) or workflow languages.

The concept of a software architecture does not inherently dictate the actual organization, distribution, or availability of the building blocks that constitute it. Consequently, designers often rely on architectural styles to design software architectures based on established organizational principles. Common architectural styles include client-server, layered, and pipe and filters. The choice of a particular style depends on the intended use of the architecture.

The primary contribution of this research is a new approach for composing peer services within a peer-to-peer architecture to address the limitations of existing architectures and notations. A notation called peercat is introduced for the declarative composition of various peer services, as well as for defining exception handlers to outline resolution strategies in case of exceptions, such as peer failures. The structure of peer services is modeled through the composition of components, with a component model defining the valid interactions between services, both locally and remotely. Both the component model and peercat form the basis for the component-based runtime environment dee-.

The rest of this article is organized as follows. The second chapter discusses the concept of the peer-to-peer architecture style and provides an overview of existing peer-to-peer architectures. The third chapter presents the deevolve component architecture, which includes the new approach for managing compositions and handling exceptions. Chapter 4 focuses on related work, comparing the solutions presented here with other relevant approaches. Finally, in Chapter 5, the paper concludes and outlines potential future work.

Peer-to-peer computing should empower users to form groups without relying on a central authority. These self-governing communities can share, collaborate, and communicate, or participate in their own private networks. Peer groups can restrict access to their resources to authorized peers, who must first apply for group membership before joining.

The underlying peer group concept has two semantic interpretations. The first is to categorize peers into groups based on common interests or knowledge, irrespective of organizational or network boundaries. Only peers interested in or authorized for a group can receive internal group messages. The second interpretation serves technical purposes, aiming to reduce network traffic by transmitting messages to a limited number of interested peers instead of broadcasting to all.

There are numerous potential analyses for this style. An important task is to schedule all connections or dependencies to other peers. Violating a dependency during runtime, such as due to a failed peer, may result in local exceptions within a single peer or even global issues across the entire peer-to-peer architecture, making exception handling a critical challenge.

The JXTA framework is considered the most comprehensive peer-to-peer architecture due to its generic nature, but it does not address many implementation issues and analysis recommendations as outlined in section 2.2, including specifications and advertisements, as well as deployment regarding minimal composition and lazy deployment.

The concept of minimal compositions and lazy deployment aims to facilitate exception handling during the startup or deployment of a composition. However, these concepts do not currently support handling exceptions during the use of an application. Section 3.3 discusses the handling of exceptions during use time, proposing a method to track peer connections, detect exceptions, and address various types of exceptions.

To make exception handling more intuitive and easier to learn, the paper suggests instrumenting service compositions with exception handlers to enhance understanding and simplicity, especially for less experienced users. Integrating exception handlers at the code level in programming languages like Java can handle various low-level exceptions within a single component, but may not cover all possible scenarios. Hence, a more coarse-grained, declarative exception handling approach is recommended to enable end-users to intuitively instrument peercat structures through appropriate tools.