The challenge of engineering systems to be adequately correct is complex. On one hand, practical, large-scale system development often relies on semi-formal modeling approaches, like UML, which cannot be formally analyzed and checked for consistency. On the other hand, formal modeling and analysis require a level of expertise that is not common in commercial development communities, and these formal approaches are not well-integrated with the rest of the development process. This paper advocates for the development of engineering environments or frameworks that support rigorous model-driven development.

Mainstream software engineering commonly uses semi-formal techniques for model-driven development (MDD) based on diagrammatic notations, which are popular due to their graphical nature and pragmatic approach. However, these notations lack formal semantics and can lead to ambiguous, inconsistent, and non-analyzable models. To address these issues, the paper proposes an approach based on frameworks for rigorous yet practical MDD, integrating diagrams and formal modeling languages to provide a graphical interface for underlying formality.

The paper outlines a general approach to building generative frameworks and focuses on the UML+Z framework as an example. It also demonstrates how the framework can be applied to a simple problem and discusses the potential practical value of reasoning with template representations expressed in a formal language. The UML+Z framework employs a formal semantic domain to express object-oriented models and utilizes a catalogue of templates and meta-theorems to ensure model consistency. The framework also uses a technique based on drawing snapshots to describe system states and analysis, with the aim of automating the instantiation of templates and minimizing the user's exposure to Z tools.

In conclusion, the paper presents a fully formal approach to integrating formal and semi-formal modeling languages for rigorous development, using the UML+Z framework as an example. The approach leverages formal language to express patterns, building a catalogue of templates for a framework and aiming to make formal methods more practical and accessible.