This paper introduces the application of declarative debugging to datalog programs, emphasizing the reliance on program semantics rather than the computation mechanism. The proposed approach commences when the user identifies an unexpected answer, prompting the debugger to identify incorrect program relations by asking questions related to the intended semantics. Unlike declarative debuggers for other languages, which are based on computation trees, we demonstrate that computation graphs are more suitable for representing datalog computations. Additionally, we present the implementation of a debugger for the deductive database system des, an open-source project.

The paper also discusses the mismatch between program semantics and program execution in datalog programs, emphasizing the need to catch program rules or relations responsible for discrepancies between the intended and computed semantics of a query. To address this, we propose the use of computation graphs as a novel data structure for declarative debugging of datalog programs, finding them more convenient for modeling program computations compared to computation trees often used in declarative debuggers for other languages.

Furthermore, the paper provides a framework for debugging datalog programs and discusses the key concepts related to datalog computation, database relations, queries, and program semantics. Additionally, an example program for computing the parity of a base relation is presented to illustrate the proposed approach. The paper also discusses the stages involved in the debugging process, emphasizing the use of computation graphs to identify incorrect relations and error sources in datalog programs. Furthermore, it presents the challenges and limitations of declarative debugging using computation graphs, highlighting the need for new strategies for minimizing questions and ensuring completeness.
