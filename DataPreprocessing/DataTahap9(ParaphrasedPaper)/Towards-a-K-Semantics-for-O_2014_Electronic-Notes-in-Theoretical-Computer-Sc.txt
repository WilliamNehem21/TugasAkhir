The purpose of OCL is to serve as a formal specification language, providing precision that is lacking in UML models. The OMG standard of OCL defines the language's syntax and, to some extent, its semantics. Despite numerous academic works on OCL and references in related literature, there is currently no commercial tool that fully supports it.

One of the main issues lies in the imprecise, incomplete, and flawed nature of the OCL standard. Similar problems can be found in other languages with informally described semantics in officially declared standards, such as the C language. Examples of these problems include the non-deterministic cast operations from unordered to ordered sets and bags, the ambiguity surrounding whether a singleton set {a} and the set element a should be distinct, and issues arising from the presence of an invalid value.

The rest of the paper is organized as follows: Section 2 provides background information on UML, OCL, and the K framework, while Section 3 presents the K definition of OCL and demonstrates it with examples. Section 4 includes conclusions, related work, and discussions on future research. Our online tool, which implements our definition, is also available.

The annotated grammar of our K definition of OCL is provided in Appendix A. Currently, our support includes usual integer, real, and boolean expressions (including boolean expressions with quantifiers), strings and concatenation, collection expressions, navigation, iterators, and other expressions (e.g., let-in, if-then-else). Since the K definitions are modular, new expressions can be added without altering the existing ones. It is important to note that OCL is an evolving language, and the K framework can assist in experimenting with new constructs introduced in the language.

Expressions in the form of a/0 are not reduced to a valid OCL value, as they represent the invalid value in the OCL standard. Our definition does not require explicit rules for propagating the invalid value; expressions containing an undefined value are also undefined because they do not reduce to a value.

The K framework employs mechanisms such as the substitution operator, which is implemented using a visitor pattern, as well as automatic generation of rules evaluating arguments of strict operators. Regarding related work, the informative annex of the OCL standard is based on solid set-theoretical foundations, despite its numerous typos and shortcomings. However, we are not aware of any formal tools that implement the set-theoretical semantics of the OCL standard.