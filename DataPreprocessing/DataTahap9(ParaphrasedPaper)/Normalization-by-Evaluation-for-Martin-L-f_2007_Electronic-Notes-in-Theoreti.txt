We extend our appreciation to Thierry Coquand for sharing valuable insights and engaging in numerous discussions regarding normalization for type theory in general, and for providing feedback on normalization by evaluation specifically. For instance, Coquand highlighted the elegance of composing the algorithm for lambda terms in the style of Curry, as opposed to the lambda terms in the style of Church that we initially utilized. We also express gratitude to the anonymous referees for their meticulous review and feedback on earlier drafts of this article.

To address the disparity between the mathematical treatment and the Haskell program, the inclusion of strictness annotations in the datatypes tm and d could potentially reconcile the issue and precisely model the construction of d. Nonetheless, as we have contended, the Haskell program functions correctly even in the absence of these annotations. Alternatively, one could transition to a strict language such as ML to establish a direct correspondence with the mathematical development.