The study of inheritance mechanisms in programming languages has been pursued through various approaches, including the analysis of classes as a fundamental construct or as a combination of extensible objects and traditional data abstraction. However, there remains a need for a deeper mathematical understanding of classes, especially in comparison to objects. Several translations of object-based calculi into different typed lambda calculi have been proposed, emphasizing the mathematical significance of objects.

It is suggested that further exploration of the relationship between object-oriented and functional paradigms could provide valuable insights into the concept of classes, despite the origins of object-orientation in the imperative paradigm. The functional setting of the Cuch machine, which offers algebraic data types and the ability to define functions over disjoint sums of algebras, is seen as a natural context for extending modeling capabilities to encompass class concepts, inheritance, dynamic method lookup, and information hiding. Building on Bohm's insight into the relationship between the data-driven programming style of the Cuch machine and object-oriented programming, an investigation is proposed to encode object-oriented constructs into the Cuch machine, leveraging the features of the Cuch machine described in Section 2. To formalize these concepts, a toy class-based language called Cuch++ is introduced, embodying typical features of untyped class-based languages, and an encoding into the Cuch machine is demonstrated. This encoding interprets classes as algebras, object constructors as algebraic constructors, objects as terms of such algebras, and methods as recursively defined functions, taking advantage of the ability to define overloaded functions to manage method overriding and mimic dynamic method lookup within lambda calculus. The preliminary investigations reveal that common concepts of object-oriented languages, such as inheritance, dynamic method lookup, and a primitive form of encapsulation, are naturally interpreted in the language Cuch.

The paper also touches upon the work by Backus, who proposed a purely functional language based on combinators as an alternative to imperative programming languages. Additionally, the introduction of algebraic data types and relative mappings of algebras within lambda terms is mentioned, with reference to the methodology introduced by Bohm and Berarducci for representing term algebras and iteratively defined functions using second-order typed normal forms.

Following the discussion of Cuch and its relationship to object-oriented programming, the syntax and operational semantics of Cuch++ are outlined. The paper then explains the basic ideas behind the encoding of Cuch++ into the Cuch machine, illustrating a variation of the canonical class definitions and providing insight into the structure of the class definitions in Cuch++.

The paper wraps up by discussing the potential of the Cuch++-to-Cuch encoding and outlining future directions for the theoretical analysis of the encoding. The authors also propose the study of further extensions to Cuch++ and the encoding, aiming to address issues such as multiple inheritance and more refined encapsulation rules. Finally, the possibility of designing a typed Cuch++ without recursive types and the potential use of Cuch++ in a software engineering setting are briefly mentioned.

In summary, the paper presents a study on the encoding of object-oriented features in the Cuch machine, highlighting the potential for further exploration of the relationship between object-oriented and functional paradigms and the extension of Cuch++ with object-oriented features. It also discusses the related work by Backus and the methodology introduced by Bohm and Berarducci for representing algebraic data types within lambda terms. Additionally, the paper outlines future directions for extending Cuch++ and the metatheoretical analysis of the encoding.