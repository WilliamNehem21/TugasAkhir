A novel dynamic data structure was recently introduced in 2011. While various algorithms for matrix multiplication exist, none have utilized the r-train data structure for storing and multiplying matrices. This paper presents an algorithm for matrix multiplication using the r-train data structure for parallel machines.

The r-train's start represents the address of the pilot, which can be viewed as a linked list in memory. As such, the start points to the data c1 in memory. The pilot's length (l) can be any natural number, and the arrays of the tcs are each of fixed length r, storing data elements (including elements) of a common datatype, where r is a natural number. Therefore, 1-train, 60-train, 75-train, and 100-train are examples of r-train, whereas 0-train is undefined.

The r-train data structure is a novel and straightforward 2-tier data structure with convenient methods for executing fundamental operations such as insertion, deletion, and searching for a large amount of data, particularly in parallel computing. Notably, the r-train data structure can store x number of elements of identical datatype, even if an array of size x of the same elements cannot be stored in memory at a given moment. Additionally, the data can be accessed using indices.

The status of a coach reflects the availability of a seat for storing a data element at that moment. The status of the coach may change over time. Each coach of an r-train can accommodate exactly r data elements serially numbered, with each data element referred to as a passenger. Therefore, each coach of an r-train points to an array of r passengers. As per the definition, the data element ei is not a passenger for any i.

The proposed algorithm for matrix multiplication using the r-train data structure on a parallel system with m processors and unique IDs for identification is as follows:

Step 1 and Step 2 can be completed in O(n) time. Steps 3, 4, 5, 6, 8, and 9 can be completed in O(1) time. Step 8 is repeated O(n) times due to the loop in Step 7. Utilizing the sum and product rule of computing complexity, the complexity of the algorithm is found to be O(n) if m equals n^2.