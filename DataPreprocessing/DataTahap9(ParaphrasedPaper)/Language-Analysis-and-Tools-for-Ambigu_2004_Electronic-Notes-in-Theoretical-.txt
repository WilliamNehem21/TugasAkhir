Automated tools for generating lexers and parsers for programming languages have a rich history. Although widely-used generators such as flex and bison are capable of handling many languages, they often struggle to deal with ambiguities in input streams that arise in embedded languages, legacy languages, and when programming by voice. In response to this, we have developed Blender, a combined lexer and parser generator that allows designers to describe various classes of embedded languages and resolve ambiguities in spoken input and legacy languages. We have also improved the incremental lexing and parsing algorithms in our harmonia framework to analyze lexical, syntactic, and semantic ambiguities, creating a robust platform for building the next generation of language analysis tools.

This paper outlines our approach to handling four types of input streams, three of which are ambiguous, and presents our solutions in section 3. It also addresses the handling of a fifth type of input stream in sections 4 to 7, drawing on related work summarized in section 8.

One significant challenge arises in programming by voice, where homophones with the same lexical type can lead to ambiguities in the program's meaning. Additionally, voice recognition errors or misspellings can result in multiple spellings of a single lexical type. To address these issues, harmonia provides high-level transformation operations in the program representation and integrates with programming editors to offer interactive, on-line services during program composition, editing, and navigation.

Blender supports each user language through plug-in modules that include lexical, syntax, and semantic analysis definitions. The framework maintains a versioned, annotated parse tree to track user edits and executed analyses. When users make edits, incremental lexer and parser algorithms are used to analyze and reconcile the changes in the parse tree.

The paper also discusses the incremental lexing and parsing process, which is the typical state of the analysis framework. It further explores how Blender handles automated semantic error recovery by accommodating misspelled identifiers in an incremental setting, and how it manages multiple spellings of spoken words with different lexical types.

Blender allows the specification of both outer and inner languages in embedded languages through independent language definitions, enabling the composition of language analysis tools. Techniques for identifying boundaries between inner and outer languages are described, including the use of special program editors and regular expression matching.

Lexical descriptions in Blender are written in a variant of the format used by flex, while grammar descriptions are written in a variant of the bison format. The paper details how boundary tokens for an inner language are specified with the outer language, and how grammars for multiple languages are merged in Blender.

To ensure that input streams for multiple parsers can diverge without compromising performance, the paper introduces a new data structure mapping lookahead tokens to the parsers with that lookahead.

Finally, the paper addresses the potential challenges of adding incrementality and the described extensions to scannerless GLR parsers, emphasizing the importance of efficient incremental analysis in maintaining performance.