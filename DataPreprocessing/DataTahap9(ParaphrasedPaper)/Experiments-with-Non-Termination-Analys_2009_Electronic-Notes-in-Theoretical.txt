The paper explores non-termination analysis, which aims to demonstrate that computer programs, or segments thereof, do not terminate. This is significant because non-termination is often an unexpected behavior of computer programs and can reveal flaws in their code. While existing research has established methods for proving non-termination of logic programs and term rewriting systems, the same cannot be said for imperative programs. The paper presents a technique for proving non-termination of imperative, bytecode programs by linking their non-termination to that of a (constraint) logic program. Additionally, the paper shows how the non-termination test can effectively aid a termination test by circumventing the costly search for termination proofs in sections of the code where such proofs do not exist.

The paper marks the initial attempt at automatically deriving non-termination proofs for Java bytecode programs. Building on previous work related to the termination analysis of Java bytecode using a tool called julia+binterm, the paper demonstrates that the non-termination of a constraint logic program generated from the bytecode program implies the non-termination of the original program. By leveraging the same tool used for termination analysis, the paper establishes a method for proving non-termination of Java bytecode programs based on earlier non-termination analysis of logic programs. While these findings do not offer a definitive solution to the challenge of non-termination analysis of Java bytecode programs, they represent a starting point and underline the inadequacies of the current approach, which need to be addressed for non-termination analysis to be applicable to real Java and Java bytecode software.

The paper points out the complexities involved in the static analysis of Java bytecode due to its lack of explicit structure and the utilization of a stack of temporary variables. After analyzing the execution of each bytecode instruction, the paper introduces the concept of path-length for variables, which is utilized to establish the relationship between the size of variables at different program points within the same method. This is expressed in terms of a constraint logic program over linear constraints, which aids in deriving bounds on variable values, crucial for termination and non-termination analyses.

Furthermore, the paper addresses the limitations in the translation of programs into constraint logic programs, leading to potential discrepancies in non-termination results. The paper lays out simple conditions for inferring non-terminating queries for constraint logic programs and proposes methods to infer non-terminating queries. It also discusses the implications of non-termination tests in simplifying the termination analysis of Java bytecode programs, as well as the associated efficiency gains resulting from the removal of non-terminating clauses.

The paper presents these findings as a step forward in the direction of non-termination analysis for Java bytecode programs and emphasizes the need to address the identified weaknesses to make non-termination analysis applicable to real-world Java and Java bytecode software.