The paper presents a formal model of strategic rewriting that incorporates generic traversal techniques. The model introduces a calculus that includes a strategy operator, denoted as 2(), which applies a given strategy to all immediate subterms. To create a typeful model for generic strategies, the paper identifies generic types that are independent of specific signatures. The focus of the article is on the generic type "tp," which represents type-preserving strategies, and its integration into a standard many-sorted type system for rewriting. In order to instantiate tp, a left-biased type-driven choice operator known as "&" is introduced. This operator selects the left argument (a many-sorted strategy) if the type of the given term matches, and defaults to the right argument (a generic default) otherwise. The paper argues that the semantics of strategy application must depend on the type to a certain extent.

The paper also discusses the use of generic traversal strategies in language implementation, such as algorithms for free variable collection, substitution, unification, and others, in a language-independent manner. It outlines an extension of the syntax for strategy types to include a case for generic types, focusing specifically on the generic type "tp." The article introduces new strategy combinators through a mechanism called strategy definitions and discusses implementation issues. It also demonstrates the sensibility of the proposed type system for strategies from a strategic programmer's perspective and suggests that it disciplines strategic programs employing generic traversals in a useful and non-restrictive manner. Additionally, it shows that generic type-preserving strategies can be implemented relatively easily.

The article concludes with acknowledgments of support from funding sources and gratitude towards individuals who contributed to the development of the ideas presented in the paper. It also briefly mentions the inspiration drawn from existing rewriting calculi and highlights areas for future work, such as integrating the results into existing rewriting calculi and addressing higher-order properties in the context of the-calculus.