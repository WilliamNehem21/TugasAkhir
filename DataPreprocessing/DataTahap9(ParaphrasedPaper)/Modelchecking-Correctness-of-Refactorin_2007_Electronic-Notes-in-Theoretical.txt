The paper discusses the application of refactoring, a technique commonly used by software developers to modify software without altering its behavior, to both programs and formal specifications. It emphasizes the importance of behavior preservation during the process of refactoring and presents an example of an Object-Z class, on which it illustrates four different method refactorings. The paper also introduces SAL (Symbolic Analysis Laboratory) as a framework for program analysis, theorem proving, and model checking of state-transition systems, and explains the basic constructs and language features of SAL. Furthermore, it discusses the implications of applying refactoring to formal specifications and the different scopes of refactorings in specifications and programs. The paper concludes by addressing the translation of Z specifications into SAL and the need for a total transition relation to prevent deadlocks.