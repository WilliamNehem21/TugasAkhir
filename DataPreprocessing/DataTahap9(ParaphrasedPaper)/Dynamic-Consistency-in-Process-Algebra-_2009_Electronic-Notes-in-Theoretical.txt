The coordination modelling language paradigm focuses on the collaboration between components through dynamic constraints. Component dynamics are consistently specified at different abstraction levels within the paradigm model. To facilitate automated verification of paradigm models, a translation of the paradigm into process algebra is provided. The paper presents examples and discusses guidelines for systematically translating paradigm models into the process algebra ACP. Additionally, verification results utilizing the MCRL2 toolset are presented.

The paper also discusses other connections from software architecture to automated verification, including the pipeline from UML via Rebeca and Promela to the Spin model-checker, and from UML via Object-Z and CSP to the FDR model-checker. Furthermore, the paper proposes coordination-driven prototyping utilizing process algebra driven from the CCS framework. In the Titan framework, CCS plays a unifying role in a heterogeneous environment for aspect-oriented software engineering.

The structure of the paper is outlined, with Section 2 providing an overview of the basics of paradigm alongside two running examples. Section 3 introduces process algebra briefly. In Section 4, a detailed translation of the paradigm models of the two protocols is provided, followed by a general translation of paradigm models in Section 5. Finally, Section 6 concludes the paper.

The paper briefly describes the main notions of paradigm in this section and explains the main aspects of the paradigm approach using two examples that are used as running examples throughout the paper. Additionally, an architectural diagram for collaborating components is introduced, setting the stage for various notions of dynamics and emphasizing where the paradigm notions are relevant and how consistency of dynamics can be ensured.

The paper also discusses the difference with the non-deterministic protocol, providing examples of synchronization and coordination between components. It explains how the behavior of the parallel composition of two processes is obtained and how processes can communicate through synchronization on certain actions. Furthermore, it describes how action synchronization is user-defined by a communication function in ACP, which can involve two or more arguments, enabling multi-party synchronization.

The translation of the global standard "clienti(cs)" for the round-robin case is discussed, and the process of formulating a general paradigm model in ACP is explained, with a focus on addressing the hierarchical case and action determinism.

The paper discusses the application of various verification techniques to a process algebraic specification via the translation, enabling the analysis of the correctness of paradigm models. Using the MCRL2 toolset, the correctness of the paradigm models in the examples is confirmed, demonstrating that the translation into ACP provides a semantical definition by itself.