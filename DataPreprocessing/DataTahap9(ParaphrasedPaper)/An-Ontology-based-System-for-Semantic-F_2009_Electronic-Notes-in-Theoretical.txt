This paper presents a Haskell-based system for approximately filtering XML data using ontology. The system allows users to extract meaningful data and filter out irrelevant or misleading content from XML documents. It provides a declarative language for defining XML patterns and ontology queries to express both syntactic and semantic filtering criteria. The system can be accessed through a web application with a user-friendly graphical interface. The paper also includes examples to demonstrate the effectiveness of the filtering methodology.

To address the challenge of information overload, there have been significant efforts in developing query and filtering languages for consulting XML documents. While the W3C has established standard languages like XQuery and XPath for querying XML contents, numerous independent proposals with different characteristics have also been developed. Some programming languages, such as Xcentric, CDuce, and XDuce, support XML processing but exhibit limitations in exact matching behavior and consideration of semantic information.

This work introduces a methodology for filtering information from XML documents using approximate pattern matching and a declarative pattern-based language for XML filtering with an approximate pattern-matching engine. It also integrates the approximate pattern-matching engine with ontology reasoning capabilities to enable semantic data filtering.

The paper presents a framework that connects the filtering engine with the ontology reasoner using an extended version of the DIG interface, a standard API for description logic systems supported by various ontology reasoners. The paper discusses related work such as DigXcerpt, which extends the XML query language Xcerpt to incorporate ontology reasoning but only supports exact query matching, unlike the proposed methodology, which allows more flexible matching and ranking based on computed similarity degree.

The paper also touches upon the use of the Resource Description Framework (RDF) to enhance XML data with semantic annotations and briefly outlines the plan of the paper, including sections on the DIG interface languages, the filtering language, the Xphil system architecture, the web interface, and a conclusion.

Additionally, the paper introduces the concept of the "univ" ontology, which models people and courses as individuals with hierarchical position concepts represented. It describes the DIG interface languages, such as the "ask" language, for querying ontologies and ontology reasoners, as well as filtering operators for exact and approximate filtering based on universal and existential semantics. Conditions for refining pattern search in XML documents, along with examples, are also discussed.