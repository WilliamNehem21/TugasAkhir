Given the inherent criticality of embedded systems, it is imperative to ensure their tolerance to processor failures, which may necessitate their distribution. Our focus is on formal methods for modeling fault-tolerant systems, with a specific investigation into the use of discrete controller synthesis (DCS). The advantage of employing DCS lies in the correctness of the resulting system and the ease of modifying the controller. We aim to apply error treatment techniques to address processor failures in distributed architectures, leveraging hardware redundancy without adding extra processors. Our approach involves specifying a LTS for the processors, with an objective to be met by the controlled system, and obtaining a controller with DCS to restrict transitions and inhibit those that could compromise the objective.

The real-time aspect of these systems stems from the time costs of periodic tasks, which are analyzed using worst-case execution time (WCET) analysis. Real-time constraints are enforced by assigning maximal CPU load bounds to each processor, based on their capacity and power consumption. The system model is a composition of LTSs, with each processor having a quantitative power capacity bound. It is crucial to specify how failures occur in the considered patterns, and this can be influenced by the designer's knowledge of the system and the failure assumptions.

The fault-tolerance policy is declared through a set of properties and objectives, which characterize failed states and the notion of fulfilling functionality despite faults. For instance, one of the properties involves ensuring that a task is not active on a failed processor, and the synthesis objective is to make this true. The environment model plays a crucial role in determining whether a solution can be found for these fault-tolerance objectives. We have demonstrated how to automatically produce a fault-tolerant controller for a real-time distributed system using DCS and LTS models, addressing consistent execution, functionality fulfillment, and optimization objectives.

Overall, our method is limited by the current state of existing DCS tools, similar to the limitations of model checking tools. We anticipate future improvements in DCS, driven by advancements in areas such as symbolic state space exploration and abstract interpretation. In addition, the application of these techniques to different synthesis objectives opens up possibilities for further practical use, such as in platform-based design for diverse devices.