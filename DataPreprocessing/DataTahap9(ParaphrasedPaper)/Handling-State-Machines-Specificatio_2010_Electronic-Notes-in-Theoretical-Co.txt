The gatel testing environment for Lustre/Scade programs is proposed, featuring a resolution procedure based on a clp interpretation of its input language. This paper presents a two-tier extension of gatel to incorporate state-machine descriptions, achieved through a compilation of these constructs into multi-clocked expressions. The first contribution is the definition of explicit constraints to manage the clock type hierarchy in gatel, while the second contribution is the definition of constraints reflecting properties of state-machines built by the Scade compilation schema.

The paper's contributions can be divided into two parts: the first part describes an extension of gatel for multi-clocked operators, and the second part proposes improvements based on the compilation process to refine state-machine constraints. The paper introduces the Lustre language and its associated notion of clocks, followed by an overview of the translation process between state-machines and a clocked program. Section 3 presents the basic mechanisms used in gatel and outlines the major updates used for the clock extension. Section 4 then defines specific state-machine deduction rules, and a case study based on a simplified cruise control model is presented in Section 5 to demonstrate the efficiency of the proposal compared to the initial two solutions.

The paper describes the use of an enumerated type to represent the states, with three flows created based on this type to carry out the dynamic semantics of the state machine. These flows automatically adapt to the structure of the state machine.

The testing tool gatel is based on a resolution procedure that relies on an interpretation of Lustre operators through constraints programming. The paper discusses simulating the behavior of certain operators to manage the clocked extension and highlights potential inefficiencies of this approach compared to a direct interpretation of these operators.

The main component of gatel is its resolution engine, which produces a matrix storing logical variables associated with identifiers and cycles. The resolution engine uses deterministic rules to manage cycle initialization and filtering procedures.

The paper also discusses properties and constraints related to state-machines and their clock hierarchy, proposing to strengthen these propositions to establish a direct link between the transition function and the clock hierarchy. Additionally, a dedicated constraint for managing the selected state in the system is proposed, adding to the system a dedicated constraint called sm that relates variables at a given cycle.