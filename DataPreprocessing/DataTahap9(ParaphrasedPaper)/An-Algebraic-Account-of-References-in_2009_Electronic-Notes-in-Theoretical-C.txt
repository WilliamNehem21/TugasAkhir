The research investigates the algebraic structure of a higher-order store programming language in the style of ML references. Instead of directly examining the operational semantics of the language, the study focuses on its fully abstract game semantics as defined by Abramsky, Honda, and McCusker a decade ago. This alternative depiction of the language is conceptually elegant, except for one significant aspect: the interactive behavior of the higher-order memory cell is represented in the model by a strategy cell, the definition of which remains somewhat enigmatic. The objective of this work is to clarify this point by offering a precise algebraic definition of the strategy. The conceptual reconstruction of the memory cell is based on the notion that a general reference essentially functions as a linear feedback (or trace operator) in an ambient category of Conway games and strategies. This analysis leads to a purely axiomatic proof of the model's soundness, based on a natural refinement of the replication modality of tensor logic.

Abramsky, Honda, and McCusker pursued a similar line of inquiry and established a comparable result for a call-by-value language with a higher-order store in the style of ML general references. General references have the capability to store not only ground type values (such as integers and booleans) but also higher types (procedures, higher-order functions, or references themselves). They provide a useful and powerful programming construct, allowing for the writing, reading, and transmission of higher-order information through the store. The development of a fully abstract model characterizing programs written in this paradigm was a significant achievement in game semantics.

The decision to relax linear logic into tensor logic is primarily driven by the ability to define a general notion of replication modality for categories of games and strategies. This move enables the definition of a replication modality as a monoidal adjunction between the dialogue category C and a cartesian category M within a category of games and strategies. However, one missing component in Conway games is the lack of a concept of well-bracketing, which is essential for constraining the strategies of arena games. The recent construction of a compact closed category of Conway games and well-bracketed strategies addresses this issue. This construction goes beyond addressing this limited aspect and demonstrates the very notion of well-bracketing as an effect of linearity conditions on games and strategies. While this logical aspect is fundamental, its discussion is beyond the scope of this work.

The category of call-by-value games defined by Abramsky, Honda, and McCusker is shown to be isomorphic to a well-understood subcategory of the Kleisli category induced by the replication modality on the category of bracketed games. While their full abstraction result could be directly applied to obtain a full abstraction result for the model, the novelty of this work lies in the conceptual and elegant formulation used to interpret a memory cell of type A.

An issue with the game-theoretic approach to references is the necessity of extending the programming language with a "bad variable constructor" to achieve the expected full abstraction result characterizing programs as visible (or thread-independent) well-bracketed strategies. This issue is addressed and rectified in the context of ground type references by refining the notion of arena game. The refinement involves introducing new relations on plays and strategies to express a form of uniformity characterizing the interaction of every memory cell strategy.

There are few axiomatic approaches to programming languages based on game semantics. Three notable examples include Abramsky's purely axiomatic proof of definability for PCF and his proof of full completeness for models of ML polymorphic types, developed in collaboration with Lenisa. Laird also worked on an axiomatic proof of definability for a language with higher-order store, starting from the definition of an asymmetric tensor product on games. A strategy interpreting a memory cell of type A is defined using the language of Conway games. The series of algebraic properties that this strategy satisfies is then described.

In the realm of the original programming language, it would be interesting to integrate the significantly expanded notion of control provided by linear logic into the type system. Additionally, exploring the models defined by McCusker and Murawski to avoid the bad variable constructor in the language's definition could yield valuable insights. There is a belief that much work remains to be done to understand the algebraic structure of memory in game semantics and to connect the game models based on visible or thread-independent strategies with the monadic approach to general references. This approach is based on innocent strategies and a state monad defined by recursion on all types.