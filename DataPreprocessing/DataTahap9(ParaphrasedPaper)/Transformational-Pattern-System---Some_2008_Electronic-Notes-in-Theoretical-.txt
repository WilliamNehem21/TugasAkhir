In the context of model-driven architecture (MDA), most mechanisms for model transformation aim to achieve rigorously and unambiguously defined, fully automatic transformations. However, it is argued that even when such techniques are fully mature, they may not be applicable in all cases of software development. Difficult cases may benefit from flexible and semi-automatic open transformations. To address this, a mechanism known as the transformational pattern system is presented, which combines human-made decisions and intentionally vague and incomplete rules to perform a transformation.

It is highlighted that automatic transformations do not simplify complexity, but instead shift the burden from a designer creating a target model to a transformation engineer creating a transformation. The transformation must solve a more generic problem and apply to more cases, making it more difficult to build. While the relative development cost is reduced when the transformation is applied to several products, it may not be cost-efficient for a unique product or a small organization to develop and maintain another piece of software. 

The paper proposes an experimental semi-automatic transformation mechanism based on transformational patterns, which extends previous work by adding a method for joining multiple patterns together. This mechanism is fully transparent, allowing users to choose the order of tasks and make manual changes to the models. However, it does not address problems caused by incremental changes to the source model at this time.

The model, where each node has a type and can have named values attached, triggers an associated action when production is used. The productions reduce the input graph step by step, while the actions construct the resulting pattern system. This graph reduction system is used to recognize or parse the source graph.

An illustrative example is provided with the transformation from a structure model (a UML class diagram) into a relational database schema. Although seemingly simple, the transformation involves complexities, options, and exceptions, such as interpreting and transforming composition, inheritance, and other relations between classes, for which there may not always be sufficient information in the source model. Transformational patterns, with their flexibility and interactive nature, address some of these difficulties.

Triple graph grammars, which span three related graphs for the source model, the target model, and the relationships between the models, are described. Each production alters all the graphs (models) simultaneously, keeping them synchronized and conformant with their schemas (metamodels). A transformational pattern system contains elements for the source and target models and their relations, representing a group of triple graphs due to the flexibility in binding.

Additions to the source or target models can be handled simply by applying further productions with triple graph grammars. However, incrementality for pattern systems has not been addressed as of yet. Although a transformational pattern itself is not directed, a derived task graph always is due to the assembly rules creating a bias towards a direction.

Once all the roles are bound, a transformational pattern system becomes a mapping between the source and target models, which in some ways resembles model mapping techniques, although typically bidirectional, whereas transformational patterns are not. Incrementality and the need for better integration of the pattern assembly mechanism with the pattern tool to improve the user experience are highlighted as areas for further research and development.

Furthermore, the intention to strengthen the theoretical foundation of the approach with graph grammars is expressed. The resemblance of transformation pattern systems to graph processes is identified as an interesting connection to be explored further.