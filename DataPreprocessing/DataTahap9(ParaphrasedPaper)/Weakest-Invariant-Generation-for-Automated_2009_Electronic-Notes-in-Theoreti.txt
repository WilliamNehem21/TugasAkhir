The paper discusses efficient techniques for identifying the largest set of legitimate states for a given program. It introduces an algorithm to automatically generate the weakest invariant using program transitions and specifications, with the goal of ensuring that the program satisfies its safety and liveness specifications. The algorithm involves three main components: the invariant generator, the safety checker, and the liveness checker.

The algorithm starts by initializing the invariant to be the initial invariant excluding states specified in the safety specification. It then performs a fixpoint computation to remove undesired states from the initial invariant, continuing until a fixpoint is reached and returning the desired invariants. In cases where program actions are partitioned into system actions and environment actions, the algorithm is adjusted accordingly for safety and liveness checking.

The paper includes case studies of the token ring program and the mutual exclusion program to demonstrate the feasibility and applicability of the algorithm in generating the weakest invariant. It also discusses the state space of the program in terms of its variables and domains. The paper employs a top-down approach for automatic invariant generation, which initializes the invariant to be the entire state space and later removes states that violate predefined safety and liveness specifications.

The paper asserts that the algorithm generated the exact same invariant used in the automation of fault-tolerance for the case studies, and notes that the time needed to generate such invariants was very small. Additionally, it provides information on the hardware and software used for running the case studies, and discusses previous techniques for verifying program correctness and improving automatic invariant generation.