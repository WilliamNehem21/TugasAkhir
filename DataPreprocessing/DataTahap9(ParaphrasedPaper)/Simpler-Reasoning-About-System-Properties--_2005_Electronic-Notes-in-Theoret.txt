Demonstrating proofs for system specifications can be challenging, especially when dealing with extensive specifications. By leveraging abstraction and refinement, we suggest employing a proof technique that simplifies the process. Our method is applied to circus specifications (a combination of Z and CSP) with varying complexities, and notably, all proofs are conducted in Z, even for those involving reactive behavior.

If we can establish that Protnat is a refinement of Aprotnat, then we can infer that Protnat is also free from deadlocks and divergences. Additionally, the primary action of Protnat must uphold the state invariants; otherwise, Aprotnat would not be divergence-free. The assertion and verification that Protnat is a refinement of Aprotnat are detailed in Theorem 3.2, which will involve the application of the following three laws.

Loadfeedbelt: This action is activated only when there is no plate on the belt. The arrival of a new plate to the belt is signaled by the synchronization event on the channel start. The action's effect is to modify the status of the feed belt accordingly.

Refinement does not directly reference the formal semantics of the specification language in question. Instead, the specifics of the semantic model are obscured through the application of refinement laws. This leaves us with the side conditions for these laws, which must be addressed. These side conditions are in the form of Z or first-order logic. Consequently, the logical framework of the proofs is detached from the semantic model of the specification language. This allows for clear and comprehensible proofs, thus enhancing readability and understanding. For instance, consider attempting to demonstrate the same proof using traditional methods.