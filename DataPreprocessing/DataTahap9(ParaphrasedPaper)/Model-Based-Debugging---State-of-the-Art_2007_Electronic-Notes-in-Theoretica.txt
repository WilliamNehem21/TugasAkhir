A significant amount of research has been conducted on model-based software debugging (MBSD) in the last decade. The paper provides an overview of the underlying concepts and discusses various approaches as abstractions of the specific semantics of programming languages. It compares the MBSD framework with other established automated debugging methods and addresses open issues, challenges, and potential future directions of MBSD.

In the software domain, substituting the program with the concrete system and observing its behavior on a set of test cases seems feasible. However, in practice, it is difficult to achieve this due to the requirement for a formal description of the correct program to detect discrepancies. Furthermore, formal models are rarely provided in current software engineering practices, and if available, they often encounter maintenance issues where changes in the desired functionality of the program are not reflected in the formal models. Additionally, formal models typically do not encompass the complete behavior of the system and are usually limited to a specific property of the program.

The paper presents a dependency-based model designed to locate faults in a subset of the VHDL programming language. This model expresses concurrent processes as components and the signals used and changed by each process as connections. The paper also introduces an interactive debugger for Lisp programs, Debussi, which is based on dependencies between expressions and employs simple heuristics to filter candidate explanations.

Furthermore, the paper discusses the need for complementary models not derived from the program to locate faults involving missing statements or assignments to wrong variables. The paper also addresses approaches to strengthen model representations and conflict extraction procedures to exclude spurious explanations and improve precision.

The paper identifies several challenging issues in MBSD, including how to select appropriate models and fault assumptions for a given program and test cases, and the complexity of the debugging process and the quality of the results depending on the selected model. The paper also discusses the need for a more detailed analysis quantifying the differences between different models, which remains a topic for future work.