The secspaces coordination model is a data-driven approach that uses a tuple-based coordination space with mechanisms for controlling and authenticating access to entries. The paper addresses a limitation of secspaces, which is its inability to support atomic access to multiple partitions at once. To overcome this limitation, the paper introduces an extended secspaces model that incorporates an operator for combining partitions. This new operator allows output operations to make an entry visible in multiple partitions and enables data-retrieval operations to access multiple partitions atomically. The paper formally defines this concept using a process calculus and illustrates the flexibility of the new mechanism through examples.

The coordination languages and models are designed to provide mechanisms and languages for developing distributed applications, with separate descriptions for the internal behavior of active components and their interdependencies. General interaction models have been developed to achieve this separation, with one approach involving the separation of computation from interaction information and locating the latter within a coordination infrastructure. In the context of shared data space, this approach is termed data-driven coordination, with linda and its dialects being prominent representatives of this approach.

The native coordination model does not include support for controlling access to data, which is a limitation in applications with inherent openness to processes, agents, and components not known at design time. To address this, the coordination model needs to be extended with mechanisms for controlling access, authenticating data producers/consumers, ensuring information secrecy, and more.

In contrast to the native coordination model, the secos model stores all control information within the data, instead of associating access rights with agents. Secos supports two forms of locks—symmetric and asymmetric—to protect and access information. Secspaces, a refined version of secos, further refines the access control policies by associating each tuple with two pairs of information, called entries, each containing symmetric and asymmetric access information. Secspaces also allows for modifying access control policies during the application's lifetime, which is particularly useful for dynamic applications where participants may gain access to new resources or adjust access based on runtime behavior.

The paper also discusses the limitations of the native secspaces model in supporting applications with dynamic aspects. Additionally, it proposes extensions involving only symmetric partitions, as the two types of partitions are intended to represent different kinds of information. It also explains the coordination primitives of secspaces, including output, input, and read operations, and how access permissions on entries are expressed using control fields.

Overall, the paper presents an extended secspaces model that addresses limitations and provides a flexible mechanism for combining partitions, enabling support for dynamic applications and access control modifications during runtime.