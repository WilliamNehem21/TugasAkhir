The research report contains the grammar for the Aspic input language. It focuses on the Aspic language's ability to utilize a non-deterministic operation xj:=?, which results in the loss of information about the variable x. This enhances the expressivity of the language by allowing all affine relations to be encoded. 

To facilitate acceleration, a variant of the Tarjan algorithm is employed, involving precomputations at the outset and topological modifications of the automaton. The fixpoint iteration is used, but when loops are accelerable, a local (post) fixpoint is computed using acceleration results. During the initial phase of the analysis, transition functions are preprocessed, and an internal structure encodes the type of action and guard, as well as other relevant information that can be precomputed.

Following the fixpoint iteration on the modified automaton, the final results are computed with respect to the initial control points by taking the union (convex hull) of the invariants associated with the two control points obtained after splitting. 

Aspic is implemented using a fixpoint generic analyzer called Analyseur 4, which conducts a fixpoint analysis based on an encoding of the control flow graph and an implementation of the abstract lattice of properties. The Polyhedral library Newpolka 5, with an OCaml interface, is used for this purpose. The combined lines of OCaml code amount to 20,000, excluding Newpolka.

The parser for C2FSM is written in OCaml using the Ocamlyacc implementation of Yacc and the C grammar. The outcome is an XML representation of the abstract syntax tree. Error detection is minimal, and diagnostic capabilities are rudimentary. To address complexities arising from the C assignment symbol, the tool employs an unwinding process and follows an innermost leftmost policy for assignment execution.

C2FSM proceeds to expand control statements (while, for, if, do, goto) and adds new states as required, without attempting to minimize the automaton at this stage. Certain constructs, such as conditional gotos with a missing "else" branch, are transformed into conditional jumps to an error state. The tool verifies the assertion and eliminates the error state if it is unreachable.

Experiments conducted with the Aspic tool demonstrate the precision and effectiveness of the proposed method. The results, along with additional examples, are available on the Aspic webpage.

Additionally, the paper discusses other tools such as NBAC, LASH, FASTER, STING, INVGEN, and SUIF, highlighting their respective capabilities and limitations. It compares these tools with Aspic and emphasizes the unique contributions of Aspic in the context of static analysis.

Finally, the paper provides a reference to a research report on the SUIF compiler system, emphasizing the need for specialized tools like Aspic for complex approximations and transformations required for static analysis, which are not typically addressed by compilation-focused tools.