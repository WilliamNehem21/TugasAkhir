Context-sensitive rewriting (CSR) entails a limitation on rewriting that prohibits reductions on specific arguments of functions. Demonstrating the termination of CSR is an intriguing challenge with multiple implications in the realms of term rewriting and programming languages. Several techniques have been devised for substantiating the termination of CSR. In this paper, we introduce an updated version of mu-term equipped with all existing methods for proving termination of CSR. Additionally, we elucidate how these techniques can be combined to endow mu-term with an expert capability to automatically carry out termination proofs. Furthermore, we present an initial experimental assessment of the tool.

We assume a foundational comprehension of term rewriting, and for any missing definitions and further information, we refer readers to the relevant sources. In the subsequent section, we offer a concise overview of the novel features integrated into mu-term. The following section delves into the termination expert, while section 4 furnishes an empirical evaluation of the new iteration of mu-term. The paper concludes with section 5, where we discuss the implications of this work and outline directions for future research.

Mu-term is developed in Haskell 4, and the graphical user interface has been crafted using WxHaskell 5. The system comprises over 45 Haskell modules incorporating more than 14,000 lines of code. Compiled versions for various platforms (Linux, macOS, and Windows) and installation instructions can be accessed on the mu-term website. Additionally, a recent hybrid (Haskell/C#) version of the tool is available for the .NET platform.

With regard to the range of coefficients, we adhere to the customary practice found in similar termination tools, bounding coefficients to 0, 1, or 2 (as seen in [6, 15, 16, 27]). It is important to note that this choice is typically heuristic, grounded in experiential knowledge, and we are not aware of any theoretical or empirical investigation that directs the selection of appropriate bounds for coefficients based on the specific termination problem. In our implementation, we have introduced the value 1, which allows for a minimal yet productive use of rational coefficients. These generation modes are systematically employed by the expert to explore various polynomial interpretations.

The current implementation of CSRPO relies on an ad-hoc incremental constraint solver, which offers opportunities for enhancement in various directions. We intend to investigate the reduction of the problem to a SAT-solving format, as described elsewhere. Additionally, we plan to develop algorithms to solve polynomial constraints over the real numbers, providing exact solutions (though not necessarily rational).