This academic paper discusses the experiences of Philips Healthcare with component-based development supported by formal techniques. It describes the incorporation of the formal analytical software design (ASD) approach, provided by the company Verum, into the industrial workflow. The ASD:suite commercial tool supports compositional verification and code generation for control components, while test-driven development is used for other components. The paper outlines the results of employing these combined techniques in a project focused on developing the power control service of an interventional X-ray system.

To address the need for fast realization of the growing number of medical procedures using image-guided surgery, a component-based development approach is introduced at Philips Healthcare. New components are developed according to this paradigm, gradually replacing existing parts with components featuring well-defined formal interfaces. The formal interfaces facilitate parallel, multi-site development and enhance integration with a growing number of third-party components.

The component-based development approach at Philips Healthcare is grounded in a formal technique called analytical software design (ASD), supported by Verum's commercial tool, ASD:suite. The ASD approach integrates formal methods into industrial practice by combining the box structure development method and CSP. It encompasses two types of models, based on state machines and described using a similar tabular notation: interface models and design models. At Philips Healthcare, these models are leveraged to describe the internal behavior of control components.

Each control component's internal behavior is described using a design model based on the interface model of the component and typically incorporates the interface models of other components. Verification with ASD:suite confirms whether the design model refines the interface model. Importantly, ASD:suite supports complete code generation from design models to multiple programming languages (C, C++, C#, Java), providing a platform-independent description of internal component behavior.

The paper is structured as follows: Section 2 presents the workflow integrating formal and traditional approaches for developing software components, while Section 3 introduces the power control service and its role in the interventional X-ray system. Section 4 describes the application of the presented workflow to the power control service, and Section 5 discusses the project's achieved results. Section 6 contains the main observations and current answers to the questions raised.

A work breakdown structure (WBS) is created for planning and tracking, consisting of tasks that must be completed in a specific order to achieve the final product. This is used at the beginning of each increment, estimating the time needed for tasks using the Wideband Delphi estimation method. Tasks are then estimated by software designers and consensus is reached on the estimates before using them in planning.

For design practices involving ASD, components are often organized in a hierarchical control structure, with a main component at the top responsible for high-level, abstract behavior and lower-level components dealing with more detailed behavior. The test-driven development approach at Philips Healthcare involves starting each increment with the definition of a set of test cases, followed by iterative development of components while gradually increasing the set of passed test cases. These components' code is reviewed by the team before integration with the code generated by the ASD approach.

The power control service (PCS) must be robust against failures that may cause it to lose connection with other components or the power distribution unit (PDU) at any time. In the event of system faults, appropriate actions are taken by the PCS, and events are logged for further diagnostics by a field service engineer. Upon resolution of the malfunctions, the PCS ensures that all internal components are synchronized back with other external components to a predefined state.

The ASD components of the PCS are realized in a top-down order, with each component designed as a state machine capturing global states of lower-level components. After completing the design model of a component, ASD:suite is used to formally verify absence of deadlocks, livelocks, illegal calls, and conformance of the design model with respect to the interface model. The paper also discusses the review, code generation, integration, and testing processes employed in the project.

Throughout all increments, no major redesign was needed, and the construction of all PCS components proceeded smoothly. The end quality result of the PCS service was remarkable, exhibiting a defect rate significantly lower than the industry standard. The code and ASD models of the PCS are stored in a code management system called IBM ClearCase.

In summary, the paper details the experiences at Philips Healthcare with the component-based development method supported by the commercial formal tool ASD:suite, as well as the application of test-driven development in the development of a power control service. Future work directions include investigating additional formal techniques to check the overall functionality of a set of components and exploring the use of formal interface models for conformance testing through model-based testing techniques.