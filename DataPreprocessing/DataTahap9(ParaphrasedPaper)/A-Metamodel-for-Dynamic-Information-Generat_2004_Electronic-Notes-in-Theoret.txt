Understanding object-oriented systems comprehensively becomes challenging if one is restricted to solely conducting static analysis of the source code; dynamic analysis techniques are required. While several tools implement methods for analyzing object interactions, their lack of a common exchange format poses interoperability challenges. This paper introduces the concept of Compact Trace Format (CTF), a graph-based format for exchanging traces of object interactions, addressing the issues of size explosion that complicate runtime information manipulation. To achieve this, the paper outlines techniques for reducing trace size without altering their content and demonstrates transforming the tree representation of a trace into an acyclic compact graph, forming the core of CTF schema.

Existing tools for analyzing traces of object interactions utilize different formats, hindering interoperability. To maximize the utility of these tools, a common format is needed for exchanging traces of object interactions. This paper presents a schema for representing traces, denoted as the Compact Trace Format (CTF), and proposes using existing formats such as Graph Exchange Language (GXL) or Tuple as the syntactic form for CTF.

Traces are typically large and challenging to manipulate, necessitating an exchange format that addresses scalability issues efficiently. To achieve this, the paper outlines two techniques: reducing trace size without content alteration and transforming the tree representation of a trace into an acyclic compact graph. The CTF schema is introduced, visually represented using a UML class diagram, providing the foundation for extending its representation to encompass various types of relationships among objects.

The paper defines the CTF schema independently from the syntactic form of the data representation, making GXL a potential choice for the syntactic carrier for CTF. However, a GXL representation of CTF may yield a larger file size than necessary due to its use of XML tags and explicit expression of data as GXL nodes and edges, offsetting the compactness benefits of CTF.

As a demonstration of the CTF schema, the paper illustrates the extraction and modeling of an imaginary trace using CTF, resulting in an instance diagram of the CTF schema. Additionally, future work is proposed, focusing on experimenting with different execution traces, encouraging tool builders to adopt CTF as a standard format, and extending CTF to handle other types of execution traces.

Ultimately, this paper introduces the CTF, outlines its schema, and addresses the challenges of size explosion in execution traces, culminating in recommendations for future work to further validate and enhance the adoption of CTF.