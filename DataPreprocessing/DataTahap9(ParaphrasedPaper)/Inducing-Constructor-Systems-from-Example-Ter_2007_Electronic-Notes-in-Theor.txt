This academic paper presents a method for inducing correct computational systems (CS) from a set of input-output examples. The method operates within the term rewriting framework and includes extensions to previous approaches, including the automatic inference of subfunctions/subprograms and necessary parameters in a systematic manner. However, the current method is limited to small fixed sets of primitive functions and cannot handle problem-specific functions as background knowledge to induce more complex programs. The paper discusses the characteristics of a class of flat one-function CS, focusing on standard functions for lists and natural numbers.

The induction process for a correct CS is described as a two-level organization, involving the search for patterns in the left-hand sides of the rules at the higher level and the computation of the right-hand sides for each pattern at the lower level. The paper also addresses the issue of multiple correct CS with different normalizing relations and highlights the importance of an inductive bias in the selection of the correct CS.

The paper proposes three criteria for the inductive bias, emphasizing the minimization of rules, the specificity of patterns, and the generality of right-hand sides. It explains the process of dealing with patterns for which correct rules cannot be computed and outlines the generation of successor states by replacing such patterns with corresponding sets of most general proper instances (MGPIs).

Additionally, the paper discusses the partitioning of input-output examples and the introduction of further subprograms and parameters to the induced programs. It proposes techniques for the automatic introduction of additional subprograms and parameters, aiming to broaden the applicability of the approach to induce programs over arbitrary data types with multiple recursion parameters and utilize background knowledge.