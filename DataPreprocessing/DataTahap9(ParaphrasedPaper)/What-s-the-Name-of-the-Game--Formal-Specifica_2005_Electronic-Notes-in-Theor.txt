Game playing has long been a prominent area of study within the field of artificial intelligence, originally focusing on board games such as chess. More recent research has expanded to encompass multi-agent games featuring sophisticated agent interaction, including the simulation of human behavior.

Some modern first-person shooter (FPS) games incorporate extensible AI, such as the bot kit in Half-Life, which utilizes C++ as the programming language. Certain games, despite being categorized primarily as forms of entertainment, exclusively feature programmable bots with no human players. One such example is AI Wars, which employs a programming language that combines specialized commands with basic programming resources. The Robocode project also implements a robotic battletank, with bot behavior defined using the Java programming language.

The GameBots project has been specifically developed for educational and research purposes in the field of artificial intelligence. It has established a testbed for multi-agent systems through an extension for the commercial Unreal Tournament game engine. Unlike other AI-extensible games, GameBots does not define a single benchmark task. Instead, it offers a wide array of predefined tasks and environments that can be extended in various ways using a C++-based scripting language called UnrealScript, allowing communication between the game server and bots through sockets, thereby enabling programming in different languages such as Java and Soar.

Our work shares similarities with GameBots in that the proposed games do not have predefined tasks, but our approach is more comprehensive, allowing for the definition of various types of games without constraints to a specific environment or style. While GameBots permits the extension and creation of new games using UnrealScript, there are limitations to this capability. Moreover, understanding the rules of the proposed game necessitates knowledge of the script language, which was not designed to be an effective formal specification method. We believe that abstract state machines offer a more elegant solution to this issue, as it ensures the clarity of rule semantics through the use of variables, a finite universe, and rules executed in parallel.

In order to execute the transition rule of a module, it is imperative to dynamically create an agent based on this module, with the exception being the main module, for which an agent is automatically defined. A special type of action known as the "loop action" is also present, wherein the transition rule of the action is repeatedly executed until a "return" command is executed. However, a call to a loop action has the same semantics as a call to a simple, non-loop action, with all updates collected and executed in parallel, affecting only the subsequent state of the run.

The paper also delves into the behavior of bots and user-created programs that simulate the actions of competitors within a game. Furthermore, it discusses the various components of a multi-agent artificial intelligence game in detail, emphasizing the importance of understanding their relationship before introducing the framework established in a subsequent section.

In addition, there is a detailed description of the execution order of agents and the scheduling policy for the system, and an example utilizing the main components of a general multi-agent artificial intelligence game, which is the snake game.

Competitors can write user bots to control the direction of movement of the snakes, and the paper addresses issues such as defining the rules of the game as well as the role of the main module in creating instances of user bots. Call-by-reference parameter passing and access permissions for internal bots and user bots are delineated, and the framework's restriction on the access of user bots to other agents is also outlined.

The paper concludes with the potential use of advanced artificial intelligence techniques to develop competitive programs for the proposed games and its anticipated impact on motivating students to learn formal specification methods like abstract state machines.