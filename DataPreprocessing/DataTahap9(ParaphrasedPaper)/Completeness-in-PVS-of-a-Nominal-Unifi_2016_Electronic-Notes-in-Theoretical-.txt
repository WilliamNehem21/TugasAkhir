This paper provides a comprehensive development of the PVS framework for nominal unification, encompassing the specification of all concepts and definitions, as well as the formalization of proofs for all lemmas and theorems presented in the paper. The entire development can be accessed for download from the PVS theory for term rewriting systems trs.cic.unb.br.

The nominal unification algorithm implemented in Isabelle/HOL is essentially defined as the system of transformation rules introduced in [cite]. These rules transform unification problems along with their associated freshness contexts into simpler forms. While this method is elegant and enables a higher level of abstraction for analyzing computational properties such as termination and solution uniqueness, its inherent nondeterminism limits its practicality in implementations.

In PVS, permutations are defined as lists of atom pairs. The function act applies a permutation to an atom by recursively applying the swap operations that represent the permutation. Additionally, the function ext extends the action of permutations to terms in a homomorphic manner, applying act to atoms and accumulating permutations in suspensions.

This work presents a nominal unification algorithm that exclusively takes terms as parameters. Unlike other approaches that utilize transformation rules and consider the corresponding freshness problems as part of the unification problem, we have devised a function in this algorithm that can separately compute the freshness contexts. Our nominal unification algorithm is more straightforward and aligns closely with those implementing first-order unification.