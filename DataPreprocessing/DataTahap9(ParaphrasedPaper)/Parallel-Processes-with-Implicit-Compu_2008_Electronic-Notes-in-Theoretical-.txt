In this paper, we introduce a process algebra that focuses on processes involving implicit computational capital, with a particular emphasis on computer-based systems related to money management. We acknowledge the interdisciplinary nature of defining money within social, economic, and ethnographic contexts, and do not attempt to cover all aspects of money handling. Additionally, we expand the algebra with abstraction from internal actions to ensure the computational capital of processes is not unexpectedly affected. The paper's structure encompasses a review of algebraic communicating processes (acp) and guarded recursion, the introduction of a theory on computational money values, an extension of acp to capture processes with implicit computational capital, and the inclusion of notions pertaining to computational money preservation.

Furthermore, we provide an overview of the basic concepts underlying the design of this algebraic extension, highlighting actions that involve spending or acquiring computational money as well as actions that have no monetary impact. We establish the principle that a process's capacity for using computational money does not exceed its implicit computational capital, and we also illustrate this concept through an example concerning the implicit computational capital of an infinite process. Additionally, we introduce transition system notions, paths, and bisimilarity that will be used to expand bisimulation models of acp to models of the extended process algebra.

In the context of the extended algebra, the implicit computational capital of a process represents the minimum computational money required to account for its behavior. We demonstrate that each bisimulation model of acp can be expanded to a model of the extended process algebra, given that it can be expanded to a model enriched with guarded recursion. Lastly, we discuss the application of the extended process algebra in modeling electronic devices and systems involving financial transactions, in line with our broader project on IT sourcing and formal methods.