Various scenarios in software engineering rely on integrating software artifacts, such as object-oriented modeling, relational databases, XML schemas, ontologies, and aspect-oriented programming. In the context of model management, software artifacts are considered as manipulable models governed by generic operators that are independent of their usage context. One such operator, merge, facilitates the automated integration of models, resulting in more abstract and reusable solutions compared to the prevalent ad-hoc approaches in software engineering. This paper presents an automated approach to generic model merging, focusing on conflict resolution and traceability between software artifacts using the QVT relations language, particularly applied to integrating class diagrams.

The process of refining models involves tasks such as transformation and integration, which can be managed at a model level. Model management offers an approach to handle software artifacts using generic operators, thereby elevating the level of abstraction and enhancing solution reusability. Building on expertise in formal model transformation and data migration, the authors are exploring the application of model management within the context of model-driven development. They have developed the "moment" framework, embedded in the Eclipse platform, to provide a set of generic operators for managing models. These operators facilitate tasks such as union, intersection, difference between models, model transformations using QVT, and navigation through mappings.

The authors propose the integration of UML class diagrams in a use case-driven software development process, in which all artifacts, including analysis and design models, implementation, and associated test specifications, are linked to use cases. However, achieving complete automation in obtaining the analysis model from the use case model presents challenges, as the analysis of use cases remains primarily a manual activity.

In the context of model-driven development, models are composed of elements that describe physical, abstract, or hypothetical realities, requiring consideration of abstraction and classification when defining a model. A metamodel serves as a model of a modeling language, defining the structure and constraints for a family of models.

The process of model merging involves composition and can be viewed as a model transformation process. The merge operator is defined in a generic manner within the "moment" framework, providing extensibility for domain-specific customization using the standard QVT relations language. The merge operator is specified utilizing the Maude algebraic language, enabling abstract, modular, and scalable specification of semantics from a generic and reusable standpoint.

The paper outlines the specification and implementation of the merge operator, emphasizing the application of the QVT relations language for declarative transformation rules and the formalism of the Maude. The authors demonstrate how the merge operator, when specialized, can be used for querying and model transformations through OCL and QVT, respectively.

The authors propose a parameterized module named merge{x:: triv}, which offers a generic specification for the merge operator. They also discuss the MM view, which relates the elements of the triv formal parameter to the elements of the sigmm actual parameter, facilitating the representation of models as sets. The paper describes the operation of the merge operator, which takes two models as input and produces a third, ensuring the uniqueness of elements and addressing the need for refreshments to maintain references in a valid state.

The authors discuss the interactive nature of their approach, allowing users to review and update merged models. They also highlight the manipulation of merged models through visual editors integrated into the Eclipse platform, accompanied by the update of traces generated by the merge operator using other model management operators, such as the match operator.

The paper introduces the generic model weaver AMW, a tool that facilitates the definition of mapping models between EMF models in the Atlas Model Management Architecture. The AMW enables the generation and manipulation of model weavings by model management operators, contributing to traceability models.

Finally, the authors consider the order of elements within merged models and outline ongoing efforts to extend the semantics of the merge operator to preserve this order relation. They are also working on developing a QVT relations language compiler targeting Maude code.