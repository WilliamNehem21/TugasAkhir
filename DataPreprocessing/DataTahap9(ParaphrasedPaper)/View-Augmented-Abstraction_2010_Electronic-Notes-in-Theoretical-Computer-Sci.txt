This paper presents the concept of view-augmented abstractions, which specialize a numeric domain to focus on specific expressions by adding materialized views to the original domain. View augmentation extends the domain to capture information that was previously unavailable. The authors demonstrate the use of finite differencing to maintain materialized views when the program state undergoes transformation. Experimental results indicate that view augmentation can improve precision in practical ways.

The paper discusses the complexity of relationships in program actions and how uniformly increasing the precision of the numeric abstraction can be impractical. It emphasizes the benefits of storing abstractions of expression values in abstract states to extract more precise information. Additionally, it addresses the challenge of incorporating the effects of state transformations on complex view expressions and presents a systematic framework for automatically updating view variables based on finite differencing.

A specific example illustrates how view-augmentation can achieve results that the unaugmented abstraction could not. The paper also introduces the concept of mapping view variables to the set of relations containing them, and describes a global dictionary that holds facts about symbolic relationships among views.

The authors implemented a prototype analyzer based on the apron framework and interproc analyzer to test the capabilities of view-augmented abstraction. The experiments run on a specific machine demonstrate the effectiveness of view-augmentation in verifying otherwise-unverifiable assertions, indicating that it can improve precision for both the original program variables and the view expressions.