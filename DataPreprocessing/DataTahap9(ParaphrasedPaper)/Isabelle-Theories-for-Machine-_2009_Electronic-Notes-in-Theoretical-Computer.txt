In his work, Wai Wong developed HOL theories that represent words as lists of bits, with the type encompassing all words of any length and each length forming a specific subset. Some theorems within the theories explicitly condition on word length and involve bitwise operations, but not arithmetic operations.

This paper focuses on the methods for defining the machine word type, including various operations such as concatenation, splitting, rotation, and shifting of words, albeit not discussed in detail here. The Isabelle code files are available for further reference.

The former definitions of the "obin" type, based on datatypes, have since been removed, rendering this section irrelevant for current use of these theories. Nevertheless, we provide this description to outline the advantages and disadvantages of the "obin" type compared to the former, datatype-based definition of the "bin" type. Notably, the "obin" type, being based on a datatype, permits the primitive and general recursive definitions described herein, unlike the "bin" type.

Given that "bin" is not a datatype, defining functions on "bin" is not as direct as on "obin". Consequently, the original approach involved defining functions on "bin" by referring to the corresponding functions on "obin", utilizing the functions onum_of and int_to_obin, which relate the int (isomorphic to bin) and obin types.

Proofs for operations such as bin_not (with one argument) and bin_and (with two arguments) were nearly automatic and fairly straightforward, as demonstrated in examples found in [3, bingeneral.thy]. This proved to be a more efficient approach than maintaining separate collections of theorems for the bin and obin types.

Further simplification of expressions, such as from (11::word2) to 3 (where word2 is a type of words of length 2) and from iszero(4::word2) to true, depends on the specific word length. While we aim to utilize a theorem like num_of_bintr, its reversal for use as a simplification rule is not feasible due to potential looping. Instead, we can simplify using num_abs_bintr, derived from num_of_bintr and word_number_of_def.