The worst-case execution time (WCET) is an essential parameter for ensuring timing constraints in real-time systems. Higher WCET values for tasks lead to increased resource demands for the associated system. This paper aims to present an alternative method for performing loop unrolling on data-dependent loops using code predication to reduce WCET, as existing techniques only address loops with fixed execution counts. The approach proposed here combines the new technique with existing unrolling approaches and demonstrates significant reductions in WCET compared to the original code.

Loop unrolling can enhance instruction-level parallelism (ILP) and program execution performance by enabling more optimizations affected by code expansion. However, code expansion from loop unrolling may negatively impact instruction-cache performance if not carefully applied, particularly before the register allocation phase, where it can increase register pressure and lead to more spill and reload operations in the code. Standard compilers cannot directly utilize loop unrolling if WCET reduction is sought due to the instability of the execution path generating the worst-case execution time and potential negative cache effects. Previous literature proposes techniques for achieving WCET reduction using loop unrolling, yet these works only consider loops with fixed execution counts.

This paper makes two main contributions. Firstly, it introduces an alternative method for performing loop unrolling on loops with arbitrary execution counts, using code predication as an alternative to branch instructions to handle corner conditions. This approach is novel, as code predication in conjunction with loop unrolling has not been previously reported in the literature. Secondly, the paper combines the newly proposed technique with other standard unrolling approaches for data-dependent loops and loops with fixed execution counts, enabling the selective application of different unrolling techniques per loop. This combination is crucial because not all loops can be unrolled in the same manner, considering factors such as the presence of compare and branch instructions and the selection of valid unrolling factors.

The remainder of the paper is structured as follows: Section 2 presents related work on loop unrolling for WCET reduction. Section 3 outlines the motivations behind the research. Section 4 explains the proposed approach for loop unrolling targeting real-time applications. Section 5 describes the testbed used. Section 6 presents the results obtained using a benchmark suite. Section 7 provides the conclusions and final remarks.

The paper discusses existing techniques for applying loop unrolling and if-conversion to optimize loops, and highlights the need for novel approaches to address data-dependent loops. It further introduces an algorithm that performs loop unrolling using code predication directly at the machine code level and evaluates the effectiveness of this technique.

The proposed approach is implemented in a custom compiler back-end developed using the LLVM infrastructure. The paper also introduces a strategy to selectively apply different unrolling techniques on a per-loop basis, based on the characteristics of each loop. Experiments demonstrate that the combined unrolling techniques are effective in reducing WCET for various benchmarks.