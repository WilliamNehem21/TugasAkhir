This paper introduces an Eclipse plug-in for tom and apigen, which are tools designed to simplify the definition and manipulation of abstract datatypes. Tom extends Java (and C) by adding pattern matching features to these languages, making it well-suited for describing transformations of structured entities such as trees/terms and XML documents. The paper demonstrates the integration of an algebraic programming environment in Eclipse by extending Eclipse to support the development of tom programs. The authors show how the plug-in provides various features including a tom editor, automatic build process, and error management mechanism, contributing to the promotion of formal methods and Eclipse in educational, algebraic, and industrial communities.

Tom introduces pattern matching facilities independently of the data structure used, making it particularly suitable for describing transformations of structured entities such as trees/terms and XML documents. It is a compiler that accepts different native languages (C or Java) and translates matching constructs into the underlying native language. Tom supports list matching, inspired by the ASF+SDF meta-environment, and enables users to perform pattern matching on XML data, offering a specific XML-like notation for defining patterns.

The integration of Tom into the Eclipse platform has resulted in a complete integrated algebraic environment dedicated to Tom development. The Eclipse plug-in offers a specialized editor for Tom, providing syntax coloring, keyword completion, and error reporting in a uniform environment. The authors also highlighted the smooth integration of Tom and apigen, with the Tom editor being able to retrieve and display pertinent information based on signature definitions from the apigen level.

The paper also discusses the fusion of paradigms enabled by the use of Java and Tom in specifying and verifying authentication protocols. It further presents a case where the Tom plug-in was used by the CRIL technology group to specify and perform transformations of timed automata, highlighting the essential role of the plug-in in implementing complex algorithms and improving maintenance of systems.

In conclusion, the paper emphasizes the potential of Eclipse as a platform for developing new environments for languages or extensions and how it can be extended to promote new languages by providing a uniform framework with features typically found in professional IDEs.