In system modeling, the use of component-based architectures is a natural way to delineate different parts and subparts of a system and specify their interrelationships, often through communication mechanisms. Particularly for larger systems, such as real-life systems and complex protocols, component-based modeling is crucial to maintaining an overview of the system. To support this hierarchical modeling, we present a new process algebra called "loco," designed to be a practical language for such purposes. Unlike most existing languages, loco allows for the modeling of both asynchronous and synchronous behaviors, which is essential for representing systems like electronic circuits or facilitating multiway communications while abstracting away small delays.

The main distinction of loco from other process algebras lies in its incorporation of local communication and multiactions. Local communication permits precise specification of communication between components at relevant points, instead of requiring communication to be specified for the entire system in a single location. Multiactions, which are multisets of actions occurring simultaneously without communication, enable a straightforward modeling of synchronous behavior.

The addition of multiactions led to the incorporation of local communication, resulting in the transformation of the language into a truly compositional process algebra. This realization prompted a shift in perspective, where local communication was introduced to enhance compositional aspects, ultimately leading to the integration of multiactions.

While the petri box calculus offers a petri-net-based approach, it still utilizes multiactions and communication in a manner similar to CCS, making multiway communication feasible but cumbersome. Similarly, SCCS and Meije add synchrony to CCS, but they also face similar challenges as they require special components to handle multiway communication.

This paper introduces the syntax of loco in Section 2, provides its semantics in Section 3, and presents an axiomatization in Section 4 to support algebraic reasoning. Sections 5 and 6 discuss the role of abstraction and data in systems, while Section 7 offers examples to illustrate the modeling capabilities of loco through petri nets and simple compositional systems.

It should be noted that the extension of loco aims to achieve a sound and complete axiomatization, with completeness contingent on the completeness of derivability in the data algebra A. The modeling of places and transitions in loco involves processes parameterized with the contents of places, and actions such as receiving and sending tokens are used to model the interactions between places and transitions.

The paper concludes by highlighting the importance of local communication in ensuring precise interaction between components and the modeling of multiactions, asserting that the process algebra loco achieves true compositionality. The examples provided in the paper demonstrate the ease with which petri nets can be modeled using loco.