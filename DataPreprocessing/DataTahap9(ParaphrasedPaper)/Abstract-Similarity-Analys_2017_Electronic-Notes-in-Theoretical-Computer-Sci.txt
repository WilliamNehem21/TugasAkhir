The analysis of code similarity is an essential aspect of program analysis that has broad applications in various areas of computer science. Graph-based representations of programs, such as control flow graphs and dependency graphs, are frequently utilized as the foundation for determining code similarity. Many similarity algorithms examine specific characteristics of these graph-based program representations to determine whether two programs are similar. In this paper, we introduce a comprehensive framework for similarity analysis that expresses the similarity of programs in relation to abstractions of their control flow graph representations. In particular, we focus on abstractions of the basic blocks of a control flow graph.

The study of code similarity involves determining whether two programs are similar or if one program contains a portion that is similar to another program (referred to as code containment). This area of study is important in various computer science applications, such as reverse engineering, clone detection, identifying violations of program intellectual property, malware detection, software maintenance, and software forensics. When comparing code fragments, it is essential to account for changes resulting from code evolution, compiler optimization, and post-compile obfuscation. These changes can result in syntactically different code fragments that exhibit the same behavior, making it important to recognize similar modifications arising from compiler optimization or code obfuscation. To achieve this, it is necessary to abstract from syntactic changes and implementation details that do not alter the intended behavior of programs, thus preserving the program semantics to some extent.

Existing tools for similarity analysis often utilize mixed syntactic/symbolic and semantic representations of programs, such as control flow graphs and dependency graphs. Recently, there has been investigation into using symbolic finite automata (SFA) and their abstractions for code similarity analysis. SFAs extend traditional finite state automata to model languages with a potentially infinite alphabet, with transitions in SFAs being modeled as constraints interpreted in a given boolean algebra. The authors demonstrate how SFAs can represent both the syntax and semantics of programs written in any programming language, providing a formal framework for capturing both the syntactic and semantic properties of programs.

The paper is structured as follows: Section 2 provides an overview of basic concepts used in the paper. Section 3 presents a similarity analysis framework based on abstract interpretation of the control flow graph. Section 4 details the implementation and discusses the results obtained. The paper concludes with a discussion on future work.

The authors have developed an algorithm to dynamically extract control flow graphs of programs from their corresponding execution traces, which can be valuable for analyzing malicious programs and code that employs obfuscation techniques. Once the control flow graph is extracted, an abstraction process is performed using basic block abstractions, considering single instructions and abstracting variables and constants to capture the semantic and syntactic properties of programs.

The experiments show that capturing sub-graph isomorphisms can reveal more similarities, particularly between infected programs and their original versions. Additionally, the similarity between obfuscated variants of code can also be captured by considering isomorphism over the entire abstract control flow graphs. The authors also reference prior work on abstract interpretation for static analysis of programs as a basis for their research.

Reference:
P. Cousot and R. Cousot. "Abstract Interpretation: A Unified Lattice Model for Static Analysis of Programs by Construction or Approximation of Fixpoints." In Proceedings of the 4th ACM Symposium on Principles of Programming Languages (POPL 77), 1977.
M. Polino, A. Scorti, F. Maggi, and S. Zanero. "Jackdaw: Towards Automatic Reverse Engineering of Large Datasets of Binaries." In Proceedings of the Detection of Intrusions and Malware & Vulnerability Assessment, Third International Conference, DIMVA 2015, 2015.