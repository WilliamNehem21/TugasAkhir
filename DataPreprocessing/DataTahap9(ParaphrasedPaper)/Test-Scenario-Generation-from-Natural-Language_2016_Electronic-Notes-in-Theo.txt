This academic paper discusses the use of Petri nets as formal models for the representation and analysis of concurrent systems. It emphasizes the challenges involved in translating textual scenarios into Petri-net models and generating test scenarios from these formal models, particularly for large systems. The paper is organized as follows: Section 2 provides an overview of the approach, Section 3 discusses the language used to write scenarios, Section 4 describes the transformation from scenario into Petri-net, and Section 5 outlines the test scenario generation strategy. Finally, Section 6 presents related work, conclusions, limitations, and suggestions for future research.

In the proposed approach, each scenario sentence (imperative or declarative) is translated into a Petri-net node (transition or place), with these nodes being linked by arcs to form a Petri-net model. Each translated scenario contributes to the formal specification of the system.

The paper highlights the potential use of Petri-net models in activities such as Model-Based Testing (MBT) in software development processes. By formally representing a system, these models can serve as input to the MBT process, automating tasks such as test scenario generation and test execution. One significant benefit of MBT is the automated generation of test scenarios from a formal model of a System Under Test (SUT). The paper also discusses the treatment of exceptions during scenario execution and various types of episodes within a scenario.

A specific example of an online broker system is used to illustrate the application of Petri nets. The system interacts with local and international suppliers to facilitate customer orders. The paper further explains the elements of Petri nets, such as transitions, places, tokens, and arcs, and how they are derived from scenarios.

In addition, the paper emphasizes the need to detect and address defects in scenario descriptions and resulting Petri nets to ensure unambiguity, completeness, consistency, and correctness. The analysis feedback from these defects is used to improve the scenario descriptions, and the resulting Petri nets are employed to derive test scenarios.

Finally, the paper discusses the application of reachability analysis strategy to Petri nets, which generates a reachability tree to provide an overview of possible system markings. The reachability tree contains reachable markings as nodes and transitions as arcs, reflecting changes from one marking to another through firing.