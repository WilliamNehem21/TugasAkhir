This paper presents an extension to the Lustre programming language to facilitate the analysis of globally asynchronous, locally synchronous (GALS) architectures. The extension introduces constructs for directly specifying timeout automata, which are used to describe asynchronous communication between processes represented by Lustre nodes. This extension is implemented using an extensible language framework based on attribute grammars, allowing for modular definition of such extensions, which in turn enables easier composition with other language extensions.

The paper also discusses the potential for adding domain-specific features to Lustre, making it more accessible for use in new domains. For example, prior to this work, Lustre had been utilized for the analysis and code generation of GALS architectures. In this paper, the focus is on using Lustre for specifying and analyzing the behavior of GALS architectures, without specifically generating code from it. The paper introduces the concept of automatically deriving a scheduler within Lustre and presents a timeout condact construct that defines the behavior of asynchronous processes within the architecture.

Furthermore, the paper outlines the design and implementation of the timeout automata as first-class language constructs in Lustre, and discusses the extensible language framework based on attribute grammars used for this purpose. It also addresses the issue of high language development costs and presents the attribute grammar-based approach as a potential alternative, satisfying the criteria of modularity and composability.

In addition to the technical aspects of the language extension and its implementation, the paper provides insights into the real-world application of the extended Lustre language, such as its use in the Flight Guidance System (FGS) for aircraft. The paper also touches on the implications of using the timeout condact construct within GALS systems and discusses the compilation and back-end tools for handling the extended language features.

The paper emphasizes the novelty and contribution of the work in the specification and implementation of the timeout automata as language constructs in Lustre, and discusses related work and future possibilities for extending the language. It also explores the application of the extensible language framework in other domains, such as the extension of Java 1.4 to embed the SQL query language.

Overall, the paper provides a comprehensive overview of extending Lustre with new language features, the challenges involved, and the potential applications of the extended language in various domains. It also lays the groundwork for further research and development in the field of language extensions and extensible language frameworks.