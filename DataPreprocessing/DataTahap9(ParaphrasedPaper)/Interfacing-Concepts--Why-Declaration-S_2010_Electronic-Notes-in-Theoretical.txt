Abstract data types can benefit from the use of concepts in generic programming, as they allow programmers to define the interface and behavior of these types. The concept feature was incorporated into the upcoming C++ standard revision, C++0x, to enhance error messages in templated code and facilitate the integration of generic code. Similar features can be found in other programming languages.

Algebraic or functional styles of notation, which resemble mathematical notation, offer clarity in expressing certain problems. Many formal specification languages, such as the Larch Shared Language and CASL, adopt the functional style due to its clarity. Programs written in an algebraic style are easier to comprehend.

This paper is organized as follows: First, the necessary features of the Magnolia language are introduced. Subsequently, the concepts of mutification and functionalisation are defined, along with their application to Magnolia programs. The paper then discusses limitations, pragmatic considerations, benefits, and possibilities associated with the approach.

Magnolia, a programming language based on C++, incorporates modifications to the syntax and the addition and removal of features. The language is designed to be more amenable to processing and tool development than C++. The primary motivation for using a new language lies in its ease of compiling to C++ code and leveraging high-performance C++ compilers.

Functionalisation, denoted as f, maps a procedure declaration to one or more function declarations, making procedures accessible from expressions at the signature level. Subsequently, the paper discusses the manipulation of nested expressions and the combination of functional and imperative styles in fluent languages. The paper also explains the role of mutification in protecting against harmful side effects while allowing calls to procedures from functions.

The paper emphasizes the link between axioms and algebraic specification, which allows the notation used in specifications to be directly related to the algebraic notation. Our initial experiments with mutification were conducted using C++ due to the availability of high-performance compilers for performance-critical code. However, C++ can be cumbersome to analyze and process with tools. Hence, the Magnolia language was designed to simplify C++ and support our method. The Magnolia compiler will generate C++ code, benefiting from good compilers and programming methodology.

Further research is required to determine the performance improvement achieved when using imperative vs. algebraic styles and the productivity improvement when using algebraic vs. imperative styles. Additionally, there is a need for further work in formally proving the effectiveness and correctness of mutification.