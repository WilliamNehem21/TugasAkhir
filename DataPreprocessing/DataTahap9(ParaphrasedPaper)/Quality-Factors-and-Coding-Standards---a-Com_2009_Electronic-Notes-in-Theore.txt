Implementing and upholding coding conventions in software development to generate high-quality software assets has long been acknowledged as a best practice in conventional software engineering. In a decentralized and diverse development environment, such as that prevalent in the open-source paradigm, coding standards are informally disseminated and adhered to by communities of loosely connected developers. Adhering to these standards could potentially result in superior software quality.

This paper presents the findings of an empirical analysis conducted on two major forges hosting open-source software projects. The first forge examined is the KDE forge, which offers a set of guidelines and coding standards in the form of a coding style that developers may adhere to when creating source code artifacts. The second forge studied is SourceForge, which does not impose any formal coding standards on developers. A selection of projects from these two forges was scrutinized to determine whether the projects from SourceForge, where no coding standards are reinforced, exhibit lower quality compared to those from KDE.

The structure of this paper is outlined as follows: Section 2 provides an overview of past and current research relating to the topic and discusses how this study complements or enhances previous approaches. Section 3 introduces the definitions and attributes used in this work, as well as instantiates the GQM (Goal-Question-Metric) approach, tailoring a research question for the current study. Section 4 formulates an empirical hypothesis based on the research question, illustrating the null and alternative hypotheses, as well as the complexity and coupling metrics used to evaluate them. This section also provides an overview of the samples from the two forges. Section 5 presents the results of the statistical tests associated with the hypothesis and evaluates whether the null hypothesis should be rejected. Sections 6, 7, and 8 discuss the internal and external threats to the validity of the empirical study and conclude the paper.

The literature on software quality measurement and associated characteristics such as complexity, comprehensibility, reusability, and maintainability is discussed. Measurements have traditionally been categorized into development and design quality metrics and post-release metrics. The paper also defines the characteristics of software quality as functionality, reliability, usability, efficiency, maintainability, and portability.

Additionally, the paper highlights the various quality-related policies and tools in KDE, such as the availability of freedom for projects to develop their own coding style, the recommendation to follow the kdelibs coding style, and the existence of an automated quality assurance tool called the English Breakfast Network (EBN) for detecting and measuring quality aspects within KDE.

Regarding complexity, the paper focuses on complexity as it pertains to source functions, using the McCabe cyclomatic complexity as a measure of structural complexity. The study also aims to assess the coupling of functions using the fan-in and fan-out metrics and to evaluate the value of instability based on the defined attributes.

The purpose of the study is to determine differences between samples from KDE and SourceForge, evaluating the complexity and quality of the projects and comparing them via a direct comparison of the projects from the two forges. Metrics such as the McCabe cyclomatic complexity, fan-in, fan-out, and instability will be used to assess the projects, and directional tests will be considered to establish whether one forge achieves statistically higher quality results than the other.

In summary, the paper evaluates the research hypotheses by comparing the attributes of projects from KDE and SourceForge, focusing on the latest available changes recorded in the CVS or SVN repositories. The study calculates the couplings, instability, and complexity of all the functions of the projects from both forges and compares the median, variance, and maximum values to analyze differences between the two forges.

Overall, the study seeks to assess the impact of coding standards on software quality in open-source development environments by comparing the practices and outcomes in the KDE and SourceForge forges.