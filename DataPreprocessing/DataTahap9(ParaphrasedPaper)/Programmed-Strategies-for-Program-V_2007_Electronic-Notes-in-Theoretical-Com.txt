The paper discusses the development of Plover, an automated property-verifier for Haskell programs, as part of the Programatica project. It highlights the use of general programmed strategies in constructing Plover and provides an overview of its architecture, implementation, and strategies. The paper also discusses the embedding of predicate definitions and property assertions in Haskell program modules using P-logic, a programming logic for Haskell, and the challenges in verifying properties that refine the Haskell type system. Furthermore, the paper examines the distinction between program verification and computer-aided theorem proving and its implications for verification tool design. It also compares Plover with other language-specific verification logics and tools such as ACL2 and Sparkle. Additionally, the paper delves into the implementation of decision procedures and strategies for specific program constructions in Haskell, such as local definitions, guarded expressions, fixed-point induction, and quantified assumptions. Lastly, it explores the challenges and advantages of automating verification processes in the context of theorem proving and program verification.