Proving the correctness of compilation is a key element in the development of dependable software systems. In this paper, we introduce an approach to verifying the correctness of compilation processes by utilizing horn logical semantics of programming languages and partial evaluation. We also demonstrate that continuation semantics can be articulated within the framework of horn logical semantics and introduce definite clause semantics. We exemplify our approach by establishing the semantics for the scr specification language and automatically generating target code in a provably correct manner.

Ensuring the accuracy of the compilation process is crucial for building reliable software. If the compiler produces code that deviates from the original program code, the effort spent in proving the correctness of the system would be futile. This is especially critical for high assurance systems, as incorrect target code can result in severe consequences. Various research approaches have been explored, including treating the compiler as a standard program and employing verification techniques to manually or semi-automatically confirm its correctness. Another approach involves automatically generating compilers from the mathematical semantics of the language, typically using denotational semantics. However, these methods have not been widely adopted due to their complexity and inefficiency in producing code. Additionally, program transformation systems have been used to convert source code into target code, but this approach can be lengthy and time-consuming.

In the horn logical semantics approach, both the syntax and semantics of a language are defined using horn logic statements, allowing for a dual operational or denotational view of the semantics. By taking an operational view, an interpreter of the language can be obtained from the horn-logical semantic description, provided the partial evaluator is correct. The correctness of the partial evaluator needs to be proven only once, and it can certify the correctness of the code generation process for any language through partial evaluation.

This paper further develops the horn logical semantics approach by demonstrating that continuation semantics can also be expressed in horn logic. Additionally, we show that both syntax and semantics can be represented using the definite clause grammar notation in horn logical semantics. Furthermore, we apply this approach to the scr method for specifying embedded real-time systems and demonstrate its effectiveness. We also apply resource-bounded partial evaluation to formalize resource-conscious compilation using horn logical semantics.

By applying this approach to various practical applications, such as generating code for parallelizing compilers, controllers specified in ada, and domain-specific languages, we demonstrate the practical utility of horn logical semantics. We also illustrate its application to the domain-specific language of scr, providing a detailed explanation of its grammar and semantics.

In summary, this paper presents an approach to provably correct compilation, demonstrating its application and practical utility in various scenarios.