As a result, both f1 and f2 may simultaneously alter v, potentially affecting an internal control value or the behavior of an actuator. These interactions are typically intentional and properly synchronized, for example, through the use of control flags like cls status in the sample door system. However, these patterns must undergo thorough validation to avoid unintended consequences. If both features are activated at the same time, for instance, if orthogonal stateflow sub-automata implementing different features modify the same value, conflicting forces may be exerted on an actuator. Another scenario arises when two distinct actuators, influenced by different features, have conflicting effects on the environment. Detecting such situations may require further understanding of the environment. In the door system example, both types of feature interactions are present, as will be explored in the following section.

In order to generate test cases, algorithms such as those for path coverage rely on test models that are essentially basic data/control flow graphs. Therefore, formalisms resembling statecharts and leading to behavioral specifications in terms of hierarchical automata must first be transformed (flattened) to be used as test models. In this process, the interactions between different features, like f2, should be considered. Consequently, a corresponding test model is constructed by composing those of f1, f2, and f3. This approach can be generalized to consider not only pairs of fi, but instead all possible combinations, resulting in a test model for the complete system that integrates all features. The extent to which this process is carried out can depend on decision criteria, such as the safety level of the features involved and the degree of coupling, i.e., the number of shared values.