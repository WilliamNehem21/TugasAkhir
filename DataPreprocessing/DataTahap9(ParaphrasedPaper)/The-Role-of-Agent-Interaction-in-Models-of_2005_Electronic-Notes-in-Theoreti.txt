In line with the interactive view of computation, the process of communication (input/output) occurs during the computation rather than prior to or following it. This approach, distinct from both concurrency theory and the theory of computation, signifies a paradigm shift that alters our understanding of computation and its modeling. The introduction of interaction machines, which extend Turing machines with interaction to capture the behavior of concurrent systems, aims to bridge these two fields.

While most theory books left the restriction unstated, it was implicitly understood. However, some early textbooks, particularly those in non-theoretic fields, explicitly broadened the notion of algorithms to encompass problems beyond those solvable by Turing machines. Two examples provided in these books, namely making potato vodka and filling a ditch with sand, suggest a broadened scope of algorithms that can supposedly solve a wider range of problems. Additionally, activities such as driving home from work could also fit into this expanded definition.

A recent ACM SIGACT newsletter acknowledges that among all undergraduate computer science subjects, theoretical computer science has changed the least over the decades. While practical computer scientists have broadened the concept of algorithms beyond function computation, theoretical computer science has maintained a mathematical worldview that frames computation as function-based and thereby limits the notion of a computational problem. This is particularly evident at the undergraduate level, despite advanced complexity theoretic work that explores alternative worldviews, such as online and distributed algorithms, Arthur-Merlin games, and interactive proofs.

The concept of autonomous software is not intended to imply an absence of control, but in some application contexts, it may be the only viable option. In practical developments, web services, for instance, offer fundamentally new ways of conducting business using a standard set of tools, supporting a service-oriented view of distinct and independent software components interacting to deliver valuable functionality. In this context, agent technologies have become the primary approach to addressing emergent problems and managing inherent complexity.

Agent technology represents a new paradigm for software development since object-orientation. The concept of an agent has gained traction across various sub-disciplines of information technology, including computer networks, software engineering, object-oriented programming, artificial intelligence, human-computer interaction, distributed and concurrent systems, mobile systems, telematics, computer-supported cooperative work, control systems, mining, decision support, information retrieval and management, and electronic commerce. Given the horizontal nature of agent technology, its successful adoption in these areas is likely to have a profound, long-term impact on the competitiveness and viability of IT industries, as well as on the conceptualization and implementation of future computer systems.

An agent can be defined as an autonomous, problem-solving computational entity capable of effective operation in dynamic and open environments. Agents are often deployed in environments where they interact and may cooperate with other agents, including both people and software, with possibly conflicting aims. These environments are known as multi-agent systems. Agents can be distinguished from objects in the sense of object-oriented software in that they are autonomous entities capable of making choices over their actions and interactions. Unlike objects, agents cannot be directly invoked, but they can be constructed using object technology. These concepts find application in computer systems in relation to several distinct aspects.

In addition to forming and managing coalitions, the adoption of agent-based approaches is increasingly influential in other domains. For instance, multi-agent systems can offer faster and more effective methods of resource allocation in complex environments, such as the management of utility networks or logistics scheduling, compared to human-centered approaches. Similarly, the use of agent systems to simulate real-world domains may provide solutions to complex physical or social problems that would otherwise be unattainable, such as modeling the impacts of climate change on biological populations or the impact of public policy options on social or economic behavior. Agents offer a new and often more suitable approach to the development of complex systems, especially in open and dynamic environments.

Interaction poses a significant challenge in designing large-scale systems that depend on shared knowledge and semantics to support large communities of people with complex activities and goals. Examples of such systems, still in their early stages, include semantic web systems, some forms of computational grids, and large multi-agent systems. Despite the scale of these systems, or perhaps because of it, many fundamental problems of interaction remain unresolved. Let us consider seven of these problems below, utilizing an abstract, idealized, conceptual model that encompasses this class of system.