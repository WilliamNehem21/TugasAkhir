The purpose of software architectural models is to describe a system's structure by outlining its computational components, interactions, and composition patterns. This allows for reasoning about systems at a more conceptual level, without getting into specific implementation details. Given that global computational states (GCS) can change during design, pre-execution, or runtime, architecture models for GCS need to be able to depict changes in system structure and implement these modifications during system execution. These models are commonly referred to as dynamic software architectures (DSAs), indicating that the system's architecture evolves during runtime.

The paper begins by introducing the formal framework utilized throughout the paper, and how software architectures are represented using hypergraphs. It then discusses how various forms of dynamism in software architecture can be expressed in terms of graph grammars and applies them to a simple case study. Other aspects of dynamism are addressed later in the paper. The conclusion offers final remarks and outlines potential future research directions.

For example, consider a scenario in which a vehicle is subscribed to an assistance service. In the event of a collision, the car's airbag inflates, triggering the automatic generation of a message destined for the accident assistant server. This message can be transmitted through nearby vehicles before reaching the server (the preferred method), or it can be directly sent to the server. Ultimately, the message will be delivered to the assistance server, which will then coordinate the necessary assistance.

The paper identifies classes of properties that are naturally associated with certain types of dynamic behaviors. The next step in the research will involve addressing the problem of verifying such properties over graph grammar specifications. One approach being considered is the use of Alloy for this task, with a focus on proving properties associated with each type of DSA.