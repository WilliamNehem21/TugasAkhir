The paper discusses the use of non-preemptive scheduling techniques for embedded systems, which often have strict timing constraints. While preemptive scheduling techniques have been traditionally favored, recent advancements in processor speeds and understanding of non-preemptive scheduling techniques have led to increased interest in their use for real-time applications such as multimedia, automation, and control. However, the use of non-preemptive scheduling techniques may lead to a lack of error confinement for timing errors in individual software tasks. The paper focuses on adding fault tolerance in systems using non-preemptive deadline-driven scheduling and presents schedulability conditions and a timing analysis algorithm for fault-tolerant periodic and sporadic task sets. The computational experiments demonstrate the efficiency of the proposed approach in terms of runtime complexity and competitive ratio compared to previous methods.

The research builds upon previous works by Abugchem et al. and Thekkilakattil1 et al., and emphasizes the applicability of the non-preemptive deadline-driven scheduling approach. The remainder of the paper is organized as follows: Section 2 reviews relevant previous work in fault-tolerant real-time scheduling, Section 3 presents the system and error models, Section 4 derives the schedulability analysis, Section 5 presents the computational simulation results, and Section 6 concludes the paper and discusses future work.

The paper also discusses the drawbacks of using a watchdog timer as a simple approach for error detection and correction in a computer system, and considers more elaborate error/fault detection and recovery means for task failures in non-preemptively scheduled systems. The study provides an evaluation of the relative effectiveness of the proposed techniques compared to previous works. In conclusion, the proposed fault-tolerant non-preemptive scheduling technique may be useful for developers of embedded systems exposed to interference and errors, and further research will focus on refining fault load categorizations, applying probabilistic schedulability guarantees, and extending techniques to multiprocessor environments.