Though termination techniques in term rewriting have been adapted for term graph rewriting, it is often difficult to directly apply proof techniques to general graph rewriting due to the hierarchical nature of terms and strings. Nevertheless, there is potential for research in exploring the transfer of theory to a graph rewriting context.

Our work involves using edge-labelled directed graphs and employing the double pushout (dpo) approach to graph transformation. We make reference to standard definitions and discussions in existing literature, and here, we will briefly outline key concepts that will be elaborated on later.

Graph productions are depicted graphically with labeled left-hand and right-hand sides, with some nodes named. The interface can be reconstructed by considering only the named nodes, and the morphisms will be identities.

The concept of a finite graph automaton is similar to that of a type graph, where a regular graph language represents a set of graphs of a specific type. However, our aim is somewhat different, as we seek to generate an automaton from an untyped graph transformation system that accepts all reachable graphs. Hence, we prefer to use distinct terminology.

For example, consider the finite graph automaton g:= g, where g is the graph from a previous example, and let the graph transformation system from the same example be given. The language l(g) consists of all acyclic graphs with a maximal path length of 3. Through an analysis of the creation heights in an unwinding of lift0(g), we conclude that l(g) is it-terminating.

The method described above relies on constructing an unwinding of the initial annotation of a graph. As this unwinding is necessarily infinite when there is no bound on creation heights, finding an algorithm that always terminates is not feasible. Nevertheless, in most cases, the goal is to prove termination rather than non-termination, and thus a semi-decision procedure can be useful. We analyze an algorithm along with infinite sets of source graphs. While the approximations technique focuses on the number of occurrences of elements of a certain type, our approach takes the structure of the source graph(s) into account.

Obtaining similar results for more expressive classes of graph languages is important. Regular graph languages are not expressive enough to recognize the class of acyclic finite graphs or even the class of finite trees, while non-cyclicity is an important property for proving termination. Combining creation heights with more expressive classes of graph languages may yield stronger results.