Remark 3.6 emphasizes that the beta rule is the only rule that results in a substitution. The lam rule pertains to cases where the substitution needs to exit the function scope of the abstraction in which it was originally formed and then enter a sub-function scope. The controlled copying and erasing of substitutions (cpy1 and ers1) enable the identification of paths originating from contraction nodes.

Example 3.7 provides a visual representation of the left and right sides of the beta rule. This rewrite involves two cut elimination steps: a closed dereliction cut and a multiplicative cut.

The task is to identify the path that survives the reduction process. This means there are erased sub-paths that are not part of the normal form of a program. However, in the study of strategies for the goim, it is important to pinpoint paths leading to discarded arguments. Since substitutions are discarded in a controlled manner, these paths are retained in the set b.

Typically, labels are added to paths after nodes have been removed from the graph. In this example, a "trailing of course" label is added to mark the points of contact. Notably, the root of the box in g(n') has survived the reduction and is subject to further exponential cut elimination steps until the box is involved in a dereliction cut.

It is crucial to recognize that our calculus can only capture exponential information for the call-by-value translation. If the call-by-name translation of linear logic is used, our calculus would encounter issues because the call-by-name translation places the exponential box structure in argument positions. As mentioned earlier, the multiplicative information in the labels remains unaffected by this change, but the exponential markers need to reflect the new situation. Extending the labels to the call-by-name translation and comparing the structures obtained from both approaches is a topic for future investigation.