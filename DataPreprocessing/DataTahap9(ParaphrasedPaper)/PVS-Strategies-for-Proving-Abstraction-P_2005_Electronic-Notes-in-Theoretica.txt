This academic paper discusses various abstraction relations between automata, such as homomorphism, refinement, forward simulation, and backward simulation, and highlights the completeness of forward-and-backward simulation relations with respect to trace properties of i/o automata. The paper presents a method for specifying abstraction properties related to pairs of automata in the pvs theorem prover and demonstrates how these specifications can facilitate the proof of abstraction properties with minimal interaction with the prover.

The paper emphasizes the need for representing abstract automaton objects in PVS and describes the challenges related to defining a general automaton type in PVS. To address this, the paper explains that i/o automata are represented in PVS as theories obtained by instantiating the tame automaton template, with invariants based on the definitions in these theories.

The paper presents two case studies where forward simulation relations are used to prove time bounds of failure detector and a two-process race system implemented as automata. It also discusses the relevance of the work to the tioa project and the development of tools for translating tioa to PVS specifications.

The paper outlines the development of a library of abstraction property theories and generic automaton theories, along with strategies for proving abstraction properties in the PVS theorem prover. It also highlights the need for further testing, tuning, and optimization of these strategies and discusses plans for future work in developing new strategies for proof completion and adding support for other abstraction properties.

The paper expresses gratitude to individuals and organizations that have contributed to the development of PVS and the discussions on the case studies, as well as anonymous reviewers for their valuable suggestions.