The formalization of mathematics serves various purposes, with increased reliability in results and proofs being a primary motivation. This has driven the research community to embrace homotopy type theory and its formalization in Coq, as well as to verify the four color theorem and undertake projects like the flyspeck project. While the formalization of forcing and set theoretic techniques in our case may not be primarily aimed at increasing confidence due to them being mature technologies, the detailed nature of such formalizations can provide deeper insight into the theory's inner workings, such as specifying which axioms are necessary for defining and utilizing forcing. Additionally, there is a belief that a growing body of formalized mathematics can serve as a valuable library for future generations, and efforts are ongoing to systematize this corpus of formalized mathematics.

In the realm of automation, B. Zhan has introduced a new tool called auto2 and applied it to untyped set theory, redeveloping basic results in Isabelle/ZF. Despite this development, the majority of results in Isabelle/ZF have not been implemented using this tool, and a drawback is that proofs using it do not adhere to the standard Isar language.

Mathematical texts typically commence by establishing a context that defines parameters and assumptions necessary for developing theorems and results. In Isabelle, contexts are defined using locales, which can be combined and extended by adding more parameters and assumptions, thereby leading to the creation of a new locale. In our work, locales are used to structure the formalization and explicitly state the assumptions of key results. It is worth noting that the Isabelle framework provides various tools through its integrated development environment, JEdit, which is bundled with the standard distribution. These tools enable users to manage theory files, search for theorems and concepts within source files, and include tracing utilities for automatic tools. Notably, it features a window displaying the proof state, where active subgoals are presented.

The order of presentation in the material deviates slightly from the dependency of the source files. Specifically, the contents of subsection 3.1 are independent of the subsequent definitions; in the formalization, the file containing these definitions and basic results imports the file corresponding to the principle of dependent choice.

In this section, we demonstrate that the generic extension satisfies the pairing axiom. Our aim here is to illustrate how to prove that m[g] models one of the ZFC axioms, assuming that m satisfies ZFC. Within the m_extra_assms locale, we assert the assumption sats_upair_ax, which encapsulates the satisfaction of the pairing axiom by m. We use relativized versions of the axioms to express satisfaction.