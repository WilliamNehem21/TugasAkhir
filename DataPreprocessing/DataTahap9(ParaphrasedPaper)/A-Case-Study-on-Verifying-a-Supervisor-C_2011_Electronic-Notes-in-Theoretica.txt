This academic paper discusses the ongoing formal verification of a process supervisor using the mcerlang model checker. The process supervisor is an alternative implementation of the standard supervisor behavior of erlang/otp, currently in use at the company Lambdastream, and has been subjected to checks against safety and liveness properties.

Developing correct concurrent software is challenging due to the inherent non-deterministic behavior of such systems. Utilizing concurrent declarative languages, which minimize side effects, can be a practical choice for implementing concurrent software. For example, the concurrent functional language Erlang is widely adopted by companies for building complex concurrent control systems.

The remainder of the paper is structured as follows. Section 2 provides a brief introduction to Erlang and mcerlang. In Section 3, the paper describes the process supervisor component and the properties considered. Section 4 explains the implementation of these properties and presents experimental results obtained by checking them using mcerlang. Finally, Section 5 discusses the conclusions drawn from the study and outlines future work.

Erlang's fault-tolerance is achieved through linking processes to detect and potentially recover from abnormal process termination. Process links are bidirectional, and the handling of process termination notifications may vary between linked processes.

Managing a large number of processes can become overwhelming, leading Erlang programmers to work with higher-level language components offered by libraries. The Open Telecom Platform (OTP) library is a widely used Erlang component library, providing various behaviors such as generic servers, finite state machines, and supervisor components for organizing fault-tolerant systems hierarchically.

Mcerlang serves as a model checker for Erlang programs, enabling the verification of properties of interest. The tool supports the full Erlang language, data type support, process communication, fault detection and tolerance, and can verify programs using the OTP Erlang component library.

To verify Erlang programs, Mcerlang undergoes a source-to-source transformation and utilizes the Erlang compiler to translate the program to Erlang byte code. The program then runs under the Mcerlang run-time system, which controls a verification algorithm to analyze correctness properties.

The paper showcases how properties of the process supervisor were verified using Mcerlang. It discusses the approach for creating a verifiable model, formulating correctness properties, and generating scenarios for verification. Some properties were expressed as safety monitors, closely observing the actions of the supervisor component.

The paper also acknowledges the potential for improvements in the usability of Mcerlang, aiming to simplify the process of formulating correctness properties and providing better guidance for users in the future.

In conclusion, the paper highlights the ongoing work on formal verification of the process supervisor, emphasizing the use of Mcerlang for checking safety and liveness properties and planning for future enhancements to the tool.