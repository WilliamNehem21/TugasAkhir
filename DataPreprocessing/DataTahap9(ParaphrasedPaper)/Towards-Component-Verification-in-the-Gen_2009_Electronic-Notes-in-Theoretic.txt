This academic paper discusses formal specification formalisms and their connections to generic components and instantiations. The generic component concept is derived from data type specification, particularly algebraic module specifications, and is applicable in various algebraic specification techniques. The paper also explores the transfer of this concept to process description techniques, including modules for graph transformation systems and local action systems. Additionally, the paper demonstrates how petri net modules, algebraic high-level nets, and deterministic automata can be viewed as instantiations of the generic framework.

The paper is structured as follows: it introduces the abstract level of the generic component concept in section 2, presents the instantiation to place/transition net systems and temporal logic in section 3, and concludes with a discussion of related work and the practical impact of this approach.

In the context of petri net components, the paper introduces import and export interfaces that specify resources and functionality, respectively, and the body that implements the specified functionality using the imported resources. The markings in these components are treated explicitly.

The paper also discusses morphisms that are simpler than those in earlier work and do not preserve specific properties such as safety or liveness. The import morphism (imp) is a plain, injective morphism that describes the use of resources from the import in the body, while the export morphism (exp) is a t-partial, injective morphism. The interpretation of refinement is loose, with unmapped transitions representing unspecified subnets of the target net.

It is noted that the initial marking does not impact the morphisms, making all place/transition (pt) systems with the same net but different initial markings isomorphic in the specified category (pstp). However, extension diagrams have a unique marking according to section 3.4 of the paper.