Internally, expressions are represented with normalized BDDs/MTBDDs. Com- pared to Apron, BddApron do not need any more the notion of constraints, which are replaced by general Boolean expressions. Last, the operations sup- ported by BddApron are exactly the same as those supported by Apron.

(ii) it also enables without effort an efficient memory management (abstract values are not stored in a global graph, but in local variables of recursive procedures, so a garbage collector can free them automatically). However it presents also strong drawbacks. It combines our front-end and solver components and it is inherently less modular in this respect. Handling gotos (especially backward goto) is complicated, and more generally it is not suited to the unstructured systems handled by NBac (because of partitioning) or ConcurInterproc (because of the interleaving of threads). Combining forward and backward analyses is also made difficult.

Our experience is that in the modular architecture we promote for static analyzers the most modular component is the fixpoint solver component, followed by the abstract domain component, whereas modularity does not really make sense for the front-end part of the analyzer. The good practice is to try to push as much things as possible into the two first components to minimize the duplication of similar code in the front-end of analyzers. Designing and implementing such modular components is demanding in term of efforts, but we think it definitively worth it. In the case of abstract domains, it enables effortless comparisons between them, as shown by the Interproc analyzer which was implemented to illustrate the Apron library and which has been exploited since by several research papers.

The risk of a modular design is the increased complexity of the APIs. We think that we avoided successfully this risk for the Fixpoint solver, which has been used by several external users (for instance [12]). Concerning Apron, the flexibility of the coefficient and linear expression sub-language for instance induces some burden for the user. About this issue, we point out that the use of a high-level language fea- turing higher-order functions and polymorphic typing (namely OCaml) was greatly responsible for the quality of the API.

The most mature work related to ours is the PAG tool [27], which makes different architectural choices compared to us. First, it integrates our solver, abstract domain and part of front-end components in a single package. Second, it provides a spe- cialized specification language for defining abstract domain datatypes and transfer functions.

