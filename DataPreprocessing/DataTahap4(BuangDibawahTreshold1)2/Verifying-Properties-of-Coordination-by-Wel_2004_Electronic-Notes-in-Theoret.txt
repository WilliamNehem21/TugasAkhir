In this paper, we evaluate the applicability of this framework to the context of coordination, formally defining the notion of well-structured coordination. A coordinated system adhering to this notion is amenable to a description in terms of a well-structured transition system, where interesting properties concerning termination, boundedness, safety, and liveness are decidable. An example of application to the Linda coordination model is studied, focussing on a methodology for proving the safety properties of coordinated systems.

The key idea to overcome the infiniteness of the carrier set S is to focus on infinite sets that are semantically finite, that is, that can be characterised (represented, defined, manipulated) in a finite way, e.g. in terms of a repre- sentative finite subset of them.

Similar compatibility and decidability properties hold also if we consider for this framework transitions following the semantics of transfer arcs and reset arcs of Petri nets [15]. Transfer arcs can be used to transfer all the tokens of a place into another. In the process algebraic notation this mechanism can be denoted by the syntax proposed in [20]. For instance, the rule

We observe that while the main practical applications of the framework of WSTSs are currently in the security, mutual-exclusion protocols, and cache coherence protocols areas, studying applicability to the context of coordination may both generalise them as well as provide a number of new and interesting usages. The main intuition behind the idea is that coordination problems seem to satisfy the conditions for applying WSTSs as outlined in the previous section. On the one hand, the semantics of coordination models and lan- guages, as well as the behaviour of coordinated systems and infrastructures, is traditionally formalised by transition systems. On the other hand, these models typically take into account concurrency aspects and interaction, which are the basic features that can be taken into account by WSTSs.

Silent actions are not considered for processes since they would represent the purely computational (i.e., algorithmic) aspects of the system, which are here abstracted away. On the other hand, silent actions in the coordination medium take into account the computations occurring in the coordination space, which actually involves the activity of governing and ruling interactions that coordination is all about.

Linda is the paradigmatic example of coordination model [29]. It is not only one of the main models from which the whole coordination field has been developed, but is also the basic framework above which a number of exten- sions/adaptations have been devised, featuring e.g. programmable behaviour (ReSpecT) [35], multiple access to tuple spaces (Logop) [41], transactions and expiring tuples (JavaSpaces) [27], and Prolog-like features (Shared Prolog) [7] just to mention a few of them. So, we consider here the Linda coordination model, both because of its simplicity, and also because of the potential ex- tension of our results to other coordination models such as those mentioned above.

4. Notice that we substituted any process state by a corresponding atomic item, e.g. writing in1-out4-out1 instead of in(t1); out(t4); out(t1). Whereas this is only a syntactic change, it allows us to exploit the MSR(C) tool to automatically verify the safety properties of interest.

view, since four processes can be spawned each accessing the first ticket. The MSR(C) tool in this case discovers the problem and shows a trace from init to the unsafe state in 9 steps of backward analysis and 1 minute of computation. It is well known (see e.g. [28]) that the problem can be avoided by reversing the order of ticket access in one process, e.g. by making P 1 first accessing t2 and then t1: the resulting system is proved safe in 16 steps and about 3 minutes of computation.

The coordination field promotes a rigorous approach to the engineering of systems featuring complex interaction patterns. Most notably, formal mod- els have often been used to describe syntax and semantics of coordination languages, and to characterise the dynamics of coordination architectures and infrastructures. Expected advantages of formal approaches include abstracting away from unnecessary details [45], avoiding the underspecification of relevant aspects [11], and intercepting design errors [12]. However, we believe that a main application of formal models, the automatic verification of system prop- erties, has not received the deserved interest in the context of coordination models.

Delzanno, G., An overview of MSR(C): A CLP-based framework for the symbolic verification of parameterized concurrent systems, in: M. Comini and M. Falaschi, editors, Electronic Notes in Theoretical Computer Science, Electronic Notes in Theoretical Computer Science 76, Elsevier Science Publishers, 2002 .

