We analyze the vertex-coloring problem restricted to planar graphs and propose to consider classic wheels and polyhedral wheels as basic patterns for the planar graphs. We analyze the colorability of the composition among wheels and introduce a novel algorithm based on three rules for the vertex-coloring problem. These rules are: 1) Selecting vertices in the frontier. 2) Processing subsumed wheels. 3) Processing centers of the

In this article, we introduce what we believe are the basic graph patterns that form any planar graph and that we have called polyhedral wheels. We consider com- positions among polyhedral wheels and analyze its chromatic number. We propose a novel method to recognize the colorability for classic and polyhedral wheels.

Let G = (V, E) be an undirected simple graph (i.e. finite, loop-less and without multiple edges) with vertex set V (or V (G)) and set of edges E(orE(G)). We assume the reader is familiar with standard terminology and notation concerning graph theory and planar graphs in particular, see e.g. [10] for standard concepts in graph theory. We present here only some notations that we will use.

We extend the class of wheels by considering any polygon as an axle face of the wheel. Such type of wheel is called a polyhedral wheel. This means that there are some vertices in the cycle of rx surrounding the center vertex Crx , and which are not adjacent to the center. The center vertex is a common incident vertex to all the axle face of the polyhedral wheel.A polyhedral wheel of a planar graph G is represented as a cycle in its internal-face graph Gf .

We will consider an acyclic graph as a tree. In the case of trees, we call node to each vertex of the tree. It is known that an acyclic graph is 2-colorable. However, considering that any vertex of an acyclic graph has restricted any color from any of the 3 colors of Three, the acyclic graph is 3-colorable.

When Gf is a tree, we say that G (its corresponding planar graph) is a polygonal tree [8]. This means that, although G has cycles, all those cycles can be arranged as a tree whose nodes are polygons instead of single vertices of G. The following theorem shows that to determine an order for visiting all faces from the planar graph is enough to obtain an efficient procedure for the 3-coloring of a polygonal tree.

because all acyclic graphs are 2-colorable. A 3-coloring procedure for G can be done by traversing the nodes of Gf in pre-order. The face of the father node of Gf is colored first and after, the faces of its children nodes. In each current level, the two adjacent faces (father and children in G) are considered. Both regions have two common extremal vertices x, y in its common boundaries.

Several works have focused on recognizing 3-coloring patterns based on the length of the cycles. For example, Borodin et. al [1,2] have shown the 3-colorability of planar graphs without triangles at distance less than 4 and without 5-cycles. Similarly, for graphs without cycles of length from 4 to 7. On the other hand, we perform a different analysis for recognizing between the 3 or 4-colorable topologies in planar graphs. Mainly, we focus on the recognition of the topologies formed by the union of polyhedral wheels in order to design a coloring algorithm.

Theorem 5.4 includes the forbidden existence of K4 and any other classic wheel in the resulting graph GJ. If GJ is a polygonal tree, then a 3-coloring is built. Otherwise, different algorithms can be proposed to build a 3-coloring for GJ.

As the first part of step two, the wheels that subsume other wheels are processed (step 2a). The list of wheels rh = {a, b, i, c}, ri = {h, b, c}, rj = {b, d, f, e, c} is generated. We can see that the wheel rh subsumes the wheel ri, so that the vertex h is selected for being colored. Color(h)=1 and N (h) is marked with 1. As there

Let G = (V, E) be an input planar graph, with n = |V | and m = |E|. In the first part of the algorithm, we select some of the external vertices and remove them. This process iterates until there are not more external free vertices in the current graph. In the worst case, the graph would be outerplanar (all vertices are in the external face) and we could select any of them, giving a complexity of O(n).

In the step (2a) of our algorithm, subsumed wheels are searched and processed by using special data structures that storage the components of the wheels. We have to build every cycle of the wheels, using a Breadth First Search procedure that has an O(m) time-complexity. Afterwards, we compare a cycle of each wheel versus each other cycle of the remaining wheels, performing at most n2 comparisons in the worst case.

