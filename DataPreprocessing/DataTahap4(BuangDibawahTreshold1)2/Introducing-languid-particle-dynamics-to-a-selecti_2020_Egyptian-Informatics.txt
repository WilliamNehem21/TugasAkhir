Particle Swarm Optimization (PSO) is an optimization method originally inspired by the movement of bird flocks and fish schools [1,2]. The method tracks a group of agents (particles) moving through the search space, each agent adapting its movement on the basis of its own findings as well as the findings of other agents. To this day, a great number of modifications and improvements have been proposed for PSO [3], as both elegance and capability of the method keep motivating researchers to further investigate its features and advance its performance.

The results presented in [4], however encouraging, partially remain inconclusive due to the fact that PFIDI-enabled LPSO was tested only against standard PSO. Therefore, stronger evidence of the PFIDI/LPSO capabilities would be obtained if these effects were tested on advanced PSO variants. Hence the contribution of this article is the examination of the performance of a selection of PSO variants enhanced with LPSO inertia handling technique.

The remainder of the article is structured as follows. The second section of the article provides an overview of previous research related to the proposed LPSO technique. In the third section an implementation of a version of LPSO in standard PSO is presented. The proposed technique is tested on five selected PSO variants,

which are described in the fourth section of the article. The fifth section comprises the explanation of the two-phase benchmark testing methodology and the analysis of the obtained results. An additional engineering application test-case is used for a separate test, which is explained and discussed in the sixth section. Finally, closing remarks are given in the Conclusion section.

The inertia weight adaptation in [18] appears to be particularly interesting for the research of PFIDI. This technique employs fit- ness based inertia control both on a global level and on a local level (i.e. per-particle). In the local version (called Locally Adaptive Iner- tia Weight) the inertia weight of each particle is obtained as a dif- ference between the fitness of its current personal best position and the fitness of the personal best position of the previous itera- tion. Although the straightforwardness of the technique makes it rather attractive, it also raises questions of sensitivity to fitness value magnitude, which is certainly not desirable, at least for general-purpose optimization methods.

good positions. A different approach, yielding similar effect, is pro- posed in [12], where the calculation of w is based on a fitness- based particle ranking. The principal idea behind all these inertia weight adaptation methods is that speeding up low-performing particles and slowing down high-performing particles should improve the search effectiveness of the entire swarm.

Note that (4) employs a correction of +0.05 for inertia weight when inertia is not disabled. This represents a modification of the original inertia handling technique of Languid PSO [4], which used no such correction. Since the originally proposed inertia switching technique reduces the overall velocity of the swarm, it would be reasonable to expect that the method would benefit from compensation in the form of increased inertia weight. This was also indicated by the results of the benchmark testing given in pre- vious research [4], thus the aforementioned amplification coeffi- cient was introduced in order to address this issue.

In order to thoroughly test the effects of LPD (i.e. LPSO inertia switching technique), a selection of PSO variants was used. For each variant a sub-variant enabled with LPD was implemented and then had its performance compared with the pure variant. The PSO variants used are:

and the new solution gCLS = (x1, x2, x3, .. . xD) is evaluated. If f gCLS < f (g), the gCLS position is adopted as new g, otherwise the CLS loop (9) is continued until the maximum number of CLS itera-

Dynamic multiswarm PSO (DMS-PSO) [25] represents a certain radicalization of the lbest PSO idea. In DMS-PSO the swarm is divided into several subswarms, i.e. neighborhoods of fully con- nected particles with no connections between the neighborhoods. During the optimization process the subswarms are dynamically reorganized so as to avoid premature convergence.

There are sufficient arguments for using CEC 2014 test for the testing of the effects of LPD on PSO. Firstly, CEC 2014 test was not designed specifically for the purpose of testing the effects of LPD, PFIDI, nor PSO in general, hence no inherent bias towards the tested methods and techniques is to be expected. Secondly, the extent of CEC 2014 test should provide strong evidence on the existence of any benefits of LPD for PSO accuracy.

obtained across 100 computational runs, for both pure TVAC-PSO and CL-PSO variants and the corresponding L-TVAC-PSO and L- CL-PSO variants. (Although CEC 2014 test [27] proposes using 51 computational runs, authors believe that using 100 computational runs considerably stabilizes the results and makes them signifi- cantly more reliable.) On the whole a total of 5.94 million

F29. This indicates that LPD may be most favorable for shifted mul- timodal functions (F4-F16). When implemented in CL-PSO it may also be well-suited for various hybrid or composite types of func- tions, as well as some simple unimodal functions (e.g. F1, which is an elliptic paraboloid).

The implementation of LPD also somewhat stabilizes the method performance with regards to method parameters, making it more robust and reliable, which is especially useful in real-world optimization. Furthermore, considering that at any time not more a third of test functions have shown to yield poorer performance after implementation of LPD means that it would be possibly rea- sonable for many PSO variants to have LPD implemented by default, at least when used in general-purpose optimization codes. In order to provide a more realistic challenge for the LPD- enabled PSO variants, an engineering application test-case was also used for testing. In this test two of the PSO variants showed statis- tically significant better performance when used with LPD, and two other variants showed the opposite. Although somewhat inconclusive, these results do corroborate that positive effects of LPD are real and achievable. It is also important to point out that the best result of all was consistently achieved by LPD-enabled

Although the effects of Languid Particle Dynamics are predom- inantly positive, some limitations to the benefits of using it in PSO still do exist. Specifically, LPD seems to facilitate convergence which may be harmful for problems which demand persistent glo- bal search. Secondly, the conducted extensive testing indicates the existence of a class of optimization problems for which PSO cannot profit from LPD. The properties of the fitness function which would define this class of problems remain to be discovered.

There remain potentially even more interesting lines of research on PFIDI waiting to be explored. Fundamentally, these would include more efficient methods of particle-wise fitness- based inertia handling, which would probably be based on a more sophisticated inertia weight calculation. The next step in this research would be the generalization of PFIDI in a way which would allow for continuous dynamic inertia adaptation based on personal fitness improvement. Preliminary research in this direc- tion has shown that some formulations of inertia weight defined as a function of both personal (particle-wise) and global (swarm- wise) fitness improvement enhance PSO efficiency even more than basic LPD. Finally, as it has been shown that the benefits of LPD fairly consistently increase with the rising number of variables, future research will include testing a PFIDI technique on large- scale optimization problems (D P 1000).

