Spatial data structures are used to manipulate location data. The visualization of such structures faces many challenges that are not relevant in the visualization of one-dimensional data. The visualized data can be represented using several different types of visual metaphors. These metaphors can be divided into several different levels of abstraction depending on the purpose of the visualization. This paper proposes a division of data structure visualization into four levels of abstraction, and shows how these abstractions can be taken into account in the visualization of spatial data structures.

Spatial data structures are structures that store spatial data. Spatial is a term, which is used to refer to located data, for objects positioned in any space [5]. Spatial data is used in many areas of computer science, like Geographic Information Systems (GIS), robotics, computer graphics, and virtual reality. Algorithms that manipulate spatial structures are called Spatial Data Algorithms (SDA).

Spatial Data Structures are based on regular non-spatial data structures like arrays, lists and tree structures, as well as the algorithms that manipulate these fundamental structures. However, much of the complexity of spatial data struc- tures comes from the multidimensionality of the data. Two- and three dimensional variations of efficient algorithms make algorithm development more challenging. In the GIS literature there is a core set of fundamental as well as advanced spatial algorithms and data structures. However, no comprehensive textbook exists on the topic.

Spatial data and algorithms for manipulating located data are an integral part of geoinformatics, a branch of science where information technology is applied to cartography and geosciences. Geoinformatics is closely related to cartography, and therefore illustrations, such as maps and other diagrams, are often used. For people in this field of study, graphics are a familiar and natural way of illustrating the work.

list implemented using two arrays can be visualized by showing the arrays and their contents. Such a visualization shows the implementation-level details of the list, but makes it hard to grasp its logical structure, which can easily be seen when the list is visualized as nodes connected by references. In this paper we will concentrate on the algorithm visualization (AV) side of SV.

One of the main uses for SV is in pedagogy, and numerous SV systems have been developed for teaching. For examples, see [3,6,9]. In pedagogy, however, visualization does not have any intrinsic value. As noted by Hundhausen [4], the learners must be actively involved in activities where algorithm visualization is used in order to get better learning results.

The rest of the paper is organized as follows. In Section 2, we introduce our model of different levels of abstraction in visualizing data structures. In Section 3, we discuss how this model can be applied to the visualization of spatial data struc- tures. Finally, Section 4 discusses how the different levels of visualizations can be used in teaching SDA.

In software visualization, we are interested in illustrating the organization of the related data items whether they are abstract or not. The same data items can be represented in several levels of abstraction depending on the purpose of the visualization. However, this need for granularity is not only biased to these two extremes (DS and ADT). For example, a binary heap is a priority queue ADT that is implemented as an array. Between these two levels of abstractions, it has a well known representation in which a binary heap can be visualized as a binary tree.

In general, a basic structure is a generic data type (a skeleton) that is used to imple- ment a particular data structure. For example, arrays, linked lists, trees, and graphs are basic structures. These are archetypes, reusable basic building blocks for creat- ing structures, and all the data structures used in text books can be implemented in terms of these archetypes. For example, an adjacency list is a composition of an array and a number of linked lists.

box holding a single data item. Similarly, the canonical view of a list is a group of nodes arranged in a line, where each node has a reference (line with possibly an arrow at the end) to its successor. The first node of the list is the leftmost one. The canonical view of a (rooted) tree is a number of nodes arranged to levels in a top- down-fashion, where each node has a reference to its children, and all nodes that are from a given distance from the root node are on the same level. The canonical view of a graph is a group of nodes, each of which has references drawn to its successors, typically arranged using a visually pleasing and intelligible layout.

From the visualization point of view, Basic Structure Level is the lowest level of abstraction that we are interested in presenting. This level contains the canonical views that can be used to visualize any data structure defined using the basic structures. Still, even these canonical views are abstractions. For example, an array is a commonly used term in computer science to denote a contiguous block of memory locations, where each memory location stores one fixed length, and fixed-type variable. However, an array can also refer to a structure composed of a (homogeneous) collection of variables, each variable identified by a particular index number. Most programming languages do not directly support this latter form of definition due to its abstract nature. Thus, there are possibly several different implementations for arrays. However, the low-level abstraction behind each of them is common for all of the implementations, and can be represented in a uniform way 6 .

On Data Structure Level, the data structures are visualized using the canon- ical views defined in terms of the basic structures. Therefore the visualizations accurately reflect the actual implementation of the data structure, and show all (relevant) parts of the structure. In the visualization, we are most interested in the layout and the question whether it satisfies the constraints of the data structure. The concept of rotation in red-black trees, for example, can be expressed in terms of changes in this layout (i.e., moving nodes and arcs between nodes). Of course, the actual code can be illustrated as well, for example, as a pseudo-code.

Alternate visualizations are especially useful when the data stored in the struc- ture is multidimensional. In the canonical views, there is only one dimension that can be used for showing the relationships between the data elements: the visu- alization of the data key values. If the elements are, for example, points in two dimensionsional space, it is hard for the viewer to grasp the relationships among the elements in one-dimensional visualization. If the points are drawn into two- dimensional plane, however, it is more convenient to see the relationships (e.g., distance, direction) among different data points.

The top level of abstraction is called Application Level. Visual metaphors, where the information in the data structure is not fully visible, are considered to be on this level. This is called application level since almost all applications that use graphics to illustrate the data show only relevant data items instead of the whole dataset. Typically only those applications that are used for software visualization can show all the data.

Software visualization techniques and tools can be utilized in many other disciplines as well. Especially, there exist abstractions that have proved to be particularly im- portant for many disciplines. The idea behind the categorization of these abstrac- tions is that we can utilize the same components and concepts over and over again and take advantage of the prior work done.

Some application areas are intrinsically visual. For example, in GIS applica- tions, the typical representation is a map. However, the underlying data structures and their visual counterparts are basically the same as, for example, in software visualization. Thus, we need to make a distinction between the application level vi- sualization and the illustrations for the underlying data structures and algorithms. However, no matter what kind of application we have in mind, it can be reduced to those basic building blocks through the levels of abstraction, as we will see in the next section.

Spatial data algorithms process data which is naturally visualized as maps. In this section, we show how the model from previous section is applied to SDA. Specifically, we present a common geoinformatics problem, called map overlay, as an example and describe how it can be visualized using several visualizations on different abstraction levels.

applications both source and result data sets can be visualized as maps of some type. Thus, application level visualizations can give good overview of the problem, particularly as specialists in geoscience and cartographic fields are used to handle and understand maps. However, while visualizations in GIS applications give a good illustration of the data, they omit all details of the data structures used.

In order to solve a problem with a computer, the problem has to be represented formally in some way. Typically, mathematical presentations are used to store map data. Such presentation also gives a view of the data that is independent of any computerized data structure implementation. Even if a mathematical presentation hides all the physical details of the data structure, it clearly shows logical connec- tions between data elements, and therefore belongs to the representation level. In geoinformatics, examples of mathematical presentations are Voronoi diagrams and their dual, the Triangular Irregular Network (TIN) [7].

Our example, map overlay, was from the field of geoinformatics which, as a discipline, is very visual in nature. Most geoinformatics problems involve graphical views in the description, solution, and the solution process. For the people in the field, visualizations are a natural and extremely common way for processing and representing data. Therefore visualizations are also a very good tool for teaching aspects of geoinformatics, including SDA.

Since spatial data structures contain two-dimensional data, traditional algorithm visualization techniques can be sub-par. Traditionally, the focus of the visualization has been to show the composition of the data structures. A graph visualization, for example, shows the vertices and edges in a visually appealing fashion, and a tree visualization is optimized to show the relations between tree nodes. When the data stored in the structure is one-dimensional (like numbers or strings), this also shows the relation between the data elements.

In order to effectively visualize some SDAs, we clearly need several visualiza- tions simultaneously. One visualization to show the inner composition of the data structure in question, and another to give an easily understood view of the data being represented. This effectively expands the multiple views category of [8], which measures the degree of multiple synchronized views the visualization can provide. The taxonomy discusses views of different granularity. We, on the other hand, re- quire views that use different graphical metaphors to show the data and thus make different aspects of the logical structure explicit.

