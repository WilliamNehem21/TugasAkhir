The paper is organized as follows: Terms and substitutions are defined in Sec. 2, together with a description of strong structural induction principles that have the usual variable convention already built in. Sec. 3 defines types and the typing- judgement for terms Sec. 4 introduces the big-step evaluation relation for terms and in Sec. 5 we show how the proof of the termination property for the evaluation relation proceeds.

we present later on it will be necessary to introduce the slightly more complicated notion of simultaneous substitution, which we represent as finite lists of (name,trm)- pairs. One reason for this choice is that it is easier to deal with finite structures in Nominal Isabelle than with infinite ones (a potentially infinite representation of substitutions is, for example, partial maps from name to trm). The second reason is that it is usually easier to define functions by recursion over lists, than by recursing over sets [10]. Using our list representation we define:

Before we can define a typing-judgement, we need to state what typing contexts are. For them we use lists of (name,ty)-pairs since, as mentioned before, in Nominal Isabelle it is easier to work with finite structures than with infinite ones (if we use sets of (name,ty)-pairs instead, then it is inconvenient to exclude potentially infinitely large typing-contexts). The disadvantage of using lists is, of course, that we distinguish the order of how variables are associated to types. However, in terms of convenience this choice will only cause minor problem in the proofs we shall present.

There are a number of ways to prove this lemma. One is to use the strong induction principle for lambda-terms and perform an induction over the structure of e. This involves a fair amount of straightforward calculations, but they cannot be found by the automated tools of Isabelle. It is more convenient if we first generalise Lem. 3.4 and prove

The proof of the this lemma is not straightforward and we cannot expect that the automatic proof search tools of Isabelle are of much help in finding this proof. The proof atually only goes through if one proves a stronger result. For this we use the well-known technique of logical relations. The specific logical relation we use here we will call valuation. They are sets of terms and defined as follows:

The proof of this lemma is a routine case-distinction on the extended typing- context and simultaneous substitution. Now we are in a position to give a proof Theorem 5.1, where, however, we do not prove termination just for closed expres- sions, but for arbitrary typable terms.

To do this formalisation we have been inspired by Adam Chlipala who mailed some of the problems as challenge on the PoplMark list. We are very grateful to Nick Benton who outlined to us the proof for the termination property described in Sec. 5.

