Paradigm models specify coordination of collaborating components via constraint control. Component McPal allows for later addition of new constraints and new control in view of unforeseen adaptation. After addition McPal starts coordinating migration accordingly, adapting the system towards to-be collaboration. Once done, McPal removes obsolete control and constraints. All coordination remains ongoing while migrat- ing on-the-fly, being deflected without any quiescence. Through translation into process algebra, supporting formal analysis is arranged carefully, showing that as-is and to-be processes are proper abstractions of the migrating process. A canonical critical section problem illustrates the approach.

such a collaboration has to change, dynamic consistency is even more problematic, particularly so during migration. For a similar reason, the notion of quiescence has been introduced [13] for adaptive systems: a system part, having to change while the system is ongoing, is isolated first from its environment, then it is changed, e.g. by replacing it, and finally, the part in its renewed form is reconnected. Thus, quies- cence circumvents dynamic consistency problems in ongoing collaborations during the actual change, by separating a part from what remains ongoing.

algebra we consider, defining how components communicate. Thus, a Paradigm model of an adapting system, including the special component McPal, is translated into PA. So, using a well established abstraction technique of PA, we can formally analyze the adaptation process. For instance, we can prove that as-is collabora- tion indeed migrates to to-be collaboration. In particular, the PA model makes the adaptation dynamics explicit. Therefore, for every migration trajectory, progress properties can be verified.

A phase, when being current state of a role, is a dynamic constraint imposed on the detailed STD underlying the role, containing all transitions allowed by the role in that phase. Thus, a detailed transition can only be taken if admitted by each current phase of the various roles assigned. A connecting trap of a phase is a further dynamic constraint committed to by the detailed STD, serving as guard for a phase transfer, often to be carried out in combination with simultaneous phase transfers in other roles.

The above two consistency rules let Scheduler conduct the CS roles of the Workers. The roles, by imposing the current phase, in turn dynamically constrain the five detailed steps of each Worker. Some of these steps actually lead to entering a connecting trap. Via such a trap entered, detailed STDs dynamically constrain coordination steps of Scheduler. In general, a consistency rule synchronizes single steps from different STDs: zero or one detailed steps, zero or more role steps and a so-called change clause to update the consistency rules within a protocol. If present in one rule, the role steps together constitute one protocol step. If synchronized with a detailed step of an STD M , this M is referred to as the conductor of that protocol step.

Four rules have McPal coordinating migration by conducting Evol phase transfers of all other participants. In the first rule, McPal starts Scheduler migrating and, simultaneously, it transfers the three Workers to their new full dynamics. As long as Scheduler has not transferred their as-is CS phases to to-be ones, such new dynamics will remain excluded, although allowed by McPal already. The remaining three rules transfer Scheduler from migrating to round robin scheduling only, depending

In this section, McPal and the other example components from Section 2 are ex- pressed as PA processes, following the translation of [1]. Using the translation we formally prove that the system migrates indeed from the as-is to the to-be be- haviour. Moreover, the PA specification can directly be taken as an input for the mCRL2 modelchecker, to be used for further analysis of the migration model.

Having formalized the separate components and the systems they compose, we are able to relate the models. See Theorem 3.1 to 3.3 below. The first result states, as long McPal(Evol) is not allowed to perform the choreography step prepared, meaning it cannot start migration, the larger migration system has the same be- haviour as the as-is system, up to branching bisimulation [7,1]. This is speci- fied first by blocking the action prepared and second by abstracting all actions McPal can perform in the Hibernating phase; thus all actions Act(McPalHib) =

suming that there are n different trajectories tk, k = 1,... , n. Assume that state sk is the first state on trajectory tk that is a state in the (LTS of the) to-be model PM2. And assume that the set I contains all actions occurring in PM1to2 but not in

The above McPal is reminiscent of two other McPal versions from earlier work [10,11]. Compared with [10], the above McPal is far more general, since the older one, lacking a McPal(Evol) role, has exactly two fixed migration steps between Crs extension and Crs reduction only. The older version does allow for quite some freedom in unforeseen migration, however, as both fixed migration steps can be adorned, lazily but just-in-time, with new conducting, even repeatedly so for later migrations. Nevertheless, more than two migration steps, alternative migration steps or iterated migration steps cannot be covered at once, which for the above McPal are no problem at all. The concrete migrations in [10] are also less comprising, more cautious than the above example combining change of all detailed and role dynamics within one migration cycle.

(iii) McPal kicks off and conducts the others from as-is collaboration to to-be collab- oration, while keeping them ongoing. (iv) McPal out-phases obsolete dynamics of all others, while keeping to-be collaboration of the others ongoing. (v) McPal returns to hibernating by out-phasing its migration conducting dynamics and removing ob- solete constraint control, while keeping to-be collaboration ongoing and continuing to do so thereafter. The above five steps constitute the backbone of McPal, serving as architectural redesigner as well as redirector of ongoing collaboration for all kinds of Paradigm models.

There is much research addressing dynamic system adaptation. Generally, for- mal analysis of the migration trajectory is ignored. Exceptions to this are mainly found in the WCAT community. In the setting of component-based software engi- neering, process languages and mobile calculi are used to express run-time adaptor modification for coupled COTS components [4,5,6,16]. However, tool support to- wards formal analysis of run-time adaptation has not been addressed so far. More- over, whereas adaptors do change, components cannot, unless by replacement: they are from on-the-shelf.

