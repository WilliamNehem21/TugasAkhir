we need to check the graphical user interfaces but also the content of the generated pages. Our contribution is to provide an answer to these difficulties. There is an extension of UML for Web Applications but that is more focused on the Design View. Therefore, in order to produce diagrams which convey the information we need to feed our tests, we got inspired from [5] and [4]. Another contribution of this paper is to present the techniques and the tools which are used to component and conformance testing.

In dotLRN there are three main portal types: user, class and community portals. The user portal is the private space that each user owns, while the class and community portals contain all the pages related to a specific class or community. Each of these three portal types is divided into four sections: the main space, the calendar, the files and the control panel. The pages in dotLRN are composed of portlets. Portlets are small portals that have some specific functionalities, like the forums, the news or the calendar.

A user portal is created automatically whenever a new user is registered in dotLRN, but the class and community portals are created by the site- wide administrator according to the needs of the users. When a new class or community portal is created, the site-wide administrator assigns one ore more users as administrators of this portal. For example, for computer science class portal, the administrators can be the professor and his teaching assistants, while for a photography group community portal, the administrator will be one or more students. The responsibilities of a portal administrator are to add content, customize the layout and decide the policy of the portal.

The Navigation Map of a web application introduced in [5] is useful because it provides information about the dynamic content of each web page which is part of the system as well as the links between the different web pages. This information is essential during the parsing of the HTML pages (section 4.3). The Navigation Map is a Class diagram where each web page is a class and a link between two pages is an association between the two respective classes. This extention of UML for web applications introduces a number of

To parse the UML diagrams we could either use the API of a UML tool, or export the diagrams in an XMI format that would allow to parse them using an XML parser. XMI is a standard created by the Object Management Group (OMG) to represent UML diagrams in XML. Exporting to XMI was the solution we preferred since it does not tie us to a specific tool.

Although we could use any XML parser to parse the XMI, due to the high complexity of the standard we decided to use a specialized XMI parser. The one we used was the parser included in the System Modeling Workbench tool 8 . It is free, open-source and also is written in Python, making it easier to integrate with our code. Being open-source it also enabled us to fix some incompatibility issues that appeared when used with XMI produced by the Poseidon tool.

The test method is based on the test of objectives, which are selected taking into account the experts and designers advice. These tests are based on user cases and cover all relevant aspects of the system behaviour. Even if we cannot guarantee a total error coverage, it can be guaranteed for the selected tests.

Basanieri, F., A. Bertolino and E. Marchetti, The Cow suit Approach to Planning and Deriving Test Suites in UML Projects, Proc. Fifth International Conference on the Unified Modeling Language - the Language and its applications UML 2002, LNCS 2460, Dresden, Germany (2002),

