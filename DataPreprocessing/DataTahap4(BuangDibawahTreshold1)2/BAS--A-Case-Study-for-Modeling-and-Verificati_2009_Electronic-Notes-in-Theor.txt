In the past half a century, semantic foundations, formal technologies and verifi- cation tools have been developed, including testing, static analysis, model checking, formal proof and theorem proving, etc. However, these formal verification technolo- gies are not easy to be applied to the practical development process. There lacks an integrated modeling and verification environment for developers. Recently, we explored how to apply the model checking technology to the model-driven develop- ment process. An integrated modeling and verification environment is implemented to model systems with multi-view models and to verify the correctness and consis- tency of system models. The new features of our work are:

Contract is modeled with OCL expressions on the model level so that the pre/post condition constraints of some methods can be expressed. Especially, the OCL ex- pressions as constraints can be added into the transitions of a statechart. Thanks to the assertion verification of SPIN, OCL constraints can be verified. Besides,

The rest of the paper is organized as follows. Section 2 gives an overview on the framework of tMDA, and provides the formulation of some key concepts for the consistency verification. In section 3, we use a BAS case study to demonstrate the procedures of model constructing, model verification, model simulation and code generation in the model-driven development process and how to apply the rigorous modeling approach to the practical software development. Section 4 summarizes our work and discusses some future work.

The characteristics of the framework are generic and extendable. As have been known, different model checkers, such as SPIN [9], FDR [10], SMV [11] can be integrated in the framework for different verification purposes. In tMDA, we chose SPIN as the model checking engine due to its maturity and popularity.

Att is a partial function Att : C ~ (AttrN ~ T ). We use C.a : T to denote Att(C)(a) = T, and call a an attribute of C and T the type of a. We use attV (C) to denote the set {a : T | Att(C)(a)= T} of all the attributes of C.

where k1 is the number of the messages for which N is the class of target object, k2 is the number of massages handled between mi and mi+1. Msgij are all those messages from source object to target object. gij is the guard of executing message Msgij.

We are grateful to the reviewers for their careful reading and detailed comments that helped us to improve the paper. This work is partially Supported by the National Key Research program of Dependable Software Theory under Grant No. 90718014; National High Tech Research 863 Program of China under Grant No. 2006AA01Z165; the National Natural Science Foundation of China under Grant No. 60673114 and No. 60603037.

