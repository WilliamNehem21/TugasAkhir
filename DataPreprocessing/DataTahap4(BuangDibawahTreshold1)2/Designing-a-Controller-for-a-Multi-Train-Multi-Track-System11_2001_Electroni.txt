BART provides heavy commuter rail service in the San Francisco Bay Area. Typically over 50 trains, most consisting of 10 cars, are in service. Cars are driven by electric motors powered by a 1000 VDC, \third rail", and use both regenerative and friction brakes. The system is controlled automatically, and on-board operators have a limited role in normal operations (e.g., they signal the system when the platforms are clear so a train can depart a station, and perhaps, in some exceptional circumstanaces, they pull the emergency brake). With a few minor exceptions, the BART system consists of double track:

one track going one direction and one track going the other (i.e., the track is not a loop.) An acceleration controller is at the front and back of each train. At the end of the line, the front and back controllers are rede ned, and the train goes in the other direction.

Another major aspect of train control is interlocking - the management of track switches and associated signals for entering track segments. At BART, interlocking is handled by a system separate from the train (acceleration) control. The train controller will simply see \go" or \stop" indicators at various track locations, and should enter a \gate" only if allowed. It is the responsibility of the interlocking system not to move a switch if a signal change occurs when it is too late for an approaching train to stop. Stopping at a station platform is much like stopping in front of a gate, although there are some additional controls to assure the nal stop is at the precise location.

Though this model is an approximation of an actual train system, it never- theless captures the salient features of the train such as how quickly the train can change from one acceleration to another as well as acceleration limits. These values can be determined from the current speed and acceleration of the train. By capturing this kind of information, the model re ects the phys- ical limits that are encountered with respect to the movement of large heavy objects driven by electric motors, such as trains.

It is assumed that sensors, describing the state of a train, are correct within certain known margins of error, acceleration commands are correctly realized by the motor, etc.; under these assumptions, events (i), (iii), and (iv) can be avoided by a correct control function. Event (ii) can be avoided assuming signals are set by the interlocking system at appropriate times.

Two constructs, pro les and constraints, model the components in the train system. A pro le describes a relation between position and speed, where position and speed are indexed by discrete (continuous) time for a discrete (continuous) pro le. We assume that there is a global clock, shared by all trains, signals and stations on a given track. Given a time t and train i, the pro le of the ith train gives its position and speed at time t. Pro les can be used to model discrete/continuous trajectories in the position-speed plane.

Because sensor outputs are measured at discrete time intervals, the compo- nents of the train system can be most directly modeled using discrete pro les. We are now faced with the task of formally de ning various safety properties with respect to this model. The problem here is that safety properties are continuous properties that describe the behavior of the physical train system, and not the discrete view induced by the sense/react loop.

Safety properties could be de ned indirectly by stating relationships be- tween various discrete pro les. One must then infer from a given set of discrete relationships that the continuous property holds. For example, consider one of the easiest safety properties, SP, a train should not exceed the speed limit of the track segment on which it is traveling. A rst attempt at stating this property in terms of our discrete model might result in the following:

The safe speed predicate given above can be extended to cover the case shown, but the question still remains: \Have all the cases been covered"? In a continuous framework, safety properties such as this can be directly stated. Assuming that the initial state of the object train satis es the track segment speed limit, its behavior pro le satis es the constraints imposed by the track segment speed limit i there does not exist a point in the position-speed plane belonging to both the continuous representation of the track and train behavior pro le (i.e., an intersection does not occur).

Given the elegance with which safety properties can be stated in a con- tinuous framework, we extend our model into this framework by de ning a mapping to translate discrete pro les into continuous pro les and vice versa. This mapping makes explicit, a conservative understanding of what occurs in the gaps that exist between adjacent discrete points in our model (see Section 3.3), and it is with respect to this understanding that we formally de ne safety through the satis es constraint operator  as discussed in Section 3.5.

intervals. How should one model behavior between these discrete points? The problem is that the continuous behavior of trains between these discrete points falls outside of the resolution of our model. We address this model limitation by stating properties that continuous train pro les must satisfy in order to be consistent with the discrete sensor readings provided by the system, thus, in e ect bounding such behaviors.

A constraint CP < de nes a satis able region with respect to a given set CP of continuous pro les. A satis es constraint operator  de nes the conditions under which a continuous pro le relates to a constraint. Here we show the more general case where the set CP of continuous pro les is derived from a discrete train pro le. The track and signals cases are essentially the same, except that the time component is not present in the tuples, and is ignored while making comparisons; the relation  below is overloaded in this sense.

Safety constraints can thus be speci ed in a compositional manner in terms of the safety property of trains running on each track because of the assump- tion that tracks do not interact/interfere with each other. The safety property of trains on a single track can be expressed in terms of the safety train of each object train running on the track. This property is speci ed, again in a compositional manner, in terms of the behavioral constraints imposed by the associated lead train, track, signals and stations.

The main reason for designing a special-purpose modeling language was to develop a high-level abstract speci cation which can be transformed using the transformations supported by the HATS system which we have been de- veloping over a number of years. This approach has the distinct advantage of quickly generating a running implementation for simulation purposes to validate assumptions and debug the model. We are unaware of any modeling language for reactive systems (e.g. [8]) which can be used to quickly generate a prototype implementation from a high level speci cation.

From the perspective of an object train, the slower it moves the safer it is; if the object train is safe with respect to a continous stopping pro le that is maximum among all possible continuous pro les consistent with its given discrete stopping pro le, that is a conservative approximation. In contrast, the faster the lead train moves, the less likely that the object train will collide with it. Thus, minimum among all continuous pro les consistent with a discrete stopping pro le of the lead train is a conservative approximation.

Let C1< and C2< be constraints based respectively on the track pro le and signals pro le. Let espot denote the continuous train pro le corresponding to the emergency stopping pro le of the object train. Let C3< and C4< be constraints due to the continuous normal stopping pro le cpslt of the lead train, and the continuous pro le corresponding to a derail of the lead train.

The following two theorems serve as the basis to obtain a provably correct implementation from the given speci cation. These theorems relate (safety) constraints expressed in a continuous domain to their discrete counterparts. Using these theorems, it is possible to transform the speci cation to an algo- rithm that can be computed in a framework based on nite enumerated sets. The proofs for both of these theorems can be found in [13].

In HATS, program transformation is realized though an extended form of term rewriting. It is a language independent system where rewriting takes place within a wide spectrum language that is de ned by a context-free gram- mar, which forms the basis of interpreting program \strings" as terms. An abstract prettyprinter is used to translate terms back into strings.

transform functions are parameterized by the terms they transform. This pa- rameterization permits the arguments to uni cation expressions to be calls to other transform functions (including recursive calls). This allows for a very sophisticated control over the application of transformations.

Developing a formal model and evaluating di erent trade-o s (e.g., whether only discrete pro les be used and safety properties be expressed using discrete pro les, how to map discrete pro les into continuous pro les) involved numer- ous trial and errors. A variety of tools are necessary in the design phase for analyzing such complex systems.

The numerical output produced a list of vectors of numbers which often made little sense. Certain patterns of numbers would appear to be intuitively wrong (e.g., (k + 1)th train speeding up whereas kth train slowing down). To verify that the simulation was indeed correct, would lead us to time-consuming manual analysis, only to reveal that the behavior was indeed consistent with the system speci cation. After a few of such calculations, a more e ective way to view and analyze the data being produced was needed.

(i.e., the position on the x-axis where the lead train is located remains  xed at the right side of the display), and the position of the remaining trains is displayed relative to the xed position of the lead train. The speed of trains varies along the y-axis. In the animation shown, trains were represented by a blue triangle shape, and the set of trains were connected by a thin blue line. This line was added to help visualize the speed variations among the trains. Track speed limits were displayed by green squares, and were also connected by a thin green line in order to better view the relationship between train behaviors and track speed limits. Each train \triangle" was matched with a speed limit \square" in a relative manner. Thus, the green squares are always located directly above their corresponding triangle.

Such an animation leads to an increased con dence in the design since the behavior of the trains is intuitively correct. To stress the control function further, we implemented a random control function to control the lead train in the system. This function would cause the lead train to randomly speed up or slow down while staying within the track speed limit. The other trains in the system, those controlled by our formally developed control functions, caused the system to display a behavior that is most closely described by a kite tail uttering in the wind, where the knots in the tail correspond to the triangles in the simulation. This behavior is pleasing to observe, and it is easy to informally and casually convince oneself that it is correct.

From a formal veri cation standpoint, such a validation via simulation is unnecessary if the underlying models are correct and no mistakes have been made in the formal development. However, the information gained from observing the simulation enhances the designer's con dence that the train behaviors and the models that they are based on seem correct with respect to the perspective provided by the simulation. Further, properties which can take considerable e ort to formally disprove, can be done easily using a simulation by developing a scenario. The use of a variety of tools, including reasoning

Model checking can be viewed as a possible alternative to simulation for de- bugging a formal model, especially when the system behavior can be expressed in terms of discrete states. However, the number of states to be considerd may explode in case of 10 trains running on a single long track as well as with hun- dreds of simulation steps. For handling continuous properties, it is unclear, however, how model checking would have helped.

