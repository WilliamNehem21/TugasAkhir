Transformation systems are particularly well suited to implement modular rules, transforming one language feature of the source language into a single or a composition of language features of the target language. However, in practice, transformation rules must be written which take one lan- guage feature and transform them into several language features belonging to various locations in the output program. The implementation of these so-called local-to-global transformations with rewrite rules is very complex and tightly coupled which imposes severe constraints on maintenance and evolvability. The four main coupling problems of the current-day implementations are pre- sented and we indicate how these can be eliminated and reduced by our extension of the rewrite rule system. Furthermore we show how complex invasive compositions can be solved by abstract, reusable algorithms and mechanisms, rendering the implementation of local-to-global transforma- tions into a semi-automatic process.

The implementation of local-to-global transformations solely by means of rewrite rules is very complex and tangled. Extensions of transformation sys- tems to the rewrite rule paradigm with various data acquisition techniques like queries and tree traversals [14] did not reduce the tangling. We found that, similar to other software development techniques, this tangling severely jeopardizes future maintenance and evolution.

In the following section, we investigate the fundamental problem that forces a developer to write tangled rewrite rules. Section 3 introduces our solution architecture, which explains the architecture in more detail. In sec- tion 4 the architecture is evaluated and the implications of the approach are discussed. The related work is discussed in section 5 and the paper concludes in section 6.

In various software development methodologies one of the most common ap- proaches to facilitate evolution and maintenance is by minimizing the tangling and coupling within an implementation. By doing so, the components of an implementation can be more easily replaced by another one and can be reused in other implementations. Since the implementation of a set of transformations can be regarded as a normal software artifact, the reduction of the tangling and coupling hold the same premises. In the reminder of this section the coupling and tangling issues of the workaround strategy are discussed.

The first problem is the tight coupling of the secondary traversals and rewrite rules and the outcome of the primary rewrite rules. Consider the secondary traversals and rewrite rules to collect and move the non-locals of the inputfield transformation: the two non-local statements (an assignment (line 12) and two method calls (lines 13 and 15) ) of the topmost cons cell (line 10). These two nonlocals must be moved to the enclosing method node. Writ- ing such a traversal heavily depends on the context node (line 9) produced by the page transformation and the non-locals of the inputfield transformation (line 12-15), in order to make sure that the correct non-locals are matched. Like the traversals, the left hand side, the triggering condition and the right hand of the secondary rewrite rule that integrates the nonlocal on the correct location, is also expressed in terms of target nodes, which results in the same deficiencies.

The second problem is the scheduling problems of the secondary traversals and rewrite rules in order not to violate the context conditions of other sec- ondary traversals and rewrite rules. Let us take a look at the scheduling of the secondary traversal and rewrite rule of the inputfield transformation and those of the default value transformation and the key transformation. The latter handle the non-locals in the nested cons cells of the cons cell (line 10, pro- duced by the inputfield transformation). The correct location of the non-local statement (line 22) produced by the key transformation is in the beginning of the main method. However, depending on the strategy to deal with the cons cells the non-locals might end up in different locations. A breadth-first (top- down) strategy, places the non-local statement (line 22) inside its enclosing method defvalue. But a depth-first (bottom-up) strategy to deal with cons

To distinguish the non-local target nodes from the local target nodes in the rewrite rule, the non-local nodes are attached to a special NONLOCALS(...) node, which is in turn, together with the local target nodes, part of a cons cell. The example code below shows how the key transformation can be written as a normal rewrite rule.

A crucial part of the system and difference between the workaround is that non-locals can carry any kind of information. This is heavily exploited by the semi-automatic composition system to identify the non-locals and to guide the integration process of the non-local (see section 3.3.2). To ease and standardize the identification of the nonlocal, nonlocals always have at least a name or an identifier. In contrast to the common approaches dealing with names and identifiers, these need not to be unique within a rewrite rule nor amongst other rewrite rules. The advantage of this naming schema is that the name or identifiers can be used as a grouping mechanism, abstracting the actual number of nonlocals. The additional information can be used to select subgroups adhering to certain criteria. In the above example, the name of the first nonlocal is datamember, and the second nonlocal is initialize. No other additional information is provided, since their names suffice to distinguish between both of them.

The relocation step is executed after the execution of all modular rewrite rules. In this step, the non-local target AST nodes are moved to their correct location in the target AST. The correct location for the non-local AST nodes is deter- mined by (1) the grammar of the target language and (2) custom semantics which is specific for the desired target program. The relocation for non-locals, which correct location is based the grammar of the target language, is now driven by the target language grammar and can even be automated. The re- location for non-locals, which correct location is based on custom semantics, needs to be written manually.

Automatic relocation only works in cases where the location of the non- locals can be determined unambiguously or in cases when there is a simple sat- isfying strategy to disambiguate. In case of domain specific languages (DSLs) automatic relocation is very well suited. DSLs bear a lot of language con- structs that may only be used in a certain context, so disambiguation is not often needed. The technique is also useful for target languages which are gen- eral purpose languages. Classes, datamembers, methods and statements are typical language constructs that are only allowed in a specific context. If the location of other language constructs like expressions and statements cannot be unambiguously determined but the nearest possible location is often the desired one. However, automatic resolution fails for most types of non-locals in languages, like for example HTML, where most language constructs may be used in every other language construct. For these languages custom relocation must be used.

The parts enclosed in underscores are merely place holders for the values they denote. The non-local NODE produced by a certain source AST node is referred to by its name and the source AST node. It is rewritten into a non-local with a custom relocation path.

The above rule will substitute the initialize non-local node (denoted by NONLOCAL(INITIALIZE, NODE) ) produced by transforming the key source AST node, into a non-local with the specification path attached to it. The path //wizard points to the main method target AST node obtained by trans- forming the source AST ancestor wizard. The language to express the path is XPath [1].

Integration ensures that the non-locals are correctly integrated in the subtree pointed to by the relocation path according to the semantics of a particular integration and to particular language constraints. For example, the integra- tion of the non-local statements, produced by the inputfield transformation, into the main method body must obey the user-defined order of the different statements (first creation of all inputfields, followed by the attachment of lis- teners and finally their initialization with default values). Another example is the integration of the non-local datamember, produced by the same transfor- mation, into the main class, which must enforce the uniqueness constraint of the datamembers within a class.

Integration is a close interplay of three different policies: integration, corre- spondence and combination. The integration policy is called for each non-local that was relocated to an AST node. Its task is to integrate the non-local in the AST node itself or in one of its children. The correspondence policy is used

by the integration policy to check if nodes in the AST need to be combined with the non-local. The correspondence policy is more like a predicate defined on nodes to check if they correspond. The combination policy performs the combination between nodes.

Naturally, custom integration rules can be provided as well. The integra- tion for the non-local statements produced by the inputfield transformation must regroup the statements so that firstly all the inputfields are created, sec- ondly the listeners are installed and finally the inputfields are initialized with a default value. We will exploit the openness of our system, in particular the fact that each non-local can carry an arbitrary amount of information to guide the integration process (see 3.1). By attaching to each non-local statement an identifier, we can easily group during integration the statements. The order of the groups can be specified by additional information which can be interpreted by the integration rule.

Below the two rewrite rules that implement this integration rule are shown. The non-local node NODE is annotated with the group (NAME) to which it belongs, and a triplet specifying its integration. The integration contains besides the name of the integration rule (GROUP) also the name of the group of statements (NAME2) that must come before it. The first rule inserts the non-local NODE into the list of statements (STATS) before the first statement belonging to the same group (NAME) as the non-local does. When there is no such statement, the second rule inserts the non-local right after the last statement of the group of statements that must come before it.

Combination rules are declarative specifications that combine two AST nodes together in one node. They are implemented with rewrite rules that operate on a COMBINATION node. Like the CORRESPOND node, a COMBINATION node contains three parts: a name, and the two nodes that need to be combined. The first node is the non-local node and the second node is the node that is part of the AST. The result of a combination is a new node.

The above rule simply concatenates the method bodies without taking pos- sible variable declaration clashes into account, or differences in the parameter names of the methods. The later can be amended by proper reconciliation of the deviating method body. The former can be amended by extending the rule with a simple traversal and a condition (rule shown below). To avoid duplicate variable declarations within the scope of the merged methods, the intersection of the variable declarations of the two methods must be empty (line 3). Calculating the set of variable declarations is done by a top-down traversal of the bodies of the two methods where each variable declaration is collected a set (line 1). The traversal breaks when other nodes are encountered (line 2) to prohibit traversing into inner-scopes.

The correspondence check facilitates many necessary and interesting mecha- nisms. The two most important mechanisms are the combination of partial results and the enforcement of uniqueness constraints. By establishing a corre- spondence between the two partial main methods, these got combined together into a complete method during the integration. By establishing a correspon- dence among datamembers nodes (section 3.3.3), we were able to enforce that datamembers within a class must be unique.

The process of handling non-locals is divided into a number of separated mod- ules: the generation, the automatic relocation, the custom relocation, and the three integration, combination and correspondence rules. Each part addresses a tangible and separated concern of the implementation and captures its in- tention in a clear declarative way. We can thus conclude that the first coupling (section 2.3) between the mechanisms to implement local-to-global transfor- mations and a particular implementation for a transformation, has been elim- inated. The other couplings mentioned in the beginning of the paper have been adressed and discussed in the previous sections 3.2.3, 3.3.5.

The decoupling and disentangling of the implementation relies on the cor- rect use of names and the extra information attached to the nonlocals. The names themselves do not contain any semantics. Hence it is up to the user to properly use the names to guide himself in the implementation of the local-to- global transformations. A specification language to express these semantics would be more solid.

By reducing and eliminating the coupling in the implementation main- tenance and evolution is facilitated. The impact of maintenance and future evolutions is limited to specific modules. Changes to the source language have only an impact on the custom relocation. Changes to the target language have only an impact on the three rules (integration, correspondence and combina- tion rules) and on the automatic relocation. Since the latter is an automated process based on the target language, the changes to the target language are automatically reflected in the automatic relocation. Finally changes to the transformations of the source language to the target language are localized to and affects only the implementation parts of that transformation i.e. gen- eration, relocation and integration. During generation the rewrite rule may produce all the results (both local and non-local) that are derivable from the

source node under transformation without taking other transformations into account. If custom relocation was necessary, attaching the relocation path and the path itself is only dependent on the fact that one transformation pro- duces a result with a particular name, instead of all the transformations. The integration rules are solely defined on top of the target language nodes which yield them also independent of the other transformations.

There are a couple of limitations of our approach. First, the automatic relocation process is limited to the grammar of the target language. Using more information about the semantics of the target programming language could improve the system. Second, the integration process is incremental. This incrementability increases the complexity of the integration rules. A full discussion of these issues can be found in [4].

The validation of our approach is based on early experiments including the implementation of the compiler for the WIZ language used in this paper. We are currently involved in several experiments to validate our technique: the development of a DSL for quizzes with the flemish broadcasting company [5], the development of a open set of language components for a family of DSLs to describe advanced transaction models [7], and the development of modular language features for developing EJB specifications. To implement these lan- guages local-to-global transformations and other invasive composition mecha- nisms are needed. These languages will be used as a case study and serve as an empirical validation for our approach. The mechanisms proposed in this paper were implemented on top of the linglet transformation system (LTS) (previ- ously known as the keyword based programming toolkit [3]). The modularity of the system immediately acted as additional validation mechanism, testing whether the implementation of our semi-automatic mechanism obeyed this. Since modularity reduces the dependencies, this modularity is a key enabler for a better maintainable and evolvable language implementation.

In the survey of Jonne van Wijngaarden et. al. [15] current day transforma- tion systems are compared and classified according to three transformation mechanics i.e. scope, direction and stage. Transformations with a wide target scope and a single node source scope are called local-to-global transformations. The survey explored whether the basic mechanisms like querying and travers- ing the parse tree are available in current day transformation systems in order to implement local-to-global transformations. In this paper we went a step further and investigated the repercussions of those mechanisms on the com- plexity, maintainability and evolvability of their implementations. We found that those mechanisms easily result into over-complex implementations and severely constrain maintainability and evolvability.

Transformation systems, in particular rewrite rule systems, fail to deal with local-to-global transformations without corrupting maintainability and future evolvability. Our solution architecture enables the use of modular and sim- ple rewrite rules to implement local-to-global transformations hereby avoiding complex, tangled traversals and rewrite rules and scheduling problems. We identified four identified coupling problems in current-day implementations. All of these have been reduced and some have been eliminated by our ap- proach. Furthermore no other undesired couplings were introduced in the process. The impact of maintenance and future evolutions of one transfor- mation to the implementation parts of that same transformation is localized and limited to specific modules. The relocation mechanism and the reusable integration, correspondence and combination rules across different implemen- tations render the implementation of local-to-global transformation into a semi-automatic process, hence significantly reducing the implementation ef- fort. This has a positive impact on the maintainability and future evolvability of the implementation.

