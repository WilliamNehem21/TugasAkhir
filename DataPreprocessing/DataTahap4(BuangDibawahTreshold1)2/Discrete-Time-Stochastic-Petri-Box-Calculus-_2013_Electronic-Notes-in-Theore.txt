We propose discrete time stochastic Petri box calculus extended with immediate multiactions, called dt- siPBC. The step operational semantics is constructed via labeled probabilistic transition systems. The denotational semantics is defined via labeled discrete time stochastic Petri nets with immediate transitions (LDTSIPNs). A consistency of both semantics is demonstrated. In order to evaluate performance, the cor- responding semi-Markov chains are analyzed. In a case study, performance of the shared memory system is evaluated.

Algebraic process calculi are a recognized formal model for specification of com- puting systems and analysis of their behaviour. Petri Box Calculus (PBC) [2] is a flexible and expressive process algebra developed as a tool for specification of Petri nets structure and their interrelations. Its goal was also to propose a compositional semantics for high level constructs of concurrent programming languages in terms of elementary Petri nets. PBC has a step operational semantics in terms of labeled transition systems. Its denotational semantics was proposed in terms of a subclass

There are timed extensions of PBC considering a deterministic or a nondeter- ministic time model: time Petri box calculus (tPBC) [7], in which an interleaving semantics is considered and actions have a time interval associated; timed Petri box calculus (TPBC) [11], where a step semantics is considered and multiactions have time durations associated, and arc time Petri box calculus (atPBC) [16], in which a step semantics is also considered and time intervals for the multiaction delays. There are also stochastic extensions of PBC: stochastic Petri box calculus (sPBC) [8, 9], with a continuous time model and multiaction delays that follow a negative exponential distribution. A discrete time stochastic extension of finite PBC was presented in [17], dtsPBC, providing a step operational semantics and a deno- tational semantics based on dts-boxes, a subclass of labeled discrete time stochastic PNs (LDTSPNs).

In this paper, dtsPBC is extended with the iteration operator and immediate multiactions. This new language, discrete time stochastic and immediate Petri box calculus (dtsiPBC), is a discrete time analog of sPBC. Immediate multiactions in- crease the specification capability: they can model instant probabilistic choices and activities with negligible durations. They are also used to specify urgent activities and the ones, which not relevant for performance evaluation. In many cases, they result in a more clear system representation. We define a step operational semantics by using labeled probabilistic transition systems, and a corresponding denotational semantics in terms of a subclass of LDTSPNs with immediate transitions (LDT- SIPNs), called dtsi-boxes. Consistency of both semantics is then demonstrated. The corresponding stochastic process, semi-Markov chain (SMC), is constructed and in- vestigated, with the purpose of performance evaluation. At last, a case study of a system with two processors and a common shared memory explains how to model and analyze performance of concurrent systems with dtsiPBC.

There are many well-known works related to stochastic extensions of process algebras (SPAs). Due to the lack of space we can only mention a few of them, as MTIPP [4], PEPA [5] and EMPA [1]. The first difference between dtsiPBC and these classical SPAs comes from PBC, since dtsiPBC is based on that calculus: all operations and a notion of multiaction are inherited from PBC. The second difference is discrete conditional probabilities of activities in dtsiPBC due to its discrete time semantics, whereas the action rates are used in the standard SPAs with continuous time semantics. Discrete time operational semantics of dtsiPBC allows for concurrent execution of activities in steps. In continuous time semantics, concurrency is simulated by interleaving, since simultaneous occurrence of any two events has zero probability according to the properties of continuous probability distributions. The third difference are immediate multiactions in dtsiPBC which have the same priority while immediate actions in EMPA can have different prior- ities. There exist no immediate actions in MTIPP and PEPA. There is a recent work by Markovski and de Vink [10], where a SPA with discrete time is defined, providing for it an interleaving semantics, but in this work immediate actions are

The paper is organized as follows. In Section 2, the syntax of the extended calculus dtsiPBC is presented. In Section 3, we construct the operational semantics of the algebra in terms of labeled probabilistic transition systems. In Section 4, we propose the denotational semantics based on a subclass of LDTSIPNs. In Section 5, the corresponding stochastic process is defined and analyzed. In Section 6, an illustrative example of the shared memory system is presented and investigated as a case study. Section 7 summarizes the results obtained and outlines research perspectives.

As in PBC, static expressions specify the structure of processes and correspond to unmarked LDTSIPNs. A restriction must be introduced to avoid inconsistency of the iteration operator. We do not allow any concurrency at the highest level of the second argument of iteration. This is not a severe restriction, since we can prefix parallel expressions by an activity with the empty multiaction. The mentioned inconsistency can result in non-safe nets [3].

DynExpr will denote the set of all dynamic expressions of dtsiPBC. If the underly- ing static expression of a dynamic one is not regular, the corresponding LDTSIPN can be non-safe (but it is 2-bounded in the worst case [3]). A dynamic expression is regular if its underlying static expression is regular. RegDynExpr denotes the set of all regular dynamic expressions of dtsiPBC.

Action and empty loop rules. With action rules the execution of activities is captured. The prioritization of immediate multiactions w.r.t. stochastic ones is also captured by these action rules. We also have the empty loop rule, which is used to capture a delay of one time unit at any state when no immediate multiactions are

to stay at a tangible state (only stochastic movements are possible) without firing any activities. This is defined as an empty movement that takes one time unit. This rule reflects a non-zero probability to stay at the current state at the next time moment, which is an essential feature of discrete time stochastic processes. This is a new rule that has no prototype among inaction rules of PBC, since it represents

Expressions of dtsiPBC can contain identical activities. Thus, to avoid technical difficulties, such as the proper calculation of the state change probabilities for mul- tiple transitions, we can always enumerate coinciding activities from left to right in the syntax of expressions. The new activities obtained from synchronization will be annotated with concatenation of numberings of the activities they come from, hence, the numbering we use has a tree structure to reflect the effect of multiple synchronizations. But notice that the new activities resulting from synchronizations in different orders should be considered up to permutation of their numbering. In this way, we can recognize different instances of the same activity.

Due to the lack of space we omit a formalization of the numbering mechanism, which is straightforward. From now onwards, we will assume that the identical activities are enumerated when needed to avoid ambiguity. This enumeration is considered to be implicit.

synchronized immediate multiactions, since the weights can be interpreted as the rewards, thus, we collect the rewards. Moreover, we express that the synchronized execution of immediate multiactions has more importance than that of every single one. Since execution of immediate multiactions takes no time, we prefer to execute in a step as many synchronized immediate multiactions as possible to get more progress in behaviour, this aspect will be used later, while evaluating performance on the basis of the embedded discrete time Markov chains. We do not have self- synchronization, i.e. the synchronization of an activity with itself, since all the (enumerated) activities executed together are considered to be different. This allows us to avoid many technical difficulties [3].

The structure of the plain dtsi-box corresponding to a static expression is con- structed as in PBC [3], i.e. we use simultaneous refinement and relabeling meta- operator (net refinement) in addition to the operator dtsi-boxes corresponding to the algebraic operations of dtsiPBC and featuring transformational transition rela- belings. As we are taking the same structure for the resulting Petri net as in PBC, the obtained plain dtsi-boxes are safe and clean.

By definition of Qsy a, the synchronization is only possible when all the transi- tions in the set are stochastic or when all of them are immediate. If we synchronize the same set of transitions in different orders, we obtain several resulting transitions with the same label and probability or weight, but with the different numberings having the same content. We only consider a single one from the resulting transi- tions in the plain dtsi-box to avoid introducing redundant ones. Let us define the denotational semantics as a homomorphism.

Proof. For the qualitative behaviour, we have the same isomorphism as in PBC. The quantitative behaviour is the same, since the activities of an expression have the probability or weight parts coinciding with the probabilities or weights of the transitions belonging to the corresponding dtsi-box, and we use analogous prob- ability or weight functions to construct the corresponding transition systems and reachability graphs.	2

As we have mentioned earlier, every marked plain dtsi-box could be interpreted as the LDTSIPN. Therefore, we can evaluate performance with the LDTSIPNs corresponding to dtsi-boxes and then transfer the results to the latter. Let  denote isomorphism between SMCs that binds their initial states.

Proof. By Theorem 4.5, definitions of underlying SMCs for dynamic expressions and LDTSIPNs, and the following. For the associated SMCs, the average sojourn time in the states is the same since it is defined via the analogous probability functions. The transition probabilities of the associated SMCs are the sums of those belonging to transition systems or reachability graphs.	2

We now demonstrate how steady-state probability mass function (PMF) is used for performance evaluation, with the shared memory system case study. This illus- trative example demonstrates our modeling and analysis technique. More complex systems can be easily constructed with the flexible and powerful operations of dt- siPBC, taking advantage of the algebraic compositionality.

The advantage of our framework is twofold. First, one can specify in it concur- rent composition and synchronization of (multi)actions, whereas this is not possible in classical Markov chains. Second, algebraic formulas represent processes in a more compact way than PNs and allow one to apply syntactic transformations and comparisons. Process algebras are compositional by definition and their operations

naturally correspond to operators of programming languages. Hence, it is much easier to construct a complex model in the algebraic setting than in PNs. The com- plexity of PNs generated for practical models in the literature demonstrates that it is not straightforward to construct such PNs directly from the system specifications. Strong points of dtsiPBC are the multiaction labels, immediate multiactions, pow- erful operations, a step operational and a Petri net denotational semantics allowing for concurrent execution of activities (transitions), as well as analytical performance evaluation. dtsiPBC is well suited for the discrete time applications, such as busi- ness processes, neural and transportation networks, computer and communication systems, whose discrete states change with a global time tick, as well as for those, in which the distributed architecture or the concurrency level should be preserved while modeling and analysis (remember that, in step semantics, we have additional transitions due to concurrent executions).

