This paper describes a new computational model for rule-based programming with graphs and diagrams. Using existing nesting concepts for graphs, this model defines an intuitive way of nested graph transformation that is based on variable matching. Shape rules are introduced for specifying structural consistency conditions on nested graphs. Shape rules set up a decidable type discipline for a refined model of shapely nested graph transformation. Since the refined model is compatible with the diagram editor DiaGen, it can be extended by customizable diagram interfaces so that it specifies rule-based diagram transformation.

This paper is about a computational model of a rule-based language for programming with diagrams. The model uses graphs as a data model, since practically every kind of diagram can be abstractly represented as a graph, even if the diagram itself does not look graph-like [1]. In order to reach the expressive power of recursive data structures in conventional languages, graphs have earlier been extended by a concept of nesting [5]. In contrast to related notions of hierarchical graphs that are used for software modeling [3,7],

Graph transformation is a rich theory for rule-based computations on graphs [21]. We combine simple concepts of graph transformation, like edge replacement [4] and substitutive transformation [19], to a new way of nested graph transformation that is based on variable matching and instantiation. We find this intuitive, elegant, and particularly useful for programming, as it resembles other rule-based computational models, e.g. term rewriting [15].

Furthermore, we introduce shape rules that specify structural consistency conditions on nested graphs. Shape rules are similar to algebraic data type definitions in functional languages, but more powerful as sharing of substruc- tures may be specified as well; they also go beyond typing concepts of other programming languages based on graph transformation like ProGres [24], which merely restrict the labelling and degree of nodes and edges. Nested graph transformation is refined to shapely nested graph transformation, by using shapes as a consistent and decidable type discipline that rules out ill- shaped graphs.

This paper is structured as follows: Section 2 recalls nested graphs, to which graph transformation is extended in section 3. In section 4, we de- scribe the specification of graph shapes, and refine transformation in section 5 so that it adheres this shape discipline. The integration of shapely nested graph transformation into the DiaGen diagram editor generator is sketched in section 6. We conclude with some remarks on related and future work (in section 7).

Shape analysis has been used for inferring whether pointer structures in im- perative programs are shaped as doubly-linked lists, root-connected trees and the like [23]. Here we devise a means to specify shapes of graphs in a way that is not possible on the level of imperative languages (nor in functional or logical languages where pointers are hidden altogether). The specification is based on edge replacement [4], but we immediately adopt a terminology fitting to our purposes.

Theorem 4.1 shows that shape grammars cannot define the recursively enumerable graph languages. For instance, it is not possible to define arbitrary control flow graphs in a this way. However, if a very simple form of embedding rules is allowed in addition to the shape rules used here, arbitrary control flow graphs can be defined as well, and membership can still be decided [16].

The shape discipline is consistent, since the result of a shapely transfor- mation is shaped again. If the replacement graphs of rules do not contain variables that do not appear in their pattern graphs, shapely transforma- tion keeps graphs variable-free. (this is important since in most cases, only variable-free graphs shall be transformed.)

The DiaGen tool [16] allows to generate diagram editors from the formal specification of a diagram language that is based on graph transformation. It already supports those tasks: the diagrams edited with the generated diagram editor are internally represented by shaped graphs as described in Section 4. The shape system is the main constituent of the specification from which diagram editors are generated by DiaGen. Below we explain how DiaGen shall realizes translations between graphs and diagrams.

system also offers some elementary support for creating diagrams from graphs. DiaGen allows to specify how a diagram is created from its building blocks when the syntactic structure of the representing graph has been created by the parser. This mechanism is simply based on attribute evaluation rules which are attached to the grammar productions.

We have devised a notion of nested graph transformation that extends the rewriting of terms [13] (which are trees over function symbols) to trees over graphs (namely, nested graphs) in a straightforward way: Transformation substitutes variables in a rule pattern, embeds the instantiated pattern into a context, and then inserts an instantiated replacement into that context. This way of graph transformation seems to be quite intuitive from a programming point of view. Furthermore, it can easily be refined by a shape discipline that is consistent and decidable, and may also allow for more efficient implementation. Finally, this way of transformation integrates smoothly with diagram tools. We hope that this is accepted as excuse for proposing yet another variation of graph transformation.

Future Work. Transformation may be highly nondeterministic. This may lead to an overload of backtracking. So, nondeterminism has to be restricted to the degree that is really needed for programming. Good design of rule patterns, nesting structure, and shapes can already reduce nondeterminism.

