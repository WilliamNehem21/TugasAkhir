program. (If we view a set of states as a predicate that is true only in those states then this corresponds to the weakest state predicate.) Of course, an enumerative approach, where we consider each state as a potential initial state, is impractical. Our goal in this paper is to identify efficient techniques for identifying the largest set of legitimate states for a given program.

The rest of the paper is organized as follows: first, we define the problem statement in Section 2. Then, we present our algorithms in Section 3. Next, we illustrate our algorithm in Section 4. We discuss related work in Section 5 and the conclusion is in Section 6.

In this section, we present our algorithm to automatically generate the weakest invariant using the program transitions and its specification. The goal of our algo- rithm is to generate the weakest possible invariant from where the program satisfy its safety and liveness specification. Our algorithm consists of three main parts: the invariant generator, the safety checker, and the liveness checker. We will describe each of the three algorithms in subsection 3.1-3.3.

First, the algorithm initializes the invariant Isf to be the initial invariant Iinp excluding the states in SPEC bs (Line 1). Then, the algorithm starts a fixpoint computation that removes undesired states from the initial invariant. If Isf contains a state s0 such that the program can execute the transition (s0, s1), which violates safety, then s0 cannot be in Isf . Hence, we remove s0 from Isf (Line 4). Note that a state is removed from Isf only if the given program violates safety from that state. Thus , if Isf contains a state s0, p contains a transition (s0, s1), and s1 has been removed from Isf , then s0 must also be removed from Isf (Line 5). This process continues until a fixpoint is reached. At this point, it exits the loop and returns the desired invariants Isf .

In some cases, the program actions are partitioned in terms of system actions and environment actions. It is expected that the environment actions will eventually stop (for a long enough time) so that the system actions can make progress (and satisfy liveness property). In such cases, we can apply the above algorithm as follows: The program actions used in SafetyChecker will consist of both the system actions and the environment actions. The program actions used for LivenessChecker will consist of only the system actions.

Line 5 of SafetyChecker : If s1 is a state already removed from the final invariant, i.e., there is a program computation that starts from s1 and violates the specifi- cation, and (s0, s1) is a program transition then there exists a computation that starts from s0 and violates the specification.

removed. Now, the loop on lines 5-7 removes all deadlock states in invF . If any state, say s0, in J is not removed then that implies that there are infinite computations of tmpP that start from s0. For instance, this happens if a cycle is reachable from s0. By construction, this computation cannot reach 7 . Thus, if a state s0 is removed on Line 9 of LivenessChecker then there is a computation from s0 that violates the specification.

In Subsections 4.1-4.2, we describe and analyze case studies, namely the token ring program [5], and the Mutual Exclusion program [18]. We chose these classical examples from the literature of distributed computing to illustrates the feasibility and applicability of our algorithm in generating the weakest invariant.

Since we focus on the design of distributed programs, for brevity, we specify the state space of the program in terms of its variables. Each variable is associated with its domain. A state of the program is obtained by assigning each of its variables a value from the respective domain. The state space of the program is the set of all states.

Throughout this section, all case studies are run on a MacBook Pro with 2.6 Ghz Intel Core 2 Duo processor and 4 GB RAM. The OBDD representation of the Boolean formula has been done using the C++ interface to the CUDD package developed at the University of Colorado [19].

Several techniques have been developed to verify program correctness [6,16,9,7,10,8]. For most of those methods, the program is translated into a logical formula that describes the program behavior and properties. Then, tools are used to verify the correctness of the program. For many of these tools identifying the program invariant is an essential step. Several approaches have been proposed to improve the automatic invariant generation[15,2,17,3,4]. These methods can be widely classified as either top-down or bottom-up approaches. The top-down approach starts with the weakest possible invariant and uses program specification to strengthen that

invariant. The bottom-up approach performs forward propagations of the program actions to derive the invariant. Our algorithm is a top-down approach since it starts by initializing the invariant to be the whole state space and later removes states that violate the predefined safety and liveness specifications.

Our algorithm uses the program actions and specification to automatically gen- erate the weakest invariant. Our algorithm consists of two main steps. The first step is to generate the initial invariant to be the set of the states the given program dose not violate the safety specification. Then, the algorithm ensures that the gen- erated invariant satisfies the liveness properties by removing any state that violates such properties. In the two case studies we used to demonstrate our algorithm, we generated the exact same invariant used in the automation of fault-tolerance for each of those cases. Furthermore, we note that the time needed to generate such invariants was very small.

