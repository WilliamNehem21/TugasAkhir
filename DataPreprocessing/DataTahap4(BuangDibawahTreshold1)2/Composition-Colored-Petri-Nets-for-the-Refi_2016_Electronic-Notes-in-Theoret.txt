Model refinement is an important step in the model building process. For reaction-based models, data refinement consists in replacing one species with several of its variants in the refined model. We discuss in this paper the implementation of data refinement with Petri nets such that the size of the model (in terms of number of places and transitions) does not increase. We capture the compositional structure of species by introducing a new class of Petri nets, composition Petri nets (ComP-nets), and their colored counterpart, colored composition Petri nets (ComCP-nets). Given a reaction-based model with known compositional structure, represented as a ComP-net, we propose an algorithm for building a ComCP-net which implements the data refinement of the model and has the same network structure as the initial ComP-net.

The paper is organized as follows: in Section 2 we detail the concept of structural model refinement, as discussed in [4,5]. In Section 3 we introduce the concept of Petri nets with a compositional part, which can capture not only the functioning of a model, but also the compositional relationships between its elements. We first introduce composition Petri nets (ComP-nets), and then give a method of coloring a given ComP-net into a colored composition Petri net (ComCP-net). We discuss next in Section 4 how to implement reaction-based models as Com(C)P-nets. We detail the implementation of model refinement using ComCP-nets in Section 5, and we draw some conclusions in Section 6.

In this section we introduce a new class of Petri nets, composition Petri nets. Such nets have two parts: an active part, that behaves as a standard Petri net, and a passive part, with transitions whose role is to describe how places in the network relate to one another, i.e. how elements in some places are composed of elements in other places.

Sometimes, due to the complexity of a network, it becomes unfeasible or very dif- ficult to read the corresponding Petri net. In such cases, an extension of standard Petri nets, colored Petri nets, might help reduce the size of the model. A complete description of colored Petri nets, their properties and applications can be found in [11,12,13]. Here, we consider the definitions in [13]. We extend colored Petri nets to include a compositional part, in a similar manner as we extended standard Petri nets in the previous subsection.

We want to use ComCP-nets as a means to easily model and implement the structural refinement of a system, as described in Section 2. For this, the key ingredient is the choice of color sets, especially for the complex places. The color sets should reflect the composition of places and, moreover, do it in such a way that the process of assigning color sets to complex places can be done automatically. Thus, for atomic places we propose the use of simple color sets, e.g. int or Enumeration. For complex places, the corresponding color set contains all possible multisets over the color sets of its constituent atomic places, with multiplicities dictated by the actual composition of the place. We provide in what follows a coloring example using this strategy.

For a ComCP-net, the properties of colored Petri nets (e.g. boundedness, live- ness, deadlock, conflict, invariants, reachability graph) can be generalized, and they will refer only to the active part of the network. We extend the notion of transition instance (binding element) to cover the composition and the active transitions of a ComCP-net respectively. We denote by IT the set of active transition instances,

Note that there are multiple ways of representing a model M as a ComCP-net, depending on the color sets one chooses, and on the bijections fP , fT and fc. Note also that, because of the bijectivity of the functions characterizing the model imple- mentation, for every active transition it holds that each of its instances with true guards stands for a reaction in the model; moreover, a place can encode more than one species if and only if all species that it encodes take part in similar reactions, in all possible combinations. One could also formulate the previous definition to say that a ComCP-net implements a model if its unfolding implements that model.

Example 5.3 For the Example 4.4, let us consider a refinement where the enzyme E can be in two different conformations, E1 and E2, both of which can catalyze the production of P . Moreover, consider that the environment can induce the transformation of one conformation into the other, but this is not explicitly modeled in the system. In order to reflect this change, the complex species ES refines to

We introduced in this paper a new class of Petri nets that has capabilities for fast model refinement, when the compositional structure of the elements is known. Such Petri nets have a passive compositional part and an active part. The passive part encodes the compositional structure of the elements (species, encoded as places in the network), and all transitions in this part never fire. The active part encodes the behavior of the model.

of models and are good at handling model explosion upon refinement of a model. For example the Kappa language, see [2,7,17], allows compactness via explicitly mentioning an attribute only when its value is important, and omitting it whenever the actual value is not important, with the understanding that a reaction happens regardless of the value of that particular attribute. Refinement could resume then to adding attributes to a species, as presented e.g. for a case study of the heat shock response in [10]. The framework we are proposing allows for a similar approach of modeling, where attributes and internal states of species can be represented in the color set. Variables can be used whenever the explicit value of some attribute is not important, and actual colors should be used in arc expressions and guards when the particular value of an attribute is important. ComCP-nets have the advantage of being graphical and adding structural information in a formalized manner to the widely used framework of Petri nets.

