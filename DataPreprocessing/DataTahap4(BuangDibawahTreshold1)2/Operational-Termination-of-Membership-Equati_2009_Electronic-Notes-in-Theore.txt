To illustrate the challenges of automating termination proofs for expressive rewriting-based programs with features (i)-(iv) we use some Maude programs. This has the advantage of familiarizing the user with the sugared notation that makes the generalization from OS to MEL so seamless. We refer to [3, Section 3.3] and

cmb cons(N,IL) : NatIList if N : Nat /\ IL : NatIList . cmb cons(N,L) : NatList if N : Nat /\ L : NatList . cmb take(N,IL) : NatList if N : Nat /\ IL : NatIList . cmb length(L) : Nat if L : NatList .

provides an interesting example of a nonterminating program involving no rewrite rule (borrowed from [8, Introduction]). Here, a conditional membership establishes that terms s(N) (for terms N of sort Nat) have sort Inf provided that s(s(N)) has sort Inf too. Note that no rewriting step is involved here. However, the nontermination of the INF program is witnessed by the infinite proof tree,

Proposition 7.1 suggests that making use of some proper results for proving ter- mination of MS-TRSs can be useful for our purposes. Termination of MS-TRSs was investigated by Zantema [26] as an auxiliary technique for proving termination of (unsorted) rewriting (although he mentioned no systematic method for proving termination of MS-TRSs). Zantema defined the persistency of a computational property of many-sorted TRSs as a property which is not affected by the removal of sort information from the MS-TRS. Of course, termination is a persistent property of one-sorted MS-TRSs. Zantema showed that, in general, termination is not a persistent property of MS-TRSs, but he gave conditions for persistency of termi- nation for MS-TRSs: termination is persistent for MS-TRSs not containing both duplicating and collapsing rules [26, Theorem 14]. Aoto solved a conjecture (posed by Zantema) by showing that termination is persistent for MS-TRSs that contain only variables of the same sort [2, Theorem 4.23].

Persistence is an interesting property for our purposes: identifying subclasses of OS-TRSs for which termination is persistent allows us to remove all sort information to prove termination by using the underlying TRS without worrying about losing termination proofs due to missing sort information. When no ordering among sorts is given in an unconditional SCS-MRT, we actually start from a many-sorted TRS. Then, we can use these results to find a simpler proof of termination.

