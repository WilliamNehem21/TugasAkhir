Being syntactic, the restrictions on rules are often rather intricate, and it is not clear how they arise. This intricacy makes proving meta-theoretic results difficult, and makes it virtually impossible to see how these results are affected by changes to the language under consideration, or to the notion of observable behaviour of the semantics being defined. One gets the feeling that there is some deeper mathematical structure at play that is being obscured by the syntactic clutter.

Being syntactic, operational semantics presented in this form is language-specific. As a result, it is difficult to implement a generic notion of operational semantics in a high-level programming language such as Haskell. Compare, for example, with the use of logical frameworks to implement logics and type theories; such language-independent frameworks are clearly missing for operational semantics. One would like to be able to write data types whose inhabitants are operational semantics, and programs which manipulate such data types.

Being syntactic, it is not clear how to relate operational semantics to the more abstract and high-level denotational semantics. This is more than just a math- ematical irritation: by utilising concepts from category theory, denotational se- mantics has given us many language-independent mathematical tools to structure programs. These include, for example, monads, initial algebra semantics and Kan extensions. The fact that these tools are language independent suggests that they somehow get at the essence of computation. The same cannot currently be said of operational semantics, with its inherently language-dependent flavour.

Overall, we are left with the feeling that we need to get at the mathematical essence of operational semantics, to allow mathematical tools to be used to structure and reason about operational semantics in a high-level manner, and to make it easier to relate it to denotational semantics. Indeed, at this point, we can begin to wonder if we really need operational and denotational semantics. A categorical semantics encompassing both approaches may actually be what we are striving for.

As shown in these last two examples, when the transition relation is a function, we can remove the powerset (or list). In this manner, the determinism of the underlying transition system is made explicit, avoiding the need for a separate proof. Being able to describe precisely what is observable by choosing the appropriate behaviour functor is an important advantage of the coalgebraic approach.

Coalgebras provide an abstract model of transition systems. Unfortunately, they do not support a proper theory of SOS. In particular, the carrier of a coalgebra is unstructured, and hence a purely coalgebraic approach will not be able to take advantage of the fact that the carrier of the coalgebra is the set of terms, and hence, has an algebra structure. Therefore, in order to develop a mathematical operational semantics, what we need is a structure which contains both coalgebraic and algebraic features. Turi constructed such a structure in his categorical framework for SOS by focusing on the operational rules rather than on the transition relation.

In general, a rule consists of some premisses and a conclusion. The source of the conclusion consists of an operator of the language (the ; operator, in the example above) applied to some metavariables (p and q) which stand for arbitrary terms. Premisses are transitions from these metavariables. Finally, the target of the con- clusion is a term with metavariables taken from the source of the conclusion and from the premisses (q and pj, respectively).

Every operational rule OR s b induces a lifting opMonad of the syntax monad Term s to the category of b-coalgebras. The function opMonad (the operational monad [22]) takes a b-coalgebra on x and returns a b-coalgebra on Term s x . Intu- itively, opMonad shows that given an operational rule and the semantics of variables x in the terms, we can give semantics to terms with variables from x .

This is the fundamental tool for combining modular operational rules. The constraint that the monad m and behaviour b should be the same for the input rules of appears to be a severe restriction that undermines our original goal. However, as it will be shown next, we can sidestep this restriction by defining modular operational rules over an abstract monad and behaviour.

We have developed a modular approach to operational semantics which allows us to define the semantics of a language as a combination of the semantics of its in- dividual components. Our approach is based on writing the operational semantics on partially known syntax and behaviour, and on the representation of an opera- tional semantics as a polymorphic function that distributes syntax over behaviour. This high-level modular approach leads to a simple and natural implementation in Haskell, which serves to make our work more accessible and also to allow readers to experiment further with our constructions.

