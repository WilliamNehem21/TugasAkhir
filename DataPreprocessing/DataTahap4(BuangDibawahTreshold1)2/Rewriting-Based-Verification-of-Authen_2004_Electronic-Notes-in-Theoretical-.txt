We propose a method of formally analysing security protocols based on rewriting. The method is roughly as follows. A security protocol is modeled as an observational transition system, which is described in CafeOBJ. Proof scores showing that the protocol has safety (security) properties are then written in CafeOBJ and the proof scores are executed (rewritten) by the CafeOBJ system.

In this paper, we propose a method of formally analysing security protocols based on rewriting. The method is roughly as follows. A security protocol is modeled as an observational transition system[19,20], which is described in CafeOBJ[1,5]. Proof scores showing that the protocol has safety (security) properties are then written in CafeOBJ and the proof scores are executed (rewritten) by the CafeOBJ system. The CafeOBJ system can be used as

The rest of the paper is organized as follows. Section 2 mentions CafeOBJ. Observational transition systems and a way of describing them in CafeOBJ are written in Sect 3. Section 4 gives a brief description of the NSPK protocol corrected by Lowe. Section 5 describes the observational transition system modeling the protocol and its specification in CafeOBJ. Section 6 shows (part of) the proof that the protocol has a safety property. Section 7 gives related work, and we conclude the paper in Sect 8.

Needham and Schroeder[18] proposed an authentication protocol, called the NSPK protocol, with public-key cryptosystems in 1978. Lowe[15] found out 17 years later that there was a serious attack on the protocol that an intruder could impersonate another agent to establish a session with yet another agent. He also proposed one possible correction, which is called the NSLPK protocol in this paper.

Let us model a system in which an arbitrary number of principals take part in the NSLPK protocol as an ots. One of the principals is assumed to be an intruder. The intruder obeys the basic assumptions of the Dolev-Yao model[7]. All it can do illegally is enumerated as follows:

one of the four possible values i1, i2, i3 and i4, while lp1,p2,Res is used for p1 as responder, having one of the four possible values r1, r2, r3 and r4. If lp1,p2,Ini is i1, i2, i3 and i4, p1 as initiator is ready for starting a new run of the protocol with p2, ready for receiving a message of type 2 from p2, ready for sending a message of type 3 to p2 and has a session with p2, respectively. If lp1,p2,Res is r1, r2, r3 and r4, p1 as responder is ready for receiving a message of type 1 from p2, ready for sending a message of type 2 to p2, ready for receiving a message of type 3 from p2 and has a session with p2, respectively. n1p1,p2,Ini and n2p1,p2,Ini are used for p1 so as to record the nonce created by p1 and the nonce received from p2 respectively when p1 as initiator tries establishing or has a session with p2 as responder. n1p1,p2,Res and n2p1,p2,Res are used for p1 so as to record the nonce received from p2 and the nonce created by p1 re- spectively when p1 as responder tries establishing or has a session with p2 as initiator. Initially lp1,p2,Ini is i1, lp1,p2,Res is r1, and n1p1,p2,r and n2p1,p2,r are an arbitrary value that is never used as nonce.

We describe the proof that the predicate pr is still true in the the successor state msg1+(s,p1,p2) for any principals p1, p2. We first consider two cases. One corresponds to states in which transition rule msg1 +p1,p2 is effective, and the other to ones in which it is not. The proof score for the former case is as follows:

