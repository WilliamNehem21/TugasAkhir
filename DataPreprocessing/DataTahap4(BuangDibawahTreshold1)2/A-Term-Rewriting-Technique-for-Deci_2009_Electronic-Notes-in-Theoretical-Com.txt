of variables and zero) under successor. To be able to have an ordering on BDDs, we will need to define an ordering on terms of the logic. What is the appropriate ordering on terms? The answer, unfortunately, is not obvious. In [2] Chapter 3, two orderings which resulted in failed attempts are explained. One of them does

The approach introduced here is in a sence a variant of [3], though our new ordering yields some simpler representation of the terms in the proof settings. Be- sides, it provides an alternative technique for the OBDD transformation. This, as a result can offer a different method for possible extensions of the background logic (notice that as mentioned above, finding the right order is not easy, and this prob- lem would remain for bigger theories as well). In the current work, substitution rules are certainly different than those of the previous work. In addition, we also introduce an automatic way for transforming any formula (in our FOL fragment) into some Ordered BDD. We do this by means of a so called sort algorithm.

The first step to make a BDD ordered, is to simplify all its guards, in isolation. Here, simplification on guards will be done by Definition 3.2. In Section 3.1 we present a new order on terms. In Definition 3.8 we define an ordering on guards. Notice that these definitions are different from those of [3]. Thereafter, we will introduce a term rewrite system. Using this system we simplify BDDs to their most reduced form, denoted as (0, S, =)-R-OBDD.

