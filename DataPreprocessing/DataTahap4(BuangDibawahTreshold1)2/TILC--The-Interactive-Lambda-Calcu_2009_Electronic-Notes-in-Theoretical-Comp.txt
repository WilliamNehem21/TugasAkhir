This paper introduces TILC: the interactive lambda-calculus tracer. TILC aims to be a friendly user graphical application that helps teaching/studying the main basic concepts of pure untyped lambda-calculus. This is achieved by allowing users to graphically interact with a sort of parse-tree of the lambda-terms and automatically reproducing these interactions in the lambda-term. This graphical interaction encourages students to practice with lambda-terms easing the learning of the syntax and of the operational semantics of lambda-calculus.

TILC has been developed by David Ruiz as a diploma thesis and supervised by Mateu Villaret. It has been fully developed using HASKELL, and the tools wxHaskell [1] for the graphical interface and Happy [4] to build the parsers. Its home page is http://ima.udg.edu/~ villaret/tilc from where Windows bina- ries can be freely downloaded. Other platform binaries and source code are under preparation.

The paper proceeds as follows: in Section 2 we briefly define the language that is considered in TILC by recalling the basic concepts of pure untyped lambda-calculus. In Section 3 we explain the main features of the tool and illustrate them by means of examples, we also overview the modular architecture of the tool. Finally, in Section 4 we conclude and explain the forthcoming extensions of the tool suggested from the first impressions collected from its usage in Girona and by some other inputs from other places where the tool is also being used.

The syntax of these lambda-terms may be defined with a BNF grammar. First of all we assume that we have some infinite set V of variables. We use x, y, z, ... to stand for arbitrary variables. The grammar for lambda-terms is:

any redex, it is said to be in normal form. A redex occurs at the left of another if its first lambda-abstraction appears further to the left. The leftmost outermost redex is the leftmost redex not contained in any other redex. The normal reduction order is the one that consists of reducing firstly the leftmost outermost redex. For instance, consider the following term that is not in normal form because it has two redexes:

We have introduced TILC, the interactive lambda-calculus tracer. We have argued why we believe that this tool helps in teaching/learning main basic pure untyped lambda-calculus concepts by showing its main features. We have also presented its modular structure. Now, we want to point out the main extensions that we are

