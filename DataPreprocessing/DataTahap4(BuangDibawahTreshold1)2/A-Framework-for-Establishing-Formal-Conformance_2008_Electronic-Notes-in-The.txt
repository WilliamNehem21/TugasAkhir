for a particular aspect; for instance, whereas structural models depict main soft- ware elements and their inter-relationships, behavioral models specify how these elements interact to accomplish the system function. Structural models depicting domain concepts, relations and invariants in an object-oriented fashion are called object models. Languages for expressing object models include Alloy [13] or class diagrams from the Unified Modeling Language (UML) [2] annotated with invariants in the Object Constraint Language (OCL) [21].

In this paper, we describe a formal framework for defining conformance rela- tionships between object models and object-oriented programs, allowing reasoning with more flexible rules of conformance between model and program constructs. It supports independence of model and program semantics, by relying upon in- termediate representations of interpretations and heaps (respectively, model and program states). These representations are related by a coupling formula involving model and program elements, defining how a model element is implemented in the program.

This syntactic mapping, as provided by the user, offers a definition for semantic conformance between models and programs, independently from object modeling or programming language. Our definitions were encoded in PVS [18] (showed in Section 3), whose interactive type checking helped us in finding specification er- rors. Reasoning on conformance may be useful for several applications, ranging from syntactic (code generation from models and reverse engineering) to semantic correspondence (conformance checking).

Software models provide visualization and specification for tackling software com- plexity. Mainly, models offer decomposition, which provides distinct perspectives for a particular aspect; for instance, whereas structural models depict main software elements and their inter-relationships, behavioral models specify how these elements interact to accomplish the system function. In terms of object models, languages include Alloy or class diagrams from the UML annotated with OCL. In a num- ber of software development contexts, it is useful that abstractions in models and source code evolve consistently, for documentation or even development purposes. For the applicability of this practice, a conformance relationship between models and programs must be defined.

The traditional conformance relationship favors the manipulation of those con- structs by CASE tools, especially for code generation and reverse engineering. For instance, a skeleton declaration for the Customer can be easily generated from the object model, including the accs attribute; on the other hand, the object model sets and relations can also be generated from the source code with minimal user intervention. Similarly, semantic conformance with direct correspondence is usually easier to check. An informal analysis of the main program shows that the invariants hold during its execution; in every heap, no two customers have the same account and every checking account carries exactly one card. The implicit constraint of

Conformance relationship 3. Due to abstraction, another conformance re- lationship allows implementations to be even more distinct from the object model. Here the subset relationship from the object model is implemented as an attribute in Account, defining the type of each account.

program structures must be applied in this verification, in order to correctly relate values from both worlds and check the conformance. As shown in this section, sev- eral conformance relationships can be useful in practice; offering a precise definition of those relations may be an aid for tool supporting several software engineering tasks. This is the aim of our solution.

The Prototype Verification System (PVS) provides mechanized support for formal specification and verification [18]. The PVS system contains a specification lan- guage, based on simply typed higher-order logic, and a prover. Each specification consists of a collection of theories. Each theory may introduce types, variables, constants, and may introduce axioms, definitions and theorems associated with the theory. Specifications are strongly typed, meaning that every expression has an associated type.

The balance(acc) expression denotes the balance of the acc account. We can use these fields as predicates. For instance, balance(acc)(100) is a predicate stating that the balance of the acc account is 100. The WITH keyword denotes the override operator, which replaces the mapping for acc by a new tuple, if acc is originally in the function domain. In the withdraw function, the expression containing the WITH operator denotes an account with the same owner of acc, but with a balance subtracted of amount. Similarly, we can declare a function representing the credit

In this section we introduce the formal framework definitions for establishing confor- mance relationships in PVS. A notion of conformance is given in terms of syntactic correspondence between constructs from models and programs (which we call cou- pling). This correspondence is a hot spot of the framework, as instantiated for particular conformance relationships. With a given coupling, a notion of semantic conformance can be verified.

A formal definition of models and programs is given, using uninterpreted types, in the following PVS fragment 4 . These types can be seen as interfaces of our framework, regarding, in any language, object models declaring sets and relations, and programs declaring classes and attributes, given by the indicated functions. We treat relations and attributes as a name, not qualified with the name of the declaring set or class (considering models and programs that declare relations and attributes, respectively, using unique names).

In our core language for coupling formulae, we consider twelve kinds of ex- pressions, which are specified next. We have expressions for set, class, relations, attributes and variable names. Moreover, there are five kinds of binary expressions representing the union, intersection, difference, join and product expressions. Fi-

Conformance relationship 1 for the banking application in Section 2 uses class and attribute-based couplings; Account, ChAcc, Customer and CreditCard sets are implemented as classes, besides accs and card as attributes. The next PVS fragment formalizes the predicates for both kinds of couplings, for each set and relation. They are valid whether a class implements each set and an attribute implements each relation (for simplicity, we consider the same names).

The following fragment defines this coupling for all relations from a model m, in which targetType denotes the function yielding its target type, which must be subtype of Collection. In the coupling relation, the formula for the accs is given by accsm=accsp.elems, where elems denotes the attribute from the collection to its elements.

Our conformance framework can be general enough to allow defining different kinds of couplings for elements in the same model. For instance, some relations may be defined as class-based, while others use a collection-based coupling. In this case, only part of the coupling relation is generated by following these kinds of couplings; other couplings can be used for particular names in the same model.

Although some set comprehension constructs do not appear in our definition for the language presented in Section 4.2, we could easily derive it as shorthands for the core constructs, for making this logic practical. For instance, the existential quantifier can be built from the universal quantifier.

objects may have overlapping accounts. This is guaranteed before and after calls to the indicated method; however, this is not true for resulting heaps when executing the loops from the for command. For each new account reference copied to another customer, this account is owned by two customers, breaking the invariant.

Nevertheless, in practice, this program is suitably in semantic conformance, since it is natural that object methods perform encapsulated state changes which are not perceived by the users. For that, we need to restrict on which portions of the program code the clients may rely on model invariants, for example before entry and after execution of the transferAccountToCustomer method. Heaps of interest are then the program heaps from those portions.

In particular, we consider object models in Alloy and programs in a Java-like for- mal language, ROOL (Refinement Object-Oriented Language) [3]. Both languages present relatively complete sets of primitive semantics-preserving transformations and refinement calculus, used as a basis for model-driven refactoring. Refactoring strategies can only be correctly applied to source code with a condition: original ob- ject model and program must be in conformance. Therefore, a specific conformance relationship which is appropriate for the consistent refactoring must be defined; we then use our formal framework for defining this conformance.

Developers intended to reflect model refactoring to source code might also expect some syntactic conformance, otherwise model-driven refactoring would not be ap- plicable. In model-driven refactoring, we used a specific conformance relationship, as shown in the next PVS fragment. The syntactic mapping for sets defines one direct class for each set (for simplicity, with the same name). Also, all supersigna- tures for the set (given by super(s)) are included in the set of superclasses of the corresponding class (super(c)), indicating that more superclasses can be declared in the program, but the hierarchy is maintained.

Regarding syntactic conformance, Harrison et al. [11] show a method for main- taining consistency between object models (UML class diagrams) and Java pro- grams, by advanced code generation from models at a higher level of abstraction, which allows more independence when making program changes not affecting mod- els. A more specific case of syntactic conformance is addressed by another work [10], aims at bridging the gap between object modeling and programming languages, in particular regarding binary associations, aggregations and compositions in UML class diagrams. They describe algorithms that automatically detect these rela- tionships in code, introducing a more flexible conformance relationship for model relations. These conformance relationships can be represented by our coupling for- mula, allowing reasoning on semantic conformance, which is not present in those approaches.

The framework is appropriate to accommodate freedom of implementation for abstract concepts, a useful task in design and implementation practice. Applica- tions of this framework include conformance checking, code generation and round- trip engineering, and model-driven development, more specifically refactoring. In the latter, a formal conformance relationship is critical to the soundness of trans- formations that affect model elements and its correspondent implementations.

