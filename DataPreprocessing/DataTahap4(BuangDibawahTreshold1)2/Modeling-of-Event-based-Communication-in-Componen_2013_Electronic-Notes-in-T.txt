large-scale business information systems [6]. Compared to synchronous communica- tion using, for example, remote procedure calls (RPC), event-based communication among components promises several benefits such as high scalability and extend- ability [7]. Being asynchronous in nature, it allows a send-and-forget approach, i.e., a component that sends a message can continue its execution without waiting for the receiver to react on the message. Furthermore, the loose coupling of components achieved by the mediating middleware system leads to an increased extensibility of the system as components can easily be added, removed, or substituted.

Performance modeling and prediction techniques for component-based systems, surveyed in [12], support the architect in evaluating the system architecture and design alternatives regarding their performance and resource efficiency. However, most general-purpose performance meta-models for component-based systems pro- vide limited support for modeling event-based communication. Furthermore, ex- isting performance prediction techniques specialized for event-based systems (e.g., [16,5,26]) are focused on modeling the routing of events in the system as opposed to modeling the interactions and message flows between the communicating com- ponents. In the following, we present an overview on our approach enabling the modeling of event-based communication at the architecture-level combined with platform-aware performance predictions. For more details on our approach we refer to [17,21]. Finally, we present the evaluation of our approach based on two case studies.

and platform-specific aspects of event-based communication into the prediction model. As an example of a representative mature meta-model for component-based software architectures, we consider the Palladio Component Model (PCM) [3]. PCM is accompanied with different analytical and simulative analysis techniques, e.g., [3,14,13] enabling quality predictions at system design time. Similarly to most com- ponent meta-models for component-based architecture, PCM, in its original version did not provide support for modeling event-based communication. Performance predictions are only possible using workarounds as demonstrated in [18]. The mod- eling effort incurred by this workaround approach is very high and provides limited flexibility to evaluate different design alternatives.

separate middleware repository are woven into the final model. Due to this separa- tion, the influence of using different middleware systems can be analyzed by simply selecting another middleware repository and the system itself can be modeled in- dependent of the underlying middleware.The transformation allows the modeling of event-based communication at the architetcure-level using the introduced meta- model elements while still supporting all existing prediction techniques such as simulation [3], LQNs [13] or QPNs [14].

