We present an automated verification technique to verify trace based information flow properties for finite state systems. We show that the Basic Security Predicates (BSPs) defined by Mantel in [5], which are shown to be the building blocks of known trace based information flow properties, can be characterised in terms of regularity preserving language theoretic operations. This leads to a decision procedure for checking whether a finite state system satisfies a given BSP. Verification techniques in the literature (e.g. unwinding) are based on the structure of the transition system and are incomplete in some cases. In contrast, our technique is language based and complete for all information flow properties that can be expressed in terms of BSPs.

Granting, restricting and controlling the flow of information is a core part of computing system security. In particular, confidential data needs to be pro- tected from undesired accesses. Access control policies are defined to serve this task by specifying which accesses are allowed for which users. However, access control methods can only restrict direct information flow (over open channels). Information leakage over covert channels (e.g. Trojan Horses, ob- servable behaviour and time or space availability, etc) is not controllable by access control methods.

Our work is based on the modular framework presented in [5]. We present an automated verification technique to check whether a finite state system satisfies a given basic security predicate. Our approach is language based rather than structure based. We define a set of language theoretic operations and show that the question of whether a set of traces L satisfies a BSP P

Previous work dealing with the verification of trace based security prop- erties (e.g.[6,1,3]) mainly employ unwinding theorems as verification tech- nique for information flow properties. These techniques are typically sufficient though not necessary in all cases. We feel that this may be due to the fact that unwinding relations are based on the structure of the system rather than on the language of traces generated by the system. The only other work we are aware of which gives a decision procedure based on language inclusion

l-ins-mark. The construction is similar to l-ins. Here instead of inserting a transition labelled c from the first copy to the second, we need to insert a transition labelled cq from the first copy to the second. This can be carried out by having a third copy of A placed between the first and second. The third copy has all its transitions deleted, and all its states are neither initial nor final. A c transition from p in the first copy now goes to p in the third copy, and from p in the third copy we add a q transition to p in the second copy.

l-ins-con-markC' ,V ' (L) as follows. We have four copies of A. The second and third copies have all transitions deleted from them, and the fourth copy has all C transitions deleted from it. The initial state of the first copy is the initial state of A' and the final states of the fourth copy are

v'-transition from p in the second copy to q in the third copy. From every state p in the third copy we add a transition labelled q to p in the fourth copy. The initial states of A' are the initial states of the first copy and the final states those of the fourth copy.

We have demonstrated in this paper a way to automatically verify trace based information flow properties of finite state systems. We give characterisations of the properties in terms of language-theoretic operations on the set of traces of a system, rather than in terms of the structure of the system which is a stronger notion. This perhaps explains why we are able to obtain complete characterisations unlike the previous techniques in the literature.

