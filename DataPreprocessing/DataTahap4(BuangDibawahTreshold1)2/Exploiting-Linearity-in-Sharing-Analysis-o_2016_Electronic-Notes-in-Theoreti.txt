We propose a new sharing analysis of object-oriented programs based on abstract interpretation. Two variables share when they are bound to data structures which overlap. We show that sharing analysis can greatly benefit from linearity analysis. We propose a combined domain including aliasing, linearity and sharing information. We use a graph-based representation of aliasing information which naturally encodes sharing and linearity information, and define all the necessary operators for the analysis of a Java-like language.

In object-oriented languages, program variables are often bound to complex data structures which may overlap. This is the case for Java programs, whose objects are stored in a shared memory called heap. Discovering whether two data structures may overlap is the scope of sharing analysis. This information is used in program parallelization and distribution: data structures which do not overlap allow the execution of methods on different processors, using disjoint memory. Moreover, it is very useful for improving other kind of analysis, like shape, pointer, class and cyclicity analysis. Sharing properties has been deeply studied for logic programs (e.g., [10,9,12,8,5,2]) and the large literature on this topic has been the starting point for designing our enhanced abstract domain for sharing analysis. In particular, the use of a linearity property [7,9,12,11,3,4] has proved to be very useful when dealing with sharing information (see [6] for a comparative evaluation). We show how the same idea can be rephrased to enhance sharing analysis of object-oriented programs. We propose a new combined analysis of sharing, aliasing and linearity properties for

Example 3.7 In the example in Section 1.1, we have thata Tree is not an Integer, an Integer is not a Tree and they do not have any field which can share. Therefore, any identifier of type Tree can never share with any identifier of type Integer. Moreover, any identifier of type Integer may only be linear.

Note that, given their intended meaning, some pre-aliasing graphs contain re- dundant information. For example, nodes which are not labeled by any qualified identifiers may be removed. On the converse, two identifiers i1, i2 of incompara- ble types may be (weak) aliased only if they are both null. We therefore restrict our attention to the pre-aliasing graphs which present some additional regularity conditions.

Aliasing graphs are a very concrete representation of the part of the program state which is reachable from variables through a single field access. Pair-sharing and linearity, instead, summarize global properties of the state. We want to add possible sharing and possible non-linearity information to an aliasing graph.

The concrete semantics of v:=exp evaluates exp and stores its result into v. Thus, the final abstract state is obtained by first computing SE I exp and then renaming res into v. Some of the nodes may become unlabeled and must be removed. This is accomplished by the auxiliary operation prune which removes unnecessary infor- mation, in particular unlabeled nodes and fields which are not in the declared type of the variables.

The evaluation of v.f :=exp is the most complex operation of the abstract se- mantics, since we must take into account that v might be aliased to many different nodes. The candidates are those variables, denoted by Vcomp, which share with l(v) and have compatible types. For each node labeled by a variable in Vcomp, we add a new fresh node in Nnew pointed by an edge (labeled by the field f) in Enew. Finally, all possible sharing and non-linearity are added. A slightly different treatment is devoted to the special case when the result of the expression is definitively null.

We propose a new abstract domain ALPs which combines aliasing, linearity and sharing analysis for an object-oriented language, and provide all the necessary ab- stract operations. We show in Sec. 1.1 a simple example where linearity plays a fundamental role in proving that the two subtrees do not share.

The property of sharing for object-oriented languages has been studied in a few work, while it is deeply studied in the context of logic programming, where it is commonly combined with linearity analysis. At the best of our knowledge, this is the first attempt to combine sharing with linearity for Java programs. We also plan to implement ALPs as an abstract domain for the Jandom static analyzer [1].

In [14], the authors propose a framework for the analysis of object-oriented lan- guages, and introduce two abstract domains for definite and possible aliasing re- spectively. The objects of these domains are similar to aliasing graphs, but without being restricted to two levels. Terminations is guaranteed by widening. These do- mains may be enriched by providing type information for the leaves of the graphs. However, they do not consider sharing or linearity properties.

