This work describes the Interactive Derivation Viewer (IDV) tool for graphical rendering of derivations that are written in the TPTP language. IDV provides an interactive interface that allows the user to quickly view various features of the derivation. A particularly novel feature of IDV is its ability to provide a synopsis of a derivation by identifying interesting lemmas within a derivation, and hiding less interesting intermediate formulae. IDV is deployed online as part of the SystemOnTPTP interface, thus providing ready access via any web browser.

Several types of tools have been developed to make the output from ATP systems easier for humans to understand. These include graphical renderings of derivations [10], structuring of proofs by identification of lemmas [1], translation of resolution refutation proofs to natural deduction proofs [4], and full translation of proofs to natural language form [2]. This work describes the Interactive Derivation Viewer (IDV) tool for graphical rendering of derivations that are written in the TPTP [13] language [12]. IDV provides an interactive interface that allows the user to quickly view various features of the derivation. A particularly novel feature of IDV is its ability to provide a synopsis of a derivation by identifying interesting lemmas within a derivation, and hiding less interesting intermediate formulae. IDV is deployed online as part of the SystemOnTPTP interface [11], thus providing ready access via any web browser.

IDV reads in a derivation in TPTP format. It is sensitive to the form of the for- mulae, either FOF or CNF. The rendering is performed in two phases: the first phase determines the layout of the DAG nodes and edges, and the second phase implements the graphical display of the derivation DAG.

The fourth pass finds the optimal X coordinate for each node. For this pass spring embedding is used. 3 Spring embedding is a graph drawing technique that models a graph as a system of springs and then uses energy minimization to space the nodes. The following forces are balanced: edge spring force for keeping edges at a certain length, node-to-node repulsive forces to keep nodes from being too close, gravity force that keeps all edges pointing downwards, and repulsive boundary forces to keep the nodes from spreading too far apart horizontally. After the fourth pass the X and Y coordinates are fixed - the nodes cannot be moved by user interaction. The fifth pass generates Bezier curves to draw edges between nodes. If two non- virtual nodes are connected by a chain of virtual nodes, then the chain of virtual

The layout determined by the first phase does not guarantee that nodes will not overlap (or hence, given the use of virtual nodes to guide edge generation, that edges will not pass through nodes). The extent to which node overlaps are avoided is determined by the number of iterations in the spring embedding. The number of iterations in the current implementation has been found to be sufficient to avoid most overlaps. After the layout has been determined, the interface and DAG are rendered.

IDV is able to form a synopsis of a proof by CNF refutation. This is achieved by rating the interestingness of inferred CNF formula, and hiding the nodes whose formula rating is below a user specified threshold. The interestingness rating of inferred CNF formulae is computed by the AGInT system [6] - see Section 3.3, and the user sets a threshold using the slider in the control strip pane.

Interestingness ratings are stored in a record in the useful info fields of annotated formulae. There are two ways for formulae to have interestingness ratings. First, the annotated formulae input to IDV may already have interestingness values. Second, the input formulae do not have interestingness ratings, and the AGInT system has to be called by IDV. In this case AGInT is called as soon as the user uses the threshold

When the redraw button is clicked by the user, the derivation synopses is ren- dered as follows: First, non-virtual nodes in the DAG are set to be interesting if their interestingness rating is greater than the threshold value, and all virtual nodes are set to be uninteresting. Each rank is then checked to see if it contains any inter- esting nodes. If a rank contains at least one interesting node the rank is retained, otherwise the rank is empty and all nodes in ranks below are moved up a rank (i.e., their rank is decremented). The original rank of each node is stored for redrawing purposes. After the ranks are updated the Y coordinates of the nodes in the re- tained ranks are updated, as in Section 2.2. Finally, the Bezier curves are updated to uniquely connect each interesting node to its closest interesting ancestors, which are found using a DFS search up the DAG. All uninteresting nodes remain hidden after a redraw.

Surprisingness: Surprisingness measures new relationships between concepts and properties. Formulae that contain function and predicate symbols that are seldom seen together in a formula are more interesting. The symbol-pair surprisingness score of a pair of symbols is the number of axioms that contain both symbols divided by the number of axioms that contain either symbol. The surprisingness score of a formula is the sum of the symbol-pair surprisingness scores, over all pairs of distinct symbols in the formula. A lower score is better.

Intensity: Intensity measures how much a formula summarizes information from the leaf ancestors in its derivation tree. The plurality score of a formula (or set of formulae) is number of function and predicate symbols in the formula divided by the number of distinct function and predicate symbols in the formula. The intensity score of a formula is the plurality of its leaf ancestors divided by the plurality of the formula itself. A higher score is better.

Adaptivity: Adaptivity measures how tightly the universally quantified variables of a formula are constrained. The adaptivity score of a clause is the number of distinct variables in the clause divided by the number of variable occurrences in the clause. A lower score is better.

The formulae that pass the runtime filter are considered to be interesting. The task of the static ranker is to compute a final interestingness rating for the formulae. This is done in two phases: first a usefulness score is computed for each formula, and second, all the scores are individually normalized and then averaged.

Usefulness: Usefulness measures how much an interesting formula has con- tributed to proofs of further interesting formulae, i.e, its usefulness as a lemma. The usefulness score of a formula is the ratio of its number of interesting descen- dents (i.e., descendents that have passed the runtime filter) over its total number of descendents. A higher score is better.

This paper has presented the design, implementation, deployment, and application of an interactive derivation viewer, implemented as the IDV tool. IDV provides strong visual information showing the structure of a derivation, with original details available as text. IDV provides interactive features that enable a user to visually highlight and examine salient parts of a derivation. In particular, the ability to extract proof synopses sets IDV apart from other existing derivation viewers. The

G. Sutcliffe, S. Schulz, K. Claessen, and A. Van Gelder. Using the TPTP Language for Writing Derivations and Finite Interpretations. In U. Furbach and N. Shankar, editors, Proceedings of the 3rd International Joint Conference on Automated Reasoning, Lecture Notes in Artificial Intelligence, Submitted.

