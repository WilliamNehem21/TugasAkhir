terms depending on the name received in the input at channel x. Our solution is to define the transitions of a process relative to an execution environment. The environment is represented abstractlyas a set of free (global) names that the environment may use while interacting with the process, and transitions are modelled as rewrite rules over a pair consisting of a set of environment names together with a process.

transitions can be identified to a single input. With these simplifications, the number of input transitions of a term become finite. Similarly, in the OPEN rule, since the identifier chosen to denote the private name emitted is irrelevant, instances of the rule that differ only in the chosen name are not distinguished.

Finally, we consider the rewrite rule for CLOSE. The process P emits a bound name Y, which is received by process Q. Since the scope of Y after the transition includes Q, the rewrite involving Q in the second condition of the rule is carried out within the scope of the bound name that is emitted. This is achieved by adding the channel Y{0} to the set of environment names and shifting up the channel indices in both CS and Q in the rewrite. Note that since the private name being exchanged is not emitted to the environment, we neither expand the set CS in the righthand side of the rule nor shift up the channel indices in it.

We use the operator [ ] to prevent infinite loops while evaluating the conditions of the rules above. If this operator were not used, then the lefthand side of the rewrite in the condition would match the lefthand side of the rule itself, and so the rule itself could be used in order to solve its condition. This operator is also declared as frozen to prevent useless rewrites inside [ ].

We can now use the search command of Maude 2.0 to find all possible traces of a process. The traces appear as prefix of the one-step successors of a TTrm of the form [[CS] P]. For instance, the set of all traces exhibited

Note that in the first Delay rule, the channel indices of the free input action are shifted up when it is delayed across a bound action, since it gets into the scope of the bound argument. Similarly, in the second Delay rule, when the bound input action is delayed across a free input/output action, the channel indices of the free action are shifted down bythe bind operation. The other two subcases of the Delay rule, namely, where a free input is to be delayed across a free input or output, and where a bound input is to be delayed across a bound input or output, are not shown as they are similar.

