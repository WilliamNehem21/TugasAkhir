In recent years, the Web service technology has become the most popular and used technology to build SOA applications [26]. Web services are based in a set of protocols and standards as SOAP (Simple Object Access Protocol), WSDL (Web Services Description Language), and UDDI (Universal Description, Discovery, and Integration). Web services are distributed components which are self-contained, discoverable, reusable, composable, and have a transparent location [3]. As a result

of service for two important quality attributes: performance and accuracy. In this case study, a Web service to deliver clinical results is monitored by two different monitors generated from the FlexMonitorWS Tool [9]. Quality values are compared from three scenarios: in isolation, in parallel with the other monitor, and in parallel with fault injection. A statistical comparison of the results is presented in order to demonstrate the produced quality degradation level and the significant difference between them.

This paper is organized as follows. In Section 2, we introduce to some underlying concepts about SOA, monitoring tools and FlexMonitorWS Tool [10]. In Section 3, we define a Quality of Service conflict and why it is produced. Section 4 reports a case study where a conflict scenario is evaluated. And finally, in Section 5, we provide the conclusions and future works.

Monitoring tools are systems that capture, collect, filter, and analyze information from a software system during runtime [8]. In Web services, monitoring tools are used for [9]: (1) improving the process of Web service selection and discovering, this enables QoS-based searches among functionally similar services. (2) self-healing technique such as dynamic adaptation and dynamic recuperation applied to some quality attributes (availability, scalability, capacity and reliability) when some of them not meet the desired level. (3) detecting violations in SLA, quality metrics based on SLA are used to evaluate and control the Web service.

Methods bring intrusive effects to Web services in different degrees. When there are multiple monitors inserted in the target system, this becomes more complex. Instrument mechanisms make the target code difficult to understand and maintain [25]. While the interceptor mechanism can lead to performance decrease, because the monitor runs with shared resources. On the other hand, the agent approach

DCTR System is a Web service-based system developed in a clinical laboratory to deliver clinical test results to its patients. Web services were developed using Java language, JAX-WS API. The system offers several features encapsulated as Web services, such as PatientService, DoctorService, ResultService, etc. Among these Web services, we select the PatientService, because it is some of the Web services most used by the clinical staff when a new test is introduced.

The aim of this case study is to identify the potential quality conflict between performance and accuracy during a Web service monitoring. For this study, a conflict is identified as a degradation in the quality value for one or both quality attributes. At the same time, it is pretending to discover the negative effects of the monitoring tools in the quality of service as the main cause of the conflict. We have selected the two operations in the Web service, PatientService, namely getPatientName() and getPatients(). Our research question has been formulated as follows:

Accuracy is the level of accurate results that Web service can give to services re- quests [23]. It is measured by the number of errors (error rate) produced for the Web service over a period of time [9] [13]. Accuracy is concerned about the cor- rectness of the service response, when accuracy value is close to one, it said to be accurate, if it is close to zero, the Web service is not accurate; so it loses credibility of its service consumers.

The quality of a service is out of control of whoever use the service and the behavior of a Web service can change at runtime. Service consumer can not be aware about these changes. Monitoring tools become an important mechanism for aware quality and functional changes in a Web service. At the same time, monitoring tools can become an intrusive agent for the quality of Web service. When it is pretended to monitoring a Web service, we need to identify: what is our monitoring target? what do we need to monitor?, how monitor it?, how often monitor it? and how notify the monitoring results?.

