We present a formal language with compositional semantics and the correspond- ing Model Checking algorithms to model and verify Multi-Agent Systems (MAS ) at the knowledge level. We extend branching time CTL logic with knowledge oper- ators Kk for each agent k. The resulting language, which we call KCTL, provides the capability of observing the occurrence of an event from the point of view of one agent k.

A compositional semantics based on local automata for each agent is presented for KCTL, quite different from the one defined for ATEL [5]. ATEL semantics is based on a previously defined global automaton representing the whole system and the knowledge relations. For KCTL semantics, the global automaton for the concurrent system as well as knowledge relations for each agent are constructed based on a set of local automata.

The interesting fact about this model is that it allows us to talk in separate about local and global computation. An agent is not concerned about the way other agents carry on their local computations. All interaction happens by sending and receiving messages.

We now present a formal language and the corresponding Model Check process to verify multi-agent systems at the knowledge level. The language proposed is an extension of CTL, which we call KCTL. After defining KCTL, we present Algorithms for checking its semantics in a branching time model.

Thus, output actions are those that are outputs for any of the component sig- natures, and similarly for internal actions. Input actions are any actions that are inputs to any of the component signatures, but outputs of no component signature. Note that interactions among components are outputs of the composition.

Now we can define composition of automata. The idea is that the states of the composed automaton are n-tuples whose components corresponds to a local state of each of the agents, and the edges corresponds to all edges of the local automata. The composition operation links output actions of one automaton with identically named input actions of any number of other automata.

We describe here a logic to reason about knowledge in state transition systems as the ones presented in the previous section. The language we use is an extension of CTL with an operator (Kk) that provides the capability of observing the occurrence of an event from the point of view of one of the automaton (agent) involved in the system. From now on, this language will be referred as KCTL.

First, find the set of all states s labelled with f . Then, for each found state s, recursively check if all states t related to s (the current one) by ~k (all t such that s ~k t) are labelled with f . If this is the case, label all them (the current state s and all states t, s ~k t) with Kkf .

The protocol starts with the sender selecting the first message to send. This message is extended with a control bit (initially 0) to form a frame and this frame is sent along the communication channel. Right as the sending of the frame starts, the sender also starts a timer. When this timer counts down to zero, the sender

The local information available for sender is incorporated at the model as the set of propositions that hold on each state. The same happens with the receiver. We consider that the communication channel does not keep track of any local infor- mation besides the current state. A simple list of the information valid for sender and receiver at each local state follows.

The language KCTL is a CTL language extend with knowledge operators. Algo- rithms to model check knowledge properties of concurrent systems were explored in many recent works like [3], [6], [12], [8] and [5]. Our work benefits from the results stated by these previous works, and focus on the way knowledge relations can be captured from automata-based local specifications.

