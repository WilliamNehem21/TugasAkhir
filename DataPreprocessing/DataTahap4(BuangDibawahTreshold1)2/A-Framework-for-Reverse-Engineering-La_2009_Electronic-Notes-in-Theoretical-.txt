When assessing the quality and maintainability of large C++ code bases, tools are needed for extracting several facts from the source code, such as: architecture, structure, code smells, and quality metrics. Moreover, these facts should be presented in such ways so that one can correlate them and find outliers and anomalies. We present SolidFX, an integrated reverse-engineering environment (IRE) for C and C++. SolidFX was specifically designed to support code parsing, fact extraction, metric computation, and interactive visual analysis of the results in much the same way IDEs and design tools offer for the forward engineering pipeline. In the design of SolidFX, we adapted and extended several existing code analysis and data visualization techniques to render them scalable for handling code bases of millions of lines. In this paper, we detail several design decisions taken to construct SolidFX. We also illustrate the application of our tool and our lessons learnt in using it in several types of analyses of real-world industrial code bases, including maintainability and modularity assessments, detection of coding patterns, and complexity analyses.

In the last years, several tools have emerged to support program understanding, software maintenance, reverse engineering, and reengineering activities. A large part of such tools extract their information mainly from the source code via static analysis. This includes a set of operations ranging from code parsing and fact extraction, fact aggregation and querying, up to interactive presentation.

For the C++ language, there are few static analysis and reverse engineering toolsets which meet all above criteria. Robust static analysis of industry-size C++ code bases is particularly hard, given the language complexity, its several dialects, the presence of mixed C and C++ code, and the use of a preprocessor. Moreover, although several C and C++ static analyzers exist, few come integrated in a frame- work with query, metrics, and interactive visualization tools which make them truly scalable and easy to use by software engineers.

interactive user interface which uses several novel visualization techniques to achieve scalability. SolidFX was designed to cover a wide range of analyses, ranging from local variable level up to system architecture, and also as an open environment which allows integration of third-party analyses via plug-ins. Overall, SolidFX offers to reverse engineers the same look-and-feel that Integrated Development Environments (IDEs) such as Visual C++ or Eclipse offer to software developers.

components: the parser, the query and metric engine, and the data views which SolidFX adds atop of fact extraction and analysis engines. Section 4 presents several applications of our tool on three real-life code bases. Section 5 discusses our experience with using SolidFX in practice and feedback obtained from actual customers. Section 6 concludes the paper with future work directions.

this is our target domain. C++ static analyzers can be roughly grouped into two classes: lightweight analyzers do only partial parsing and type-checking of the input code, and thus produce only a fraction of the entire static information. Lightweight analyzers include SrcML [6], Sniff+, GCCXML, MCC [18], and several custom analyzers constructed using the ANTLR parser-generator [20]. Typically, such analyzers use a limited C++ grammar and do not perform preprocessing and scoping and type resolution. This makes them quite fast and relatively simple to implement and maintain. However, such analyzers cannot deliver the detailed information that we need for our (visual) analyses, as we shall see later. Moreover, lightweight analyzers cannot guarantee the correctness of all the produced facts, as they do not perform full parsing. In contrast to these, heavyweight analyzers perform (nearly) all the steps of a typical compiler, such as preprocessing, full parsing and type checking, and hence are able to deliver highly accurate and complete static information. Well- known heavyweight analyzers with C++ support include DMS [2], Columbus [9], ASF+SDF [28], Elsa [17], and CPPX [15]. However more powerful, heavyweight analyzers are also significantly (typically over one order of magnitude) slower, and considerably more complex to implement.

Heavyweight analyzers can be further classified into strict ones, typically based on a compiler parser which will halt on lexical or syntax errors (e.g. CPPX); and tolerant ones, typically based on fuzzy parsing or Generalized Left-Reduce (GLR) grammars, (e.g. COLUMBUS). Our early work to design an IRE for C++ used a strict gcc-based analyzer [16]. We quickly noticed the limitations of using strict analyzers. Typical users do not have a fully compilable code base, e.g. because of missing includes or unsupported dialects, but still want to be able to analyze it.

The output of static analyzers, mostly produced by runnign batches, can be fed to a range of visualization tools. Many such tools exist, ranging from line- level, detail visualizations such as SeeSoft [8] up to architecture visualizations which combine structure and attribute presentation, e.g. Rigi [23], CodeCrawler [13], or SoftVision [24]. An extensive overview of software visualization techniques is provided by Diehl in [7].

extractor [9]. A project is analyzed one source file (translation unit) at a time by the fact extractor (Sec. 3.3), which saves information on four kinds of data elements (lexical, syntax, type, and preprocessor) in the database. Each data element is assigned a unique id. The database is structured as a set of binary files, one per translation unit, and a set of has maps which allow referring to the elements by id within each file.

As outlined in Section 3.1, our SolidFX environment uses a C and C++ heavy- weight analyzer of own construction. We based this analyzer on Elsa, an existing C++ parser designed using a GLR grammar [17]. Atop the parser which produces a parse forest of all possible input alternatives, ELSA adds the complex type- checking, scoping, and symbol lookup rules that disambiguate the input to yield an Annotated Syntax Graph (ASG). The ASG contains two types of nodes: abstract syntax tree (AST) nodes, based on the GLR grammar; and type nodes, which en- code the type-information created during disambiguation, and are attached to the corresponding AST nodes.

First, the parser, preprocessor and preprocessor filter operate in parallel. The preprocessor reads the input files and outputs a token stream enriched with (row,column) location data. For this, we can use a standard C preprocessor, e.g. as provided by the Boost or libcpp libraries), patched to output token locations along with the tokens.

(Section 3.2). In other words, the filtering phase eliminates all AST nodes which are present in the included headers but are not referred to by AST nodes contained in the analyzed sources. This eliminates all declarations and preprocessor symbols contained in the include headers which are not referred to in the sources. Filtering the parsed output is essential for performance and scalability, as it reduces the output with one up to two orders of magnitude 4 . Finally, the filtered output is written to file using a custom binary format.

All in all, the several design choices made during the fact extractor implemen- tation, i.e. using the Elsa parser which has a highly optimized core written in C; providing lightweight error recovery at global declaration and function/class scope levels; filtering unreferenced symbols from the parser output; and writing the output in an optimized binary format, deliver an efficient heavyweight parser. SolidFX is roughly three to six times, on the average, faster than Columbus, one of the fastest heavyweight C++ parsers that we could test, and also scales well to analyze projects of millions of lines of code [3]. For such projects, the fact databases saved on disk can take hundreds of megabytes. However, as we shall see next, querying such databases is still very fast.

function calls, variable uses, or type uses. The extracted diagrams can be laid out by hand or automatically using the GraphViz library [1] or a custom graph layout library developed by us. Moreover, class and method metrics can be drawn atop of the laid out diagrams using icons scaled and colored to show the metric values, following an extension of the technique described in [27]. The combination of diagrams and metrics is a powerful instrument for performing various types of code quality and modularity assessments (see Section 4).

a data exporter. This type of integration allows us to extend our IRE by reusing several existing software analysis and visualization tools with a minimal amount of effort. External views are preferred when the interaction between the fact database and the view is rather loose, and when the amount of data to be passed to the view is limited, as compared to the built-in views, which heavily access the fact database at a fine-grained level.

We illustrate now the SolidFX IRE with several samples from its actual usage within a number of industrial projects 6 . In all these cases, the analyzed C++ code was developed by third parties, and we were not familiar with the code or its purpose before the analysis 7 . The results of the analyses were discussed together with the stakeholders, mainly using the data views. An typical analysis session would take a few hours from the initial code hand-over until the results were available. A complete code base assessment would typically take three to six such sessions, where increasingly refined questions and hypotheses would be tested during the later sessions by means of specific queries on narrowed-down parts of the code base.

integration of its functions, presented under a uniform interface, and the possibility to execute complex analyses with minimal (or no) programming. Using the IRE was not much more effective than using scripted command-line tools for the extraction phase. However, for the exploration phase, the IRE and its tight tool integration were more productive than using the same tools standalone, connected by little scripts and data files. Reverse-engineering and code assessment scenarios are by nature iterative and exploratory, so they map perfectly to repeated selection, query, and interactive visualization operations.

It is tempting to consider the extension of our IRE solution to existing IDE tools, such as Eclipse or Visual Studio. The main problem, in both cases, regards the availability of an efficient heavyweight parser which offers also fine-grained ac- cess to its fact database. A recent step in this direction is CDT, an open C/C++ development toolkit for Eclipse [5]. CDT resembles the goal, and loosely has the same architecture as SolidFX, albeit in a much earlier consolidation phase. Vi- sual Studio has the right type of parser infrastructure support built-in, so would be an excellent candidate.  However, at the present date, the parser API is not

We have presented the design of SolidFX, an Integrated Reverse Engineering en- vironment for C and C++. SolidFX combines a heavyweight tolerant C++ parser with a fact database offering fine-grained access, an open query and metric engine, and several scalable visualizations that combine code, metrics, and diagrams. Due to the high integration of these tools, SolidFX enables users to conduct reverse- engineering sessions with the same ease as software development is traditionally done in IDEs. Several typical applications of the IRE are presented.

We are currently working in extending SolidFX in several directions. Refined static information can be extracted from the basic facts, such as control flow and data dependency graphs, leading to more complex and useful safety analyses. Sec- ondly, we are working to implement a number of predefined ready-to-use analysis packages, such as checking for the MISRA C Standard [19], thereby making the use of SolidFX even more productive and easy.

