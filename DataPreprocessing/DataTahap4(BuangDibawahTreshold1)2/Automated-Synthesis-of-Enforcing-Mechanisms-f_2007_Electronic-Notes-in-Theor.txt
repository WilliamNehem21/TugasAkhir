In [21,22] we have presented an approach for enforcing security properties. It is based on the automatic syn- thesis of controller programs that are able to detect and eventually prevent possible wrong action performed by an external agent. Here, we extend this approach also to a timed setting. Under certain assumptions, we are also able to enforce several information flow properties. We show how to deal with parameterized systems.

Many approaches for the analysis of security properties have been successfully de- veloped in the last two decades. More recently there also has been interest on developing techniques to study how to enforce security properties. A prominent example is the notion of security automata in [29] and some extensions proposed in [16].

The goal of this paper is to extend previous works by defining controller operators able to enforce other security properties as information flow ones. Moreover, here we deal with systems in a timed setting. Hence, this work represents a significant contribution to [21,22], because we not only enrich the set of security properties that can be enforced but also we deal with the elapsing of time in a system. To this aim we mainly use an appropriate extension of partial model checking (see [2,27]). We show how our theory can be extended to treat with parameterized systems,

This paper is organized as follows. Section 2 recalls the basic theory about the analysis of timed security properties, especially non-interference, as properties of open systems. Section 3 explains our approach by dealing also with composition of properties and parameterized systems. Section 4 shows a simple example and Section 5 presents a discussion on related work. Eventually, Section 6 concludes the paper.

Information flow is a main topic in the theoretical study of computer security. We can find several formal definitions in the literature (see [12,17,28]) for concurrent processes. To describe this property, we can consider two users, High and Low interacting with the same computer system. We wonder if there is any flow of information from High to Low. A central property is the Non Deducibility on Com- position (NDC, see [12]) that has been proposed as generalization of the classical idea of Non-Interference to nondeterministic systems: low level users cannot infer the behavior of high level users from the system because for low level users the system is always the same. This idea can be represented as follow:

defined in [6,29] are modeled by process algebra operators. These operators permit to enforce safety properties as the automata they model. Here we develop a theory for enforcing also information flow properties, specified as tBNDC, and we give some examples of controllers that do this.

A parameterized system describes an infinite family of (typically finite-state) sys- tems; instances of the family can be obtained by fixing parameters. Consider a parameterized system S = Pn defined by parallel composition of processes P , e.g. P P  ... P . The parameter n represents the number of processes P present in the

use the definition of the controller as d'', we simply need to find a process that is a model for the previous formula, say Y = h.h.0. Then, for any component X, we have (S  (Y d'' X)) \ {h} satisfies (XS)//S.

Much of prior works are about the study of enforceable properties and related mechanisms. In [11] authors deal with a safety interface that permits to study if a module is safe or not in a given environment. Here is checked all system, instead in our approach, through the partial model checking function, we are able to monitor only the necessary/untrusted part of the system. This is an advantage of our approach because often not all the system need to be checked (or it is simply not convenient to check it as a whole). Some components could be trusted and one would like to have a method to constrain only the untrusted ones (e.g. downloaded applets). Similarly, it could not be possible to build a reference monitor for a whole distributed architecture, while it could be possible to have it for some of its components.

We use controller synthesis in order to force a system to verify security policy. The synthesis of controllers is, however, studied also in other research areas. We describe here two papers that deal with synthesize of controller in real-time. In [10] the author describes an algorithm for synthesize controller from real-time specific- ation. He presents an algorithm for specified in a subset of the internal temporal logic duration calculus. The synthesized controllers are given as PLC-Automata. These are an abstract representation of a machine that periodically polls the input and has the possibility of measuring time. In [26] the authors tackle the following

problem: given a timed automaton restrict its transition relation in a systematic way so that all remaining behaviors satisfy certain properties. The problem is for- mulated using the notion of real-time game. A strategy for a given game is a rule that tells the controller how to choose between several possible actions in any game position. A strategy is winning if the controller, by following these rules, always wins (according to a given definition of winning) no matter what the environment does. There is the definition of game automata and the authors gives a relation and, by using it, it is able to define a winning strategy for the game. We are going to study the relationship with our approach.

We give a technique to enforce information flow properties by using process algebra controller operators. As a matter of fact we find out sufficient conditions to enforce some properties as tBNDC. However, as the Assumption 3.1, is strong we are working to refine our method in order to deal with problem.

