Safe is a first-order eager language with heap regions and unusual facilities such as programmer-controlled destruction and copying of data structures. The regions are disjoint parts of the heap where the compiler may allocate data structures. Thanks to regions, a runtime garbage collector is not needed. The language and its associated type system, guaranteeing that destruction facilities and region management are done in a safe way, have been presented previously.

In this paper, we start from a high-level big-step operational semantics for Safe, and in a series of semi- formal steps we derive its compilation to an imperative language and imperative abstract machine. Once the memory needs of the machine are known, we enrich the semantics with memory consumption annotations and prove that the enriched semantics is correct with respect to the translation and the abstract machine. All the steps are derived in such a way that it is easy to understand the translation and to formally establish its correctness.

The allocation and deallocation of regions is bound to function calls: a working region is allocated when entering the call and deallocated when exiting it. Inside the function, data structures may be built but they can also be destroyed by using a destructive pattern matching denoted by ! or a case! expression, which deallocates the cell corresponding to the outermost constructor. Using recursion, the recursive portions of the whole data structure may be deallocated. We say that it is con-

The function insertD is the destructive version of insertion in a binary search tree. Then mkTreeD exactly consumes the space occupied in the heap by the list. The nondestructive version of this function would consume in the worst case quadratic heap space.

Data structures may also be copied denoted appending @ to a variable. Only the recursive part of the structure is copied, while the elements are shared with the old one. This is useful when we want non-destructive versions of functions based on the destructive ones. For example, we can define treesort xs = treesortD (xs@).

Polymorphic algebraic data types are defined through data declarations. Alge- braic types declarations have, after region inference, additional type variables indi- cating the regions where the constructed values of that type are allocated. Region inference also adds region arguments to constructors, forcing the restriction that recursive substructures must live in the same region as their parent. For example, after region inference, trees are represented as follows:

starting at p and creates in region j a copy of all recursive cells. Some restricted type informaton is available in our runtime system so that this function can be implemented. The pointers in non recursive positions are kept identical in the new cells. This implies that both data structures may share some subparts.

Rule App shows when a new region is allocated. Notice that the body of the function is executed in a heap with k + 2 regions. The formal identifier self is bound to the newly created region k + 1 so that the function body may create DSs in this region or pass this region as a parameter to other function calls. Before returning

Those new regions created during the evaluation of the bound expression cannot contain the result of the evaluation because after function application the local region is deallocated. Region k0 denotes the highest region available when the machine stops reducing the expression. Initially k = k0 = 0. Rule App increments k while rules Lit , Var 1, Var 2 and Var 3 discard all the local regions back to k0.

The current environment is extended with new bindings in rules Let 3, Case1 and Case 2 as soon as let-bound or case-bound variables become free variables in scope in the continuation expression. Also, it is extended in rules Copy and Reuse with a fresh program variable y. This is merely an artifact due to the fact that a fresh data structure must be referenced in the control expression. Finally, in rules Lit 2 and Cons 2, the environment E saved in the continuation must be extended with the new binding introduced by let.

Instruction BUILDENV receives a list of keys Ki and creates a portion of en- vironment on top of the stack: If a key K is a natural number j, the item S!j is copied and pushed on the stack; if it is a basic constant c, it is directly pushed on the stack; if it is the identifier self , then the current region number k is pushed on the stack. Instruction BUILDCLS allocates fresh memory and constructs a heap value. As BUILDENV , it receives a list of keys and uses the same conventions. It

