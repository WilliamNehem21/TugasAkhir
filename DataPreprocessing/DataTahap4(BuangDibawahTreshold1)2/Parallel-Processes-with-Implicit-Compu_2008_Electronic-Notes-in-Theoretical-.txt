We propose a process algebra which is concerned with processes that have an implicit computational capital. This process algebra is intended to be helpful when designing computer-based systems of which the behaviour is related to money handling. It goes along with the development that the behaviour of computer-based systems, organizations and persons is increasingly more related to money handling.

It is not an easy matter to determine what are the basics of money handling. Money is what is considered and used as money by a group of people. This implies that economics, sociology and ethnography are involved in deciding what is money and what is not. For that reason, we do not aim at covering all aspects of money handling.

We also extend ACPicc with abstraction from internal actions. It happens that restrictions must be imposed on the actions from which abstraction is allowed in order to preclude unexpected effects of this kind of abstraction on the implicit com- putational capital of processes. The approach to abstraction from internal actions followed in this paper is based on the notion of branching bisimulation [13].

The structure of this paper is as follows. First, we review ACP (Section 2) and guarded recursion in the setting of ACP (Section 3). Next, we introduce a simple theory about computational money values called CMV (Section 4) and extend ACP, using CMV, to a theory about processes that have an implicit computational capital (Section 5). After that, we introduce some notions concerning transition systems

of preservation of computational money (Section 8). Thereupon, we extend ACPicc with abstraction from internal actions (Section 9). Following this, we give examples of the use of ACPicc (Section 10). Finally, we make some concluding remarks and mention some options for future work (Section 11).

In this section, we shortly review ACP (Algebra of Communicating Processes), introduced in [3]. For a comprehensive overview of ACP, the reader is referred to [2]. Although ACP is one-sorted, we make this sort explicit. The reason for this is that we will extend ACP with a second sort in Section 5.

We use infix notation for the binary operators. The following precedence con- ventions are used to reduce the need for parentheses. The operator + binds weaker than all other binary operators to build terms of sort P and the operator binds stronger than all other binary operators to build terms of sort P.

For each guarded recursive specification E and each variable X V(E), we introduce a constant of sort P standing for the unique solution of E for X. This constant is denoted by X E . We often write X for X E if E is clear from the context. In such cases, it should also be clear from the context that we use X as a constant.

First of all, we give a picture of the ideas that underlie the design of this exten- sion. There are three kinds of actions: actions with which an amount of compu- tational money is spent, actions with which an amount of computational money is acquired and actions with which no computational money is spent or acquired. As for spending or acquiring computational money, the effect of performing two actions synchronously is the joint effect of the two actions concerned.

Neither what a process is capable of using exceeds its implicit computational capital nor the other way round. The fact that the implicit computational capital of a process does not exceed what the process is capable of using corresponds to the liquidity assumption that the whole capital can potentially be used. The monetary effects of performing actions do not affect the behaviour of a process that has an implicit computational capital.

The following example goes into the implicit computational capital of an infinite process. In case q(a) > 0, the process  X  X = a  X  repeats forever a step on which the amount q(a) is spent. Because no capital is large enough for that, the implicit computational capital of X X = a X  is undefined if q(a) > 0. Assuming q(a) > 0, we derive from axioms RDP, PR3, PR4 and ICC6, using an inductive argument, that Q( X  X = a  X  ) =  1. In case q(a) < 0, the process

amount is spent. In other words, they say that the monetary effect of performing an action can always be neutralized by performing it synchronously with some other action. It can be useful to hypothesize this neutralization property in derivations concerning a system that is not supposed to interact with its environment, but not otherwise.

In this section, we introduce the notions of transition system induced by a model of ACP, paths in a transition system and bisimilarity of transition systems. Those notions will be used in Section 7 to show how bisimulation models of ACP can be expanded to models of ACPicc. Prior to all that, we make precise what we understand by a transition system.

In ACPicc, the implicit computational capital of a process is the least amount of computational money that is needed to account for the behaviour of the process. This amount is implicit in the behaviour of the process. In this section, we show that each bisimulation model of ACP can be expanded to a model of ACPicc, provided that it can be expanded to a model of ACP+PR.

In [6], the full bisimulation models of ACPfo, a first-order extension of ACP, are introduced. The full bisimulation models of ACP are the restrictions of those models to the signature of ACP. The full bisimulation models of ACP are the main models of ACP. We gather from [6]:

Proof. Let A be a bisimulation model of ACP that can be expanded to a model of ACP+PR, and let A' be an expansion of A to a model of ACP+PR. Let B be a model of CMV, and let B' be the unique expansion of B to a model of CMV+CMT. This unique expansion exists because CMV+CMT is a definitional extension of CMV. Moreover, the instances of axiom schema CMTC hold in B' because they are derivable from CMT and the axioms of CMV. From this and the fact that the signatures of A' and B' are disjoint, it follows, by the amalgamation result about expansions presented as Theorem 6.1.1 in [8] (adapted to the many- sorted case), that there exists a model C of ACPcm such that the restriction to the signature of ACP+PR is A' and the restriction to the signature of CMV+CMT is B'. Because A' is an expansion of A and B' is an expansion of B, the restriction of C to the signature of ACP is A and the restriction of C to the signature of CMV is B.	 

Proof. Let A be a bisimulation model of ACP that can be expanded to a model of ACP+PR. Let B be a model of CMV, and let  be the ordering on the domain of B such that, for all i and j from the domain of B, i  j iff max(i, j) = j. It is easy to see that the subset of the domain of B that consists of all elements that are the interpretation of some closed term of sort M is totally ordered by . By Lemma 7.1, there exists a model C of ACPcm of which the restriction to the signature of ACP is A and the restriction to the signature of CMV is B. Let A' be C expanded with the function Q from the domain of A to the domain of B such that, for all p from the domain of A:

It is plausible that an electronic device, such as an electronic wallet, is modelled in ACPicc as a process that deadlocks if the device crashes because of a technical failure. In such cases, it is likely that the process is not CM-preserving. This indi- cates that preservation of computational money is not a fact of life, but a constraint on how to model. Modelling with CM-preserving processes may enforce the intro- duction of a hypothetical process to which computational money is transferred just before the crash takes place. The problem with that process is that, unless it is able to dispose of its computational money, it accumulates computational money and by doing so it is not CM-preserving.

Chipcards with an electronic wallet appear to provide an electronic pendant of tokens. The fourth example concerns a vending machine like the one from Sec- tion 10.3. The main difference is that it accepts this electronic pendant of tokens instead of tokens.

Seeing that the behaviour of an electronic cash dispenser depends upon the balance of the bank accounts for which chipcards with an electronic wallet have been issued, the balance of all those accounts together make up a parameter of the electronic cash dispenser. We formalize this parameter using account numbers. We assume that a finite set N of account numbers has been given. N is considered to be the set of all account numbers of bank accounts for which chipcards with an electronic wallet have been issued. The parameter is formalized by a function

The work presented in this paper was carried out in the framework of a project investigating IT sourcing. In that project, we look at IT sourcing from the per- spective of formal methods. IT sourcing is mainly actuated by financial issues. We believe that the idea of processes with an implicit computational capital may be helpful to understand those financial issues.

