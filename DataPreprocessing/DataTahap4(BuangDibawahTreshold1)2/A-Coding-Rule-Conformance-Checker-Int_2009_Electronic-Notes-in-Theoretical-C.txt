coding rules to be of practical use, no matter who devises the coding rule set or dic- tates its use. There exists a number of commercial compilers and quality assurance tools from vendors such as IAR Systems [3] and Parasoft [9] that claim to be able to check code for compliance with a subset of HICPP, MISRA-C or other stand- ards. Other tools, e.g. Klocwork [4], define their own list of informally described rules aimed at avoiding hazards, and users can add new rules by means of complex application program interfaces (usually in C or C++). But, in absence of a formal and concise definition of rules, it is difficult to be certain about what these tools are actually checking, and two different tools could very well disagree about the validity of some particular piece of code with respect to, e.g., the same MISRA-C rule.

The other salient feature of our coding rule checking tool is that it has been integrated into the GNU Compiler Collection (GCC, gcc.gnu.org) development tool-chain. In this work we present a new version of our coding rule checker, im- proved the one presented presented in [7], that extracts all the needed information

about C++ programs while compiling them with GCC. One reason to put together the rule checker and the GCC tool-chain, which is a non-trivial task, is to make the checker readily available in the everyday tool of thousands of developers, which will undoubtedly foster the adoption of coding rules in many projects. Moreover, by using a single parser and semantic analysis engine (used for object code genera- tion) both for the compilation and to gather information for the code checker, any possible discrepancy on how code is interpreted (which could happen if a different parser / anlyzser were used) is avoided. In addition, information gathered by static analyses already present in GCC can be reused to implement rules that need it.

The current rule definition language is a subset of Prolog with some syntactic extensions (Section 3). In the future we plan to facilitate rule formal definition with a completely declarative logic language featuring sorts, constructive negation, and appropriate quantifiers (some details are given in [7]). Our aim is to enable developers not familiar with Prolog to formalize coding rules.

The Prolog formalization of the rule 3.2.4 codifies a violation of the rule, i.e., that an abstract class Class has a member Ctor which is a public constructor. If the rule can be violated, concrete instances of Ctor and Class in the software analysed will be returned to the user by checkrules, along with a warning message, associated with the rule by means of operator #. The arguments of the predicate can be displayed as part of the user message.

The middle-end of GCC contains a set of transformation and optimisation passes that are independent from both the compiled language and the target architecture. Many (but not all) of the program features needed for writing rules are common to multiple languages and have a common representation in the middle-end, even if the semantics may differ between different languages. For example, constructs as templates and friends are almost exclusive of C++, and only the C++ front-end knows about them.

In our extended version of GCC we have instrumented both the middle-end and the C++ front-end (totalling around 2.8 KLocs of new code), but most of the analysis is done in a new middle-end pass. Implementing functionality in the middle-end has many advantages: adding a new pass is simple and clean, and there is no overhead unless the pass is enabled using a corresponding flag. Furthermore, the new functionality may be reused for other GCC languages.

For every relevant entity in the code a Prolog term of the form entity (GLOBAL KEY ) is generated, where entity is one of enum, enum value, union, record (either a struct or a class), function, global var, method, field, and bit field. GLOBAL KEY is a project wide identifier of the entity, based on name mangling [11]. Mangled names are a special encoding of names of functions, variables, etc. generated by the compiler for the linker and other tools that have

The naming scheme for local entities (local variables, function arguments, etc.) is based upon the scope in which they are defined (that is a global entity) and its local identifier. For anonymous entities (e.g., anonymous union fields) a numerical identifier is generated.

Number of rule violations and user time (in seconds) consumed by the different steps in our rule checking procedure. BT is the total build time of the project, and BTCR is the total build time with structural data gathering enabled. LT is the time that takes checkrules to load the project. Columns labeled with a rule number show, in each cell, the number of violations (above) and the checking time (below).

Build time increases when -fipa-codingrules is enabled to extract structural information during compilation. The time penalty is less than 5% in the case of Bacula, but more than 60% for PPL. In general, the slow down is more noticeable when templates are extensively used. Reported build time is small for dlib, in spite of its size, because of the simplicity of the build procedure, consisting in the generation of one single object file.

On the other hand, checking time goes from a fraction of a second (i.e., cells with 0.00 time) to over one minute. Empirically, rules where complex sub-goals appear negated are the ones which take longer. In fact, as there is no restriction on the computational complexity of the rules, execution time is potentially unboun- ded. Despite this, the observed performance is reasonable for a project-wide static analysis tool that is not meant to be run in every compilation.

Note that, despite the significant number of violations we found for many rules, HICPP 3.3.14 and 3.3.15 are not violated in those projects. One reason is that they deal with language features rarely used by programmers (the declaration of an assignment operator in abstract classes and repeated inheritance, respectively).

We have presented a tool for structural coding rule validation where rules for C++ are formally defined by means of a declarative rule definition language. Users can define their own rules and the tool is seamlessly integrated into the work-flow of the developers. Basic information about programs is taken from the very same compiler (GCC) used to generate object code, which avoid inconsistencies.

