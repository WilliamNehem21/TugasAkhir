Concurrent and distributed systems are more and more becoming open environ- ments where components, agents or services interact one with another by dynami- cally establishing connections. For instance, in service oriented architectures, com- putational resources may be accessed through temporary interactive sessions. Such open-interaction environments, subject to the dynamical binding of their compo- nents, may result into systems being partially defined even at run-time. Describing and analysing the behaviour of such systems in presence of incomplete information

Web crawlers (also known as bots, spiders or scutters) are programs that systemat- ically browse the web to gather (and even produce) data. Prominent examples in- clude useful applications such as those used to feed search engines (e.g. Googlebot), and spambots that collect email addresses or post forums with malicious purposes (e.g. spamming or phishing).

Some protocols exist that aim at harmonising the collaboration between crawlers and sites. For instance, robot exclusion and inclusion protocols (e.g. the de-facto standards robots.txt and sitemaps, respectively) are used by web sites to inform crawlers of links to be excluded and included in their spidering activity. Crawlers are free to respect or not such protocols but web servers can sometimes distinguish crawlers from human browsers (e.g. based on navigation speed or patterns) and thus control whether protocols are being respected or violated.

completely) and before communicating the page to its (possibly remote) database. A cautious crawler moves (i.e. changes target page) in a similar way, but does not check the page existence when communicating the url of a page to its database. A rash crawler checks nothing, i.e. it assumes the existence of pages that it communicates or tries to examine. All three kinds of crawler are able to examine an existing page. For the sake of simplicity we restrict to static networks: no page is added or removed during crawling activities.

We model such scenario with a simple name-based calculus where crawler agents c operate on a web of links link(x, y). We assume denumerable sets of channel names (ranged by a, b, ...) and of site addresses (ranged by x, y, z, w, ...) are available. The web system s may be empty or comprise crawlers, links and their composition:

Pages are seen just as collections of links with the same origin. If the collection is empty we say the page is missing, it is valid otherwise. If the target of a link is a missing page, then the link is called broken.

Any crawler can learn new site addresses by looking at the links departing from its current site. The corresponding rules are identical for the three different kind of crawlers and abstract away the actual interaction that would take place in con- crete crawlers (rules Learn). The graphical representation makes evident that the interface of the crawler agent may be enlarged by the acquisition of a new site address.

For the forms (c) and (d) (observations link(x, y) | Y and c | link(x, y) | Y ) we exploit Theorem 4.9 to derive a proper decoration for Y . We show what happens for link(x, y) | Y , but the other case is entirely analogous.

