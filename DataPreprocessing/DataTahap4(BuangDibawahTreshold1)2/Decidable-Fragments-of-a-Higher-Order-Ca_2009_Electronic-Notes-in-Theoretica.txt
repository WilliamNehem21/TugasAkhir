nation problem is undecidable. However, perhaps surprisingly, it holds that strong bisimilarity is decidable, which in turn implies that barbed congruence is decidable. It is also shown that if at least four static (i.e., top-level) restrictions are added to the calculus then strong bisimilarity becomes undecidable.

In the reduct the two parallel components are both on folded form, but the s- component of their least type is 6. So it seems that we need to be able to let the s-component grow under reduction. However for any process p and reduct p' of p, there is a uniform upper bound on the s-component of p' which only depends on p and which is closely related to the unfolding of recursive definitions.

The encoding of an instruction is guarded (the CCS prefix lm above) to ensure that we only can execute the instruction if it has been activated. For the encoding of Inc(ci, n) we first read the content of location ri and then place this content inside a location n in ri. Finally, we activate the instruction indexed by n through the forwarder process defined below.

a. Now either Zero or NonZero can synchronise with the content inside a using the address az or an respectively (depending on whether the encoded number inside a is zero or non-zero). If the number was zero we place zero inside ri, signal the Get-process using b, and activate the instruction indexed by n. If the number was non-zero we place the content of the outermost n-location, thus decrementing the number by one, inside ri, signal the Get-process using b, and activate the instruction indexed by m.

to activate the process representing the instruction indexed by 1. Letting L denote the list of instructions {L1,... Lk} we write this encoding of the Minsky machine in instruction i and with counters c1 and c2 as follows (L, i, c1, c2)). We now state the close operational correspondence.

Sendn expects the encoding of the name to be communicated on v, and the contin- uation of the prefix on c. Receiven expects the encoding of the continuation and is then ready to synchronise with the resulting Sendn prefix. The significant cases of the encoding are input, output, and restriction.

