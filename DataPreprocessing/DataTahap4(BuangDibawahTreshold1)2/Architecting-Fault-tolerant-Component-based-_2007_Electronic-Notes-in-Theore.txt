The running example taken into consideration is the mining control system case study [24], a simplified system for the mining environment which handles the mineral extraction from a mine (which produces water and releases methane gas on the air). The system is composed by three main sub-systems: Pump Control, Air Extractor Control, and Mineral Extractor Control. In the following we explain and apply the methodology to the Air Extractor Control sub-system, in order to better explain the theoretical aspects detailed in the following.

Software Architecture has been largely accepted as a well suited tool to achieve a better software quality while reducing the time and cost of production. In partic- ular, a software architecture specification represents the first, in the development life-cycle, complete system description. It provides both a high-level behavioral ab- straction of components and of their interactions (connectors) and, a description of the static structure of the system.

According to the idealized fault tolerant component model, the modeling lan- guage that we propose encompasses both a structural and a behavioral specification of a fault-tolerant architecture. The structural part describes how components and connectors are composed of a normal and an exceptional part, and relationships among them. The behavioral part, instead, specifies how components and con- nectors are intended to interact, according to the rules imposed by the idealized component model.

agram built according to the profile). According to our profile, an SA component is a stereotyped UML component ( SAComponent ). The SA component contains the boolean tag HasException that is true if the component has a description of the fault-tolerant behavior, false otherwise. SA Component is even specialized with the stereotypes  NormalComponent  and  ExceptionalComponent  describing the normal and the exceptional behavior, respectively. Components can have ports to manage the communication with other components and connectors. Ports are also used in order to model communication ports for signalled exceptions. Then we have normal ports and ports specialized by the stereotype ICPorts for modeling exceptions communication. Finally UML component interfaces are used for the exceptions propagation from the normal to the exceptional part specialized with the stereo- types HandlerInterface and RaiserInterface representing the handler and the raiser respectively.

On the behavioral side, we describe the behavior of the components and the connectors by means of UML state diagrams. This model is in fact intuitive and it represents an easy way to describe the behavior of a single component. Excep- tional behaviors must take into account both exceptions signalling and exceptions managing, showing the recovery measures to bring the system back to an error-free state. In case of a component is not able to manage, the exception the behavior must show how the exception is forwarded to the enclosing context.

As in more traditional specification-based testing approaches, a test case is seen as a path covering the behavioral graph produced out of the state machine- based specification (e.g., [18]). It is produced by appropriately covering the state machine model of the system. In order to identify architecture-level test cases, we start from the structural and behavioral SA specification: from the structural model we retain information on which service is considered critical, and on which critical or exceptional component implements such a service. From the behavioral model of critical and exceptional components, we retain information on how the system implementation is supposed to work at run-time.

