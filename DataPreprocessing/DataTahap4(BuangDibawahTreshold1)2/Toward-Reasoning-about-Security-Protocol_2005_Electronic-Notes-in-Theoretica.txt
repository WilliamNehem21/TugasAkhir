As a case study illustrating our approach, we will consider the so-called SRA Three Pass protocol and prove a property of it. It is not our intention to prove that the protocol is completely secure (as it is not in full generality), but we will prove that if the agents participating in the protocol are honest, then an intruder observing the communication does not learn anything about the plain-text messages in a single run. Furthermore we show what the intruder is able to learn about the agents participating.

The first type of update typically runs as follows: In an open network agent a sends a message to agent b. From a security perspective, it is cus- tomary to assume the Dolev-Yao framework [12], in which all agents in the network can read this message too. However, also in open networks private learning, the second type of update, can take place. For example, agent b receives a message {x}k from agent a. Here {x}k denotes a message with content x encrypted with the (symmetric) key k. If b possesses the key k, then b privately learns the message content x (assuming that the key k is shared among a and b). The final type of update, learning about knowledge of others, is probably the most interesting. It is realistic to assume that the steps in a protocol run are known to all agents. Therefore, observing that an agent receives a message will increase the knowledge of the other agents. For example, if agent a sends a message {x}k to agent b, then agent c learns that b has learned the information contained in the message {x}k, but typically, c does not learn x if c does not possess the key k.

Stronger types of updates we do not consider here. For example, we will not update the beliefs of an honest agent such that it learns that an intruder has learned about others. In the present paper, we restrict ourselves to updating beliefs about objective formulas and beliefs about objective formulas.

In this section we describes various types of updates in detail. We will start by defining an update for propositions in subsection 3.1. In subsection 3.2 we will define a belief update for agents that learn something about the belief of others. We do this in two slightly different ways by varying in the functions that describe a side-effect for an agent.

We can see that the belief of agent a has not changed: it still considers its old worlds possible. The belief of agent b however, has changed. It now only considers the state u possible where p holds, hence b beliefs p.

A technical obstacle is that states can be shared among agents. It is obvious that if we change a state with the intention to change the belief of one agent, then the belief of the other agents that consider this state possible, is changed as well. Therefore, the first thing to do, is to separate the states of learning agents from the states of agents that do not learn. This procedure will be called unfolding. The functions newB and orig are generalizations of new and old from the previous section, but the function orig is only defined

The idea is that once the belief is completely separated, we can not only safely change the belief of a certain agent, but also preserve the Kt45 properties. In particular, we change locally the knowledge of an agent a, e.g. regarding uncer- tainty of another agent b about a propositin p. The operation atomsplit(p,b) below removes the arrows of b between states that have a different valuation for p.

The fact that the agents of type a are the only agents that learn at all, is clear. The other agents consider their old worlds possible; their belief has not changed. With this in mind, we present a few properties of the side-effect function.

Part (a) of the above lemma states that agent a obtains derived knowledge of an agent b. Part (b) states that no object knowledge is learned. Part (c) phrases that agent a considers the rest of the agents as smart itself. Finally, part (d) captures that other agents do not learn.

Property (c) is a reasonable assumption of a about the other agents in the context of open communication networks (as is the setting of Sections 4 and 5). If one agent believes that another agent knows the value of p, then it is reasonable to assume that another agent will believe the same. On the other hand common knowledge might be too strong to assume.

For simplicity of presentation, we assume that there is exactly 1 agent present in each group, i.e. A = {a, b, c, d}. We define the new side-effect operation 0-unfold (where 0 refers to zero-knowledge). Note that the 0-unfold oper- ation depends on the particular partinioning of agents A. Since the operation s0-ide-effect will depend on the unfold operation, the side-effect function is also taken with respect to some chosen partitioning of the agent set.

So instead of completely separating the knowledge of te agent a with the other agents, we share the knowledge of a about d with the other agents. Since the other agents do not learn anything, a does not gain knowledge about d. We present a lemma similar to Lemma 3.7.

The selection Mod(M, w) is organized in such a way that no transition rule is applied over and over again. The recursive definition of d therefore is well-defined, since it stops if no fresh transition rule can be applied. In the definition of Mod it is checked if the belief of the agents changes under the transition rules, preventing an infinite chain of rewrites for dp . Note that because of the results of the previous section, the order of applying these transition rules does not matter.

Shamir, Rivest and Adelman have suggested the three-pass protocol [9] for the transmission a message under minimal assumptions for commutative en- cryption. It is known to be insecure and various attacks have been suggested. However, it serves an illustrative purpose here. The protocol has the following steps:

