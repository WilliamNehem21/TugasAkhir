Our focus in this paper is the interaction between probabilistic reductions and non-determinism, where the latter comes from different possible reduction choices. Such choices exist, for example, when a given program contains two reducible subex- pressions, each of which is probabilistic. In that case, the program can take a step to two different normalised distributions depending on the choice. Given such non- determinism, a natural question to ask is whether the result of a program (which is a distribution of values [16]) is not affected by the strategy, analogously to UN for classical languages. This is precisely the property we set out to study here, developing an associated notion of confluence for it.

While this same property has already been studied in the literature [8, 11], it has only been done for concrete languages, and so a language-independent study was previously lacking. Further, the techniques employed are not immediately applicable to other calculi. There are also other studies of confluence in a probabilistic setting at a more abstract level [3, 15], but such notions are fundamentally different from what we previously described, and of limited use for programming languages.

To model the uncertainty in probabilistic rewriting, we cannot use a simple relation between elements as used in ARS. We must instead relate elements to distributions of elements. Further, to model elements such as ( , ), we need to be able to relate elements to several such distributions. This motivates the following definition.

Execution in a PARS is a mixture of non-deterministic and probabilistic choices. The first kind, corresponding to the P operator, occur when the machine chooses a successor distribution for the current element. The second kind, corresponding to the D1 operator, is a random choice between the elements of the chosen successor distribution. To model such execution, we use the notion of computation tree.

In the previous section, we introduced our definition of confluence and argued about its correctness. For it to be useful in practice, it should also be amenable to be proven. In this section we provide several simplified criteria for this task, obtaining analogues to the most usual methods for proving classical confluence.

