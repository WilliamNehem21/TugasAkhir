We then show (in Sect. 3) how to extend such machinery to finite-state processes of a full calculus that includes both static operators and recursion, more precisely to processes such that static operators are not replicable by recursion [2,3,1]. The basic idea is to express hiding mechanisms explicitly via an hiding operator P/L (like e.g. the hiding mechanism that is part of the CCS parallel operator) and to introduce a new axiom for exchange of hiding and recursion and a new normal-form derivation procedure that combines unguardedness removal with static operator elimination in an inductive way. The work presented in Sect. 3 has been done in cooperation with Jos Beaten.

E/L which hides all the actions in the set L) and to introduce the new axiom (recX.E)/L = recX.(E/L) that allows us to exchange recursion and hiding, so to evaluate the effect of hiding inside serial terms E. The CCS parallel is then

Concerning normal form derivability, terms belonging to the syntactical charac- terization above are shown to be transformable into normal form by combining unguarded recursion elimination of BCCSrec (see Sect. 2.1.3) with static operator elimination of CCS (see Sect. 2.2.2). In particular an inductive structural bottom- up transformation of terms into normal form is performed.  The inductive step

Only in the case of a recursion or hiding operator: we remove generated unguarded recursion via the standard (WUng) and (FUng) axioms plus the new axiom (RecHid) (and the other standard elimination axioms for hiding). In the case of recursion, this is done just as in the standard case (Sect. 2.1.3).  In case of hiding, we preliminarily propagate structurally the hiding operator top-down until leaves and then again bottom-up to the top-level to introduce new taus in the previous normal form (obtained as the effect of hiding) and then remove generated unguarded recursion.

structural operational semantics, hence in a compositional way. To do this, we make use of our idea of levelwise reindexing of actions. For obtaining compositionality, it is necessary to determine, e.g. in the case of the parallel composition operator, the computations of P  S Q from the computations of P and Q.  This is done by parameterizing in state terms each parallel operator with a mapping M . For

Completeness over finite-state terms belonging to the syntactical characterization presented in Sect. 3 (where, in the case of the stack technique, also the semantic action refinement operator is considered as a static operator) is obtained as usual (see Section 2.1.3) in two steps.

Concerning normal form derivability, terms belonging to the syntactical characteri- zation above are shown to be transformable into normal form by adopting the same procedure as that of the previous Sect. 3.2. Note that in the current context this means that during the inductive structural bottom-up transformation of terms, ac- tion are reindexed at every level as an effect of the axioms for the elimination of the parallel operator.

7 Differently from [12] here we consider the CSP parallel operator, that allows us to keep the hiding and par- allel operations expressed in a separated way. This is needed, e.g., for producing a complete axiomatization via the (RecHid) axiom (see Sect. 3).

Note that, in the case of real-time, the axiomatization, being it sound with re- spect to real-time observational congruence, preserves the time determinism prop- erty, hence we are guaranteed that the basic terms that we get at the end of the transformation above are actually time deterministic. In the case of Markovian stochastic time, normal forms in the two-level syntactical form of Sect. 6.3 are obtained by an unfolding and folding procedure like that performed in the transfor- mation of Sect. 3.2 when eliminating static operators.

