To fully support refactorings in a team development environment we have implemented a refactoring-aware repository provider as an extension plug-in to the Java Development Tools in Eclipse. The versioning system treats refactorings as first-class changes described as semantic ac- tions rather than the set of resulting changes scattered over the source tree. We also introduce refactoring-aware merge, which merges refactorings as well as traditional changes utilizing the se- mantics of the refactorings to detect and resolve merge conflicts. It also ensures that the semantic meaning of a refactoring is preserved after the merge.

Refactorings are a safe and efficient way to improve code quality in a con- trolled manner. Refactorings differ from traditional changes in that they are guaranteed to be semantically valid and have a semantic meaning, e.g. after renaming a variable all uses of that particular variable should still reference the same variable.

These benefits apply to refactorings in a single user environment, but the introduction of traditional team development repository providers decreases the above mentioned benefits due to insufficient tool support. When merging code from several developers the preconditions have been checked for each individual branch, but not for the merged source tree. Thus, all preconditions ensuring a safe refactoring may not be met for the merged tree. During merge, the changes originating from a refactoring are viewed as numerous small un- related changes that the developer may have to merge manually, in case of a merge conflict. Since a refactoring is only applied to one of the merged branches, and not both involved versions, the merged result may not include the semantic meaning of the refactoring. Changes in the branch where the refactoring is not applied may violate pre-conditions, prohibiting the refact- oring to execute, or newly introduced code that should have been affected by that refactoring is unaffected, e.g. adding a invocation of a method that is renamed in a parallel branch should be changed to use the new name instead of the old name.

To better support refactorings in a team development environment, we have developed a model for a refactoring-aware repository provider. This pro- vider stores and retrieves both traditional changes and entire refactorings, which enables the presentation of differences between two versions in terms of refactorings. Moreover, when two branches are merged this semantic know- ledge is used to better detect potential conflicts and (when possible) to do an automatic merge. The result is that some cases of unintended merges and false merge conflicts now can be correctly automatically merged and that real

conflicts more often are detected and better presented to the developer. We have implemented parts of this model in a prototype as an extension plug-in to the Java Development Tools in Eclipse. Currently the prototype supports refactoring-aware automatic merge of two refactorings (rename and move) with manual changes.

The rest of this paper is structured as follows. Section 2 gives an intro- duction to refactorings and various merge strategies. The two concepts of refactoring-aware merge and refactoring-aware versioning are introduced and motivated by examples in section 3 and section 4. Section 5 outlines a ver- sioning model and merge strategy to support refactoring-aware versioning. Experiences from integrating that model and strategy in Eclipse is given in section 6. Related work is described in section 7 and section 8 concludes the paper and discusses some future work.

rename Renames a class-, field-, or method-declaration as well as all uses of that same entity. When renaming a method, polymorphism and overriding must be taken into account. Pre-conditions involve checking that the new name is not already in use or shadowed by another declaration. A refact- oring like rename class, that changes both declarations and use sites, often involves numerous changes scattered over the entire code base.

Merge is the task of combining changes made to one document in parallel into one unified version. Incompatible parallel changes results in a merge conflict that must be manually resolved. The following techniques represent the current state of the art and are orthogonal to each other and may thus be used in any combination. For a thorough survey on software merging see [7].

An important difference between merge tools is the way documents are repres- ented. A textual representation of documents treats each document as a flat structure. The most common approach is to divide the document in single lines of text and perform merge on these lines. Because of this granularity parallel changes to the same line is not handled very well, since only one of these lines can be selected even when a combination of the two modifications to the same line is desirable.

A better approach is to take the syntactical structure of the documents in account. This is particular powerful in the context of programming languages where the syntax is clearly defined. The most common structural representa- tion of software documents is a parse tree matching the context-free grammar for the used programming language. The merge tool can detect context-free conflicts and ensure that the merged result is syntactically correct.

An even more advances approach is to take the static semantics of the used language in account as well. The goal is to detect semantic merge conflicts that would generate static semantic compile-time errors or unintended run-time behavior when merged. This approach often rely on complex mathematical formalisms and current implementations do not work for full blown languages.

the final result of the two concurrently changed versions are considered. A change-based merging tool uses information about the exact changes made to the documents. These changes often correspond the the actions taken in the integrated development environment. The extra information can be used for improved conflict detection. Operation-based merge is a special case of change-based merging that models the changes as explicit transformations.

The main goal of a merge tool is to find changes made in parallel that are independent and then automatically merge them. Changes that are depend- ent result in a merge conflict that needs to be resolved manually. In a naive row-based merge-tool only changes made to the same row are considered de- pendent while a structural merge tool consider changes made to the same node dependent. While certainly useful, this type of dependency detection fails to detect certain dependences and detects some unintended dependences as well. Since the semantics and intention of a refactoring is clearly defined, this information can be used to perform a more intelligent merge that better reflects the intention of the developer.

class to another, e.g. pulling a method to a super class, and in parallel chan- ging that same method. Traditional merge tools will view the single move operation as two unrelated delete and add operations done in parallel with the change operation. The delete and change operations affect the same code

and thus result in a conflict while the add operation is merged automatic- ally. A refactoring-aware merge can detect that the changed method is to be moved and apply the changes to that method prior to moving it to its new loc- ation. The merge conflict in a traditional merge is replaced by an automatic refactoring-aware merge.

The pre-conditions for a refactoring can be used to detect cases where an automatic traditional merge will not be semantically correct. Such errors are better resolved as merge conflicts than as compile-time errors. A merge con- flict that originates from refactoring pre-conditions often turns out to result in numerous compile-time errors as will be discussed in section 3.4. Consider pulling down a method from a super class to one of its sub classes in parallel with adding a use of that same method in the super class. The pre-conditions for the pull down method refactoring states that the method may only be moved to the sub class when all invocations of that method are done through references that are statically qualified to the sub class. The added invoca- tion violates these pre-conditions and the refactoring-aware merge will detect a merge conflict in contrast to the semantically incorrect automatic merge performed by a traditional merge.

One important benefit from refactorings often neglected is the definition of a nomenclature for common high-level changes that improve source code. These refactoring names can also be used to provide more descriptive history track- ing. Indicating that an element is renamed is more descriptive than the more traditional unrelated changes to the definition and all uses of that element that are scattered all over the source code.

Manual changes to the source code are stored as traditional delete-, add-, and change-operations but make use of node identity to specify the affected nodes. Since node identity is preserved when refactorings are executed these changes can still be applied after structural changes, e.g. a changed method body can be located even after the affected method is moved.

The refactoring-aware merge tool has two main tasks: to detect semantic merge conflicts and, if possible, perform an automatic refactoring-aware merge. The merge is done in several steps. First, the traditional changes are merged and merge conflicts that originate from these changes are detected. Then, refactoring pre-conditions are checked to detect possible semantic merge con- flicts that would be caused by applying that refactoring to the merged version. If the pre-conditions hold the merge proceeds with an automatic refactoring- aware merge. The traditional changes are first applied followed by the refact- orings. This ensures that all traditional changes are affected by the whole source transformations caused by refactorings. Because node identity always is preserved, both for traditional changes and when refactorings are executed,

We have a implemented a plugin that adds a refactoring-aware repository provider to Java Development Tools (JDT) in Eclipse for proof of concept. The current implementation supports refactoring-aware automatic merge for the rename and move refactorings. We believe that the approach is generic enough to be extended with other refactorings as well. The goal was to re-use as much infrastructure as possible in JDT while implementing the versioning model described in section 5.

Manual changes are directly replicated in RAJM. We register a Java Element- ChangedListener to receive events when changes to the JavaModel occur. These are reported as traditional add, delete, change, and move deltas. While add and delete report changes all the way down to type members, change and move seem to only report changes down to the affected compilation unit. We therefore compare the entire compilation unit with RAJM in order to find the actual changes, which then are store in RAJM.

Refactorings should be more carefully traced. The series of changes caused by a refactoring should not always be directly replicated, but a the semantic behavior should be better stored. When, for example, a move is executed the delete and add operations made in the Java Model should be transformed to a true move to the affected node in RAJM.

Why not add these transformations directly to the existing refactoring implementation? It may seem like we need a lot of semantic knowledge to replicate these transformations in the version model. However, many refact- orings have little or no net effect on the actual structure and sometimes provide information of the affected nodes. E.g. a rename refactoring does not change the structure but only the node contents, and a move element refactoring provides access to the source and target location elements. I.e. the actual transformation is a match of delete and add operations, transforming them to one move.

Since we used the JavaModel structure for RAJM the most fine-grained ele- ment is type members, and the node contents may thus be the entire method body. A more appropriate solution would be to use the underlying AST as the structure to replicate. However, the JavaModel is still needed for refact- oring parameters and has a more convenient access to its syntactical source range than the AST nodes. Refactoring parameters are needed to represent refactoring deltas and the source range for the node contents. Our current implementation replicates the JavaModel and relies on a traditional merge for method bodies while still demonstrating the central concepts.

The use of static semantic information when merging versions is not a new idea but used in several approaches to semantic merge, e.g. [3]. Our approach differs in that we limit the semantic merge to refactorings where not only the semantic is well defined but where the intention from a developer point of view

Two approaches that detect and merge renamed entities in software are de- scribed in [8] and [6]. In [8], a generic rename detection for languages with a nested block structure is described and implemented using contextual inform- ation. However, this approach does not work on object-oriented languages. In [6], a statistical rule based method is used to detect renamed entities. Neither approach tries to generalize these ideas for other semantic sensitive changes.

