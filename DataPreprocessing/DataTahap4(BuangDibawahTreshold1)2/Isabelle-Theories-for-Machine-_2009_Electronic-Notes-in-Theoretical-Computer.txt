Wai Wong [8] developed HOL theories in which words are represented as lists of bits. The type is the set of all words of any length; words of a given length form a subset. Some theorems have the word length as an explicit condition. The theories include some bit-wise operations but not the arithmetic operations.

In this paper we focus on the techniques used to define the machine word type. We defined numerous operations on words which are not discussed here, such as concatenating, splitting, rotating and shifting words. Some of these are mentioned in the Appendix. The Isabelle code files are available at [3].

As these definitions have since been removed, this section is not relevant for using these theories currently. But we give this description to indicate the advantages and disadvantages of the obin type, i.e., the former, datatype-based definition of the bin type. In fact for some time we continued to use the obin type because it is defined as a datatype: only a datatype permits the primitive and general recursive definitions described below.

Since bin is not a datatype, we could not define functions on bins in the same direct way as on obins. So, originally, we defined such functions on bins by reference to the corresponding functions on obins. To do this we used the functions onum_of and int_to_obin, which relate the int (isomorphic to bin) and obin types.

Proving these was virtually automatic for bin_not (with one argument), and fairly straightforward for bin_and (with two arguments): see examples in [3, BinGeneral.thy]. This was much easier than maintaining collections of corre- sponding theorems for the separate types bin and obin.

Further simplification of such expressions, i.e., from (11 :: word2) to 3 (where word2 is a type of words of length 2) and from iszero (4 :: word2) to True depend on the specific word length. We would want to use a theorem like num_of_bintr, but we cannot reverse it to use it as a simplification rule because it would loop. Instead we can simplify using num_abs_bintr (which is derived from num_of_bintr and word_number_of_def).

