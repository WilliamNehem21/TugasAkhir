is also the basic structure for Turing machines (compare [2]) and for structures like the ordered ring of reals used in case of the BSS model, questions like P =? NP are open. For the classical setting, T. Baker, J. Gill, and R. Solovay [1] constructed

Let strucfin (U ) be the class of structures of finite signature of the form (U ; a, b, d3,..., dk0 ; f1,..., fk1 ; R1,..., Rk2 , =) for some k0   2 and k1, k2    0.

Let us mention that the finite signature of the structure is a sufficient but not a necessary assumption for the definition of NPK-complete problems. For example, for linear Rlin-machines over the reals and for scalar Zsc-machines over the integers which can only execute the multiplication by constants, we can encode the constant factors by themselves, but there is not a universal machine (see [24, 13]). How- ever, although there is not any NPZsc -complete problem, there are NPRlin -complete problems (see [13]).

The undecidability of the Halting Problem is known for Turing machines, for BSS machines, for While programs on standard algebras [28], and so on. For these problems, the undecidability results from the enumerability of the codes of machines and the undecidability of halting sets investigated in [5, 4, 28], respectively. For BSS machines and restricted classes of BSS machines, further halting problems were considered, for instance, in [25] and in [12].

permits to compute the codes of the programs of machines over K. The first con- struction is restricted to structures of finite signature with two constants. Then, we can explicitly encode the programs of machines character-by-character similarly as in [10]. We transfer and modify the definitions given in [1] and [10]. The ideas for the definitions go also back to S. A. Cook, R. Karp, A. Meyer, M. Fischer, and

The constructions given in Sections 4.1 and 4.2 are possible for any classes of time bounds limiting the work of the deterministic oracle machines. We can build, for instance, some oracle Q such that EXPKQ /= NKQPholds if we use the exponential

In this way we can once more substantiate the thesis that additional oracles are not very helpful for solving the PK =? NPK problem for any structure K. On the one hand, we know structures K with PK /= NKPand we can define an oracle 0 which implies PKO = NPKO. On the other hand, we know structures M with PM = NPM and we can define an oracle Q implying PQM /= NQMP.

