This paper is part of a research project aiming at a semantical foundation for pro- gram extraction from proofs [7]. It contributes to a soundness proof for a language of realizers of proofs involving inductive and coinductive definitions. The natural language of realizers for inductive and coinductive definitions is a typed lambda cal- culus with types modeling initial algebras and final coalgebras, and terms modeling structural recursion and corecursion. In this paper we study a more general calculus that allows fixed points of arbitrary type operators and definitions of functions by general recursion. The advantage of this generality is that our results will apply to all conceivable extensions of our theory of realizers of inductive and coinductive definitions.

A similar problem was studied by Reynolds [13,14] who established a coherence between the typed and untyped meanings of expressions based on cpo models of a version of PCF. The main differences to our work are as follows: Reynolds considers simple types over the base types of natural numbers and booleans while we allow arbitrary recursive types. On the other hand, he includes subtyping which we do not. Regarding the typed semantics, Reynolds interprets typing derivations in a typed model while we interpret terms with a typed abstraction in an untyped model.

We consider only the constructors Nil (nullary), Pair (binary), and Left, Right, In (unary). The intention behind the first four constructors should be obvious. The constructor In is used to model type fixed points up to isomorphism. Many definitions and results could be extended to an arbitrary set of constructors.

