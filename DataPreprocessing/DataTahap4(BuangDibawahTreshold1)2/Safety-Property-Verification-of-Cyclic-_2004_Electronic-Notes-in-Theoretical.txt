The mentioned analyses are both based on BDDs [3]. This has as a drawback that circuits which are difficult to represent using BDDs are difficult to handle using the method, since the method inherently relies on computing a BDD which represents the function that the circuit implements. Also, the analyses involve a fixed point computation over BDDs, which might introduce extra costs.

The rest of the paper is organized as follows. The first three sections can be seen as a tutorial on the subject and introduce background material, large parts of which are also presented elsewhere; in Section 2, we introduce the definition of circuits, and what their naive, classical semantics is; in Section 3, we show how to verify safety properties of these circuits, under the classical semantics, using a propositional theorem prover; in Section 4, we present the constructive semantics of circuits, which corresponds more closely to what happens in electrical circuits. Our main result is presented in Section 5, where we show how safety properties of cyclic circuits can be proved, under the constructive semantics. Finally, in Section 6 we discuss related work and conclude.

the form x = f contained in C. A solution of a combinational circuit is a valuation, i.e. an assignment of all variables to a boolean value 0 or 1, such that all definitions are satisfied, using the usual interpretation of the boolean operators.

C,a safety property p is valid, if s(p)= 1, for all solutions s of C. If we want the safety property to be a more complicated property than just a variable, namely a formula f , we can simply add p = f as a definition to C. In the rest of the paper, we will sometimes do this implicitly.

Proving Combinational Properties.  In order to check if a given property p is valid for a given combinational circuit C, we can use a propositional logic theorem prover, often called SAT-solver. There are many such theorem provers available. Our choice of theorem prover is discussed in Section 6. To check the validity of a safety property p, we simply prove:

Complete Induction.  The method of temporal induction as described above is sound, but not complete. This means that there are safety properties which are valid but cannot be proved by the proposed method. In particular, when the safety property p is very weak, assuming it as an induction hypothesis is not enough for the induction step to be a valid formula.

However, it is possible that this process never terminates. This can happen when the unreachable state space contains loops. To exclude the loops and to make the method complete, we can add an extra assumption in the step case, namely that all states used in it are unique. It is sound to assume this, since if there is a solution path leading to a state where p is not true, there also exists a solution path leading to that state which consists of unique states. So, we define Diff(D, i, j) to mean that the states in time instances i and j are

Cyclicity.  For a given combinational circuit C, and variables x and y, we say that x directly depends on y, if y is contained in the right hand side of the definition of x. By taking the transitive closure of this relation, we obtain the relation x depends on y.

Electrical Circuits. The circuits we have defined mathematically corre- spond to an obvious electrical implementation: The logical connectives can be implemented as the corresponding logical gates, points with the same variable name are wired together, and delayed definitions can be implemented using registers. For combinational acyclic circuits, we know that there exists ex- actly one solution for each input vector. This is also the solution that the corresponding electrical circuit computes.

However, we do not want the circuit to compute undriven values. Thus, we make the following definition. A combinational circuit C is called constructive, if and only if, for all defined inputs, all values in the corresponding least solution are defined [10].

Note that every delayed definition is turned into one delayed definition, and one normal definition. This means that the transformation does not increase the number of state variables in a circuit. This is correct since we can assume that the output of a delay component in a circuit is always defined. This assumption is however only valid if we really prove that the input to a delay component is always defined.

Constructiveness as a Safety Property. Now, we formulate the con- structiveness condition as a classical safety property: For all defined inputs, all solutions are defined. This is the same as showing that the following property is a valid safety property for the transformed circuit. (We let I be the set of all input variables, and V be the set of all variables in the circuit.)

circuit as mentioned above, and verify that the above safety property holds for the transformed circuit. We can use any formal verification method for that, provided it gives classical semantics to combinational cycles. For our purposes, the method of temporal induction presented in Section 3 has worked well.

synchronous hardware description and verification workbench. Formulating the constructiveness condition as a safety property has the advantage that we can implement the analysis independently from the underlying verification method. In Lava, we just implemented a circuit transformation that performs the translation described in Section 5. The analysis can then be performed by any built-in verification method using classical semantics, such as the ones described in Section 3. The method we mostly use, as described, is induction with increasing depth. We have since extensively used the analysis in our hardware compilation framework [5].

Possible Improvements. One possibility for improvement which we have not pursued is to investigate the circuit structurally, and only apply the analy- sis on the strongly connected components, i.e. the parts of the circuit involved in a cycle. In practice, this would amount to not applying the dual-rail encod- ing on the paths that lead from the inputs to the parts of the circuit containing cycles, and not on the paths leading from the cycles to the registers.

Limitations and Other Future Work. One limitation of the proposed method is that it does not work when extending the ternary domain with a fourth element, T, representing a short circuit, i.e. a point in the circuit driven by both 0 and 1. As far as we know, computing constructiveness of

