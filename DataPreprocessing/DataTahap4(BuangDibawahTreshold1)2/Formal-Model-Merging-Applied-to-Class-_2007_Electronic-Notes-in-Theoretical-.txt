The integration of software artifacts is present in many scenarios of the Software Engineering field: object- oriented modeling, relational databases, XML schemas, ontologies, aspect-oriented programming, etc. In Model Management, software artifacts are viewed as models that can be manipulated by means of generic operators, which are specified independently of the context in which they are used. One of these operators is Merge, which enables the automated integration of models. Solutions for merging models that are achieved by applying this operator are more abstract and reusable than the ad-hoc solutions that are pervasive in many contexts of the Software Engineering field. In this paper, we present our automated approach for generic model merging from a practical standpoint, providing support for conflict resolution and traceability between software artifacts by using the QVT Relations language. We focus on the definition of our operator Merge, applying it to Class Diagrams integration.

During this refinement process, several tasks are applied to models such as trans- formation and integration tasks. These tasks can be performed from a model man- agement point of view. Model Management was presented in [2] as an approach to deal with software artifacts by means of generic operators that do not depend on metamodels by working on mappings between models. Operators of this kind deal with models as first-class citizens, increasing the level of abstraction by avoiding working at a programming level and improving the reusability of the solution.

Based on our experience in formal model transformation and data migration [8], we are working on the application of the model management trend in the context of the Model-Driven Development. We have developed a framework, called MOMENT (MOdel manageMENT) [25], which is embedded into the Eclipse platform and that provides a set of generic operators to deal with models through the Eclipse Modeling Framework (EMF) [14]. Some of the simple operators defined are: the union, intersection and difference between two models, the transformation of a set of models to other model applying a QVT transformation, the navigation through mappings, and so on. Complex operators can be defined by composition of other operators. In this paper, we present the operator Merge of the MOMENT framework from a practical point of view. The underlying formalism of our model management approach is Maude [11]. We apply it as a novel solution for the integration of UML Class Diagrams in a Use Case Driven software development process.

Software development methodologies based on UML propose an approach where the process is Use Case Driven [17,18]. This means that all artifacts (including the Anal- ysis and Design Model, its implementation and the associated test specifications) have traceability links from Use Cases. These artifacts are refined through several transformation steps. Obtaining the Analysis Model from the Use Case Model is possibly the transformation that has the least chance of achieving total automation. The Use Case Model must sacrifice precision in order to facilitate readability and validation so that the analysis of use cases is mainly a manual activity.

In a Model-Driven Development context [21], models consist of sets of elements that describe some physical, abstract, or hypothetical reality. In the process of defining a model, abstraction and classification are guidelines to be taken into account. A metamodel is simply a model of a modeling language. It defines the structure, and constraints for a family of models.

A model merging process involves a composition task that can be viewed as a model transformation process, where the two input models to be merged are also the inputs for the model transformation. The Merge operator has been defined in a generic way in the MOMENT Framework but it can also be specialized by a domain-specific expert user. To provide support for extensibility in our approach, we have chosen the standard QVT Relations language [23].

mation is constituted by QVT relations, which become declarative transformation rules. A QVT relation specifies a relationship that must hold between the model el- ements of different candidate models. The direction of the transformation is defined when it is invoked by choosing a specific domain as target. If the target domain is defined in the QVT transformation as enforceable, a transformation is performed. If the target domain is defined as checkonly, just a checking is performed. Both kinds of transformations are used in our approach, as we explain in the following sections.

The Merge operator is specified in the parameterized theory MERGE{X :: TRIV}. This theory also extends other theories that provide support for OCL [7] and for the QVT Relations language [6]. OCL and QVT are standard languages for performing queries 6 and model transformations, respectively, when the semantics of the Merge operator is specialized.

A parameterized module called MERGE{X :: TRIV}, which provides the generic specification for the Merge operator. In MOMENT, the Merge operator is defined axiomatically using the Maude algebraic language. Maude allows us to specify the operator in an abstract, modular and scalable manner so that we can define its semantics from a generic and reusable point of view. The specification of the Merge operator is explained in the Section 3.4.4 and Appendix B.

The MM view is the morphism that relates the elements of the TRIV formal parameter to the elements of the SigMM actual parameter. To represent models as Sets, we map the supersort that is generated for a metamodel (ecoreNode for the example) to the sort Elt of the TRIV theory, by means of an MM view. For the example: from TRIV to sigecore is sort Elt to ecoreNode . endv .

This provides the constructors that are needed to specify a model that conform to this metamodel as a set of elements, as explained above. This fact also provides the Merge operator that can be automatically applied to models that conform to this metamodel. To enable the manipulation of UML models, they have to be represented as terms of the SpMM algebraic specification, i.e. as a sets of terms that represent class instances (by means of the constructor operators that are obtained from the classes of a metamodel).

The Merge operator takes two models as input and produces a third one. If A and B are models (represented as terms) in a specific metamodel algebraic specification, the application of the Merge operator on them produces a model C, which consists of the members of A together with the members of B, i.e. the union of A and B. Taking into account that duplicates are not allowed in a model, the union is disjoint.

Refreshments are needed to copy non-duplicated elements into the merged model in order to maintain its references in a valid state. If we merge models B and C in our case study, taking model B as the preferred one, the reference Submission of the class PCMember of model C is copied to the merged model. As the class Submission of model C has been replaced by the one from model B, the reference, which points to the class Submission of model C, is no longer valid. Thus, this reference must be updated. The update of a specific metamodel construct term is embodied by the operator Refresh.

The Merge operator takes two models that conform to the same metamodel as inputs. The outputs of the Merge operator are a merged model and two models of traces that relate the elements of the input models to the elements of the output merged model. Therefore, these traces, which are automatically generated by the Merge operator, provide full support for keeping traceability between the input models and the new merged one. The declaration of the operator is as follows:

In such cases, the user has the option to open the resulting merged model to review and update it. Merged models can be manipulated from visual editors that are integrated in the Eclipse platform. Although the merged model might be modi- fied, the traces that are generated by the Merge operator can be updated by means of other model management operators, such as the Match operator. This operator infers a trace model between two models that conform to the same metamodel by taking into account the checkonly QVT transformation that is used to refine the

The Generic Model Weaver AMW [13] is a tool that permits the definition of mapping models (called weaving models) between EMF models in the ATLAS Model Management Architecture. AMW provide a basic weaving metamodel that can be extended to permit the definition of complex mappings. These mappings are usually defined by the user, although they may be inferred by means of heuristics, as in [20]. This tool constitutes a nice solution when the weaving metamodel can change. It also provides the basis for a merge operator on the grounds that a weaving model, which is defined between two models, can be used as input for a model transfor- mation that can obtain the merged model (as mentioned in [13]). In MOMENT, model weavings are generated by model management operators automatically in a traceability model, and can be manipulated by other operators [5].

operator that is presented in this work does not take into account the order that is defined among the elements of a model by means of ordered references. Thus, when two models are merged the elements of the merged model do not keep any order with regard to those of the input models. Currently we are extending the generic semantics of the Merge operator to preserve this order relation and we are developing a QVT Relations language compiler that targets Maude code, as shown in this paper and in [6].

Alanen, M. and I. Porres, Difference and union of models, in: P. Stevens, J. Whittle and G. Booch, editors, UML 2003 - The Unified Modeling Language. Model Languages and Applications. 6th International Conference, San Francisco, CA, USA, October 2003, Proceedings, LNCS 2863 (2003),

