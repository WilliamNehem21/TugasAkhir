We show how to weaken a class of such properties, which includes both information flow and causation properties, to allow them to be applied to these sorts of abstract systems. The weakened properties ignore all pairs of inconsistent behaviour that would have violated the original property from which they are derived. We also show how to adapt existing automated tests for these properties to allow them to be used to test for their weakened counterparts instead. This enables greater flexibility in the application of these sorts of properties to compositions of nondeterministic components.

The refinement-closed property for a lack of causation referred to above is known simply as Non-Causation [10]. Non-Causation asserts that the occurrence of events from the set A cannot cause any of the events from the disjoint set B to occur. It does so by capturing whether all occurrences of events from the set B and any non-A event that precedes a B event are independent of the occurrence of events from the set A. Here, the associated Pred may be written

that comprise a set of divergence-free components 3 , {C1 ,... , Cn }, where each com- ponent, Ci , has an associated alphabet of events, Ai , that it is able to partake in, and which the only valid implementations can be constructed by composing refine-

In Section 1, we argued that pairs of behaviour that can arise only when one or more components act nondeterministically should be considered inconsistent. To be safe, we consider all other pairs of behaviour to be consistent. We now formalise that intuition.

More interestingly, perhaps, is the case of RCFNDC when applied to a system of two components with disjoint alphabets, H and L respectively. The system Sys from Section 1.4 is an obvious example. Recall that for RCFNDC, Pred can be defined as

Under these circumstances, for systems comprising just two components with al- phabets H and L respectively, we see that Pred satisfies the condition above and, hence, the weakened counterpart of RCFNDC will be satisfied for all such systems. This concurs with our earlier intuition that no information flow should exist from High to Low in Sys from Section 1.4. By symmetry, we see that this argument applies in the other direction also, for information flows from Low to High.

This further realisation agrees with the intuition that systems built as an in- terleaving of components should contain no information flows between those com- ponents. In [7], Lowe notes that such systems can fail RCFNDC, if they comprise nondeterministic components, because the system can contain refinements that are insecure. Here, we have shown how to weaken RCFNDC to allow it to properly handle processes that model systems built as an interleaving of components, by rejecting all such refinements. We revisit this idea later in Section 4.

CSP is used to describe processes that, when composed in parallel, can commu- nicate with each other by synchronising on common events. The occurrence of an event can be thought of as an atomic communication between the processes that synchronise on it. An event that is synchronised on by a set of processes can be performed only when all of the processes in the set agree to perform it and is refused otherwise.

The process P  Q represents an external choice between P and Q ; the initial events of both processes are offered; when an event is performed, the choice is resolved. P H Q represents an internal or nondeterministic choice between P and Q ; the process can act like either P or Q , with the choice being made according to some criteria that we do not model. If P offers A and Q offers B , then, unlike P  Q , P H Q can offer either A or B but not both. P d Q is the process that can act like either P or Q , except that it offers only the initial events of Q ; it can refuse the initial events of P .

