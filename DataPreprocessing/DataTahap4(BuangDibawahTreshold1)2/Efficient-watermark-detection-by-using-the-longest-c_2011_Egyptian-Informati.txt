H.264 represents an evolution of the existing video coding standards. It is developed to meet the growing needs for higher compression of moving pictures. The standard is jointly devel- oped by the ITU-T VCEG and ISO/IEC MPEG. It achieves higher bit rate and lower distortion ratio compared to MPEG-2. In this paper, the standard is referred to as H.264.

The watermark robustness problem is a battle between the embedding side and the attacking side. The watermark cre- ators embed the watermark. However, the attackers try to re- move or, at least, corrupt the watermark. An important issue is that; the attackers wish to corrupt the watermark without causing high corruption in the original media itself.

In this paper, we will extend our previous work [11]. Firstly, the watermark desynchronization problems are addressed. So, we detail the embedding and the detection models. Then, we develop the desynchronization attacks models that may be per- formed at the attacker side. We introduce the modified embed- ding and detection algorithm for solving the desynchronization attacks. The effect of each attack on video quality and robust- ness is experimentally shown. Finally, the effects of combining the LCS technique with the probabilistic model are shown.

The rest of this paper is organized as follows; Section 2 contains an overview of the previously related schemes. Sec- tion 3 contains the problem formulation and the developed models. The details of the modified algorithm are introduced and explained in Section 4. Section 5 contains the experimen- tal results and the discussion. The paper is concluded in Sec- tion 6.

In [16], the computation analysis of the longest common substring (LCS) is outlined. LCS could be computed using the generalized suffix tree. The length and the starting position of the LCS could be found in O(n + m). In the proposed algo- rithm, we only concern with the common substring length.

the frame. The function XBi is defined as the TCN value of a CAVLC block Bi. In watermark embedding process [11], the user chooses a subset b of the total blocks B; b c B The car- dinality of b is n. The blocks subset b will be watermarked. b is determined by using a user defined threshold T such that;

In general, the TCN modification decision depends on both the TCN value and the embedding bit. To conclude the embed- ding process, a block is enforced to be even block when the watermarking bit is even. Alternatively, the block is enforced to be odd block when the watermarking bit is odd.

At the attacker side, the attacker does not know the user threshold T. Alternatively, He tries to predict it. If the attacker fails in the threshold prediction process, then some non water- marked blocks may be attacked. This action causes more video distortion without much effect on the watermark itself. The predicted threshold, PT, is used to perform one of the following attacking scenarios. These scenarios aim to remove the water- mark entirely or at least corrupt it. The watermark corruption increases the difficulty of watermark detection. The attacker tries to minimize the synchronization between the extracted watermark and the reference one. However, the watermarking attacks increase the resulted video distortion. So, the attacking scenarios are discussed and analyzed in terms of watermark robustness, bit rate, and distortion.

Scenario 1: In this scenario, the attacker aims to eliminate the watermark entirely. The attacker predicts a threshold (PT). So, the attacker converts the odd blocks to even blocks and vice versa. This attack negates the watermark. Watermark negation is the conversion of the watermark values from 1 to -1 and vice versa. The attacked blocks have the condition that;

Scenario 4: In this scenario, we assume the attacker knows the threshold T. The attacker tries to convert some water- marked odd blocks to appear as watermarked even blocks and vice versa. In this case, the lengths of the extracted water- mark and the reference one are identical. So, the correlation could be applied. However, the correlation value depends on the number of the attacked blocks in this case.

computed between the extracted watermark and the negation of the reference watermark. If one of the two lengths is more than 5% of the reference watermark length, then the water- mark is detected. This may be clarified as; the embedding algo- rithm embeds one of two watermarks (a watermark and its negative). In the detection side, the detector tries to match the extracted watermark with any one of the two watermarks. If the negated watermark and the extracted watermark are matched using LCS, then we could easily conclude that, the embedded watermark is attacked. This idea is an analogy to the idea of public and private keys in cryptography systems.

The proposed algorithm is valid for solving the desynchro- nization problems of all types of digital media (image, audio, and video). In all media types, the watermark is extracted from the watermarked media. So, the embedded watermark se- quence is compared with the detected, possibly attacked, se- quence using the proposed algorithm. The watermark is still be detected even if the attacking percentage is 95% of the watermarking length. Moreover, if the watermark bits are con- verted from ones to zeros, or vice versa, then the watermark is still be detected using the probabilistic embedding algorithm.

So, in the modified algorithm, we do not care about the val- ues of the watermark itself. We care about the contiguous parts of the watermarks. The common contiguous string length is computed between the extracted watermark and the reference one. Also, the common contiguous string length is

However, the attacker could only modifies the TCN value within the above two restrictions as we previously shown in the attacking scenarios. In this case, the synchronization at- tacks occurred. However, the proposed system is designed to solve these types of attacks. Moreover, the proposed algorithm solves the problem of different lengths in watermark detection. The algorithms in [12,17] and [18] cannot solve the problem. They are using the correlation concepts. These concepts cannot be applied when the watermarks have different lengths.

blocks will appear as un watermarked blocks. In fact, the at- tacker does not know the watermark embedding locations. Alternatively, he tries to predict these locations by predicting the threshold. After predicting the threshold PT, the attacker attacks some blocks. The TCNs of the attacked blocks are con-

The fourth column represents the number of the attacked blocks by attack scenario 2. The attack type (partial or full) is illustrated in the fifth columns. In this column, partial means that: only some watermarked blocks whose TCN > PT are at- tacked. However, full means that, all blocks whose TCN > PT are attacked. The attacking percentage is shown in the sixth column. The PSNR value between the attacked video and the original video is shown in the last column.

The simulation results show that, this percentage always causes higher video degradation. So, the attacker could not attack the video up to 95%. Moreover, we suggest to choose a threshold T = 5 in watermark embedding. This threshold makes a good adjustment for avoiding scenario 2 and scenario 3. Moreover, this threshold preserves the resulted watermark quality.

The results of attack scenario 4 show that, the attacked blocks could not affect watermark synchronization. Alterna- tively, it may decrease the correlation values. In this case, the watermark is still be detected when using the ordinary correla- tion. If the watermark is highly attacked, then the correlation va- lue is very low. If the attacker tries to attack more blocks, the resulted video is highly attenuated. If the watermark is entirely attacked, then LCS value is low. Alternatively, the probabilistic model is used to solve the problem. The extracted watermark is negated to restore the original watermark.

