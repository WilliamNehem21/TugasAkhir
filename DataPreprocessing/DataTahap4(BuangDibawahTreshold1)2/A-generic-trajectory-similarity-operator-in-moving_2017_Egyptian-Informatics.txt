Abstract Evaluating similarity between trajectories of moving objects is important for wide range of applications. The existing similarity measures typically define some meaning of similarity and propose algorithms for computing it. We think that the meaning of similarity is application depen- dant, and should only be determined by the user. Therefore, there is a need for a generic approach where users can define the meaning of similarity. In this paper, we propose a parametrized similarity operator, based on the time warped edit distance, where the meaning of similarity is generic and left for user to define. Our proposed operator is implemented in SECONDO and evaluated using both syn- thetic and real datasets. The results were promising and as expected.

movement history in the form of the so-called trajectories. Due to the large amount of movement data, there has been a deep interest in proposing new methodologies in classification, clustering, indexing, approximating and simplifying such data. All these works collaborate toward building a generic Moving Objects Database system (MOD).

There are two flavors of MOD. The first focuses on the current movement of objects and the prediction of the near future values [1]. In that flavor no historical movement data are stored. In the second flavor, historical movement data are stored and represented. These systems focus on query- ing and analyzing historical movements [2]. In this paper we focus on the second flavor which is called trajectory databases.

The rest of paper is organized as follows: Section 2 describes the motivation and the related work in the field of measuring sim- ilarity between trajectories. In Section 3, we give a background on MODs and discuss in depth the TWED similarity measure. In Section 4, our proposed operator is presented with a detailed description. Then, our implementation, experiments, and the out- put results are discussed in Section 5. Finally, Section 6 concludes the paper, and sets ideas for future research work.

There exist in the literature measures for evaluating the simi- larity between trajectories. They can be classified into spatial, spatiotemporal and temporal similarity measures [4]. Spatial measures focus on measuring similarity based on the spatial dimension while ignoring the time dimension. Spatiotemporal similarity considers both spatial and time dimensions. Tempo- ral similarity measures focus only on time dimension.

All previously mentioned similarity measures implicitly define the meaning of similarity. Some assumed it as the speed or direction or time interval of the moving objects while others worked on the raw data of trajectories or combination of them. They also defined what distance functions are used for assessing similarity in their implementation, like L1-norm.

The proposed similarity operator in this paper is based on the time-warp edit distance [16], and on the moving objects model in [2]. It is also fully implemented in the open source MOD SECONDO [24]. In this section, these works are presented as a necessary background for the rest of the paper.

We adopt the representation of a moving object trajectory as a discrete time series. Thus discrete time series similarity algo- rithms can be used. By far, varieties of elastic matching meth- ods have been proposed, e.g., edit distance [7], dynamic time warping [14], edit distance with real penalty [15].

The Lambda and Stiffness values are dataset dependent. They can be learned using cross validation such as leave one out procedure in any dataset [16]. Using leave one out proce- dure, the stiffness parameter is adapted as follows: we use the dataset to select the best (c) value as well as the best k value from a set of c and k values, namely the ones leading to the minimal error rate on the dataset, according to a leave-one- out procedure (that consists of iteratively selecting one trajec- tory from the dataset and then considering it as a test against the remaining trajectories within the dataset itself). After eval-

Alternatively, if the user knows enough about the data, the values of lambda and stiffness can be intuitively set. Since k is the deletion penalty, it needs to be set with the value difference threshold, after which two values cannot be considered a match. For example, two coordinates on a road network can- not match if they are more than 50 m apart (assuming a max- imum GPS error of 50 m). In such a case, lambda should be set to 50 m. The intuition is that below 50 m distance, a match is more favored than a deletion and the other way around.

what is the maximum expected/possible value difference in the dataset, and what is the maximum expected/possible temporal difference. The stiffness value is then set to the division of the former over the later. In such a way, the penalties of value dif- ference and temporal difference will have similar effects on the overall similarity. Thus, none of the two scales will dominate the other.

reside. With its genericness, it is possible to implement the var- ious database models, such as object oriented, XML, and the relational model. It consists of three components: the kernel, the query optimizer, and the graphical user interface (GUI). The Kernel is the place where new algebra modules, new types, and new operators can be implemented.

and non-spatial moving objects. The mpoint type, for instance, represents a moving point object that changes its location with time (e.g., car, train). An mreal represents a real value that changes with time (e.g., temperature, speed of a car), and so on.

The feed operator loads a disk relation and converts it into an in-memory tuple stream. The consume operator does the opposite. The filter operator excludes the tuples that do not fulfill its Boo- lean condition. The signatures of these operators are as follows:

TWED based similarity operator for evaluating the similarity between pairs of moving objects represented in the previous form and called it TWEDistance. It accepts a pair of moving objects, and yields the cost/distance of converting one of them into the other. The operator is carefully designed to allow the user defining the intended meaning of similarity through the parameters. Formally, let Dv denote the domain of a type v. Our TWEDistance operator is a mapping:

same type. These moving objects may represent the spatiotem- poral route of cars, their speeds, their headings, etc. Thus, the user is able to pass his attributes of interest on which the sim- ilarity should be evaluated. The fifth parameter is a user defined function, that accepts a pair of instances, from the two input trajectories, and computes the cost of matching them. Assume, for instance, the two input trajectories are of

For each tuple, the similarity of its pair is computed based on the similarity of their heading. The goal of this experiment is to test the correctness of our implementation. A pair of trains going in the same direction, should be more similar than a pair of trains going on opposite directions. Moreover, a pair of trains on the same direction, that are close in terms of the trip start time, should also be more similar than a pair whose temporal difference is bigger. We run this experiment twice: once with the stiffness is set to zero, and once with the stiffness is set to one.

A zero stiffness allows for infinite temporal elasticity. In other words, the temporal difference does not affect the dis- tance. So the distance is affected only by the differences in the heading. The query used in the first run of this experiment is as follows:

We then self-joined the DisturbedNewTrains relation, so that every tuple will contain a pair of trains. The main query of this experiment applied the TWEDistance operator to every pair of trains to measure their similarity based on their spatial route. The goal is to check whether the replicas appear similar to their original, than other trains.

In this experiment, it is similar to the one above, except that it takes time into account. We used the TrainPairs relation that was used in the direction similarity experiment. The TWEDis- tance was measured on the pairs of trains. The stiffness value is again chosen to normalize the scales. The used Query is as fol- lows:

In this last experiment, we run a classification task on a real data- set, to assign transportation modes for GPS trajectories. The Geo-Life dataset, used in this experiment, has many transporta- tion modes including car, bus, train, bike, walk. This experiment is applied on 2390 trajectories, all of which were observed in year 2008. These modes were grouped into two classes: driving and non-driving. The driving class included the modes car, bus, train, subway and taxi. The non-driving class included walk and bike. The classification was done using the leave-one-out method, to each trajectory in turn. That is, the class label of the chosen trajectory is predicted to be the class label of its k-nearest neighbor, based on the given distance (TWEDistance Operator result). The head K-nearest trajectories are fetched and the predicted class label is the dominant class from the k trajectories. If the prediction is correct, then it is a hit; other- wise, it is a miss. The error rate that was measured is the ratio

As mentioned before, there are variety of similarity measures that define implicitly in their implementation the meaning of similarity regardless of user perspective. That was a research gap in the field of trajectory similarity. So, we proposed a parameterized TWED based similarity operator in secondo (one of the MODs) and named it TWEDistance. It takes a list of parameters which are two moving objects similarity mean- ing representation, TWED Stiffness, TWED Lambda and a user defined distance function respectively. We proved effi- ciency of our operator through set of experiments on real and synthetic datasets. Different representations of similarity meanings such as speed, direction and raw route data were passed while considering time once and ignoring another. This operator is based on the discretized form of a trajectory, while the nature of a trajectory is its continuity as mentioned earlier in the paper. So one of the future work is the need for a sim- ilarity measure and an operator for evaluating similarity based on the continuous form of a trajectory.

