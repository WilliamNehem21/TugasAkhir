In this paper, we shall focus on a restriction called hard interaction nets where the geometry of the net is invariant during reduction and propose a universal system (called hard combinators) for such systems. The translation of an arbitrary hard interaction system into hard combinators has a quite different character from the corresponding translation for interaction nets where the key technical point is im- plementing the duplication of some nets. 4 Here we shall represent nodes as binary words and calculate the transformations with boolean functions. The name hard interaction nets is well-chosen, since they are a form of abstract hardware. In this perspective, it is interesting to sum up the important rules and give the basic com- ponents that can be used to construct asynchronous circuits. Indeed, it is possible to implement multiplexors, registers, memories and ALUs with hard combinators

The difference between the principal port and the auxiliary ones is essential since rewriting (or interaction) can be applied only on cuts. In other words, the left member of an interaction rule is composed of two cells connected by their principal ports. Interaction consists in relabeling cells and changing the orientation of the principal ports; we shall say that the cell is turning. To sum up, an interaction rule is pictured as follows,

Remark 5.3 According to the previous definition, an invariant net is a pair com- posed of a net and a partition of its free ports and there may be several invariant nets corresponding to a unique net. However, we also say that a net is invariant when such a partition exists.

In the uniform subsystem, we have defined constants, pipes, duplication and plus. So one may wonder if it is possible to define product as well in this subsystem. The answer is probably negative. Indeed, the plus operation (binary xor) is weaker than binary addition that is computing the sum and but also the carry. Moreover, one can prove that is impossible to build a uniform system that is universal.

In the same way, we can define invariant nets with several inputs and outputs for vectorial boolean functions on several inputs. Eventually, those invariant nets can be used to build the corresponding functions on binary words. To that purpose, the nets spit and merge can be composed to build some kind of parallel/serial adaptators.

The system we propose seems to be a good candidate for a universal hard system. However this work is a first step in the domain of hard interaction nets. Indeed many questions related to fundaments as well as applications remain still open.

Although (general) interaction nets cannot be translated into hard interaction nets, it is interesting to see if there could be a compilation process for some subclass of interaction nets. Interaction nets would be the high level program- ming language whereas hard interaction nets would be the target (low level) lan- guage. In the same spirit, interpreters have been developed for interaction nets. Would it be possible to physically implement components for hard combinators? In other words, we can consider hard combinators as components for electronic asynchronous circuits?

