Many properties of a system may not be obvious just by a quick inspection of the corresponding Event- B model. Users typically rely on animation, scenario analysis, and inspection of state transition graphs for discovering certain behavior of the system. We propose a methodology for generating a hierarchical representation of the system for visualising Event-B models. Our representation is succinct and it provides multiple views to aid in better comprehension of the Event-B models.

In Event-B, desired global properties of the system are specified in the form of invariants and the invariant preservation proofs ensure that these properties are maintained by the system after execution of any enabled event[1]. However, after execution of an enabled event, it is not obvious which events will be enabled or disabled next. Users typically rely on animation, scenario analysis, and inspection of state transition graphs to grasp the behavioral aspects of the system. The ProB animator[9], with the aid of a model checker, can generate graphical visualization of the state space of a B machine. However, because of the flat (non-hierarchical) nature of the ProB state space representation, it becomes difficult to reduce the complexity of the state space graphs even after employing the state space reduction techniques[10]. In general, hierarchical state transition diagrams are found to be useful in reducing the complexity of the state transition diagrams [6].

To represent a discrete event system, we use a Hierarchical Abstract State Tran- sition Machine (HASTM) representation which uses the concepts of hierarchical states and guarded transitions similar to those in statechart diagrams [6]. In HASTM, state-space is arranged in the form of a tree (which we call a state- space partition tree) and the root node of the tree represents all the valid states of the system, i.e., the states defined by the conjunction of all the invariants.

For any transition t in H, the action t.Act is the same as the action of event t.Evt in M . The action of the init transition in H is the same as the action of the init event in M .

The HASTM representation is for a specific Event-B model in the Event-B refinement chain. Each Event-B model in the refinement chain will have a separate HASTM representation. In this work, we do not establish a link be- tween HASTM representations corresponding to abstract and concrete Event-B models.

We first define a Primitive HASTM representation of an Event-B machine which is a very simple HASTM with a single abstract state I. Consider the Event-B machine M described in Section 2.2. Let r be the number of events in M .

The proof obligations for all the transitions in the primitive HASTM are the same as those of M . It is easy to verify that Primitive HASTM of M satisfies the conditions mentioned in section 2.2, and hence represents M .

strengthen the post-state of the transition to Y '. Now with Y ' as the new post state, we repeat the above step till we fail to discharge the proof obli- gation or we reach a basic abstract state. The algorithm is given in function strengthenPostState in Algorithm 1.

For this transition, pre-state I along with the transition guard (doorOpen = T ) neither imply (dirUp = T ) nor imply (dirUp = F ). Hence this transition is not amenable to partitioning of I with predicate (doorOpen = T ). According to step c, we now have two choices: i) Do not modify the transition ii) Split the transition into two new transitions. Here we opt for the later choice and create two new transitions as follows.

We start with a primitive HASTM of M and then recursively partition the abstract state I. At each basic abstract state in the state-space partition tree, further partitioning predicate is selected to maximize the number of events amenable to partitioning with the selected predicate. This allows us the strengthen pre-state of these events without any increase in the number of transitions in the generated HASTM.

A lot of work has been done [8,11,12,13] on deriving formal B models from the speci- fications in visual representations(mostly UML). Our approach is the reverse of this. We start from an existing Event-B model and build multiple visual representations that focus on different behavioral aspects of the system.

In this work, we present a methodology for visualising Event-B models by using Hierarchical State Transition Machines (HASTM). We specify the conditions that a HASTM should satify in order to represent an Event-B machine. We then present an algorithm for automatic generation of a HASTM representation from a given Event-B model and a set of partitioning predicates. With the help of examples, we demonstrate that multiple HASTM representations aid in grasping certain behav-

