Given a mathematical model for the MWNPP, a branching technique by inser- tion of Local Branching Constraints is proposed in [3]. These constraints are defined from an initial solution xs, and determine how close or far a feasible solution can be of xs. This technique allowed the proposition of many exact and approximate meth- ods for the solution of combinatorial optimization problems. One of these methods is the Variable Neighborhood Descent Branching (VNDB), described in [1], which defines its neighborhoods using Local Branching Constraints.

The analysis of the computational time spent and the upper bound for each in- stance shows that VNDB, with a reasonable number of neighborhoods, finds results as good as the standard CPLEX solver and, in addition, in a shorter run time. The article is organized as follows. Section 2 presents the problem addressed and states a mathematical model for MWNPP. Section 3 introduces an analysis of local branching constraints. Section 4 addresses the proposed VNDB method and evalu- ates the particularity of its neighborhood in rings. Following, Section 5 presents the computational tests performed for the comparison between the algorithms. Finally, Section 6 concludes the paper, including a critique about the found results and the proposed scope.

Algorithm 1 summarizes the above explanations. The stopping criterion is the exhaustion of the N neighborhoods in a given solution or by the maximum number of iterations Itermax (or maximum time). In practice, the function solve() also has a time limit to resolve the VNDB subproblem. Then there must be conditional deviations for all possible solution status: {feasible, optimal, infeasible}.

Computational experiment results show that VNDB never reaches the maximum time available for execution due to neighborhood exhaustion and a large number of solved subproblems with non-optimal status. Despite this, VNDB has statistically as good results as the same MIP running for a shorter time interval. The only exception is its performance in instances where k = 3. A drawback found in the computational experiments is that the CPLEX solver does not seem to set time in a deterministic way on a multi-core processor. This causes some problems to take up to 4500 seconds more in MIP execution.

