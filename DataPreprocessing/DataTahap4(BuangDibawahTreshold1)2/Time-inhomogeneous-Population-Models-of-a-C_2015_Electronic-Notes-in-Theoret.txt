Organisations such as research institutions and universities often increase utilisation of their office worksta- tions by deploying a high-throughput cycle-stealing distributed system. Such systems allow users to submit a large number of computing tasks into a central pool. The system observes activity of workstations and continually assigns tasks to idle machines. When a user becomes active on the machine, the scheduler in- terrupts the task execution. This approach can significantly increase utilisation of the resources. However, it can also lead to wastage of computing cycles if tasks get interrupted too often.

In this paper, we develop a detailed Population Continuous Time Markov Chain (PCTMC) model of the whole system that accurately captures the contention between the interactive users and high-throughput tasks. The PCTMC framework is well suited to the inherently time-inhomogeneous nature of the user behaviour and allows to capture a large number of performance and energy consumption metrics. We fit the PCTMC model to real data and propose a methodology to forecast cluster availability in the near future. We show how to use historically collected and live data to parametrise the PCTMC model and use efficient fluid analysis techniques to predict the desired metrics. Additionally, the fast analysis enables exploration of various what-if scenarios. We demonstrate a working implementation of the method using the existing GPA tool for analysis of PCTMC models. We argue that this methodology could allow the system maintainers to optimise the energy and performance parameters of the system. Moreover, it would benefit the users who could use the model forecasts to better distribute and plan their large scale computations.

The effects of cycle-stealing and of similar computation distribution schemes have been extensively researched in the past. Kelly et al [8] present a multi-class closed queueing model of a cycle-stealing system. Estrada et al [2] developed a detailed simulation by emulating real software components of the BOINC volunteer com- puting middleware to investigate different scheduling policies. Our fluid analysis approach is related to the work of Gast et al [3] describing a mean-field model of work-stealing algorithms in computational grids. Recently, Guenther et al [4] have proposed a forecasting algorithm using PCTMC models in the context of bi- cycle sharing schemes. They have shown a comparable performance to traditional time-series analysis techniques.

These possible extensions give a good idea about the suitability of the PCTMC framework to our problem. In Section 4, we define a PCTMC model where compo- nents represent computers in the system, interactive users (those using the machines in usual way such as for web browsing etc.), computing tasks and the central sched- uler. Each of the components has a number of states that represent the possible events in the system. Due to a non-uniform resource pool and types of tasks, the model also captures connections between different resource and task types.

In total, around 1400 machines are taking part in the HTCondor cluster. These are workstations from various classrooms and spaces around the campus. There is a large variety of usage patterns; some machines are used for teaching and are phys- ically inaccessible outside teaching hours, some belong to 24 hour access facilities. Some of the machines are located in halls of residence and experience higher use during weekends.

The HTCondor cluster is accessible to a large number of researchers across different departments. During the monitored period, the number of jobs submitted to the HTCondor pool has been small relative to the size of the system. This has increased since and we are hoping that a reliable forecasting tool would enable a larger variety of tasks to be run on the cluster.

HTCondor is able to keep detailed information about the state of the worksta- tions and submitted jobs, storing every timestamped state change with additional information. Because the PCTMC framework represents the system at a more ab- stract level, we were able to aggregate this data into a much more compact form. Instead of storing information about individual workstations, we are only inter- ested in the number of workstations. To capture the variety of different patterns of user behaviour and difference energy profiles of the hardware, we maintain separate populations for classes of workstations (teaching labs, library etc.).

One way to fit a PCTMC model of the user behaviour is to consider individual user arrivals and departures. These represent changes in the PCTMC populations and therefore correspond to successful transitions in the model. Each time between two successive user arrivals will be a sample from the exponential delay corresponding to the transition. We can take the samples from a time window around a time t (for example one hour) and use these to estimate the transition rate parameters for the model at time t. We can repeat this process to obtain the parameters throughout the whole period (one week).

Simple statistical tests show that the delay distributions in our data are not exponential. However, experience shows that they can be accurately approximated by multi-phase Coxian distributions. These can be included in the model in the form of new intermediate states of the PCTMC components.

The components in the model are workstations, interactive users and HTCondor jobs - both in the system queue and assigned onto workstations. For a better fit to the data, we consider a number of different workstations/user classes based on the opening hours and teaching patterns of their respective rooms. We also consider a number of different job classes. This is important when modelling hypothetical job submissions. For example, one class can consist of normal job submissions which

Each machine becomes available to accept HTCondor jobs after a short delay following a user departure. Jobs are randomly assigned onto workstations. When a user acquires a machine serving a job, that job gets cancelled and moved back into the central queue. This is a simplification for illustration purposes. The model could also cope with a more realistic behaviour. For example, a standard strategy in HTCondor systems is to suspend a job rather than evict it when an interactive user acquires the machine. The job is held optimistically on the machine before being evicted. If the user leaves during this period, the job is resumed on the existing machine.

model and is able to include the time inhomogeneous rate data. GPA then auto- matically generates the system of ODEs, which would otherwise be too complicated to derive manually. GPA numerically solves the ODEs and uses the solution to provide predictions of the metrics in Section 2.2 for the forecast period. We repeat this at every successive non-overlapping forecast period throughout a sample day. In real applications, this analysis could be done at any point in time to predict the immediate future for the duration of the forecast period.

We demonstrated the technique on a real-life dataset collected from a year long deployment of HTCondor at the Newcastle University. We have proposed an aggre- gation of HTCondor logs which can be used to fit parameters of the PCTMC model. To cope with the non-exponential nature of the system, we fitted multi-phase Cox- ian distributions to the arrival and departure delays. We use the PCTMC model in a simple forecasting algorithm. At each point in time when a forecast is desired, we fit parameters of the model to historical data from the same time during the previous week. This way, we obtain a time-inhomogeneous PCTMC model for the forecast period. We extend the model with hypothetical jobs that allow us to evalu- ate the possible effect of a user submitting a large batch of jobs. We have developed a working implementation of the technique using the existing GPA tool [12].

Our ultimate goal is to develop a tool that can be deployed together with the HTCondor system. The tool would regularly aggregate trace logs and automatically create and fit PCTMC models. The predictions from the models would be used to suggest to the users the best possible way to submit their jobs. For example, users might have a choice between different granularity levels of splitting their high- throughput work. The tool could suggest an optimal split based on the predicted resource availability such that the wastage caused by interruptions from interactive users is minimised. The tool would also give users an idea of the expected job duration and thus help them to better plan their computing workflow. The models can also be used by the maintainers of the system to explore different parameters and scheduling policies in order to minimise the running costs while maintaining a good throughput for the HTCondor computations.

