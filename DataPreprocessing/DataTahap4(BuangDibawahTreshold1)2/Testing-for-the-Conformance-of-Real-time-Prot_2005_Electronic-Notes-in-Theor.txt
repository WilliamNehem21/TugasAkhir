The priority inversion problem arises when prioritized processes concurrently attempt to enter crit- ical sections. This phenomenon results in extremely pessimistic estimations of worst case response times for real-time processes. Various protocols against priority inversion have been proposed in the literature and are available at system call level of operating systems and run-time executives. They belong to two major families of protocols: the priority inheritance protocols (PIP) and to the priority ceiling protocols (PCP). These protocols have in common that they allow to derive more optimistic worst case response times.

In contrast to the importance of this predictability aspect in the context of time-critical appli- cations a lot of PIP- and PCP-implementations are not correct and permit the violation of time bounds. This article presents an effective and flexible tool set applied here for the validation of the implementations of protocols of the PCP-family. Besides the manual setup and instrumentation major parts of the black-box validation process are executed automatically.

A large number of operating systems and run-time executives are contending for the market of real-time and/or embedded applications. In this context the major strategy of advertisement is to demonstrate the completeness in fulfilling the essential real-time features. One of these is the availability of one or more protocols against the phenomenon of priority inversion.

The paper has its emphasis on the formal protocol description, the compo- nents of the tool set operating on this description and the validation of protocol implementations, here exemplary explained with the PCP. Section 2 presents the formal description which has a substantial orientation towards a modular tool set for validation purposes. Additionally in section 2 it is mentioned how the formal description is used for protocol verification. Coarsely the process to validate protocol implementations is subdivided into two major steps, the generation of an execution space for parallel processes mapping to test suites in section 3 and the execution of instrumented real-time processes and their evaluation in section 4. The final section 5 assesses the results achieved so far

The reactive aspect of the protocol is specified by statecharts. Interaction in the case of these protocols happens between the active objects which are the processes and the scheduler. Based on a DTD statecharts are described in a unique notation, representing their nested structure, the states and the tran- sitions from one state to another. E.g. for the method sigEnterCS from the

Up to this point the class diagrams and statecharts specify the syntax of interactions between the processes and the scheduler. The semantics, particu- larly the prevention of forbidden interleavings, has to be expressed by a third means, here denoted by Z-specifications. Z was chosen for two major reasons, first the ease to specify the semantic behavior of the protocols in a mathe- matical fashion which also can be used for formal proofs. The second reason comes from the fact that there are several interpreters available to execute Z-specified protocols. So, a Z-interpreter is a valuable tool for the validation of protocol implementations.

Conforming to the structural and reactive models the Z-specification intro- duces the functional basis, here denoted PCPSystem for the PCP. The whole description is called schema and is subdivided in a syntactical part, defining the sorts and the kinds of mappings between them. For instance here is indi- cated that P is a finite set of processes and that priority is a mapping giving any process a unique priority. The following part is of semantic nature defin-

The invariant PCPSystemInv is strong enough to prove the fundamental properties of the system under the priority ceiling protocol, e.g.: A process p1 owning a critical section c1 will not be blocked under the PCP (correspond- ing to Lemma 9 in [10]). This property can be derived immediately from PCPSystemInv , because those processes (like p2) which are potentially able to block p1 (expressed by relation uses) are not allowed to own any conflicting

5 These diagrams are generated automatically. They indicate the actual priority of the run- ning process. These priorities depend on inheritance, due to the blocking relations between processes. Blocking is introduced by the unsuccessful acquisition of critical sections. To make this evident the operations enter and leave are depicted by ascending and descend- ing rectangles with the name of the critical section inside. An open, ascending rectangle indicates that the acquisition a critical section was not successful and led to a blocking state for the attempting process.

This paper describes a complex tool set for conformance testing applied to the PCP. Particularly the components for compression and reduction as well as for the evaluation have a prototypical character so far. Nevertheless several striking results are already available. The one above with Solaris as IUT is more or less representative for the general strategy to use the PCP as an attractive label and to implement some weaker protocol, here the highest locker protocol. The pitfall is that in general application programmers are

