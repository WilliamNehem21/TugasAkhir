Controller Area Network (CAN) is a high-speed serial bus system with real-time capability. In this paper, we present a formal model of the CAN bus protocol, mainly focusing on the arbitration process, transmission process, and fault confinement mechanism. Moreover, 11 important properties are formalized in terms of the protocol. Based on the verification tool UPPAAL, we describe the system model and properties for performing verification work of the CAN bus protocol. The verification results indicate that some properties are not satisfied in CAN bus system, most of which are caused by the starvation and bus-off nodes. On this basis, the dynamic priority scheduling algorithm and bus-off recovery mechanism are applied, which indicates that some problems can be solved on the application layer.

by Bosch company [4] and then established as the international standard in ISO 11898 [5]. Multi-master broadcasting is the key feature of this serial bus system. All nodes can transmit data when the bus is free, and the collision of multiple simultaneous transmissions is solved by priority-based arbitration algorithm. The identifier of a message resolves the priority. A transmitter broadcasts a message to all nodes and each node decides whether the data is relevant according to the identifier received. One main feature is fault confinement mechanism. Each con- troller of CAN detects errors and takes appropriate measures to guarantee the data consistency and reliability. The interframe space is another characteristic. Data and remote frames are separated from the previous frame by an interframe space, during which no node has access to the bus. CAN bus is widely used in safety critical automotive electronics due to its real-time capability, low cost and reliable error confining mechanism.

To ensure the correctness of CAN protocol, formal methods based on the rigorous mathematical theory could be an effective and practical approach. The adoption of formal notations with a defined mathematical meaning enables the model to be expressed with precision and unambiguity. The properties that the protocol should exhibit can be represented in mathematical framework as well. Thus the correctness can be checked via exploring all states and transitions or mathematical proof. There are also some automatic or interactive tools to facilitate the process like SPIN [2], NuSMV [12], UPPAAL [14],Coq [3] among many other excellent tools.

CAN follows the abstract Open System Interconnection (OSI) reference model, and its protocol mainly defines the data link layer. In the first place, we present a formal model of the CAN protocol and the verification results of its properties based on timed automata [17]. We employ UPPAAL to model the CAN system and implement not only the arbitration process and the transmission process, but also the fault confinement mechanism and the interframe space characteristic. Be- sides, 11 important properties extracted from the CAN standard are also verified in UPPAAL.

and then shows the four submodels. Section 4 presents the properties and the verification results, including the analysis. Additionally, in section 5, we illustrate the modeling process of application layer and show the changes to the verification results. Comparison with related work and conclusion are given in section 6 and section 7, respectively.

The error frame is composed of two fields. The first is the error flag, which is 6 consecutive dominant (error-active node) or recessive (error-passive node) bits. The second is the error delimiter, with a fixed format of 8 consecutive recessive bits. But the recessive bits can be submerged by dominant bits sent to the bus at the same time. Any node can broadcast an overload message to delay the next transmission. Its format is the same as the active error frame, but the overload frame only occurs right after the last bit of EOF, while the error frame may occur whenever an error is detected.

The method used to solve the collision is the Carrier Sense Multiple Access/Collision Avoidance (CSMA/CA) mechanism. All nodes constantly monitor the bus in time. The nodes attempting to send messages start to write to the bus bit by bit when the bus is idle. The dominant bit (0) overwrites the recessive bit (1), which means zero has the higher priority. The data monitored on the bus is compared with the data sent by a transmitter. If one node sends a recessive bit but reads back a domi- nant bit, it means some other nodes are transmitting messages with higher priority identifiers. This node stops sending bits and immediately switches to listening-only mode.

Messages with errors should be discarded and retransmitted when the bus turns to idle again. Fault confinement mechanism is proposed to stop a node which causes too many faults from developing into a permanent malfunction. A transmit error counter (TEC) and a receive error counter (REC) are assigned to every node. If the transmitter detects an error, the corresponding TEC increases, while the receiver detecting an error increases its REC. The RECs of all nodes receiving an error frame also increase. However, if a message is successfully transmitted and received, the TEC of the transmitter and the REC of receivers decrease. A node starts in the error-active state with its counters initialized to zero. If any TEC or REC reaches a certain value (128), the node enters the error-passive state, in which a node is unable to broadcast an error flag but writing to the bus is still possible if no error-active node wishes to write to the bus. If the TEC of a node reaches the maximum value (256), the node should be disconnected from the network. The node can return to the network only via a software reset.

Data frames and remote frames should be separated from preceding frames by a field called interframe space. But overload frames and error frames shall not be preceded by it. The interframe space contains the bit fields intermission (three recessive bits). But for error-passive nodes which have been the transmitter of the previous frames, eight recessive bits shall be sent following the intermission before trying to transmit its next message. However, the error-active node and the error-passive node that is not the transmitter of the previous message do not need to wait, which means these nodes may have already granted access during that period. The bus becomes idle after the interframe space, during which any node may access the bus.

In our models, we use UPPAAL to model the specification of CAN bus protocol. In this section, we only model the CAN bus and its properties based on the ISO standard. However, to analyze its performance on the application layer, we further apply the dynamic priority algorithm and the bus-off recovery mechanism and verify the properties in the next section.

The arbitration solves the collision based on the message priority. Either data frame or remote frame can be randomly generated at first, then the identifiers of messages attempting to be transmitted will be compared. Once the winner is decided, the transmission process starts, which is synchronized by channels. Fur- thermore, the arbitration also deals with the problem of error-passive nodes trying to send the next message.

In this CAN model, there are three nodes named 0, 1, 2 which transmit messages with identifiers 1, 2, 3 respectively. In a practical CAN system, the data is sent bit by bit, and monitored at the same time. However, to abstract the process, the frame is simplified as an integer, representing the identifier of a frame. In addition, the bus is declared as an integer variable bus, and the writing and reading process of data is abstracted as the assignment to the bus variable and the reading from it.

During the reading process, one or more errors may occur. The controller triggers the channel error[id] as soon as any error is detected and the array error detect[id] turns to 1. The occurrence of error, as well as the the broadcast of an error frame, is illustrated in the transceiver model. (See Section 3.5)

During a whole transmission process, an ideal situation is that a message is successfully sent and received by all nodes and all nodes return to the idle state. However, errors may occur during the transmitting process, after which an error signal is broadcast. In addition, an overload frame may be sent and broadcast so that all nodes wait for additional time before the start of next transmission process. After all these processes are completed, all nodes return to the idle state and prepare for the next transmission.

In this model, the variable error counter is declared to record the errors. The error counters of all nodes are initiated to 0. For every node, on receiving the error frame, the variable error counter will increase by 1. However, if no error occurs, all nodes decrease their error counters in function error counter decrease(id). If the error counter reaches 4, the error passive[id] is set to 1, turning to error-passive state. Of course, the error counters will decrease if a message is successfully sent and received. And the error passive[id] can be set to 0 once the

error counter is less than 4. But a node turns to bus-off state if its error counter reaches 8. We assume the maximum limits for error-active nodes and error-passive nodes to be 4 and 8 respectively in order to simplify the models. For a bus-off node, the channel busoff[id] is triggered.

For the purpose of verifying whether the models obey the specifications and re- quirements of CAN protocol, 11 properties based on the standard are proposed. All these properties are specified using UPPAAL property specification language. The verification results and analysis are provided as well.

Bus Access Method (BAM): The highest-priority message gains access to the bus. This property is derived from section 6.3 of the CAN standard, to verify that it is always the highest-priority message that gains access to the bus. It can be specified as

Identifier Disjointness (ID): It is impossible that an arbitration takes place between data messages having identical identifiers. This property is mentioned in the standard that CAN system cannot solve the collision of two messages with the same identifier. So it is verified to ensure identifier exclusion. It can be specified as

As for the SF, a node may never win the arbitration and successfully send its message when there are always other nodes sending messages of higher identifiers at the same time. A node attempting to send a message may never succeed because of its low priority. That is why this property fails the verification. The RDR cannot

In summary, the event-triggered and priority-based mechanisms of CAN lead to the starvation problem. To solve the problem, Time Triggered Controller Area Network (TTCAN) [6] [9] [10] can be used as it is time-triggered. Another problem results from the fault confinement mechanism. This mechanism is designed to ensure performance reliability and stop ill-performed nodes from sending and receiving messages. However, the verification results indicate that the error-passive and bus- off nodes may cause the data loss or data inconsistency.

In our models, the algorithm is applied to the arbitration model by a function called dynamic compare(). Two variables failure counter and dynamic priority are declared for each node. We assume that the dynamic prior- ity is promoted by one when the failure counter reaches three, which means the message has lost the arbitration for three times. When the message finally gains access to the bus, the failure counter is reset to zero and the dynamic priority turns back to the initial number.

As for the ES and BAM, they cannot pass the verification because of the error- passive nodes. The ES refers to the property that errors can always be flagged by nodes detecting them. But according to the protocol, if only error-passive nodes detect the errors, the error flag cannot be broadcast. Similarly, the BAM does not hold for the implementation model because of the same reason we mentioned in section 4.2, the error-passive nodes cannot continuously send two frames regardless of its message priority.

From the analysis above, we can conclude that the critical problems occurred in the data link layer can be partially solved by designing algorithms in the application layer. With regard to the error-passive nodes, the fault confinement mechanism is designed to stop the badly-behaved nodes from disturbing the communication. When a node makes too many mistakes, it is thought to be error-prone and measures are taken to make it transmit as less messages as possible. Our models are just strictly following the actual behavior rules of the error-passive nodes. The fault confinement mechanism tries to avoid the disturbance of badly-behaved nodes, but meanwhile some side effects may be brought out, such as the fact that the limitations to the behaviors of error-passive nodes may lead to data loss and data inconsistency.

In the future, we will research on modeling and verification of the probability of CAN communication. As we mentioned before, some properties do not hold due to the occurrence of some incidents. The proposal of probability models can better model the real situation of the system. For example, the errors in our models are randomly triggered, however, the probability of the occurrence of errors can be calculated, and integrated in the models. Then properties could be verified on such probability models, which is more accurate and close to real situation.

This work was supported by Shanghai Knowledge Service Platform Project No. ZF1213), the Natural Science Foundation of China under Grant (No.91118008), 973 Project (No.2011CB302904), the project of science and technology commitment of shanghai (No. 12511504205), and Key Lab of Information Network Security, Ministry of Public Security (No. C12604).

