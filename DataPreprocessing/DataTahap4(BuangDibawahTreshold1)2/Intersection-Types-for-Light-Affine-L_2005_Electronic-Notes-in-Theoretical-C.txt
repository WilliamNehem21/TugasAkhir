Light Affine Lambda Calculus is a term calculus for polynomial time computation ([12]). Some of the terms of Light Affine Lambda Calculus must however be regarded as errors. Intuitionistic Light Affine Logic (ILAL) types only terms without errors, but not all of them. We introduce two type assignment systems with intersection types : in the first one, typable pseudo-terms are exactly the terms without errors ; in the second one, they are exactly those that reduce to normal terms without errors.

One approach to provide languages corresponding to polynomial time com- putation is that of the proofs-as-programs paradigm and Linear Logic ([7]). In particular, two variants of Linear Logic with a polynomial cut-elimination have been proposed : Light Linear Logic ([8]) and Soft Linear Logic ([10]). They can be seen as refinements of System F allowing to characterize poly- nomial time functions : by the Curry-Howard correspondence, these systems allow to write programs which can be evaluated in polynomial time.

light lambda- terms, those for which normalization can be performed without reaching an error. This is all the more natural as light lambda-calculus can be used in other settings than second order ILAL : in particular, in [13], K. Terui uses it to extract programs from light affine set theory proofs. Finally, extensions of ILAL using recursive types like in [3], can also be considered . In the present work, we tackle the problem of characterizing light lambda- terms without errors. In section 3, we give a formal definition of the terms which we can reasonably regard as terms without errors : we name them

Proof. Let t be a typable pseudo-term. By the Proposition 5.10, t is a term. By the Theorem 1.5, t reduces to a normal term t'. By the Proposition 5.5, t' is a typable term. Now, by the Corollary 5.9, t' is typable in LI. So, by the

