Euler diagrams have been used for centuries as a means for conveying ideas in an intuitive, informal way. Recently much research has been conducted to develop formal, diagrammatic reasoning systems based on Euler diagrams. Most of these systems extend Euler diagrams by adding further syntax to increase expressiveness. In this paper we survey such systems and draw comparisons between them.

but outside T igers and Dogs is a zone. Various semantics have been given for Euler diagrams. Zones in Euler diagrams represent sets and the union of all the sets represented by the zones in a diagram is the universal set. Some semantic interpretations specify that each zone in a diagram represents a non- empty set [31], whereas others do not impose this restriction [17]. A discussion of the semantics of Euler diagrams can be found in [19].

In the example above, spiders represent the existence of elements and are called existential spiders. Some spider diagram systems instead use given, or constant spiders [26]. Constant spiders are always labelled and are analogous to constants in first order logic.  We note here that the semantics of con-

The SD1 system was the first spider diagram system to be proved sound and complete [24,32]. SD1 does not include constant spiders but does include existential spiders. In SD1, existential spiders cannot have nodes placed in shaded zones. So, SD1 diagrams extend the Venn-II system by allowing lower bounds to be placed on the cardinality of sets. All diagrams in the SD1 system are based on Venn diagrams rather than Euler diagrams.

[20,21]. The concrete syntax captures the physical representation of a dia- gram whereas the abstract syntax is a mathematical description of a concrete diagram. This has an analogy in graph theory. A graph is defined to be a set of vertices together with a set of edges, like the abstract syntax. An em- bedding of the graph in the plane is like the concrete syntax. Separating out these two levels of syntax overcomes the problems raised in [38] regarding the well-formedness of diagrams after applying a reasoning rule. Molina raises other issues that an abstract syntax overcomes, [32] pages 88-89:

The abstract syntax will give precision and will enable formality in different aspects of the notation. This will be perceived for instance with the formal descriptions of the reasoning rules where we can safely ignore certain aspects which are not needed for the intended meaning...

Also a clear benefit of this distinction will be observed when building tools for SD1 or more expressive notations which may extend this system in the near future. For the design of the graphical user interface ... the concrete syntax will play a central role whereas the abstract syntax will be the guideline for the implementation of the symbolic calculus.

Swoboda and Allwein use Directed Acyclic Graphs (DAGs) as an abstract representation of Euler/Venn diagrams [48]. DAG transformations are used to check the correctness of reasoning steps. SD1 differs in that the reasoning system itself is defined at the abstract level, not the concrete level. The concrete level is used purely for visualizing abstract diagrams.

In SD1, spiders are not allowed to have nodes placed in a shaded zones. So, SD1 diagrams can express finite lower bounds on the cardinalities of sets and that sets are empty but lacks facilities to express arbitrary finite upper bounds on the cardinalities of sets. The SD2 system addresses this issue, extending SD1 by allowing spiders to have nodes placed in shaded zones. In a shaded region, all of the elements are represented by spiders, allowing arbitrary finite upper bounds to be placed on the cardinalities of sets.

We now outline two of the reasoning rules for SD2. Whilst the rules are specified at the abstract level, we will state the informal concrete level de- scriptions given by Molina. The abstract descriptions of the complete set of rules can be found in [32], pages 150-157.

Splitting spiders. Let d be a unitary diagram with a spider s touching every zone of two disjoint regions, r1 and r2. Let d1 and d2 be two unitary diagrams that are copies of d except that neither contains s but each contains an extra spider whose habitat is r1 in d1 and r2 in d2. Then d can be replaced by the compound diagram {d1, d2}. The rule is reversible, that is, {d1, d2} can be replaced by d.

climbing techniques to improve the quality [10]. The work is extended in [34] to include embedding spiders in concrete Euler diagrams. The layout tech- niques have been extended to allow a given abstract diagram to be drawn in such a way that it appears similar to another concrete diagram [36]. This is important in automated theorem proving, since after applying a reasoning rule (which takes place at the abstract level) we wish the resulting automatically generated concrete diagram to appear similar to the premise.

Some sound (but not complete) reasoning rules have been developed for the full constraint diagram language [3]. The constraint diagram system CD1 introduced in [40,41] is both sound and complete. CD1 forms a decidable fragment of the full constraint diagram language and is restricted both in terms of syntax and semantics. Syntactic restrictions are placed on the sources and targets of arrows. Sources can only be spiders and targets can be existential spiders, contours and derived contours. Semantically, the exists is deemed to take precedence over for all. Furthermore, derived contours are restricted to representing the empty set. All the reasoning rules for SD3 generalize to CD1 and CD1 includes many further rules relating to arrows.

In this paper we have outlined many reasoning systems that have emerged in recent years that extend Euler diagrams. Most of these systems are sound and complete. The relationship between the expressiveness of some of these systems is known, for example constraint diagrams are more expressive spider diagrams which, in turn, are more expressive than Venn-II diagrams. The most expressive language that we have discussed is the full constraint diagram notation, which is unlikely to be decidable (all of the other systems reviewed in this paper are decidable). The constraint diagram language is sufficiently expressive for practical application.

