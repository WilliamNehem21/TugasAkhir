The purpose of this paper is to illustrate a link between logical relations and pred- icate logics. We begin by revisiting the conditions under which the predicates in a predicate logic for reasoning about a type theory can be shown to carry the struc- ture of that type theory. We then show that similar structure on binary and more generally n-ary relations can be derived from that on unary predicates. Finally, we take a look at structure defined via monads. The core of this material is already

In order to do this we make use of the tools of category theory. From this per- spective, predicate logic is formalised as a fibration over a category representing the type theory. More accurately the base can be taken to have objects representing contexts consisting of variable:type bindings, and morphisms given by substitu- tions. We concentrate first on type theoretic structure that is defined by adjunction (products, function spaces and sums), but we then discuss monadic structure.

be mitigated to some extent because the structures considered are closed under products, so can always be combined into a single entity. The work also contains the start of a treatment of monadic types. We expect to put more detail on that in future work.

Our paradigmatic example of a semantic fibration is Pred. In a semantic fibra- tion, the underlying category C is a category of (semantic) mathematical objects, such as Set. The fibre of E over an object A of C is (derived from) a class of maps into A in C. In the case of Pred, these are the inclusions of subsets. Reindexing is

This decomposition of adjoints says that right adjoints are obtained in two parts. The first part is a cartesian lifting. In terms of standard predicate structure, this amounts to substituting terms into the predicate given as argument. The second part is an adjunction between two fibrations over the same base. This part depends on the existence of particular logical structure. For example, we will see that con- junction is used to give products, disjunction is used for sums (using the dual result for left adjoints), and implication and first order quantification produce function spaces.

For our purposes we consider the following situation in the base. We have a commutative square, as below, in which the horizontal arrows F and G have right adjoints Fr and Gr. It is not necessarily the case that KGr = FrH, though there is a canonical natural transformation between them, the mate of the identity on FK = HG. We will consider an adjunction of categories over F E Fr, pulled back along H and K.

Lemma 6.2 Suppose we are given a commutative square as above, and a category P over A. This produces the cube below in which the front face and the left and right sides are pullbacks. The functor G is obtained as the obvious pullback factorisation. The functors F and G have right adjoints Fr and Gr.

Example 6.7 [coproducts] As before, the story for coproducts is the same as the story for products. It makes use of the same diagrams, but the theory is applied to the opposite categories, yielding left adjoints rather than right. In particular the bottom face of the cube is obtained from the bottom face of the diagram for products by applying op to all of the categories involved. It therefore commutes exactly.

Monads provide another approach to defining structure. Given a category B rep- resenting types, a category P representing a predicate logic for B, and a monad T on B, then there is no fully general method of extending T to a monad on P . But there are ways that work under some circumstances.

This latter is precisely the condition the unit respects y in the construction of the initial lifting of T in p. 254 of [8]. We are ignoring here the presence of algebraic operations in T , which we deal with separately in a follow up article.

