Other distinctive feature of trs is the use of the elaborated theory of types of PVS to represent TRS objects such as binary relations (functions in an abstract type T: [T->T]), substitutions (the subtype of functions from variables to terms: [V -> term], whose domain is finite), etc. In this way, the specification of higher-order theorems is straightforward. In fact, as we will illustrate, in contrast to the first- order formalization of the Critical Pair Theorem in ACL2 presented in [27], trs brings formalizations of higher-order rewriting theorems in a natural and clear manner over the higher-order specification language of PVS.

Initially, Section 2 gives the necessary background on PVS and specification of basic abstract reduction notions. Afterwards, Section 3 describes the elements used in the specification of the theory trs and Section 4 illustrates the usefulness of trs by showing how the Knuth-Bendix Critical Pair Theorem was formalized. Finally, before concluding, Section 5 presents related work.

PVS consists of a specification language integrated with support tools and a the- orem prover, that provides an integrated environment for the development and analysis of formal specifications. Only the relevant aspects of PVS are explained here. For more details about this system, refer to the documentation available at http://pvs.csl.sri.com.

modularity by means of parameterized theories, with a rich type-system, including the notions of subtypes and dependent types. It provides a large set of built-in constructs for expressing a variety of notions. The PVS specifications are organized as a collection of theories, from which the most relevant ones are collectively referred as the prelude. Each theory is composed essentially of declarations, which are used to introduce names for types, constants, variables, axioms and formulas, and IMPORTINGs, which allow to import the visible names of another theories. Notice that parameterized theories are very convenient since the use of parameters allows more generic specifications, as we can see with the ars PVS theory below:

The complete trs development runs in PVS 4.2 and consists of 350 lemmas specified in 2745 lines (82K) and 50489 lines (3.4M) of proofs. PVS builds 124 TCCs whose proofs are included in the latter number. The number of lemmas corresponding to the theory ars is 65 from which 5 are TCCs only.

cepts and results from the theories of ARS and TRS. The work in [27] pretends, as the one presented here, to be a general formalization of the theory of rewriting. But in contrast to this work, ars and trs were developed in a natural manner using the higher-order language of PVS to represent the higher-order objects of the the- ory of rewriting. In particular, this straightforward and elegant representation of second-order objects such as reduction relations makes it possible the diagrammatic

