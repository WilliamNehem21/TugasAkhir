In this paper we describe an approach based on open system analysis for the specification, verification and synthesis of secure systems. In particular, by using our framework, we are able to model a system with a possible intruder and verify whether the whole system is secure, i.e. whether the system satisfies a given temporal logic formula that describes its secure behavior. If necessary, we are also able to automatically synthesize a process that, by controlling the behavior of the possible intruder, enforces the desired secure behavior of the whole system.

Hence we have extended the line of research of [14,16] with a method for automat- ically enforcing the desired security properties (see [17,18,19] ). We define process algebra operators called controller operators and denoted by Y d X where Y is the controller program i.e. the process that controls the un-specified component X. In particular we define controller operators that are able to model security automata described in [3,4,22] for enforcing safety properties as well as others able to force Non-interference properties (see [19]), under certain assumptions.

We also show a related specification framework called GN DC (e.g., see [8]) that is able to describe security properties, e.g. Non-interference, Agreement, Authen- tication, Non-Repudiation and so on. By using this schema we are also able to uniformly model dependable systems and analyze dependablity properties. GN DC was firstly introduced in [8] as a framework where family of security properties could be uniformly expressed and compared. Generally speaking a GN DC property has the following form:

This paper is organized as follows. Section 2 briefly recalls the basic theory about process algebra and temporal logic. Section 3 explains our approach for the specification and verification of secure systems. Section 4 presents how we are able to define and synthesize controller programs. Section 5 shows a related approach used also to deal with dependability properties. Eventually, Section 6 concludes the paper.

A system is open if it has some unspecified components. We want to make sure that the system with an unspecified component works properly, e.g. fulfills a certain property. Thus, the intuitive idea underlying the verification of an open system is the following:

It is important to note that, by using partial model checking we need to control only the possible un-trusted component of the system. This is an advantage of our approach because often not all the system needs to be checked or it is simply not convenient to check it as a whole or also it is not possible to do. Some components could be trusted and one would like to have a method to constrain only the un- trusted ones (e.g. downloaded applets). Our method allows one to monitor only the necessary/untrusted part of the system, here X. Sometimes it could be possible that not the whole system can be checked but only some of its components.

The GN DC schema has a favorite verification method based on the so-called most-general intruder idea. For several kind of relations, it is possible to avoid the universal quantification and just consider one possible intruder. Thus, standard techniques and tools may be applied. Unfortunately, for several interesting proper- ties, e.g. BNDC, such approach does not work and the one based on logic presented in the previous sections should be applied.

It is possible to show that also dependable systems can be uniformly modeled in our framework and also dependablity properties can be analyzed within GN DC (see [9]). A system must be modeled by CCS, where both the failing behavior of the system and the related fault-recovering procedures are explicitly described. The environment acts as a fault-injector and it is the unspecified component of our framework. We call it faulty environment. We may note that the neat separation between the system and its environment given by GN DC is very useful.

