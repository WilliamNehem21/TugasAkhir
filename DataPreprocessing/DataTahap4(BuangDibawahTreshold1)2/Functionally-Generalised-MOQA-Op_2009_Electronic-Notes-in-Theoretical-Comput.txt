MOQA is a new programming language, based on a kernel of basic operators, intro- duced by M. Schellekens in order to facilitate the Average Execution Time Analysis (A-ETA) of its programs (cf. [5,7,4,6,8]). The design of MOQA is developed in [5,7] where the semantics of the basic operators is given via operations, refered here as basic MOQA operations. In this article, we present functional-generalisations of three of these operations: the projection, the unary product and the split.

In Section 2, we present several notions, in particular the notion of Random Preservation. Note that we will introduce a distinction between Random Preserva- tion and Automatic Random Preservation, a distinction which is not done in [5,7]. In Section 3, we define the notions of isolated subsets of a poset and local trans- formation. Isolated subsets are used in particular to express the restrictions on the applicability of MOQA operations. Then in Section 4, we introduce MOQA operations and their generalisations. Finally, Section 5 we discuss the RP property of the generalisations. We remark that this article is essentially self-contained. In particular we introduce the notions from [5,7] we need.

We drop the index P in the notations above as soon as there is no ambiguity on the poset P . A similar convention is used whenever a subscript can be removed without loss of clarity. We define now the Hasse Diagram of a poset.

An operation or a program applied on different inputs may leed to the same output. In order to keep track of the number of inputs corresponding to a given output, the notion of output multiset is defined below. But first, we introduce multisets and two of their constructors.

In other words, a local transformation of Y modifies the digraph P at most locally on Y . In particular, condition ii in the definition implies that R' T(X \ Y ) = R T(X \ Y ). We link now the two notions of isolation and local transformation.

natural and easy to control than the isolation one. The operations are defined in two steps: on the poset first and then on the lpo. We remark that it is done in the same way in [7] and so Proposition 4.19 is immediate.

A near-lpo is a lpo where the biggest label has been replaced by a fresh label (a label not appearing in the lpo). The behavior of PushDown is illustrated using Example 4.24 below. The first step is obtained by replacing the biggest label, here 4, by a fresh one, here 2. Then, PushDown first checks if the replacing label is bigger than all labels below it. If it is true then PushDown stops. If not, which is the case in our example, it swaps the replacing label with the biggest label below it, that is, in our example, it swaps 2 and 3. Then it iterates the same operations, continuing to push down the replacing label, until either the replacing label is bigger that all the labels below it or it is placed on a minimal element of the poset. In our example, after the first swap 2 has reached a minimal node and so PushDown stops. It is straightforward to verify that, when PushDown stops, the results of its swaps on the near-lpo is a lpo (in particular from the fact that the swaps always involve the biggest label below the label to be swapped).

inition 2.5) using an algorithm written in pseudo-code. It is then generalised to every lpo where Y is atomic isolated. We present first that algorithm. For that, we introduce here a special notation AtSplit for the operation implemented by the algorithm. Moreover, as for  , we prefer to define AtSplit(AY , l) as a labeling instead of a lpo as it is done in [7].

As already mentioned, RP-domains and Def-domains of MOQA operations are identical. It is not the case for the generalised ones and it would be easy to exhibit random structures where they are defined but not RP. Nevertheless, Propositions 4.19, 4.29 and 4.40 express in particular that the generalised operations, when restricted to the domains of the corresponding MOQA operations, coincide with these operations. That fact implies in particular that the RP-domains of generalised operations contain the RP-domains of the corresponding MOQA operations. In fact we have a stronger result.

In this article, we introduced three generalised MOQA operations. These opera- tions have several advantages compared to their correspondent MOQA operations. First, they extend the domains of definition of the latter in a non trivial and still meaningful way, using more natural restrictions. Secondly, as shown in the previous section they extend also the domains of random preservation of the corresponding MOQA operations. The fact that the examples given in Section 5 can be generalised indicates that this extension is non-trivial and quite rich.

