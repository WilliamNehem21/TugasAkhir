A great variety of models for concurrency was introduced in the last decades: transition systems (with independence), asynchronous automata, event structures, Petri nets, etc. Each of these models focuses on modeling a particular aspect of computations, and even though their nature are very different, they are tightly re- lated to each other as witnessed in [43]. More recently, models inspired by ideas coming from geometry, such as cubical sets (also sometimes called higher dimen- sional automata or HDA [30,18]) or local po-spaces [12], have emerged as central tools to study concurrency: thanks to their nice algebraic structure, they allow one to carry on abstractly many computations, and they are very expressive because of their ability to represent commutations between multiple events. However, since their introduction, they have not been systematically and formally linked with the other models, such as transition systems, even though cubical sets contain a notion of generalized transition in their very definition.

This paper constitutes a major step towards formally relating geometric models with other models for concurrency. The links might appear as intuitive, but the formal step we are making underlines subtle differences between the models: there are many variants of the models, all of which can be embedded in the model of HDA, which allows us to precisely characterize the outcomes of choosing one of the other variant of the models. We have done our best to express in categorical terms how to construct one variant from the other. In particular, most models admits the following variations:

It turns out from this study that strongly labeled HDA seem to be the right notion of HDA, at least for comparing with most other common models of concurrency. This also unravels interesting phenomena (besides being necessary for being able to relate semantics given in different styles) such as the fact that persistent set types of methods for tackling the state-space explosion problem can be seen as searching for retracts of the state space, in the algebraic topological sense. We end this article by making some hypotheses on further relationships, with event structures and Petri nets in particular.

chronous transition systems and Petri nets which are still an active research area [36]. A first step towards comparing higher-dimensional automata (a form of geometric semantics we are considering here), Petri nets, and event structures is reported in [39]. Also, an investigation of the comparison between cubical sets (another form of geometric semantics) and transition systems, as well as transition systems with independence was started in [16], but never formally published.

From a concurrency point of view, a 1-cell corresponds to the occurrence of an event (an action) and an n-cell corresponds to a commutation or an independence between the 1-cells occurring in its faces. The cubical set above representing the cylinder thus corresponds intuitively to a program constituted of two processes in parallel: a (while) loop (the actions f and g) and a single instruction (h). See also Example 1.9.

We have explained that the 1-cells of a cubical set can be seen as occurrences of events in the semantics of a concurrent computational process. One sometimes needs to remember to which instruction of the process it corresponds. Labeled (pre)cubical sets formally allows this. The presentation given here is adapted from [17], see also [13].

Remark 1.7 The cofree non-symmetric labeling precubical set on a set L could be defined in the same way, but a direct description is more difficult. It can for example be obtained from the symmetric labeling precubical set ! L on L by quotienting by the action of symmetries.

Asynchronous automata are a nice generalization of both transition systems and Mazurkiewicz traces, and have influenced a lot of other models for concurrency, such as transition systems with independence (or asynchronous transition systems). They have been independently introduced in [35] and [2]. The idea is to decorate transition systems with an independence relation between actions that will allow us to distinguish between true-concurrency and mutual exclusion (or non-determinism) of two actions. For example, the two last transition systems of Example 2.3 do not allow us to distinguish between processes which are arguably different from the concurrency point of view. We actually use a slight modification for our purposes, due to [6], called automaton with concurrency relations:

Event structures were introduced in [28,41] in order to abstract away from the precise places and times at which events occur in distributed systems. The idea is to focus on the notion of event and the causal ordering between them. We recall below the definition of (unlabeled prime) event structures.

We construct here an adjunction between sLES and sHDA. This adjunction refor- mulates in the framework of HDA some well-known relations between event struc- tures and transition systems with independence [33]. The study of relations between the two models was initiated in [5] and a similar connection is described in [36].

It can however be shown that G is right adjoint to F if we restrict sHDA2 to the full subcategory whose objects are strongly labeled and satisfy the cube axioms (which state that if an asynchronous transition system contains half of a cube as in fourth example then it also contains the other half of the cube, as well as two other variants of this property). As previously, this adjunction can be extended to the non-strict variants of the models, as well as the whole category HDA. This adjunction can also be extended to an adjunction between general event structures (in which conflict is not necessarily a binary relation) and HDA.

This section constitutes perhaps the most novel part of the paper. We extend here previously constructed adjunctions between 1-bounded Petri Nets and asynchronous transition systems [43,6,26,39] to an adjunction between general Petri Nets and HDA. For similar reasons as previously, one needs to restrict to strongly labeled HDA in order to obtain a well-defined adjunction. We thus implicitly only consider strongly labeled HDA in the following.

Cubical transition systems. We introduce here a general methodology for as- sociating a symmetric precubical set to a model for concurrent processes, that we will use in order to associate a strict HDA to a Petri net. Since monoidal functors preserve the unit of monoidal categories, all cubical sets generated by cubical ob- jects in Set (i.e. by the functor ! introduced in Section 1.5) contain only one 0-cell. Cubical sets with multiple 0-cells can be generated by actions of the labeling cubical set on the 0-cells, formalized as follows, in the same way that a transition system can be seen as an action of the free monoid on labels over the states. The resulting notion of cubical transition system (or CTS ) generalizes to the setting of cubical set the notion of step transition system [26] which is a variant of transition systems in which multiple events can occur simultaneously.

Example 3.14 If we restrict to 1-bounded nets, which are nets a place can contain either 0 or 1 token, we can recover the constructions of [43] for constructing an adjunction between asynchronous transition systems and nets. Since the net asso- ciated to an HDA by the functor hda is generally infinite, we will give an example in the case of 1-bounded nets. Consider the asynchronous automaton, depicted on

Now, if we consider the same automaton with e1 Ix e2, we obtain the same Petri net with the place h removed. The general (i.e. non-bounded) net associated to an HDA is generally infinite (even for very simple examples) and thus difficult to describe, which is why we did not provide an example in the general case.

