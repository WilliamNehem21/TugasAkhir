Taking photographs has become one of the most widely used applications on mobile devices. Cameras in mobile phones have become very good over the past years. Im- ages are used to preserve memorable moments, but also to take scans of documents. For panoramic pictures as well as for images of larger documents one image alone may sometimes not be enough to represent the full picture. Then several images of parts of the scene are taken. To restore the full picture those images must be

Image stitching is an old problem in computer vision that has been solved in dif- ferent ways in history and is often described in the literature [6,24,13,21,16]. The process of combining different images to one is used, for example to combine im- ages taken by satellites for navigation, to generate panoramic views from impressive landscapes and huge objects [24], the stitching of microscopical scenes [13] or for image stabilization [24]. Today, taking pictures has become one of the most widely used applications for mobile phones, hence stitching those images has also gained relevance.

There are two main categories of methods for automatic image stitching, direct and feature-based methods. Direct methods are using all image data and mini- mize the pixel-to-pixel dissimilarities. Feature-based methods extract features from the images and try to match these, which enables the automatic detection of the correlation of images with overlapping parts [6,24].

To create a prototype of an image stitching application that uses mobile offload- ing a very basic, simple and not scale invariant feature-based approach is used, which basically can be divided into five steps, feature-point detection [11,17,23], feature- point description [17], feature matching [17], homography estimation [4,12,21] and warping and projection. Those steps are briefly described in Section 3. For all these steps intensive research has been done and there are several ways of doing them [6,13,24]. Herbon et al. [13] have also described methods to reduce the com- plexity of the image stitching procedure for the execution on mobile devices by adding preconditions. The implementation of the used algorithms in this paper is not optimized for mobile devices, does not include image post-processing, like blending or feathering to hide the transitions from image to image [16], and does not deal with ghosting effects.

These platforms can be considered as the prototypes of a general and standard mobile application offloading structure. We believe that mobile application offload- ing systems are still in an early stage of development. With the invention of more intelligent mobile devices, mobile offloading structures will also be further devel- oped. There is no doubt, more novel structures will also be proposed. In fact, if some uniform standards can be formulated to define either the offloading work flow or the basic elements of the system structure, the development of mobile offloading will be facilitated.

The first step in image stitching is to decide which type of points will be used to find correspondence between two images. One possible option is to use corners as feature-points of the images [11]. To detect corners in an image the Harris Corner Detection algorithm [11] can be used, which is rotation invariant and robust to illumination changes but not scale invariant [11,17,23].

[19] and, like its predecessor, uses small windows around each pixel. These windows are slightly shifted in every direction. The change of average image intensity result- ing from those shifts is used to make a statement about the existence of a corner in the area of the pixel that is located in the center of the considered window. The image intensity of a pixel can be defined as the greylevel of the pixel in the 8-bit grayscale version of the image.

The feature-points described in Section 3.1 are single pixels. The only information we can get when considering only one single pixel is its (x, y) position and its color. Because the images to stitch images together can differ, the position of correspond- ing points do not have to be identical on both images and the illumination might have changed, so that the color is also not the same [23]. Therefore, it is not suffi- cient to consider only the found feature-points to compare and find corresponding ones. In order to compare them, they have to be described uniformly with the help of more information about the area around them [17].

by David G. Lowe [17] and uses histograms of gradient directions and magnitudes around SIFT keypoints to describe them and generate SIFT features. To provide the scale invariance, SIFT keypoints provide information about the scale of the image at which the keypoint was detected [17]. The feature-points described in Section

One method to measure the similarity of two vectors is to compute their Eu- clidean distance [17]. If the distance is small, the vectors are very similar. If the distance is large, they differ much. One very intuitive and simple way to find the best match for a feature fA of image A in the set of features of image B is to find the feature fB in image B which has the smallest Euclidean distance to fA [17]. This approach finds a best match for every feature fA of image A, if the set of features of image B is not empty. As setting a global threshold for the distance of features to filter false matches does not perform well [17] a threshold for the ratio of the distance of the feature fA to the nearest feature fB,best and the second nearest feature fB,2ndbest found is used. If the distance to the best matching feature is much smaller than to the second best match, the best match is found with high certainty [17].

With the homography H found as described in Section 3.4 it is possible to paste the two images onto each other. To do so, a new empty surface is created and one image is put in the center of it. Then the positions of the pixel of the other image on the new surface can be computed by multiplying the coordinates of the pixel in the original image with H.

This information can be sent as XML. The XML data will be much smaller than the large panoramic image and therefore the data transmission time will be reduced. After parsing the XML data, the mobile device can stitch the images together locally, according to the received order and the homographies. Since the last step of the image stitching process will be performed on the mobile device, the local execution period will be slightly larger, but the time to send the result back to the server is expected to be much smaller than in the first method.

The third method aims at minimizing the total execution time and the transmission time by minimizing both file sizes of the data to send and return. If the images are converted into 8-bit grayscale images, the time needed to compute the image intensities in the process of image stitching can be reduced. Because the color information is not needed, these images need less memory than color images. For that reason, the time needed to send them to the server will also be less than sending the coloured ones.

The application was tested with two and four images. The execution was re- peated 20 times for each combination. The time stamps for measuring were auto- matically written to a .csv file stored in the smartphone at the end of the compu- tation.

Local execution time: The second metric is the local execution time tlocal. This is the time needed to compute parts of the image stitching process on the mobile device. As it is assumed that the computation on the server is more efficient and saves the battery life of the mobile device, the maximum possible amount of computation should be performed on the server. Therefore the local execution time should be as small as possible.

If b < 1, the tradeoff leads to a decrease of Toffload. If b = 1 the tradeoff will not influence the total execution time but can be desirable, for example if there are limits to the monthly data volume and the reduce of transmission time is therefore better than less local execution time. If b > 1, the tradeoff will increase the total execution time.

It can be seen that all offloading methods have shorter execution times than the completely local execution. Offloading method one described in Section 4.1 leads to the shortest execution time. By using this method, the time needed to stitch two images is decreased on average by 50%. For stitching four images, around 73%

The biggest parts of the execution with method two and three are the local execution time tlocal and the transmission time ttrans. The remote execution period is very small, because the remote server is very powerful. It can also be seen, that trading the transmission time ttrans against local execution time tlocal is not beneficial, if a good Internet connection exists. The local execution time needed to warp and project the images is larger than the saved transmission time and therefore

Method two keeps the step of warping and projection on the mobile device, therefore the remote execution time is shorter. Method three also keeps the con- version of the images to 8-bit grayscale images on the mobile device, which reduces the remote execution time a bit more. Since the part of warping and projection is more computationally intensive than the conversion, the difference of the remote execution time of method one and two is greater than the difference between the ones of method two and three.

The methods one and two send the whole image data, compressed to JPEG format, to the server. Method three compresses the image data by omitting the color information. Therefore only one byte per pixel has to be transmitted. However, JPEG is a compressed image format and therefore it is possible that the size in byte of the compressed file is smaller than the amount of pixels of the image. Sending one byte per pixel will then take longer than sending the compressed JPEG file. For that reason method three should only be considered if the sum of file sizes in byte of the images is greater than the sum of pixels of them.

As all the stitching computation has been migrated to the server, method one needs the lowest amount of memory in all cases. The memory usage decreased by up to 25% for two images and up to 45% for four images when using method one. Method three has the highest memory usage in comparison to the other offloading methods, because both the steps of image compression and warping and projection are executed on the mobile device.

Under the conditions in our experiments all offloading methods result in decreased total execution time in comparison with the completely local execution, if the net- work condition is at least Edge. As Tlocal > Toffload is always satisfied, it can be said in general that using the offloading methods is beneficial. Depending on the network speed and latency, the total execution time could be decreased by around 50% for stitching two images and 73% for stitching four images together.

Contrary to the presumption of Section 4.4, method one results in the smallest total execution time and local execution time of the offloading methods in nearly every case, which makes this method clearly be the best. To trade transmission time for local execution period only makes sense for stitching two images under bad network conditions.

However, the transmission time is the highest when using method one. If the size of data to transmit should be minimized, method two is preferrable. In some cases as the sum of the file sizes of the images in byte is greater than the sum of pixels of the images, method three is optimal, because it needs the smallest data transmission time.

Any offloading method decreased the memory usage in comparison to the mem- ory usage of the local execution. The memory usage could be decreased by up to 45%. It is minimized by using method one. In general method one will be the best choice to minimize the total execution time and relieve the mobile device and therefore improve the user experience.

Perhaps the measurements should be repeated with a more optimized version of the application and with more diverse image sets. We conclude that all described offloading methods for image stitching aim at finding a good tradeoff between local execution time and transmission time. It has turned out that sending all the com- putation to the resourceful and powerful remote server is the best choice in terms of the total execution time and that it even enables us to stitch high-resolution images without any optimisation of the program regarding the execution on mobile devices. However, the developed program for stitching images is not optimized yet. Par- allelization is not used, but possible at many stages of the stitching process. The features of the different, independent images could be found in parallel, to give an example. It is also possible to reduce the complexity of the image stitching algo- rithm by adding some preconditions, like the order of the images, as described by Herbon et al. [13]. The results received by the stitching process could be further im- proved by techniques like filtering, feathering or blending [16], to hide the transition

The offloading methods described in this paper are three good working, but basic ones. They are only a sneak preview of the possibilities mobile offloading can offer. The offloading methods can be extended in many ways and adding decision mak- ing, like choosing the offloading method dynamically according to network speed, number of images and image size, and local restart methods described in [26] could lead to further improvements.

