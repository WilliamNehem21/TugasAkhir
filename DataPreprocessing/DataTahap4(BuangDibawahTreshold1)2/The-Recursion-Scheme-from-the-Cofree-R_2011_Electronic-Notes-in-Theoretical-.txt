We instantiate the general comonad-based construction of recursion schemes for the initial algebra of a functor F to the cofree recursive comonad on F . Differently from the scheme based on the cofree comonad on F in a similar fashion, this scheme allows not only recursive calls on elements structurally smaller than the given argument, but also subsidiary recursions. We develop a Mendler formulation of the scheme via a generalized Yoneda lemma for initial algebras involving strong dinaturality and hint a relation to circular proofs a` la Cockett, Santocanale.

In this paper we study the new recursion scheme foremostly as an instance of comonad-based recursion and of the technique of deriving Mendler-style recursion schemes from conventional-style schemes. discussing the rather technical application to circular proofs only tangentially. This will be the subject of a separate paper with Cockett.

The paper is organized as follows. In Section 2, we first review the comonad- based recursion scheme [36] and especially its instantiation to cofree comonads, including course-of-value iteration. Then we continue with the Yoneda lemma, to- gether with a generalized version for final coalgebras, and Mendler-style recursion. In Section 3, we proceed to the instance arising when the cofree comonad is re- placed with the cofree recursive comonad. In Section 4, we comment on a Haskell implementation of the combinators. The connection of the Mendler-style scheme to circular proofs is explained in Section 5. Following an orientation about related work in Section 6 we conclude with final remarks in Section 7.

It is not unnatural to ask whether the Yoneda lemma generalizes in any inter- esting way to mixed-variant hom-functors. The answer turns out to be positive: there is a generalization and it will be very useful for us. Curiously, we have not come across it in the literature in this explicit form 5 , but it is intimately related to the fact that the final F -coalgebra is the (big!) colimit of the F -coalgebra structure forgetting functor.

In principle, it is possible to modify the scheme so that subsidiary recursions can be according to more sophisticated schemes than iteration (even according to the main scheme itself). We will not discuss this here, as the version we have just shown is higher-order enough to confuse. We advise the reader to check the Haskell implementation that we will comment next.

the lack of a better alternative for our purposes). Haskell is not a total functional language. We work in a safe corner where we have set up some basic infrastruc- ture for initial algebras and final coalgebras and we program with them confining ourselves to just this infrastructure (avoiding confusing initial algebras and final coalgebras, using general recursion etc.). Second, Haskell has no mechanisms for enforcing functor and comonad laws etc. Likewise we ignore the question of when strong dinaturality is free.

Functional programming with inductive and coinductive types based on categor- ical combinators was pioneered by Hagino [15] and Cockett and Spencer [9]. The comonad-based recursion scheme was introduced by Uustalu, Vene, Pardo [36], in an attempt to extract the common pattern of primitive recursion and course-of-value iteration [33]. Independently, Bartels [3] described a dual corecursion scheme and looked also at the corresponding coinduction principle. Capretta, Uustalu, Vene [6] took the original work further, showing that the scheme extends from initial algebras to any coalgebras recursive in the sense of Osius.

We have shown that the cofree recursive comonad yields a meaningful instance of the comonad-based recursion scheme. It gives a scheme that supports subsidiary recursions on the predecessors of the given argument. This happens by allowing recursion on a datastructure containing the results of the main recursion. While at first we had little intuition about the mechanics of this scheme, in retrospect it appears as a completely natural strengthening of course-of-value iteration, where essentially the same datastructure can only be finitely observed, as it comes without a wellfoundedness guarantee. It is also pleasant that there is a connection to the repeated regeneration phenomenon in circular proofs.

