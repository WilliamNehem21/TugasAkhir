We review and extend some recent work that uses sheaf theory to provide a semantic foundation for distributed concurrent systems. A sheaf can be thought of as a system of observations on a topological space, with the key property that consistent local observations can be uniquely pasted together to provide a global observation. We suggest that sheaf theory can provide a framework for the semantics of distributed concurrent systems by exploring the relationships between sheaves and basic models of concurrent processes, particularly labelled transition systems and algebraic specifications of classes and objects.

In this paper we explore the possibility of using sheaf theory to provide a semantic foundation for distributed concurrent systems. We are particularly interested in systems of interacting objects with hierarchical structure: objects can be built by aggregation from other objects, and communication takes place through shared subobjects. We aim to give a fairly non-technical presentation: rather than give definitions and theorems, we give only a few definitions, and illustrate constructions through examples. Some category theory is occasionally used, but we try to keep the discussion at an intuitive level.

Sheaf theory is concerned with the transition from local to global properties. A sheaf can be thought of as a system of observations on a topological space, with the key property that consistent local observations can be uniquely pasted together to provide a global observation. Although these intuitions behind sheaves are clearly relevant to the study of distributed systems, their application in Computer Science has been sporadic. An early use of sheaf theory was a paper by Monteiro and Pereira [25], who applied sheaf theory to study connections between event systems. More

This section presents some basic definitions and constructs on labelled transition systems, as an example of the kind of hierarchical approach to object systems that we are interested in. We also give an introduction to sheaves, and use transition systems as an example of sheaves. We conclude the section with another approach to hierarchical systems using hidden algebraic specifications.

We can extend this specification again to obtain a one-place buffer with the same behaviour as the Sender transition system of Example 2.3. In that example, we used natural numbers n as labels for transitions that placed the value n in the buffer; here we introduce an operation put, that takes the value n as argument. The operation store returns the value that is currently stored in the buffer; that

We have seen that labelled transition systems can be viewed as sheaves. It would be possible to give an analogous treatment of the hidden algebraic specifications described above. However, at this point we prefer to concentrate on the hierarchical approach of building complex systems from component systems that is common to hidden algebra and labelled transition systems, and works in both cases by limit constructions. It turns out that this also gives us yet another example of sheaves.

What about the dynamic aspects of systems of interacting objects? We end with a sketch of some constructions that allow modelling systems with changing topolo- gies. Research by Colman Reilly at University College Dublin suggests looking at systems whose state comprises a graph that represents the topology of a system. We start by looking at the simplest examples of these, then add progressively more structure, so that we can look at sheaves of sets, then sheaves of transition systems, then sheaves of hidden algebraic specifications.

