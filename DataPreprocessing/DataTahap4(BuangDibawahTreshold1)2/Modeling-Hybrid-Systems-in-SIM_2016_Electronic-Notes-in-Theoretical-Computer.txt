Hybrid systems (HS) have been proven a valid formalism to study and analyze specific issues in a variety of fields. However, most of the analysis techniques for HS are based on low-level description, where single states of the systems have to be defined and enumerated by the modeler. Some high level modeling formalisms, such as Fluid Stochastic Petri Nets, have been introduced to overcome such difficulties, but simple procedures allowing the definitions of domain specific languages for HS could simplify the analysis of such systems. This paper presents a stochastic HS language consisting of a subset of piecewise deterministic Markov processes, and shows how SIMTHESys - a compositional, metamodeling based framework describing and extending formalisms - can be used to convert into this paradigm a wide number of high-level HS description languages. A simple example applying the technique to solve a model of the energy consumption of a data- center specified using Queuing Network and Hybrid Petri Nets is presented to show the effectiveness of the proposal.

survey summarizing the main issues in the first three decades of studies is provided by [2], which gives a very good general introduction of the field, with both conceptual definitions and examples. In [27] a control systems oriented point of view on the field is given, including a wide bibliography. Non expert readers can find a good introduction in [25]. In [2] a list of software solutions offering tools to study HS is available: here we will just mention Ptolemy [24], HyTech [17], UPPAAL [22] and Prism [21], as we explored their characteristics to have a conceptual benchmark while shaping our approach.

Note that a preliminary approach to modeling HS in SIMTHESys was given in [3] to add rejuvenation to PN or TFCQN models. However, in that case, the continuous part was limited to model aging of the components. This limitation allowed such models to be solved by first translating them into labeled transition systems [10], and then by externally attaching a solver handling the related continuous part. The approach proposed in this paper greatly extends such results, by allowing the representation of a more general class of hybrid systems.

The basic part of a formalism is the Element, defining all the atomic primitives describing a model. Formalism Elements are used to define submodels, and can contain other elements. An Element is characterized by Properties and Behaviors. Properties associate values of given types to the elements of a formalism. Behaviors define the actions that the element performs. For example, the following properties characterize the Place element of a SPN:

where static denotes a constant value, dynamic indicates a value instantiated by the model that may change during the system evolution, and computed refers to a value calculated by the solving engine. Each property automatically defines getter and setter methods that can be called by the code defining the behaviors to read or write the corresponding value. For example getTokens() returns the value of the Tokens property associated with a place. The value of the same property can be set using the setTokens(int v) method. With regard to Behaviors, the following example determines the current number of tokens in a SPN Place:

Interfaces provide the capability to share common sets of behaviors used by different elements. The main idea of interfaces consists of binding formalisms and solving engines. SIMTHESys exploits three types of interfaces: solver interfaces (to define which solving engine should be used), solver helper interfaces (to guarantee that a set of behaviors and properties are mandatory in all models produced in the specified formalism) and behavioral interfaces (to reuse existing abstractions).

A formalism family is a set of Formalisms that can be handled over the same solving engines. They also share a set of similarities, which can be exploited to automatically generate the multiformalism behavior from the specification of the way in which primitives of single formalisms components works. Any formalism that is part of a family can be solved by any solution engine supporting that family by using a dedicated group of solver and solver helper interfaces.

EEFs can be extended to support HS: this new formalism family will be addressed as Hybrid Formalism Family (HFF). In particular, it must account for the fact that states are composed of a discrete and a continuous part. The latter is characterized by a continuous domain that can change depending on the former. It must also consider the fact that the rate at which events occur can depend on the continuous part of the state, and whenever the system changes mode (its discrete state), all the continuous variables could be altered in a deterministic or stochastic way.

