In this paper, we focus on model-based testing. The term model-based test- ing refers to test case derivation from a model representing software behavior. Such a model may be generated from a formal specification [7,31,15] or may be designed by software engineers through diagrammatic tools [20,36]. An overview on model-based testing approaches is presented in Section 2.

The paper is organized as follows: Section 2 provides an overview on model- based testing approaches and tools, highlighting deficiencies of existing ap- proaches. Section 3 outlines the technologies we want to use in the rest of the paper. Section 4 presents our contribution which can be considered new, with respect to existent approaches, but still embryonal. Section 5 concludes this paper and draws future work directions.

Scenarios are a powerful and widely used tool to model and analyze software systems [21]. However, since they do not provide a complete description of the system, but just some possible execution paths, they are usually integrated with state machines. This complementary notation is also strongly utilized in component-based developments.

A way to produce state machines is by synthesis from scenarios. For each process in the scenarios, a state machine is created. State machine for process P contemplates all the events belonging to P in the scenario specification. The order in which events are executed in P is identified analyzing the sce- nario specification. Many algorithms (e.g., [17,39]) and tools [32,33] have been proposed to synthesize state machines from scenarios.

The main property one expects to be satisfied by the synthesis process is that the synthesized state machine correctly reflects the scenario specification, i.e., the state machines identify all and only the interactions expressed by the scenarios. What may happen, instead, is that the state-based model synthesized from the system scenarios presents sets of behaviors that do not appear in the scenarios themselves. Such unexpected behaviors are called implied scenarios; they have been initially analyzed in [2,34], and are due to a mismatch between local and global behavioral views.

deadlock-free model. If scenarios are not realizable, implied scenarios are de- tected. The approach proposed in [34], instead, is based on both MSCs and High-Level MSCs (hMSCs), and describes an algorithm to synthesize a be- havioral model and a technique to detect, on the synthesized model, implied scenarios.

Note that an implied scenario is not always an undesired behavior. Pos- itive and negative scenarios identify the implied scenarios which have to be accepted/discarded, respectively. Through positive and negative scenarios, an initial specification is updated and an iterative elaboration and analysis of scenarios and state machines is performed [35]. At the end of this process, all the implied scenarios are detected and classified as negative or positive.

