The standard method to retrieve information can be formally defined as follows. To ask a query, one gives the properties of the entities to be retrieved, and the answer is the set of all the entities that satisfy the query. Another method, is to ask the overall information about a given entity, and the answer is the corresponding information. An example of the first kind of query is: "what are the drugs that contain a given molecule?", an example of the second kind is: "what are the properties of a given drug?".

This latter method has deserved very few researches though it has great potential practical applications. However, it raises many non trivial issues. The first one is to find a precise definition of the fact that a piece of information "is about" a given entity. We recall the formal definition that have been proposed in formal classical logic, and the main properties that follow from this definition. The second one is to adapt existing automated deduction methods to compute this new kind of answer, using either deduction or abduction techniques.

Now, the information which can be accessed via Internet is not formally struc- tured in that way. Rather, in most cases, it is represented in natural languages and queries are no more expressed in a formal language but by keywords. These key- words, from a logical point of view, may be constant symbols or predicate symbols. Then, it is important to extend automated deduction methods to retrieve the overall information about one or several given entities.

The work presented in this paper tries to propose theoretical foundations and practical methods to design tools that allow to retrieve the overall information about a given entity. It is based on previous works by philosophers and logicians [13,16,8,1,15], and also on works about automated deduction [18,2,14,12,10,11]. Our main objective in defining these practical methods was to define a bridge between the theoretical definitions of relevant information and an automated resolution strategy which is as efficient as linear resolution. We are perfectly aware that more efficient strategies could be designed.

In the following section 2 we have classified the different approaches to store and retrieve information using examples. In section 3 are presented the theoretical foundations that allow to characterize the information which is about a given entity. The next section is devoted to the presentation of automated deduction methods to retrieve this information. Finally, in the last section is presented a set of open questions that deserve further researches.

Proof schema. Let L2 be the literal in C2 which is resolved with a literal in C1. Without loss of generality we can assume that this literal in C1 is an instance of a literal in E2 which is called L' .

Let E1 and E2 be the two clauses such that C1 is their resolvent by c-inference. Either E1 or E2 can be resolved with the clause C2 (see the proof of Theorem 4.17). Without lost of generality it can be assumed that this clause is E2.

From Theorem 4.17 the R-deduction of C can be transformed as follows: an l-inference infers the clause F from E2 and C2, and a c-inference infers the clause C from E1 and F . In this transformation the l-deduction of C2 and the R-deductions of E1 and E2 remain unchanged.

Therefore C1 is a c-clause and C2 is an l-clause (or vice versa). Then, from Theorem 4.11 there is an l-deduction of C2 from S and from Theorem 4.13 there is a c-deduction of C1 from S. Therefore, from Theorem 4.18 there is an lc-deduction of C from S.	 

For most of the applications, as mentioned in section 2, we have to generate the set of clauses (l-clauses, c-clauses or lc-clauses) which are in the answer. The previous theorems could be applied to generate this set. In addition this set should be minimal with respect to redundancy. The design of algorithms to implement these methods deserves further researches.

Complete syntactical characterization. The decidability of the class of formulas that are about a given entity is an open problem. In the case of a positive answer to this problem it would be interesting to find a complete characterization of this class.

These problems should be refined to the case where aboutness is analyzed in the context of a given theory (see [6]). Indeed, a sentence may be or not about an entity depending on the fact that it is considered or not in the context of a theory. For instance, the formula: accident(Smith) V accident(Dupont) is about Dupont in the absence of context. However, in the context of a theory where we have: accident(Smith), the same formula is not about Dupont, because in this context accident(Smith) V accident(Dupont) is always true.

Language extension to function symbols. If we accept function symbols in the language we have to extend the Definition 3.4 to functions. A possible extension to be investigated is to have a very similar treatment of predicate symbols and function symbols in this definition, that is: the interpretation of function symbols should remain unchanged if the arguments of the function are different of c or if their interpretations are not the same as the interpretation of c.

Sentences about a given topic. It may be that the information about a given an entity is too large to be efficiently exploited. For instance, if one asks the overall information about a given drug the answer may be extremely large. In that case it can be more convenient to select the information about that drug which is about a given topic, like, for instance, toxicity. In [4] a logic has been proposed for reasoning about sentences that are about a given topic. The combination of this logic with the definition of sentences that are about a given entity should deserve further researches.

