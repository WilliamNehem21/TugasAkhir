Active documents as next generation document technologies may offer a solution to the system im- manent problems of traditional information distribution techniques. The purpose of the Minerva framework is to serve as a test bed and implementation base for these active document models and applications. Among other things, Minerva combines a component-oriented plugin mecha- nism, flexible and extensible user interactions, and platform independence in a homogenous way. Minerva documents are based on non-linear ordering of information, have a notion of persistency, consistency, a role concept, stateful information and a high degree of flexibility using component- technologies which have been developed during the EASYCOMP project.

Over the last twenty years, computer technology has shaped the emerg- ing information society and is nowadays an integral part of our daily life. Increasing computing power allows for the realisation of visionary ideas like those of Vannevar Bush [6], Douglas Engelbart [7] or Ted Nelson [10]. The breakthrough of the World Wide Web which was invented by Tim Berners Lee in the early nineties of the last century [4] radically changed the way of information retrieval and usage. It can be regarded as a first (rough) approx- imation of an dynamic information system. Future systems will extend these principles towards a complete solution of the aforementioned problems, over- coming the limitations of snapshot systems [3]. At the moment, the domain of active documents is in permanent flux. Therefore, the development of mod- ular and extensible frameworks supporting rapid prototyping of new concepts and techniques has highest priority. Interestingly, there are no or just a few frameworks which can serve for this purpose.

The rest of this paper is structured as follows. In section 2, we briefly give an overview of past and current active document technology and how the no- tion of active documents developed with the progress of computer technology. We will point out that there still exists a gap between the user-need of flexible and platform independent documents and document composition techniques, and the functionality offered by state-of-the-art document frameworks, even if they are component-oriented.

Section 3 identifies concepts which in our view aid to overcome these short- comings. In section 4 we introduce the Minerva framework in more detail and show how the identified general concepts are practically realised by it. We thereby focus on non-linearity and stateful document presentation. Further we present techniques used in the framework for enabling documents to access distributed functionality. Finally, we draw some preliminary conclusions from our experiences with the framework and give an outlook of future applications and stages of extension.

As the last paragraphs have shown, the importance of component technology for general software development processes has long been recognised by ma- jor IT companies. Unfortunately, only a small part of the inventiveness was trimmed towards active documents with Apple as one out of a few companies which investigated this topic intensely. As a result of the negligence of ac- tive document concepts, state of the art component models [13] are extremely generalised (CORBA, COM+, JavaBeans) and detached from higher order concepts that would help to structure such systems. Nonetheless, component technology is essential for flexible and extensible active document frameworks.

The added value generated by computer-based documents results in a new document type: the hyper document resp. the polymorphic document. A poly- morphic document is a document having a stateful representation, i.e. the data itself and the way it is presented depends on

A stateful document presentation is closely related to the concept of poly- morphism. Statefulness helps conserving polymorphism over consecutive user sessions or separating different user groups. Note that statefulness implies polymorphism, but not vice versa. On the other hand, statefulness implies persistency. More than one level of statefulness is possible: One can think of an 1:1 relation between users and documents, or a scenario, where for every user and every document more than one state is maintained.

The result is an inhomogenous and hard to handle conglomerate of technolo- gies which complicates the creation of cross-platform documents. This empha- sises the fact that the only constant is change and future document manage- ment systems have to provide mechanisms for the handling of arbitrary data types. A component-based approach where components are used as build- ing blocks for the construction of active documents seems to be a promising solution for this problem.

Explicit links between single components or connections between compo- nents and certain parts of the text are in our view not sufficient to solve the above stated problem. This category of limited environment interaction also encompasses, for example, connections between chart components and data areas in contemporary spreadsheet applications. Therefore, a powerful exten- sion of the rudimentary available concept of environment awareness has to be designed.

Theoretical concepts of active document technology have not been investi- gated with the same intensity when compared to COTS (Component Of The Shelf) approaches. Because of the flux in this domain, a complete reference implementation is not worthwhile at this point of time. A framework which aggregates the most common functionality in a platform independent way is an important premise for fast progress. Interestingly, there are no or just a few frameworks which can serve for this purpose. Minerva tries to close this gap by being a helpful test environment for future active document application development.

Separately defining each possible path through the web of information is a complex and therefore error-prone task. The Minerva framework takes a slightly different approach. Explicit path definitions are replaced by implicit ones using so-called entry and exit conditions. A document is formed by an arbitrary number of pages, the building blocks for non-linear navigation. Each of these pages is associated with its individual entry and exit condition. If a user wants to enter a page, the corresponding entry condition has to be checked. Access is only granted if the condition is fulfilled, i.e. evaluated to true. The same principle is applied in case of exit conditions: A page can only be left if and only if the associated exit condition is evaluated to

The concept of component consistency is the foundation of polymorphic documents. By defining a two-valued consistency (i.e. consistency states true and false), a component can propagate information to the surrounding shell, in this case, the embedding page or the document the component is an element of.

As the consistency state of a component may be part of a page condition, this mechanism allows the realisation of quite sophisticated polymorphic doc- uments. Suppose there is a multiple choice component, whose internal state of consistency depends on the user-selection out of a set of possible answers. The component is consistent, i.e. a consistency query results in true, if and only if the user has selected the right answers out of the available pool of answers. By including the state of such a multiple choice component into the display condition(s) of pages, a mathematical course may present the full text or just the definitions, depending on the user-selection.

User-defined component consistency constraints may be used for grouping components logically. Suppose a set of multiple choice components a user has to answer. By making the consistency of one component dependend on the state of consistency of the other components, this component can serve as the master, i.e. the component whose state of consistency is regarded as the aggregation of the consistency of all slave components. Instead of listing all multiple choice components, a document author can reach the same effect by just referencing the master component.

When inserted into text, a component is able to display its data at the position of insertion. Under some circumstances, displaying data just at one place is not sufficient. To circumvent this limitation, Minerva introduces the so called multi-view concept, which is similar to the one used in OpenDoc. A compo- nent can be associated with an arbitrary, user-defined number of additional

Because of the polymorphic behaviour of Minerva documents which is caused by session-awareness and non-linearity, the framework has to offer appropriate mechanisms to distinguish different document users, i.e. different document sessions. If a user decides to end the current document session, snapshots of the states of all components embedded into the text and the information concerning already visited pages (so called history information) have to be taken and stored using serialisation mechanisms.

When a reader starts using the document again, the system checks for the availability of session data. If on-hand, this data is used to reconstruct the document state at the time of the last usage. Besides being able to restore the last valid state of the document, this mechanism can be used to establish feedback loops between users and the author. There are several scenarios one can think of:

Session information can be used to support the role allocation in a teacher- student scenario. Students process a questionnaire which is part of the document and send their session information back to the teacher. The teacher can read in the session information and analyse the data of the questionnaire.

Annotations can be associated with any text part of the document. To insert an annotation, the user selects a text fragment and enters the desired annotation. Everytime the mouse cursor is moved over such a marked text area, the associated annotation is displayed.

An example for this is the LATEX-component of the Minerva framework. This component is used in the context of learning courses and enables the user to input a mathematical formula using LATEX syntax. This formula can be transformed into an image, which is displayed using the aforementioned view mechanism. To render the formula entered by the user, the component has to make use of the services of a standard LATEX installation. To assume that for every host this active document is rendered on, a LATEX distribution is installed and available to the user is just illusory.

As we have seen in the preceeding sections, the Minerva framework is an appropriate foundation for the development of active documents. The frame- work establishes a component-oriented document model by an extensible plu- gin mechanism. Therefore, a Minerva document can actually be characterised as a web of components.

Most of the documents we have created using the Minerva framework focus on the e-Learning domain. We plan to integrate the Minerva framework and active documents in general into the education of undergraduates more tightly. To this end, we converted conventional lecture scripts into active documents ready to use for the students.

6 Jython is a full compliant implementation of Python 2.1 which additionally allows to use a synthesis of the Python and the Java programming language. See [8] for more details about Jython and [11] for details about the Python programming language.

