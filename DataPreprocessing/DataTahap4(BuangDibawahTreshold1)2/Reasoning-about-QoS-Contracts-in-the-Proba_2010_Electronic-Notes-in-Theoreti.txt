We do not allow var to occur in the scope of other control statements. Assign- ments are atomic. Parameters are passed by value. A mutual recursion statement can trigger an infinite computation. Components are passive. The active part of a program is just a piece of code, typically a collection of concurrently running inter- leaved threads. The syntax of control statements deliberately makes tail-recursion the only expressible form of repetitive behaviour. We give no details on the type system and tacitly assume an appropriately many-sorted system of DC .

which express that computation time is negligible, a process can never be both running and terminated, and, once terminated, is never re-activated. A dedicated pair of state variables R and W describes the status of each thread. N marks negligible time for all threads. The formulas

mean that the variables from V preserve their values. KR(V ) additionally means that the thread is active throughout the reference interval. The clauses below define [[.]]V , where V is the set of program variables which are in the scope in the given code.

for all k can be derived in PITL and, by the definition of , limk Ak = FC(t). Taking this limit briefly takes us outside PITL. The part of the derivation within PITL is a formalisation of a standard calculation. Let

