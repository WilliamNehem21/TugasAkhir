Behavior information. For the BCM application, its behavior demonstrates dis- crete, reactive and timing characteristics. Thus, the behavior information should includes the relation between the inputs and outputs, the collaboration among sev- eral functionalities, and some timing constraints such as timeout, deadlines etc.

Communication information. It mainly includes communication topology, sig- nals and protocols which communicate between an ECU and its environments. In automotive systems, bus technologies (CAN, LIN, Flexray and MOST) are widely used to connect an ECU with its environment, and signals transmit over buses to transfer data and control commands. There exists a close relation between the com- munication information and the behavior information, because the functionalities are usually triggered by the received signals, and their outputs are also transmitted via signals.

type), and a set of connectors(elements of ADLConnectorPrototype). A function prototype must appear as a part of an element of ADLFunctionType, and itself is typed by an element of ADLFunctionType. Connectors can be classified as two categories: delegate and assembly, the former connects the ports of a function type and those of its contained function prototypes, and the latter connects the ports of two function prototypes. Every flow port is associated with a data type, which specifies the properties of the data exchanged via this port.

Timed automata formalism is an extension of traditional untimed automata, by in- troducing time clocks and timed invariants to describe timing behaviors of systems. A timed automaton interacts with its environment through channels and global variables. To simulate and verify a target timed automaton, we must additionally model its environments in terms of timed automata, and compose them parallel to form a network of timed automata.

For the simulation and verification purposes, in this paper, we choose UPPAAL version [17] of timed automata as the formalism. UPPAAL version extends pure timed automata with a number of features. One of the significant features is that the expressions are allowed to use bounded integer variables (or arrays of these types) as well as clocks, this extension will enhance the expressiveness of timed automata, allowing us to model complicated guard conditions, assignments and invariants. In what follows, if no specific explanation, the term timed automata is referred to the UPPAAL extension version.

The signals, in fact, are of the variables only handled by the software of an ECU. An ECU may sense (or act on) its environment via sensors (or actuators), physical wirings or bus networks. No matter what kinds of devices or medias are used by an ECU to communicate with its environment, from the software viewpoints, signals are the only way that an ECU sense and actuate on its environment, and all the devices and medias can be abstracted as the transformers which transform the physical variables of the environment (described with the ports) to the logical variables of software (described with the signals). Therefore, the input signals input signals actually constitute the variables INPUT, and the output signals output signals actually constitute the variables OUTPUT; and IN and OUT are of the data refinement relations (e.g., transformers) between the ports and the signals.

provided by GME. In GME, constraints are defined on the elements of the meta- model with OCL language. Developers should designate the model element (of the meta-model) where the constraint will be attached, and the time when the constraint checking is triggered. When the constraint is violated in modeling time, an alarm will arise at the triggering time; Add-on Interfaces provide developers a means to developing their own programs and integrating them with GME. For example, in our tool support, UPPAAL tool is integrated through these interfaces; Model Access Interfaces provide a set of interfaces allowing us to access the model elements through programming.

At present, this tool has been used in the BCM project. This project includes a total of 8 main functions, more than 40 ports and 90 signals are involved. Obviously, it is difficult to manage such a large model if no tool support was available.

In this section, we introduce how to simulate and verify the functionalities with our tool. Since our tool borrows UPPAAL tool to do these tasks, we mainly intro- duce the procedure of transforming the models to an UPPAAL specification. The transformation procedure will combine the structure model and behavior model to- gether, because the channels, global variables appeared in an UPPAAL specification are actually the ports depicted in the structure model. Therefore, we can also view the transformed UPPAAL specification as the integration of structure and behavior models.

This work is inspired by the works [1], [2], [5] and [6]. [1] is a platform-based design methodology for embedded systems, and developed an environment, called Metropolis, to support it. This methodology separates an embedded system as several orthogonal aspects, such as computation and communication, function and architecture, and behavior and performance parameters. Each of the aspects are represented by UML notations. Work [2,5] presents the rCOS method of model driven design of component-based software. It emphasizes on the integrated use of different modeling notations for multidimensional modeling to support separation of concerns and and incremental development. The work presented in [6] defines the different dimensions of structures, data, functionality and interaction and shows how they are represented in UML diagrams. Theoretical study of relationship between

The main ideas of this paper derive from these works, however in this paper, we try to apply them to the domain of automotive software, and try to make them prac- tical for actual development. Domain characteristics and application background make us to choose different modeling notations for automotive software. For exam- ple, we choose EAST-ADL2 to describe the structure of software, because on one side EAST-ADL2 is an industrial standard which has been widely recognized by engineers, and on the other side, it is restrictive and expressive enough to present the expected structure information.

For complicated software, a single formalism usually does not work for all system aspects, therefore many works dedicate on the integrated formal methods, which combine several well-built formal methods together to specify the whole system. CSP-OZ [15] is a method which integrates both CSP and Object-Z formalisms. CSP is used to model the behavior aspect and Object-Z for data structures and state-based specifications. To model the time-related behavior, CSP-OZ-DC [16] formalism is proposed, which additionally integrates duration calculus formulas to specify the timing properties of systems. In this paper, the timing behavior is modeled by both timed automata and duration calculus formulas. The former is used to model the top-level operational (reactive) behavior of software, and the latter is used to specify the temporal changes of signal values.

Zhiming Liu, Charles Morisset and Volker Stolz. rCOS: Theory and Tool for Component-Based Model Driven Development. In F. Arbab and M. Sirjani, editors, International Symposium on Fundamentals of Software Engineering (FSEN 2009), volume 5961 of Lecture Notes in Computer Science, pages 62-80. Springer, 2010.

