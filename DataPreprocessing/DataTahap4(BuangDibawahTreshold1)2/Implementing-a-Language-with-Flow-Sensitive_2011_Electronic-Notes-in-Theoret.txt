Numerous attempts have been made to bridge the gap between static and dy- namic languages. Scala [45], C#3.0 [6], OCaml [43] and, most recently, Java 7 all employ local type inference (in some form) to reduce syntactic overhead. Techniques such as gradual typing [46,50], soft typing [11] and hybrid typing [20] enable a tran- sitory position where some parts of a program are statically typed, and others are

Nullable references have proved a significant source of error in languages such as Java [29]. The issue is that, in such languages, one can treat nullable references as though they are non-null references [40]. Many solutions have been proposed which strictly distinguish these two forms using static type systems [18,17,41,35].

Implementing these Shapes in most statically-typed languages would be more cumbersome and more verbose. In modern object-oriented languages, like Java, expressions must still be explicitly retyped.  For example, after a test such as s instanceof Circle, we must introduce a new variable, say c, with type Circle as an alias for s, and use c whenever we wanted to access s as a circle.

Statically typed languages, such as Java, employ nominal typing for recursive data types. This results in rigid hierarchies which are often difficult to extend. In con- trast, Whiley employs structural subtyping of records [10] to give greater flexibility. For example, the following code defines a Border record:

Whiley represents numbers on the JVM in a similar fashion to Clojure [28]. More specifically, ints and reals are represented using custom BigInteger and BigRational classes which automatically resize to prevent overflow. Whiley re- quires that integers are truly treated as subtypes of reals. For example:

Since variable d is guaranteed to be a list of some sought, its type on entry is translated to List on the JVM. Thus, Whiley cannot use an instanceof test on d directly to distinguish the two cases. Instead, we must examine the first element of the list and test this. Thus, if the first element of the list is itself a list, then the true branch is taken 3 .

Since variable r is guaranteed to be a record of some sort, its type on entry is trans- lated as Object[]. Thus, implementing the type test using instanceof does not make sense, as this will not distinguish the two different kinds of record. Instead, we must check whether r has fields x and y, or not. To support this, the represen- tation of records must also associate the corresponding field name with each slot in the Object[] array. This is achieved by reserving the first slot of the array as a reference to an array of field names, each of which identifies the name ofa remaining slot from the outer array.

Distinguishing between different record types can be optimised by reducing the number of field presence checks. For example, in the above, there is little point in checking for the presence of field x, since it is guaranteed in both cases. The Whiley compiler generates the minimal number of field checks to be certain which of the possible cases is present.

Information Flow Analysis is the problem is tracking the flow of informa- tion, usually to restrict certain flows based for security reasons. The work of Hunt and Sands is relevant here, since they adopt a flow-sensitive approach [30]. Their system is presented in the context of a simple While language not dissimilar to ours, although they do not account for the effect of conditionals. Russo et al. use an extended version of this system to compare dynamic and static approaches [44]. They demonstrate that a purely dynamic system will reject programs that are con- sidered type-safe under the Hunt and Sands system.  JFlow extends Java with

Typestate Analysis focuses on flow-sensitive reasoning about the state of ob- jects, normally to enforce temporal safety properties. Typestates are finite-state automatons which can encode usage rules for common APIs (e.g. a file is never read before being opened), and were pioneered by Strom and Yellin [48,49]. Fink et al. present an interprocedural, flow-sensitive typestate verification system which is staged to reduce overhead [19]. Bodden et al. develop an interprocedural typestate analysis which is flow-sensitive at the intra-procedural level [9]. This is a hybrid system which attempts to eliminate all failure points statically, but uses dynamic checks when necessary. This was later extended to include a backward propagation step that improves precision [8].

The Whiley language implements a flow-sensitive and structural type system on the JVM. This permits variables to be declared implicitly, have multiple types within a function, and be retyped after runtime type tests. The result is a statically-typed language which, for the most part, has the look and feel of a dynamic language. In

