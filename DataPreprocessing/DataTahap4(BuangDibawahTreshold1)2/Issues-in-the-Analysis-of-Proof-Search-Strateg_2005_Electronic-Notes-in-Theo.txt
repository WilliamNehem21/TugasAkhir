The existing techniques for permutation analysis have been adapted to partic- ular sets of inference rules. There are many situations where the permutations can not be explained by the above definitions. In particular the above analysis of permutations via the notions of active and principal formulae is sometimes too coarse to capture when permutations are possible.

ther checking of permutabilities of given rules. We could say that the notion of strong permutation position is dedicated to the analysis of possible permu- tations in a given proof i.e. when we have the concrete instances of a given inference rule. Recall that such permutations and inference movements in a

The active, quasi-active, principal and extra part of an inference rule are not changed by its permutation up or down, in a given proof. The context part of an inference can change during inference permutation. The appropriate changes in the context have been specified in detail.

As noted in Subection 4.2 of [6], there are some non-permutabilities which can be overcome by taking special cases into account. One such case is when the unary rule is not just above the left premise of the lower rule, but above both of them. The idea is to notice the subproof as shown on the left (if it exists) and to (try to) transform it into the right-hand subproof:

Theorem 4.7 If we eliminate redundant steps in a given proof prior to any other proof transformation (i.e. prior to any permutation), then a permutation of a strong additive rule J over a unary rule I results only in the permutation result of the form

Success in a proof search is not simply a matter of finding a proof, but of providing more information about provability. Parts of a constructive proof may be irrelevant to the actual computation which results. It is also obvious that a more efficient implementation of proof search strategies demands the finer control and management of the formulae involved in the proof-search.

We will briefly, informally explain our approach on the propositional frag- ment of linear logic excluding contraction and binary additive rules. These rules may be incorporated into what follows without much difficulty. Also, in the rest of this section we restrict our attention to detection and elimination of unused formulae that appear in the succedent only.

According to the constraints generated in step 4, select atoms that can be deleted simultaneously from the proof. Delete every appearance of the selected atoms i.e. every appearance of (sub)formulae made up of the se- lected atoms. Delete any rule inferences in which at least one active formula

