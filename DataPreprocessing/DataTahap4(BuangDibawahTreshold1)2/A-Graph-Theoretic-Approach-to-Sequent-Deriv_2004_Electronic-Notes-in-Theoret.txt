In the context ofLC-graphs, when we see a plus-variable (resp. minus- variable, lambda-variable etc.), we call it a plus-node (resp. minus-node, lambda-node etc.). In addition, we call a node in G a terminal node iff it has an out-degree of 0. Note, however, that plus-nodes often occur in terms that label negative axiomatic formulae (a negative occurrence of a plus node), but they are still plus-nodes. These arise from the following two lexical unfolding rules:

LC-graphs represent the substitutions that must be carried out in the final step ofproof net construction. Each plus-node corresponds to a redex for a substitution that must be replaced with a term composed of the plus- nodes and minus-nodes that it points to. With this intuition in mind, the relevance of the LC-graph integrity criteria to proof net construction can be demonstrated.

Proof. Plus-nodes acquire incoming arcs either through a negative occur- rence (which receives one arc from an axiom link) or through a lambda- node parent. A plus-node labelling a positive terminal formula has neither ofthese, and therefore has an in-degree of0.

Proof. By inspection ofthe lexical unfolding rules, it can be observed that every minus-node appears in the label of one axiomatic formula. Since a linkage must be a complete matching of axiomatic formulae by axiom links, every minus-node receives one incoming arc from an axiom link. Minus-daughters additionally receive one incoming arc from their lambda- node parents.	2

Simple plus-nodes have unbounded out-degree. The reason for this is that simple plus-nodes owe their outgoing arcs to axiom links. Axiom links map to all ofthe variables that appear in the term labelling a negative ax- iomatic formula, and there is no limit on the number of variables in that term. We can distinguish one particular outgoing arc, however:

Proof. The terms that these axiom links map to contain exactly one free minus-node. This can be proven by induction on the number of lexical unfolding steps used to derive them. The ones that were created by a pos- itive unfolding rule are minus-daughters, and therefore consist of a single minus-node. The ones that were created by a negative unfolding rule con- sist of a term with a lower number of lexical unfolding steps applied to a new plus-node.	2

Proof. If v is not a minus-daughter of a lambda-node, then by Proposi- tion 4.1 and Proposition 4.2, it has an in-degree of 1. Furthermore, by Proposition 4.7, every intermediate node on the paths u ; v and w ; v is a plus-node, and by Proposition 4.1, has an in-degree of1.	2

We call the axiomatic label referred to in Proposition 4.9 the axiomatic re- flection of the proper root node. If a positive terminal formula is a basic category (and thus also an axiomatic formula), then the axiomatic reflec- tion ofits proper root node is the proper root node itself.

Proof. Since the LC-graph is acyclic, its nodes can be topologically sorted. If we always choose the most highly ranked redex according to this order to expand next, then the rank of the most highly ranked redex strictly de- creases at each step of variable substitution, and thus variable substitu- tion terminates.	2

Proof. Given I(3), there is likewise an occurrence of v in s. If v also oc- curred outside s, then there would be a path from some plus-node w ; v, such that neither u ; w (and thus expands to a subterm of s) nor w ; u (with v:s being a subterm ofthe expansion of w).

Proof. Ifthere is a unique node with in-degree 0, then by Proposition 4.1, there is a unique positive terminal formula. All nodes are path-accessible from the unique proper root node, including the minus-nodes. Since vari- able substitution begins with this proper root node, and since, by Propo- sition 4.3, every minus-node has out-degree 0, applying all substitutions

Proof. Given PN(3), each subterm v:s corresponds to a lambda-node with a minus-daughter v, and a plus-daughter u, whose expansion under variable substitution yields s. The occurrence of v in s then means that there is a path u ; v.	2

All other nodes in the LC-graph were introduced at a location in the lexical unfolding with a negative formula somewhere beneath them. The proofthat these remaining nodes are path-accessible from the proper root node is by induction on the number oflexical unfolding steps down to the lowest such negative formula. In order for the induction to carry through, we must strengthen the claim by adding the condition that for minus- nodes, there exists a path whose last step arises from an axiom link.

The base cases are precisely the minus-nodes labelling negative termi- nal formulae and the minus-daughters of lambda-nodes along the path from the proper root to its axiomatic reflection. For the former category, the last step must be an axiom link because the negative terminal formu- lae are not daughters ofa lambda-node. For the latter category, I(3) holds by Proposition 4.13, so each of these minus-daughters, m, has a plus- daughter sister, p, such that there is a path p ; m. The last step of this path must be due to an axiom link, since the lambda-node parent of p and

Proof. Terminal plus-nodes and improper root nodes have a negative (resp. positive) occurrence inside a given sublinkage, and a positive (resp. negative) occurrence outside the sublinkage. But the positive and nega- tive occurrences of a node, when both exist, necessarily derive from the same lexical unfolding, i.e., the lexical unfolding of the same terminal for- mula. That means that this lexical unfolding must be peripheral, since one occurrence, and thus part of the unfolding, falls outside the sublinkage.

Among the three integrity criteria, I(2) stands out because it demands that a particular kind ofpath, namely a cycle, does not exist, whereas I(3) and I(CT) demand that a particular kind ofpath does exist. This makes I(2) easy to enforce incrementally. Before asserting an edge, we simply discard the the LC-graphs with cycles from its set. If no LC-graphs remain, then the edge itselfcan be discarded.

Clearly, the most significant remaining question is how to combine LC- graphs during parsing so as to avoid an exponential explosion in the size of the set of LC-graphs attached to each edge. One partial step in this direction would be the conjecture that iftwo LC-graphs for the same edge can both produce an integral spanning linkage, then both of them share the same set of paths from improper root nodes to terminal plus-nodes. In other words, they behave the same way when considering only their peripheral formulae. By itself, this piece of knowledge cannot be used to prune away LC-graphs of sublinkages, however, because, given two LC- graphs with different sets of paths from improper root nodes to terminal plus-nodes, it does provide a way of determining which set is the correct one.

