DM [17] and ER-leap [19]. Most of these approaches involve the use of appropriate data structures in order to generate the simulation events efficiently. For example, the optimised DM makes use of a dependency graph to avoid recalculating rates that remain unchanged.

We have implemented K-skip following its description in the original paper, in or- der to produce some comparative results. The error parameter that we have used for K-skip is 0.01, which is the smallest value used in the original work. We also highlight some computational issues not considered in [2] that arise from the fact that one random number is used to produce an entire trajectory.

In Section 2, we introduce some concepts used throughout the paper. Sections 3 and 4 contain the theoretical details of our work. Some implementation issues are discussed in Section 5. Experimental results are presented in Section 6. Finally, we summarise the conclusions in Section 7.

One desirable property of our approach is that it gives an estimation for the duration of all of the transitions involved in a trajectory. On the contrary, the Gamma sampling used in K-skip only produces the total duration of k transitions. While both approaches use a single random number to determine the duration of trajectories, K-skip is expected to be superior from a performance point of view. However, our method produces trajectories that are as detailed as the ones of the original Markov chain.

The efficiency of our algorithm stems from the fact that it generates fewer random numbers. One of the most popular random generators in the literature is Mersenne Twister (MT) [18]. It produces high quality random numbers while it exhibits performance comparable to the most efficient algorithms of its kind, as can be seen in [15]. We have developed our algorithm in Java using a number of open-source libraries that contain implementations of MT, namely Apache Commons, CERN Colt, JAMES II [12] and SSJ [16]. The implementations used produce doubles whose mantissa precision is 53 bits.

[11] as presented in [7], which involves 7 reactions and 6 species. Both models have been simulated using the ODM, K-skip, and TSS. The implementation of both K- skip and TSS is based on the ODM, hence any efficiency comparisons have ODM as a baseline.

running Scientific Linux 6. The results imply that TSS is about 15 ~ 20% faster than the ODM. A second observation is that using p = 1 is not significantly faster than TSS using p = 0.1 for the geometric distribution. This means that there is no need to use a value for p greater than 0.1, as this would not result in a significant improvement in efficiency.

Comparing running times for K-skip and TSS, we see that K-skip is clearly the most efficient of the two. This is because it determines the total duration of k events by sampling from a Gamma distribution, while we determine the duration of every single event happening. We note that the speedups observed for K-skip are smaller than the values reported in [2]. This is due to the MT random number generator, which is more efficient than the ran2 algorithm used in Cai & Wen paper, as pointed out in [15]. Because we are using a more efficient random generator there is less scope to deliver speedups over the ODM. If we consider this difference, the results we have found for K-skip seem to comply with the ones reported in the original work.

We have simulated two bio-chemical models of different nature to assess the efficiency and the accuracy of the our method. The experimental results show that our approach is about 15 ~ 20% faster than the ODM, while the errors observed were found to be negligible. K-skip method I, which is a similar approach, was found to be more efficient but in some cases less accurate. Thus, TSS can be thought of as an alternative to K-skip in cases where this is possibly inappropriate.

