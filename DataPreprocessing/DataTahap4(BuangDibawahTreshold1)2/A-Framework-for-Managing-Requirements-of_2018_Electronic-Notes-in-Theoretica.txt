The Reuse Manager is composed of three modules: the Query Preprocessor, Query Ex- pander [29], and the Indexer. The first module, Query Preprocessor, is composed in turn of three components: Tokenizer, in charge of separating terms; POS Tagging, which detects different word types; and Entity Recognizer, which identifies named entities. The second module, Query Expander, is in charge of semantically expanding, where each of its com- ponents represents a different expansion strategy. Currently, the module is implemented with three strategies that are respectively based on the use of lexical relationships, the use of a database of word co-occurrence, and the recognition of named entities. Finally, the Indexer takes the products generated by the previous modules and uses them to explore the structure defined by the Definition Manager and using the Taxonomy Manager.

It is important to consider that a given word can have different meanings depending on the context or the way it is used. Therefore, the first task is tagging the words according to the way they were used by the query expressed in natural language. To do so, we used a variation of the tagger introduced in [9] (part-of-speech) and we tagged the words according to the 36 categories defined by the Penn Treebank Project 1 , which include different types of nouns, verbs, conjunctions, adverbs, etc.

After tagging, we apply the NER technique for recognizing named entities (NER 2 ) to improve tokenization. A named entity is a word or a set of words that constitutes an entity able to be classified into predefined classes. These classes include Location, Person, Organization, Money, Percent, Date and Time. Therefore, we apply NER, as it is presented in [10], to refine the initial list of words. Those entities conformed by more than one word are grouped again and tagged with its corresponding named entity class. Coming back to our example, the process would identify three entities, Calin Rovinescu , Air Canada and Montreal, tagging them as Person, Organization, and Location respectively. It makes that the words Air and Canada are not expanded separately, avoiding meaningless information with respect to the original query.

Firstly, we start tokenizing the query in such a way that each word can be treated sep- arately. Then, the list of tokens should be filtered by eliminating symbols, letters, words, and other unwanted or useless elements from the semantic point of view. These elements are called stopwords. Now, following our example and considering that during the entity recognition Calin Rovinescu and Air Canada were detected as entities, the vector of terms would be [used, Calin Rovinescu, president,inside, Air Canada,...]. We can note that the words when, by, the, were eliminated since they were classified as stopwords.

Our framework is currently implemented as a working prototype, which uses a taxonomy in a given a format and any set of functionalities described as functional datasheets. In this context, we have built a service taxonomy [8] for the geographic domain, following the standard ISO 19119 7 . We also built and indexed a set of functionalities that form the SPL.

indexers, we used the indexing engines Lucene 10 , Sphinx 11 and Minion 12 . In this way, we look to evaluate the behavior of the three expansion methods despite the chosen indexer. In addition, we wished to compare the expansion methods against the indexers without any type of semantical expansion, which gave a us a total of four elements to compare for each indexer: no semantical expansion, expansion using WordNet, expansion using DISCO and expansion using NER. Also, it is important to highlight that for each indexer we took the 10 most relevant results into consideration.

To understand the obtained results, it is important to describe the reference value for each metric. For the precision-at-n metric, values vary from 0 to 1 for each value of N, where N is the position in the result list. From the total of results for each combination, we observed how many correct results where at position 1, at position 2, and so forth. Since we used cumulative precision, there is a value of N from which precision becomes 1, this position on the list represents the value for which all relevant results where already retrieved. In the worst case scenario, this value corresponds with the total of elements. For the recall metric, the value goes from 0 to 1 and it is measured with respect to a window of elements from the retrieved list (in our case the 10 first results). Hence, a recall value of 0 represents the case where none of the elements that should have been retrieved was actually retrieved; and 1 the case where all of the elements were retrieved.

After establishing these ranges of values, it becomes possible to observe several partic- ularities on the graphics. On the one side, recall is significantly low for (less than 0.5) for the non expansion column, meaning that half of the functionalities that should have been retrieved, were not. From the techniques that use DISCO and WordNet, we can observe a clear superiority for DISCO, above all of the indexers. Finally, it is imporant to note that

Analyzing both metrhics we can observe that semantical expansion techniques present a significant increment in the correct retrieval of functionalities compared to the same process without expansion. Also, cumulative precision at n reaches 100% for lists of 10 candidates in all cases. We can observe a pretty marked diference in the recall metric between all techniques that spreads across all indexers, being DISCO the one that offers the best values followed by WordNet and followed by NER.

There are at least two main threats to validity. On the one hand the dataset could be much larger in order to obtain better quantitative results. On the other hand, experiments were realized over a single domain, which might expose a correlation between the expan- sion techniques and the application domain. Thus, the lower values of recall for the NER expansion technique might be due to this particular domain, but could perform significantly better in another context.

