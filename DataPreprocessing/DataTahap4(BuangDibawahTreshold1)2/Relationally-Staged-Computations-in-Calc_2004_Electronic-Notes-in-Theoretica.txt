The observations one can make of a process are given by a language of pre- fixes which is modelled by a copointed endofunctor over the same category of presheaves. This endofunctor is called the behaviour functor. Transition systems are the coalgebras for this behaviour functor and bisimulations are given by coalgebraic bisimulations.

area of concurrency and came to this subject as they were interested in the possibility of more abstract treatment of their subject. Given the proliferation of different process algebras and the numerous associated bisimulations, this is certainly a growing area of interest and we expect other concurrency theorists to be interested in this work. In summary, there are both good theoretical and practical reasons for the development of open bisimulation within the higher order functorial operational semantics framework that we have provided.

information is recorded in the distinction index of the open bisimulation rela- tion; after the first two bound outputs z (w) and z (y), we only need to verify that P ~{(x,y)} Q, thus ruling out all substitutions identifying x and y. For further examples and motivation see e.g. [16,15].

Open bisimulation is closed not just under transitions but also renamings which must be injective on the names which have been extruded. Thus each stage should not consist only of a set of free variables but should include a relation which says when names cannot be renamed to be the same. Thus our presheaves will be over certain subcategories of Rel and not Set. For open bisimulation, this subcategory is the category of distinction relations which we now define.

The structure exhibited in Lemma 3.2 lifts to structure of the category of D-presheaves as follows. Note that the restriction to finite distinction relations means that there are no size problems when talking about the category of D- presheaves. Rather than invent new symbols for the lifted structure, we shall use the same symbols but ensure the reader has enough information to deduce which category we are working in.

A more practical direction to take this research is that of HD-automata [10]. HD-automata seek to give an operational model of History Dependent calculi by decorating the states of automata with relevant information (free names of a processes) and establishing the correspondence between the local information in different states. These automata can be seen as concrete re- alisations of the more abstract framework [12,2]. By automatically distilling a concrete, minimised representation of a process as a history dependent au- tomata, we can expect applications in model checking and verification along the lines of [1].

