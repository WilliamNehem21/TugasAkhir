This paper is concerned with online algorithms for scheduling jobs with deadlines on a single processor. It has been known for long that unless the system is underloaded, no online scheduling algorithm can be 1-competitive, i.e., matching the performance of the optimal offline algorithm. Nevertheless, recent work has revealed that some online algorithms using a moderately faster processor (or extra processors) can significantly improve the competitiveness [10] or even be 1- competitive [16,12]. This paper takes a further step to investigate online scheduling algorithms with an even higher performance guarantee (i.e., better than 1-competitive algorithms) and in particular, presents an extra-resource analysis of the earliest-deadline-first strategy (EDF) with respect to such a higher performance guarantee.

This paper is concerned with online algorithms for scheduling jobs with dead- lines on a processor that allows preemption (see, e.g., [2,14,18,15,6]). A typical example is the earliest deadline first (EDF) algorithm, which has been widely used in many real-time systems (see [19] for a survey of EDF). We measure such online algorithms by the total work (or value) of jobs that can be com- pleted by their deadlines. An online algorithm is said to be 1 -competitive

least 1 of the total work (or value) obtained by any offline algorithm. Notice that a 1-competitive algorithm matches the performance of the optimal offline algorithm. It has been known for long that when the system is underloaded, EDF is actually 1-competitive [7]; however, in general, EDF as well as any online algorithm is not 1-competitive [8]; indeed, the best possible algorithm can match at most 1 of the total work obtained by any offline algorithm [14].

In recent years, there have been many studies on how to obtain better performance guarantee of online schedulers using a faster processor or other extra resources; such studies are often referred to as the resource augmentation or extra-resource analysis (e.g., [3,5,6,9,10,11,12,15,16,17]). Intuitively, allow- ing the online scheduler to use a processor faster than the offline scheduler provides a way to compensate the online scheduler for the lack of future infor- mation. To simplify our discussion, we first discuss the results on scheduling that aims at maximizing the total work. Kalyanasundaram and Pruhs [10] were the first to show that a moderately faster processor can guarantee a 1 -competitive algorithm, where c is a constant that can be made arbitrarily close to one. Later Lam et al. [16] further showed that EDF supplemented with admission control (denoted by EDF-AC) is indeed 1-competitive when using a speed-2 processor 4 , and more recently Koo et al. [12] showed that 1-competitiveness can also be achieved if the online scheduler exploits only two unit-speed processors.

By definition, for any c  1, an algorithm is c-competitive if and only if it is c-aggressive. In other words, aggressiveness can be regarded as an extension of competitiveness. As mentioned before, EDF-AC using a two times faster processor is 1-competitive [16], and thus 1-aggressive. It is however non-trivial whether a higher degree of aggressiveness can be achieved. In this paper we answer in the affirmative that EDF-AC can be k-aggressive for any k  1 when using a speed-(k + 1) processor.

EDF and EDF-AC: In this paper, EDF refers to the strategy of scheduling the job with the earliest deadline. Note that the current job will be preempted when a new job with an earlier deadline is released. EDF is often supplemented with some kind of admission control to avoid excessive preemption when the system is overloaded. In the following EDF-AC denotes EDF enhanced with the following simple form of admission control. Upon release, a job must pass a test to get admitted for EDF scheduling. The test simply checks whether the new job together with the previously admitted jobs can all be completed by their deadlines using EDF. Once a job is admitted, EDF-AC guarantees to complete it.

Proof. Assume that EDF-AC is busy over two or more disjoint periods. Let tl be the start time of the last busy period. Divide I into two parts I1 and I2, one for the jobs released before tl and one for the rest. If we schedule I1 and I2 by EDF-AC separately, the schedules produced are disjoint and their union is identical to the schedule of I. Since I is the smallest counter-example showing that EDF-AC is not k-aggressive, jobs in I1 (I2, respectively) can be categorized into overloaded jobs called O1 and underloaded jobs U1 (O2 and U2, respectively) such that the k-aggressive property holds (see the definition in the introduction). Consider the following categorization of I. Jobs in O = O1 O2 are considered overloaded, and jobs in U = U1 U2 underloaded. EDF-AC, when scheduling I, completes all jobs in U in time, while the amount of work scheduled by EDF-AC for overloaded jobs would still exceed that of any offline algorithm by a factor of k. In other words, I should be k-aggressive, contradicting our assumption on I.	 

Definition 2.3 Consider the moment when EDF-AC fails to admit a newly released job J. That is, when J is released, it is found that using EDF to schedule J together with all jobs admitted previously would cause some job to miss the deadline. Any such job is said to repudiate J. Note that it is possible that a job repudiates itself.

sider each busy period independently, each time categorizing those jobs re- leased during one busy period as follows. We will find the latest deadline job J among the jobs released during one busy period. If the job J repudi- ates another job during its scheduling, all jobs in the period are categorized as overloaded, and the categorization completes. Otherwise, J is categorized as underloaded, and is removed from consideration. Once we remove J, the scheduling of the remaining jobs may again contain multiple busy periods. They are categorized recursively using the same strategy. The proof above shows that the k-aggressive property holds for this categorization.

An algorithm is said to decide at release time if the decision of committing to a job to meet its deadline is made immediately when the job is released. Note that EDF-AC is an algorithm that decides at release time. For algorithms of this type, we can show that the above speed and aggressiveness are tight.

There are several open problems related to aggressiveness. It is non-trivial to us whether there exists any online algorithm that is k-aggressive when given extra unit-speed processors. The special case when k = 1 has been resolved in [12]. Furthermore, we would like to study aggressiveness in the context of multiprocessor scheduling.

