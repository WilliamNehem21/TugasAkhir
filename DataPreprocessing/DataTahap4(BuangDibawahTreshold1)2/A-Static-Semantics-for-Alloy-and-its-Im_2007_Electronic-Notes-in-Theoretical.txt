Evolution is an important and demanding software development activity, as the originally defined structure usually does not accommodate adaptations, demanding new ways to reorganize software. Modern development practices, such as program refactoring [9], improve programs while maintaining their original behavior, in order, for instance, to prepare software for change. Similarly, an object model refactoring is a transformation that improves design structure while preserving semantics. They might bring similar benefits but with a greater impact on cost and productivity,

In current practice, even using refactoring tools, programmers must rely on successive compilation and a good test suite to have some guarantee that it does not introduce type errors and preserves the observable behavior, respectively [9]. A test suite is able only to uncover errors, not to prove their absence. Moreover, usually, modifying the structure of a program, such as extracting a new class, implies updating the test suite in order to add new test cases for the new classes. Therefore, relying on a test suite is not a good way to guarantee behavior preservation. In case of structural model refactorings, most proposed transformations rely on informal

In a previous work [14], we propose model transformations for Alloy, showing a number of applications. In another work [15], we give a dynamics semantics for Alloy and show how to prove that model transformations for Alloy preserve dynamic semantics. In this work, we focus on the static semantics and show how it can be used in proposing and proving (in PVS) that model transformations for Alloy do not introduce type errors.

plex type system [7,31], these examples may also introduce a type error. Another work [3] does not consider invariants. Therefore, the examples presented in this section suggest the importance of formally proving not only that a structural model transformation preserves dynamic semantics, but also that they do not introduce any type error. This is also useful for model transformations in general, not only refactorings.

The Prototype Verification System (PVS) provides mechanized support for formal specification and verification [28]. The PVS system contains a specification lan- guage, based on simply typed higher-order logic, and a prover. Each specification consists of a collection of theories. Each theory may introduce types, variables, constants, and may introduce axioms, definitions and theorems associated with the theory. Specifications are strongly typed, meaning that every expression has an associated type.

The balance(acc) expression denotes the balance of the acc account. We can use these fields as predicates. For instance, balance(acc)(100) is a predicate stating that the balance of the acc account is 100. The WITH keyword denotes the override operator, which replaces the mapping for acc by a new tuple, if acc is originally in the function domain. In the withdraw function, the expression containing the WITH operator denotes an account with the same owner of acc, but with a balance

In this section, we give an overview of Alloy in Section 4.1 and propose a core language for it in Section 4.2. A core language for Alloy contains a small set of its constructs. It contains all constructs that cannot be expressed in term of others, thus presenting the same expressivity of Alloy. Since the core language is as expressive as any Alloy model, the results for the core language can be leveraged for Alloy.

An Alloy model or specification consists of a set of modules. Each module may contain some signature declarations and paragraphs (constraints and analysis). Sig- natures are used for defining new types, and constraint paragraphs, such as facts and functions, used to record constraints and expressions. Each signature comprises a set of objects (elements), which associate with other objects by relations declared in the signatures. A signature paragraph introduces a type and a collection of re- lations, called fields, along with the types of the fields and other constraints on the values they include.

instance, Account and Bank are disjoint. Moreover, accounts may be checking or savings. In Alloy, one signature can extend another, establishing that the extended signature is a subset of the parent signature. For instance, the values given to ChAcc form a subset of the values given to Account.

A fact is a kind of constraint paragraph. They are used to record formulae that always hold, such as invariants about the elements. The following example introduces a fact named BankConstraints, establishing general properties about the previously introduced signatures. It contains one formula stating that each account is related to exactly one customer by the owner relation. The all keyword represents the universal quantifier. The one keyword, when applied to an expression, denotes that the expression has exactly one element.

Regarding signatures, we do not consider syntactic sugar constructs, such as abstract. An abstract signature partitions its subsignatures, so all elements of the abstract signature belong to exactly one of its direct subsignatures. This con- straint can be represented by a formula. Moreover, cardinality signature qualifiers,

such as one, lone and some, may also be represented in a formula. Each signa- ture has a name, may extend a signature, in addition to possibly declaring a set of relations. Next, we declare part of the grammar considered in the core language.

Alloy has some other constructs for performing analysis, such as assertions and commands (run and check). Due to its exclusive use for performing analysis [20], they do not affect the meaning of a model. Therefore, we do not include in the core language. So, in our core language, an Alloy model may only contain signatures and facts.

The uninterpreted type Type represents a type in Alloy. In fact, we cannot use this name since it is a PVS keyword. Hereafter, when we use TYPE in capital letters, we refer to the PVS keyword. Otherwise, we refer to a type in Alloy. In Alloy, we have three kinds of names: signature, relation and variable names. The uninterpreted types representing them are declared next.

In our core language, we consider ten kinds of expressions, which are specified next. We have expressions for signatures, relations and variable names. Moreover, there are five kinds of binary expressions representing the union, intersection, difference, join and product expressions. Finally, we have the transpose and closure unary expressions. In order to formalize them, we create a PVS abstract datatype [28].

A PVS datatype is specified by providing a set of constructors, recognizers and accessors. The previous datatype has some constructors, such as SIGNAME and UNION, which allow the expressions to be constructed. For instance, the expression SIGNAME(n) is an element of this datatype if n is a signature name. The UNION? and CLOSURE? recognizers are predicates over the Expression datatype that are true when their argument is constructed using the corresponding constructor. For instance, CLOSURE?(e) is true when e is a closure expression. Suppose that we have the UNION(e1,e2) union expression, where e1 and e2 are expressions. We can use the l and r accessors to access the left and right expressions. For exam- ple, the l(UNION(e1,e2)) expression yields the e1 expression. When a datatype is type checked, a new theory is created that provides the axioms and induction principles needed to ensure that the datatype is the initial algebra defined by the constructors [28].

For example, suppose in the banking system presented in Section 4.1 we have the all b:Bank | some b.accounts formula in Alloy stating that all banks have at least one account. The some keyword, when applied to an expression, defines a predicate stating that there is at least one element in the expression. Considering our formalization for representing universal quantification formulae, the variable name x of all b:Bank | some b.acc is b, its type t is Bank and the f formula is some b.accs. Notice that all universal quantification formulae are quantified over

There are some constraints that define a well-formed signature or relation in Alloy. Next, we declare the well-defined constraints for our core language. For instance, a signature can only extend another declared in the same mod- ule (extSigsFromModel) and an Alloy model cannot have two signatures with the same name (uniqueSigName). Moreover, a signature cannot extend itself direct or indirectly (noRecExtension) and may extend at most one signature (singleInheritance). Additionally, the left and right side types of a relation must be signature names declared in the same model (relType). Finally, as pre- viously mentioned, we add a constraint stating that we cannot have two relations with the same name (uniqueRelName) in a model. Next we formalize the wfSigRel predicate.

One kind of type error in Alloy is an arity error . It is reported when we attempt to apply an operator to an expression of the wrong arity, or to combine expressions of incompatible arities. For instance, the union of a signature name and a field, such as Bank+owner, is ill-typed since they have different arities. A disjointness error happens when two relations in an expression are combined in a way that always results in an empty relation. For example, the expression Bank & Account yields a disjointness error, since this intersection is always empty.

we do not allow in our core language two variables with the same name, which is possible in Alloy. This does not restrain expressiveness since we can always rename a variable. Finally, the model m must declare a signature named T.

The same holds for product and transpose expressions. For join expressions e1.e2, at least the right type of e1 must be a super or subtype of the left type of e2. In case of closure expressions ^e1, at least the left and right types of e1 must have a subtype in common.

All type errors (arity, disjointness and irrelevance) reported in Alloy Analyzer are sound. However, reports regarding ambiguous references may generate a false alarm [7]. In Alloy, two disjoint signatures can declare relations with the same name. For example, in the following fragment describing some expressions in Alloy, notice that the subsignatures Bynary and Unary declare a relation (left) with a same name. Moreover, we have a formula stating that all unary expressions have exactly one left expression. The one keyword, when applied to an expression, denotes that the expression yields exactly one element. However, the Alloy Analyzer tool reports a false alarm stating that this formula has an unambiguous reference type error. The tool reports that it is not possible to know whether left is from Unary or Binary in the formula.

In Alloy it is possible to have none expressions, which denote the empty set relation. It has the same type (empty) of some ill-typed expressions [7]. For exam- ple, considering the formula Account = none expressing that there is no account. Although Account and none have disjoint types, this formula is well-typed in Alloy Analyzer. Therefore, we need some additional cases in some parts of our formaliza- tion for dealing with none expressions. Since none is a syntactic sugar construct,

In this section we show the importance of the static semantics in proposing and proving model transformations for Alloy in PVS. We have proposed a set of primitive laws for Alloy, stating properties about signatures, relations, facts and formulae [14]. Each primitive law defines two fine-grained structural semantics-preserving model transformations. Although they define primitive and localized transformations, we can compose them in order to derive interesting coarse-grained transformations.

When introducing r, its name must not be previously declared in the family of S (all signatures that extend or are extended by it) in order to preserve uniqueRelName valid. It is important to mention that uniqueRelName is the only property of wfSigRel that is different in full Alloy from our core language. This property states that a model cannot have two relations with the same name, which is very restrictive. In full Alloy, two relations declared in disjoint signatures can have the same name. The conditions related to the relation names of laws for the core language may be relaxed when considering full Alloy.

Moreover, T must be a signature name declared in the model in order to preserve relType. The other constraints of wfSigRel (extSigsFromModel, uniqueSigName, noRecExtension and singleInheritance) are related to signatures. Since we do not change signatures, these properties are satisfied. When removing r, all prop- erties regarding signatures are valid because we do not change them. Moreover, removing elements that are not used do not cause name conflicts. Therefore, all properties of wfSigRel are satisfied when removing a relation.

preserves semantics. Next we declare a function describing some of the conditions for introducing a relation, as established in Law 1, stating that there exists a signature named T in m1. The right function denotes the right type of a relation.

Since we are dealing with fine-grained transformations that have syntactic con- ditions, the previous two functions are easily specified. Now we are able to state the theorem in order to prove that the introduction of a relation preserves static semantics. So, we have to prove that a transformation takes a well-formed model to another well-formed model, as declared next.

So far, we have proposed a set of 21 primitive laws for Alloy. All of them are proven sound in PVS. Although they define small transformations, we can compose them and derive interesting coarse-grained transformations, such as Refactoring 1. All refactorings derived using these laws are also type safe and do not need to be proven in PVS. Therefore, we do not need to prove that the two transformations defined by Refactoring 1 preserve the static semantics.

Proving some laws in PVS shows us the importance of defining fine-grained transformations. In our opinion, coarse-grained transformations would be far more difficult to prove. The PVS prover helps us by performing several proofs or part of those lemmas automatically. In order to do that, experience with PVS is needed, for deciding when to apply the appropriate proof command.

Related work proposes a formal dynamic semantics for a subset of our core lan- guage [7,18]. The authors take into consideration the same expressions and formulae as ours, but, in contrast, they consider signatures as a syntactic sugar construct for sets. Moreover, there is no signature extension in their language. Our core language contains all elements of their language. They do not formally state when an Alloy

set of transformations for structural and behavioral diagrams. They propose some structural refactorings, such as Extract Interface. Moreover, they do not precisely state the enabling conditions. Some class diagram transformations consider OCL constraints. Evans [8] proposes deductive transformations for a subset of UML class diagrams. A semantics is proposed for a subset of UML class diagrams. He proposes five transformations, such as the Pull Up Attribute refactoring. However, some transformations do not preserve the static semantics in some situations, as shown in Section 2. These transformations can easily introduce type errors when considering OCL constraints.

Another work [26] presents some refactoring rules for UML class diagrams an- notated with OCL constraints. They describe how the OCL constraints have to be refactored to preserve their syntactical correctness. However, they do not formally prove that they preserve semantics. We can easily verify that some of their trans- formations do not preserve semantics. No transformation has been proved to be type safe, which may be dangerous in some situations, as shown in Section 2.

One transformation is very similar to our transformation defined by Refactoring 1. His work does not prove that the transformations preserve the static semantics. The conditions for each transformation are not precisely defined as presented in our work. Moreover, since it is a simple language, Bergstein considers pushing down or pulling up a relation as a primitive transformation, differently from our approach.

McComb [27] investigates refactorings for Object-Z models. He proposes three refactoring rules and show that they are complete in the sense that any Object-Z specification that does not have unbounded recursive constructs, any design may be derived, which represents a refinement of the original specification. He informally describes the enabling conditions of each refactoring rule and does not prove the static semantics preservation.

A closely related approach was developed by Tip et al. [34]. They realized that some enabling conditions and modifications to source code for refactorings involv- ing generalization in Java, for automation in Eclipse [6], depend on relationships between types of variables. These type constraints enable the tool to selectively perform transformations on source code, avoiding type errors that would otherwise prohibit the overall application of the refactoring. They manually proved that these refactorings preserves the type system of the language. In our approach, we can prove that any model transformation preserves static semantics, not only dealing with generalization.

A more practical work proposes refactorings [9] for Java programs. The author guarantees that two programs have the same behavior if the resulting program compiles and does not present failures in a test suite. The compilation is necessary in order to guarantee that it preserves the static semantics and the test suite makes sure that the behavior is preserved.

One of the most difficult tasks for proposing refactorings is to define the enabling conditions. This is the most important part for refactoring tools developers. They rely on these conditions to automate refactorings. We can waste a great amount of time trying to prove something that cannot be accomplished. The experience of proving some laws in PVS shows us that it becomes easier (dealing with fine- grained transformations) to identify which conditions are necessary for a specific transformation.

