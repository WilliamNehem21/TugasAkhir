we present reduction strategies for the weak reduction relation: call-by-name, call-by-value, and call-by-need (emphasising this last one), proving that they are indeed strategies in a technical sense. Since neededness is usually undecid- able, extra features (like sharing graphs, environments, explicit substitutions) are generally added to actually implement call-by-need. In contrast, for System L, we can define call-by-need within the calculus in an effective way.

In general, call-by-need (and even minimal strategies) may copy expressions in some situations (for example inside abstractions). Sharing of subterms across different instantiations of bound variables is addressed by optimal reduction strate- gies [19,17,12,21,28]. Although this line of research applied to System L is a promis- ing one, optimal reduction in this sense is not an issue in this paper: here we follow the weak reduction approach, as is standard in the implementation of functional languages [23].

We do not want to recall too much about higher-order rewriting. The systems defined in this paper will fit the framework of context-sensitive conditional expres- sion reduction systems (CERS) [16]. In particular, the notion of residuals make sense in these systems [7].

In [26], van Oostrom gives a method to reduce the global problem of proving that a strategy is minimal (or maximal), to a verification of certain properties of local reduction diagrams. To avoid recalling all that work here, we combine some parts of Theorems 1 and 2 of [26], as the following theorem, which will be used to show the minimality of call-by-need among weak strategies (Theorem 6.8).

Proof. Apart from easy syntactic verifications, we have to notice that all descen- dants of a redex are redexes. This comes from the preservation of linearity con- straints, subject reduction [1], and the fact that a closed term cannot become open during reduction.	 

Semantically, we have: iter (Sn0) u w = wn(u) (i.e. n copies of w applied to u). However as shown in the given rewrite rules, we actually make use of n + 1 occur- rences of w, and then throw one away. To circumvent this defect we change the definition in order to stop at S0 rather than 0:

We remark the relation with fold right and fold left for lists in functional program- ming. These operators encapsulate recursion patterns on lists, in the same way as an iterator on numbers encapsulates recursion patterns on numbers. The difference between foldl and foldr is simply the order in which the elements of the lists are accessed: left-to-right, or right-to-left. A left-to-right approach can start working on elements of lists, even infinite lists, whereas the right-to-left approach works well in the finite case (i.e. it is strict in the list). The same reasoning applies to our iterator. Of course, the origins of these operators on lists are indeed iterators on numbers (primitive recursive schemes).

With the inner-iter reduction policy, iter is strict in its first argument. For example, in an untyped calculus, if the number is not terminating, then neither is the iter (irrespectively of the evaluation order). This will not be a problem in System L because it is a strongly normalising calculus.

Definition 6.1 Call-by-name reduction is leftmost outermost weak reduction. In particular, iteration is by name. Call-by-value differs from call-by-name by reducing the argument of an application before contracting the redex and by using iteration by value instead of iteration by name.

Otherwise, for some multi-hole context C, this reduction can be decomposed as w''[iter (S t) u w/x] dn1 C[w, w,..., w] d C[w', w,..., w] dn2 v with n = n1 +n2 + 1, and we can mimic this reduction on w''[iter (S t) u w'/x], omitting at least one step (because at least one residual of a needed redex is needed): w''[iter (S t) u w'/x] dn1

System L is a calculus that isolates the linear and non-linear components of a computation. We have used this calculus to make a study of evaluation strategies in this context, where it is precisely the non-linear aspects of the computation that we need to control. This leads to a simple description of strategies and to a definition of minimal strategies within the calculus. Moreover, We anticipate that we can make heavy use of these results in current implementation work based around System L.

