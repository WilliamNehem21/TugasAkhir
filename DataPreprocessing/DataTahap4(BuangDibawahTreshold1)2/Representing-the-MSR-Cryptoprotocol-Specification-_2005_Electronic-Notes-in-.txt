for the specification of complex cryptographic protocols, possibly structured as a collection of coordinated subprotocols [3,5]. It uses strongly-typed multiset rewriting rules over first-order atomic formulas to express protocol actions and relies on a form of existential quantification to symbolically model the generation of nonces and other fresh data. Dependent types are a useful abstraction mechanism not available in other languages. For instance, the dependency of public/private keys on their owner can be naturally expressed at the type level. Finally, MSR supports an array of useful static checks that include type-checking [4] and data access verification [6].

This work serves as the basis for a forthcoming prototype of MSR, which will eventually run on top of Maude [9]. The linguistic affinity between MSR and RWLDT allow for a much simpler construction than a direct implemen- tation. Mapping MSR into the popular CAPSL Intermediate Language [10] would have been more difficult, because MSR has a much richer typing infras- tructure than CIL.

The remainder of this paper is organized as follows: We introduce MSR and RWLDT in Sections 3 and 4, respectively. In Section 5 we define the mapping from MSR into RWLDT, state its key properties, and outline some simple optimizations. It is applied to our running example, the Otway-Rees protocol, in Section 6. We conclude this paper with a discussion of limitations, implementation aspects, and possible extensions of our approach. First, some notation.

We use [] to denote the empty list and a comma to denote list concatenation. We write identifiers ranging over lists in bold, and indicate their length with a superscript. Therefore, Xn denotes a list of n elements. We will generally omit the length information when irrelevant or easily deducible from the context.

(X) and application. Here, X can be either a bound variable or a previously declared identifier. For conciseness, we describe atomic types (i.e., objects of kind type) as if they were terms. Reserved atomic types include the type of states (state), principals (princ) and messages (msg). We write {X : T }T ' for

For the following we assume that MSR specifications do not use names intro- duced by initial context other than state, princ and msg. We also assume that all declared and bound variables are distinct. This allows a clear presentation of the main ideas without worrying about renaming and capturing. We then define the translation of MSR kinds, types, states, and contexts as follows:

The idea behind the definition of role is that it maps each MSR role i to several RWLDT rewrite axioms: There is one rewrite axiom labelled Ai, representing the instantiation of this role. In addition, there is one rewrite axiom labelled Aij (generated by rule) for each of its rules j. The first axiom Ai, apart from the generation of fresh terms needed for the new instance, generates tokens (Ti1 P L),..., (Tin P L), representing the fact that none of the rules of this role have been executed yet. Each of the remaining axioms Aij simulates the corresponding MSR rule j, so that each application of a rule removes its corresponding token. This realizes the MSR policy that rules of active roles can only be executed once.

If there is at least one token (left) that represents the active role, then this token carries the full information, namely i, A, and N , to determine the initial role instance. Unfortunately, we need to argue that together all tokens of the form (Tij A N ) uniquely determine the rules of this active role, i.e., the rules that still need to be executed. The only po- tential source of confusion is that the representation may contain several

application of the rewrite axiom labeled Ai (see definition of role) in RWLDT. Using the freshness invariance lemma is it easy to see that the existential quantifiers of role i are correctly instantiated using k fresh terms N which are generated in this process. Apart from maintaining the freshness information, the only effect of the rule is that the terms (Ti1 A N ),... , (Tin A N ) are added to the RWLDT state. This can only correspond to the addition of a new instance of role i to the active role set.

The idea behind these definitions is that the rewrite axiom labelled Rij1 gener- ated by rule1 simulates the effect of instantiating role i immediated followed by the execution of one of its roles, which is j in this case. As a conse- quence it generates the formal multiset of tokens (Ti1 P L) ... (Tin P L) with (Tij P L) removed, because the corresponding rule has already been ex- ecuted. The rewrite axiom labelled Rij2 generated by rule2 takes care of the execution of remaining rules, and hence remains unchanged compared with the previous section.

Another obvious optimization is to omit the rewrite axiom Rij when the role i contains only a single rule. This optimization relies on the fact that in this case Tij can never appear in the state, an invariant that holds for the reachable states we are concerned with in the theorem. More generally, we drop any rule that depends on a Tij that is never generated. This can hap- pen, because the only rule that generates Tij has been eliminated by previous optimizations.

The full RWLDT specification successfully passes the OCC type checker, which implies that the original MSR specification is type-correct as well. The OCC prototype can further be used to explore the dynamics of the protocol. For example, to restrict the protocol execution to one instance of each role and to observe termination we add STARTi and TERMINATEDi tokens to respectively the first and last rules of each role i.

After starting the symbolic execution the system performs a series of actions each corresponding to the application of a rule. Finally, the terminating state is reached, the explicit type information is preserved, and six fresh constants have been used. An exploration of the state space using Maude shows that the above execution is the only possible one from the given initial state.

In this paper we have presented a shallow and hence efficient embedding from MSR into rewriting logic with dependent types (RWLDT), which has been in- troduced as a restricted instance of the open calculus of constructions (OCC). This mapping forms the basis for an ongoing implementation of an MSR ex- ecution and analysis environment. A mapping from RWLDT into RWL has already been implemented as part of the OCC prototype in Maude. This en- abled us to perform symbolic execution of the translated MSR specification in our example. The user interaction takes place at the level of RWLDT terms, which directly correspond to MSR terms, and hence the user does not need to be concerned with the resulting translation into RWL. A similar interface for symbolic search and model checking would be easy to implement. At the moment, we can however already export the RWL translation of the RWLDT specification and perform symbolic search and model checking at the level of

For the sake of clarity we made a number of simplifying assumptions in this paper. We decoupled the issue of inferring implicit parts of an MSR specification from the actual translation phase, which is exactly the way we would like to organize the architecture of the translator. We also assumed the absence of name clashes, an assumption that is not necessary if we use the CINNI explicit substitution calculus [13,14] and its term representation. In fact the theory and prototype for OCC are already based on this calculus.

An important part of MSR, the data access specification [6], has not been treated in this paper, because a sufficiently generic and concise formulation is still subject of ongoing work. Our most recent idea to formalize the data access specification is to use predicates inside the type theory to express the accessibility of information relative to principals. In combination with the assertional propositions of RWLDT this may simplify the representation of data access rules significantly and would provide a great deal of flexibility. Furthermore, the proof that the data access specification is satisfied would become an object inside the type theory. In fact, the logical nature of RWLDT is far from being fully exploited so far, which leads us to the last point of the conclusion.

