The Unified Modeling Language (UML) has recently become a widely accepted standard for the visualization, specification, construction, and documentation of object-oriented software systems. It is well established and used in industry as well as in research. The UML is a graphical language that comprises a number of different diagram types for different purposes. The syntax of these diagram types is defined in the UML metamodel [9]. But the semantics of the language constructs is only given in natural language. As the UML is sup- posed to support a software engineer in constructing precise models, a formal foundation for UML is needed. The graphical notation is enhanced by the Object Constraint Language (OCL), which permits to formulate constraints that cannot be expressed by the diagrams in a textual way. OCL is formally defined in [11]. Currently, the 2.0 version of UML is about to be finalized [10] but the language definition will still be informal.

The graph transformation system consists of graph transformation rules and a working graph, which represents a snapshot of the current state (hence called system state) of the modeled system. The system state changes during a run of the system, i.e. graph transformation rules are applied rewriting parts of the working graph. Using our approach modelers can validate a system model by performing system runs and comparing their expectations with the results of these runs.

In this paper we present the fundamental concept of system states and the translation of a given UML model into a graph transformation system focusing on the rules evolving from statechart and collaboration diagrams. An important aspect for us is that our approach integrates the OCL. OCL expressions that appear in the model are used in rules as well. When applying

Several other works can be found, that provide a precise semantics for parts of UML by means of graph transformation. An integrated semantics similar to the one presented here is introduced in [5] for class, object and stat- echart diagrams. Since this approach does not cover interaction diagrams, it is extended in [3] adding interaction diagrams on instance level. However, the operations have to be specified by single rules, thus only atomic operations are considered. In addition, the modeller is forced to enrich the UML model with graph transformation by himself, thus that approach is not purely UML con- form in contrast to the approach presented in this paper. This work discusses in more detail our approach that has already been presented in [15] which illustrated the basic concept only by means of an example. In the present paper, we explain the approach in a more general way.

The structure of the paper is as follows. In the next section an example model consisting of a class, collaboration, and statechart diagram is introduced and explained. Section 3 provides an overview of system states in general. The formal background of our graph transformation approach and the translation of a model into a graph transformation system is explained in Section 4, fo- cusing on the rule generation concerning the sending of messages. The paper closes with a conclusion.

The model comprises the three classes ICQServer, ICQClient, and ICQSes- sion. An ICQServer can have any number of ICQClients, while the latter can only be a client of exactly one ICQServer. The ICQClient has an attribute id, which uniquely identifies a user operating the client. This id has been created during the registration, which is necessary for users to be able to be part of ICQ chats. This registration is not modeled in our example. The actual chat of exactly two ICQClients is managed by the class ICQSession. Naturally, an ICQClient can take part in more than one chat, therefore it can be connected to any number of sessions.

In the example collaboration diagram the operations connect, establish, and receive are specified. The other called operations (e.g. print) are not specified because it is not shown which suboperations are invoked by them. Note that the operation establish is called with actual parameters (caller and callee) in the context of the connect operation, but the messages activated by establish only refer to the formal parameters of establish (c1 and c2).

diagram exists for a class, then any operation belonging to it can be called at any time. But in the case of a present statechart diagram, an operation on an object is only allowed if the object is in a state with an outgoing transition labeled with this operation. In our example, it is not allowed to execute the receive operation if the state of the session is pending. It is also not allowed to execute the establish operation if the state is ready. However, an operation that is not depicted in the statechart diagram of its class may still be executed at any time. If a transition is labeled with a guard, it has to be evaluated to true for the transition to fire. Our graphically simulated system run never violates the restrictions specified in the statechart diagrams.

Before the evolution of the system starts, the system state resembles the initial object diagram provided by the modeler. It contains nodes of type Object representing the objects that initially exist, connected to nodes of type Class, representing their class. However, it is possible, that the model com- prises statechart diagrams specifying initial object states. In this case these states are added to the system state by depicting them as nodes of type State and connecting them to the corresponding object nodes via a State link. The corresponding classes are also connected to their initial states for internal reas- ons concerning certain graph transformation rules. Further information from the statechart diagrams are not reflected in the system state but rather in the derived graph transformation rules.

Operations that belong to classes are depicted by Operation nodes that are connected to their Class nodes. To be more precise, an Operation node rep- resenting an operation of a class is connected to the class and its subclasses. Moreover, an overriding operation is connected to the class the overriden op- eration is defined for. Operation nodes that are not connected to a Class node represent use cases.

A message invokes a user-defined operation or a predefined operation like setting an attribute value, setting a local variable or creating an object. A user-defined operation is an operation that is declared in the class diagram for a specific class. For example, the message 1.2 calls a predefined operation while the message 1.3 calls a user-defined operation.

the evaluation takes place in the context of this system state rather than the system state graph. Variables representing attribute values in the usual way can also be used in both sides of a rule. These variables can also be employed in OCL expressions in the right-hand side of a rule in order to calculate new attribute values. Thus the right-hand side of a rule actually differs from the system state defined earlier in that attributes may hold general OCL expressions and not only constants.

In our system state, the sending of a message corresponds to the creation of a process node with status #waiting. When a waiting process is activated by a rule, its status changes to #active. An active process represents an operation in execution. In the following, we simply say that a rule sends a message (or invokes an operation) if it creates a process node.

The set of rules handling the invocation of the suboperations of a user- defined operation is said to execute the operation. We concentrate on these rules here. So, let us assume that there is (among many other nodes) a waiting process of a user-defined operation in the system state (technically, there is a ComplexProcess node with status = #waiting that is connected to a node).

In the simplest case (if there is no statechart diagram for the class of the sending classifier role) we only need one single rule for sending a message. The framework of the rule differs depending on the kind of message. In the following let us consider a message that calls a user-defined operation.

activator process. We assume that in the preceding rule application a proper process node has been marked with a loop. Thus, it is not necessary to connect this node to an Operation node now. This allows for recursive operation calls in spite of injective matching. A proper activator process is connected to the operation op a of class c a and has the status #waiting if the message we want to send by this rule has no predecessors in the collaboration diagram, and #active otherwise.

ute of op b and c b are set accordingly (e.g., to establish resp. ICQSession). An NAC not shown here ensures that dynamic dispatching works correctly. Finally, there is an Object node o connected to c b. That is the object the operation will be invoked on.

For each parameter par b i of op b we add a LocalVar node v b i with the same name and type. Each v b i is connected to p b. So the newly created process has a local variable for each parameter. The value attributes of the v b i,... ,v b n are set according to the arguments of the message as given in the collaboration diagram.

If a called operation has parameters, they are given as OCL argument expressions in the collaboration diagram. These expressions can be used un- changed in the rules as described above. However, such an OCL expression can contain variables that have to be bound when applying the rule and eval- uating the expression. The message can contain only variables that are known in the context of the activator process.

Let var 1,... ,var m be the free variables contained in the argument ex- pressions. Then for each var i we add a LocalVar node v a i in both sides of the rule, where the name attribute of v a i is set to the constant var i and the value attribute is set to a variable that is also named var i. All these Local- Var nodes are connected to p a. When applying the rule with any match, the match binds each var i to a concrete value, so the expressions can be evaluated and the result is inserted into the system state graph.

If the message under consideration is sent via an association role with the stereotype  local , it means that the receiver of the message is referred to in a local variable of the activator process. The name of this variable is given as the role name of the receiving classifier role. So we add a LocalVar node in both sides of the rule and connect it to p a. Its name is set to the role name from the collaboration diagram and its value is set to the receiving object o. In this way we ensure that by applying the rule the process is attached to the object that is stored in the specified local variable.

When a message is sent via an ordinary association role, i.e., an associ- ation role without any stereotype, the modeller has not yet specified how to determine a concrete receiver object. The only demand is that it is linked with the sender object with a link compliant to the association role. This is ensured in the rule by additional nodes and connections.

So far, a rule created only one process, i.e., sent one message. When several messages are specified to be sent in parallel in the collaboration diagram, all those messages are sent by one single rule. For each classifier that receives one of these messages, there is an Object node in both sides of the rule. Two messages sent to the same classifier role result in two processes attached to the same Object node. The procedure for the single messages is as described above.

A statechart diagram can be given for a UML class to specify in which order operations on an object of the class may be executed. In our chat example, the establish operation is allowed to execute only when the session is in the state pending. We assume that operations of a class that do not occur in the statechart for the class are allowed to be executed at any time. The statechart also specifies in which state the object is after an operation has been finished. In our example, the state of a session changes to ready as soon as the establish operation has been finished.

Because the statechart specifies whether an operation is allowed to execute, we have to modify the rule that starts the operation by sending the first message (or several parallel first messages). Let us assume we construct the rules that send messages according to a collaboration diagram for an operation of a class. Furthermore, let us assume that there is a statechart for this class and there are n transitions labeled with the operation. Then we split the rule that sends the first message(s) of the collaboration diagram into n versions that differ from each other by the State nodes attached the Object node and by an optional application condition. This application condition holds the OCL expression given by the optional guard of the considered transition. For this reason the rule is only applicable if the guard evaluates to true.

We have shown a translation from a UML model into a graph transformation system in order to give a precise formal semantics for a large part of UML. In this paper, we concentrated on the construction of graph transformation rules that represent the sending of messages as specified in a collaboration diagram. At the beginning, an example model has been introduced focusing on a collaboration and a statechart diagram. Then, we have described the concept of a system state being a graph representing the current state of the modeled system and being transformed by graph transformation rules as the system evolves. In the central section, we have described in a general way

Future work comprises the completion of the tool, including a user-friendly GUI. Then our approach can be evaluated in case studies that provide feedback on its usefulness. Furthermore, we will investigate how the approach can be extended with UML features not covered yet. This includes additional features of already covered diagram types but also entire diagram types like activity diagrams. Another important issue that has to be studied more extensively is how our approach allows to assert properties of UML models by examining the resulting graph transformation system.

