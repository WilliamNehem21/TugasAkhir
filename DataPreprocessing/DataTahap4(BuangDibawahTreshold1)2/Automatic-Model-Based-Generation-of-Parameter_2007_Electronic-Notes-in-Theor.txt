Test cases can be generated either from a test model, i.e. a model of the test suite, or from a model of an IUT . In the first case, test cases are designed sepa- rately from the model of the IUT , for instance using frameworks like the UML 2 Testing Profile [27]. This leads to well-tailored test cases, but might also double the modeling effort during development. In the second case, the existing models of the IUT are examined by a test case generator. Model-based test generation is well-developed for conformance testing, which aims at checking whether an IUT conforms with its specification [22,33].

Given the specification of an open system, we apply data abstraction which has already successfully been applied to model-checking open systems (e.g. [30]) to obtain a (finite) abstract system. From the abstracted system, we generate a set of abstract test cases. The generation of these test cases is guided by a test purpose [22], which defines the scenario of interest. The produced abstract test cases contain abstract data that should be concretized prior to test execution.

To instantiate abstract test cases with concrete data, we employ constraint- solving. In parallel to test generation and abstraction we transform the original specification into a rule system, which is used further for data selection. The test suite is transformed into a test oracle in order to retrieve test data. We use the data to instantiate the test case and execute it. While being executed, the IUT might diverge from the selected path. By online constraint-solving, we dynamically adapt the course of the test execution.

of conformance testing. In Section 3, we describe the syntax and semantics of the specifications, we are working with. Preliminaries for constraint-solving are given in Section 4. In Section 5, we describe our approach for data abstraction, followed by the explanation of test generation in Section 6. We applied our approach to a case study, which is described in Section 7. Finally, we conclude with Section 8. Full proofs for the lemmata in this paper can be found in [4].

The closest to our approach is symbolic test generation [8,14,23,29,36]. This method works directly on higher-level specifications given as Input-Output Symbolic Tran- sition Systems without enumerating their state space. Given a test purpose and a specification, their product is built. Those works are founded on the ioco the- ory [32]. The coreachability analysis is in these cases over-approximated by Abstract Interpretation [10]. The concept of test generation with verification techniques (TGV, [22]) is also based on ioco.

Test data determination [17] for whitebox testing has been discussed in several recent papers [16,31,34]. They are mainly based on the technique of symbolic exe- cution [9,24]. The constraint rule systems that we generate to determine test data, are comparable to [28], where also constraint rules are generated encoding the vis- ible inputs and outputs, guards and internal state changes. These rules are used to generate a set of test cases by transforming a whole system specification into Prolog. However, test cases are already present in our case and the rule system is only needed to find concrete test data.

Our approach is based on conformance testing that validates whether an implemen- tation conforms to its specification. In a theory of conformance testing [32], the notion of conformance is formalized by a conformance relation between specifica- tion and implementation that are assumed to be input output labeled transition systems (IOLTS s). In this paper, we refer to a variant of the theory, described in [22]. Quiescence is not discussed here.

set of inputs LabSpec by building the synchronous product of MSpec and MTP . The CTG may contain loops and choices between several outputs in the same state or between inputs and outputs. For this reason it is not controllable, i.e. the tester can for example not autoatically decide whether to expect an input from the IUT or to send an output to it.

The Pass verdict is assigned to those states of MCTG , which correspond to the final states of traces from [MSP ]]atrace and thus to the accept states in the test purpose. The Inconc verdict is assigned to states from which accepting states are not reachable. In this case, the state is still on a trace of MSpec but the trace does not satisfy the test purpose (traces from [MSP ]]rtrace). All unspecified outputs lead

The sets of actions Act and communicating actions Comm are necessary to declare the actions and communication issues necessary for the process definition. However, we will not discuss them here in detail. The process itself is defined as Proc in terms of Linear Process Operators [1]. To enable a graphical representation, however, we give a definition of processes based on the theory of Symbolic Tran-

tion, it does not limit our approach. The realization of our approach works on linear process operators [1]. For these, existing linearization techniques [19] can be used to obtain a single process definition for a parallel composition of a finite number of process definitions by eliminating communication and parallel composition.

A constraint solver solv () for a constraint domain D is a decision procedure that takes as an input a constraint C and returns either true, false or unknown. Whenever solv (C) returns true, C is satisfiable. Whenever solv (C) returns false, there is no solution for C and C is unsatisfiable. The value unknown indicates that a solution might exist, but could not be determined.

We do not make any assumptions about the environment of an IUT , i.e. we take the most general one. Signals coming from the environment can thus have any value. This often boosts the state space of the system to infinity. We abstract

denoted T. Values that are not influenced by the environment remain the original ones, and so they should be treated in the same way as in the original system. This data abstraction was first proposed in [30] for model checking open systems. A system obtained by this approach is a safe abstraction of the original one, meaning,

The transformation of the process specification consists in lifting all variables, expressions and guards to the new sorts. Each occurrence of a variable x of sort S , is substituted by a variable xT of type S T where S T is a safe abstraction of sort S. Each occurrence of an expression e of type S is lifted to the expression e T of sort S T. Thereby, all the newly introduced symbols (constructors and rewrite rules) are used and replace the original ones.

M T can receive only T values from environment, so the infinity of environmental data is collapsed into one value. Basically, the transformed system shows at least the traces of the original system where data influenced by environment are substituted by T values. This means, that M T simulates M . This simulation relation is now defined for concrete and abstracted IOLTS s. It is not a standard relation, since we allow the abstraction of actions. Further, we give an overview of preservation results based on [21,20].

In this section, we describe the approach of test selection and execution with data abstraction. First, we give an algorithmic overview of the whole process. Then, we describe how the necessary rule system is built and how test selection and execution work. Finally, we review our approach and prove the soundness of verdicts assigned to a test execution.

A parameterizable test case may contain traces introduced by data abstraction. Moreover, information about the relationship of symbolic variables or concrete val- ues they can be substituted with is absent. To sort out spurious traces and to obtain valuations for symbolic variables, we employ constraint-solving.

no guards are specified for inputs. The action parameters param are given by the expression e for an output, or by a variable Y for an input action, while internal actions have no action parameters. Finally, input and internal assignment actions change values of variables. This change is noted in the second state parameter of the respective rule.

In an IUT , nondeterminism may be induced, for instance, by interleavings of the behavior of single components. In these cases, it is possible that during test execu- tion the IUT leaves a trace to Pass which had been calculated beforehand and which is in principle a valid trace. Test execution then has to be adapted dynamically to the new situation.

Proof sketch: Given a finite trace, the algorithm always analyzes the next step in this trace. If there is no next step, i.e. the end of trace is reached, the algorithm terminates with Pass or None, resp. If the verdicts Fail or Inconc are assigned, the algorithm already stops without having reached the end of the trace under consideration. The lemma is proven by pointing out the exit points of the algorithm and the according assignments of verdicts.	 

An interesting aspect, especially from a practical viewpoint, is the generation of test cases directly from UML specifications, as it has been proposed in [2,26]. As a future work, we aim to adapt our approach for UML-based test case generation. Doing so, the target language of test case generation is TTCN-3 (Testing and Test Control Notation, version 3), a standardized test specification language, widely accepted by the industrial community [35].

