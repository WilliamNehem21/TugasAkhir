In the paper, we explore an alternative approach to keep the specification of different aspects to be analyzed consistent. Taking into account the number and quality of existing tools for modelling and analyzing telecommunication software, we explore semi-automatic methods to integrate these tools in a way that is as transparent as possible for users. Ideally, the designer of new services will provides only one description of the software with its most familiar language, and a toolset will generate particular specifications to analyze each aspect of interest (currently, reliability and performance). Our proposal takes advantages of recent work on model-driven architecture (mda) and xml for automating tool construction. Its applicability is shown in the context of developing new services with the active network paradigm, integrating the features of the model checker spin and the network simulator ns2.

An important issue in the formal methods community is to avoid several (prob- ably unrelated) descriptions of a given system, each one oriented to a given task (safety or reliability analysis, performance analysis, code generation, etc.). Using only one formal description for all development tasks seems to be a very ambitious trend; however, there are some languages and tools that success- fully cover several of these tasks. This is the case of tools like Times [1] and UPPAAL [11] or formal specification languages like MoDeST [13], that in par- ticular integrate time, schedulability or performance features with traditional reachability analysis. This approach of a single language (and a single descrip- tion of the system) clearly keeps all the aspects to be analyzed consistent, but with the cost of specific algorithms and tools for each kind of property to be analyzed. It is also worth noting that the resulting language could be hard to use by non-experts in the field of formal methods.

The second method for integration is based on defining intermediate repre- sentation languages (usually, new formal methods) that group features which are common to the majority of tools and existing formal methods. These languages are not usually oriented to users but to tools that produce this in- ternal representation from final user oriented languages (including both spec- ification and programming languages). This method was initially followed in the projects SPECS [34] and SEDOS [14], and more recently it is again fol- lowed with projects such as CADP [16], Bandera [22], IF [5] and Veritech [36]. Their intermediate languages allow the exchange of information among tools for common tasks like model checking, automatic code and documentation generation, static analysis, syntax checking or reduction techniques.

These objectives can be reached using standard representation languages and technologies, like the eXtended Markup Language (xml) [42] and the model-driven architecture (mda) [29] to integrate tools. We have experience with using xml technologies to implement one of the hot topics in formal methods: abstract model checking [10]. The first successful story [19] was the use of xml as the internal representation to support the transformation of the system specifications for spin. In that way we extended the model checker spin to implement data abstraction, integrating abstraction and model checking features.

A second step [20] was the use of xml Model Interchange (xmi) to allow the interchange of data among tools for Statecharts. In that work, we proposed the use of xmi to create an abstraction plug-in for statemate. In both cases, a major benefit is the possibility of completely reusing the model-checking tool, without modifying its internal code.

will benefit from xml technologies to help in the development of parsers or code generators. In order to test the viability of our approach, we have chosen the domain of telecommunication services, and particularly the active network paradigm. In this way, we are reusing and comparing experiences with the previous work in our group: a) in [35] performance/traffic analysis of active networks using ns2; b) in [18] we use spin to analyze reliability [23,9,31]. This work can be considered a step towards the creation of a more flexible inter- change language to perform different kinds of analysis, using other existing tools with complementary features.

The paper is organized as follows. The following section describes our previous experiences with analyzing active networks, using different languages and tools to describe performance and reliability models. Section 3 introduces our study of mda and xml to support the integration of the previous analysis, along with a methodology that will allow us to generate code for tools in a way as much transparent as possible for users. Section 4 gives an overview of related work and finally, Section 5 enumerates our conclusions and future work.

In practice, new services developed with ants are implemented in Java, and no previous analysis is done. Checking correctness of the services (for functional and timing properties) is usually done in the real network. Due to the lack of tools and methodologies for a priori analysis of active protocols, we have worked in the following two methods.

With the new extension to ns2 it is possible to obtain data on network traf- fic, response time and other metrics for performance. There are complete de- scriptions of realistic problems at http://www.lcc.uma.es/gisum/active), including the RMANP protocol (which is also specified in promela as ex- plained above). Like in the case of spin, more automation is desirable to construct the code for capsules and for the scenarios to be simulated.

The mda paradigm uses the well-known idea of separating the specification of the operation of a system from the implementation details, that is, from how that system will use the capabilities of a concrete platform or application to perform that operation. As mentioned before, the main concept used in mda is the model, a specification of a system for certain purposes. The model-driven approach to system development uses models to direct its design, construction, maintenance, testing and modification.

The viewpoints are techniques for establishing simplified models using a selected set of architectural concepts and structuring rules, in order to focus on particular concerns within a system representation. From different viewpoints, mda considers a platform independent viewpoint and a platform dependent one. Therefore, the platform independent viewpoint will share all common features of a model (so-called platform independent model or PIM) which are independent from the tool or platform in which the model will be finally implemented (these are platform specific models or PSMs). Usually, a PIM conforms to a specific domain metamodel, and a PSM conforms to a reduced metamodel which shares the core of the PIM metamodel along with some architectural concepts concerning the target platform. Therefore, a platform specific model is oriented to automatic code generation.

a completely new mof metamodel we have built a xml Schema with improve- ments on the existing promela dtd, following the suggestions of the future xmi 2.0 standard [30]. This recent recommendation establishes mappings to port an xml Schema to a mof metamodel and hopefully, this capability will be supported in the near future by new versions of popular CASE and xml tools.

Finally, mention must be made of the approaches based on a single lan- guage to describe all the aspects to be analyzed, like MoDest, UPPAAL and Times. In our opinion they are actually more concerned with the definition of new closed languages than with integrating existing formal methods. We think these powerful tools could be considered as elements to be integrated with the mda approach, in such a way that we could consider them as specific platforms (PSMs) for specific tasks. In this sense, we plan to use UPPAAL or Times for the kinds of properties not covered by spin.

A tool integration process implies a transformation between the source and target format. Regarding the use of mda and related technologies, we have to mention the increasing interest for using uml (and mof) to support these transformations in an automatic way. This is a main topic in the Workshop on transformation in uml. Therefore, recent works on integration focus on

We have chosen our own proposals in [18] and [35] to perform the integrated analysis of active networks. However there are other papers on these subjects. The use of formal methods to ensure reliability for active networks based services has been considered in [3,27,4,37]. Network and protocol performance with network simulators has been considered in [2,15,28,26]. We think that our methodology is open and flexible enough to integrate the other works. In particular, we could change the PSMs to produce the specifications considered

The testing phase of a model for a software system involves a cycle in which some results of a test may suggest the introduction of changes to the original system, and then start the cycle again. These changes are usually carried out manually by the tester; for example, manipulating parts of the source code representing the system. The problem arises when using different testing platforms and different representations of the system modelled, as it is difficult to manage the changes needed for each model in order to assure the proper consistency.

Our future work will extend the behavior metamodel to allow the inte- gration with other analysis tools. The metamodel is flexible enough to incor- porate new data types, sentences and expressions, without more repercussion into existing parsers and code generators. Moreover, we will have to create new mapping rules for the specific PSMs that will automate the generation of code for new verification tools. As mentioned before, we are also planning to create a new metamodel to interchange metadata regarding analysis tests and results.

T. Amnell, E. Fersman, L. Mokrushin, P. Pettersson, W. Yi. TIMES: a Tool for Schedulability Analysis and Code Generation of Real-Time Systems. In Proceedings of the 1st International Workshop on Formal Modeling and Analysis of Timed Systems, FORMATS 2003, Marseille, France, September 6-7, 2003.

