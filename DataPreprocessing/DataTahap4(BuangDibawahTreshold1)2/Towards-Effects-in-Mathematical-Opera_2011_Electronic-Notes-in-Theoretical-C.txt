In this paper, we study extensions of mathematical operational semantics with algebraic effects. Our starting point is an effect-free coalgebraic operational semantics, given by a natural transformation of syntax over behaviour. The operational semantics of the extended language arises by distributing program syntax over effects, again inducing a coalgebraic operational semantics, but this time in the Kleisli category for the monad derived from the algebraic effects. The final coalgebra in this Kleisli category then serves as the denotational model. For it to exist, we ensure that the the Kleisli category is enriched over CPOs by considering the monad of possibly infinite terms, extended with a bottom element.

In this paper, we make first steps towards abstract operational semantics for languages with effects and address the difficulties outlined above. We begin with a pure, effectless language, and an operational semantics given by a natural transfor- mation. We extend the syntax with computational effects as given by an algebraic theory [19], and extend the operational semantics to handle these effects; this in- duces an effectful operational model by structural recursion.

Now let us consider the same term t(f1,.. .) as before, but with arguments di replaced by their images under c. As before, the behaviour of t(f1,.. .) is obtained by applying the effectless rules to each leaf of f1, retaining the conclusions in an effect-tree of the same shape.

In summary, we started with premise-supported operational specifications for multi- sorted, effectless languages, and demonstrated how to extend them with purely syntactic effects. This gives an operational model as a coalgebra in a Kleisli category, if the behaviour functor has a lifting. Under certain conditions, the final Kleisli- coalgebra exists, and we define an operational semantics by the unique Kleisli- coalgebra morphism into the final Kleisli-coalgebra. We may take this coalgebra to be the denotational model, by giving it an algebra structure.

