Queueing network formalisms are very good at describing the spatial movement of customers, but typically poor at describing how customers change as they move through the network. We present the PEPA Queues formalism, which uses the popular stochastic process algebra PEPA to represent the individual state and behaviour of customers and servers. We offer a formal semantics for PEPA Queues, plus a direct translation to PEPA, allowing access to the existing tools for analysing PEPA models. Finally, we use the ipc/DNAmaca tool-chain to provide passage-time analysis of a dual Web server example.

However, while queueing networks are very good at representing the broad structure of a system, they are typically weak at describing the evolution of the individual customers within the network. Indeed, it is quite common to treat all customers as opaque, indistinguishable entities. These customers have no individual internal behaviour but may be segregated into a small set of static classes, when needed.

Choice The component P +Q represents a system which may behave either as P or as Q. The activities of both P and Q are enabled. The first activity to complete distinguishes one of them: the other is discarded. The system will behave as the derivative resulting from the evolution of the chosen component.

token is the state of a PEPA component. This state can change as the system evolves either independently, or in cooperation with their neighbouring components. The places on the net are typed with a component name; they may only be occupied by components that are derivatives of that type. Net-level transitions have associated action-types and rates. Components move in the net when a mobile component performs a net-level transition action, in cooperation with the net itself, to move into an appropriately typed empty slot.

PEPA nets are a good example of a higher level formalism. As well as having their own explicit semantics, they may also be compiled into PEPA, and so analysed with the existing array of PEPA tools. This inspires our approach for PEPA Queues, where we embed PEPA components in a queueing network, rather than a Petri net.

Note that the state of a PEPA Queue is given by the current state of each of the components waiting in the queue, in order, and the state of the local component. This cannot typically be represented by a vector of buffer occupancies, as would be the case with typical, opaque customers. It is instead akin to having a multi-class queueing network where the class does not influence the queueing discipline.

network therefore has a fixed and finite population of customers. There are no losses when destination queues are full; queue services that lead to full queues are blocked. Handling open networks, unbounded buffers, triggers and negative customers is desirable, but the translation into PEPA of these entities is less straightforward. Here we focus on a simple core, which we can build upon in the future.

Although we allow cooperations at the network level, they should be used with care. The intention is to use the queueing network to separate local behaviour from spatial migration. Allowing network-level interactions breaks this separation, but can be put to good use for inherently global actions like closing down the whole system, and a variety of forms of reset. Typically we would have, as in the example above, a straight parallel synchronisation between the queues.

PEPA Queues allow a succinct expression for many queueing mechanisms. For example, we could model breakdown and repair in a network of PEPA Queues as follows, allowing individual servers to fail and be repaired, or with a global reset if all the servers have failed. We omit the definition of the customers, P , for brevity.

We do this by converting PEPA Queues into PEPA. Every PEPA Queue model can be mechanically rewritten as a PEPA model with no change in its behaviour. Some of the structure of the original may be obscured in the compiled PEPA model, so tools will typically prefer to work with the PEPA Queues directly.

Declares that in order for a customer to move between queues, the server component at the first queue must perform a routing action, leading to a queue which has at least one space. The moved customer moves to the first empty slot. Where n is the largest such n to describe the blank spaces in Q : B. Routing actions may not appear in the inter-queue cooperation set, LQ.

Note that we do not allow cooperation between the queues for routing actions. If we did then we would be including a potentially interesting class of synchronised, coupled queues but at the expense of a substantially more complex translation. With our present translation, we use the names of the routing actions, decorated with where they are occurring to provide us with global, unique names for each of the routing actions. If we allowed cooperation at this level, we would need some other mechanism for migrating components. It may be possible to extend still further the information we carry in the expanded action names, but needing to represent which pair of processes is cooperating in the action name would lead to a large explosion in the number of names used. We could conceivably use a synchronous immediate action to achieve these coupled queues, but we would first need to define that concretely.

Note that to be allowed to move, the destination slot must be empty. This means that in the example from Sect. 3.1, when all four customers are in queue A, the redo action is disabled. Even though there would be a free slot after the lead customer moves, there is not one until then. If we allowed this form of movement it would give preferential treatment to customers coming from the same queue. That is, a customer would still be able to move to the back of its own queue, while arrivals from other queues were blocked.

The server components are altered to account for the expanded names of routing actions and to ensure that the local cooperation actions are distinct for each queue. So, for a server component, S, residing at queue A, we make a new component SA. The local cooperation set at A is LA. For each action-type, a, that S performs, there are three cases:

For case 1, we do not need to modify the action at all. For case 2, we add the queue name to the action name, to ensure this action cannot occur when a customer is at a different queue. For case 3, we replace each occurrence of a with a choice of new action-types representing all the destination slots the action could lead to. We denote these four sets of action names L1, L2, L3 respectively.

Suppose that the queues are named A, B,... , Z, that the initial populations at each are a, b,... ,z and that our initial customers are a P at queue X at position i', through to a P' at queue Y at position j'. The cooperation set between all the queues is LQ .

The server Spage doles out pages and the server Simages serves images. After Spage has issued a getpage, it releases the client from the first queue, A, with the send action, which routes the client on to the next queue, B (only if there is room in the downstream buffer for that client). The Simages server, after sending images to the client, then does some internal processing before issuing a repeat action which routes the client back to the first buffer again.

In this paper, we have introduced PEPA Queues, a formalism for expressing indi- vidual customer behaviour and routing in queueing networks. Queueing customers are described in PEPA, as are individual servers in the network, with interactions between customers and servers deciding the exact routing pathway for a customer. This synergy of a behavioural description and a spatial formalism is similar to PEPA nets but is obviously tailored to situations where queueing models would be a more appropriate spatial formalism.

Inter-customer cooperation In some real-world systems, the customers may cooperate with one another in the queue. This may be a reasonable way to represent negative customers [8]. These cooperations could be just between neigh- bours or amongst all the customers awaiting service. Zero-automatic queues [7], for example, allow neighbouring customers of a shared group of classes to interact and coalesce into a single customer.

