FastFlow is one of the most promising multicore C++ libraries. Unfortunately, a design problem occurs in the library. One of the most important methods is pure virtual function in a base class. This method supports the communication between different threads. Although, it cannot be template function because of the virtuality, hence, the threads pass and take argument as a void* pointer. The base class is not template neither. This is not typesafe approach. We make the library more efficient and safer with the help of generative technologies.

Indeed, memory fences are one of the key sources of performance degradation in communication intensive (e.g. streaming) parallel applications. Avoiding memory fences means not only avoiding locks but also avoiding any kind of atomic operation in memory (e.g. Compare-And-Swap, Fetch-and-Add). While there exists several assessed fence-free solutions for asynchronous symmetric communications, these re- sults cannot be easily extended to asynchronous asymmetric communications that are necessary to support arbitrary streaming networks.

FastFlow is a parallel programming framework for multi-core platforms based upon non-blocking lock-free/fence-free synchronization mechanisms. The frame- work is composed of a stack of layers that progressively abstracts out the program- ming of shared-memory parallel applications. The stack has two different goals: to ease the development of applications and make them very fast and scalable. FastFlow is particularly targeted to the development of streaming applications.

abstract class ff node. It has a pure virtual method svc, which is the main method of every thread in the application. However, it is needed to handle any kind of data type, but while it is a virtual function it cannot be template. Although, the base class could be a class template. However, this solution is neither elegant nor type- safe [17].

In this paper we present our solution about how FastFlow library can be ex- tended to be type-safe. We make the abstract base class be templated and we use static polymorphism instead of dynamic polymorphism by curiously recurring tem- plate pattern. This way in one hand the system will be type-safe, and on the other hand the virtuality of the method can be eliminated, thus the system becomes more effective.

This paper is organized as follows. In section 2 the FastFlow library is shown and present typical examples that are risky from the view of program correctness. We present an approach that can be used to overcome this problem by the type system of C++ in section 3, the implementation details are described in section 4. The sections 5 and 6 present our pipeline and buffer implementation. In chapter 7 we demonstrate the usage of our extended FastFlow library through an example. Finally, this paper concludes in section 8.

The performance advantage of this solution descend from the higher speed of the copy with respect to the memory fence, that advantage is further increased by avoiding cache invalidation triggered by fences. This also depends on the size and the memory layout of copied data. The former point is addressed using data pointers instead of data, and enforcing that the data is not concurrently written: in many cases this can be derived by the semantics of the skeleton that has been implemented using MPMC queues (as an example this is guaranteed in a stateless farm and many other cases).

When using dynamically allocated memory, the memory allocator plays an im- portant role in term of performance. Dynamic memory allocators (malloc/ free) rely on mutual exclusion locks for protecting the consistency of their shared data structures under multi-threading. Therefore, the use of memory allocator may sub- tly reintroduce the locks in the lock-free application. FastFlow includes its own custom memory allocator, which is specifically optimized for SPMC pattern. The basic assumption is that, in streaming application, typically, one thread allocate memory and one or many other threads free memory. This assumption permits to develop a multi-threaded memory allocator that use SPSC channels between the allocator thread and the generic thread that performs the free, avoiding the use of costly lock based protocols for maintaining the memory consistency of the internal structures. However, the FastFlow allocator is not a general purpose allocator and it has limitations.

Let us consider the following code snippet that takes advantage of FastFlow library: The Emitter feeds the workers with data, now it just send integers. The Worker processes the data, and passes it toward to the other Worker or a Collector, depends on the initialization of FastFlow. Now it just prints the received integer value to the screen, and pass it toward to the Collector. The Collector gathers the computation results done by the Workers. Now it just receives the integer value and does nothing.

via void* pointers, so arbitrary data can be passed. But this approach is not typesafe at all. FastFlow works this way because the svc method is specified as a pure virtual function in the base class. A template method can be typesafe and elegant solution to pass arbitrary data, however, a (pure) virtual method cannot be template. On the other hand, the abstract base class itself could be template, but the original implementation does not take advantage of this feature.

Curiously recurring template pattern can be used for static polymorphism [5]. This idiom is able to simulate dynamic binding without virtual functions [9]. In this case, the method is selected at compilation time, hence this approach is more effective at run-time, too. This pattern can be used in many ways [12]. Typical appearance of this approach is the following:

In FastFlow the base class of parallel computing is ff node. That class has a pure virtual method called svc, which has a void* argument. All of the classes take part in parallel computation must be derived from ff node and must implement the member function svc. As the argument type of svc is void*, it can accept arbitrary data, however, it is not a type safe solution. Inside the function we need to cast the argument to a proper type. Casting to an improper type causes a runtime error. Nevertheless it can be compiled without any error or warning message, making the bugfix more difficult.

3. This way, the function svc does not need to be virtual and the type of its argument can be a properly typed pointer. The type of the argument is a template parameter of class ff node. The class ff node has another template parameter which refers to the type of its derived class. The following code snippet shows the declaration of class ff node:

The class ff farm represents a farm skeleton. Originally that class has two template arguments, the type of load balancer and the type of gatherer. These template arguments have default value, thus the programmer can skip them and let the FastFlow use the default types. We defined five template arguments of ff farm additionally. The first three template arguments refer to the type of emitter, worker and collector, the fourth one refers the type passed as argument of member function svc, the fifth one is a boolean value which sets whether FastFlow uses circular or non-circular buffer. The last two are the original template arguments. The details of buffers are described in section 6. As the ff farm is a child class of ff node, it needs to pass itself to a template argument of ff node. The following code snippet shows the declaration of the class ff farm.

The high level pipeline schema is also supported by FastFlow. The frame class of pipeline is called ff pipeline. The pipeline contains stages, one stage can be either a standalone ff node or a farm skeleton. In the original version, the pipeline stores the stages in a vector of ff node*, where the ff node is the base type of the stages, and the virtual function svc does the computation.

In our solution, where the dynamic polymorphism replaced with static polymor- phism, this approach does not work. While the stage classes have to add themselves as a template argument of ff node, their base types will be different. Hereby they cannot be stored in one vector.

The computation starts by the member function do of struct ff pipeline. It instantiates the struct do aux with 0 and the size of the typelist and invokes its static member function. The entities in scope boost::mpl are described in [20].

While a template argument of ff pipeline refers to the type of the stages, their structure must be known at compilation time. Therefore it introduces a restriction of the usage. However, in most cases the structure of the pipeline is defined at compilation time, thus it is not a real limitation.

The original version of FastFlow can use either circular or non-circular buffer as a channel between worker threads. These buffers store void* to be able to handle different types of data. By default the non-circular buffer is used, how- ever, the programmer can select the other one by defining preprocessor macro FF BOUNDED BUFFER. The following preprocessor code snippet shows how the proper buffer is chosen.

In our solution we avoid using preprocessor macros to defining the buffers. In- stead we add an extra boolean template argument to ff farm called is circular, to indicate which kind of buffer to be to use. The true value means we want to use circular buffer, and the false means we chose the non-circular one. The default value of that template argument is false.

In this chapter we show the example of chapter 2 rewritten with templates. Each class derived from ff node instantiated with itself and the task type int. The function svc in each classes has a properly typed pointer, instead of void*. The main function creates the farm, the emitter, worker and collector classes, and starts computing.

In this paper we pointed out a weakness of the FastFlow multicore programming library of the C++ programming language. The original version of FastFlow uses void* to communicate the between threads. While this method provides a simple solution to pass arbitrary data, it is not typesafe and increases the chance of make mistakes.

be misleading. We have eliminated virtuality of a very important method in the library, but we have not changed anything in the multicore functionality. The typical conception of efficacy of a multicore library is based on the features of multicore programming and it is unchanged in this case.

