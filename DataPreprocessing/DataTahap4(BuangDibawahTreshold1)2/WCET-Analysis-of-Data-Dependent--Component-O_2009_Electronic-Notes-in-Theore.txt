Component oriented software construction approaches have gained enormous at- tention in recent years. Building large software from pieces of pre-built, plug-in compatible software components usually lead to shorter development cycles. Sev- eral industry standards were established during the previous years. One can think of EJB, CORBA, .NET or Web services infrastructures just to mention a few. However component orientation is not only an approach owned by the domain of enterprise systems, embedded systems also profit a lot from component orientation. In our work we focus on a special domain, specifically Programmable Logic Controllers. A PLC is a small computer used for automation of industrial processes such as control of factory assembly lines. PLCs are designed to work in environments with

This paper is organized as follows: In Section 2 we give an overview of our approach. In the main part of this paper (Section 3), we focus on one step of our approach in more detail: we describe how data-control flow dependent white bow components can be treated. Finally, we present related work and our future steps (Section 3).

Abstract interpretation [4,5] is a theory of sound approximation of the semantics of programs. It can be viewed as a partial execution of a program, gaining in- formation about its semantics without performing all the calculations. Although this approach can, in theory, deliver perfect results, the number of possible paths grows exponentially for every conditional jump and every loop iteration. To avoid the exploding nnumber of paths that have to be considered the intermediate data is merged at certain program points (such as at the end of loops) to safely approximate the results.

The meaning of a language is given as functions for the statements of the lan- guage computing over a concrete domain. A domain is a partially ordered set of values. For such a (concrete) language semantics, we define an abstract version which consists of an abstract value domain and simpler abstract functions working on the abstract values. The concrete meaning of a subset of the language ST is described in Section 3.2; while Section 3.3 introduces an abstract version. For more details about abstract interpretation see [4,5].

There are several approaches used to approximate the WCET of (real-time) software. Generally spoken usual WCET approaches combine a control flow anal- ysis with a low level analysis. Control flow analysis is necessary to find the worst case scenario of the system. Several approaches are known, ranging from different kinds of user defined path annotations [1,7,22] to automatic analysis frameworks

[13,13,9,19,8]. The purpose of low level analysis is to determine the timing behavior of instructions assuming that the architectural features of the target system are known. For modern CPUs, it is important to deal with effects of various features like pipelines [35,34,14], caches [38,23,37,3] and branch predictors [25,33]. There are special kinds of approaches using measurements [28,18,30] or predicting probability based WCET instead of a single tight WCET value [29,2].

The second family of approaches deal with prediction of various non- functional properties of component based systems. [31] develop a parametric con- tracts based approach for component systems. Several approaches built upon this model and predict properties such as reliability [32] and mean service execution time [12]. [15] deal similar to us with IEC61131-systems, however they neither investi- gate complex control flow in components nor data flow - control flow dependencies between them. In our approach, we also look at the inside structure of components to find out data flow - control flow dependencies between them. We believe that

We showed in this paper how data flow - control flow dependencies between com- ponents can be analyzed using abstract interpretation. The approach can be also applied to some extent to the analysis of complex control flow inside of components. We showed the application of our approach on a practical example taken from the PLC domain. In our future work we extend our abstract interpretation based ap- proach to get a tighter prediction. Furthermore that we also plan to develop an approach which allows to derive data-context dependent execution time informa- tion in a highly automated fashion. The main benefit of such an approach would be that this information could be reused during the prediction of the WCET property of the system, without analyzing the components structure again.

