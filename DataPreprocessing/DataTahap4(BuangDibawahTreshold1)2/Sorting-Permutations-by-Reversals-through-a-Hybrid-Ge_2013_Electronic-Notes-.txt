presented an 1.75-approximation algorithm. Later on, the approximation ratio was improved to 1.5 by Christie [8] (although the given methodology presents several imprecisions) and then to 1.375 by Berman, Hannenhalli and Karpinski [5]. The latter approximation algorithm is of theoretical interest being its practical imple- mentation of great difficulty.

can be sorted polynomially and one knows that an optimal solution that solves any signed permutation of the search space also solves the initial unsigned permutation. So, one of the optimal solutions of the elements of the search space is an optimal solution for the initial unsigned permutation. This fact guides the proposed genetic algorithm.

The standard GA approach is used. Initially, a random population of signed permutations for the input permutation is generated; after that, for each gener- ation, the reproduction is performed in the following manner: two individuals of the population are taken for which crossover and mutation operations are applied producing two offspring. Then, the two new obtained offspring are returned to the population. The GA finishes after all the generations have been completed.

The developed improvement made over the standard GA approach consists of applying just to the initial unsigned permutation, reversals that eliminate simultane- ously two breakpoints, that is 2-reversals. This is done randomly until no additional 2-reversals are applicable. Although this is a greedy mechanism that not necessarily will produce an optimal sorting, giving priority to the elimination of (2-)breakpoints has been applied as local optimization method in several approximation algorithms because a high number of 2-reversals tend to be present in optimal solutions (e.g., [11,3,8,5]).

The value of the fitness is the optimal number of reversals for sorting the signed permutation that represents each individual. We use the implementation of the exact algorithm proposed and provided by the authors in [2] to calculate the fitness of each individual in the population. With this algorithm the reversal distance of signed permutations is computed in linear running time.

Let n be the length of the input permutation. The initial population size is fixed as n log n. Each individual of the population was generated from the input permutation in linear time by randomly assigning a sign to each of its elements. Thus, generating the initial population takes running time O(n2 log n).

In the crossover stage, the best individuals of the population are chosen to be the parents. For each pair of parents the crossover is done in linear time generating two offspring. So the total running time for executing the crossover stage is O(n2 log n). In the mutation stage, mutation is applied to each offspring produced by the crossover. For each element of the individuals in the offspring, it should be checked whether the mutation occurs or not.  The total time taken by the mutation is

In order to validate the proposed GA approaches several tests were performed. Tests were done for permutations for which, it is known the reversal distance and for randomly generated permutations. For the latter ones, test differs in the way the input permutations were generated, but in general the tests share the following characteristics.

The crossover operation was performed with a single point crossover. The crossover rate used is 0.9 and the mutation rate used is 0.02. The selection of parents for the crossover was made over the 60% of the population that represent the best individuals. The replacement of the offspring was made over 60% of the population that represent the worst individuals.

