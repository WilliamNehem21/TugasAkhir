The crucial roles of atom patterns in determining rule applicability and specifying the results of rule applications necessitate an appropriate syntactic structure for representing the patterns in such a way that their instantiations can be precisely and suitably controlled. For this purpose, the notion of meta- atom is introduced. Meta-atoms have the same structure as usual atoms except that two kinds of meta-variables|&-variables and #-variables|are used instead of ordinary variables.  The two kinds of meta-variables have di erent instantiation characteristics. Not only do the di erences allow precise speci cations of rewriting rules; they enable rigorous investigation of several important properties of several kinds of transformation steps, e.g., correctness of expanding transformation [7], and, moreover, as shown in [3], systematic generation of correct rewriting rules from a problem speci cation.

Syntax for Rewriting Rules. The rst objective of this paper is to determine appropriate syntax for a large class of rewriting rules. The syntactic struc- ture of rewriting-rule components as well as their instantiations should be suitably de ned in order that they can be used to precisely specify rule ap- plicability and the results of rule applications.

Reverse Transformation. The third objective is to introduce the reverse trans- formation operation, and to show that in the RBET framework an ET rule is reversible, i.e., one can obtain a rewriting rule the operation of which reverses that of another rewriting rule by syntactically reversing the lat- ter rewriting rule, and the correctness of the former depends solely on the correctness of the latter.

will be used instead of r1. Then, any instantiation of this rule is regulated in such a way that the #-variable #Y can only be instantiated into an ordinary variable that does not appear in the other part of the clause resulting from an application of the rule. This instantiation constraint precludes the instantia- tion of #Y into the ordinary variable X when the rule r2 is applied to the rst body atom of C1; as a result, the transformation of C1 into C3 is prevented.

and the correctness of the latter step follows from the correctness of the former step. In general, however, the application of the rule r3 may result in an incorrect transformation step. For example, by instantiating the &-variable &Y into X, the application of r3 to the rst body atom of the clause C3 of the previous subsection yields an incorrect transformation step deriving C1 from C3.

while the application of r4 to the rst body atom of C3 can be ruled out by appropriately restricting the instantiation of the #-variable #Y , i.e., #Y is only allowed to be instantiated into a variable that does not occur in the other part of C3.

Rigorous description of rewriting rules and their applications demands pre- cise conditions for instantiations of meta-variables in rule applications. For the sake of generality and regularity, the conditions should not be specialized for any particular case, but common to all rewriting rules. Such common con- ditions will be de ned in Section 5 (Conditions (MVI-1), (MVI-2), (MVI-3) and (RRA-2)).

An &-variable is a variable that begins with the symbol &; for example, &N and &X are &-variables. A #-variable is a variable that begins with the symbol #; for example, #X and #Y are #-variables. An &-variable as well as a #-variable is called a meta-variable. An ordinary variable is assumed to begin with neither & nor #.

Usual rst-order terms on hK; F; V1i and on hK; F; V2i will be referred to as terms and meta-terms, respectively, on . Given R0  R, usual rst-order atoms on hK; F; V1; R0i and on hK; F; V2; R0i will be referred to as atoms on R0 and meta-atoms on R0, respectively. For example, assume that fX; Y g V1 and f&X; #Y g  V2. Then, nil, X and cons(X; cons(Y; nil)) are terms on ; nil, &X and cons(&X; cons(#Y; nil)) are meta-terms on ; initial(X; cons(X; cons(Y; nil))) is an atom on R1; and initial(&X; cons(&X; cons(#Y; nil))) is a meta-atom on R1. The standard Prolog notation for lists is adopted; e.g., [X; Y ] and [7; #Xj&Y ] are abbreviations for the term cons(X; cons(Y; nil)) and the meta-term cons(7; cons(#X; &Y )), respectively.

In general, the RBET framework can deal with several data structures other than usual rst-order terms, e.g., multisets, strings; and a declarative descrip- tion can be represented by a set of de nite clauses extended with these data structures [2,4]. For simplicity, however, only usual terms are used in this pa- per; that is, a declarative description is a set of usual de nite clauses. De nite clauses and declarative descriptions considered herein as well as the meanings of declarative descriptions will now be de ned.

A de nite clause C on  is an expression of the form A  Bs, where A is an atom on R and Bs is a (possibly empty) set of atoms on R. The atom A is called the head of C, denoted by head(C); the set Bs is called the body of C, denoted by Body(C); each element of Body(C) is called a body atom of C. When Body(C) = ;, C will be called a unit clause. The set notation is used in the right-hand side of C so as to stress that the order of the atoms in Body(C) is immaterial. However, for the sake of simplicity, the braces enclosing the body atoms in the right-hand side of a de nite clause will often be omitted; e.g., the de nite clause ans(X)   fappend(Y; X; Z); initial(Y; Z)g will often be written as ans(X)   append(Y; X; Z); initial(Y; Z).

Let i 2 f1; 2g. A de nite clause C is said to be from R1 to Ri, if and only if Body(C)  A1 and head(C) 2 Ai. A declarative description from R1 to Ri is a set of de nite clauses from R1 to Ri. The set of all declarative descriptions from R1 to Ri will be denoted by Dscr(R1; Ri).

where n 0, and H^s and the B^si are subsets of A^1. For the sake of simplic- ity, the braces enclosing the meta-atoms in each side of a rewriting rule may be omitted; e.g., the rewriting rule finitial(&X; &Z)g ! fappend(&X; #Y; &Z)g will also be written as initial(&X; &Z) ! append(&X; #Y; &Z).

 (&Z) = [1; 2; 3] and satis es Conditions (MVI-1), (MVI-2) and (MVI-3). Then, since Y occurs in neither the head nor the second body atom of C1, r2 can be applied to C1 at finitial(X; [1; 2; 3])g by using , and this application rewrites C1 into C2. Likewise, the application of r4 to C2 at fappend(X; Y; [1; 2; 3])g by using  rewrites C2 into C1. Now consider the clause C3. The rule r4 is not applicable to C3, since every  : V2 ! T such that

 (&Z) = [1; 2],  (#A) = A1,  (#X) = X1 and  (#Z) = Z1. The clause C6 can be further transformed by the application of r5. Notice that r5 is also applicable to the clause C2 of Section 2 at fappend(X; Y; [1; 2; 3])g.	2

Since the rule r2 of Section 2 and the rule r5 of Example 5.2 are applicable to an initial-atom of any pattern and an append-atom of any pattern, respec- tively, and their applications correspond to the unfolding operation, they will be referred to as unfolding-based general rewriting rules. The next example illustrates rewriting rules that are devised for atoms of speci c patterns.

