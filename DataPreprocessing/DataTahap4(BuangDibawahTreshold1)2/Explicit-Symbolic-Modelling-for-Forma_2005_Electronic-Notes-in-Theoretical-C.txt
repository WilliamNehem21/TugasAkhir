Due to the ever-growing complexity of computing applications, automatic tools have been used to help developers to find bugs in hardware and soft- ware systems. Two approaches that have been applied to achieve this goal are simulation and formal verification. The simulation approach consists of executing tests over given inputs and examining the results. This technique can easily evaluate both control and data aspects, but generally only part of the set of states is examined. In other words, simulation can state that specifications hold for some inputs, but it does not prove correctness over the whole set of states.

Formal Methods include mathematical based languages, techniques and tools for specifying and verifying hardware and software systems [12]. Com- plex systems and critical applications benefit from formal methods because they make systems more reliable. Different from simulations, formal verifi- cation techniques execute exhaustive searches over problem domains, proving conformity to specifications instead of only pointing errors for some input data.

In this paper, we propose a model for combining explicit and symbolic representations in an explicit-symbolic formal verification model. We intend to use explicit and symbolic techniques together to verify the same model and to make it possible to employ the most efficient technique to each aspect of the model. In the next section, we present related works and our main goals. After that, we develop the explicit-symbolic model and show how generate it from a labeled state-transition system. Then, we discuss how formal verification tools can use our model to verify systems given in the Verimag Intermediate Format [4]. The algorithms developed for the integration of underlying models are also shown. Finally, we present our next steps and some remarks.

Our explicit-symbolic model integrates the underlying explicit and symbolic models. So, it has to do with explicit and symbolic verifiers and their tech- niques. Currently, SPIN [13] and JPF [5] are well-known and largely used explicit-state model checkers. On the other hand, SMV [15], NuSMV [9] and Verus [7] are representative and successful symbolic-state model checking tools. Existing algorithm optimizations from such tools, like the on-the-fly technique used by SPIN, should be considered for the implementation of un- derlying models in order to improve the model checking.

The approach adopted in the SLAM project [3] is the one that more closely relates to our project, as it employs both explicit and symbolic models in- side a same environment. SLAM extracts abstract models from C code and statically checks temporal properties of software. Also, SLAM uses predicate abstractions, symbolic reasoning and iterative refinement. Bebop is the part of SLAM liable for performing reachability analysis of Boolean programs.

Comparing to our explicit-symbolic model, SLAM lacks flexibility because control-flow and data-flow information must have explicit and symbolic repre- sentations, respectively. The proposed model is more general because it allows us to move variables between explicit and symbolic spaces according to any policy. Thus, we can experiment with a variety of combinations and choose the one that best fits the system needs. See section 7 for more details about the flexibility of the proposed model.

Although an explicit-symbolic model can be directly generated from a labeled state-transition model, we decided to accomplish this task in two distinct steps. Initially, both explicit and symbolic models are generated as projections in- duced by the partitioning of variables of the original model. Next, the explicit and symbolic models are combined to compose the explicit-symbolic model. Such approach provides a more intuitive and clear procedure to understand the formalization of the model.

The Intermediate Format [4], also called IF from now on in this paper, is a language that has been developed in order to model asynchronous commu- nicating real-time systems. It has been used as interchange format between a set of validation tools known as IF validation environment. IF models are composed from process instances, running in parallel and interacting asyn- chronously through shared variables and message-passing. Message-passing is accomplished by means of signals, instances of signal routes and FIFO com- munication buffers.

In this section, we apply the explicit-symbolic modelling to IF models. First, we describe the main components in the language and present some examples of its constructions. Next, we show how those components are em- ployed for generating both explicit and symbolic models. Finally, we combine explicit and symbolic models in order to emulate the behavior of the original model by means of the explicit-symbolic model.

Control states define the behavior of a process by means of actions, tran- sitions to other states and, possibly, substates. There is not theoretical limit for the number of nested substates. State specifications include temporal con- straints and the set of deferred signals. The initial state is defined by the keyword #start during the state definition. Because model checkers need to keep track of the current state being visited, our explicit-symbolic model uses a variable for storing such information. From now on, we refer to such variable as the program counter.

Our algorithms assume the system properties are given in Computation Tree Logic, CTL for short. CTL is an important branching temporal logic with a discrete notion of time. CTL is sufficiently expressive for the formulation of an important set of system properties, allowing safety, liveness, fairness and deadlock freedom to be specified. For details regarding the semantics of CTL, please refer to [10].

During the parsing of atomic propositions, we must consider two different situations. First, the atomic proposition ap can be explicit, being represented in an explicitly coded state. Second, ap can be symbolic, being represented by a BDD. Independently of the situation, inputs must produce a set of explicit- symbolic states S.

rithm of Tarjan [18], for example. Next, line 05 adds all the explicit-symbolic states belonging to the strongly connected components into the solution S. Finally, lines from 06 to 13 are used for finding all of those states that lead to states in S.

Given the input state set I1 = {(ES1, SS2), (ES2, SS1), (ES4, SS1)}, con- sider that it is processed in the order presented. Each iteration of the outer loop of the EX algorithm considers a specific input explicit-symbolic state. For the first state, (ES1, SS2), the algorithm initially computes the set of pre- decessors E1 for its explicit component, ES1, by using line 04. After that, the loop spanning lines 05-15 computes predecessors of the symbolic component, SS2, by considering only symbolic transitions associated to relevant explicit transitions. The relevant explicit transitions are those from states of E1 to

In this paper, we proposed a model that combines explicit and symbolic rep- resentations. The conceived explicit-symbolic model considers that explicit and symbolic techniques should be used in an integrated and synchronized fashion, allowing us to have a better exploration of the search space of the modeled systems. Thus, our main contribution is the proposal of a flexible environment for the formal verification of systems. Currently, our efforts are driven to the computational implementation of the explicit-symbolic model and its algorithms, considering systems specified in the Intermediate Format. Such implementation will help us to improve the conceptual model and will make it possible to measure the impact that different representations have over the verification of control and data-flow intensive systems. According to the literature, it seems to be a good choice to represent control-flow explicitly and data-flow symbolically, as done in SLAM. Future experiments will make it possible to have more information to answer this question.

