While this article only replaces one (crucial) component in a previously- published decision procedure [6], it is written with the goal of being self- contained, assuming most readers are not familiar with the previous work 1 . In the next section we list several basic definitions that are necessary for understanding the setting; in Section 3 the main theorem on which this work (as well as [6]) is based on is re-presented; in Section 4 we describe the new decision procedure, and we conclude with a list of experiments in Section 5. A detailed comparison to [6,5] appears in Section 4.2.

Chordal graphs were used by [2] in the context of their observation that transitivity should be enforced only on chord-free cycles (which, in a chordal graph, are only the triangles). In [6], as well as in this paper, it is used in a different context, but with a similar purpose: it enables the algorithm to constrain only triangles. More specifically, although a graph (V, E) can contain an exponential number of contradictory cycles in |V |, it can only contain a polynomial number of triangles. Yet, enforcing transitivity on triangles (whether they are contradictory or not) is sufficient for enforcing it on all contradictory cycles, as shown in [6] and in Section 4.

Given Theorem 3.4, it is left to show an algorithm that generates a formula that constrains all simple contradictory cycles. In [6] we presented the rtc algorithm for this purpose, parts of which are re-used here in the description of the new algorithm rtcS . The latter only constrains simple contradictory cycles, as it should according to Theorem 3.4, hence the superscript S. It is also simpler to describe and implement than rtc.

It is sufficient to focus on BCCs because only cycles need to be constrained (more specifically, contradictory cycles). Each considered BCC contains a solid edge es and all the contradictory cycles that it is part of. In line 4, rtcS makes the BCC chordal, by adding edges. After the graph is chordal rtcS

Lemma 4.5 Let (xi, v, xj) be a dashed triangle in B such that there exists a simple contradictory cycle through (xi, v), (v, xj). Then there exists a simple contradictory cycle in B through (xi, xj) that does not go through v.

Overall, there is a decrease of 17% in the number of transitivity constraints, and 32% decrease in the run time of the algorithm (not including SAT time). For comparison, on the same graphs the sparse method [2], which generates three constraints for each triangle in the graph regardless of their polarity, generates 390165 constraints on average (regardless of the ratio between solid and dashed edges). For most of these graphs the formula could not be generated by the exponential method of [5].

