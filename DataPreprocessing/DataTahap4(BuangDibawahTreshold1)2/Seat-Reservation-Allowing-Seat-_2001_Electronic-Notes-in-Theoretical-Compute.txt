v, if u < v. The passenger is given a single seat number when the ticket is purchased, which can be any time before departure. The algorithms (ticket agents) attempt to maximize income, i.e., the sum of the prices of the tickets sold. For political reasons, the problem must be solved in a fair manner, i.e., the ticket agent may not refuse a passenger if it is possible to accommodate him when he attempts to make his reservation. All algorithms, even OPT, the optimal o -line algorithm, must be fair.

The version considered in this paper allows the seat reservation system to assign seats so that each passenger may change seats a xed number of times during the trip. We use s to denote the number of seat changes allowed. Two di erent pricing policies are considered, the natural proportional price policy where the price of a ticket is proportional to the length of the trip, and the unit price policy where the price is 1 for any ticket.

subinterval of u which contains the leftmost endpoint of u and which can be seated on the same seat as v without overlapping v. Moreover, if u and	v have the same start station, we let u n v denote the possibly empty subinterval ranging from the end station of v to the end station of u. Otherwise u n v is unde ned.

De nition 2.1 Suppose an algorithm accepts a new interval u by seating l s +1 subintervals. If the rst l 1 subintervals are placed such that an already seated (sub)interval starts right after the subinterval ends, we call the algorithm conservative.

Considering a seating performed by an algorithm, A , we will merge two (sub)intervals, if one starts right after the other ends. If this kind of merge is performed repeatedly seat by seat, we end up having larger (not connected) components. We use  to denote the number of such components.

During the construction of f , we maintain two sets U 0 and S0. Initially, let S0 = S and let U 0 = f(u; s) j u 2 U g. The two sets should be interpreted as follows: An element (v; t) 2 U 0 represents an (sub)interval v which is allowed to change seat t times. S0 will at any point represent a legal seating.

and part of it is kept in U 0 until this counter is 0, it will be a rst element in the ordering of U 0 exactly s + 1 times. Every time this happens a new element from S will be mapped to it. Therefore, jf  1(u)j = s + 1, for all u 2 U .  2

Proof. Let A denote an algorithm for the unit price problem. According to Theorem 3.2, the number of components in A 's seating is at most (s + 1)jAj, where A denotes the set of intervals accepted by A . From Theorem 3.3, we have that (s + 1)jU j   . Inserting this into the performance ratio, we get

Now consider the s +2 intervals starting at stations 2, ..., s + 3. Since the interval just given must be placed on the same seat as either [2; 3) or [4; 5), we are in a situation similar to Case 1, in which two consecutive intervals are on the same seat. Instead of giving [1; k) as in Case 1, the adversary gives

In Case 2, the algorithm will get the best performance ratio. In this case its performance is s + 2 + 1 + 1 + 1 = s + 5. OPT has a performance of s +2+1+1 + (k  2) = k + s + 2.	2

2 (and the density is smaller then n). On the other hand, since an interval is allowed to change seat at most s times, at most s + 1 of these holes will be used (and either disappear or reduce their size to 1). A will therefore have to accept x intervals containing [1;s + 3), where   q   x  q. We divide the

Proof. Let A denote an arbitrary algorithm for the proportional price prob- lem, let S denote the set of components accepted by A , and let U denote the set of intervals rejected. From Theorem 3.2 and Theorem 3.3 we know that jSj  jU j(s + 1). Since every component in S has size at least 1 and every element in U has size at most k  1, we obtain the claimed ratio:

[1] Azar, Y., J. Boyar, L. Epstein, L. M. Favrholdt, K. S. Larsen and M. N. Nielsen, Fair versus Unrestricted Bin Packing, Technical Report PP-2000-20, Department of Mathematics and Computer Science, University of Southern Denmark, Odense (2000), preliminary version at SWAT 2000.

