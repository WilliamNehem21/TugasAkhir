Electronic Notes in Theoretical Computer Science 104 (2004) 149–162 
www.elsevier.com/locate/entcs


Peano Structures and the Semantics of Iteration
G. M. Germano
Dipartimento di Informatica Universit`a di Pisa 56127 Pisa, Italy
S. Mazzanti1
Dipartimento di Arti e Disegno Industriale Universit`a Iuav di Venezia
30123 Venezia, Italy

Abstract
In this paper closure theory is applied in order to obtain a uniform semantical treatment of both primitive and general iteration. In particular, the theory of Peano algebras has been extended to algebraic structures to inductively define both primitive and general iterates as structure homo- morphisms, i.e. as fixed points of iteration equations.
Keywords: iteration, closure theory, semantics, Peano structure.



The semantics of iterative constructs is usually defined, following the deno- tational approach [14], by means of fixed point theory or, following the op- erational approach, by considering the computation paths produced by the repetition of the iteration body.
Fixed point theory [15] has been developed for the semantics of recursive procedures [2] and, in programming practice, iterative constructs are executed following their operational semantics instead of translating them into recursive

1 Email: mazzanti@iuav.it



1571-0661 © 2004 Elsevier B.V. Open access under CC BY-NC-ND license.
doi:10.1016/j.entcs.2004.08.023


procedures. So, fixed point theory seems to be redundant for the semantics of iteration.
In his work [3] on the foundations of mathematics, Dedekind defined by induction on the set N of natural numbers the primitive iterate f x : n '−→f nx of a function f on a set X and showed, by means of an ad hoc closure theory for algebras, that f x turns out to be the unique homomorphism from the algebra ⟨N, 0, succ⟩ into the algebra ⟨X, x, f ⟩.
The algebra of natural numbers is the simplest example of Peano algebra [9,11] and the above result is a special case of the theorem which states that Peano algebras with signature σ coincide with free σ-algebras or, in other words, Peano σ-algebras are the initial objects in the category of σ-algebras. So, functions defined by primitive iteration turn out to be initial homomor- phisms [10].
A similar treatment for general iteration seems to be non-existent. One motivation may be the lack of a clear inductive definition of the domain of general iterates, whereas primitive iterates (and even functions definable by primitive recursion) can be easily defined by induction on the carrier of a Peano algebra. However, general iteration has received an algebraic treatment using closure theory [5,8], iteration theories [1] and coalgebras [12].
In this paper, closure theory is applied to obtain a uniform semantical treatment of both primitive and general iteration and to link up the deno- tational and the operational semantics of iterative constructs. In fact, the theory of Peano algebras [9,11] is extended to algebraic structures to induc- tively define iterate functions as structure homomorphisms which immediately turn out to be fixed points of iteration equations. The language used in this work is that of Universal Algebra, but in future, we will translate it into the language of Category Theory to provide a natural categorical semantics of iteration and a framework for a general theory of computability based on iteration as in [4,13].
In the first section, we consider algebraic structures A = ⟨U, R⟩ where R ⊆ U × U and we recall the basic notions of substructure and product of structures. For any structure A , we consider the Moore family of A-closed sets, i. e. the class of the universes of the substructures of A and the associated closure operator closA assigning to any subset of U the least A-closed set containing it.
In the second section, we introduce relational homomorphisms between two structures A and B as (A×B)-closed sets. Traditional homomorphisms from A into B turn out to be the relational homomorphisms which are total functions on the universe of A.
Inductively generated, injective and Peano structures are borrowed from uni-


versal algebra and are used to give sufficient conditions for closA×B h to be the least (unique) homomorphism from A = ⟨U, R⟩ into B = ⟨V, S⟩ which ex- tends function h . From such a result, it follows that closA×B h is also the least (unique) function ϕ satisfying the equation ϕ = h ∪ (R− ◦ ϕ ◦ S) . Since the closure operator closA×B is algebraic, the function closA×B h can be obtained as the union of an ω-chain of functions extending h.
In the third section, functions defined by primitive and general iteration are shown to be structure homomorphisms, so that the functions computable by the for-do and the while-do constructs turn out to be structure homo- morphisms.

Algebraic structures
This section introduces algebraic structures and recalls the basic notions of substructure and product of structures. For any structure A , we consider the Moore family of A-closed sets and the associated closure operator closA assigning to any subset of U the least A-closed set containing it.
Definition 1.1 A (unary) algebraic structure, or simply structure, is a pair
A = ⟨U, R⟩ ,
where U is a set and R ⊆ U ×U . Set
R : x '−→x'

iff

For any V ⊆ U , the pair

< x, x' > ∈ R . 

⟨V, V ² R⟩ ,

is a substructure of A iff it is a structure, i. e. iff V ² R ⊆ V ×V ; in this case we say that V is A-closed.
Note that V is A-closed iff
R : x '−→x' ∧ x ∈ V ⇒ x' ∈ V
for any x, x' ∈ U , i. e. iff


where
image(V, R) ⊆ V ,

image(V, R)= {x' ∈ U | ∃x∈V R : x '−→x' } .

A Moore family on U is a class M of subsets of U such that
  N ∈ M


for any N ⊆ M . Note that U ∈ M for any Moore family M on U in so far as U =	∅.
Lemma 1.2 A-closed sets constitute a Moore family on U.	 
For any X ⊆ U , let closA X be the closure of X in A , i. e. the least
A-closed set extending X . Recall that the mapping
X '−→closA X
turns out to be a closure operation , i.e. an extensive, monotone and idem- potent function:
X ⊆ closA X , 
X ⊆ Y ⇒ closA X ⊆ closA Y ,
closA X = closA(closA X)
and note that for any A-closed set V extending a set X ⊆ U , we have
X ∪ image(V, R) ⊆ V .
Lemma 1.3 For any structure A and any set X ⊆ U ,
closA X = X ∪ image(closA X, R) .
Proof. By definition of closA X, we have
X ∪ image(closA X, R) ⊆ closA X . 
On the other hand, X ∪ image(closA X, R) ⊆ closA X implies that image(X ∪ image(closA X, R), R) ⊆ image(closA X, R)
and therefore
image(X ∪ image(closA X, R), R) ⊆ X ∪ image(closA X, R) ,
i. e. X ∪ image(closA X, R) is an A-closed set.
But closA X is the least A-closed set containing X
closA X ⊆ X ∪ image(closA X, R)
and the lemma follows immediately.	 
Lemma 1.4 For any structure A and any set X ⊆ U ,
closA X =   Xn
n∈N
where
X0 = X , 
Xn+1 = image(Xn, R) .

Peano Structures
Relational homomorphisms between two structures A and B are defined as (A×B)-closed sets. Traditional homomorphisms turn out to be the relational homomorphisms which are total functions.
Inductively generated, injective and Peano structures are borrowed from uni- versal algebra and are used to give sufficient conditions for closA×B h to be the least (unique) homomorphism from A = ⟨U, R⟩ into B = ⟨V, S⟩ which ex- tends function h . From such a result, it follows that closA×B h is also the least (unique) function ϕ satisfying the equation ϕ = h ∪ (R− ◦ ϕ ◦ S) . Since the closure operator closA×B is algebraic, the function closA×B h can be obtained as the union of an ω-chain of functions extending h.
A binary relation R on a set U is injective iff
R : x '−→y ∧ R : x' '−→y ⇒ x = x'
for every x, x',y ∈ U .
Let R− be the inverse of relation R.
Lemma 2.1 A binary relation R is injective iff R− is a function.	 
For any set X ⊆ U , a structure A is:
a (unary) algebra iff R is a total function on U ;
inductively generated by X iff
U ⊆ closA X ;
injective with respect to X iff relation R is injective and
X ∩ image R = ∅ .
A Peano structure relative to X is a structure inductively generated by X and injective with respect to X . Note that a Peano structure satisfies the ”no junk, no confusion” slogan of [11].
From now on, we will be concerned with two structures
A = ⟨U, R⟩ , B = ⟨V, S⟩ .
For any two structures A and B , consider the structure
A×B = ⟨U ×V, R×S⟩
where R×S is the relation on U ×V such that
R×S : < x, y >'−→< x', y' >

iff

R : x '−→x' ∧ S : y '−→y'


for any x, x' ∈ U and any y, y' ∈ V . A relation
F ⊆ U ×V
is a relational homomorphism from A into B iff it is (A×B)-closed, i. e. iff
R : x '−→x' ∧ S : y '−→y' ∧ F : x '−→y ⇒ F : x' '−→y'
for any x, x' ∈ U and any y, y' ∈ V , i. e. iff
image(F, R×S) ⊆ F . 
A homomorphism from A to B is a relational homomorphism from A to B
being a function. Note that homomorphisms may be partial functions. Let
R ◦ S = {< x, z >∈ U ×Z | ∃y∈V R : x '−→y ∧ S : y '−→z}
be the composite of R ⊆ U ×V and S ⊆ V ×Z and let
Rn = idU ◦ R ◦ ... ◦ R
be the n-th iterate of R, obtained by composing n times relation R with the
identity function idU on U .
Furthermore, for any R ⊆ U ×V , let
dom R = {x ∈ U | ∃y∈V R : x '−→y} ,
ima R = {y ∈ V | ∃x∈U R : x '−→y} .
Lemma 2.2 For any relations R ⊆ U ×U , S ⊆ U ×V and F ⊆ U ×V , we have
image(F, R×S)= R− ◦ F ◦ S . 
Proof. It suffices to note that
image(F, R×S) = {< x', y' > | ∃x,y F : x '−→y ∧ R×S :< x, y >'−→< x', y' >}
= {< x', y' > | ∃x,y R : x '−→x' ∧ F : x '−→y ∧ S : y '−→y'}
= {< x', y' > | ∃x,y R− : x' '−→x ∧ F : x '−→y ∧ S : y '−→y'}
= R− ◦ F ◦ S . 
 
The following five technical lemmata state basic properties of relational homomorphisms.
Lemma 2.3 For any two structures A and B, a relation F ⊆ U × V is a relational homomorphism from A to B iff
R− ◦ F ◦ S ⊆ F . 


Proof. The lemma follows immediately from the lemma above.	 
By Lemma 1.3 , relational homomorphisms from A into B constitute a Moore family; furthermore, for any relation T ⊆ U ×V , relation
closA×B T
is the least relational homomorphism from A into B extending T .
Note that for any relational homomorphism F from A into B extending a relation T ⊆ U ×V , we have
T ∪ (R− ◦ F ◦ S) ⊆ F . 
Lemma 2.4 For any two structures A and B and any relation T ⊆ U ×V ,
closA×B T = T ∪ (R− ◦ (closA×B T ) ◦ S) .

Lemma 2.5 For any two structures A and B and any relation T ⊆ U ×V ,
closA×B T =  (R−)n ◦ T ◦ Sn .
n∈N
Proof. By Lemma 1.4 , we have that
closA×B T =   Tn
n∈N
where
T0 = T , 
Tn+1 = image(Tn, R×S)= R− ◦ Tn ◦ S . 
Then, it is immediate to see by induction on n ∈ N that
Tn = (R−)n ◦ T ◦ Sn
and the lemma follows immediately.	 
Lemma 2.6 For any two structures A and B and any relation T ⊆ U ×V ,
closA×B T ⊆ closA(dom T )×closB(ima T ) .
Proof. By induction on F = closA×B T . The induction basis is obvious.
Induction step. Assume that
F : x' '−→y' .
By definition of F and by induction hypothesis, there are x ∈ closA(dom T ) and y ∈ closB(ima T ) such that
R : x '−→x' ∧ S : y '−→y' ∧ F : x '−→y , 


and, by definition of closA(dom T ) and closB(ima T ) , we have
x' ∈ closA(dom T ) , y' ∈ closB(ima T ) .

Lemma 2.7 For any two structures A and B and any relation T ⊆ U ×V , if
closB(ima T ) ⊆ dom S
then
closA(dom T ) ⊆ dom(closA×B T ) .
Proof. By induction on closA(dom T ).
The induction basis is obvious.
Induction step. Set F = closA×B T , assume that
(a)	F : x '−→y
where x ∈ closA(dom T ) and consider any x' such that
(b)	R : x '−→x' .
Then, by the lemma above and the hypothesis,
y ∈ closB(ima T ) ⊆ dom S , 
so that there is some y' ∈ closB(ima T ) such that

(c)
Finally, by (a-c), we have
S : y '−→y' .

F : x' '−→y' .


Lemma 2.8 For any structure A inductively generated by a set X ⊆ U, any algebra B, any function h : X −→ V and any relational homomorphism F from A into B extending h, we have
dom F = U . 
Proof. Note that
closB(ima h) ⊆ V = dom S
in so far as S is a function on V , and so
U = closA X = closA(dom h) ⊆ dom(closA×B h)
by the lemma above, in so far as A is inductively generated by X. Finally, by recalling that
closA×B h ⊆ F ⊆ U ×V
for any relational homomorphism F from A into B extending h , the lemma follows immediately.	 


The next two theorems state two important results, namely the uniqueness of a homomorphism from an inductive structure into an algebra (if it exists) and the existence of a homomorphism from a Peano structure into an algebra.
Theorem 2.9 For any structure A inductively generated by a set X ⊆ U, any algebra B and any function h : X −→ V there is at most one homomorphism from A into B extending h.
Proof. By Lemma 2.8, any homomorphism ϕ from A into B extending h is a total function from U into V .
In conclusion, it suffices to show by induction on U that for any two homo- morphisms ϕ and ψ , we have
ϕx = ψx
for any x ∈ U.	 
Lemma 2.10 For any structure A injective with respect to a set X ⊆ U , any structure B and any function h : X −→ V , we have
X ² closA×B h = h . 
Proof. Set F = closA×B h. Obviously, by definition of F , we have
h ⊆ X ² F . 
On the other hand, assume that there are x ∈ X and y /= hx such that
F : x '−→y . 
Then, by definition of F , there are x' ∈ U, y' ∈ V such that
R : x' '−→x ∧ S : y' '−→y ∧ F : x' '−→y' ,
contradicting the hypothesis that
x ∈/ image R . 

Corollary 2.11 For any structure A injective with respect to a set X ⊆ U, any structure B and any function h : X −→ V , we have
closA×B h = h + (R− ◦ (closA×B h) ◦ S) ,
where + denotes disjoint union.
Proof. The corollary follows immediately from Lemma 2.4 and the lemma above.	 
Theorem 2.12 For any structure A injective with respect to a set X ⊆ U, any algebra B and any function h : X −→ V , relation
closA×B h


is a function.
Proof. Set F = closA×B h . We will show by induction on x that
F : x '−→y ∧ F : x '−→z ⇒ y = z
for any x ∈ closA X and any y, z ∈ V .
Induction basis. By Lemma 2.10 and because h is a function.
Induction step. Assume now that
F : x '−→y
and, by definition of F , there are x' ∈ U, y' ∈ V such that
R : x' '−→x ∧ S : y' '−→y ∧ F : x' '−→y' .
If
F : x '−→z
then, by definition of F and by Lemma 2.10, there are x'' ∈ U, y'' ∈ V such that
R : x'' '−→x ∧ S : y'' '−→z ∧ F : x'' '−→y'' .
Since R is injective, we have
x' = x''
and therefore, by induction hypothesis,
F : x' '−→y' ∧ F : x' '−→y''

implies that

Eventually, since S is a function,

y' = y'' .


implies that
S : y' '−→y ∧ S : y' '−→z y = z.

Corollary 2.13 For any structure A, any algebra B, any set X ⊆ U and any function h : X −→ V :
if A is injective with respect to X then closA×B h is the least homomor- phism from A to B extending h ;
if A is a Peano structure relative to X then closA×B h is a function from U into V and turns out to be the unique homomorphism from A to B extending h .


Proof.
follows immediately from the theorem above.
By Lemma 2.8, and the theorem above, closA×B h is a function from U into V . Finally, by (i), closA×B h is the least homomorphism from A into B and it turns out to be the unique homomorphism from A into B by Theorem 2.9.
 
The following theorem states the basic result which will be used in the next section to define the semantics of iterative constructs.
Theorem 2.14 For any structure A, any algebra B, any set X ⊆ U and any function h : X −→ V :
if A is injective with respect to X then closA×B h is the least function ϕ
such that
ϕ = h + (R− ◦ ϕ ◦ S); 
if A is a Peano structure relative to X then closA×B h is a function from
U into V and turns out to be the unique function ϕ such that
ϕ = h + (R− ◦ ϕ ◦ S) .
Proof. For ϕ = closA×B h , by Corollary 2.11, we have
ϕ = h + (R− ◦ ϕ ◦ S) .
Now, any function ψ such that
ψ = h + (R− ◦ ψ ◦ S)
is also a homomorphism from A into B and the theorem follows immediately from the corollary above.	 

Primitive and general iteration
Functions defined by primitive and general iteration are shown to be structure homomorphisms by applying the results of the section above, so that the meaning (i. e. the functions computable) by the for-do and the while-do constructs turn out to be structure homomorphisms.
Theorem 3.1 For any Peano algebra A = ⟨U, f ⟩ relative to a set X ⊆ U, any algebra B = ⟨V, g⟩ and any function h : X −→ V , the function closA×B h is the unique function ϕ from U into V such that
ϕx = hx	for any x ∈ X , ϕ(f x)= g(ϕx) for any x ∈ U . 


Proof. By Theorem 2.14 , we have that closA×B h is the unique function ϕ
from U into V such that
ϕ = h + (f − ◦ ϕ ◦ S) .
Now, for any function ϕ from U into V , if
ϕ = h + (f − ◦ ϕ ◦ S)

then

for any x ∈ X and

ϕx = hx


f ◦ ϕ = f ◦ (h + (f − ◦ ϕ ◦ g))
= f ◦ h + (f ◦ f − ◦ ϕ ◦ g)
= f ◦ f − ◦ ϕ ◦ g
= ϕ ◦ g

in so far as f is injective and X ∩ image(U, f )= ∅. On the other hand, assume that

(a)
for any x ∈ X and that (b)
If (b) holds, then
ϕx = hx


f ◦ ϕ = ϕ ◦ g . 

f − ◦ ϕ ◦ g = f − ◦ f ◦ ϕ = idU−X ◦ ϕ
in so far as f is injective and U = closA X . Then, by (a) , we have
ϕ = h + (f − ◦ ϕ ◦ S)
in so far as X ∩ image(U, f )= ∅ .	 

Let succ be the successor function on natural numbers.
Consider, furthermore, the Peano algebra A = ⟨N, succ⟩ relative to {0} and any algebra B = ⟨Y, g⟩ . Then, by Theorem 3.1, for any y ∈ Y the function closA×B {< 0,y >} is the unique function ϕ from N into Y such that
ϕ(0) = y , 
ϕ(n + 1) = g(ϕn)

for any n ∈ N. Now, by Lemma 2.5 ,
closA×B {< 0,y >} =  n∈N (succ−)n ◦ {< 0,y >}◦ gn
=  n∈N {< m + n, m >}m∈N ◦ {< 0,y >}◦ gn
=  n∈N {< n, y >}◦ gn
=  n∈N {< n, y >}◦ {< y, gny >}
= {< n, gny >}n∈N
and so, it corresponds to the primitive iterate of g
g y : n '−→gny
[6], which turns out to be the function computed by the for-do statement:
for c := 1 until n do y := gy .
Now, consider a set X, a partial function f on X and a set Y ⊆ X. Consider, furthermore, the structure A = ⟨X, ((X − Y ) ² f )−⟩ , the algebra
B = ⟨X, idX⟩ and note that A is injective with respect to Y .  Then, by
Theorem 2.14 , closA×B idY is the least function ϕ satisfying the iteration equation
ϕ = idY + (((X − Y ) ² f ) ◦ ϕ)
i. e. it is the least function ϕ on X such that
ϕx = x	if x ∈ Y ,
ϕx = ϕ(f x) if x ∈ dom(ϕ) − Y .
Now, by Lemma 2.5,
closA×B idY =  (((X − Y ) ² f )n ◦ idY )
n∈N
and so it corresponds to the general iterate of f under the control of Y
Y/f : x '−→f (Y ↓f)xx

[7], where

(Y ↓ f ): x '−→µi(fix ∈ Y ) .

Function Y/f turns out to be the function computed by the while-do state- ment:
while x ∈/ Y do x := fx .
Finally, note that
closA Y = dom(Y /f )= {x ∈ X | ∃n∈N,x'∈Y fn : x '−→x' }


and so, Y/f is the unique solution of the above iteration equation when
X = {x ∈ X | ∃n∈N,x'∈Y f : x '−→x } .

Conclusions and future work
In this paper closure theory has been applied to obtain a uniform semantical treatment of both primitive and general iteration.
In particular, the theory of Peano algebras has been extended to algebraic structures to inductively define iterate functions as structure homomorphisms,
i.e. as fixed points of iteration equations.
Future work will translate the results of this paper into the setting of Cat- egory Theory in order to provide a natural categorical semantics of iteration and then to compare it with related works [8,1,12].

References
S. L. Bloom and Z. Esik, Iteration Theories: The Equational Logic of Iterative Processes, New York, 1993.
J. de Bakker, Mathematical Theory of Program Correctness, Englewood Cliffs, 1980.
R. Dedekind, Was sind und was sollen die Zahlen?, Braunschweig, 1888.
S. Eilenberg and C.C. Elgot, Recursiveness, New York, 1970.
G. Germano and S. Mazzanti, Partial closures and the semantics of while: towards an iteration- based theory of data types, Computation and Proof Theory, Lecture Notes in Math. 1104 (1984) 163-174.
G. Germano and S. Mazzanti, Primitive iteration and unary functions, Ann. Pure Appl. Logic 40 (1988) 217-256.
G. Germano and S. Mazzanti, General iteration and unary functions, Ann. Pure Appl. Logic 54 (1991) 137-178.
G. Germano and S. Mazzanti, Closure functions and general iterates as reflectors, Theoret. Comput. Sci. 82 (1991) 215-252.
G. Gra¨tzer,Universal Algebra, New York, 1968.
B. Jacobs and J. Rutten, A tutorial on (co)algebras and (co)induction, Bull. EATCS 62 (1997) 222 - 259.
J. Meseguer and J. A. Goguen, Initiality, induction, and computability, Algebraic methods in semantics (Fontainebleau 1982) pp. 459-541, Cambridge, 1985.
J.J.M.M. Rutten A note on coinduction and weak bisimilarity for while programs Theoretical Informatics and Applications (RAIRO) 33 (1999), pp. 393-400.
N. Sabadini, S. Vigna and R. F. C. Walters, A Note on Recursive Functions, Math. Structures Comput. Sci. 6 (1996) 127-139.
D. A. Schmidt, Denotational semantics: a methodology for language development , Dubuque, 1988.
D. S. Scott, The lattice of flow diagrams, Lecture Notes in Math. 188 (1971) 311-366.
