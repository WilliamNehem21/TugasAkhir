	Electronic Notes in Theoretical Computer Science 171 (2007) 139–154	
www.elsevier.com/locate/entcs

A Simple Calculus for Proteins and Cells
Cosimo Lanevea, Fabien Tarissanb
a Dipartimento di Scienze dell’Informazione, Universita` di Bologna
b E´quipe PPS, CNRS & Universit´e Paris VII

Abstract
The use of process calculi to represent biological systems has led to the design of different calculi such as brane calculi [1] and κ-calculus [3]. Both have proved to be useful to model different types of biological systems.
As an attempt to unify the two directions, we introduce the bioκ-calculus, a simple calculus for describing proteins and cells, in which bonds are represented by means of shared names and interactions are modelled at the domain level. Protein-protein interactions have to be at most binary and cell interactions have to fit with sort constraints.
We define the semantics of bioκ-calculus, analyse its properties, and discuss its expressiveness by modelling two significant examples: a signalling pathway and a virus infection.
Keywords: Formal methods, Process algebras, Systems biology, Formal molecular biology, Modelling biological systems

Introduction
One problem when dealing with molecular biology is to extract a functional meaning out of the mass of current knowledge. This problem has pleaded for the development of specific tools that describe biology in a faithful way. Among these tools, process algebras have been proved powerful enough to formalise the interactions, to render in a natural way the massive parallelism and concurrency of interactions, and to analyse the overall behaviour.
Two different process algebraic developments in particular brought some interest and various results. A first approach based on the π-calculus [7] and following prin- ciples proposed in [8] uses shared names to represent bonds between proteins. One of those calculi – the κ-calculus [3] – showed to be very convenient for representing mechanisms such as signalling pathways or regulatory networks. Another family of calculi – the brane calculi – proposed in [1] by relying on Mobile Ambient [2], used action and co-action capabilities located on the surface of cell membranes. Such calculi demonstrated to be suitable for representing molecular transport as well as virus infections.

1571-0661 © 2007 Elsevier B.V. Open access under CC BY-NC-ND license.
doi:10.1016/j.entcs.2007.05.013

As these calculi turn out to commit to very different paradigms, it seems com- pelling to develop a unified framework able to handle the two kinds of systems. Such a unified framework is the aim of this contribution. In particular, the chal- lenge is to enucleate few basic realistic primitives that permit to describe systems using mechanisms of κ-calculus and brane calculi.
Our new calculus, called bioκ-calculus, uses interactions that are complexations and decomplexations of two proteins. These interactions follow the same pattern of those of κ-calculus. Actually, they are similar, but even simpler, to mκ-calculus interactions [3], a calculus introduced to ease the translation of κ-calculus in π- calculus. The bioκ-calculus also retains compartments denoting cells. We precisely describe protein interactions when one of them belongs to the cell membrane and the other one to the nucleus or to the external solution. In such cases, a side-effect may occur: the interaction may change the capability of the membrane, thus preparing the cell to future fusions, endo- or exocytosis.
Cell fusions open the cell to other cells. In particular, the nucleus, whose in- teractions with the external solution are mediated by the membrane, may directly interact with another solution – the nucleus of the fusing cell – after the fusion. To model fusions we use a mechanism similar to one defined in the higher-order π-calculus [9].
Other relevant cellular interactions are also considered, such as translocations, which transport proteic material inside the cells, and phagocytosis, which allows a cell, such as viruses, to enter other cells. In the process of phagocytosis, the entering cell is enclosed into a membrane that is pull out the host cell membrane. This extraction is particularly difficult to formalise because it amounts to check that the membrane of the host cell has enough material for the new one. The bioκ- calculus formalisation overcome this difficulty by admitting matches of patterns of proteins.
Biological solutions are modelled in bioκ-calculus as labelled transition systems where labels carry information about the reactants and the rule used. It is folk- lore in process calculi that such transition systems are too intentional objects and equivalences are proposed to quotient them. In this paper we consider weak bisimu- lation [6] that equates two systems if they simulate each other. We demonstrate that weak bisimulation is a congruence in bioκ-calculus: two weakly bisimilar biological systems behave in the same way when put in every solution.
Notwithstanding the simplicity of the bioκ-calculus interactions (binary inter- actions between proteins or between membranes), the calculus is expressive enough. We discuss in full detail two significant biological examples: the RTK-MAPK path- way and a virus infection. However, the purpose of bioκ-calculus is to be a core framework for molecular biology, to be extended suitably for modelling complex systems.
The next section defines the bioκ-calculus where the interaction mechanisms are restricted to be between two proteins. Section 3 extends the basic interac- tion mechanisms with fusions that make structural modifications in the hierarchical organisation of a system. Section 4 discusses further extensions of the calculus

accounting for translocations and phagocytosis. Section 5 draws few concluding re- marks and hints at possible future works. Proofs are omitted for fitting with space limits.

The core of the bioκ-calculus
In this section we present a core version of the bioκ-calculus where interactions never change the hierarchical organisation of biological solutions. We define its syntax, its operational semantics, and weak bisimulation. We also analyse its ex- pressiveness by encoding the RTK-MAPK pathway.
Notational preliminaries. Four disjoint countable sets of names will be used: a set of protein names, ranged over by a, b, c, ·· ·;a set of edge names E, ranged over by x, y, z, ·· ·; a set of membrane names, ranged over by m, n, ·· ·. Protein names are sorted according to the number of sites they possess. Let s(·) be the function yielding the sites of proteins. The sites of a protein are indicated by the natural numbers in the set {1, ··· , s(a)}.
Sites may be bound to other sites, visible, i.e. not connected to other sites, or hidden, i.e. not connected to other sites but not useful for interactions. The state of sites are defined by maps:
interfaces, ranged over by σ, σ', ·· ·, are partial functions from naturals to the set E ∪ {v, h} (we are assuming that v, h ∈/ E). For instance, [1 '→ x;2 '→ v;3 '→ h] is an interface. In order to simplify the reading, we write this map as 1x +2 + 3. In the following, when we write σ + σ' we assume that the domains of σ and σ' are disjoint.
Interfaces are injective on edges E. Since edges have two endpoints, we are excluding that such endpoints belong to the same protein (cf. self complexation in [3]).
The sites of a protein a are completely defined by total interfaces on [1 .. s(a)]
v-h-maps, ranged over by φ, ψ, ·· ·, are interfaces onto {v, h}. We write φ for the following v-h-map:
φ(i) = ⎧⎨ h	if φ(i)= v
⎩ v	if φ(i)= h
The syntax. The syntax of the bioκ-calculus defines (biological) solutions S:
S ::=	0	|	a(σ)	|	mQ S ¢[S] |	S , S
(empty)	(protein)	(cell)	(group)
Solutions can be either empty, or a protein a(σ) indicating a protein name and its interface, or a cell mQ S ¢[T], that is a solution T, called nucleus 1 , surrounded by

1 We refer to every material surrounded by a membrane with the generic term “nucleus”; this is also referred as “cytoplasm”.

another S, called membrane, or a group of solutions S, T. Two auxiliary functions will be applied to solutions and interfaces. The function en(·) returns the set of edge names occurring in the argument; the function de(·) returns the set of dangling edge names of the argument, namely those names that occur exactly once; the function be(·) returns the set of bound edge names of the argument, namely those names that occur exactly twice. Clearly de(S)= en(S)\ be(S) and similarly for σ. For instance, in S = mQ c(1y + 2) ¢[a(1x +2+ 3), b(1 + 2x)] the set en(S) is {y, x} and the set de(S) is {y}. We abbreviate the group a1(σ1) , ··· , an(σn) with  i∈1..n ai(σi).
In the whole paper, we identify solutions that are equal up to a renaming of
edge names that are not dangling (called alpha-conversion) and we assume that all solutions meet the following well-formedness conditions:
(edge-condition) in every solution, edge names occur at most twice;
(membrane-condition) every membrane is a group of proteins, that is cells do not occur in membranes;
(nucleus-condition) the dangling edges of nuclei of cells are connected to the corresponding membrane, that is, for every mQS ¢[T], de(T) ⊆ de(S).
For example mQ c(1x +2) ¢[a(1x +2+3), b(1+2x)] does not meet the edge condition because the edge x has three ends (it is a multi-edge). The solution mQ b(1 + 2) , c(1 + 2) ¢[a(1 + 2x + 3)] does not meet the nucleus condition because the nucleus a(1 + 2x + 3) has a dangling edge that is not connected to the membrane. In the following, solutions that are membranes will be addressed by M, N, ·· ·.
Biological reactions.  Biological reactions that we consider in this section are of two types: complexations, which create edges between possibly disconnected proteins, and decomplexations, which remove edges. For instance a complexation reaction is (we are assuming s(a)= s(b)= 3)
a(1x +2 + 3) , b(1 + 2+ 3) −→ a(1x + 2y + 3) , b(1y +2 + 3)
that creates an edge y connecting the site 2 of a and the site 1 of b. These two sites, in order that this reaction be executed, must be visible. This means that the application of a complexation must check whether the sites being connected are visible or not. For example the above reaction cannot be applied to the group a(1x + 2+ 3) , b(1 + 2+ 3) because the site 2 of a is hidden. Reactions in bioκ- calculus may also change the state of sites that are visible or hidden in the reactants, switching them into hidden and visible, respectively. In the example above, this happens to the sites 3 of a and 2 of b. A concise way for defining the above reaction is the schema
r :  ((a, 2, 3), (b, 1, 2))
that makes explicit the reactant proteins – the first items of the triples –, the corresponding sites to be complexated – the second items – and the part of the interface whose state must be switched. For example, the rule r also applies to a(1 + 2 + 3) , b(1 + 2 + 3) or a(1+2+ 3) , b(1 + 2+ 3x) yielding solutions a(1 + 2y + 3) , b(1y + 2 + 3) and a(1+ 2y + 3) , b(1y + 2+ 3x), respectively. In general,

the shape of a reaction schema is

r :	((a, i, ψ), (b, j, φ))

that is a reaction name r and two triples containing a protein name, a site and a
v-h-map. A generic application of the schema r may be written as

a(i + ψ + σ) , b(j + φ + σ') −→ a(ix + ψ + σ) , b(jx + φ + σ')

where x is a fresh edge name and i + ψ + σ and j + φ + σ' are total on [1 .. s(a)] and [1 .. s(b)], respectively. It is worth to observe that the interfaces σ and σ' are not changed by r, for this reason they are not mentioned in the schema.
Decomplexations are complexations in the other way round. For instance a decomplexation reaction is

a(1x + 2y + 3) , b(1y +2 + 3) −→ a(1x +2 + 3) , b(1 + 2+ 3)

that removes the edge y. The schema describing decomplexations is similar to that of complexations:

r' :	((a, i, ψ'), (b, j, φ'))

The application of the decomplexation rule is different from complexation: in this case the two reactants must be connected by an edge between the site i of a and the site j of b. So, for example, a generic application of r' is

a(ix + ψ' + σ) , b(jx + φ' + σ') −→ a(i + ψ' + σ) , b(j + φ' + σ')

In order to separate complexations from decomplexations we consider two func- tions, C for complexations and D for decomplexations, from rule names to tuples ((a, i, φ), (b, j, ψ)). These functions C and D are assumed with disjoint domains, therefore a rule name uniquely defines whether it is a complexation or a decomplex- ation.
Let R range over C and D; let also (a, i, φ) ∈  R(r) if either R(r) =
((a, i, φ), (b, j, ψ)) or R(r) = ((b, j, ψ), (a, i, φ)). Finally let μ range over ax or
τ and let diff(S, S') be the set (en(S')\en(S)) ∪ (en(S)\en(S')).


Definition 2.1 The transition relation
μ
−→ is the least relation satisfying the re-

ductions:


(com)
(a, a, φ) ∈ C(r)	x ∈/ en(σ)
ax
(dec)
(a, a, φ) ∈ D(r)
ax

a(a + φ + σ) −→r  a(ax + φ + σ)
(sol)
a(ax + φ + σ) −→r
(mem)
a(a + φ + σ)

−→ S'
diff(S, S') ∩ en(T)= ∅
M −→ M'
diff(M, M') ∩ en(S)= ∅

S , T μ
S' , T
mQ M ¢[S] μ
mQ M' ¢[S]






(react)
(nucleus)
S −τ→ S'	diff(S, S') ∩ en(M)= ∅


mQ M ¢[S] −τ→ mQ M ¢[S']
(ms-react)

x
S −→r
'	bx
S	T −→
T'	a /= b
x
M −→r
'	bx
M	S −→
S'	a /= b



S , T −τ→ S' , T'
and the symmetric rule for ( sol).

mQM ¢[S] −τ→ mQM' ¢[S']

Let S =τ⇒ S' if S −τ→∗ '
μ S', with μ /= τ , if S τ ∗ μ	τ ∗ S'.

Rules (com) and (dec) respectively define complexations and decomplexations capabilities of proteins by lifting these information to labels of transitions and, at the same time, updating the proteins. Rules (sol) and (mem) lift transitions to groups and membranes; it is crucial that edge names created or deleted do not occur elsewhere. Rule (nucleus) lift internal transitions of nuclei to the whole cell; as before, edge names created or deleted must not occur elsewhere. We observe that (nucleus) bans complexation or decomplexation between nuclei and the solution external to the cells. Rule (react) and (ms-react) define reactions, both com- plexations and decomplexations, in groups and cells. In particular (react) also accounts for reactions between membranes of different cells. It is worth to notice that the constraint a /= b allows reactions between different proteins only. This is for simplicity sake: in case reactants are proteins with a same name we need to carry more information on the labels to separate them.
By Definition 2.1, the previous notation −→ must be read as −τ→. In facts, in [3] the transitions of the mκ-calculus were defined by means of an unlabelled reduction relation −→ that corresponds to the foregoing rules (com), (dec), (sol), and (react). In this case we have adhered to a labelled transition for reducing the number of the rules: such number should have been larger than in Definition 2.1 because of the presence of membranes.
The transition relation preserve well-formedness of solutions.
μ
Proposition 2.2 If S is well-formed and S −→ T then S is well-formed as well.
It is worth to observe that membrane names do not play any role at this stage. They will be relevant in the complete system with complex membrane reactions

presented in Section 3.
Example 2.3 The so-called RTK-MAPK pathway are intensely used and studied in many approaches modelling and simulating biological systems [8,3]. We therefore model the first steps of such a pathway in bioκ-calculus, thus providing a touchstone for our calculus.
The signal stimulus stems from the epidermal growth factor egf whose dimeric form (1) can bind to its associated receptor egfr (2), a transmembrane protein with an extracellular ligand-binding domain located on the plasmic membrane of some cells. This binding activates egfr by phosphorylating an internal domain of the protein (3 and 4). This activation leads to multiple interactions with cytoplasmic complexes of proteins by successive binding-phosphorylations, starting with the adapter protein shc (5). The cascade of interactions ends with the activation of the extracellular signal-regulated kinase erk. This phosphorylated protein can then translocate into the nucleus and modify the gene expression, stimulating cells to enter mitosis. This causes the cell to divide and proliferate.
After the biological description egf, rtk, and shc have respective arities 3, 4, and 2. We give here the formal rendering of the five first steps described above:
r1 :	((egf, 1, 2), (egf, 1, 2)) ∈ C 
r2 :	((egf, 2, ∅), (egfr, 1, 4)) ∈ C 
r3 : ((egfr, 2, 3+ 4), (egfr, 2, 3+ 4)) ∈ C 
r4 :	((egfr, 2, ∅), (egfr, 2, ∅)) ∈ D 
r5 :	((egfr, 3, ∅), (shc, 1, 2)) ∈ C 
The simple run below displays that our calculus is expressive enough to define the causality involved in the transduction in a precise yet natural way.

egf(1 + 2) , egf(1 + 2) ,
mQ egfr(1 + 2+3+ 4) , egfr(1 + 2+3+ 4) , M ¢[shc(1 + 2) , S]
−τ→ egf(1z + 2) , egf(1z + 2) ,
mQ egfr(1 + 2 + 3+ 4) , egfr(1 + 2 + 3+ 4) , M ¢[shc(1 + 2) , S] (r1)
−τ→ egf(1z + 2y) , egf(1z + 2) ,
mQ egfr(1y +2 + 3+ 4) , egfr(1 + 2 + 3+ 4) , M ¢[shc(1 + 2) , S] (r2)
−τ→ egf(1z + 2y) , egf(1z + 2u) ,
mQ egfr(1y +2 + 3+ 4) , egfr(1u +2 + 3+ 4) , M ¢[shc(1 + 2) , S] (r2)
−τ→ egf(1z + 2y) , egf(1z + 2u) ,
mQ egfr(1y + 2x +3 + 4) , egfr(1u + 2x +3 + 4) , M ¢[shc(1 + 2) , S] (r3)
−τ→ egf(1z + 2y) , egf(1z + 2u) ,
mQ egfr(1y +2 + 3 + 4) , egfr(1u +2 +3 + 4) , M ¢[shc(1 + 2) , S] (r4)
−τ→ egf(1z + 2y) , egf(1z + 2u) ,
mQ egfr(1y +2 + 3t + 4) , egfr(1u +2 + 3 + 4) , M ¢[shc(1t + 2) , S] (r5)

A couple of problems of our notation deserve to be discussed though. Consider

the initial solution:
egf(1 + 2) , egf(1 + 2) , egf(1 + 2) , egf(1 + 2) ,
mQ egfr(1 + 2x + 3+ 4) , egfr(1 + 2x + 3+ 4) , M ¢[shc(1 + 2) , S]
After two applications of rule r1, we obtain the solution
egf(1x + 2) , egf(1x + 2) , egf(1y + 2) , egf(1y + 2) ,
mQ egfr(1 + 2x + 3+ 4) , egfr(1 + 2x + 3+ 4) , M ¢[shc(1 + 2) , S] that reduces, after two application of rule r2 to the wrong solution
egf(1x + 2) , egf(1x + 2u) , egf(1y + 2v) , egf(1y + 2) ,
mQ egfr(1u + 2x + 3+ 4) , egfr(1v + 2x + 3+ 4) , M ¢[shc(1 + 2) , S]
where two different dimeric forms of egf connect to a same pair of egfr receptors. Our notation is too simple to rule out such configurations. In mκ-calculus, this expressiveness issue is solved by the use of reaction ids and pattern matching over them. Actually, this issue is related to a more general question named self-assembly problem and worth to be studied independently [5].
The second problem is manifested at the end of the RTK-MAPK pathway. The pathway causes a phosphorylation of a particular protein (erk) that enters in the nucleus, which is represented as cell, as well. At this stage we have no mechanism that make entities enter in the cell. Such mechanisms will be discussed in detail in Section 4.
Extensional semantics: bisimulation. The transition relation of Definition 2.1 associates solutions to graphs where nodes are solutions and μ-labelled edges model

μ
the transitions S −→
S'. The induced equivalence on bioκ-calculus solutions is

graph isomorphism: two terms are equivalent provided their associated graphs are isomorphic. Graph isomorphism is too strong as a biological semantics because it distinguishes solutions that are equal up-to τ -transitions:
Let C(r) = ((a, 1, ∅), (b, 1, ∅)) = D(r'), that is r and r' are reversible reactions. Then the solutions a(1y + σ) , b(1y + σ') and a(1 + σ) , b(1 + σ') have underlying graphs that are not isomorphic. Also in this case there is no reason to separate the two solutions: they have isomorphic graphs up-to a τ -transition, which is an internal reduction of the solutions and should not be observable.
The following equivalence, adapting weak bisimulation in process calculi [7] to our setting, does not undergo the above criticism.
Definition 2.4 A (weak) bisimulation is a symmetric binary relation R between solutions such that S R T implies:
if S −τ→ S' then T =τ⇒ T' and S' R T';

x
if S −→r
x
S' then T =⇒r
T' and S'
R T'.

S is bisimilar to T, written S ≈ T, if S R T for some bisimulation R .

Proposition 2.5	(i) “ , ” is an abelian monoidal operator with identity 0. Na- mely S , T ≈ T , S and (S , T) , R ≈ S , (T , R) and S , 0 ≈ S.
≈ is preserved by injective renamings that are identities on dangling edge names. Namely, let ι be an injective renaming on en(S) such that ι is the identity on de(S), then S ≈ ι(S).
≈ is preserved by reversible rules. Namely, let C(r) = ((a, i, ψ), (b, j, φ)) and D(r') = ((a, i, ψ), (b, j, φ)) then a(i + ψ + σ) , b(j + φ + σ') ≈ a(ix + ψ + σ) , b(1x + φ + σ').
A relevant property of ≈ is that every two bisimilar systems behave in the same way when plugged in a same context.
Theorem 2.6 ≈ is a congruence.
As far as biology is concerned, the substitution property owned by ≈ might be too strong, thus making this equivalence an unsensible semantics. In this context, one usually wants to prove that two parts behave in the same way when plugged under a certain number of contexts, rather than every possible one. Therefore, a semantics owning a parametric congruence property might fit better with biology. However what these parameters are and what are the properties owned by a “good” extensional semantics for biology remains unclear to us and is left as an open issue.
Other remarks about ≈ are in order.
S ≈ T does not imply de(S) = de(T). For two reasons: First of all, by

x
bisimulation, S −→r
y
S' may be matched by T −→r
T' with x /= y. Second,

taking empty biological relations – i.e. C = ∅ and D = ∅ –, then a(1x) ≈ 0 but their dangling edges are different.
Nevertheless a relationship on a subset of the dangling edges of two bisimilar solutions may still be established. Let oe(S), called the observable edges, be

x
the set {x | S −→r
S' and r in domain of D}. It is easy to prove that if S ≈ T

then there is an injective renaming ι such that oe(S)= ι(oe(T)).
ax

Let M be inert when M /=⇒r
inert, then mQM ¢[S] ≈ 0.

Cell interactions
for every ax. It is possible to verify that, if M is

The calculus of Section 2 is not very different from mκ-calculus. Cells, in particulars, do not play any relevant role since their structure is preserved by the transition. In this section we explore an extension with brane primitives, thus being able to model merging and splitting of cells such as the following endosomes fusion:
esmQ M ¢[S] , esmQN ¢[T] −τ→ esmQM , N ¢[S , T]
The extension of core bioκ-calculus we are going to design retains higher-order mechanisms, following higher-order π-calculus, a similar extension already studied

for π-calculus [9]. We begin by augmenting the syntax with membrane reagents:
S ::=	···	|	 M ; S3 · S
(mreagent)
An mreagent is an intermediate (unstable) solution that is used for manifesting the capability to perform a fusion with a cell. Mreagents M ; S3 · T meet the following properties: S and T do not contain other mreagents, M is a multiset of proteins and de(S) ⊆ de(M).
There are two operations involving membranes:
fusions – two membranes are close and they are fused becoming a unique membrane. Fusions are formalised by a function F from rule names to triples ((m, m'), n). We write (m ⊗ m', n) = F(r) if either F(r) = ((m, m'), n) or
F(r) = ((m', m), n). We also write m ∈ F(r) if (m ⊗ m', n) = F(r), for some
m' and n. We assume that the domains of F, C and D are disjoint.
side effects of complexations and decomplexations – a complexation of a protein on the membrane of the cell might activate the membrane and prepare it for possible fusions. Activations of complexations are defined by a function A that takes pairs (ar, m) and returns membrane names.
In the following, with an abuse of notation, we use μ to also range over labels
mr.

μ
Definition 3.1 The transition relation −→ is the least one that includes the rules
in Definition 2.1 where (mem) and (ms-react) have also the premise “(ar, m) not in the domain of A” and the following ones


(open)
m ∈ F(r)
(grasp)
μ
S −→

 M ; S''3 · S'

mQ M ¢[S] mr
 M ; S3 · 0
S , T μ
 M ; S''3 · (S' , T)

(fuse)
m
−→

 M ; S''3 · S'	T nr

 N ; T''3 · T'
(fuse-i)

n  N ; T3 · S'

F(r)= (m ⊗ n, m')
S , T −τ→ S' , T' , m'Q M , N ¢[S'' , T'']
(mem-a)
F(r)= (m ⊗ n, m')

mQ M ¢[S] −τ→ m'Q M , N ¢[S'] , T
(ms-areact)

x
M −→r  M'
x
M −→r
'	bx
M	S −→ S

A(ar, m)= n	diff(M, M') ∩ en(S)= ∅
a /= b	A(ar, m)= n

x
m M	S	−→r
nQ M' ¢[S]


mQ M ¢[S] −τ→ nQM' ¢[S']

The notations S =τ⇒ Definition 2.1.
μ
T and S =⇒
T, μ /= τ , are defined in the same way as in

Rule (open) prepares a cell to be fused with an enclosing cell or with a peer cell; the precondition guarantees that the cell may participate to a fusion. Rule (grasp) lifts the fusion capability to groups by freezing them in a mreagent. Rules (fuse) and (fuse-i) define fusions between peer and nested cells, respectively. The new cell is created with the membrane name returned by the function F. Rule (mem-a) is a refinement of (mem). It models possible side-effects on the membrane name due to interactions between membrane proteins and proteins outside the cell. Such interactions may activate membranes by changing their fusion capability, which is encoded in our formalism by membrane names. In a similar way, rule (ms-areact) refines (ms-react).
Example 3.2 A virus is an intracellular parasite that uses the infected cell repli- cation machinery in order to duplicate its own genetic material. Usually, a virus consists of a genetic material (DNA or RNA), a capsid – a proteic structure provid- ing protection of the genetic material (we use the term of nucleocapsid to denote both the capsid and the genetic material) –, and a possible envelope (stolen to the infected cell and used later on to infect other cells).
Below we encode in bioκ-calculus an influenza-like virus relying on similar de- scriptions in [1,4]. We focus on the infection part, as we cannot express any creation of new material. This part consists of the following steps:
a protein-protein interaction between a virus membrane protein – the hemag- glutinin ha – and a receptor – a glycoprotein gly – on the cell’s membrane; this activates gly and prepares the cell to the phagocytosis;
the phagocytosis of the virus occurs thus creating a new vesicle ves engulfing the virus;
a fusion occurs between the new vesicle and an endosomal membrane (edsm) in the cytoplasm; this makes the virus enter the endosome;
a further fusion occurs between the endosome and the virus that is now part of the nucleus; this leads to an exocytosis that eventually releases the virus nucleocapsid into the cytoplasm.
We consider the following rules:
r3 : ((edsm, ves), edsm) ∈ F 
r4 : ((edsm, vs), edsm) ∈ F 
The initial solution is Virus , Cell where the components are as follows:
Virus	:= vsQha(1) ¢[Nucaps]
Cell	:= cllQ gly(1) , Mc ¢[Endosome , Cytosol]
Endosome := edsmQ Me ¢[Es]
We describe the last part of the infection pathway, assuming that the virus has already been engulfed in the host cell. We skip the first steps because we cannot express the phagocytosis of the virus. In Section 4 we will analyse the missing part.

Therefore, let

cllQMc ¢[Endosome , vesQ gly(1) ¢[Virus] , Cytosol]

be the initial solution. A possible run is:
cllQMc ¢[edsmQMe ¢[Es ], vesQgly(1) ¢[Virus] , Cytosol]
−τ→ cllQMc ¢[edsmQMe , gly(1) ¢[Virus , Es], Cytosol]	(r3)
≡ cllQMc ¢[edsmQMe , gly(1) ¢[vsQha(1) ¢[Nucaps] , Es], Cytosol]
−τ→ cllQMc ¢[edsmQMe , gly(1) , ha(1) ¢[Es], Nucaps , Cytosol]	(r4)

Extensional semantics of cells: context bisimulation. The extensional se- mantics of Definition 2.4 must be refined in order to account with new transi- tions and mreagents. This refinement should for instance equate solutions such as a(1x) , mQb(1x) ¢[S] and a(1) , nQb(1) ¢[S] when C(r) = ((a, 1, ∅), (b, 1, ∅))
D(r')= ((a, 1, ∅), (b, 1, ∅)) and A(br, n)= m' and A(b ' , m')= n. This case is very similar to that of reversible reactions discussed in the previous section.
Definition 3.3 A context bisimulation is a symmetric binary relation R between solutions such that it is a bisimulation and S R T implies:

if S mr
 M ; S
''3
· S'
mr
then T =⇒
M' ; T
''3
· T'
and, for every N, R, and n such

that F(r)= (m ⊗ n, n'), both S'' , n'Q M , N ¢[S']  R  T'' , n'Q M' , N ¢[T''] 
and S' , n'Q M , N ¢[S'' , R] R  T' , n'QM' , N ¢[T'' , R] .
S is context bisimilar to T, written S ≈c T, if S R T for some context bisimulation
R .
Context bisimulation retains the same substitutivity property of ≈.
Theorem 3.4 ≈c is a congruence.
Context bisimilarity retains a universal quantification that is hard to check in practice. One might wonder whether it is possible to simplify the definition. For example, instead of quantifying on cells, one may simply require the bisimilarity of components of mreactants, namely M ≈c M', S'' ≈c T'', and S' ≈c T'. It is easy to demonstrate that the induced equivalence, which we note ≈+, is a congruence and ≈+⊆≈c. At the time we write this note it is not clear to us whether this containment is strict or not. This issue actually requires further investigations.

Translocation and phagocytosis
The bioκ-calculus presented in Sections 2 and 3 has a limited expressive power: mechanisms such as translocation, where a single protein may enter a cell, or phago- cytosis, where a cell may enter another cell cannot be described. For this reason we overlooked the first steps of the virus infection in Example 3.2. The integration of translocation and phagocytosis in bioκ-calculus is not simple and admits several design choices. We discuss few possible formalisations below.

Translocation. Translocation is a mechanism enabling the transport of proteins through a membrane. This mechanism is very specific and controlled by particular membrane proteins that are different for each type of membrane.
Translocations usually do not transport the full proteins in one step because they are too big for traversing the membrane. This problem is solved in two ways. One way is that protein codes – the mRNA chains – interact with a ribosome (big proteic complex in charge of translating the code) and the interactions translate part of the code in the cell and, at the same time, create the encoded protein. Alternatively, biology uses ad-hoc proteins – the chaperons – that unfold the entering protein during the process (this is actually what happen at the end of the RTK-MAPK cascade described in Section 2).
We abstract from this low level mechanisms and assume that proteins may safely traverse the membrane. A first approximative definition of translocation might only check that the entering protein be disconnected and retains a suitable interface:
a(φ + ψ) , mQM ¢[S] −τ→ mQM ¢[a(φ + ψ) , S']
(according to our notation, both φ and ψ are v-h-maps, therefore en(φ + ψ)= ∅). This description is not satisfactory for at least two reasons. First, this rule admits a possibly infinite feeding of cells with membrane m by proteins a. This is not the case in biology: after a certain number of translocations, the membrane name changes, disabling further translocations. Second, the above rule makes the membrane play a passive role. This means that it is not possible to model the effects of organelle and chaperon proteins.
A better way is to model translocation as a decomplexation rule between an external protein already connected to the membrane (and nowhere else) and a membrane protein. To avoid the confusion of two different phenomena – simple decomplexations and decomplexations with translocations – we use a further func- tion T from rule names to tuples ((a, i, ψ, ψ'), (b, j, φ), m, n). As usual we assume that there is no clash between rule names in the domain of T and the other func- tions that have been used in the paper. The two rules controlling translocations are:



(trs-p)
'
(trs-m)


x
M −→r  M'

T (r)= ((a, i, ψ,ψ ), (b, j, φ), m, n)
ax
T (r)= ((a, i, ψ, ψ'), (b, j, φ), m, n)

a(ix + ψ + ψ') −→r  0
x
m M	S	−→r
nQM' ¢[a(i + ψ + ψ') , S']

In rule (trs-p) the interface of a has exactly one site bound because the interfaces ψ and ψ' are v-h-maps according our notation. The interface ψ is being turned into ψ during the translocation, ψ' is unchanged. The protein a disappears during (trs-p). Dually, the protein a appears during (trs-m). The translocation will be the effect of the synchronisation (react).
Phagocytosis. Phagocytosis is a process allowing cells to enter other cells. Phago- cytosis of mQM ¢[S] – usually a small cell – by nQN ¢[T] – usually a big cell –

transports the former into the nucleus of the latter by surrounding mQ M ¢[S] with a new membrane that is part of N. This surrounding mechanism is the problematic one because it amounts to split the host cell membrane in some “not local” way.
For example the transition
mQM ¢[S] , nQN ¢[T] −τ→ nQ N ¢[n'Q 0 ¢[mQ M ¢[S]] , T]
is not very appropriate because the new membrane n' is empty. As we don’t have any mechanism for feeding the membrane yet, the solution ban complexations of the new membrane with proteins.
Actually, phagocytosis should be possible provided the membrane of the host cell had enough material for a new membrane. We therefore model phagocyto- sis as a decomplexation of two proteins in the membranes of the reactant cells with the side effect of splitting the host cell according to some predefined pat- tern. As for translocations, we use a new functions from rule names to tuples ((a, i, ψ), (b, j, φ), m, n, n', n'', N'), where de(N') = ∅. The meaning of this tuple is the following: (a, i, ψ) and (b, j, φ) are the two proteins that decomplexate and are located in two membranes m and n, respectively. The name n' is the one given at the new membrane surrounding the phagocytosed cell, N' is the membrane material of the new cell.
In the following rules, transition labels are extended with mx and still ranged over by μ. Let  denote disjoint union of sets. The rules defining phagocytosis are:


(open-p)
ax	'


'	''	'

M −→r  M
P(r)= ((a, i, ψ), (b, j, φ), m, n, n , n , N )

Q	¢[
] mx	'	3

m M	S
−→r	M ; S · 0

(open-c)
bx
'	''

Q	¢[
] nx
b (σ ) ; S3

(phago)
mx
''3	'	nx
''3	'

S −→r
M ; S	· S
T −→r
N ; T	· T

P(r)= ((a, i, ψ), (b, j, φ), m, n, n', n'', N')
S , T −τ→ S' , T' , n'Q N ¢[n''QN' ¢[mQ M ¢[S'']], T'']
Rule (open-p) defines the transition of the phogocytosed cell. The label ax of
the membrane transition becomes mx in the cellular transition. This exposes the phagocytosis to the label. Similarly for the rule (open-c). In (open-c) the material needed for the new membrane surrounding the phagocytosed cell is removed from the host cell membrane. This material is restored in the rule (phago).
It is not clear to us how close the above rules are to the biological phagocytosis. It is worth to observe that (open-c) is computationally expensive, at least if compared to the other operations described in the paper. According to (open-c), extracting a pattern of proteins out of a membrane amounts to a long sequel of checks that lock

the membrane, thus inhibiting other interactions. It is an open question whether it is possible or not to design simpler and more basic mechanisms for phagocytosis.
Then we could finish the modelling of Example 3.2 by adding
r1 :	((ha, 1, ∅), (gly, 1, ∅)) ∈ C 
(1)	(glyr1 , cll) '→ acll ∈ A 
r2 : ((ha, 1, ∅), (gly, 1, ∅)), vs, acll, cll, ves, (gly(1)) ∈ P 
The formal rendering of Example 3.2 can now be stated from the beginning, namely before that the phagocytosis occurs.
vsQha(1) ¢[Nucaps] , cllQgly(1) , Mc ¢[Endosome , Cytosol]
−τ→ vsQha(1x) ¢[Nucaps] , acllQgly(1x) , Mc ¢[Endosome , Cytosol]	(r1 − (1))
−τ→ cllQMc ¢[vesQgly(1) ¢[vsQha(1) ¢[Nucaps]] , Endosome , Cytosol] (r2)

Conclusions
We have presented a unique framework for modelling proteins and cells interactions – the bioκ-calculus. Protein interactions in bioκ-calculus are of two types: com- plexations and decomplexations; cell interactions in bioκ-calculus describe fusions. All interactions are “local” in the sense that they always involve two proteins. Fu- sions have been modelled by using an higher order semantics in the style of [9]. We have studied the operational semantics of bioκ-calculus and an extensional seman- tics of its – the bisimulation. The expressiveness has been analysed by modelling two significant systems and comparing them with similar ones that have been proposed in other algebraic approaches.
Some extensions of bioκ-calculus rules may be done without difficulties. In this paper we have discussed rules modelling translocations and phagocytosis, even if the latter ones are not very satisfactory. Other extensions have not been discussed, but are simple. For instance complexations and decomplexations might check a part of the interface without modifying it. It suffices to upgrade the functions C and D to tuples ((a, i, φ, φ'), (b, j, ψ, ψ')) and change rules (com) and (dec) into


(com)
(a, a, φ, φ') ∈ C(r)	x ∈/ en(σ)


and
a(a + φ + φ'
x
+ σ) −→r
a(ax


+ φ + φ'
+ σ)

(dec)

(a, a, ψ, ψ') ∈ D(r)
ax	

a(ax + ψ + ψ' + σ) −→r  a(a + ψ + ψ' + σ)
Other biological reactions have not yet been considered and are left to future work, such as those in [1] or in [4].
Extensional semantics of bioκ-calculus are an intriguing issue we plan to in- vestigate in the future. In particular we are interested in mathematical tools and

techniques that help in assessing properties of biological solutions. Such tools might be extensively used to predict outputs of experiments in vitro.

References
Luca Cardelli. Brane calculi. In CMSB, pages 257–278, 2004.
Luca Cardelli and Andrew D. Gordon. Mobile ambients. Theoritical Computer Science, 240(1):177–213, 2000.
Vincent Danos and Cosimo Laneve. Formal molecular biology. Theoritical Computer Science, 325(1):69– 110, 2004.
Vincent Danos and Sylvain Pradalier. Projective brane calculus. In CMSB, pages 134–148, 2004.
Vincent Danos and Fabien Tarissan. Self-assembling graphs. In Jos´e Mira and Jos´e R. A´ lvarez, editors, Mechanisms, Symbols, and Models Underlying Cognition, volume 3561 of Lecture Notes in Computer Science, pages 498–507. Springer, June 2005.
Robin Milner. Communication and Concurrency. International Series on Computer Science. Prentice Hall, 1989.
Robin Milner. Communicating and mobile systems: the π-calculus. Cambridge University Press, Cambridge, 1999.
Aviv Regev, William Silverman, and Ehud Shapiro. Representation and simulation of biochemical processes using the π-calculus process algebra. In R. B. Altman, A. K. Dunker, L. Hunter, and T. E. Klein, editors, Pacific Symposium on Biocomputing, volume 6, pages 459–470, Singapore, 2001. World Scientific Press.
Davide Sangiorgi. From π-calculus to Higher-Order π-calculus — and back. In M.-C. Gaudel and J.-P. Jouannaud, editors, Proc. TAPSOFT’93, volume 668, pages 151–166, 1993.
