

Electronic Notes in Theoretical Computer Science 249 (2009) 287–305
www.elsevier.com/locate/entcs

Contraction-free Proofs and Finitary Games for Linear Logic
Andr´e Hirschowitz1
CNRS, Universit´e de Nice - Sophia Antipolis, Nice, France
Michel Hirschowitz2
CEA - LIST, Saclay, France
Tom Hirschowitz3,4
CNRS, Universit´e de Savoie, Chamb´ery, France

Abstract
In the standard sequent presentations of Girard’s Linear Logic [10] (LL), there are two ”non-decreasing” rules, where the premises are not smaller than the conclusion, namely the cut and the contraction rules. It is a universal concern to eliminate the cut rule. We show that, using an admissible modification of the tensor rule, contractions can be eliminated, and that cuts can be simultaneously limited to a single initial occurrence.
This view leads to a consistent, but incomplete game model for LL with exponentials, which is finitary, in the sense that each play is finite. The game is based on a set of inference rules which does not enjoy cut elimination. Nevertheless, the cut rule is valid in the model.
Keywords: Linear logic, game semantics, contraction elimination.


Overview
In an effort to strengthen the connection between
categories of sequent calculus proofs modulo cut elimination and
categories of winning strategies,

1 Email: ah@unice.fr
2 Email: mh@lix.polytechnique.fr
3 Email: tom.hirschowitz@univ-savoie.fr
4 ANR projects Choco and MoDyFiable

1571-0661 © 2009 Elsevier B.V. Open access under CC BY-NC-ND license.
doi:10.1016/j.entcs.2009.07.095

we try to push forward the idea of neutrality, introduced by Delande and Miller [7] (see also our [13]). The idea there is to understand provability in MALL (Multi- plicative Additive Linear Logic) as a graphical game 5 , as follows.
Positions of the game are graphs with edges labelled by formulae. The edges adjacent to each vertex form a sequent, the vertex itself representing a player trying to prove that sequent. Each move acts upon exactly one edge; its restrictions to each end of the edge correspond to inference rules in the sequent calculus. Finally, a formula A is valid when, on the following graph, the left-hand vertex (Proponent
Δ) has a winning strategy against the right-hand vertex (Opponent ▲):
Δ	A	▲ .
In this paper, we extend this approach to exponential connectives, for which we recall the four standard rules:

Γ,A 


Γ, ?A
Γ Γ, ?A
Γ, ?A, ?A Γ, ?A
?Γ,A 


?Γ, !A

(where ?Γ denotes a list of ? formulae).
Interpreting these rules as moves in a graphical game raises the issue of infinite plays, for which deciding who wins is problematic.
In this paper, we explore the following way around this problem. We first replace the usual (right) tensor rule by an admissible variant
Γ, ?Θ,A	Δ, ?Θ,B 

Γ, Δ, ?Θ,A ⊗ B
Tens’,

which is still somehow decreasing, yielding an equivalent set of inference rules which we call LL'. We then show that every sequent provable in LL' admits a bounded proof, i.e., a contraction-free one where cuts are reduced to at most one initial occurrence.
Using this, one may devise a graphical game for LL' without contraction, and derive from it a model of LL' provability, which is consistent (but incomplete). We sketch this, and explain why the result is not satisfactory: the model validates A  !A.
We then investigate one possible explanation for this deficiency: the absence of
n-ary dereliction. Restoring it leads to a set of inference rules which we call NLL,

where !A has the more standard decomposition ˘

n∈N
A⊗n. The notion of a bounded

proof makes sense in NLL, and we show that bounded proofs yield a model of LL', albeit an incomplete one. We show that NLL does not satisfy cut elimination, but does satisfy admissibility of cut, i.e., if Γ,A and A⊥, Δ have bounded proofs, then so does Γ, Δ.
NLL yields a more satisfactory graphical game, in which winning strategies form a model of NLL, again consistent. Analogously to previous work [13], this model

5 Graphical game here means a game where positions are graphs. We do not give any formal definition.

is not complete w.r.t. NLL (there is a winning strategy for ⊥ ⊗ ⊥ for instance). However, we are confident that our notion of local strategy, defined in [13] for the MALL fragment, will extend smoothly to NLL, and yield a complete model.
We thus have (by composition) a graphical game model of LL (which, again, will not be complete for LL, because NLL itself is not). We finally prove that admissibility of cut holds in this model.
We may sum up our models of LL in a diagram


LL ( ∼= ) LL'	Theorem 4.4	) NLL

ˆ	Proposition 4.5	ˆ

Proposition 3.6
\ Proposition 3.7
v
Proposition 6.7 \
Theorem 6.4
v

Game of Section 3	Game of Section 5
where an edge between two notions of validity indicates that the target is a model of the source, and a negated edge in the other direction indicates that the model is not complete. We conjecture that the vertical negated edges may be rectified by passing to local strategies in the sense of [13]. However, the horizontal negated arrow cannot be rectified.

Related work
The idea of a game semantics for logic goes back at least to Lorenzen [19], and to Blass [4] for linear logic. Blass’ approach was extended by Abramsky et al. [1], Hyland and Ong [14], Abramsky and Melli`es [2,20]. Laurent investigated the po- larised case [18]. Among these standard approaches, only some handle exponential connectives, and among them none rule out infinite plays. Instead, they have to resort to smart criteria to decide who wins these infinite plays.
Delande and Miller’s [7] game, our previous work [12,13], and Girard’s ludics [11]
of course were a source of inspiration for this paper.
Kashima [15] and Dyckhoff et al. [8,9] have already observed certain forms of contraction elimination in other settings.

Organisation of the paper
In Section 2, we prove that any sequent provable in LL has a bounded proof in LL'. In Section 3, we build a first graphical game from the rules of LL' minus contraction. We then prove that it yields a consistent model of LL' provability, which is however incomplete. In Section 4, we define our set of inference rules with n-ary dereliction, called NLL, and prove that it yields a model of LL' provability, which is again incomplete. We also show that NLL does not enjoy cut elimination. We then move on in Section 5 to define our graphical game for NLL, which we prove to yield a consistent model of NLL (hence NLL is itself consistent), which is again incomplete. In Section 7 we prove the cut rule to be admissible in the model.

Bounded proofs in LL
In this section, we prove our result on linear logic, namely that any provable sequent admits a bounded proof.
First, we recall LL formulae, defined by the grammar

A, B, C,... ::= 0  | 1  | A ⊗ B | A ⊕ B | ?A
|  T | ⊥ | A ` B | A & B | !A,

and decree that formulae on the first line are positive, the others being negative. De Morgan duality, or linear negation, A⊥ is defined as usual (sending a connective to that vertically opposed to it). Observe that we do not handle propositional variables; the sequent calculus part extends easily to variables, but for games, this is not yet clear to us. We use the usual priorities, e.g., !A  B ⊗ C means (!A)  (B ⊗ C). Finally, sequents Γ, Δ,... are lists of formulae, and we use Γ ▶ Δ as a notation for Γ⊥, Δ, when visually easier.
Now, consider the following variant of the tensor rule

Γ, ?Θ,A	Δ, ?Θ,B 

Γ, Δ, ?Θ,A ⊗ B
Tens’,


which goes back at least to Andreoli [3]. We observe that it is derivable in LL. Letting LL' denote the set of inference rules obtained by replacing the usual tensor rule with Tens’, the following should be clear:
Proposition 2.1 Provability in LL' is equivalent to provability in LL.
Thanks to rule Tens’, we further have:
Lemma 2.2 For any formula A, the formula δA = !(!A  !A ⊗ !A) is provable with neither cuts nor contractions in LL', and furthermore for any Γ, the rule
Γ, ?A⊥, ?A⊥

Γ, ?A⊥, δ⊥
Dup

is derivable without cuts nor contractions.
(Here, A   B denotes A⊥ ` B, as usual.)
Proof. Here is a proof of δA:

?A⊥, !A	?A⊥, !A
?A⊥, !A ⊗ !A

!A   (!A ⊗ !A)
!(!A   (!A ⊗ !A)).

Here is a derivation of Dup:


Γ, ?A, ?A

	
Γ, ?A `?A	?A, !A⊥


Γ, ?A, !A⊥ ⊗ (?A `?A)



Γ, ?A, ?(!A⊥ ⊗ (?A `?A)).


We call duplicators the formulae of the shape δA.  Using this, we construct
bounded proofs for provable sequents in LL', in the following sense.
Definition 2.3 A proof in LL' is cc-free when it is cut-free and contraction-free. It is bounded when it is either cc-free, or of the form

π1	π2
A⊥, Γ Γ
with π1 and π2 cc-free.

Lemma 2.4 For any sequent Γ provable in LL', there is a list δ of duplicators such that Γ, δ⊥ admits a cc-free proof.
(Here δ⊥ denotes the list of duals of formulae in δ.)
Proof. By cut elimination in LL, we may assume the given proof cut-free. The construction is then a mere induction on it, using the fact that duplicators are ! formulae. The non trivial case is contraction: from a given proof
π
Γ, ?A, ?A Γ, ?A
one obtains by induction hypothesis a proof π' of Γ, ?A, ?A, δ⊥, for some list of duplicators δ. One then derives (up to exchange):
π'
Γ, ?A, ?A, δ⊥

Γ, ?A, δ⊥
, δ⊥.
Dup

(This does not use contraction or cut.) For other cases, one just shows that a list of new hypotheses starting with ? do not hinder the derivation too much. This only adds weakenings and Exchange rules, but no cuts nor contractions.	 
Finally, we conclude:

Theorem 2.5 In LL', each provable sequent admits a bounded proof.
Proof. Consider a provable sequent Γ in LL'. By Lemma 2.4, Γ has a cc-free LL' proof π of Γ, δ⊥, for some δ = (δ ,...,δ ). So, the proof
1	n



δ1	...	δn
π

Γ, δ⊥



⊗ (δ)
Γ


`(δ) , Γ

of Γ is bounded.	 
A naive game for LLj
We have shown that we can dispense with the contraction rule of LL, at the cost of a single initial cut and a modified tensor rule.
Starting from our previous game [13], we now build an extension of it to these rules.
Positions
As sketched above, the idea of positions in our game is as follows: positions are graphs, whose edges are labelled by formulae. We want to understand the neigh- borhood of a vertex, i.e., its adjacent edges, as its sequent. For instance, the vertex
in the graph
Δ
Δ A •
Δ
sees the sequent A, A⊥, B, or equivalently A ▶ A, B.
The use of graphs may be understood by seeing the cut rule
Γ ▶ A	A ▶ Δ Γ ▶ Δ
as a move
From	To
between graphs. Starting from the single vertex graph, after a finite number of cuts, one may reach any connected and acyclic graph (in the undirected sense). Hence our definition:
Definition 3.1 A position in our game is a punctured, directed, signed, normally labelled tree.

By punctured, we mean that a vertex is selected; we say that this vertex holds the token. By directed we mean that edges are ordered pairs of vertices. By signed, we mean that a function from vertices to {O, P} is selected. Vertices labelled O, called opponents, are pictured by ▲, others, called proponents, are pictured by Δ. By labelled, we mean that a function from edges to formulae is selected, and by normally labelled, we mean that the selected formulae are positive. Finally by tree, we mean that the underlying undirected graph is a tree.
We will also consider non-normally labelled trees, as a notation for the position obtained by normalisation: for each edge labelled with a negative formula, reverse altogether the edge and the formula.
There is an obvious notion of isomorphism, which turns positions into a groupoid.
Observe that positions may have symmetries (automorphisms).
For each vertex, its adjacent edges determine (up to reordering) its sequent.

Moves
We now define our moves in Figure 1. Moves are the edges of a (huge) graph with positions as vertices, or equivalently a reduction relation on positions.
Moves go left to right (in each row), and the vertex v holding the token, pictured as framed, plays the move, or is active. The other vertex v' is passive.
The move is defined regardless of v and v' being proponents or an opponents. Thus, to avoid notational clutter, we define moves as a relation between graphs, the polarity {O, P} being inherited from the initial position. In the figure, • thus represents vertices regardless of their polarity.
On the left, the broken edge or formula is shown. It determines two subtrees, which are pictured as triangles, and named to emphasise the analogy with inference rules. In the initial position of the tensor move (third line), there are several triangles connected to the left-hand vertex v: they denote subtrees which have v as only vertex in common.
On the first row, we have negative moves, where A is required to be positive. The active vertex v passes the token along an input edge. In some sense, v has a negative formula, and asks the vertex at the other end of this formula to break it. Thanks to acyclicity of our positions, the token will come back, if ever, through the same edge, breaking it at the same time. In the case of the negative formula T, the token will never come back, since there is no right introduction rule for 0. In this sense, the corresponding negative move is winning.
Then we have positive moves. The active vertex may act on each of its output formulae, except the 0’s, and conditionally for the 1’s. The action is simple on formulae of the form A ⊕ B: it just changes the formula either into A or into B. On ?A, the vertex may change it to A, or brutally erase ?A, together with its whole subtree. The action is pretty simple on the formula 1: if (and only if) that edge is its sole adjacent edge, the vertex may pass the token along that formula, and delete itself and the edge from the tree.
It remains to explain the positive move in the case of a tensor formula. This


From	To

Fig. 1. Naive moves
is the most complex move. Here our active vertex, say v, has an output edge e labelled with A ⊗ B, ending at the neighbour vertex v'. When deleting e, we get a tree Δ on the v' side, and another tree on the v side, which v has to split into three subtrees Γ, Γ', and ?Θ, sharing only their root v. Furthermore, the subtree
?Θ must exclusively consist of outputs of the form ?C. Then our vertex v becomes two vertices v1 and v2, where v1 inherits A (linked to v'), Γ and a copy of ?Θ, while v2 inherits B (also linked to v'), Γ' and a second copy of ?Θ. On the other side, v' keeps Δ unchanged, and inherits both input formulae A and B, plus the token.
Our formalism allows to define cut moves and contraction moves (e.g., by chang- ing ?A to ?A `?A), but we leave them out of the picture.

Plays, strategies, validity
We now define plays and (winning) strategies, and show that the latter yield a consistent model of LL' provability (which is incomplete).
Having defined moves, plays on a position U follow: they are (directed, possi- bly countable) paths from U in the graph of positions and moves, or equivalently reduction sequences. They happen to be finite:
Lemma 3.2 In the above graph of positions and moves, there is no inﬁnite path (i.e., in our game, all plays are ﬁnite).

Proof. This is a consequence of our later Theorem 5.1.	 
For a position U , we then define a strategy to be a welcoming, prefix-closed set of plays from U , containing the empty play, and stable under isomorphism. The latter means that a strategy must contain two isomorphic plays
U 	) U1 	) U2 	) ... 


	
∼=	∼=
v	v
... 

V1 	) V2 	) ... 
at the same time. By welcoming, we mean that the strategy accepts any move from opponents. In a strategy S, a play is maximal when S contains no extension of it.
Definition 3.3 A strategy is winning if, in all its maximal positions, the token is held by an opponent.
We then define validity. This is a bit more delicate, because the game does not feature contraction, so for proofs to yield winning strategies, we account for the needed initial cut:
Definition 3.4 A formula A is GLL'-valid (G stands for “Game”) iff there exists a tree U such that for all trees V , the vertices of U have a winning strategy against those of V in the graph
A
U	Δ	▲	V

wherever the token is placed initially.
Using the same methods as in Section 6 below, one may show that GLL'-validity yields a consistent model of LL':
Theorem 3.5 GLL'-validity is consistent, i.e., two dual formulae are not both GLL'-valid.
Proposition 3.6 Any formula provable in LL' is GLL'-valid.
The proofs are as in Section 6, so we do not repeat them here.
We consider this game unsatisfactory, because its exponentials are terribly non standard:
Proposition 3.7 The formula A   !A is GLL'-valid.
We first observe:
Lemma 3.8 Axioms A ▶ A are GLL'-valid.
Then:
Proof of Proposition 3.7 One reaches a sequent A ▶ !A, where, roughly, one may pass the token along !A, and then either be erased (and hence win), or become A ▶ A (and win again).	 

The remainder of the paper patches this deficiency by allowing n-ary dereliction.
We start by considering a new set of inference rules.
NLL
Let us start from the rules of LL'. We want to patch them to add n-ary dereliction. This means that instead of contraction, weakening, and dereliction, we use the rules:

Γ, ⊥


Γ, ?A
Γ,A 
Γ, ?A	... 
Γ,	nA
Γ, ?A	... 

with	0A = ⊥ and	n+1A =	nA	A.
To preserve the symmetry between dual connectives, we use for ! the rule
Δ, 1	Δ,A	...	Δ, ⊗nA	. . .
Δ, !A
which has infinitely many premises.
The idea behind these rules is to encode !A as an infinitary additive conjunction

n∈N
A⊗n, which is an old idea, at least as old as Lafont’s work on categorical

models of LL [16,17].
This yields a set of inference rules, which we sum up in Figure 2 and call NLL. Since we have infinitary rules, let us precisely define proofs.
Definition 4.1 A proof in NLL is a tree whose branches are all finite, and whose nodes are labelled with inference rules as usual.
However, we are mainly interested in bounded proofs, in the following sense:
Definition 4.2 A proof in NLL is bounded when it is either cut-free, or of the form





with π1 and π2 cut-free. We now show that:
π1	π2

	
A		A⊥, Γ Γ


(1)

NLL is a model of LL provability;
This model is incomplete, i.e., the converse does not hold;
NLL does not enjoy cut elimination.
Lemma 4.3 Axioms A ▶ A have bounded proofs in NLL.
Theorem 4.4 Each provable sequent in LL' admits a bounded proof in NLL.
Proof. By induction on a given bounded proof in LL', we construct a bounded proof (of the same sequent) in NLL. All cases but promotion are obvious by induction


Fig. 2. Inference rules for NLL

hypothesis (because the rules of LL' are almost the same as those of NLL). For promotion, assume given a proof of ?Γ, A. We need to find an NLL proof of each
?Γ, ⊗nA: for each n, we split the n-fold tensor, and reduce to proving ?Γ,A or ?Γ, 1, which are both have bounded proofs in NLL (the former by induction hypothesis, the latter straightforwardly). Since we only introduce tensor and 1 rules, this results in a bounded proof.	 
We have thus shown that bounded proofs in NLL are a model of LL' provability.
However, the converse does not hold, thanks to an example of Olivier Laurent:
Proposition 4.5 LL' is not a model of NLL.
Proof. The sequent ⊥⊕ (X⊥ `?X⊥), !X has a bounded proof in NLL, as follows:


... 


⊥, 1


⊥⊕ (X⊥ `?X⊥), 1
X⊥,X 


X⊥ `?X⊥,X 


⊥⊕ (X⊥ `?X⊥),X	... 



⊥⊕ (X⊥ `?X⊥), !X.

However, it is not provable in LL. There could be a problem since it uses a variable, but taking X = ⊥⊗⊥ makes everything work the same.	 
Finally:
Proposition 4.6 NLL does not enjoy cut elimination.
Proof. Consider the sequent X &((X &Y )  Y ) ▶ ?(X &Y ). It admits the following LL' proof:



X ▶ X

Y ▶ Y
X & Y ▶ X & Y X & Y ▶ ?(X & Y )


X ▶ ?(X & Y ),X 
((X & Y ) ` Y ) ▶ ?(X & Y ),Y 



X & ((X & Y ) ` Y ) ▶ ?(X & Y ), X	X & ((X & Y ) ` Y ) ▶ ?(X & Y ),Y 
	X & ((X & Y ) ` Y ) ▶ ?(X & Y ), (X & Y )	
	X & ((X & Y ) ` Y ) ▶ ?(X & Y ), ?(X & Y )	
X & ((X & Y ) ` Y ) ▶ ?(X & Y ),

hence has a bounded proof in NLL by Theorem 4.4. However, careful inspection shows that it has no cut-free proof. Again, we do this using variables, which are not in the syntax. It all works the same by taking X and Y such that none entails the other, e.g., X = ⊥⊗T and Y = 1 ` 0.	 
Nevertheless, we have:
Proposition 4.7 NLL features admissibility of cut, i.e., if Γ,A and A⊥, Δ both have bounded proofs, then so does Γ, Δ.
Proof. Assuming first that the given bounded proofs have the shape:


π1	π2

	
Γ, A,B	B⊥
Γ,A 
π3	π4

	
Δ, A⊥,C	C⊥


Δ, A⊥


with the πi’s cut-free. We then form the bounded proof:


π1


Γ, A,B 
π3


Δ, A⊥,C 
π2	π4

	
B⊥	C⊥



Γ, Δ, (A ⊗ A⊥), B,C 


Γ, Δ, (A ⊗ A⊥) ` B ` C
Γ, Δ.


B⊥ ⊗ C⊥	A⊥,A 


(A⊥ ` A) ⊗ B⊥ ⊗ C⊥


Cases where not both proofs start with a cut behave essentially the same.	 
We now proceed to define a graphical game interpretation of NLL.

A graphical game for NLL
The positions of our game are exactly as in Section 3. Moves are as in Figure 1, with both exponential moves replaced by the single move scheme:
From	To
(using the conventions of Figure 1).
Plays are as in Section 3: (directed, possibly countable) paths in the graph of positions and moves. As in Section 3, we have:
Theorem 5.1 All plays are ﬁnite.
We prove this by adapting to our graphical setting the syntactic techniques of David and Nour [5,6].
We will need an auxiliary move, which we call the exotic move:

From	To	(2)
Call a position U strongly normalizable (sn for short) if, even if we add the above exotic move, all plays from U are finite. Why do we need a new move? We want to be sure that if a position is sn, so are all its subpositions, in the sense of subgraphs. And the problem with this is that, although most moves on a subposition come from a move on the full position, this is not the case for a 1-move. Indeed, consider the bare 1-move
From	To
If we embed the initial position into the bigger
•	0	•	1	•
we obtain a position without any possible move. Our exotic move allows the token to be passed to the right. The intuition is that it transforms 1-moves into “one-way” moves, merely passing the token along 1 without any hope for return. Which has roughly the same effect as deleting the edge.
Thanks to the exotic move, we have:
Lemma 5.2 Any subposition of an sn position is again sn.
Now, consider a tuple U = (U, v, a1,..., an) where U is a position with marked vertices a1,..., an, and v is the vertex owning the token.  Consider also a tuple
V = ((V1, b1),..., (Vn, bn)) of positions (bi is the node having the token), and a

formula A. From these data, we build a new position W = W (U, V, A) by taking the union of U with the Vi’s, and adding n new edges from ai to bi for each i, labelling these with A (which could be negative), and putting the token at v.
Using this notation, the theorem follows (by an easy induction on the number of vertices) from the following lemma:




Lemma 5.3 If U and the Vi’s are sn, then so is W.



Proof. We proceed by lexicographic induction on the triple (A, U, n), using the following orderings:
Formulae: We use the ordering determined by the following four rules:
A formula is greater than each of its subformulae and their duals;
1 is greater than T;
A formula ?C is greater than	nC for each n (and similarly for ! and ⊗);
A negative formula is greater than its linear negation.
Positions: We order sn positions by putting U ≥ V iff there is a path in the graph of moves, or equivalently a reduction sequence, from U to V . Since we limit this to sn positions, it is well-founded.
Numbers: Finally, we use the standard ordering for natural numbers.
In order to prove that there is no infinite play starting at W , it is enough to show that all positions reached from W after one move are sn. We proceed by a case analysis on this first move.
If it is a move inside U : U → U', we apply the induction hypothesis to the new position W0. We have to explain how it has the required form. Indeed, we have W0 = W (U',V ', A), where:
the marked points in U' remain the same, except in the case of a 1 move, where some ai’s may be deleted, and in the case of a ⊗ move where some ai’s may be duplicated;
V ' is like V , except in case the move is a 1 move, where possibly some Vi’s have to be deleted, and in case of a ⊗ move, where some Vi’s have to be duplicated.
Hence in the present case, n may increase, but A is constant, and U strictly de- creases.
Suppose now v = aj and our move W → W0 is on the j-th A edge between aj
and bj.
We treat separately the most delicate case where A = B ⊗ C. The move then looks like:


From	To
Γ


?Θ



But both positions
Γ Γ'

Γ

Vj
?Θ	•	B

?Θ	•	C
Γ'

Vj .

U' =
?Θ	and	U'' =
?Θ
Γ'

are sn by induction hypothesis: they both have the shape W (X, Y, A) with X ≤ U and Y strictly shorter than V , because Vj has been removed. But Vj itself is sn by hypothesis, so by induction hypothesis again, the position
Γ
?Θ
Vj

is again sn, since it is obtained as W' = W (Vj,U', B⊥). Finally, by induction hypothesis, W0 = W (W',U'', C⊥) is also sn.
For all other cases, we apply the inductive hypothesis twice: one for the new V , with smaller n, and one for the new U , with a smaller A.	 
By the way, Lemma 3.2 follows by remarking that any play in the game of Section 3 is simulated by a play in the new game (with the exotic move (2)).

Soundness
So we have a game for NLL. Let us now show that it defines a model of NLL (and hence of LL). The definition of (winning) strategies is exactly as in Section 3, thanks to Theorem 5.1. As in Section 3, we put:
Definition 6.1 A formula A is GNLL-valid (again, G stands for “Game”) iff there exists a tree U such that for all trees V , the vertices of U have a winning strategy against those of V in the graph
A
U	Δ	▲	V

wherever the token is placed initially. We immediately have consistency:
Theorem 6.2 A formula and its dual are not both GNLL-valid.

Proof. Given two trees U and V as above, and strategies S and S' for them, they both contain the empty play so S ∩ S' is non-empty. By Theorem 5.1, we have a maximal play in S ∩ S'. In its final position, the token is held by some vertex v. If v is a proponent then S is not winning, otherwise S' is not winning.	 
As a consequence, since NLL has a consistent model, we have:
Corollary 6.3 NLL is consistent.
We now prove:
Theorem 6.4 GNLL-validity is a model of NLL (bounded) provability.
We start with:
Lemma 6.5 A strategy is winning iff it is total, i.e., for each reached position where a proponent holds the token, it has an extension by a move.
We then observe:
Lemma 6.6 For any position U, equipped with, for each proponent vertex v ∈ U, a cut-free NLL proof πv of its sequent, there exists a winning strategy on U.
Proof. Before constructing such a strategy, let us observe that the following rules are admissible in NLL, and moreover for any cut-free proof of their premise, there is a cut-free proof of their conclusion:


Γ, ⊥


Γ
Γ,A ` B


Γ, A,B 
Γ,A & B


Γ,A 
Γ,A & B


Γ,B 
Γ, !A
Γ, ⊗nA ·

We say that going from premise to conclusion in one of these rules is an anodyne
modification.
Assume now given a position U , and a cut-free proof πv for each proponent v ∈ U , and let us construct a winning strategy on U . We describe this by defining a new graph G, which embeds into the graph of positions and moves. It has as vertices all positions U equipped with a cut-free proof πv for each proponent v ∈ U . We now define edges from any such U .
First assume the token is held by opponents in U . After each move U → V , if the token is still held by opponents in V , then proponent sequents remain unchanged, and we add an edge U → V in G. On the other hand, if the token is now held by a proponent, the corresponding sequent may have been anodynely modified. As observed above, we still may choose a cut-free proof for this sequent, as well as for the unmodified ones, and we add an edge U → V in G.
Now if the token is held by proponents in U , we consider the first step of the proof of the involved sequent. If it is a positive rule, we consider the corresponding move U → V . In V , we still have cut-free proofs for all proponents’ sequents, and we add an edge U → V in G. If the proof starts with a negative rule, we add as an edge in G the move passing the token along the corresponding formula (in the new

position, proponents’ sequents are unchanged, hence we still have cut-free proofs for them).
This graph G determines a strategy on each of its vertices, since it accepts all opponent moves. And furthermore this strategy is total thanks to proofs, hence it is winning by Lemma 6.5.	 
Proof of Theorem 6.4 Consider any formula B with a bounded proof in NLL. We have to choose a graph U such that for all V , vertices in the position


B
U	Δ	▲	V
(3)


have a winning strategy.
If the given proof of B is cut-free, then Lemma 6.6 provides a winning strategy for U = Δ, the single vertex (for any V and initial placement of the token).
Otherwise the bounded proof has the shape







We then choose U to be
π1	π2

	
A		A⊥,B B.

A
Δ	Δ
so that for any V , the position (3) becomes
A	B
Δ	Δ	▲	V.

In this position, we have cut-free proofs (π1 and π2) for each proponent vertex, hence a winning strategy by Lemma 6.6 (for any placement of the token).	 
However, we have:
Proposition 6.7 GNLL-validity is complete neither w.r.t. LL, nor w.r.t. NLL.
Proof. Indeed, exactly as in the game for MALL [13], ⊥⊗⊥ is GNLL-valid but provable neither in LL nor in NLL.	 
We expect that local strategies [13] will remedy incompleteness w.r.t. NLL.

Admissibility of cut
We now define a notion of GNLL-validity for arbitrary sequents, which extends that for formulae, and prove that the cut rule holds in our model, i.e., if two sequents Γ,A and A⊥, Δ are GNLL-valid, then so is Γ, Δ.

Definition 7.1 A sequent Γ = (A1,..., An) is GNLL-valid iff there is a position U with dangling edges A1,..., An, such that for all tuples of positions U1,..., Un, the vertices in U have a winning strategy S on the position




We say that U is its base position.
... 

Theorem 7.2 The cut rule holds, i.e., if two sequents Γ,A and A⊥, Δ are GNLL- valid, then so is Γ, Δ.
We first consider slightly generalised positions U , with three teams instead of two, say, P , P ', and O. The teams P and P' are to be thought of as a partition of proponents. For such a generalised position U , call (U, P ) the non-generalised position with P as proponents and P' ∪ O as opponents; and similarly for (U, P'), (U, P ∪ P'), and (U, O). We have:
Lemma 7.3 For a generalised position U, given winning strategies S on (U, P ) and
S' on (U, P'), the set of plays S ∩ S' is a winning strategy on (U, P ∪ P').
Proof. It is a strategy because it is obviously prefix-closed, accepts all moves by
O. Furthermore, it is total, hence winning by the previous lemma.	 
Proof of Theorem 7.2 Assume given two GNLL-valid sequents Γ,A and A⊥, Δ, with associated base positions U and V , and with Γ = (A1,..., An) and Δ = (B1,..., Bm). Then, choose as a base for Γ, Δ the position
.
Then, for any tuple (U1,..., Un, V1,..., Vm), consider the corresponding position

.	(4)



The GNLL-validity of Γ,A induces a winning strategy S for the vertices of U in (4), and that of A⊥, Δ induces a winning strategy S' for the vertices of V in (4). This yields the winning strategy S ∩ S' for U ∪ V on (4). Hence Γ, Δ is GNLL-valid. 
Acknowledgement
We warmly thank Olivier Laurent for his constant “Linear Logic Hotline” and many useful examples and counterexamples. We also thank Paul-Andr´e Melli`es for en- couragements, and Ren´e David and Karim Nour for a very efficient consulting ses- sion. Finally, we thank the anonymous referees for very careful reading and helpful suggestions.

References
Abramsky, S. and R. Jagadeesan, Games and full completeness for multiplicative linear logic, Journal of Symbolic Logic 59 (1994), pp. 543–574.
Abramsky, S. and P.-A. Melli`es, Concurrent games and full completeness, in: Proceedings of the fourteenth annual symposium on Logic In Computer Science (1999), pp. 431–442.
Andreoli, J.-M., “Proposition pour une Synth`ese des Paradigmes de la Programmation Logique et de la Programmation par Objets,” Ph.D. thesis, Universit´e Paris 6 (1990).
Blass, A., A game semantics for linear logic, Annals of Pure and Applied Logic 56 (1992), pp. 183–220.
David, R., Normalization without reducibility, Annals of Pure and Applied Logic 107 (2001).
David, R. and K. Nour, A short proof of the strong normalization of classical natural deduction with disjunction, Journal of Symbolic Logic 68 (2003).
Delande, O. and D. Miller, A neutral approach to proof and refutation in MALL, in: LICS ’08, 2008,
pp. 498—508.
Dyckhoff, R., Contraction-free sequent calculi for intuitionistic logic, The Journal of Symbolic Logic
57 (1992), pp. 795–807.
URL http://www.jstor.org/stable/2275431

Dyckhoff, R. and S. Negri, Admissibility of structural rules for extensions of contraction-free sequent calculi, Logic Journal of the IGPL 9 (2001).
Girard, J.-Y., Linear logic, Theoretical Computer Science 50 (1987), pp. 1–102.
Girard, J.-Y., Locus solum: From the rules of logic to the logic of rules, Mathematical Structures in Computer Science 11 (2001), pp. 301–506.
Hirschowitz, A., M. Hirschowitz and T. Hirschowitz, Playing for truth on mutable graphs, Talk at the Colloquium in honor of G´erard Huet’s 60th birthday, ENS, Paris (2007), www.lama.univ-savoie.fr/
~hirschowitz/papers/H3.pdf.
Hirschowitz, A., M. Hirschowitz and T. Hirschowitz, Towards topological games (long version) (2008),
www.lama.univ-savoie.fr/~hirschowitz/papers/mall-long.pdf.
Hyland, M. and L. Ong, Fair games and full completeness for multiplicative linear logic without the mix-rule (1993), preprint.
Kashima, R., Contraction-elimination for implicational logics, Annals of Pure and Applied Logic 84
(1997), pp. 17—39.
Lafont, Y., The linear abstract machine, Theor. Comput. Sci. 59 (1988), pp. 157–180.
Lafont, Y., The linear abstract machine (corrigenda), Theor. Comput. Sci. 62 (1988), pp. 327–328.
Laurent, O., “E´tude de la polarisation en logique,” Th`ese de doctorat, Universit´e Aix-Marseille II (2002).
Lorenzen, P., Ein dialogisches konstruktivita¨tskriterium, in: Infinitistic Methods: Proceed. Symp. Foundations of Math. (1961), pp. 193—200.
Melli`es, P.-A., Asynchronous games 4: A fully complete model of propositional linear logic, in:
P. Panangaden, editor, Proceedings of the Twentieth Annual IEEE Symp. on Logic in Computer Science, LICS 2005 (2005), pp. 386–395.
