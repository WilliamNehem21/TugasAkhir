Electronic Notes in Theoretical Computer Science 204 (2008) 53–69	
www.elsevier.com/locate/entcs

Undecidable Properties on Length-Two String Rewriting Systems
Masahiko Sakai1
Graduate School of Information Science, Nagoya University, furo-cho Chikusa-ku, Nagoya 4648603 Japan
Yi Wang2
Graduate School of Arts and Science, The University of Tokyo, Komaba Meguro-ku, Tokyo 1538914 Japan

Abstract
Length-two string rewriting systems are length-preserving string rewriting systems that consist of length- two rules. This paper shows that confluence, termination, left-most termination and right-most termination are undecidable properties for length-two string rewriting systems. These results mean that these properties are undecidable for the class of linear term rewriting systems in which depth-two variables are allowed in both sides of rules.
Keywords: Rewriting system, confluence, left-most termination, right-most termination, length-two string rewriting system

Introduction
Confluence and termination are both generally undecidable for term rewriting sys- tems (TRSs) and for string rewriting systems (SRSs). Hence several decidable classes have been studied. Confluence is a decidable property for terminating TRSs [12], and ground TRSs [16]. The latter result was extended to linear shal- low TRSs [7] and shallow right-linear TRSs [8]. Classes for which termination is a decidable property are investigated and extended: ground TRSs [10], right-ground TRSs [4], TRSs that consist of right-ground rules, collapsing rules and shallow right-linear rules [9], and the related class of shallow left-linear TRSs [18].
Results on undecidable classes also exist. Confluence is an undecidable prop- erty for semi-constructor TRSs [14]. The result is extended to flat TRSs [11,15].

1 Email: sakai@is.nagoya-u.ac.jp
2 Email: wangyi@graco.c.u-tokyo.ac.jp

1571-0661 © 2008 Elsevier B.V. Open access under CC BY-NC-ND license.
doi:10.1016/j.entcs.2008.03.053

Termination is an undecidable property for three-rule SRSs [13], length-preserving SRSs [2] and one-rule TRSs [3].
SRSs are said to be length preserving if the left-hand side and the right-hand side of each rule have the same length. Since there is a finite number of rules, the number of different symbols appearing in the rules is finite, and fixed for SRSs, and the number of strings with a given length is also finite. Thus the decidability of the following problems for length-preserving SRSs trivially follows.

Reachability problem: problem to decide s →∗
R
t for given strings s and t and an

SRS R.
String-confluence problem: problem to decide confluence of s for a given string
s and an SRS R.
String-termination problem: problem to decide termination of s for a given string s and an SRS R.
¿From these observation, one may think that confluence is also a decidable prop- erty; however, this is false. In this paper, we show that confluence, termination, left-most termination, and right-most termination are undecidable properties for length-two SRSs which are length-preserving SRSs consisting of length-two rules. First we show those properties for length-preserving SRSs by reducing Post’s corre- spondence problem, which is known to be undecidable. Then we give a transforma- tion of length-preserving SRSs to length-two SRSs that preserves those properties. The class of length-two SRSs is a subclass of linear TRSs in which depth-two variables are allowed in both sides of the rules. Thus the undecidability for this class of TRSs is obtained. In that sense, the undecidability results in this paper shed new light on the borderline between decidability and undecidability for TRSs.

Preliminaries
Let Σ be an alphabet. A string rewrite rule is a pair of strings l, r ∈ Σ∗, denoted by l → r. A finite set of string rewrite rules is called a string rewriting system (SRS). A string is called a redex if it is the left-hand side of a rule. An SRS R induces

a rewrite step relation →
R
defined as s →
R
t if there exist u, v ∈ Σ∗, and a rule

l → r in R such that s = ulv and t = urv. Especially the rewrite step is left-most

(resp. right-most) if l is the left-most (resp. right-most) redex in s. We use ↔
R
for

← ∪ → , →+	for the transitive closure of → and →∗
for the reflexive-transitive

R	R	R	R	R

closure of →
R
. We write →k
R
for the relation with k rewrite steps. A (possibly

infinite) sequence s0 → s1 → ··· is called a reduction sequence (starting from s0).
R	R
We refer to {r → l | l → r ∈ R} by R−1.
We say that a string s is terminating if every reduction sequence starting from

s is finite. We say that strings s1 and s2 are joinable if s1 →∗
R
s ←∗
R
s2 for some s,

denoted by s1 ↓R s2. A string s is confluent if s1 ↓R s2 for any s1 ←∗
R
s →∗
R
s2. An SRS

R is confluent (resp. terminating) if all strings are confluent (resp. terminating).
In this paper, the notation |u| represents the length of string u. The notation am represents the string that consists of m symbols of a. When we pay no heed to the number m, we denote am as a∗ (if m ≥ 0) or a+ (if m > 0).
Now we recall Post’s correspondence problem (PCP).
Definition 2.1 An instance of PCP is a ﬁnite set P ⊆ A∗ × A∗ of ﬁnite pairs of non-empty strings over an alphabet A with at least two symbols. A solution of P is a string w such that w = u1 ··· uk = v1 ··· vk for some (ui, vi) ∈ P. The Post’s correspondence problem (PCP) is the problem to decide whether such a solution exists or not.
Example 2.2 The set P = {(ab, a), (c, bc)} is an instance of PCP over {a, b, c}. It has a solution abc = u1u2 = v1v2 with (u1, v1)= (ab, a), (u2, v2)= (c, bc).
Theorem 2.3 ([17]) PCP is undecidable.

Length-preserving SRSs and undecidability of their termination
Definition 3.1 An SRS R is said to be length-preserving if |l| = |r| for every rule
l → r in R.
In this section we argue about the undecidability of termination, right-most termination and left-most termination for length-preserving SRSs. As stated in the introduction, Caron showed the undecidability in [2]. Moreover the proof works also for right-most termination and left-most termination because there is only one redex in each string that corresponds to a correct automata configuration. Nevertheless we give an alternative proof for the following reasons:
Caron’s proof is composed of two stages; the first stage gives an algorithm that reduces PCP into the uniform halting problem for linear-bounded automata and the second stage gives an algorithm reducing the uniform halting problem into the termination problem for length-preserving SRSs. On the other hand, we give a proof by reducing PCP into the termination problem of SRSs directly.
The SRS TP given in this section is rather straightforward and easy to understand. This helps the understanding of the SRS CP given in the next section, which is more difficult although it is just a variant of TP .
As a preparation for giving the transformation, we introduce a kind of null symbol - and an equal length representation of each pair in instances of PCP. Let P = {(u1, v1),..., (un, vn)} be an instance of PCP over A.

P = {(u, v-m) | (u, v) ∈ P and |u|− |v| = m ≥ 0}
∪ {(u-m, v) | (u, v) ∈ P and |u|− |v| = −m < 0}

We write A for A∪ {-}. We define an equivalence relation ∼ ⊆ (A)∗ × (A)∗ as the identity relation that ignores all null symbols -, that is u ∼ v if and only if

uˆ = vˆ where uˆ and vˆ denote the strings obtained from u and v by removing all -s respectively.

Example 3.2 For an instance P  = {(ab, a), (c, bc)} of PCP, we have P  =
{(ab, a-), (c-, bc)}. The solution corresponds to u1u2 = ab c- ∼ a- bc = v1v2
for (u1, v1), (u2, v2) ∈ P.
h
We use symbols like 0b , where 0 is called the state of the symbol, h is called the
a
b'
ﬁrst subscript or delimiter, and a is called the second subscript of the symbol, a' the
third, b the fourth, and b' the ﬁfth. We code the solution of the previous example
h i  h  i
a  b  c  -
into 0a 0- 0b 0c , where each delimiter h is used to represent that the corresponding
a  b  c  -
a  -  b  c
second and third subscripts are head symbols of an element of the instance P .
For an easy handling of strings that consist of such symbols, we introduce a

h1 ··· hk
a1 ··· ak
h1	hk
a1	ak

notation defined as (X1 ··· Xk)b1 ··· bk	=	X1b1 ··· Xkbk . For example the above

a' ··· a'
a'	a'

1	k	1	k

b' ··· b'
b'	b'

1	k
hi	hi
ab	c-
1	k
hihi abc-

solution is denoted by (00)a- (00)bc or (0000)a-bc . Note that the lengths of the strings

ab	c-
a-	bc
abc-
a-bc

in those subscripts are the same whenever we use this notation. Hence we sometimes
hihi

write (0+)abc-
abc-
a-bc
for the solution.

Delimiters and the second and third subscripts keep a candidate of solutions of P in equal length representation and will never be changed by reductions. The fourth and fifth subscripts are used as a working area to check whether the candidate is a solution or not.
We relate a solution of the given instance of PCP with a loop in an infinite reduction sequence:

hi∗
+ u1
hi∗
+ uk	∗
hi∗
+ u1
hi∗
+ uk	∗
hi∗
+ u1
hi∗
+ uk

Ξ0(0 )v1 ··· (0 )vk Ψ0 → Ξ2(2 )v1
··· (2 )vk Ψ2 → Ξ0(0 )v1 ··· (0 )vk Ψ0

u1	uk	TP	w1
v1	vk	w1
wk	TP	u1	uk
wk	v1	vk

The former part checks whether u1 ··· uk ∼ v1 ··· vk by using the fourth and fifth subscripts as a working area.

The latter part checks whether (u1, v1),..., (un, vn) ∈ P and initializes the working area.
Definition 3.3 Let P be an instance of PCP over A. The SRS TP over Σ obtained from P is deﬁned as follows, where individual rules are shown in Figure 1.
Σ= {Ξi, Ψi | i ∈ {0, 1, 2}} ∪ Σc
d1	d1
x1	x1

TP = α1 ∪ β1 ∪ γ1 ∪ α2 ∪ β2 ∪ γ2 ∪ δ2
Example 3.4 Consider the instance P = {(ab, a), (c, bc)} of PCP. Rules α1, β1

8<	d	˛			9=

u
α  =	(12 ··· 2)
u
˛ (u, v) ∈ P, u', v' ∈ (A)∗, d = hi|u|−1

:	v' Ψ2 → (00 ··· 0)v Ψ0 ˛	;
u	u
v'	v
d  h	d h				=

u  x1
β  =	(12 ··· 2) 2
u x1
˛ (u, v) ∈ P, u', v' ∈ (A)∗,x ∈ A, d = hi|u|−1

v  x2 → (00 ··· 0)v 1x2
:	;

8<	h
u  x3
v'  x4
˛
u x3 x4
=

x1	x1
γ  =	Ξ 2	→ Ξ 1	˛ x ∈ A

2 x2 x3
x4
0 x2	j x3
x4

d1 x1
α  =	0
x1 Ψ ˛ d ∈ {h, i}, x ∈ A9=

x3 x3
< d1 d2
x3 x3
d1 d2
; 9=

x1 y1
β  =	0  2
x1 y1
2  , ˛ d
∈ {h, i}, x ,y ∈ A

x3 y3
x3 y3
<
x3 y3
x3 y3
˛	=

x1	x1
γ  =	Ξ 2	→ Ξ 2	˛ x ∈ A

0 x2 x3
x3
2 x2	j x3
x3

8< d1 d2
d1 d2	d1 d2
d1 d2		9=

x1 y1
δ  =	0  0
x1 y1	x1 y1
0  , 0  0
x1 y1
0	˛ d
∈ {h, i}, x ,y ∈ A,z ∈A 

-	z
x4 y4
z  -
x4 y4
x3 y3
-	z
x3 y3
z  -

Fig. 1. Rules in TP

depend on P and the other rules depend only on the alphabet A.
h i	hi	h i	hi

α  =	(12) a b Ψ
→ (00) Ψ , (12)
Ψ → (00) Ψ
x ,y ∈ A

1	a -	2
x1 y1
x2 y2
h i	h
a b  z1

a- 0
ab
a-
hi  h
ab  z1

b c	2 x1 y1 x2 y2
h i	h
c -	z1

bc  0	i	i
c-
bc
hi  h
c-  z1
 



hi	hi
ab	c-
start with a string Ξ0(00)a- (00)bc Ψ0. Rules in δ2 move null symbols in the fourth or
ab	c-
ﬁfth subscripts into the tail:

hi	hi
ab	c-
hi	hi
ab	c-
hi	hi
ab	c-

Ξ0(00)a- (00)bc Ψ0 → Ξ0(00)a- (00)bc Ψ0 → Ξ0(00)a- (00)bc Ψ0.

ab	c-	δ2
a-	bc
ab	c-	δ2
ab	-c
ab	c-
ab	c-

Rules in α2 ∪ β2 ∪ γ2 check in right-to-left order that the fourth and ﬁfth subscripts are the same:

hi	hi
ab	c-
hi	hi
ab	c-
hi	hi
ab	c-

Ξ0(00)a- (00)bc Ψ0 → Ξ0(00)a- (02)bc Ψ2 → Ξ0(00)a- (22)bc Ψ2

ab	c-	α2
ab	c-
hi	hi
ab	c-
ab	c-	β2
ab	c-
hi	hi
ab	c-
ab	c-
ab	c-
hi	hi
ab	c-

→ Ξ0(02)a- (22)bc Ψ2 → Ξ0(22)a- (22)bc Ψ2 → Ξ2(22)a- (22)bc Ψ2.

β2	ab
ab
c-	β2
c-
ab	c-	γ2
ab	c-
ab	c-
ab	c-

Rules in γ1 ∪ β1 ∪ α1 check in left-to-right order that the second and third subscripts consist of pairs in P and copy the second subscript to the fourth and the third to the ﬁfth respectively:

hi	hi
ab	c-
hi	hi
ab	c-
hi	hi
ab	c-
hi	hi
ab	c-

Ξ2(22)a- (22)bc Ψ2 → Ξ0(12)a- (22)bc Ψ2 → Ξ0(00)a- (12)bc Ψ2 → Ξ0(00)a- (00)bc Ψ0.

ab	c-	γ1
ab	c-
ab	c-	β1
ab	c-
ab	c-	α1
a-	c-
ab	c-
a-	bc

Obviously TP is length-preserving. The proof of the following lemma is found in

Section 5.
Lemma 3.5 For an instance P of PCP the following properties are equivalent:
P has a solution.
TP is not right-most terminating.
TP is not left-most terminating.
TP is not terminating.
Theorem 3.6 Termination, right-most termination and left-most termination are undecidable properties for length-preserving SRSs.
Proof. We assume that termination (right-most termination, left-most termina- tion) of length-preserving SRSs is decidable. Then it follows from Lemma 3.5 that PCP is decidable, which contradicts Theorem 2.3.	 

Undecidability of confluence for length-preserving SRSs
We modify the construction of the SRS in the last section. In contrast to the SRS TP , which works sequentially, the SRS CP works in parallel, that is, a solution of a given instance of PCP is related to the following two reduction sequences

hi∗
+ u1
hi∗
+ uk	∗
hi∗
+ u1
hi∗
+ uk

Ξ0(0 )v1
··· (0 )vk Ψ0 → Ξ2(2
)v1
··· (2 )vk Ψ2 ,

u1 v1 hi
+ u1
uk	CP
vk hi
+ uk	∗
w1 w1 hi
+ u1
wk wk hi
+ uk

Ξ0(0 )v1 ··· (0 )vk Ψ0 → Ξ1(1 )v1 ··· (1 )vk Ψ1
u1	uk	CP	u1	uk
v1	vk	v1	vk
that demonstrate its non-confluence.
The former reduction checks whether u1 ··· uk ∼ v1 ··· vk by using the fourth and fifth subscripts as a working area.

The latter reduction checks whether (u1, v1),..., (un, vn) ∈ P , and checks that the working area is correctly initialized.
If P has no solution then CP must be confluent, which makes the design of CP
difficult.
Definition 4.1 Let P be an instance of PCP over A. The SRS CP over Σ obtained from P is deﬁned as follows:
CP =Θ ∪ Φ,
Θ= Θ1 ∪ Θ2, Φ= γ' ∪ γ2,
Θ1 = α' ∪ β' ∪ (α' ∪ β' )−1,
1	1	1	1
Θ2 = α2 ∪ β2 ∪ δ2 ∪ ϵ2 ∪ (α2 ∪ β2 ∪ δ2 ∪ ϵ2)−1
where rules α2, β2, δ2, and γ2 are shown in Figure 1 and the other rules are shown in Figure 2.

d u
α' =
u	˛ (u, v) ∈ P, d = hi|u|−19=


1	(00 ··· 0)v Ψ0 → (11 ··· 1)v Ψ1
u	u
v	v
d h	d h

β' = <
u x1
u x1

˛ (u, v) ∈ P, x
∈ A, d = hi|u|−1=

1	(00 ··· 0)v 1x2 → (11 ··· 1)v 1x2	i

x1
x2
<	˛
u x1 x2
=

γ' =
x1	x1
Ξ 1	→ Ξ 1	˛ x ∈ A

0 x2 x1
x2
1 x2	i
x1
x2

8< d1 d2
d1 d2	d1 d2
d1 d2		9=

x1 y1
є  =	2  2
x1 y1	x1 y1
2  , 2  2
x1 y1
2	˛ d
∈ {h, i}, x ,y ∈ A, z ∈A 

-	z
x4 y4
z  -
x4 y4
x3 y3
-	z
x3 y3
z  -

Fig. 2. Rules in CP
Remark that the reductions by Θ-rules are symmetric, that is to say, s → t if
Θ
and only if t → s, which plays an important role in making CP confluent when P
Θ
has no solution.
Example 4.2 Let P = {(ab, a), (c, bc)} be an instance of PCP. Rules α' , β' depend
1	1
on P and the other rules depend only on the alphabet A.
hi	hi	hi	hi

a- 0
ab
a-
hi  h
'	ab  x1


a-  1
ab
a-
hi  h
ab  x1


bc  0
c-
bc
hi  h
c- x1



bc  1
c-
bc
hi  h
c-  x1
 



hi	hi
ab	c-
hi	hi
ab	c-
hi	hi
ab	c-

Ξ0(00)a- (00)bc Ψ0 → Ξ0(00)a- (11)bc Ψ1 → Ξ0(11)a- (11)bc Ψ1

ab	c-	'
a-	bc	1
hi	hi
ab	c-
ab	c-	'
a-	bc	1
ab	c-
a-	bc

→ Ξ1(11)a- (11)bc Ψ1 ,

'	ab	c-
1		a-		bc hi		hi
hi	hi

Ξ (00)ab (00)c- Ψ	→∗	Ξ (22)ab (22)c- Ψ .

0	a-
ab
a-
bc  0
c-
bc
2	a-
δ2∪α2∪β2∪γ2	ab ab
bc  2
c-
c-

Note that the detail of the latter sequence is found in Example 3.4.
Obviously CP is length preserving. The proof of the following main lemma is found in Section 5.
Lemma 4.3 Let P be an instance of PCP. Then, P has a solution if and only if
CP is not confluent.
Theorem 4.4 Confluence of length-preserving SRSs is an undecidable property.
Proof. We assume that the problem is decidable. Then it follows from Lemma 4.3 that PCP is decidable, which contradicts to Theorem 2.3.	 

Proofs
Every occurrence of the symbols Ξ0, Ξ1, and Ξ2 (Ψ0, Ψ1, and Ψ2) in rules are left- most (right-most) positions in both sides. Moreover, for every rule, Ξi (Ψi) appears

in the left-hand side if and only if Ξj (Ψj) appears in the right-hand side. Hence we can separate any reduction sequence having a symbol Ξi (Ψi) into two reduction sequences by cutting each string at the left of Ξi occurrence (at the right of Ψi occurrence). Therefore the following proposition holds.
Proposition 5.1 Let R be TP or CP obtained from an instance P of PCP. For any
i ∈ {0, 1, 2} and S1, S2,S ∈ Σ∗, the following hold:
If S1ΞiS2 → S, then (S = S' ΞiS2) ∧ (S1 → S' ) or (S = S1ΞjS' ) ∧ (ΞiS2 →
R	1	R	1	2	R
ΞjS' ) for some S' , S' ∈ Σ∗, and j ∈ {0, 1, 2}.
2	1	2

If S1ΞiS2 →∗ S, then S = S' S' , S1 →∗ S' , and ΞiS2 →∗ S' for some S'
∈ Σ∗

R	1 2	R	1	R	2	1
and non-empty S' ∈ Σ∗.
If S1ΨiS2 → S, then (S = S' ΨjS2) ∧ (S1Ψi → S' Ψj) or (S = S1ΨiS' ) ∧ (S2 →
R	1	R	1	2	R
S' ) for some S' , S' ∈ Σ∗ and j ∈ {0, 1, 2}.
2	1	2

If S1ΨiS2 →∗ S, then S = S' S' , S1Ψi →∗ S' , and S2 →∗ S' for some S'
∈ Σ∗

R	1 2	R	1	R	2	2
and non-empty S' ∈ Σ∗.
Proof. We prove (a). Let S1ΞiS2 → S. The only interesting case is that the redex
R
in the rewrite step contains the displayed symbol Ξi. Then one of γ1-rules, γ2-rules,
or γ' -rules is applied. From the construction of the rules, we have S = S1ΞjS' and

1
ΞiS2 → ΞjS'
2
for some S' ∈ Σ∗ and j ∈ {0, 1, 2}.

R	2	2
The claim (b) is easily proved by induction on the number k of the rewrite steps

in S1ΞiS2 →∗
R
S. For (c) and (d), the proofs are similar to (a) and (b) respectively. 

We say a string over Σ is normal if it is in one of the following three forms: (p1) Ξiχ,  (p2) χΨj,  (p3) ΞiχΨj,
where χ ∈ (Σc)∗, i, j ∈ {0, 1, 2}.
We prepare a measure for the proof of the next lemma. For a non-empty string X1 ··· Xn over Σ, we define ||X1 ··· Xn|| by the summation of the number of occur- rences of Ξi symbols in X2 ··· Xn, and the number of occurrences of Ψi symbols in X1 ··· Xn−1.
Lemma 5.2 Let R be TP or CP over Σ obtained from an instance P of PCP. Then R is confluent (resp. terminating, right-most terminating, left-most terminating) if and only if w is confluent (resp. terminating, right-most terminating, left-most terminating) for every normal w ∈ Σ∗.
Proof. First we prove the termination part of the lemma. Since ⇒-direction is trivial, consider ⇐-direction.
Let S1 → S2 → ··· be an infinite reduction sequence starting from a non-normal
R	R
string S1 such that ||S1|| is minimal. We show a contradiction. We have two cases in which S1 = wΞiS' and S1 = S'Ψiw for some normal w and some S' ∈ Σ∗.
In the former case, where S1 = wΞiS', we can construct an infinite reduction

sequence starting from at least one of w or ΞiS' by applying Proposition 5.1(a) infinitely many times, which contradicts the minimality of S1.
In the latter case, we can show a contradiction similar to the former case by using Proposition 5.1(c).
Secondly we prove the confluence part of the lemma. Since ⇒-direction is trivial, consider ⇐-direction. We show that every S1 ∈ Σ+ is confluent by induction on
||S1||. If ||S1|| = 0, then S1 is normal and it is confluent from the assumption. If
||S1|| > 0, then we have two cases, in which S1 = w1ΞiS' and S1 = S' Ψiw1 for
some normal w1 and some S' ∈ Σ∗.

In the former case, let S2 ←∗
R
w1ΞiS' →∗
R
S3.  By Proposition 5.1(b), we have

S2 = w2S' , S3 = w3S' , w2 ←∗  w1 →∗  w3 and S' ←∗  ΞiS' →∗  S' . Since w1 is
2	3	R	R	2 R	1 R	3
confluent from the assumption, we have w2 ↓R w3. Since ΞiS' is confluent from
the induction hypothesis, we have S' ↓R S' . Therefore we have S2 = w2S' ↓R
2	3	2
w3S' = S3.
In the latter case, we can show the confluence of S1 by using Proposition 5.1(d) in a similar way to the former case.	 

Note that this lemma is provable more elegantly by using a notion of persistency [19] similarly to [5,6]. However we proved it without the notion to make the paper self- contained.
Thanks to Lemma 5.2, we can concentrate on normal strings in the rest of this section.

Termination analysis of TP
In the sequel, we analyze the termination property for TP . We use the notation →u

for u1 ··· uk and H→
for hi|u1|−1 ··· hi|uk|−1.

Lemma 5.3 Let P be an instance of PCP.
If u1 ··· uk ∼ v1 ··· vk for some (ui, vi) ∈ P, then w →+
TP

w where w =

Ξ0(0
hi∗
)v1
u1
v1
··· (0
hi∗
)vk Ψ0. Moreover, both right-most reduction and left-most re-
uk
vk

duction are possible.

If Ξ0χΨ0
→+ Ξ0χΨ0 for some χ ∈ (Σc)∗, then P has a solution.
TP



H→
Proof. (a):	We	have	a	left-most	reduction	sequence	Ξ (0+)u→ Ψ	→∗



H→	H→
0	→v	0
u→	δ2
→v

Ξ (0+)u→ Ψ	→+	Ξ (2+)u→ Ψ .	Here the right-most reduction also exists

0	→v
w→
w→
0	2
α2∪β2∪γ2
→v	2
w→
w→

by applying rules δ2 as lazily as possible. Since (ui, vi) ∈ P , we have a left-most

H→
and right-most reduction sequence Ξ (2+)u→ Ψ
H→
→+	Ξ (0+)u→ Ψ .

2	→v
w→
w→
2	0
γ1∪β1∪α1
→v	0
u→
→v

(b): Let Ξ0χΨ0 →+
TP
Ξ0χΨ0. ¿From the construction of TP , a string Ξ2χ'Ψ2 must

appear in this reduction sequence. ¿From the reduction sequence Ξ0χΨ0
→+ Ξ2χ'Ψ2,
TP

the string χ is of the form (0
hi∗
)v1
1 ' 1
··· (0
hi∗
+ uk k '
k
'
k
or χ contains 2. In the latter case, the

reduction sequence Ξ2χ'Ψ2 →+
TP
Ξ0χΨ0 is impossible. Thus, χ is of the form displayed

hi∗
+ u1
hi∗
+ uk	+	'

above. ¿From the reduction sequence Ξ0χΨ0 = Ξ0(0
v1 ··· (0
u
)vk Ψ0 → Ξ2χ Ψ2,
u'

hi∗
'	+ u1
hi∗
+ uk
1
'
1
→'	→'
k	TP
'
k

χ must be of the form (2
H→
)v1
w1
w1
··· (2
)vk
wk
wk H→
and u
~ v . ¿From the reduction sequence

Ξ χ'Ψ
=Ξ (2+)u→ Ψ
→+	Ξ (0+)u→ Ψ
=Ξ χΨ , we have (u ,v ) ∈ P for every

2	2	2
→v	2
w→
w→
0
γ1∪β1∪α1
u→'	0	0	i	i
v→'

i. Since u→' and v→' are copied from →u and →v respectively in the latter reduction sequence by β1-rules, we have u→' = →u and v→' = →v. Thus we conclude →u ∼ →v, which means that P has a solution.	 

Proof for Lemma 3.5
((i)⇒(ii)∧(iii)): By Lemma 5.3(a).
((ii)∨(iii)⇒(iv)): Trivial.
((iv)⇒(i)): Let TP not be terminating. From Lemma 5.2, there is a non-terminating and normal string w. Infinite reduction sequences starting from w must contain a string starting with Ξ0 and ending with Ψ0 by the construction of TP . Thus the lemma follows from Lemma 5.3(b).	 

Confluence analysis of CP
In the sequel, we analyze the confluence property for CP . The following propositions on the working area are obtained from the construction of rules.

d	d
Proposition 5.4 If (·· ·)v  →∗ (·· ·)v
, then u' ∼ u'' and v' ∼ u''.

u' C
u''

Proposition 5.5 ←∗
Θ
v'
= ↔∗
Θ
P
= →∗
Θ
v''
.

The following lemma shows that strings in a specific form are closed under reductions by Θ-rules.

d
Lemma 5.6 Let m, n ≥ 0 and p ∈ {1, 2}. If χ = (0np pm)u  →∗
u'  Θ
v'
χ' then χ' =

d
(0n' p pm' )u
u''
v''
for some m', n' ≥ 0 and u'', v''.

Proof. For any string in forms of χ for p = 1 (resp. p = 2), only Θ1-rules (resp. Θ2-rules) are applicable, which produce a string in forms of χ'.	 
We state some properties on Θ1-rules.
Lemma 5.7 Consider the following strings for i ≤ j:

hi∗
+ u1
hi∗	hi∗
+ ui−1	∗ ui
hi∗
+ ui+1
hi∗
+ uk

χ = (0 )v1
··· (0 )vi−1 (11 )vi (1
)vi+1
··· (1 )vk ,

' 1 '
1
hi∗
'	+ u1
'
i−1
'
i−1
hi∗
+ uj−1
'
i
'
i
hi∗
∗ uj
'
i+1
'
i+1
hi∗
+ uj+1
'
k
'
k
hi∗
+ uk

χ = (0
)v1 ··· (0 )vj−1 (11 )vj (1
)vj+1  ··· (1 )vk .

''	''
1	j−1
''	''
1	j−1
''	''	''
j	j+1	k
''	''	''
j	j+1	k

If χ →∗ χ' then ul = u', vl = v', and (ul, vl) ∈ P for all i ≤ l < j and u' = u'' and
Θ	l	l	l	l
v' = v'' for all j ≤ l.
l	l
Proof. The lemma is proved by induction on the number of the rewrite steps.	 
Next we state some properties on Θ2-rules.

d
Lemma 5.8 Let χ = (22∗)u →∗
u'  Θ
v'
d
(0∗2)u
u''
v''
= χ' . Then u'' ∼ u' ∼ v' ∼ v''.

d'








d''

n	∗  u1	∗ u2
Proof. We can prove, by induction on n, the claim that χ → (0 2)v1 (2 )v2 implies
'	'
Θ	1	2
'	'
1	2
' ∼ v' . Hence the lemma follows from Proposition 5.4.	 

Lemma 5.9 If w = Ξ0(0
u' ∼ v'.

hd
+ u
u'	0
v'

h
→∗  Ξ02x2 χΨ2 = w'
CP	x3
x3
for some χ ∈ (Σc)∗, then

Proof. We prove the lemma by induction on the number of rewrite steps in the reduction sequence. In the case in which the first step is a reduction by α' -rules,

we have w → Ξ χ'Ψ
→∗ Ξ χ''Ψ
hd
→	Ξ (0+)u Ψ →∗
w'. The claim follows since

'	0	1	0
1	1
1	0
(α' )−1
u''	0
v''	P

u' ∼ u'' and v' ∼ v'' by Proposition 5.4 and u'' ∼ v'' by the induction hypothesis.
Consider the case in which the first step is a reduction by α2-rules. We have
hd
w → Ξ (0∗2)u Ψ →∗ w'. If (α )−1-rules are applied in the sequence then we can
α2	0	u	C	2
v'
show the claim in a similar way to the case in which the first step is a reduction by
hd
α' -rules. Hence assume that (α )−1-rules are not applied. Then, w' =Ξ (22∗)u  Ψ

1	2	0
u''	2
v''

by Lemma 5.6. Thus u' ∼ v' follows from Proposition 5.5 and Lemma 5.8.
Consider the case in which the first step is a reduction by δ2-rules. We have w →
δ2
hd
Ξ (0+)u  Ψ →∗  w'. The claim follows since u' ∼ u'' and v' ∼ v'' from Proposition 5.4
u''	0
v''	P
and u'' ∼ v'' from the induction hypothesis.	 


Lemma 5.10 If w = Ξ0(0
hi∗
+ u1
' 1 ' 1
··· (0
hi∗
+ uk k '
k
'
k

h
→∗  Ξ01x2 χΨ1 = w'
CP	x1
x2
for some χ ∈

(Σc)∗, then u1 ··· uk ∼ u' ··· u' , v1 ··· vk ∼ v' ··· v' and (ui, vi) ∈ P for every i.
k	1	k
Proof. We prove the lemma by induction on the number of rewrite steps in the reduction sequence. We only consider the case in which the first step is a reduction by α' -rules and (α' )−1-rules are not applied in the sequence since the other cases
1	1
that the first step is a reduction by α2-rules, or the first step is a reduction by
α' -rules and (α' )−1-rules are applied in the sequence are proved in a similar way
1	1
to Lemma 5.9 by using Proposition 5.4 and the induction hypothesis.

We have w	→
'
1
w''	→∗
CP
w', uk	=	u'
and vk	=	v' ,  where w''	=

hi∗ ··· hi∗	hi∗
+ u1 ··· uk−1	∗ uk
hi∗
'	∗ u1
hi∗ ··· hi∗
+ u2 ··· uk

Ξ0(0 )v1 ··· vk−1 (11 )vk Ψ1. Hence w
= Ξ0(11 )v1 (1
)v2 ··· vk
Ψ1 by Lemma 5.6.

u' ··· u'	u'
u''
u'' ··· u''

1	k−1	k
1	2	k

'	'	v'
v''
v'' ··· v''

v1 ··· vk−1	k	1	2	k
By applying Lemma 5.7 with i = 0 and j = k we obtain ul = u'' and vl = v'' for
l	l
all 1 ≤ l < k and u'' = u' and v'' = v' . Hence we have →u = u→'' and →v = v→''. Since
k	k	k	k
u→' ∼ u→'' and v→' ∼ v→'' by Proposition 5.4, →u ∼ u→' and →v ∼ v→' follow.	 


h
x1	∗
h
x1  '	'

Lemma 5.11 Let P be an instance of PCP. If w = Ξ01x2 χΨ1 ↔ Ξ02x2 χ Ψ2 = w

for some χ, χ' ∈ (Σc)∗, then P has a solution.
Proof.
x1	CP	x3
x2	x3

Let w ↔∗
CP
w'. Then a string in forms of Ξ0χ''Ψ0 must appear in this reduction

and no underlined state appears in χ'' from the construction of rules. Thus χ'' must

be in forms of Ξ0(0
hi∗
)v1
u1
v1
··· (0
hi∗
)vk Ψ0; otherwise the underlined state 1 displayed
uk
vk

in w does not move to the next symbol of Ψi by Lemma 5.6 and the construction
of rules. By Lemma 5.9 and Lemma 5.10, we have →u ∼ →v and (ui, vi) ∈ P , which means P has a solution.	 
We need more lemmas to guarantee the confluence of CP when P has no solution.
Lemma 5.12 Let w1 and w2 be normal strings over Σ∗. Then,

(a) w1
↔∗
C \γ'
w2 implies w1 ↓CP
w2, and

(b) w1
P  1
↔∗	w2 implies w1 ↓C
w2.

P
CP \γ2


Proof. Before proving (a), we show the claim (∗) that w1 ← w2 →∗
γ2	Θ
w3 → w4
γ2

implies w1 →∗
Θ
w4 by induction on the number of rewrite steps in w2 →∗
Θ
h
x1
w3. Here

w2 must begin with Ξ02x2
x3
x3
since it has a redex of γ2. Hence we can represent that

hd
w  = Ξ (2+)u S', w

hd
= Ξ (22∗)u S', w

hd
= Ξ (22∗)u

S'' and w

hd
= Ξ (2+)u

S'' for

1

'	''
2	u'
v'

∗
2	0	u'
v'
3	0	u''
v'' d
x1
4	2

'	''
v u''
v''

S ,S 
∈ Σ , where n /= 2 for the left-most symbol nx2 of S
x3
x4
and S .

In the case where S' = S'' = Ψ2, we have w1
→∗
є2∪є−1
w4 since u' ∼ u'' and

v' ∼ v'' by Proposition 5.4. In the other cases, we can separate the reduction,

from the construction of rules, into S' →∗
S'' and w'
hd
= Ξ (2+)u
hd
← Ξ (22∗)u  →∗



hd	hd
Θ	1	2	u'  g2	0
v'
v
u'  Θ
v'

Ξ (22∗)u
→ Ξ (2+)u
= w' . For the latter sequence, we have w'	→∗
w' since

0	u''  g2	2
v''
v
u''	4
v''
1	4
є2∪є−1

u' ∼ u'' and v' ∼ v'' by Proposition 5.4. Therefore w1 →∗
Θ
w4.

Now we prove (a) by induction on the number k of reduction steps by γ2-rules

in w1
↔∗
CP \g'
w2.

(k = 0): We have w1 →∗
Θ
w2 by Proposition 5.5.

(k = 1): The reduction sequence can be represented as w1 ↔∗
w3 ↔ w4 ↔∗
w2.

Then w1 →∗
Θ
w3 and w4 ←∗
Θ
Θ	g2	Θ
w2 follow from Proposition 5.5.

(k > 1): The reduction sequence can be represented as w1 ↔∗
Θ
w3 ↔ w4
g2
↔∗
CP \g'
w2.

If w3 →
g2
w4 then w1 ↓CP  w2 follows from Proposition 5.5 and the induction

hypothesis. Otherwise w1 ↔∗
Θ
w3 ← w4 ↔∗
g2	Θ
' →
4 g2
'	↔∗
2 CP \g'
w2. Since we have

w1 ↔∗
Θ
w3 ↔∗
Θ
w'	↔∗
2 C \g'
w2 by claim (∗) above, w1 ↓CP
w2 follows from the induction

P  1
hypothesis and Proposition 5.5
The lemma (b) can be shown in a similar way to (a) by using the following claim
(∗∗). We show the claim (∗∗) in which w1 ← w2 →∗ w3 → w4 implies w1 →∗ w4
'	'
1	1

by induction on the number of rewrite steps in w2 →∗
Θ
h
w3. Here w2 must begin
hd

with Ξ (1)x1 since it has a redex of γ' . Hence we can write w
= Ξ (1+)u S',

0	x2
x1
x2
hd
1
hd	hd
1	1	u'
v'

w  =Ξ (11∗)u S', w
=Ξ (11∗)u
S'' and w =Ξ (1+)u
S'' for S', S'' ∈ Σ∗, where

2	0	u'
v'
3	0	u''
v'' d
x1
4	1

'	''
v u''
v''

n /= 1 for the left-most symbol nx2 of S
x3
x4
and S .

In the case where S' = S'' = Ψ1, we have u' = u'' and v' = v'' by applying Lemma 5.7 with i = j = 1. Thus w1 = w4 follows. In the other cases, we can

separate the reduction, from the construction of rules, into S' →∗
Θ
S'' and w' =

hd
Ξ (1+)u

hd
← Ξ (11∗)u  →∗

hd
Ξ (11∗)u

hd
→ Ξ (1+)u

= w' . For the latter sequence, we

1	u'	'	0
v'	1
u'  Θ	0
v'
u''	'	1
v''	1
v
u''	4
v''

have w'
= w'
since u' ∼ u'' and v' ∼ v'' by Lemma 5.7. Therefore w1 →∗
Θ
w4.	 

Proof for Lemma 4.3
Since the ⇒-direction is easy from the observation of Example 4.2, we show the ⇐- direction. Assuming that P has no solution, we show that CP is confluent. ¿From

Lemma 5.2, considering w1 ←∗
CP
w0 →∗
CP
w2 for a normal string w0 is enough.

Consider the case in which w0 starts with Ξ0 and ends with Ψi for some i ∈
{0, 1, 2}. Assume that both γ' and γ2 are applied in the reduction sequence.
Then P must have a solution by Lemma 5.11, which is a contradiction. Hence at
least one of γ' or γ2 rules cannot be applied in the reduction sequence.
In either of following cases:
w0 ends with Ψi for some i ∈ {0, 1, 2}, and all other symbols are of Σc,
w0 starts with Ξ1 or Ξ2, and
w0 starts with Ξ0 and all other symbols are of Σc.
It is easy to see that at least one of γ' or γ2 rules cannot be applied in the
reduction sequence.
In any of the above cases, we have w1 ↓RP w2 by Lemma 5.12.	 

Length-two SRSs
Length-two SRSs are SRSs that consist of rules with length two, that is, |l| = |r| =2 for every rule l → r. In this section we give a transformation of a length-preserving SRS over Σ0 into a length-two SRS over Δ that preserves the confluence property and termination property.
Let Σ = Σ0 ∪ {-} and m + 1(≥ 3) be the maximum length of rules in R. Let Δ0 = (Σ0)m and Δ = Δ0 ∪ {wv | w ∈ (Σ0)k,v = -m−k, 1 ≤ k ≤ m − 1}.
The natural mapping φ : Δ → Σm is defined as φ(w) = w. This mapping is naturally extended to φ : Δ∗ → Σ∗.
Example 6.1 Let Σ0 = {a, b} and m = 2. Then Δ0 = {aa, ab, ba, bb}, Δ = Δ0 ∪ {a-, b-} and φ(ab bb a-)= abbba-.
We give a transformation of a length-preserving SRS R into a length-two SRS
tw(R) over Δ.
tw(R)= {w1w2 → w3w4 | wi ∈ Δ, φ(w1w2) → φ(w3w4)}.
R
Example 6.2 Let R = {bbb → aaa} over Σ0 = {a, b}. Then tw(R) is the following length-two SRS over Δ, where Δ is displayed in Example 6.1.
tw(R)= ⎧ bb b- → aa a-,	bb ba → aa aa,	bb bb → aa ab,

We say a string w1 ··· wn over Δ∗ is normal if w1,..., wn−1 ∈ Δ0. From the construction of tw(R), all reachable strings from a normal string are also normal.
We define a mapping ψ : Δ∗ → (Σ0)∗ as ψ(α) = w where w is a string ob- tained from φ(α) by removing all -’s. We define a mapping ψ−1 : (Σ0)∗ → Δ∗ as ψ−1(w) = α where ψ(α) = w and α is normal. For example ψ(ab bb a-) = abbba and ψ−1(abbba) = ab bb a-. Trivially we have ψ−1(ψ(α)) = α for normal α ∈ Δ∗ and ψ(ψ−1(w)) = w for w ∈ (Σ0)∗.

Proposition 6.3 (a) For a normal α1 ∈ Δ∗, if α1 →
tw(R)
α2 then ψ(α1) → ψ(α2).
R

(b) For w1 ∈ (Σ0)∗, if w1 → w2 then ψ−1(w1) → ψ−1(w2).
R	tw(R)
Proof. ¿From the construction of tw(R).	 
Lemma 6.4 For an SRS R, the SRS tw(R) is confluent (resp. terminating, right- most terminating, left-most terminating) if and only if α is confluent (resp. termi- nating, right-most terminating, left-most terminating) for every normal α ∈ Δ∗.
Proof. We can prove the lemma in a similar way to the proof of Lemma 5.2. Here Δ\Δ0 symbols play the same role as Ψi symbols. Actually, every occurrence of the symbols in Δ\Δ0 in rules are right-most positions in both sides. Moreover, for every rule, a symbol in Δ\Δ0 appears in the left-hand side if and only if it appears in the right-hand side. Hence we can separate any reduction sequence having a symbol in Δ\Δ0 into several reduction sequences by cutting each string at the right of its occurrence without any effect for the properties.	 
Lemma 6.5 Let R be an length-preserving SRS. R is terminating (resp. left-most terminating, right-most terminating) if and only if tw(R) is terminating (resp. left- most terminating, right-most terminating).
Proof. (⇒): Let tw(R) be non-terminating. By Lemma 6.4 we have an infinite reduction sequence for tw(R) starting from a normal string. This direction follows from Proposition 6.3(a).
(⇐): Let R be non-terminating. Then we have an infinite reduction sequence. By Proposition 6.3(b) we have an infinite reduction sequence for tw(R).
This proof also works on either left-most cases or right-most cases.	 
Lemma 6.6 Let R be a length-preserving SRS. R is confluent if and only if tw(R)
is confluent.

Proof. (⇒): Let β1
←∗
tw(R)
α	→∗
tw(R)
β2.	We can assume that α is normal by

Lemma 6.4. We have ψ(β1) ←∗
R
ψ(α) →∗
R
ψ(β2) by Proposition 6.3(a). Since R is

confluent, there exists a string w ∈ Σ∗ such that ψ(β1) →∗ w ←∗
ψ(β2). Therefore we

0	R	R

have β1 = ψ−1(ψ(β1))
→∗
tw(R)
ψ−1(w)
←∗
tw(R)
ψ−1(ψ(β2)) = β2 by Proposition 6.3(b).

(⇐): Let u1 ←∗
R
w →∗
R
u2. We have ψ−1(u1)
←∗
tw(R)
ψ−1(w)
→∗
tw(R)
ψ−1(u2) by Propo-

sition 6.3(b). Since tw(R) is confluent, there exists a string α ∈ Δ∗ such that

ψ−1(u1)
→∗
tw(R)
α	←∗
tw(R)
ψ−1(u2). Since α is normal, we have u1 = ψ(ψ−1(u1)) →∗
R

ψ(α) ←∗
R
ψ(ψ−1(u2)) = u2 by Proposition 6.3(a).	 

Theorem 6.7 Confluence (termination, left-most termination, right-most termi- nation) is an undecidable property for length-two SRSs.
Proof. Directly obtained from Theorem 4.4 and Lemma 6.6 (Lemma 6.5). 

Conclusions
In this paper, we showed that confluence, termination, left-most termination, and right-most termination are undecidable properties for length-two SRSs which are length-preserving SRSs consisting of length-two rules. Thus all these properties are also undecidable properties for linear TRSs in which depth-two variables are allowed in both sides of the rules. We still have remaining questions concerning (un)decidability results for classes of SRSs obtained by limiting the number of rules.
Acknowledgment
We would like to thank the anonymous referees for their helpful comments and remarks. This work is partly supported by MEXT.KAKENHI #18500011 and #16300005.

References
F. Baader, T. Nipkow. Term rewriting and all that, Cambridge University press, 1998.
A.-C. Caron. Linear bounded automata and rewrite systems: influence of initial configuration on decision properties, Proc. of the Colloquium on Trees in Algebra and Programming (CAAP’91), LNCS, 493, pp.74–89, 1991.
M. Dauchet. Simulation of Turing machines by a regular rewrite rule, Theoretical Computer Science,
103, pp.409–420, 1992.
N. Derchowitz. Termination of linear rewriting systems, Proc. of the 8th International Colloquium on Automata, Languages and Programming (ICALP’81), LNCS, 115, pp.448–458, 1981.
A. Geser, A. Middeldorp, E. Ohlebusch, H. Zantema. Relative undecidability in term rewriting (Part 1: the termination hierarchy), Information and Computation, 178(1), pp.101–131, 2002.
A. Geser, A. Middeldorp, E. Ohlebusch, H. Zantema. Relative undecidability in term rewriting (Part 2: the confluence hierarchy), Information and Computation, 178(1), pp.132–148, 2002.
G. Godoy, A. Tiwari, R. Verma. On the confluence of linear shallow term rewriting systems, Proc. of 20th International Symposium on Theoretical Aspects of Computer Science (STACS2003), LNCS, 2507, pp.85–96, 2003.
G. Godoy, A. Tiwari. Confluence of shallow right-linear rewrite systems, Proc. of 14th Annual Conference on Computer Science Logic (CSL2005), LNCS, 3634, pp.541–556, 2005.
G. Godoy, A. Tiwari. Termination of rewrite systems with shallow right-linear, collapsing, and right- ground rules, Proc. of 20th International Conference on Automated Deduction (CADE2005), LNCS, 3632, pp.164–176, 2005.


G. Huet, D. S. Lankford. On the uniform halting problem for term rewriting systems, Technical Report of INRIA, 283, 1978.
F. Jacquemard. Reachability and confluence are undecidable for flat term rewriting systems, Information Processing Letters 87(5), pp.265–270, 2003.
K. E. Knuth, P. B. Bendix. Computational problems in abstract algebra, Pergamon Press, Oxford, pp.263–297, 1970.
Y. Matiyasevitvh, G. S´enizergues. Decision problems for semi-Thue systems with a few rules, Proc. of IEEE symposium on Logic in Computer Science (LICS’96), pp.513–531, 1996.
I. Mitsuhashi, M. Oyamguchi, Y. Ohta, and T. Yamada. The joinability and related decision problems for confluent semi-constructor TRSs, Transactions of Information Processing Society of Japan, 47(5), pp.1502-1514, 2006.
I. Mitsuhashi, M. Oyamaguchi and F. Jacquemard. The confluence problem for flat TRSs, Proc. of 8th International Conference on Artificial Intelligence and Symbolic Computation (AISC2006), LNAI 4120, pp.68-81, 2006.
M. Oyamaguchi, The Church-Rosser property for ground term rewriting systems is decidable, Theoretical Computer Science, 49, pp.43–79, 1987.
E. Post. A variant of a recursively unsolvable problem. Bulletin of the American Mathematical Society,
52, pp.264–268, 1946.
Y. Wang, M. Sakai, Decidability of termination for semi-constructor TRSs, left-linear shallow TRSs and related systems, Proc. of 17th International Conference on Term Rewriting and Applications (RTA2006), LNCS, 4098, pp.343–356, 2006.
H. Zantema, Termination of term rewriting: interpretation and type elimination, Journal of Symbolic Computation, 17, pp.23–50, 1994.
