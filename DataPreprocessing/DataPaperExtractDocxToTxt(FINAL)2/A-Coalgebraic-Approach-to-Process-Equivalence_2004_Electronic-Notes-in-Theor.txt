Electronic Notes in Theoretical Computer Science 106 (2004) 201–218 
www.elsevier.com/locate/entcs


A Coalgebraic Approach to Process Equivalence
and a Coinduction Principle for Traces
Bartek Klin1
BRICS, Aarhus University 2

Abstract
An abstract coalgebraic approach to well-structured relations on processes is presented, based on notions of tests and test suites. Preorders and equivalences on processes are modelled as coalgebras for behaviour endofunctors lifted to a category of test suites. The general framework is specialized to the case of finitely branching labelled transition systems. It turns out that most equivalences from the so-called van Glabbeek spectrum can be described by well-structured test suites. As an immediate application, coinductive proof principles are described for these equivalences, in particular for trace equivalence.
Keywords: van Glabbeek spectrum, coalgebra, coinduction.


Introduction
In the theory of concurrent processes as transition systems, various opera- tional equivalences and preorders on processes are considered, corresponding to different notions of “similarity” between processes. In the standard case of nondeterministic, labelled transition systems, the most popular notions in- clude bisimulation equivalence, simulation preorder, trace equivalence, failures equivalence etc. These notions have been studied thoroughly in [3] and are collectively known as the van Glabbeek spectrum. For other kinds of systems,

1 Email: mailto:klin@brics.dk
2 Basic Research in Computer Science (http://www.brics.dk),
funded by the Danish National Research Foundation.


1571-0661 © 2004 Elsevier B.V. Open access under CC BY-NC-ND license.
doi:10.1016/j.entcs.2004.02.029


known equivalences include various kinds of weak bisimulation equivalences, probabilistic bisimulation equivalence and many others.
In the coalgebraic approach to the theory of processes (cf. [15] as the main reference), the notion of transition system is parametrized by a notion of behaviour, modelled as an endofunctor B. Systems are then defined to be B-coalgebras. For example, if BX = Pf(A × X) on Set (for a fixed set A of actions), B-coalgebras correspond to finitely branching labelled transition systems.
The coalgebraic approach allows one to describe abstractly several kinds of transition systems. Given the importance of various operational equivalences in process algebra, an equally abstract treatment of these equivalences is de- sirable. Several attempts in this direction have been made (see Section 7), but even in the case of labelled transition systems, none have covered all equivalences and preorders from the van Glabbeek spectrum so far.
In [8,9], a novel abstract coalgebraic approach to process equivalence was presented, based on the notions of tests and test suites. There, equivalences and preorders are modelled as coalgebras for behaviour endofunctors suitably lifted to a category of test suites TS. Intuitively, two processes are considered equivalent if they cannot be distinguished by means of any test from a given test suite. Varying the test suites considered, different notions of process equivalence are obtained.
This general technique was applied to the case of finitely branching labelled transition systems, and a test suite characterization of three equivalences from the van Glabbeek spectrum (trace equivalence, completed trace equivalence and failures equivalence) was provided. Moreover, it was shown how to com- bine the test suite approach with bialgebraic methods of [17] to systematically derive congruence formats of structural operational semantics.
This paper makes two new contributions. Firstly, the test suite framework is showed to cover three other equivalences from the spectrum: ready trace equivalence, simulation equivalence and bisimulation equivalence. Moreover, the characterization of these equivalences as the least coalgebras for suitably lifted behaviour endofunctors is obtained in a more structured fashion than in [9], via a correspondence between tests and modal formulae in the respec- tive fragments of the Hennessy-Milner logic. This hopefully will convince the reader that other notions from the van Glabbeek spectrum can be character- ized in a similar manner.
Secondly, full relational characterizations of all (and not only least ones, as in [8]) coalgebras for lifted behaviour endofunctors are provided. This gives rise to novel, specialized coinduction proof principles for various operational equivalences.


For example, a notion of Tr-aware relation is defined, such that (1) trace preorder is the largest Tr-aware relation, and (2) Tr-aware relations have enough structure to facilitate proofs that given relations are Tr-aware. This allows one to prove coinductively that two given processes are trace equivalent, by showing any Tr-aware relations that relate them. Thus Tr-aware relations are connected to trace equivalence in the same way as bisimulations are con- nected to bisimulation equivalence, or simulations to simulation equivalence. The notion of Tr-aware relation is obtained by careful analysis of coalgebras for a suitably lifted endofunctor on TS.
After Section 2 of preliminaries, the abstract framework of test suites is recalled in Section 3. In Section 4, it is specialized to the behaviour BX = Pf(A × X), and several equivalences from the van Glabbeek spec- trum are related to coalgebras for B suitably lifted to the category TS. In Section 5, these coalgebras are studied in more detail, which leads to the def- inition of various coinduction principles. A simple application of one of those principles (that corresponding to trace equivalence) is shown in Section 6. A brief description of related work is given in Section 7.
Acknowledgements. The author is very grateful to Gordon Plotkin for inspiration and encouragement, to Pawel Sobocinski for many discussions, and to anonymous referees for useful remarks.

Preliminaries
In this section, we present standard notions and results related to labelled transition systems, operational equivalences and coinduction, taken mostly from [3] and [15].
Definition 2.1 A labelled transition system (LTS) ⟨X, A, −→⟩ is a set X of
processes,a set A of actions, and a transition relation −→ ⊆ X × A × X.

As usual, we will write x −a→ x' instead of ⟨x, a, x'⟩∈ −→. For any x ∈ X, one defines the set of initials I(x)= a ∈ A : x −a→ x' for some x' ∈ X ,.
An LTS ⟨X, A, −→⟩ is ﬁnitely branching, if for every process x ∈ X there
are only finitely many processes x' ∈ X and actions a ∈ A such that x −a→ x'. An LTS for which its underlying graph (obtained by ignoring all actions)
is a rooted, directed tree is called a labelled synchronization tree.
Definition 2.2 Given a set of actions A, one considers sets of modal formulae
FTr, FRdTr, FS and FBS, given by the following BNF grammars (here a ranges

over A, and Q ranges over subsets of A):
FTr φ ::= T| ⟨a⟩ φ	FRdTr φ ::= T| ⟨a⟩ φ | Qˇ ∧ ⟨a⟩ φ
FS φ ::= T| ⟨a⟩ φ | φ ∧ φ	FBS	φ ::= T|⊥| ⟨a⟩ φ | [a]φ | φ ∧ φ | φ ∨ φ
Definition 2.3 Given an LTS h = ⟨X, A, −→⟩, the satisfaction relation |=h
between processes and modal formulae is defined inductively as follows:
x |=h T	always	x |=h ⊥	never
x |= ⟨a⟩ φ	⇐⇒ x' |= φ for some x' such that x −a→ x' x |= [a]φ	⇐⇒ x' |= φ for all x' such that x −a→ x'

x |=h Qˇ
⇐⇒ I(x)= Q

x |=h φ1 ∧ (∨)φ2 ⇐⇒ x |=h φ1 and (or) x |=h φ2
The set of formulae FBS together with the above interpretation is called the (finitary) Hennessy-Milner logic.
Definition 2.4 For any W ∈ {Tr, RdTr, S, BS} one considers the respective operational preorder ±W⊆ X × X and an operational equivalence ∼=W⊆ X × X, defined on a given LTS h as follows:
x ±W x' ⇐⇒ (∀φ ∈ FW. x |=h φ =⇒ x' |=h φ) x ∼=W x' ⇐⇒ (∀φ ∈ FW. x |=h φ ⇐⇒ x' |=h φ)
Preorders ±Tr and ±RdTr on a given LTS are usually called trace preorder and ready trace preorder, respectively. The corresponding equivalences are named in a similar manner. The preorders ±S, ±BS and equivalences ∼=S, ∼=BS are considered in more detail below.
In the following definitions, a given LTS ⟨X, A, −→⟩ is assumed.
Definition 2.5 A relation R ⊆ X × X is a simulation, if xRy implies
∀x −a→ x'. ∃y −a→ y'. x'Ry'.
If, moreover, xRy implies
∀y −a→ y'. ∃x −a→ x'. x'Ry'.
then R is a bisimulation.
Definition 2.6 Processes x, y ∈ X are
in simulation preorder, if there exists a simulation R such that xRy,

simulation equivalent, if there exist simulations R, R' such that xRy and
yR'x,
bisimulation equivalent, if there exists a bisimulation R such that xRy.
Proposition 2.7 Simulation preorder is indeed a preorder and it is the largest simulation on a given LTS. Bisimulation equivalence is indeed an equivalence relation and it is the largest bisimulation on a given LTS.
Proposition 2.8 In any LTS, the relation ±S is equal to simulation preorder, the relation ∼=S is equal to simulation equivalence, and the relations ±BS and
∼BS are both equal to bisimulation equivalence.
The use of coalgebras in the abstract theory of processes has been mo- tivated by an easy correspondence between Pf(A × −)-coalgebras, (where A is a fixed set and Pf : Set → Set is the covariant finite powerset func- tor) and finitely branching labelled transition systems. Indeed, given an LTS
⟨X, A, −→⟩, consider a function h : X → Pf(A × X) defined by
⟨a, x'⟩∈ hx ⇐⇒ x −a→ x'
It is easy to check that this gives a 1-1 correspondence. In the following we will often use this correspondence silently, identifying finitely branching LTSs with their corresponding coalgebras.
Varying the endofunctor B, one obtains similar correspondences between coalgebras and deterministic automata, labelled transition systems with state predicates, probabilistic transition systems and many others (see [15]).
The functor B used to represent transition systems as coalgebras is usually called a behaviour endofunctor. This notion only reflects the context of use of B, and does not restrict the class of functors considered.
It is well known that the finite powerset functor Pf admits final coalgebras [2]. In particular:
Proposition 2.9 For any set A, the endofunctor BX = Pf(A × X) has a final coalgebra φ : Ω → BΩ with Ω the set of (possibly infinite) finitely branching synchronization trees edge-labelled with elements of A, quotiented by bisimulation equivalence.
Test Suite Approach to Relations on Processes
In this section, we recall the test suite approach [8] to well-structured rela- tions on processes, modelled as coalgebras. The approach has been inspired by unpublished ideas of Plotkin, who used topologies of tests to represent bisimulations on complete partial orders.


In Section 4, it will be shown how this approach allows to represent oper- ational preorders and equivalences from the van Glabbeek spectrum.
Denote 2 = {tt, ff}. A test on a set X is a function V : X → 2. A test suite on a set X is a set of tests on X. The set of all test suites on X, partially ordered by (reverse) inclusion, is denoted X∗. For any function f : X → Y , define the monotonic reindexing function f ∗ : Y ∗ → X∗ by
f ∗θ = { V ◦ f : V ∈ θ }
where θ ∈ Y ∗. It is easy to check that this gives a functor (−)∗ from Setop to the category Pos of partially ordered sets. On this functor one performs the well-known Grothendieck construction (see e.g. [5]), obtaining the following
Definition 3.1 The test suite category TS is defined as follows:
objects in TS are pairs ⟨X, θ⟩, where X is a set and θ ∈ X∗,
morphisms f : ⟨X, θ⟩→ ⟨Y, ϑ⟩ are functions f : X → Y such that θ ⊇ f ∗ϑ.
Every test on X can be identified with a subset of X. However, we stick to the functional representation of tests, as it will make further developments (in particular, the definition of lifted endofunctor BW below) look more natural. We will use T and F to denote the constantly true and the constantly false tests. We will also speak of unions and intersections of tests, denoted with ∨ and ∧ and defined in the obvious way.
Any test suite induces two canonical specialization relations:
Definition 3.2 Let θ be a test suite on any set X. Specialization equivalence
∼θ and specialization preorder ≤θ are defined by
=∼ = {⟨x, y⟩∈ X × X | ∀V ∈ θ. V x = V y}
≤θ = {⟨x, y⟩∈ X × X | ∀V ∈ θ. V x = tt ⇒ Vy = tt}
It is straightforward to show that test suite morphisms preserve special- ization preorders and equivalences.
One says that an endofunctor B∗ : TS → TS lifts an endofunctor B : Set → Set if p ◦ B∗ = B ◦ p, where p : TS → Set is the obvious forgetful functor.
Any functor B : Set → Set can be lifted to an endofunctor on TS in possibly many ways, by defining its action on test suites. For our purposes, one particular way is especially useful. This well-structured method of lifting endofunctors is based on notions of test constructors and closures. Intuitively speaking, one might view tests as formulae interpreted on processes. Then test constructors correspond to modal operators in a language of formulae,


and closures correspond to propositional connectives. More concrete examples supporting this intuition are presented in Section 4.
Definition 3.3 Let B be an endofunctor on Set. Tests on the set B(2) are called B-test constructors.
Definition 3.4 A test suite closure is a family of monotonic functions ClX : X∗ → X∗ for every set X, such that for any function f : X → Y , and for any test suite θ on Y , one has ClX f ∗θ = f ∗ ClY θ.
Proposition 3.5 Let B be an endofunctor on Set. Any set of B-test con- structors W 3 , and any closure Cl induces a lifting of B to an endofunctor BW on TS, defined by
BW ⟨B, θ⟩ = BX, BWθ	BWf = Bf
where for any set X, the action BW : X∗ → (BX)∗ is a monotonic function

defined by
BWθ = ClBX {w ◦ BV | w ∈ W,V ∈ θ}

Let BW : TS → TS be defined as above. For any B-coalgebra h : X →
BX, define the operator ΦW : X∗ → X∗ by
ΦWθ = h∗BXθ
It is clearly monotonic, since both h∗ and BX are monotonic.
BW-coalgebras correspond to prefixed points of such operators: a B-coalgebra
W	W
X
and only if θ ⊇ ΦWθ. In this case, one says that θ lifts h to a BW-coalgebra. Following the intuitive correspondence between tests and modal formulae,
BW-coalgebras are B-coalgebras equipped with sets of properties (predicates) closed under the modal operators from W and under the propositional con- nectives defined by Cl. The least such set corresponds to a certain modal logic interpreted on the underlying B-coalgebra. Again, this intuition will be confirmed in Section 4.
 Proposition 3.6 If B has a final coalgebra φ :Ω → BΩ,then φ : Ω, ωW →
 
ΦW.
Final BW-coalgebras allow to construct, for any B-coalgebra h : X → BX, the “least BW-coalgebra that lifts h”, i.e., the least test suite θ ∈ X∗ that lifts h to an BW-coalgebra:

3 The relation of this W to the one used in Definition 2.4 will become clear in Section 4.2.


Proposition 3.7 Under the above notation, for any coalgebra h : X → BX, the least fixed point of ΦW (or, equivalently, the least element of X∗ that lifts h to an BW-coalgebra) is equal to k∗ωW, where k : X → Ω is the coinductive extension of h.
In the next section we will show how to represent various known equiva- lences and preorders on processes as specialization equivalences and preorders of the test suites k∗ωW, for various liftings of behaviour to the category TS.

van Glabbeek Spectrum Described by Test Suites
In this chapter, we specialize the general framework described in Section 3 to describe various notions of operational equivalences and preorders from the van Glabbeek spectrum. For this purpose, fix the endofunctor BX = Pf(A × X) for a fixed set A.
In the following, various liftings BW of B to TS will be proposed, based on different choices of sets W of B-test constructors. For different choices of W, BW-coalgebras will be related, by means of specialization relations, to operational equivalences and preorders from the van Glabbeek spectrum. The correspondence will go via modal formulae in the respective fragments of the Hennessy-Milner logic, illustrating the correspondence between tests and formulae, test constructors and modal operators, and between closures and propositional connectives.

Test Constructors and Closures
We begin by defining some B-test constructors, useful to represent relations from the van Glabbeek spectrum.
Definition 4.1 For any a ∈ A, Q ⊆ A, define test constructors
w⟨a⟩, w[a], wˇaQ : B2 → 2
as follows:
w⟨a⟩β = tt ⇐⇒ ⟨a, tt⟩∈ β w[a]β = ff ⇐⇒ ⟨a, ff⟩∈ β
wˇaQβ = tt ⇐⇒ w⟨a⟩β = tt and { a ∈ A : ⟨a, −⟩ ∈ β } = Q
The following sets of test constructors will be useful:

Definition 4.2 Define
Tr =  w⟨a⟩ : a ∈ A }
RdTr = Tr ∪{ wˇaQ : a ∈ A, Q ⊆ A }
BS = Tr ∪  w[a] : a ∈ A }

We will also consider three different closures:
Definition 4.3 Closures ClT, ClΛ and ClVΛ are defined by

ClT θ = θ ∪ T
ClΛ θ = {  n	Vi : n ∈ N, Vi ∈ θ }
ClVΛ θ =  n	 m  Vij : n, m ∈ N, Vij ∈ θ ,

It is straightforward to check that the above equations indeed define clo- sures according to Definition 3.4.
Finally, sets of B-test constructors from Definition 4.1, together with suit- ably chosen closures, induce liftings of B to endofunctors on TS along the lines of Proposition 3.5:

Definition 4.4 For W ∈ {Tr, RdTr}, the endofunctor on TS induced by the set of B-test constructors W and by the closure ClT is denoted BW. The endofunctor on TS induced by the set of B-test constructors Tr and by the closure ClΛ is denoted BS. The endofunctor on TS induced by the set of B-test constructors BS and by the closure ClVΛ is denoted BBS.


Relation to Modal Logics
It is not difficult to notice that the sets of test constructors shown in Defini- tion 4.2 are related to modal constructors from the BNF grammars shown in Definition 2.2. This is not a coincidence, and indeed the modal logics from Definition 2.2 inspired Definitions 4.1-4.3. This subsection is devoted to giving a formal correspondence between these definitions.
Definition 4.5 Let W ∈ {Tr, RdTr, S, BS}, and let h : X → BX be an LTS.

Define a function [−]h : FW → (X → 2) inductively as follows: [T]h = T	[⊥]h = F

[⟨a⟩ φ]h = w⟨a⟩ ◦ B[φ]h ◦ h
[Qˇ ∧ ⟨a⟩ φ]h = wˇaQ ◦ B[φ]h ◦ h
[[[a]φ]h = w[a] ◦ B[φ]h ◦ h

[φ1 ∧ φ2]h = [[φ1]h ∧ [φ2]h	[φ1 ∨ φ2]h = [[φ1]h ∨ [φ2]h The correspondence between modal formulae and tests is given in
Theorem 4.6 Let W ∈ {Tr, RdTr, S, BS} and let h : X → BX be an LTS.
For any formula φ ∈ FW and any x ∈ X,
[φ]hx = tt ⇐⇒ x |=h φ
Proof Straightforward structural induction on modal formulae.	 
The above correspondence maps modal logics to the least test suites lifting coalgebras to endofunctors BW:
Theorem 4.7 Let h : X → BX be a B-coalgebra and k : X → Ω the coinductive extension of h. For W ∈ {Tr, RdTr, S, BS},
{[φ]h | φ ∈ FW} = k∗ωW
where ωW is taken from the final BW-coalgebra φ : Ω, ωW → BΩ, BWωW .
Theorem 4.7 allows one to describe operational preorders and equivalences on a given coalgebra h : X → BX as specialization relations of the least test suites which lift h to coalgebras of various endofunctors on TS, as the following easy corollary shows.
Corollary 4.8 Let h : X → BX be a B-coalgebra and k : X → Ω the coinductive extension of h. For W ∈ {Tr, RdTr, S, BS},
±W=≤k∗ωW	and	∼=W=∼=k∗ωW
Proof Compare Definitions 2.4 and 3.2 and use Theorems 4.6 and 4.7.	 
This important corollary gives a coalgebraic characterization of preorders and equivalences from the van Glabbeek spectrum. However, an even stronger correspondence between BW-coalgebras and operational relations can be shown, providing a full characterization of BW-coalgebras. In Section 5 we present this correspondence, followed by an application of it to deriving coinductive proof principles in Section 6.

Characterization of Test Suite Coalgebras
We begin by characterizing the operational preorders and equivalences of BS and BBS-coalgebras. The remaining preorders and equivalences from the van Glabbeek spectrum are treated later.
The following two theorems show that the specialization preorders of BS- coalgebras are exactly reflexive and transitive simulations (see Definition 2.5).
Theorem 5.1 For any BS-coalgebra h : ⟨X, θ⟩ → BX, BS θ , the special- ization preorder ≤θ is a reflexive and transitive simulation on h : X → BX.
Theorem 5.2 For any coalgebra h : X → BX in Set, and any reflexive and transitive simulation R on h, there exists a test suite θR on X such that
≤θR = R and h : ⟨X, θR⟩→ BX, B θR is a valid B -coalgebra.
S	S

Proof  (sketch) Assume any reflexive and transitive simulation R on h : X →
BX and consider the following test suite on X:
θR = { V : X → 2 : V is R-upper }
where V is R-upper means that for any x, y ∈ X, if xRy and Vx = tt then
Vy = tt. Then check that θR satisfies the above conditions.	 
Corollary 5.3 Specialization preorders ≤θ of BS-coalgebras h : ⟨X, θ⟩ →
BX, BS θR are exactly reflexive and transitive simulations on h : X → BX.
X
~	S	S
are exactly the equivalence relations R ∩ R−1 associated to reflexive and tran- sitive simulations R on h : X → BX.
A similar characterization of BBS-coalgebras can be obtained in an analo- gous fashion:
Corollary 5.4 Specialization preorders ≤θ of BBS-coalgebras h : ⟨X, θ⟩ → 
BX, BBSθR	are exactly reflexive and transitive bisimulations on h : X →
X
~	BS	BS
are exactly the equivalence relations R ∩ R−1 associated to reflexive and tran- sitive bisimulations R on h : X → BX.
From Corollaries 5.4 and 4.8 it is easy to infer that the bisimulation pre- order ±BS on any h : X → BX is the largest bisimulation on h, which is a well-known result, stated in Proposition 2.9. This is related to the usual coin- duction proof principle used to show that certain operations respect bisimu- lation equivalence. Many examples of proofs using this principle are shown, e.g., in [15, Section 12].


This hints that a similar characterization of BW-coalgebras for various W might lead to analogous proof principles for other equivalences in the van Glabbeek spectrum. Such characterizations will be presented now, and an example of the resulting proof principle is shown in Section 6.
To give a full characterization of (the specialization relations ≤θ and ∼=θ of) BW-coalgebras for W ∈ {Tr, RdTr}, we first need a few technical definitions and results.
Definition 5.5 A relation S ⊆ X × PX is called a quasi-preorder on X if
for any x ∈ X, xS{x} and x/S ∅,
for any x, y ∈ X, ξ, χ ⊆ X, if xSξ, y ∈ ξ and ySχ then xS((ξ \ {y}) ∪ χ).
Definition 5.6 Let S be a quasi-preorder on X. A set V ⊆ X is called quasi- S-upper, if for any x ∈ V , and for any ξ ⊆ X such that xSξ, the intersection V ∩ ξ is not empty.
Lemma 5.7 Let S be a quasi-preorder on X, and fix arbitrary elements x, y ∈
X. If for every quasi-S-upper set Y ⊆ X, x ∈ Y implies y ∈ Y , then xS{y}.
Proof (sketch) Show that Y = { z ∈ X : z/S {y}} is quasi-S-upper. Since
y /∈ Y , also x /∈ Y , hence xS{y}.	 
Definition 5.8 Consider an LTS (a B-coalgebra) h : X → BX. Let a range over A, Q over subsets of A, x, x' over X, and ξ over subsets of X. A relation S ⊆ X × PX is called a
one-by-many Tr-simulation on h if whenever xSξ and x −a→ x', then x'S{y' ∈
X | ∃y ∈ ξ. y −a→ y'}, one-by-many RdTr-simulation on h if S is a one-
by-many Tr-simulation on h, and if whenever xSξ and x −a→ x', then
x'S	y' ∈ X : ∃y ∈ ξ. y −a→ y',I(x)= I(y) .
For W ∈ {Tr, RdTr}, a relation R ⊆ X × X is called W-aware on h if there exists a one-by-many W-simulation S on h such that xRy ⇐⇒ xS{y}. If, moreover, S is a quasi-preorder, then R is called a W-aware preorder.
The following theorems and corollaries characterize the specialization pre- orders and equivalences of BW-coalgebras as respective W-aware preorders.
Theorem 5.9 Let W = {Tr, RdTr}. For any BW-coalgebra h : ⟨X, θ⟩ →
BX, BWθ , the relation ≤θ is a W-aware preorder on h : X → BX.
Proof We prove the case W = Tr, the other case is similar. First, recall that saying that h : ⟨X, θ⟩→ BX, BTrθ is a BTr-coalgebra is equivalent to saying that θ ⊇ h∗BTrθ. Equivalently, T ∈ θ and for any V ∈ θ and a ∈ A, also

w⟨a⟩ ◦ BV ◦ h ∈ θ. Define S ⊆ X × PX as follows:
xSξ iff ∀V ∈ θ. (Vx = tt ⇒ ∃y ∈ ξ. V y = tt)
Obviously x ≤θ y if and only if xS{y}, hence it is enough to show that S
is a quasi-preorder and a one-by-many Tr-simulation.
The proof that S is a quasi-preorder is straightforward. To show that it is a one-by-many Tr-simulation, consider any x ∈ X, ξ ⊆ X. Assume x −a→ x' and x'/S {y' ∈ X | ∃y ∈ ξ. y −a→ y'}. By definition of S, there exists a test V ∈ θ such that
V x' = tt, and
V y' = ff for all y ∈ ξ, y −a→ y'.
Consider a test V ' = w⟨a⟩ ◦ BV ◦ h. Obviously V 'x = tt, but for every
y ∈ ξ, V 'y = ff. Since V ∈ θ, also V ' ∈ θ, hence x/S ξ.	 
Theorem 5.10 Let W = {Tr, RdTr}. For any coalgebra h : X → BX in Set, and any W-aware preorder R on h, there exists a test suite θR on X such that
≤θR = R and h : ⟨X, θR⟩→ BX, B  θR is a valid B  -coalgebra.
W	W

Proof Again, we prove the case of W = Tr. The other case is similar. Assume a quasi-preorder and one-by-many Tr-simulation S on h such that xRy if and only if xS{y}. Define (compare Theorem 5.2)
θR = {V : X → 2 | V is quasi-S-upper}
To check that R ⊆≤θR , assume xRy, or equivalently, xS{y}. Consider any
V ∈ θR such that Vx = tt. Since V is quasi-S-upper, also Vy = tt.
To check that ≤θR ⊆ R, assume that for every V : X → 2 such that V is quasi-S-upper, if Vx = tt then Vy = tt. By Lemma 5.7 it easily follows that xS{y}, hence xRy.
To check that h : ⟨X, θ⟩ →  BX, BTrθR  is a valid BTr-coalgebra, it is
enough to check that
T ∈ θR, and
for any V ∈ θR, also w⟨a⟩ ◦ BV ◦ h ∈ θR.
The first condition is easy, since T is quasi-S-upper for any quasi-preorder
S on X.
For the second condition, assume any V ∈ θR and denote V ' = w⟨a⟩◦BV ◦h. Take any x ∈ X, ξ ⊆ X such that xSξ and V 'x = tt. The latter assumption means that there exists an x' ∈ X such that x −a→ x' and V x' = tt.
Since S is a one-by-many Tr-simulation, this means that x'S{y' ∈ X |


∃y ∈ ξ. y −a→ y'} and (since V is quasi-S-upper) there exist y, y' ∈ X such that y ∈ ξ, y −a→ y' and V y' = tt. Then V 'y = tt. Since xSξ were chosen arbitrarily, V ' is quasi-S-upper.	 
Corollary 5.11 Specialization preorders ≤θ for BTr-coalgebras h : ⟨X, θ⟩ → 
BX, BTrθR  are exactly Tr-aware preorders on h : X → BX.
The trace preorder ±Tr on h is the largest Tr-aware relation on h.

Application: coinduction principle for traces
One of the most useful applications of coalgebraic semantics of processes is the coinduction proof principle, based on the fact that the bisimulation equivalence on any LTS is the largest bisimulation on it. Therefore to prove that two processes are bisimulation equivalent, it is enough to provide any bisimulation that relates them. The rich structure of bisimulation relations allows one to use this proof principle in a very convenient fashion. Many examples of its use can be found e.g. in [15, Section 12].
Results shown in Section 5 allow one to apply similar reasoning to other equivalences from the van Glabbeek spectrum. Corollary 5.11 characterizes trace preorder as the largest Tr-aware relation. As it turns out, Tr-aware re- lations have enough structure to play in reasoning about trace equivalence a similar roˆle to that of bisimulations in reasoning about bisimulation equiva- lence. We now show an example of such “coinduction principle for traces”.
Consider a final B-coalgebra φ :Ω → BΩ (recall Proposition 2.9). On the set Ω, define the associative, idempotent and commutative binary operation
+ by
p + q = φ−1(φp ∪ φq)
Now define a function glue : Ω → Ω as the coinductive extension of the
B-coalgebra α :Ω → BΩ defined by
αp =  a,  ⟨a,p'⟩∈φp p'  : a ∈ A ,
where  denotes the obvious extension of + to finite subsets of Ω.
Using the “operational rule” notation for coinductive definitions as intro- duced in [15, Section 11], one may write alternatively


p ,... ,p 
are exactly the processes for which p −a→ p

1


for any a ∈ A.
n	i
glue(p) −a→ glue(p + ··· + p )


For example, if Ω is the set of all finitely branching labelled synchronisation trees, one has

 a  • b  •
  a	 b •

glue( •zz   c		)= •	•zz

a z•	•
cz•

Theorem 6.1 The operation glue preserves and respects traces. In other
words, for any process p ∈ Ω, p and glue(p) are trace equivalent.
Proof A standard way of proving this theorem is to use induction on the length of traces. Instead, we use the coinduction proof principle for traces, as expressed in Corollary 5.11.
First, we show that the relation { ⟨glue(p), p⟩ : p ∈ Ω } is a Tr-aware re- lation. Consider S ⊆ Ω × PΩ defined by
pS{q1,... , qn} ⇐⇒ glue  i∈I qi = p for some I ⊆ {1,..., n}.
To show that S is a one-by-many Tr-simulation, consider any a ∈ A, p, p' ∈

Ω, ξ ∈ Ω such that pSξ and p −a→ p'. By definition of S, p = glue 

i∈I
qi 

for some index set I such that qi ∈ ξ for every i ∈ I. By definitions of glue

and  , there is

p' = glue



a  ' q'

hence
i∈I, qi−→qi
p'S q' ∈ Ω : ∃q ∈ ξ. q −a→ q' ,

This concludes the first part of the proof.
Next, we show that the relation { ⟨p, glue(p)⟩ : p ∈ Ω } is contained in a
Tr-aware relation. Consider S ⊆ Ω × PΩ defined by
pSξ ⇐⇒ glue(p + q) ∈ ξ for some q ∈ Ω.

To show that S is a one-by-many Tr-simulation, consider any a ∈ A, p, p' ∈ Ω, ξ ∈ Ω such that pSξ and p −a→ p'. This means that also p + q −a→ p'. Then, by definition of glue, glue(p + q) −a→ glue(p' + q') for some q' ∈ Ω.
From this it follows that
glue(p' + q') ∈  r' ∈ Ω : ∃r ∈ ξ. r −a→ r' ,


hence
p'S r' ∈ Ω : ∃r ∈ ξ. r −a→ r' ,

and S is a one-by-many simulation, which concludes the proof.	 

Related work
The abstract test suite approach to process equivalence is novel, but several other approaches to the abstract representation of operational equivalences are known. The most popular coalgebraic approach to bisimulation, based on coalgebra spans [1,15], focuses on a single, canonical notion of equivalence for every notion of behaviour. In the case of labelled transition system, this abstract notion specializes to bisimulation equivalence. A few attempts have been made to modify the coalgebra span approach to cover trace equivalence. In [14,16], the underlying category was changed to that of semilattices. In [13], instead, the notion of coalgebra morphism was changed. Both approaches led to the definition of trace equivalence as the (span) bisimulation in an appropriate category.
The approach taken in [13] bears some similarities to the test suite frame- work. In both approaches, the coalgebras modelling transition systems are lifted to another category. However, these liftings seem fundamentally dif- ferent. In [13], the lifting is based on a distributive law of the functor for deterministic behaviour over the powerset monad, thus exploiting the struc- ture of the behaviour endofunctor for LTSs. Also, in the resulting category the coalgebras in question remain unchanged, but the notion of coalgebra mor- phism is changed. In our abstract approach, the structure of the behaviour functor is not used in any obvious way, and indeed we never use the fact that the powerset functor is a monad. Also, in the category of BTr-coalgebras the coalgebra morphisms come from the underlying category of B-coalgebras, but the coalgebras themselves are different (they are equipped with test suites and required to be prefixed points of certain operators).
Our approach has much stronger connections to that of [4,6], where be- haviour endofunctors are canonically lifted to the category Rel of binary re- lations and relation preserving functions, which is fibred over Set. A similar technique was used in [12] in the context of recursively defined domains, where even a counterpart of our operator ΦW was defined. In the test suite approach, behaviour endofunctors are lifted to the category TS, which is also fibred over Set, but has more structure than Rel and thus allows one to represent e.g., trace equivalence. Also, in the test suite approach we resign from the canon- icity of liftings (indeed, arbitrary sets of test constructors can be used), thus allowing one to represent more notions of operational equivalence.
All the abstract approaches mentioned above aim to define abstract notions of particular equivalences, parametrized by the notion of behaviour: bisimula- tion equivalence [15,4], simulation equivalence [6], or trace equivalence [14,13]. Our goal is, in a sense, more modest; we aim at an abstract and general def- inition of a well-behaved process equivalence. This allows us to cover many


more examples than other approaches, but prevents us from formalizing a connection between, e.g., the notions of bisimulation for different notions of behaviour.
Related to modal logics, the test suite approach provides an abstract notion of modal operator as a test suite constructor. It must be investigated how this notion is related to that of natural relation, used to represent modal operators in the coalgebraic logic [10,11].
It must be noted that three equivalences from the van Glabbeek spectrum: possible futures, possible worlds and 2-nested simulation equivalence cannot be described in the test suite framework shown in this paper. This is related to the fact that the modal formulae describing these equivalences cannot be presented by a grammar with only one nonterminal. This problem can be circumvented by choosing a different set of test values instead of 2 (see [7]).

References
P. Aczel and N. Mendler. A final coalgebra theorem. In D. H. Pitt et al., editors, Proc. CTCS’89, volume 389 of LNCS, pages 357–365, 1989.
M. Barr. Terminal coalgebras for endofunctors on sets. Theoretical Computer Science, 114:299– 315, 1993.
R. J. van Glabbeek. The linear time - branching time spectrum I. In J. Bergstra, A. Ponse, and S. Smolka, editors, Handbook of Process Algebra. Elsevier, 1999.
C. Hermida and B. Jacobs. Structural induction and coinduction in a fibrational setting.
Information and Computation, 145(2):107–152, 1998.
B. Jacobs. Categorical Logic and Type Theory. Number 141 in Studies in Logic and the Foundations of Mathematics. North Holland, Amsterdam, 1999.
B. Jacobs and J. Hughes. Simulations in coalgebra. In H. Peter Gumm, editor, Electronic Notes in Theoretical Computer Science, volume 82. Elsevier, 2003.
B. Klin. An abstract approach to process equivalence for well-behaved operational semantics. PhD dissertation, BRICS, Aarhus University, 2004. Forthcoming.
B. Klin and P. Sobocinski. Syntactic formats for free: An abstract approach to process equivalence. In R. Amadio and D. Lugiez, editors, Proc. CONCUR 2003, volume 2671 of LNCS, 2003.
B. Klin and P. Sobocinski. Syntactic formats for free: An abstract approach to process equivalence. BRICS Report RS-03-18, Aarhus University, 2003.
L. Moss. Coalgebraic logic. Annals of Pure and Applied Logic, 96:177–317, 1999.
D. Pattinson. Semantical principles in the modal logic of coalgebras. In Proc. STACS 2001, volume 2010 of LNCS. Springer Verlag, 2001.
A. M. Pitts. A co-induction principle for recursively defined domains. Theoretical Computer Science, 124(2):195–219, 1994.
J. Power and D. Turi. A coalgebraic foundation for linear time semantics. Electronic Notes in Theoretical Computer Science, 29, 1999.


J. Rutten and D. Turi. Initial algebra and final coalgebra semantics for concurrency. In
J. de Bakker et al., editors, Proc. of the REX workshop A Decade of Concurrency – Reflections and Perspectives, volume 803 of LNCS, pages 530–582. Springer-Verlag, 1994.
J. J. M. M. Rutten. Universal coalgebra: a theory of systems. Theoretical Computer Science, 249:3–80, 2000.
D. Turi. Categorical modeling of structural operational rules: case studies. In Proc. CTCS’97, volume 1290 of LNCS, pages 127–146. Springer-Verlag, 1997.
D. Turi and G. Plotkin. Towards a mathematical operational semantics. In Proceedings 12th Ann. IEEE Symp. on Logic in Computer Science, LICS’97, Warsaw, Poland, 29 June – 2 July 1997, pages 280–291. IEEE Computer Society Press, 1997.
