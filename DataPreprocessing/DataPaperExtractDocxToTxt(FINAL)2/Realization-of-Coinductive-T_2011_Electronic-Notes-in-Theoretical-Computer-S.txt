Available online at www.sciencedirect.com



Electronic Notes in Theoretical Computer Science 276 (2011) 237–246
www.elsevier.com/locate/entcs
Realization of Coinductive Types
Dexter Kozen1,2
Department of Computer Science Cornell University
Ithaca, New York 14853–7501, USA

Abstract
We give an explicit combinatorial construction of final coalgebras for a modest generalization of polynomial functors on Set. Type signatures are modeled as directed multigraphs instead of endofunctors. The final coalgebra for a type signature F involves the notion of Brzozowski derivative on sets of paths in F .
Keywords: coalgebra, coinduction, recursive types, Brzozowski derivative


Introduction
Final F -coalgebras for endofunctors F on Set are useful in defining semantics of coinductive datatypes. The existence of final coalgebras under very general condi- tions has been studied in several papers [1,2,3,4,5,7,11,12,14,15,16]. These studies are mostly undertaken from an abstract categorical viewpoint, typically involving inverse limits, Cauchy completions, or bisimulation quotients of large coproducts. Aside from a few specific examples [7,11], general concrete constructions seem to be lacking. It is stated in [2] that “it is well-known that a final coalgebra. . . can be described as the coalgebra of all properly labelled ordered trees,” but this informal statement is not completely accurate without further qualification; at any rate, its informality contrasts sharply with the formality of the ensuing abstract develop- ment. An accessible concrete construction would be of use to anyone interested in formal semantics and logics for reasoning about coinductive datatypes.
Of lesser concern, but still an issue, is that the traditional representation of type signatures as polynomial functors on Set is not always adequate the case of

1 Thanks to Jean-Baptiste Jeannin, Bobby Kleinberg, Alexandra Silva, Navin Sivakumar, and the anony- mous reviewers for insightful comments.
2 Email: kozen@cs.cornell.edu

1571-0661 © 2011 Elsevier B.V. Open access under CC BY-NC-ND license.
doi:10.1016/j.entcs.2011.09.024

mutually recursively defined types; and even when it is, it can introduce undesirable asymmetries.
Ordinary deterministic finite automata over an alphabet Σ form a family of coalgebras of a particularly simple form [11,13]. Final coalgebras of this type can be constructed explicitly in terms of the Brzozowski derivative



for A ⊆ Σ∗ and a ∈ Σ.
Da(A)= {x | ax ∈ A}	(1)

In this paper we give an explicit Brzozowski-like construction of final coalgebras for type signatures corresponding to polynomial functors on SetV , where V is a set of sorts. However, instead of functors, we represent type signatures as directed multigraphs with nodes designated as either existential or universal.
This representation has a number of advantages. Normally, polynomial functors on Set are built from product, coproduct, total and partial functions from a fixed set, constant functors, and compositions thereof; but all these can be modeled with existential and universal nodes. Many of the abstract constructions impose finiteness conditions to ensure continuity, but we require no such restrictions. Most importantly, the multigraph provides a platform for a definition of a Brzozowski derivative on sets of paths.
Brzozowski Derivatives
Before proceeding with the construction in §3, it is instructive to review the role of the Brzozowski derivative [6] in the construction of final coalgebras for ordinary deterministic finite automata. Classically, a deterministic finite automaton (DFA) over an alphabet Σ consists of a finite set of states S, a transition function δ : S → Σ → S, a start state, and a set of accepting states F ⊆ S.
As observed in [11,13], ignoring the start state, a DFA is just a coalgebra for the polynomial endofunctor (Σ → −) × . In general, a coalgebra of this signature consists of a set of states S (not necessarily finite) and a structure map α : S → (Σ → S) × . The value α(s) is a pair in (Σ → S) × , of which the first component determines the transition function δ and the second determines whether s ∈ F .
Now associate with every state s the set of strings L(s) that would be accepted by the automaton were s the start state. The map L satisfies the two properties:
If t = δ(s)(a), then L(t)= Da(L(s)), where Da(A) is the Brzozowski derivative of A with respect to a ∈ Σ as defined in (1). That is, the string ax is accepted starting from the state s iff the string x is accepted starting from the state δ(s)(a).
The null string ε ∈ L(s) iff s is an accept state.
Essentially, the subsets of Σ∗, along with the Brzozowski derivatives Da and a function E determining whether ε ∈ A, form the final coalgebra for this signature, and L is the unique coalgebra homomorphism from the DFA to this final coalgebra. Formally, the transition function and accept states of the final coalgebra are given

a	b	a	b





L

(a + b(ab∗a)∗b)∗	(ba∗b + ab∗a)∗ba∗	b∗a(ba∗b + ab∗a)∗ba∗
			
Da	Db	Da	Db

Fig. 1. An automaton and its image in the final coalgebra. Final states (shown a darker color) map to sets containing ε. Transitions in the automaton correspond to derivatives in the final coalgebra.
by
D(A)(a)= D (A)	E(A)= (1	if ε ∈ A
0	if ε /∈ A.
The relevant property that makes L a coalgebra homomorphism is that it commutes with the structure maps of the two coalgebras. This is the content of properties (i) and (ii) above. An example is illustrated in Fig. 1.
The Brzozowski derivatives Da and the homomorphism E can be defined syn- tactically on regular expressions:
Da(e1 + e2)= Da(e1)+ Da(e2)	E(e1 + e2)= E(e1)+ E(e2)
Da(e1e2)= Da(e1)e2 + E(e1)Da(e2)	E(e1e2)= E(e1)E(e2)
Da(e∗)= Da(e) e∗	E(e∗)=1 

D (b)= (1	if a = b, a, b ∈ Σ
E(b)= 0, b ∈ Σ

0	if a /= b, a, b ∈ Σ
Da(1) = 0	E(1) = 1
Da(0) = 0	E(0) = 0.
This is a key ingredient of Kleene’s theorem establishing the equivalence of finite automata and regular expressions [6]; see [13] for a thorough exposition.
Main Results
Directed Multigraphs
A directed multigraph is a structure G = (V, E, src, tgt) with nodes V , edges E, and two maps src, tgt : E → V giving the source and target of each edge, respectively. We write e : s → t if s = src e and t = tgt e. When specifying multigraphs, we

will sometimes use the notation s →n
edges from s to t.”
t for the metastatement, “There are exactly n




Fig. 2. A multigraph representing a single-sorted algebraic signature. Blue diamonds represent existential nodes and red squares universal nodes.

A path is a finite alternating sequence of nodes and edges
s0 e0 s1 e1 s2 ··· sn−1 en−1 sn,

n ≥ 0, such that ei : si → si+1, 0 ≤ i ≤ n − 1. These are the arrows of the free category generated by G. The length of a path is the number of edges. A path of length 0 is just a single node. The first and last nodes of a path p are denoted src p and tgt p, respectively. As with edges, we write p : s → t if s = src p and t = tgt p.
A multigraph homomorphism l : G1 → G2 is a map l : V1 → V2, l : E1 → E2 such that if e : s → t then l(e) : l(s) → l(t). This lifts to a functor on the free categories generated by G1 and G2.

Type Signatures
A type signature is a directed multigraph F along with a designation of each node of F as either existential or universal. The existential and universal nodes correspond respectively to coproduct and product constructors. The directed edges of the graph represent the corresponding destructors.
For example, consider an algebraic signature consisting of a binary function symbol f , a unary function symbol g, and a constant c. This would ordinarily be represented by the polynomial endofunctor F = −2 + − +  , or in OCaml by
type t = F of t * t | G of t | C
We would represent this signature by a directed multigraph consisting of four nodes
{t, f, g, c}, of which t is existential and f, g, c are universal, along with edges


t →1
f	t →1
g	t →1
c	f →2
t	g →1 t.

The multigraph is illustrated in Fig. 2.
Here is a more involved example from [8]. In that paper, the state of a com- putation of a higher-order language with closures is defined in terms of a recursive type definition
Val = Const + Cl	values
Cl = λ-Abs × Env	closures
Env = Var ~ Val	closure environments


Val



Const	Cl
Val = Const + Cl Cl = λ-Abs × Env Env = Var ~ Val


λ-Abs	Env




B1	B2	B3	···	Bn

Bi ⊆ Var

Fig. 3. A multigraph representing a multisorted signature.

where Const is a fixed set of constants, λ-Abs is a fixed set of λ-abstractions, and Var is a fixed set of variables (the exact nature of these sets is not important). The set of values is a solution to the recursive equation
Val = Const + (λ-Abs × (Var ~ Val)),

which would ordinarily be modeled by an endofunctor
F = Const + (λ-Abs × (Var ~ −)) on Set. In OCaml, we might write
type value = Const of int | Closure of closure and closure = labs * env
and env = var -> value
We model this type signature by a multigraph with existential nodes Val, Const, λ-Abs, and Env and universal nodes Cl,  , and a node for each B ⊆ Var. The edges are


Val →1 Cl →1 Const →c Env →1
Const	Val →1
λ-Abs	Cl →1
 , c = |Const|	λ-Abs →d B, B ⊆ Var		B →b
Cl Env
 , d = |λ-Abs|
Val, b = |B|


Note that we regard a partial function Var ~ Val on the fixed set Var as a dependent coproduct  B⊆Var ValB. This is modeled by an existential node to select the domain B ⊆ Var, followed by a universal node to select the value of the function ValB on that domain. The multigraph is illustrated in Fig. 3.

Coalgebras and Realizations
Let F be a type signature with nodes VF . An F-coalgebra is a VF -indexed collection of pairs (As, αs), where the As are sets and the αs are set functions


αs : As
→	src e=s Atgt e,	if s is existential,
src e=s Atgt e,	if s is universal.

A morphism of F -coalgebras is a VF -indexed collection of set maps hs that commute with the αs in the usual way. This corresponds to the traditional definition of an F -coalgebra for an endofunctor F on SetV .
Coalgebras are equivalent to realizations. An F-realization is a directed multi- graph G along with a multigraph homomorphism l : G → F , called a typing, with the following properties.
If l(u) is existential, then there is exactly one edge of G with source u.
If l(u) is universal, then l is a bijection between the edges of G with source u and the edges of F with source l(u).
A homomorphism of F -realizations is a multigraph homomorphism that commutes with the typings.
Theorem 3.1 The categories of F-coalgebras and F-realizations are equivalent (in the sense of [10, §IV.4]).
Proof. We must exhibit a pair of functors between F -coalgebras and F -realizations, one in each direction, and show that they are inverses up to natural isomorphisms. We first construct a coalgebra from a given realization G with nodes VG and typing l : G → F . For each node s of F , let As = {u ∈ VG | l(u)= s} and define
αs as follows:
If s is existential and u ∈ As, let d : u → v be the unique edge in G with src d = u, let e = l(d), and let t = l(v) = tgt e. Define αs(u) = ine(v), where ine : At →	Atgt e is the natural injection into the coproduct.
If s is universal and u ∈ As, let αs(u) ∈  src e=s Atgt e be the unique element of the product such that for any edge d : u → v with src d = u, if e = l(d) and t = l(v)= tgt e, then πe(αs(u)) = v, where πe :  src e=s Atgt e → At is the natural projection from the product.
Conversely, given an F -coalgebra with data (As, αs), we can construct a real- ization. The nodes of the realization are elements of the coproduct
Σ As =   {ins(u) | u ∈ As}	(2)

with l(ins(u)) = s for u ∈ As. If u ∈ As and s is existential, then αs(u)= ine(v) ∈ src e=s Atgt e for some e : s → t and v ∈ At. Add an edge ⟨u, e⟩ to the realization with ⟨u, e⟩ : ins(u) → int(v) and l(⟨u, e⟩) = e. If u ∈ As and s is universal, then

αs(u) ∈  src e=s Atgt e. For each e : s → t, let ve = πe(αs(u)) ∈ At. Add an edge
⟨u, e⟩ to the realization with ⟨u, e⟩ : ins(u) → int(ve) and l(⟨u, e⟩)= e.
In this construction, we may take the edge ⟨u, e⟩ to be the ordered pair (u, e). Because u and e determine v, s, and t uniquely, each such ordered pair appears at most once as an edge ⟨u, e⟩, so there is no danger of duplication.
To finish the proof, we must verify that these two constructions are inverses up to natural isomorphisms. Given a realization G with typing l : G → F , applying the first construction followed by the second yields a realization naturally isomorphic to G via an isomorphism that maps the node u to inl(u)(u) and the edge d to
⟨src d, l(d)⟩. It is easily checked that the maps are bijections on nodes and edges,
preserve adjacency, and commute with the typing maps.
Similarly, given a coalgebra with data (As, αs), performing the second construc- tion followed by the first yields a coalgebra with data

j = {ins(u) | u ∈ As}


αj : Aj
→ (Σsrc e=s
j
tgt e
if s is existential,

s	s
src e=s
j
tgt e
if s is universal.


If s is existential, then αj (ins(u)) = ine(int(v)), where αs(u)= ine(v) and t = tgt e. If s is universal, then πe(αj (ins(u))) = int(v), where πe(αs(u)) = v and t = tgt e. It is routine to verify that the two coalgebras are naturally isomorphic via the isomorphism with components ins : As → Aj .
Note that the Aj are always pairwise disjoint, whereas the As may not be.
However, this does not preclude isomorphism, because a morphism in the category of F -coalgebras consists of a collection of set maps indexed by nodes of F , which may take different values on the same element.	2


Final Coalgebras
Realizations allow us to give a concrete construction of final coalgebras that is reminiscent of the Brzozowski derivative on sets of strings (1). Here, instead of strings, the derivative acts on certain sets of paths of the type signature.
Let F be a type signature. Construct a realization RF , lF as follows. A node of
RF is a set A of finite paths in F such that
A is nonempty and prefix-closed;
all paths in A have the same first node, which we define to be lF (A);
if p is a path in A of length n and tgt p is existential, then there is exactly one path of length n +1 in A extending p;
if p is a path in A of length n and tgt p is universal, then all paths of length
n + 1 extending p are in A.
The edges of RF are defined as follows. Let A be a set of paths in F and e an edge




Fig. 4. A multisorted signature.
of F . Define the Brzozowski derivative of A with respect to e to be
De(A)= {p | (src e) ep ∈ A},
the set of paths obtained by removing the initial edge e from paths in A that start with that edge. If A is a node of RF and De(A) is nonempty, we include exactly one edge
⟨A, e⟩ : A → De(A)
in RF and take lF (⟨A, e⟩)= e. It is readily verified that tgt ⟨A, e⟩ = De(A) satisfies properties (i)–(iv) and that lF (De(A)) = tgt e, so lF is a typing.
Theorem 3.2 The realization RF , lF is ﬁnal in the category of F-realizations. The corresponding F-coalgebra as constructed in Theorem 3.1 is ﬁnal in the category of F-coalgebras.
Proof. Let G, l be an arbitrary realization. The unique homomorphism h : G, l → RF , lF is given by: h(s) is the set of paths in F that are images under l of paths in G starting with node s.
The second statement of the theorem follows from the equivalence of the two categories (Theorem 3.1).	2
Discussion
Multisorted Signatures and Asymmetry
In the introduction, we mentioned that polynomial endofunctors on Set do not appear to be adequate for modeling some coinductive types that deserve to be re- garded as polynomial types. We also mentioned that they can introduce undesirable asymmetries. For example, it is not clear how to model the mutually dependent coinductive types
type s = C of s * t and t = D of s * t
using an endofunctor on Set; it appears that Set2 is required. The multigraph corresponding to this signature is illustrated in Fig. 4.
Endofunctors on Set are adequate in the single-sorted case. They are also ade- quate in the multisorted example
Val = Const + Cl	Cl = λ-Abs × Env	Env = Var ~ Val

of §3.2 because there is a node that meets all cycles; in fact, there are three such nodes. However, we must still choose where to break the cycle, and this is the undesirable asymmetry. In this case, we could choose any of the three options

FVal = Const + (λ-Abs × (Var ~ −)) FCl = λ-Abs × (Var ~ (Const + −)) FEnv = Var ~ (Const + (λ-Abs × −)),

but then we would be left with the task of proving that the choice does not matter.
We conjecture that endofunctors on Set are adequate exactly when there exists a set of nodes A of the type signature such that every cycle contains exactly one node of A.


Final Coalgebras as Labeled Trees
In this section, we wish to expand on the statement of Ad´amek [2] that “a final coalgebra. . . can be described as the coalgebra of all properly labelled ordered trees” and draw a relationship to the Brzozowski construction of §3.4. In that paper and [3], one finds an explicit tree-like construction for a single-sorted polynomial signature such as the one illustrated in Fig. 2. Worrell [16] gives a construction for unordered trees.
A subtlety arises when one tries to define labeled trees formally. The issue is how to define the nodes and edges so that one obtains unique representatives in the final coalgebra. For traditional algebraic signatures involving n-ary functions f : An → A, one can define the nodes of the tree as a prefix-closed, nonempty subset of ω∗ such that if α is a node, then αi is a node for all 0 ≤ i < n, where n is the arity of the node’s label. This construction appears for example in [3,9]. However, it is not immediately clear what to do for unordered trees or more general type signatures. In [16], it is stated that “We consider trees that are isomorphic as directed graphs. . . to be identical,” thus trees are isomorphism classes. But of what?
Thinking about this issue leads naturally to idea of type signatures as directed multigraphs F . This allows us to construct labeled trees whose nodes are paths in
F . Instead of natural numbers, the children of a node are indexed by the edges of
F .
To characterize the elements of the final coalgebra as labeled trees, we can start from the final realization RF , lF constructed in §3.4. Each node A of RF corresponds to a labeled tree τ (A) as follows. The root of τ (A) is lF (A). The nodes of τ (A) are the elements of A, which are paths in F . There is an edge in τ (A) from p to q if p is a prefix of q and their lengths differ by one. The labeling function labels a path p with its final node tgt p. In this construction, τ (De(A)) is the eth maximal proper subtree of τ (A).

References
Aczel, P. and P. Mendler, A final coalgebra theorem, in: Category Theory and Computer Science, Lecture Notes in Computer Science 389, Springer, 1989 pp. 357–365.
Ad´amek, J., On final coalgebras of continuous functors, Theor. Comput. Sci. 294 (2003), pp. 3–29.
Ad´amek, J. and V. Koubek, On the greatest fixed point of a set functor, Theor. Comput. Sci. 150
(1995), pp. 57–75.
America, P. and J. Rutten, Solving reflexive domain equations in a category of complete metric spaces,
J. Comput. Syst. Sci. 39 (1989), pp. 343–375.
Barr, M., Terminal coalgebras in well-founded set theory, Theor. Comput. Sci. 114 (1993), pp. 299–315.
Brzozowski, J. A., Derivatives of regular expressions, J. Assoc. Comput. Mach. 11 (1964), pp. 481–494.
Hausmann, D., “Data Types and Computability via Final Coalgebras,” Ph.D. thesis, Dresden University (2004).
Jeannin, J.-B. and D. Kozen, Computing with capsules, Technical Report http://hdl.handle.net/ 1813/22082, Computing and Information Science, Cornell University (2011).
Kozen, D., J. Palsberg and M. I. Schwartzbach, Efficient recursive subtyping, Mathematical Structures in Computer Science 5 (1995), pp. 113–125.
MacLane, S., “Categories for the Working Mathematician,” Springer-Verlag, New York, 1971.
Rutten, J., Universal coalgebra: a theory of systems, Theor. Comput. Sci. 249 (2000), pp. 3–80.
Santocanale, L., Logical construction of final coalgebras, in: H. P. Gumm, editor, Proc. Workshop on Coalgebraic Methods in Computer Science, Warsaw, Poland, Electronic Notes in Theoretical Computer Science 82 (2003), pp. 1–20.
Silva, A., “Kleene Coalgebra,” Ph.D. thesis, University of Nijmegen (2010).
Smyth, M. B. and G. D. Plotkin, The category-theoretic solution of recursive domain equations, SIAM
J. Comput. 11 (1982), pp. 761–783.
Worrell, J., Coinduction for recursive data types: partial orders, metric spaces and Ω-categories., Electr. Notes in Theor. Comput. Sci. 33 (2000), pp. 337–356.
Worrell, J., On the final sequence of a finitary set functor, Theor. Comput. Sci. 338 (2005), pp. 184–199.
