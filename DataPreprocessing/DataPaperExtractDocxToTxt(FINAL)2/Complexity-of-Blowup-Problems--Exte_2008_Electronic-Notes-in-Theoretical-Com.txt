

Electronic Notes in Theoretical Computer Science 221 (2008) 219–230
www.elsevier.com/locate/entcs
Complexity of Blowup Problems – Extended Abstract –
Robert Rettinger1
Department of Mathematics and Computer Science University of Hagen
Germany
Klaus Weihrauch2
Department of Mathematics and Computer Science University of Hagen, Germany

Ning Zhong3
Department of Mathematical Sciences University of Cincinnati, USA


Abstract
Consider the initial value problem of the first-order ordinary differential equation
d
x(t)= f (t, x(t)),  x(t0)= x0
dt

where the locally Lipschitz continuous function f : Rl+1 → Rl with open domain and the initial datum (t0, x0) ∈ Rl+1 are given. It is shown that the solution operator producing the maximal “time” interval
of existence and the solution on it is computable. Furthermore, the complexity of the blowup problem is studied for functions f defined on the whole space. For each such function f the set Z of initial conditions (t0, x0) for which the positive solution does not blow up in finite time is a Gδ-set. There is even a computable operator determining Z from f . For l ≥ 2 this upper Gδ-complexity bound is sharp. For l = 1 the blowup problem is simpler.
Keywords: Type-2 theory, differential equation, blowup.


1 Email: Robert.Rettinger@FernUni-Hagen.de
2 Email: Klaus.Weihrauch@FernUni-Hagen.de
3 Email: Ning.Zhong@uc.edu

1571-0661 © 2008 Elsevier B.V. Open access under CC BY-NC-ND license.
doi:10.1016/j.entcs.2008.12.019

Indroduction
Consider an initial value problem of obtaining solutions x(t) to the first-order ODE (ordinary differential equation)


dt
⎩ x(t0)= x0
(1)


where the initial datum (t0, x0) ∈ E ⊆ Rl+1 and the (generally nonlinear) function f : E → Rl are given. In this initial-value problem, x is usually referred to as the space variable and t the time variable. If f is continuous on E and locally Lipschitz continuous in space variable x, then the problem (1) has a unique solution on a maximal time interval (α, β). This result is commonly referred to as Picard- Lindelo¨f existence and uniqueness theorem. Various versions of the computable Picard-Lindelo¨f theorem have been studied by several authors, including Aberth [1,2], Bishop and Bridges [5], Gra¸ca, Zhong and Buescu [11], Ko [15], Pour-El and Richards [19]. In this paper, we present a fully uniform version of the Picard- Lindelo¨f theorem.
The Picard-Lindelo¨f theorem gives a very satisfactory local theory for the exis- tence and uniqueness of solutions to the ODE (1) for locally Lipschitz continuous
f . However, there remains a difficult issue: Whether the corresponding maximal interval of existence (α, β) is bounded or not for any given initial datum. When β or/and α is finite, the solution x(t) will blow up in finite time in the sense that
||x(t)|| approaches to infinity as t → β− or t → α+. In general, it is difficult to predict whether or not a solution will blow up for a given initial datum, because it often requires extra knowledge on some quantitative estimates and asymptotics of the solution over long period of time, such as whether the solution satisfies a certain “coercive” conservation law. Indeed, it is shown recently in [11] and [7] that the blowup problem cannot be solved by any algorithm.
In this paper, we study the complexity of the blowup problem for functions f defined on the whole space. We shall use the notation CBUf to denote the set of all initial data at which the solutions to the initial-value problem (1) are global (no blowup). The complement of CBUf , denoted as BUf , is then the set of all initial data for which the solutions blow up. We show that the set CBUf is a Gδ set,
i.e a countable intersection of open sets, and there is an algorithm that computes CBUf from f . Thus the blowup set BUf has Fσ as an upper complexity bound. Moreover, for every computable Gδ-set G of Rl−1 with l ≥ 2, we show that there exists a computable and effectively locally Lipschitz function f : Rl → Rl such that the solution to the problem “x'(t)= f (x(t), x(0) = (x0, 0)” is global if and only if x0 ∈ G. In other words, the Gδ-complexity for CBUf is sharp. It follows that the Fσ-complexity is sharp for the blowup sets.
The paper is organized as follows. Section 2 introduces necessary concepts and results from computable analysis. Section 3 presents a fully uniform version of the computable Picard-Lindel¨of theorem. Section 4 contains the theorems on the com-

plexity of the blowup problem. We omit most of the proofs of Section 3. Detailed proofs can be found in the full version of this paper.

Preliminaries
For studying computability in analysis, in this article we use the representation approach also called type-2 theory of effectivity (TTE) [23]. In this theory com- putability on finite or infinite sequences, Σ∗ or Σω , respectively, over a finite al- phabet Σ is defined explicitly by type-2 machines, which are Turing machines with finite or infinite one-way input and output tapes. The elements of Σ∗ or Σω are used as “names” of natural, rational or real numbers, of open sets, continuous functions and so on. A representation of a set M is a surjective partial function δ : ⊆Y → M (Y ∈ {Σ∗, Σω}), where p is called a δ-name or a name of x ∈ M if δ(p) = x. (In [23] representations δ : ⊆ Σ∗ → M are called notations.) A function on represented spaces is computable, if it can be realized by a computable function on the names.
We also use the more general multi-representations δ : Y ⇒ M , where p ∈ Y is considered as a name of each x ∈ δ(p) and multi-functions f : M ⇒ M' on represented sets, where y ∈ f (x) can be interpreted as “y is an acceptable result on input x”. For multi-representations γ : Y ⇒ M and γ' : Y ' ⇒ M', a function h : ⊆ Y → Y ' realizes a multi-function f : M ⇒ M', if h(p) is a γ'-name of some y ∈ f (x) whenever p ∈ Σω is a γ-name of x (see Figure 1). We call the multi-function f (γ, γ')-computable (-continuous), if it has a computable (continuous) realization [24,25].

p .	h
/\
/ \
).h(p)
/\
/ \

γ /  \\1
/r vcccs
/  \\1γ'
/r
v

x.czzzzf
).
y ∈ f (x) ∩ γ'
h(p)

Fig. 1. h(p) is a name of some y ∈ f (x), if p is a name of x ∈ dom(f ).

The extension to multi-functions f : M1 × ... × Mk ⇒ M' is straightforward. For multi-representations γ : Y ⇒ M and γ' : Y ' ⇒ M', γ ≤ γ' (γ is reducible to γ'), if here is a computable function h : ⊆Y → Y ' such that γ(p)⊆γ' ◦ h(p) for all p ∈ dom(γ). The representations are equivalent, if they are reducible to each other. Equivalent representations induce the same computability and relative continuity on the represented set.
If multi-functions on represented sets have realizations, then their composition is realized by the composition of the realizations. Therefore, the computable multi- functions on represented sets are closed under composition. Much more generally, the computable multi-functions on represented sets are closed under flowchart pro- gramming with indirect addressing [24,25]. We will apply this result repeatedly, which allows convenient informal constructions of new computable functions on multi-represented sets from given ones.

Let γ : Y ⇒ M and γ' : Y ' ⇒ M' be multi-representations. By means of computable standard pairing and tupling functions on Σ∗ and Σω , all of which we denote by ⟨⟩ [23], multi-representations of products can be defined: [γ, γ']⟨y, y'⟩ := γ(y) × γ'(y') and γω⟨y0, y1,.. .⟩ := γ(y0) × γ(y1) × ... .
In [25] a multi-representation [γ ⇒ γ'] of the (γ, γ')-continuous multi-functions f : M ⇒ M' is defined by f ∈ [γ ⇒ γ'](p), if ηp realizes f (ηp = h in Figure 1). Here η is the canonical representation of the continuous functions h : ⊆Y → Y ' with open domain (for Y ' = Σ∗) or Gδ-domain (for Y ' = Σω ) [23]. Its restrictions to the partial functions and total functions are called [γ →p γ'] and [γ → γ'], respectively.
Let γ0 : ⊆ Y0 ⇒ M0 be another multi-representation. For a multi-function f : M0 × M ⇒ M' define Tf (x)(y) := f (x, y). Then T is ([[γ0, γ] ⇒ γ'], [γ0 → [γ ⇒ γ'])-computable and its inverse is ([γ0 → [γ ⇒ γ'], [[γ0, γ] ⇒ γ'])-computable. As corollaries,
f is (γ0, γ, γ')-computable ⇐⇒ Tf is (γ0, [γ ⇒ γ'])-computable,    (2)
and for every multi-representation δ of multi-functions h : M ⇒ M', the evaluation (h, x) |⇒ h(x) is (δ, γ, γ')-computable, iff δ ≤ [γ ⇒ γ'] [25] (cf. the special case for single-valued representations and total functions [23, Theorem 3.3.15]).
Let νN and νQ be standard notations of the natural numbers and the rational numbers, respectively. For single-valued representations γ : ⊆Y → M , γω ≡ [νN → γ] (representation of sequences on M ).
On the space Rn we use the maximum norm
 (x1,..., xn)  := max{|x1|,..., |xn|}.

For x ∈ Rn and r > 0 let B(x, r) := {y ∈ Rn |  x − y  < r} be the open ball or cube with center x and radius r. Let In be a natural notation of the set of all rational open balls RBn := {B(x, r) | x ∈ Qn,  r ∈ Q,  r > 0} in Rn. Let ρn : ⊆ Σω → Rn be the representation defined by ρn(p) = x, iff p is a list of all open balls J ∈ RBn (encoded by In) such that x ∈ J . Then ρ := ρ1 is equivalent to the Cauchy representation of the real numbers [23]. For the extended real line R = R ∪ {−∞, ∞}, the “lower representation” ρ< : Σω → R and the “upper representation” ρ> : Σω → R are defined by ρ<(p) = sup{r ∈ Q | r is listed by q}. and ρ<(p)= inf{r ∈ Q | r is listed by q}.
For the set O(Rn) of open subsets and the set Gδ(Rn) of the Gδ-subsets (the countable intersections of open subsets) of Rn we use the representations θn and δn defined by θ(p) = U , iff p is a list J0, J1,... of open balls from RBn (encoded by In) such that U =  i Ji and δn ⟨p0, p1,.. .⟩ =  j θn(pj) [23,22]. The θn-computable
sets are called r.e.-open.
For the space CP(Rm, Rn) of the partial (topologically) continuous functions f : ⊆ Rm → Rn, we use the multi-representation δm,n defined as follows: f ∈ δm,n(p) iff p is (encodes) a list (Ji, Ki)i∈N, (Ji ∈ RBm, Ki ∈ RBn), such that
f−1L = dom(f ) ∩  {Ji | Ki = L}  for all L ∈ RBn .	(3) This representation is equivalent to [ρm →p ρn] [10]. Therefore by (2), evaluation

(f, x) '→ f (x) is (δm,n, ρm, ρn)-computable.
If the representations of the sets under consideration are fixed, we will simply say “computable” instead of “(γ, δ)-computable” etc.

The Solution Operator Is Computable
By the Picard-Lindelo¨f theorem unique local solutions of the initial value problem
exist. The following version is from [12] slightly adjusted for our purposes. For f : ⊆ R × Rl → Rl and Z⊆dom(f ) we will call M ∈ R an upper bound of f on Z if f (z)  ≤ M for all z ∈ Z, and we will call L ∈ R a Lipschitz constant of f on Z, if f (t, x) − f (t, y)  ≤ L  x − y  for all (t, x), (t, y) ∈ Z. 

Theorem 3.1 [Picard-Lindelo¨f ] Let f : B((t0, x0), r) → Rl, t0 ∈ R, x0 ∈ Rl, 0 < r ≤ 1, be continuous. Let L > 0 be a Lipschitz constant and let M ≥ 1 be an upper bound of f (on dom(f )). Then the initial value problem (1) has a unique solution h on [t0 − b; t0 + b] for b = min(r/M, 1/(2L)) (see Figure 2).

position


Fig. 2. A local solution h of the initial value problem (1).

We outline a classical proof [12], which already shows a way how to “compute” the local solution. Let C(J ) be the Banach space of continuous functions f : J → Rl, J := [t0−b; t0+b], with maximum norm  ∞. Then C0 := {g ∈ C(J ) | g(t)−x0  ≤ r for all t ∈ J} is a closed subset of C(J ) and the operator A : C(J ) → C(J ), defined by

A(g)(t) := x0 +
t
f (τ, g(τ )) dτ ,	(4)
t0

maps C0 into itself and is contracting on C0, that is, A(g1) − A(g2)  ∞ ≤ 1 g1 −
g2  ∞ for g1, g2 ∈ C0. By the Banach fixed point theorem the operator A has a unique fixed point, and this function is the local solution h : [t0 − b; t0 + b] → Rl of our initial value problem [12]. The sequence h0, h1,... ∈ C0 defined by h0(t) := x0, hn+1 := A(hn), converges to the fixed point h of the operator A. Since h1 −h0  ∞ ≤ r ≤ 1, hn+1 − hn  ∞ ≤ 2−n, and therefore, hk − hn  ∞ ≤ 2−n+1 for k > n and
 h − hn  ∞ = h − An(g0)  ∞ ≤ 2−n+1 .	(5)
Effectivizing this idea we get a fully uniform computable version of the Picard- Lindelo¨f theorem. For convenience we consider only positive integer bounds L and M .

Lemma 3.2 [Computable Picard-Lindelo¨f ] There is a (δl+1,l, ρ, ρl, δ1,l)-computable operator T : (f, t0, x0) '→ h mapping each continuous function f : ⊆ R × Rl → Rl, each t0 ∈ R and each x0 ∈ Rl to some h : ⊆ R → Rl such that the restriction of h to the interval [t0 − b ; t0 + b] is a local solution of (1), if for some r, 0 < r ≤ 1, and some natural numbers M, L ≥ 1,

B((t0, x0), r)⊆dom(f ),
L is a Lipschitz constant and M is an upper bound of f on B((t0, x0), r),
b = min(r/M, 1/(2L)).
In the following we will compute the global solution of the initial value problem
(1) for locally Lipschitz bounded continuous functions f : ⊆ R × Rl → Rl with open domain. Let h0 be the local solution computed in Lemma 3.2 with initial point (t0, x0). Since t1 := t0 + b ∈ dom(f ) we can extend the partial solution h0 by a partial solution h1 obtained by Lemma 3.2 with initial point (t1, x1) for x1 := h0(t1). This process can be iterated. For each of the points (ti, xi) ∈ dom(f ) we need a neighbourhood ball with Lipschitz constant Li and upper bound Mi. We consider a representation δ such that a name of a function f contains data for evaluation (a δl+1,l-name) and information about its open domain and local Lipschitz data. Local upper bounds M can be computed from these data (Lemma 3.4).

Definition 3.3 Deﬁne a representation δ of the locally Lipschitz bounded contin- uous functions f : ⊆ R × Rl → Rl with open domain as follows: f ∈ δ⟨p, q⟩, iff f ∈ δl+1,l(p) and q ∈ Σω is (a code of) a sequence ((B0, L0), (B1, L1),.. .), such that Bi ∈ RBl+1, Li ∈ N, Bi⊆dom(f ) and Li is a Lipschitz constant of f on Bi for all i ∈ N, and dom(f )= i∈N Bi.
	
Obviously, δ ≤ δl+1,l, hence evaluation (f, z) '→ f (z) is (δ, ρl+1, ρl)-comput- able. For applying Lemma 3.2 to (t0, x0) ∈ dom(f ) we want to find a radius r' and constants L, M from the input data such that B((t0, x0), r')⊆dom(f ) and L is a Lipschitz constant and M is an upper bound of f on this closed ball. Since the sequence (Bi, Li)i is not suitable for this purpose, we introduce an-
other representation δ˜ that is equivalent to δ. Let B(x, r)/4 := B(x, r/4). Sup-
pose, L is a Lipschitz constant and M is an upper bound of f on B⊆dom(f ). If (t0, x0) ∈ B/4 then L is a Lipschitz constant and M is an upper bound of f also on B((t0, x0), r/4) ∈ dom(f ). Therefore, a name of the new representation should also contain an upper bound of f on Bi⊆dom(f ) for each i and should satisfy the stronger condition dom(f )= i∈N Bi/4.
Lemma 3.4 Deﬁne a representation δ˜ of the locally Lipschitz bounded continuous functions f : ⊆ R×Rl → Rl with open domain as follows: f ∈ δ⟨p, q⟩, iff f ∈ δl+1,l(p) and q ∈ Σω is (a code of) a sequence ((C0, K0, M0), (C1, K1, M1),.. .) of triples such that for all i, Ci ∈ RBl+1 has radius ≤ 1, Ci⊆dom(f ), Ki, Mi ∈ N \ {0}, and Ki is a Lipschitz constant and Mi is an upper bound of f on Ci, and such that
dom(f )=  i Ci/4.  Then δ ≡ δ˜.
In the following lemma, we consider the behaviour of the global solution for for
t ≥ t0. The case t ≤ t0 can be analysed similarly. Let T be the operator from

Lemma 3.2 for computing local solutions.
Lemma 3.5 Let f ∈ δ˜⟨p, q⟩ where q is a name of the list (Ci, Ki, Mi)i∈N. Let h be the global solution for the initial condition (t0, x0) and suppose t0 < t. Then h(t) exists for t0 ≤ t ≤ t, if, and only if, there are n ≥ 0 and triples (Dk, Lk, Nk) (k ≤ n) such that
(D0, L0, N0),..., (Dn, Ln, Nn) ∈ {(Ci, Ki, Mi) | i ∈ N} ,	(6)
(∀k ≤ n) (tk, xk) ∈ Dk/4 and	(7)
t < tn+1	(8)
where the (tk, xk), 1 ≤ k ≤ n + 1, are determined as follows:
B(a ,r )= D ,	d  = min  rk  ,  1  ,	(9)
tk+1 = tk + dk,	xk+1 = T (f, tk, xk)(tk+1).	(10)
By applying the above result we are now able to prove the following main result of this section.
Theorem 3.6 (i) The solution operator S : (f, t0, x0) '→ h where h : ⊆ R → Rl is the maximal solution of the initial value problem (1) is (δ, ρ, ρl, δ1,l)-computable.
(ii) The function F : (f, t0, x0) '→ U where U is the domain of the maximal solution of the initial value problem (1) is (δ, ρ, ρl, θ1)-computable.
For open subsets of the real line, the function U '→ sup U is (θ, ρ>)-computable and the function U '→ inf U is (θ, ρ>)-computable. Therefore, from f and the initial values t0, x0 we can compute α from above and β from below such that (α, β) is the maximal interval of existence. If the input data are computable, α is right-r.e. and β is left-r.e.

The Complexity of Blowups
We will study the blowup for the initial value problem (1) for locally Lipschitz continuous functions f : Rl+1 → Rl defined on all of Rl+1. We consider only “positive blowup”, that is, the behaviour of the solution for t ≥ t0. Let BUf be the set of all initial conditions (t0, x0) such that for the maximal solution h of (1), sup{t | h(t) exists} < ∞ (the blowup points) and let CBUf := Rl+1 \ BUf be the set of initial conditions for which there is no blowup. By the next theorem the set CBUf is a Gδ-set which can be computed from f .
Theorem 4.1 The function B : f '→ CBUf for locally Lipschitz continuous (total) functions f : Rn+1 → Rn is (δ, δl+1)-computable.
Proof: Let S and F be the functions from Theorem 3.6. Define a function H1
by
H (f, i, t ,x ) := ⎧⎨ 1 if i < sup F (f, t0, x0)

1	0	0
⎩ 0 otherwise.



This function is (δ, νN, ρ, ρl, ρ<)-computable: First compute the open set V := F (f, t0, x0) and then try to find i ∈ N in V . As long as i has not been found print (a νQ-code of) 0 on the output tape, as soon as i has been found continue writing 1s. By (2), the function H2 defined by H2(f, i)(t0, x0) := H1(f, i, t0, x0) is (δ, νN, [ρl+1 → ρ<])-computable. H2(f, i) is the characteristic function of the set
Vi := {(t0, x0) | S(f, t0, x0)(t) exists for some t > i}.
Define the Sierpinski representation δn	of subsets of Rn by

n
Sierpinski
(p) = W iff [ρn → ρ<](p) is the characteristic function of W.

Then H3 : (f, i) '→ Vi is (δ, νN, δl+1	)-computable.	Since θn ≡ δn

[6], the function H3 is (δ, νN, θl+1)-computable.	In particular, all the sets Vi
are open.	By (2), H4 : f '→ (Vi)i is (δ, [νN → θl+1])-computable and hence
(δ, (θl+1)ω )-computable. Since δn (p)=  (θn)ω (p)(i), the function H5 : f '→  Vi
		
is (δ, δl+1)-computable. It remains to observe that CBUf =  i Vi.	 
Therefore, for every locally Lipschitz continuous (total) function f : Rl+1 → Rl, the set CBUf is a Gδ-set and its complement BUf is (by definition) an Fσ-set. If, in addition, f is computable (more precisely, δ-computable), then the set CBUf is a computable Gδ-set.
Theorem 4.1 shows that Fσ is an upper complexity bound for the blowup sets. Although not every Fσ-set is a blowup set, for example, if it is bounded; this upper Fσ-complexity bound is sharp for l ≥ 2. This result is a corollary of the following theorem in which we show that there is indeed a kind of Gδ lower bound of CBUf for l ≥ 2, even for time independent systems. We prove a non-uniform version. For a time independent system we may choose t0 = 0.
Theorem 4.2 For every computable Gδ-set X⊆Rl−1 (l ≥ 2) there is an effectively locally Lipschitz computable function f : Rl → Rl such that the solution u of the initial-value problem
u'(t)= f (u(t)),  u(0)= (x0, 0)	(11)
has a ﬁnite blowup for increasing t if and only if x0 /∈ X.
Proof. First we consider l = 2. For n ∈ N, let BIn := {(a·2−n, (a+2)·2−n) | a ∈ Z} and let I be a canonical injective numbering of the set BI := n BIn of “normed binary intervals”. For an open real interval (a; b) let 3(a; b) := (a−(b−a); b+(b−a)). Let X⊆R be a computable Gδ-set. Then there is a computable function g0 : N2 → N such that
X =    Ig0(i, j) .
i	j
As a first step we normalize this representation of X by an intersection of unions of open intervals.
Lemma 4.3 There is a computable function g : N2 → N such that for all i, j ∈ N
and x ∈ R,

X =  Oi,  O0 ⊇ O1 ⊇ O2 ...  for Oi =  Ig(i, j) ,	(12)
i	j
3Ig(i, j)⊆Oi ,	(13)
{j | x ∈ 3Ig(i, j)} is ﬁnite if x ∈ Oi .	(14)
Proof. (Lemma 4.3) Let Oi :=  i'≤i  j Ig0(i', j). Then
O0 ⊇ O1 ⊇ O2 ... ,  X =  Oi and Oi =  Ig1(i, j)
i	j
for some computable function g1. Since every interval K ∈ BI is the union of intervals L ∈ BI such that 3L⊆K, there is a computable function g2 such that Oi = j Ig2(i, j) and 3Ig(i, j)⊆Oi for all i, j. Finally, by successively deleting for each i all g2(i, j) such that Ig2(i, j)⊆Ig2(i, j') for some j' < j (such intervals Ig2(i, j) are not necessary for generating Oi) we obtain a computable function g such that
(12) and (13) and additionally
Ig(i, j) /⊆ Ig(i, j') if j' < j .	(15)
For showing (14) consider x ∈ Oi. Hence x ∈ Ig(i, j0) =: (c; d) for some j0 and some c, d. Furthermore, 2−n < min(x − c, d − x) for some number n. Suppose, x ∈ 3Ig(i, j) for infinitely many j. Since for each k there are at most 6 intervals L ∈ BIk such that x ∈ 3L, there must be numbers j > j0 and m ≥ n + 3 such that x ∈ 3Ig(i, j) and Ig(i, j) ∈ BIm. Then length(3Ig(i, j))=6 · 2−m < 2−n and hence 3Ig(i, j)⊆(c; d) = Ig(i, j0) (since x ∈ 3Ig(i, j)). But this is false by (15), since j0 < j.	 (Lemma 4.3)


As a next step we define the function f : R2 → R2. For k ∈ N, let yk
Then
:= 222k .

2 ≤ yk < yk + y2 +2 ≤ yk+1 .	(16)

For k = ⟨i, j⟩ let

⎧⎨ y2 − y2 if (x, y) ∈ Ig(i, j) × (yk; y2)

⎩	0	if (x, y) /∈ 3Ig(i, j) × (yk − 1; y2 + 1) ,
and for all (x, y) between the two rectangles, gk(x, y) is defined by linear interpola- tion such that (k, x, y) '→ gk(x, y) is a computable function that is effectively locally Lipschitz. By (16) gk(x, y) · gk' (x, y) = 0 for k /= k'. Define the function f by f (x, y) := (f1(x, y), f2(x, y)) where
f1(x, y) :=0 ,

f (x, y) := ⎧⎨
1	if y < 1

2	⎩ y2 − Σ

k∈N
gk(x, y) else .

We study the solution u : R → R2 of the initial-value problem (11). Since
f1(x, y) = 0, all trajectories are in y-direction, hence for each initial value (x, 0) we

have a one-dimensional problem. We observe a particle starting at (x, 0) traveling to position (x, y) with the prescribed speed f2(x, y) in y-direction. Since f2(x, y) ≥ 1 for all x, y, the particle will reach every point (x, y) for y > 0.
Suppose x ∈ X. By (12), for all i there is some j such that x ∈ Ig(i, j).
Therefore there are infinitely many k (= ⟨i, j⟩) such that
f2(x, y)= y2 − gk(x, y)= y2 for yk ≤ y ≤ y2.

Therefore, if u(tk)= (x, yk) then u(tk + 1)= (x, yk + y2). Hence the particle needs one time unit for traveling from yk to yk + y2. Since there are infinitely many such intervals, the particle cannot approach infinity in finite time. Therefore, there is no blowup for this initial value (x, 0).
Suppose x /∈ X. By (12) x ∈ Oi only for finitely many i. By (14) for each of these numbers i, x ∈ 3Ig(i, j) only for finitely many numbers j. Therefore, there are only finitely many k = ⟨i, j⟩ such that gk(x, y) > 0 for some y. Hence, for some k, f2(x, y)= y2 for y > yk. As is well known, in this case the particle will approach infinity in finite time. Therefore, there is a blowup for this initial value (x, 0).

For l > 2, replace BI
by BI(l) := {J
× ... × J	| J ,...,J 
∈ BI
}, replace

n	n	1
l−1	1
l−1	n

the numbering I by a canonical numbering I(l) of BI(l) :=  n BI , and define 3K
(l)
accordingly for K ∈ N . The rest of the proof remains unchanged.	 

The above proof can be effectivized for showing that there is a (δl−1, δ)- computable multi-function mapping each Gδ-set to some locally Lipschitz func- tion f : Rl → Rl such that the solution u of the initial-value problem “u'(t) = f (u(t)),  u(0)= (x0, 0)” has a finite blowup for increasing t, if and only if x0 /∈ X.
In the one-dimensional case, we can say even more if we restrict ourselves to functions f which do not depend on t. In this case the blowup sets do solely depend on the zeroes of f .
Theorem 4.4 Let f : R → R be a locally Lipschitz continuous function. Then the “positive” blowup set BUf of the initial value problem “x'(t)= f (x(t)), x(0) = x0” is the union of two intervals (−∞, a) and (b, ∞) for some a, b ∈ R. If the function f is computable, then the constant a can be chosen to be ρ<-computable and the constant b to be ρ>-computable.
Proof: If f has no zero, then there is a blowup either for all x0 or for no x0. In the first case let a := −∞ and b := ∞, in the second case let a := b :=:= ∞.
Suppose that f has a zero. We observe that x0 /∈ BUf if there are x1, x2 such that f (x1)= f (x2) = 0 and x1 ≤ x0 ≤ x2.
If f has no greatest zero then let b := ∞. Suppose, f has a greatest zero β. Then there is a blowup either for all x0 > β or for no x0 > β. In the first case let b := β , in the second case let b := ∞.
Correspondingly, if f has no smallest zero then let a := −∞. Suppose, f has a smallest zero α. Then there is a blowup either for all x0 < α or for no x0 < α. In the first case let a := α, in the second case let a := −∞.

By [23, Theorem 6.3.4] the smallest zero of a computable function (if it exists) is ρ<-computable and the greatest zero of a computable function (if it exists) is ρ>-computable. Furthermore, −∞ and ∞ are ρ<-computable and ρ>-computable.
 

References
O. Aberth Computable analysis and differential equations. J. Symbolic Logic, 40 (1):84, 1975.
O. Aberth. The failure in computable analysis of a classical existence theorem for differential equations.
Proc. Amer. Math. Soc., 30:151–156, 1971.
O. Aberth. Computable Analysis. McGraw-Hill, 1980.
G. Birkhoff and G. Rota. Ordinary Differential Equations. Ginn and Company, 1962.
E. Bishop and D. S. Bridges. Constructive Analysis. Springer, 1985
V. Brattka and G. Presser. Computability on subsets of metric spaces. Theoretical Computer Science, 305:43–76, 2003.
D.S. Gra¸ca. Computability with polynomial differential equations. Ph.D. thesis, Institute Superior T´ecnico/Universidade T´ecnica de Lisboa, 2007.
A. Grzegorczyk. Computable functionals. Fund. Math., 42:168-202, 1955.
A. Grzegorczyk. On the definitions of computable real continuous functions. Fund. Math., 44:61-71, 1957.
T. Grubba, K. Weihrauch, and Y. Xu. Effectivity on continuous functions in topological spaces. In Ruth Dillhage, Tanja Grubba, Andrea Sorbi, Klaus Weihrauch, and Ning Zhong, editors, CCA 2007, Fourth International Conference on Computability and Complexity in Analysis, volume 338 of Informatik Berichte, pages 137–154. FernUniversit¨at in Hagen, June 2007. CCA 2007, Siena, Italy, June 16–18, 2007.
D.S. Gra¸ca, N. Zhong and J. Buescu. Computability, noncomputability and undecidability of maximal intervals of IVPs. Accepted and to appear in Transactions of AMS.
H. Heuser. Lehrbuch der Analysis, Teil 2. B.G.Teubner, 1981.
Chun-Kuen Ho. Relatively recursive reals and real functions. Theoretical Computer Science 210 (1):99– 120, 1999.
Ker-I Ko. On the computational complexity of ordinary differential equations. Information and control, 58:157–194, 1983.
Ker-I Ko. Computational Complexity of Real Functions. Birkh¨auser, 1991.
P. Odifreddi. Classical Recursion Theory. North-Holland, 1989.
Lawrence Perko. Differential equations and dynamical systems. Springer-Verlag New York, 1996.
M. B. Pour-El and J. I. Richards. A computable ordinary differential equation which possesses no computable solution. Ann. Math. Logic, 17:61–90, 1979.
Marian B. Pour-El and J. Ian Richards. Computability in Analysis and Physics. Perspectives in Mathematical Logic. Springer, Berlin, 1989.
Marian B. Pour-El and N. Zhong. The wave equation with computable initial data whose unique solution is nowhere computable. Math. Logic Quarterly, 43 (4):499–509, 1997.
A. M. Turing. On computable numbers, with an application to the Entscheidungsproblem. Proc. London Math. Soc., 2 (42):230–265, 1936.
K. Weihrauch. Computability on computable metric spaces. Theoretical Computer Science, 113:191– 210, 1993.
K. Weihrauch. Computable Analysis. Springer, Berlin, 2000.


K. Weihrauch. Multi-functions on multi-represented sets are closed under flowchart programming. In Tanja Grubba, Peter Hertling, Hideki Tsuiki, and Klaus Weihrauch, editors, Computability and Complexity in Analysis, volume 326 of Informatik Berichte, pages 267–300. FernUniversit¨at in Hagen, July 2005. Proccedings, Second International Conference, CCA 2005, Kyoto, Japan, August 25–29, 2005.
K. Weihrauch The computable multi-functions on multi-represented sets are closed under programming Submitted for publication.
K. Weihrauch and N. Zhong. Is wave propagation computable or can wave computers beat the Turing machine? Proc. London Math. Soc., 85 (2):312–332, 2002.
N. Zhong and K. Weihrauch. Computability theory of generalized functions. J. Assoc. Comp. Machinery, 50 (4):469–505, 2003.
K. Weihrauch and N. Zhong. An algorithm for computing fundamental solutions. SIAM Journal on Computing, 35 (6):1283–1294, 2006.
K. Weihrauch and N. Zhong. Computing the solution of the Korteweg-de Vries equation with arbitrary precision on Turing machines. Theoretical Computer Science, 332 (1–3):337–366, 2005.
Q. Zhou Computable real-valued functions on recursive open and closed subsets of Euclidean space.
Math. Logic Quart. 42 (3):379–409, 1996.
