

Electronic Notes in Theoretical Computer Science 225 (2009) 67–81
www.elsevier.com/locate/entcs

Partially Ordered Monads for Monadic Topologies, Rough Sets and Kleene Algebras
P. Eklund1
Department of Computing Science Ume˚a University
Ume˚a , Sweden
M.A. Gal´an2,3
Department of Applied Mathematics University of M´alaga
M´alaga, Spain
Werner G¨ahler4
Scheibenbergstraße 37 D-12685 Berlin, Germany

Abstract
In this paper we will show that partially ordered monads contain sufficient structure for modelling monadic topologies, rough sets and Kleene algebras. Convergence represented by extension structures over partially ordered monads includes notions of regularity and compactness. A compactification theory can be developed. Rough sets [23] are modelled in a generalized setting with set functors. Further, we show how partially ordered monads can be used in order to obtain monad based examples of Kleene algebras building upon a wide range of set functors far beyond just strings [19] and relations [27].
Keywords: Partially ordered monads, Monadic topologies, Rough sets, Kleene algebras


Introduction
Partially ordered monads can be seen as derived from studies around convergence structures, originally involving filters [21]. Cauchy structures, again based on fil- ters were initiated in [18].  Steps departing from filters and using more general

1 Email: peklund@cs.umu.se
2 Email: magalan@ctima.uma.es
3 Partially supported by Spanish projects P06-FQM-02049 and TIN2006-15455-C03-01.
4 Email: gaehler@rz.uni-potsdam.de

1571-0661/© 2008 Elsevier B.V. Open access under CC BY-NC-ND license.
doi:10.1016/j.entcs.2008.12.067

set functors for convergence were taken in [10] including a general structure the- ory. The observation that functors extended to monads [22] provide more power to convergence is due to [11]. Concrete examples, in particular involving the fuzzy filter monad, were developed in [7], followed by monad techniques for compactifi- cation constructions in [8] based on a compactification construction [24] for filter based limit spaces. The introduction of partially ordered monads and its use within extension structures is due to [13,14], with a follow-up on considerations for com- pacatifications in [15].
Topology and convergence were driving forces in the development of partially ordered monads and the demonstration of their power. However, these monads are useful also in other areas. We will show that they contain sufficient structure for modelling rough sets [23] in a generalized setting with set functors. Even for the ordinary relations, the adaptations through partially ordered monads increases the understanding of rough sets in a basic many-valued logic [16] setting. Further we show how these partially ordered monads contribute to providing a generalised notion of powerset Kleene algebras. This generalisation builds upon a more gen- eral powerset functor setting far beyond just strings [19] and relational algebra [27]. Kleene algebras are widely used e.g. in formal languages [26] and analysis of algorithms [1].
The paper is organized as follows. In Section 2 we introduce partially ordered monads. Section 3 is devoted to topology and we show how extension structures allow compactification constructions. Section 4 presents rough sets in a categorical framework entirely new to the rough set community. This opens up several avenues for applications involving more than just relations on sets, i.e. the power set partially ordered monad. In Section 5, we see how Kleene algebra multiplications are Kleisli compositions and Kleene asterates can be defined using the partial order within the monad. Finally, Section 6 concludes the paper.

Partially ordered monads
An almost complete semilattice is a partially ordered set (X, ≤) such that the suprema sup M of each non-empty subsets M of X exists. A basic triple ([13]) is a triple (ϕ, ≤, η), where (ϕ, ≤) : Set → acSLAT, X '→ (ϕX, ≤) is a covariant func- tor, with ϕ : Set → Set as the underlying set functor, and η : id → ϕ is a natural transformation. A monad (ϕ, η, μ) over a category C consists of a covariant functor ϕ : C → C, together with natural transformations η : id → ϕ and μ : ϕ ◦ ϕ → ϕ fulfilling the conditions μ ◦ ϕμ = μ ◦ μϕ and μ ◦ ϕη = μ ◦ ηϕ = idϕ.
Partially ordered monads are monads [22], where the underlying endofunctor is equipped with an order structure. Some additional structure is imposed. Par- tially ordered monads are useful for various generalized topologies and convergence structures [13,15], and have also been used for generalisation of Kleene algebras [27,19,9].
Partially ordered monads over the category Set of sets are defined by means of functors from Set to the category acSLAT of almost complete semilattices. A

partially ordered monad is a quadruple (ϕ, ≤, η, μ), where (ϕ, ≤, η) is a basic triple, (ϕ, η, μ) is a monad (over Set), and further, for all mappings f, g : Y → ϕX, f ≤ g implies μX ◦ ϕf ≤ μX ◦ ϕg, where ≤ is defined argumentwise with respect to the partial ordering of ϕX. We also require that for each set X, μX : (ϕϕX), ≤) → (ϕX, ≤) preserves non-empty suprema.
The classical example of a partially ordered monad is the power set partially ordered monad (P, ≤, η, μ), where PX is the ordinary power set of X and ≤ is set inclusion ⊆ making PX, ≤ a partially ordered set. The unit η : X → PX is given by η(x) = {x} and the multiplication μ : PPX → PX by μ(B) = ∪B.
The many-valued extension of P to Lid is as follows. Let L be a complete and completely distributive lattice, with 0 and 1, respectively, as the smallest and largest elements of L. The functor Lid is obtained by LidX = LX , i.e. the set of mappings A : X → L. The partial order ≤ on LidX is given pointwise. Morphisms f : X → Y in Set are mapped according to

Lidf (A)(y) = 
f (x)=y
A(x).

Here we adopt the convention that ∨∅ = 0. Finally ηX : X → LidX is given by
η  (x)(x') =	1	if x' ≤ x
X	0	otherwise
and μX : LidX ◦ LidX → LidX by

μX (M)(x) = 
A∈LidX
A(x) ∧ M(A).

Proposition 2.1 [5] Lid = (Lid, ≤, η, μ) is a partially ordered monad.
Given a monad, there are two standard ways of defining a category associated with it, namely the Eilenberg-Moore construction and the Kleisli construction. The latter is used in this paper.
For historical remarks let us mention the important role that Kleisli and Eilenberg-Moore categories play in the study of the relation between adjunctions and monads [2]. Every adjunction defines a monad, and conversely every monad can be seen as generated by an adjunction, called a resolution for the monad. Eilenberg- Moore and Kleisli categories give rise to resolutions, e.g., they are respectively the terminal and initial objects in the category of all resolutions.
A Kleisli category CΦ for a monad Φ over a category C is defined as follows: Objects in CΦ are the same as in C, and the morphisms are defined as homCΦ (X, Y ) = homC(X, ΦY ), that is morphisms f : X z Y in CΦ are simply morphisms f : X → ΦY in C, with ηΦ : X → ΦX being the identity morphism. Composition of morphisms

is defined as (	f	) ⬦ (Y
z Z) = X
μΦ◦Φg◦f
Z →	ΦZ.

The Kleisli category is equivalent to the full subcategory of free Φ-algebras of the monad, and its definition makes it clear that the arrows are substitutions. Indeed, the categorical unification algorithm in [25] is based on the Kleisli category of the term monad.

A monad (Φ, η, μ) written as (Φ, η, ⬦), where ⬦ is the composition of morphisms in the corresponding Kleisli category, is said to be a monad in clone form. In fact, there is a one-to-one correspondence between monads, respectively, in monoid and clone forms [22].
The Kleisli category of the powerset monad (for L = 2) is the category of sets and relations, SetRel. This is a consequence of the fact that given a relation R ⊆ X ×Y , we can define a morphism ϕ(R) : X → PY , ϕ(R)(x) = {y ∈ Y | (x, y) ∈ R} associated to R; and, given the morphism f : X → PY , we can define the relation Rf ⊆ X × Y , Rf = {(x, y) ∈ X × Y | y ∈ f (x)}.

Monadic topologies
Extension structures [12] generalize the notion of Cauchy structures and are func- torially defined by basic triples. For more elaborate notions, like regularity, basic triples need to be enriched to become partially ordered monads. In this enrichment we are able to provide compactification constructions of related limit structures. The idea is to use completion constructions and to show that completion of some special Cauchy structures coincide with compactifications of their corresponding limit structures.
In the following we will show how these techniques are used and combined, and indeed our aim is to demonstrate the power of the underlying partially ordered monads. Proofs can be found in [15].

Extension structures
An ϕ-extension structure [12] on a set X is a triple (S, t, ∼) such that S ⊆ ϕX and

t ⊆ ϕX × X, and ∼ is an equivalence relation on S. We write M −→t
(M, x) ∈ t, and the following conditions must be fulfilled.
x instead of

(ext 1) M −→t
(ext 2) M −→t
x implies M ∈ S
x, M ∼ N imply N −→t  x

(ext 3) M −→t
x, N −→t
x imply M ∼ N 

A morphism (in the category of extension structures) f : (X, (S1, t1, ∼1)) →
(Y, (S2, t2, ∼2)) between ϕ-extension structures is a mapping f : X → Y , where
(map 1) M ∈ S1 implies ϕf (M) ∈ S2

(map 2) M −t→1
x implies ϕf (M) −t→2
f (x)

(map 3) M ∼1 N implies ϕf (M) ∼2 ϕf (N )
A ϕ-extension structure (X, (S, t, ∼)) is said to be separated, whenever M −→t	x

and M −→t
y only if x = y, and complete if for each M ∈ S we have M −→t
x for

some x ∈ X. The category of all separated and complete ϕ-extension structures is an epireflective subcategory of the category of all separated ϕ-extension structures [14].

A ϕ-extension structure (X, (S, t, ∼)) is called η-stable whenever ηX (x) −→t	x
for all x ∈ X. For each η-stable ϕ-extension structure (X, (S, t, ∼)) we have t =
{(M, x) | M ∼ ηX (x)}, and t is then completely determined by S and ∼.

Φ-Cauchy structures and their completions
Let Φ = (ϕ, ≤, η) be a basic triple. A Φ-Cauchy structure on a set X is a subset S
of ϕX such that
(Cau 1) ηX (x) ∈ S for all x ∈ X
(Cau 2) M ∈ S and N ≤ M imply N ∈ S
(Cau 3) for M, N ∈ S, if the infimum M∧N exists, then M∨N ∈ S
If ϕ is the filter functor, then the Φ-Cauchy structures are the Cauchy structures in the usual sense.
A mapping f : (X, S) → (Y, S') between Φ-Cauchy structures is called Φ-Cauchy continuous, whenever s ∈ S implies ϕf (s) ∈ S'.
Each Φ-Cauchy structure (X, S) is associated with a η-stable ϕ-extension struc- ture (S, t, ∼), where S and t are given by
(1)	M ∼ N ⇐⇒ M ∨ N ∈ S

(2)
M −→t
x ⇐⇒ M ∨ ηX (x) ∈ S

A mapping between Φ-Cauchy structures is Φ-Cauchy continuous if and only if it is a morphism between the associated η-stable ϕ-extension structures.
For each Φ-Cauchy structure (X, S), the set t defined by (2) isa Φ-limit structure, that is, the following conditions are fulfilled:

(lim 1) ηX (x) −→t
x for all x ∈ X

(lim 2) M −→t  x and N ≤ M imply N −→t  x

(lim 3) if M −→t
x and N −→t
x, then M∨N −→t  x

It is easily seen that Φ-Cauchy continuity of mappings f : (X, S) → (Y, S') amounts to continuity for corresponding mappings f : (X, t) → (Y, t') between the related

Φ-limit structures as given by M −→t
x implying ϕf (M) t'
f (x). Separatedness

and completeness can be similarly introduced for Φ-Cauchy and Φ-limit structures, and, as easily seen, specialized to classical situations they correspond in the classical sense. A notion of regularity can also be introduced. Let (X, t) be a Φ-limit struc-
ture and let t1 : gr[t] → ϕX and t2 : gr[t] → X be the projections (M, x) '→ M and (M, x) '→ x, respectively. Then (X, t) is said to be regular if for every L ∈ ϕgr[t]
and every x ∈ X we have ϕt2(L) −→t  x whenever (μX ◦ ϕt1)(L) −→t  x.
Completions of Φ-Cauchy structures can be derived from completions of exten- sion structures [6,14]. However, some conditions have to be imposed:
(cpl 1) for M, N ∈ ϕX and x, y ∈ X, if the infimum
(M∨ ηX (x)) ∧ (N ∨ ηX (y)) 

exists, then at least one of the infima M∧N , M∧ ηX (y) and N ∧ ηX (x) exists, or else x = y
(cpl 2) for f : X → Y , M ∈ ϕX and y ∈ Y , if the infimum ηY (y) ∧ ϕf (M) exists, then y = f (x) for some x ∈ X

We say M ∈ S is stratiﬁed if M ≤ 
x∈X
ηX (x), and Φ fulfills the stratiﬁcation

property if, for each M ∈ S, the infimum M+ = M∧ 
x∈X
ηX (x) exists, and for each

mapping f : X → Y and M ∈ ϕX we have ϕf (M+ ) = ϕf (M)+ .
Proposition 3.1 ([14]) If Φ fulﬁlls the conditions (cpl 1) and (cpl 2), then the category of all separated and complete Φ-Cauchy structures is an epireflective sub- category of the category of all separated Φ-Cauchy structures.
Monadic compactiﬁcations
We begin by observing how compactness is seen as completeness of some dedicated Cauchy structures. Let Φ = (ϕ, ≤, η) be a basic triple. A Φ-limit structure (X, t) is called compact provided that all ultra objects M ∈ ϕX converge with respect
to t, and weakly separated if for all x, y ∈ X, whenever there are objects in ϕX
converging to x and to y with respect to t, then
{M | M −→t  x} = {M | M −→t  y}
Proposition 3.2 Let (X, t) be a separated Φ-limit structure and let

St = {M | M −→t
x for some x} ∪ {M ∈ ϕX | M ultra}

Then (X, St) is a Φ-Cauchy structure and (X, t) is the associated Φ-limit structure of (X, St). Further, (X, t) is compact if and only if (X, St) is complete.
For the compactification construction, let Φ = (ϕ, ≤, η, μ) be a partially ordered monad, and assume that Φ fulfills the following conditions:
(cpt 1) For each ϕ-object M on a set X there exists an ultra ϕ-object U on X
such that U ≤ M.
(cpt 2) For each mapping f : X → Y and each ultra ϕ-object U on X, ϕf (U) is an ultra ϕ-object on Y .
(cpt 3) For each set X and each ultra ϕ-object U on ϕuX, (μX ◦ ϕeX )(U) is an ultra ϕ-object on X.
In the following, let (X, t) be a separated Φ-limit structure with (X, St) be the corresponding Φ-Cauchy structure. Further, let ∼ be the related equivalence
∧	∼
relation on St defined by (1) and let X	= {M	| M ∈ S} be the set of all
equivalence classes with respect to ∼.
We can now define a mapping κ : X∧ → ϕX by


κ(M∼ )  =
⎧⎪⎨ ηX (x) if M −→t  x

⎪⎩ M	if M is a non-converging ultra object

Proposition 3.3 For an ultra object K ∈ ϕX∧ , we have that (μ	◦ ϕκ)(K) ∈ ϕX
is also an ultra object. Further, (X∧ ,t ) where

∧ = {(K, M∼
) ∈ ϕX∧ × X∧
| (μX ◦ ϕκ)(K) ∈ M }

is a separated and compact Φ-limit structure.
In the filter monad case, this corresponds precisely to the diagonalization tech- nique given in [21].
Proposition 3.4 ([15])  If ι : X → X∧ be the mapping x '→ η (x)∼ , then ι :
(X, t) → (X∧ ,T ) is an epimorphism of the category of separated Φ-limit structures
and for each continuous mapping f : (X, t) → Y of (X, t) into a separated, compact and regular Φ-limit structure Y, there exists one and only one continuous mapping

f∧ : (X∧	∧
) → Y such that f = f∧
ι.

Note that the classical Cˇech-Stone-compactiﬁcation leads to the result that the
category of compact Hausdorff (separated) topologies is an epireflective subcategory of the category of all Hausdorff topologies. However, as shown in [3], the more gen- eral category of separated compact filter limit structures fails to be an epireflective subcategory of the category of all separated filter limit structures. The restrictive result in the proposition above reflects this fact.

Rough sets
Traditionally, rough sets build upon relations based on ordinary sets, i.e. relations on X as subsets of X × X. Rough sets provide a good environment to deal with vagueness and uncertainty situations. We show, in this section, how monads can be used to generalize and interpret rough situations. In particular, the partially ordered ordinary power set monad turns out to contain sufficient structure in order to provide rough set operations.
However, we can go far beyond ordinary relations as we show how more general power sets, i.e. partially ordered monads built upon a wide range of set functors, can be used to provide what we call rough monads.
A starting point of this section is the equivalent view on relations as mappings from X to the (ordinary) power set PX.
Let R be a relation on X, i.e. R ⊆ X × X. We represent the relation as a mapping ρX : X → PX, where ρX (x) = {y ∈ X|xRy}. The corresponding inverse relation R−1 is then represented as ρ−1(x) = {y ∈ X|xR−1y}.
Based on indistinguishable relations, rough sets are introduced by defining the
upper and lower approximation of sets. These approximations represent uncertain or imprecise knowledge. To be more formal, given a subset A of X, the lower approximation of A correspond to the objects that surely (with respect to an indis- tinguishable relation) are in A.
The lower and upper approximations of A are respectively obtained by

A↓ = {x ∈ X|ρX (x) ⊆ A}

and
A↑ = {x ∈ X|ρX (x) ∩ A /= ∅}.
The boundary of A is the (set) difference between the upper and lower approxima- tions.
Compositional modifiers can also be found within the theory of rough sets yield- ing the modified sets defined by:



and
A⇓ = {x ∈ X|ρ−1(x) ⊆ A}
A⇑ = {x ∈ X|ρ−1(x) ∩ A /= ∅}.

In the case that the relation is reflexive, A⇓ and A⇑ are called R-weakened and
R-substantiated sets of a subset A of X.

The powerset situation
In what follows we will assume that the underlying almost complete semilattice has finite infima, i.e. is a join complete lattice.
Considering P as the functor in its corresponding partially ordered monad we then immediately have
Proposition 4.1 The upper and lower approximations of a subset A of X are respectively given by


A↑ =
ρX (x)∧A>0
−1	↓
X
ρX (x)≤A
ηX (x)


For the corresponding R-weakened and R-substantiated sets of a subset A of X
we have the following proposition
Proposition 4.2 The R-weakened and R-substantiated sets of a subset A of X are given by
A⇑ = μX ◦ PρX (A)
and



respectively.
A⇓ =	 
X
ηX (x),

Duality conditions can be shown for the upper and lower approximations of powersets. We will denote the complement of a set A by ч(A).
Lemma 4.3 Lower and upper approximations of powersets are dual, i.e.
ч(A↓) = ч(A)↑ and ч(A↑) = ч(A)↓.
Proof.
x ∈ ч(A↓) iff x ∈/ A↓ iff ρX (x) ¢ A iff ρX (x) ∩ ч(A) /= ∅ iff x ∈ ч(A)↑.

x ∈ ч(A↑) iff x ∈/ A↑ iff ρX (x) ∩ A = ∅ iff ρX (x) ⊆ ч(A) iff x ∈ ч(A)↓.

Lemma 4.4 If A ⊆ B then A↑ ⊆ B↑, A↓ ⊆ B↓, A⇑ ⊆ B⇑, A⇓ ⊆ B⇓.
Proof. The proof is straightforward as e.g. A↑ = μX ◦ P ρ−1(A) ⊆ μX ◦ P ρ−1(B) = 
X	X
B↑ by using Proposition 4.1 and properties of the underlying lattice.


Inverse relations
Inverse relations in the ordinary case means to mirror pairs around the diago- nal. Generally, in the case of ϕ = Lid we would accordingly define ρ−1(x)(x') = ρX (x')(x). The following propositions relate inverses to the multiplication of the corresponding monads. Proofs can be found in [4].
Proposition 4.5 In the case of P,




if and only if
ηX (x) = μX ◦ Pρ−1(A)
ρX (x)∧A>0

ρ−1(x) =		ηX (y).
ηX (x)≤ρX (y)
In the case of Lid, we obtain the following result:
Proposition 4.6
μX ◦ Lρ−1(A)(x) =   (ρX (x) ∧ A)(x').
x'∈X

The generalization from the ordinary power set monad to involve a wide range of set functors and their corresponding partially ordered monads requires an ap- propriate management of relational inverses and complement. Obviously, for more complicated set functors, the corresponding relational views no longer rest upon ‘mirroring over the diagonal’. The general representation of inverses is still an open question and for the the purpose of this paper we specify inverses in casu.

Similarities for rough powersets
Rough sets are, traditionally, based on indistinguishable relations in the form of equivalence relations. Some extension contemplate relations where the transitivity property is not a must. A tolerance relation, is a reflexive and symmetric relation. Further, some authors even consider indistinguishable relations that are far from being an equivalence relation. This, in fact can be necessary in many situations where our knowledge is categorized as vague.

In the many valued situation we often find in the literature concepts such as fuzzy equality relation, fuzzy equivalence relation and similarity relation. We adopt the latter terminology.
Definition 4.7 A similarity on X is a mapping E: X × X → L satisfying the following axioms,
E(x, x) = 1	(reflexivity)
E(x, y) = E(y, x)	(symmetry)
E(x, y) ∧ E(y, z) ≤ E(x, z)	(transitivity)
for all x, y, z ∈ X.
Definition 4.8 In the powerset situation, ρX : X → PX is reflexive if ηX ⊆ ρX ,
symmetric if ρ = ρ−1 and transitive if y ∈ ρ(x) implies ρ(y) ⊆ ρ(x).
Lemma 4.9 There is a one-to-one correspondence between a : X × X → L and
b : X → LX.
Proof. Let us consider v(a) : X → LX defined by v(a)(x)(x') = a(x, x'), and
w(b) : X × X → L defined by w(b)(x, x') = b(x)(x').
We easily see that v and w are well defined:
v(w(b))(x)(x') = w(b)(x, x') = b(x)(x')
w(v(a))(x, x') = v(a)(x)(x') = a(x, x')

Proposition 4.10 Deﬁnitions 4.7 and 4.8 are equivalent.
Proof. As shown in previous lemma, given ρX : X → LX and E : X × X → L. To see that both definitions are equivalent we consider ρX = v(E) and w(ρX ) = E.
For reflexivity we have:
E(x, x') = v(E)(x)(x') ≥ ηX (x)(x')
Now for symmetry, we have that E−1(x, x') = E(x', x). To see that E = E−1 iff
ρX = ρ−1 is equivalent, we have to show that w(ρX )−1 = w(ρ−1).
X	X
Indeed, we can easily see:
w(ρX )−1(x, x')= E−1(x, x')
= E(x', x)
= w(ρX )(x', x)
= ρX (x')(x)
= ρ−1(x)(x')
= w(ρ−1)(x, x')
Finally, for transitivity, y ∈ ρX (x) is equivalent to v(E)(x)(y) = E(x, y) = 1. Therefore, if y ∈ ρX (x), we have that E(x, y) ∧ E(y, z) = E(y, z) and the similarity

condition for transitivity is equivalent to v(E)(y)(z) ≤ v(E)(x)(z) for any z ∈ X
i.e. ρX (y) ≤ ρX (x).	 
In the following we will see some characterizations of the properties of similarity relations wrt the upper and lower approximations.
Proposition 4.11 For the powerset monad (crisp situation) we obtain the follow- ing results:
If ρX is reflexive A↓ ⊆ A and A ⊆ A↑.
If ρX is symmetric A↓↑ ⊆ A and A ⊆ A↑↓.
If ρX is transitive A↑↑ ⊆ A↑ and A↓ ⊆ A↓↓.
Proof. For (i) by Proposition 4.1 and reflexivity we immediately obtain:


A↓ =
ρX (x)⊆A
ηX (x) ⊆
ρX (x)⊆A
ρX (x) ⊆ A

Note that if the relation is reflexive then also the inverse relation is reflexive. Thus, applying properties of the underlying lattice and one of the monad’s identities, we have:
A = μX ◦ P ηX (A) ⊆ μX ◦ Pρ−1(A) = A↑
To show (ii), symmetry together with naturality of ηX and the monad’s condi- tions yield:
A↓↑ = μX ◦ Pρ−1(A↓))

=
ρX (x)⊆A
=
ρX (x)⊆A
⊆ A.
μX ◦ Pρ−1(ηX (x))

ρX (x)

On the other hand, to show A ⊆ A↑↓ we use Lemma 4.3
ч(A↑↓) = ч(A↑)↑ = ч(A)↓↑
Applying now the property for symmetry proved above, ч(A)↓↑ ⊆ ч(A). What remains is to apply the complementary to the inequality obtained and we get: A = ч(ч(A)) ⊆ ч(ч(A)↓↑) = ч(ч(A↑↓)) = A↑↓.
Finally for (iii), we have

A↑ = μX ◦ Pρ−1(A) =		ηX (x) =	 
{x}

ρX (x)∧A>0	ρX (x)∩A/=∅

A↑↑ = μX ◦ Pρ−1(A↑) =		{z}
ρX (x)∩A↑/=∅
Take t ∈ A↑↑. Therefore ρX (t) ∩ A↑ /= ∅.
We want to show that t ∈ A↑, e.g. ρX (t) ∩ A /= ∅. Since ρX (t) ∩ A↑ /= ∅ this implies there is an r such that r ∈ ρX (t) and r ∈ A↑(and therefore ρX (r) ∩ A /= ∅).

Now by transitivity we obtain that ρX (r) ⊆ ρX (t) and thus, ρX (r) ∩ A ⊆ ρX (t) ∩
A and ρX (t) ∩ A /= ∅.
For the lower approximation,

A↓ =  ρ
(x)⊆A{x} and A↓↓ =  ρ
(z)⊆A↓ {z}

Consider t ∈ A↓. Then ρX (t) ⊆ A. Assume that t ∈/ A↓↓, i.e. ρX (t) ; A↓ so there is an r ∈ ρX (t) such that r ∈/ A↓.
By transitivity ρX (r) ⊆ ρX (t). Therefore, ρX (r) ⊆ A which is a contradiction to the fact that r ∈/ A↓. Therefore t ∈ A↓↓ and A↓ ⊆ A↓↓.	 
Corollary 4.12 If ρX is an equivalence relation, A↓↑ = A↓ and A↑↓ = A↑.
Proof. We use here Lemma 4.4 and Proposition 4.11.
Applying reflexivity we have A↑ ⊆ A↑↑. By transitivity we immediately obtain A↑↑ = A↑ and thus, A↑↑↓ = A↑↓. Now we can apply symmetry to the set A↑ obtaining that A↑ ⊆ A↑↓.
On the other hand, reflexivity applied to the set A↑ yields the other inequality,
A↑↓ ⊆ A↑.
The other equality, A↑↓ = A↑ can be proved similarly.


Generalizations
Rough sets can now be generalized from a set-theoretic framework. This generaliza- tion does not, necessarily, make use of an equivalence relation. In fact, theoretical and practical needs might require generalizations of the approximation operators using non-equivalence relations.
Let Φ = (ϕ, ≤, η, μ) be a partially ordered monad. We say that ρX : X → ϕX is a Φ-relation on X, and by ρ−1 : X → ϕX we denote its inverse. The inverse must be specified for the given set functor ϕ.
For any f : X → ϕX, the following condition is required:
ϕf (  ai) =  ϕf (ai)

This condition is valid both for P as well as for Lid.
Remark 4.13 Let ρX and ρY be relations on X and Y , respectively. Then the mapping f : X → Y is a congruence, i.e. x' ∈ ρX (x) implies f (x') ∈ ρY (f (x)), if and only if Pf ◦ ρX ≤ ρY ◦ f . Thus, congruence is related to a kind of weak naturality.
Let ρX : X → ϕX be a Φ-relation and let a ∈ ϕX. The Φ-ρ-upper and Φ- ρ-lower approximations, and further the Φ-ρ-weakened and Φ-ρ-substantiated sets, now define rough monads using the following monadic instrumentation:
⇑X (a)= μX ◦ ϕρX (a)

↓X (a)= 
ρX (x)≤a
ηX (x)

↑X (a)= μX ◦ ϕρ−1(a)

⇓X (a)=	 
X
ηX (x)

Proposition 4.14 [4] If a ≤ b, then ⇑X a ≤⇑X b, ↓X a ≤↓X b, ↑X a ≤↑X b,
⇓X a ≤⇓X b.
Definition 4.15 ρX : X → ϕX is reflexive if ηX ≤ ρX , and symmetric if ρ = ρ−1.
Proposition 4.16 [4] The following properties hold:
If ρ is reflexive, then a ≤⇑X (a).
ρ is reflexive iff ↓X (a) ≤ a.
ρ−1 is reflexive iff a ≤↑X (a).
If ρ is symmetric, then ↑X (↓X (a)) ≤ a.
Traditionally for the study of rough approximations, the use of equivalence rela- tion was commonly assumed. Nevertheless, one can find situations where tolerance relations are more suitable for the particular study being considered.
When going to the many-valued situation, tolerance relation can, in fact, be very convenient, leaving the transitivity property as an “in-casu” situation due to its strong requirements. For instance, in order to place a student from another school in the right level of knowledge we might need to define a relation that will be able to compare different courses. We could accept that a student from another school has achieved the requirement of a given course if (s)he has passed another course whose contents are at least of an 80% of the one considered, e.g. two courses will be in the same class if they have at least 80% of their contents in common. In this situation we could easily find a situation where two courses are in the same class, i.e. course A and B have an 80% of common contents, course C has also an 80% of common content with course B but less than 80% of the contents in common with course A. Hence we do not have transitivity.
Kleene algebras
Let Φ = (ϕ, ≤, η, μ) be a partially ordered monad where ∅ ∈ ϕX. Denote by 0X , or 0 for short, the morphism 0 : X → ϕX satisfying 0(x) = ∅ for all x ∈ X, and let 1 = ηX . Further, for f1, f2 ∈ Hom(X, ϕX), define
f1 + f2 = f1 ∨ f2,
and
f1 · f2 = f1 ⬦ f2
where f1 ⬦ f2 = μX ◦ ϕf2 ◦ f1 is the composition of morphisms in the corresponding Kleisli category of Φ.
A partial order ≤ on Hom(X, ϕX) is, for f1, f2 ∈ Hom(X, ϕX), defined by f1 ≤ f2 whenever f1(x) ≤ f2(x) for all x ∈ X. Obviously, f1 ≤ f2 if and only if f1 + f2 = f2.

The partially ordered monad Φ = (ϕ, ≤, η, μ) is said to be a Kleene monad, if the following conditions are fulfilled:
ϕ0X = 0ϕX
ϕf (∅)= ∅
μX (∅)= ∅
ϕ(∨ifi)= ∨iϕfi
ϕf ◦ (∨igi)= ∨i(ϕf ◦ gi) μX ◦ (∨igi)= ∨i(μX ◦ gi)
Proposition 5.1 Let Φ = (ϕ, ≤, η, μ) be a Kleene monad. Then (Hom(X, ϕX), +, ·, 0, 1) is an idempotent semiring.
The Kleene asterate, for mappings f : X → ϕX, is defined by
∞
f∗ =	fk k=0
where f 0 = 1 and fk+1 = μX ◦ ϕfk ◦ f . Suprema of mappings is defined pointwise. We then have
Proposition 5.2 [9] Let Φ = (ϕ, ≤, η, μ) be a Kleene monad. Then (Hom(X, ϕX), +, ·, ∗, 0, 1) is a Kleene algebra.
Conclusions
Partially ordered monads enrich monads with an order structure powerful enough to generalize convergence, rough sets and Kleene algebras. Monadic topologies are the result of decades of investigations on functor and monad based convergence. On the other hand, rough and Kleene monads are novelties where their acceptance and potential for applications is yet to be seen. Clearly, both in the case of rough sets as well as for Kleene algebras, when we generalize from ordinary relations and strings to enable more elaborate set functors extendable to partially ordered monads (and there are quite a few of them!), we open up entirely new possibilities for semantic considerations of programming languages and decision support models involving formal logic and uncertainties. Composing partially ordered monads will be as important as composing monads. The term monad, and its generalizations through compositions, will continue to play an important role.

References
A. V. Aho, J. E. Hopcroft, J. D. Ullman, The Design and Analysis of Computer Algorithms, Addison- Wesley, 1975.
M. Barr, C. Wells, Toposes, Triples and Theories, Springer-Verlag, 1985.
H.P. Butzmann, G. Kneis, On Cˇech-Stone compactifications of pseudo-topological spaces, Math. Nachr.
128 (1986), 259-264.

P. Eklund, M.A. Gal´an, Monads can be rough, S. Greco et al. (Eds.), Proc. Fifth Internat. Conf. Rough Sets and Current Trends in Computing (RSCTC 2006), Lecture Notes in Artificial Intelligence 4259 (2006), 77-84.
P. Eklund, M.A. Gal´an, W. G¨ahler, J. Medina, M. Ojeda Aciego, A. Valverde, A note on partially ordered generalized terms, Proc. of Fourth Conference of the European Society for Fuzzy Logic and Technology and Rencontres Francophones sur la Logique Floue et ses applications (Joint EUSFLAT- LFA 2005), 793-796.
P. Eklund, W. G¨ahler, Generalized Cauchy spaces, Math. Nachr. 147 (1990), 219-233.
P. Eklund, W. G¨ahler, Fuzzy Filter Functors and Convergence, Applications of category theory to fuzzy subsets (ed. S. E. Rodabaugh, E. P. Klement, U. H¨ohle), Theory and Decision Library B, Kluwer, 1992, 109-136.
P. Eklund, W. G¨ahler, Completions and Compactifications by Means of Monads, in: Fuzzy Logic, State of the Art, R. Lowen and M. Roubens (eds.), Kluwer, 1993, 39-56.
P. Eklund, W. G¨ahler, Partially ordered monads and powerset Kleene algebras, Proc. 10th Information Processing and Management of Uncertainty in Knowledge Based Systems Conference (IPMU 2004).
W. G¨ahler, A topological approach to structure theory, Math. Nachr. 100 (1981), 93-144.
W. G¨ahler, Monads and convergence, Proc. Conference Generalized Functions, Convergences Structures, and Their Applications, Dubrovnik (Yugoslavia) 1987, Plenum Press, New York, 1988, 29-46.
W. G¨ahler, Completion theory, in: Mathematisches Forschungsinstitut Oberwolfach, Tagungsbericht 48/1991, 8.
W. G¨ahler, General Topology – The monadic case, examples, applications, Acta Math. Hungar. 88
(2000), 279-290.
W. G¨ahler, Extension structures and completions in topology and algebra, Seminarberichte aus dem Fachbereich Mathematik, Band 70, FernUniversit¨at in Hagen, 2001.
W. G¨ahler, P. Eklund, Extension structures and compactifications, In: Categorical Methods in Algebra and Topology (CatMAT 2000), 181-205.
P. H´ajek, Metamathematics of Fuzzy Logic, Kluwer Academic Publishers, 1998.
J. J¨arvinen, On the structure of rough approximations, Fundamenta Informaticae 53 (2002), 135-153.
H. H. Keller, Die Limesuniformisierbarkeit der Limesra¨ume, Math. Ann. 176 (1968), 334-341.
S. C. Kleene, Representation of events in nerve nets and finite automata, In: Automata Studies (Eds. C. E. Shannon, J. McCarthy), Princeton University Press, 1956, 3-41.
J. Kortelainen, A Topological Approach to Fuzzy Sets, Ph.D. Dissertation, Lappeenranta University of Technology, Acta Universitatis Lappeenrantaensis 90 (1999).
H.-J. Kowalsky, Limesr¨aume und Komplettierung, Math. Nachr. 12 (1954), 301-340.
E. G. Manes, Algebraic Theories, Springer, 1976.
Z. Pawlak, Rough sets, Int. J. Computer and Information Sciences 5 (1982) 341356.
G. D. Richardson, A Stone-Cˇech compactification for limit spaces, Proc. Amer. Math. Soc. 25 (1970), 403-404.
D. E. Rydeheard, R. M. Burstall, A categorical unification algorithm, Proc. Summer Workshop on Category Theory and Computer Programming, 1985, LNCS 240, Springer-Verlag, 1986, 493-505.
A. Salomaa, Two complete axiom systems for the algebra of regular events, J. ACM 13 (1966), 158-169.
A. Tarski, On the calculus of relations, J. Symbolic Logic 6 (1941), 65-106.
