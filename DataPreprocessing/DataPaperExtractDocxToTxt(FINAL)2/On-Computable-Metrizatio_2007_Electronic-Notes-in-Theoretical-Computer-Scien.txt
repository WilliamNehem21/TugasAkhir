	Electronic Notes in Theoretical Computer Science 167 (2007) 345–364	
www.elsevier.com/locate/entcs

On Computable Metrization
Tanja Grubba1
Department of Mathematics and Computer Science University of Hagen
Hagen,Germany
Klaus Weihrauch2
Department of Mathematics and Computer Science University of Hagen
Hagen,Germany

Abstract
Every second-countable regular topological space X is metrizable. For a given “computable” topo- logical space satisfying an axiom of computable regularity M. Schr¨oder [9] has constructed a com- putable metric. In this article we study whether this metric space (X, d) can be considered com- putationally as a subspace of some computable metric space [13]. While Schr¨oder’s construction is “pointless”, i.e., only sets of a countable base but no concrete points are known, for a computable metric space a concrete dense set of computable points is needed. By partial completion we extend (X, d) to a metric space (X˜ , d˜) with computable metric and canonical representation. We construct a computable sequence (xi)i∈N of points which is dense in (X˜ , d˜). The isometric embedding of X into X˜ is computable. Its inverse is computable if some further computability axiom holds true. The space (X˜ , d˜) can be embedded computationally into the computable metric space generated by the sequence (xi)i∈N of points. The inverse of this embedding is continuous.
Keywords: Computable Analysis, TTE, computable metrization, computable embedding, computable metric space


Introduction
Computable Analysis connects Computability/Computational Complexity with Analysis/Numerical Computation by combining concepts of approxima-

1 Email:tanja.grubba@fernuni-hagen.de
2 Email:klaus.weihrauch@fernuni-hagen.de




1571-0661 © 2007 Elsevier B.V. Open access under CC BY-NC-ND license.
doi:10.1016/j.entcs.2006.08.020

tion and of computation. During the last 70 years various mutually non- equivalent models of real number computation have been proposed ([11], Chap. 9 in [13]). Among these models the representation approach (Type-2 Theory of Effectivity, TTE) [13] introduced for real functions by Grzegorczyk and Lacombe [6,7] seems to be particularly realistic, flexible and expressive. So far the study of computability on sets of points, sets (open, closed, compact) and continuous functions has developed mainly bottom-up, i.e., from the real numbers to Euclidean space and metric spaces [17,2,15,13,18,1,19]. But often generalisations to more general spaces are needed (locally compact Hausdorff spaces [3], non-metrizable spaces [16], second countable T0-spaces [9,5]). In this article we study computability in basic topology using the representation approach to computable analysis.
Schr¨oder [9] has shown that every “computably regular” space has a com- putable metric generating the same topology. In his proof he effectivizes a classical proof where the metric is defined from a sequence of pseudo-metics each of which is defined via an Urysohn function [4] which can be interpreted as a contour map on the space. On the other hand, in TTE computable met- ric spaces are defined axiomatically [13] by a dense sequence of points with computable distances. So the question arises whether the “computably regu- lar” space with computable metric can be considered as a computable metric space. Schr¨oder’s top-down approach is pointless, that is, only basic open sets “are known” and handled via code names. Concrete points, in particular computable ones, are not considered. It is even possible that the space con- tains no computable points at all. Since every computable metric space must have a dense set of computable points a computably metrizable space cannot be a computable metric spaces in general. In this article we study whether Schr¨oder’s space with computable metric can be embedded into a computable metric space.
It has turned out that the concept of a computable topological space from
[13] is not optimal for a top-down study of computability in topology. There- fore we start from a slightly different concept of “computable T0-spaces” (al- ready considered in [5]). In Section 3 we discuss the new definition, introduce (standard) representations of the points and the open sets and show that they meet our intuition very well by considering robustness and a basic intuitive idea of “x ∈ O” for an open set O.
Since for our construction of computable points we need details of Schr¨oder’s proof of computable metrization [9] (which as part of a TR is not easily accessible) in Section 4 we outline his proof in a slightly modified terminology. Most of the proofs from Sections 3 and 4 are omitted.
In Section 5 we show that the represented metric space (X, δX) has a

“weak completion” (X˜, δ˜) in which we can find a computable dense set of points. The embedding from (X, δX) to (X˜, δ˜X) is computable, its inverse is continuous and even computable in some cases. The computable dense set induces a Cauchy representation δC of the space. The embedding from (X˜, δ˜) to (X˜, δC) is computable, its inverse is at least continuous.

Preliminaries
In this article we use the framework of TTE (Type-2 theory of effectivity), see [13] for more details. A partial function from X to Y is denoted by f : ⊆ X → Y . We assume that Σ is a fixed finite alphabet containing the symbols 0 and 1 and consider computable functions on finite and infinite sequences of symbols Σ∗ and Σω, respectively, which can be defined, for example, by Type-2 machines, i.e., Turing machines reading from and writing on finite or infinite tapes. We use the “wrapping function” ι : Σ∗ → Σ∗, ι(a1a2 ... ak) := 110a10a20 ... ak011 for coding words such that ι(u) and ι(v) cannot overlap properly. We consider standard functions for finite or countable tupling on Σ∗ and Σω denoted by ⟨·⟩ . By “ ” we denote the subword relation.
We use the concept of multi-functions. A multi-valued partial function, or multi-function for short, from A to B is a triple f = (A, B, Rf ) such that Rf ⊆A × B (the graph of f ). Usually we will denote a multi-function f from A to B by f : ⊆ A ⇒ B. For X⊆A let f [X] := {b ∈ B | (∃a ∈ X)(a, b) ∈ Rf }
and for a ∈ A define f (a) := f [{a}]. Notice that f is well-defined by the
values f (a)⊆B for all a ∈ A. We define dom(f ) := {a ∈ A | f (a) /= ∅}. In the applications we have in mind, for a multi-function f : ⊆ A ⇒ B, f (a) is
interpreted as the set of all results which are “acceptable” on input a ∈ A.
Any concrete computation will produce on input a ∈ dom(f ) some element b ∈ f (a), but usually there is no method to select a specific one. In accordance with this interpretation the “functional” composition g ◦ f : ⊆ A ⇒ D of
f : ⊆ A ⇒ B and g : ⊆ C ⇒ D is defined by dom(g ◦ f ) := {a ∈ A |
a ∈ dom(f ) and f (a)⊆dom(g)} and g ◦ f (a) := g[f (a)] (in contrast to “non-
deterministic” or “relational” composition gf defined by g f (a) := g[f (a)] for
all a ∈ A).
Notations ν : ⊆ Σ∗ → M and representations δ : ⊆ Σω → M are used for introducing relative continuity and computability on “abstract” sets M . For a representation δ : ⊆ Σω → M , if δ(p) = x then the point x ∈ M can be identified by the “name” p ∈ Σω.
For naming systems γi : ⊆ Yi → Mi (i = 0,... , k), a function h : ⊆ Y1 ×
... × Yk → Y0 is a (γ1,... , γk, γ0)-realization of f : ⊆ M1 × ... × Mk ⇒ M0, if
γ0 ◦ h(p1,... , pk) ∈ f (γ1(p1),... , γk(pk)) whenever f (γ1(p1),... , γk(pk) exists.

The multi-function f is (γ1,... , γk, γ0)-continuous (–computable), if it has a continuous (computable) (γ1,... , γk, γ0)-realization.
For naming systems γ : ⊆ Y ⇒ M and γ' : ⊆ Y ' → M ' (Y, Y ' ∈ {Σ∗, Σω}), let γ ≤t γ' (t-reducible) and γ ≤ γ' (reducible), iff the identity id : a '→ a
(a ∈ M ) is (γ, γ')-continuous and (γ, γ')–computable, respectively. Define t- equivalence and equivalence as follows: γ ≡t γ' ⇐⇒ (γ ≤t γ' and γ' ≤t γ) and γ ≡ γ' ⇐⇒ (γ ≤ γ' and γ' ≤ γ), respectively.
Two representations induce the same continuity or computability, iff they are t-equivalent or equivalent, respectively. If multi-functions on represented sets have realizations, then their composition is realized by the composition of the realizations. In particular, the computable multi-functions on represented sets are closed under composition.	Much more generally, the computable multi-functions on represented sets are closed under flowchart programming with indirect addressing [14]. This result allows convenient informal construc- tion of new computable functions on multi-represented sets from given ones.
Let νN : ⊆Σ∗ → N be some standard notation of the natural numbers, let ρ, ρ< and ρ> be the Cauchy representation, the lower representation and the upper representation of the real numbers, respectively. For representations δ : ⊆ Σω → M and δ' : ⊆ Σω → M ' define [δ, δ']⟨p, p'⟩ := (δ(p), δ(p')), δ ∧
δ'⟨p, p'⟩ = x, iff δ(p) = δ'(p') = x and [δ]ω⟨p0, p1, p2,.. .⟩ := δ(p0) × δ(p1) ×
δ(p2) × ... [13].

Representations of Points and Open Sets
In this section we define computable T0-spaces and summarize arguments showing that the standard representations of points and open subsets are very natural.
A topological space X = (X, τ ) is a T0-space, if for all x, y ∈ X such that x /= y there is an open set U ∈ τ such that x ∈ U ⇐⇒ y /∈ U . In a T0-space every point can be identified by the set of its neighbourhoods U ∈ τ . A space X is called second-countable, if it has a countable base [4]. In the following we consider only second countable T0-spaces. For introducing concepts of effectivity we assume that some notation ν of a base β with recursive domain is given.
Definition 3.1 [effective/computable T0-space]
An effective T0-space is a tuple X = (X, τ, β, ν) such that (X, τ ) is a second countable T0-space and ν : ⊆Σ∗ → β is a notation of a base β of τ with recursive domain. We assume that U /= ∅ for U ∈ β.
We call an effective T0-space X a computable T0-space, iff it has com-

putable intersection, that is, if there is a computable function h : ⊆
Σ∗ × Σ∗ → Σω such that for all u, v ∈ dom(ν),
ν(u) ∩ ν(v)=  {ν(w) | w ∈ dom(ν) and ι(w)  h(u, v)} .
Notice that for every effective T0-space there is a function h : ⊆ Σ∗ × Σ∗ → Σω, which is continuous since Σ∗ is discrete, such that (1) holds true. Therefore, Part (ii) in Def. 3.1 does not restrict the topology. In the definition of a computable T0-space the computable function h can be replaced by an
r.e. set: X is computable, iff there is an r.e. set B⊆(dom(ν))3 such that for all u, v ∈ dom(ν),
ν(u) ∩ ν(v)=  {ν(w) | (u, v, w) ∈ B} .
Starting from a notation ν with r.e. domain is not more general since then
there is an equivalent notation ν˜ with recursive domain such that the repre- sentations of points and sets introduced below by ν and ν˜ become equivalent.
In [13] Def. 3.2.1 an “effective topological space” is a triple S = (X, σ, ν') such that ν' : ⊆ Σ∗ → σ is a notation of a countable subbase σ of a T0- topology τ on X. S is called “computable”, if its equivalence problem {(u, v) ∈ (dom(ν'))2 | ν'(u) = ν'(v)} is recursively enumerable. For a foundation of Computable Topology, this new definition 3.1 seems to be more useful than the former definition from [13]. We give a short review of the differences:
While ν now is a notation of a base β, ν' is a notation of a subbase σ. Of course, β is also a subbase. On the other hand, from ν' the canonical notation ν¯ of the finite intersections of subbase elements is a notation of a base. But generally empty intersections cannot be excluded computationally.
We assume now that dom(ν) is recursive, but dom(ν') may be not even r.e. for an effective topological space but must be r.e. for a computable topological space.
While for an effective topological space the notation ν¯ satisfies (1) triv- ially, we require now (1) explicitly for a computable T0-space. Finally, for a computable topological space the equivalence problem of ν' must be r.e. while for the equivalence problem of ν there is no restriction.
In the following let X = (X, τ, β, ν) be an effective T0-space. For technical reasons we introduce
Dν := {q ∈ Σω | w ∈ dom(ν) if ι(w)  q} .
First, we define the standard representation of X.
Definition 3.2 [standard representation of X]
Define the standard representation δX : ⊆Σω → X of	X as follows: dom(δX)⊆Dν and for all x ∈ X and p ∈ Dν,

δX(p)= x : ⇐⇒ {w ∈ dom(ν) | x ∈ ν(w)} = {w | ι(w)  p} .
A δX-name p of an element x ∈ X is a list of all words w such that

x ∈ ν(w). The definition of δX corresponds to the definition of δ'
in [13],

Lemma 3.2.3, in particular, δX is admissible with final topology τ (Sec. 3.2 in [13]).
The definition of δX is “robust”.
Definition 3.3 [recursively related spaces]
We call two effective T0-spaces X1 = (X, τ, β1, ν1) and X2 = (X, τ, β2, ν2)
recursively related, iff there are computable functions g, g' : ⊆ Σ∗ → Σω auch that

​
ν1(u)=	 
ι(w)Qg(u)
ν2(w)	and	ν2(v)=	 
ι(w)Qg'(v)
ν1(w) .

Equivalently, X1 and X2 are recursively related, iff there are r.e. sets
C, C'⊆Σ∗ × Σ∗ such that

​
ν1(u)=	 
(u,w)∈C
ν2(w)	and	ν2(v)=	 
(v,w)∈C'
ν1(w) .

In particular, X1 and X2 are recursively related, if ν1 ≡ ν2.
Lemma 3.4 (δX is robust)
For effective T0-spaces X1 = (X, τ, β1, ν1) and X2 = (X, τ, β2, ν2),
δX1 ≡t δX2 ;
δX1 ≡ δX2 if X1 and X2 are recursively related.
For the representation δX the relation x ∈ U for x ∈ X and U ∈ β becomes recursively enumerable (more precisely [δX, ν]-r.e., Definitions 3.1.3 and 3.3.3 in [13], see Lemma 3.7). We introduce the inner representation of the the set τ of the open and the outer representation of the set τc := {Oc | O ∈ τ } of closed sets.
Definition 3.5 [representations of open and closed sets]
Define the inner representation θ< : ⊆Σω → τ by dom(θ<) := Dν and

​
θ<(p) := 
ι(w)Qp
ν(w) .

Define the outer reperesentation ψ> : ⊆Σω → τc by
ψ>(p) := X \ θ<(p) .
Thus, θ<(p) is the union of all ν(w) such that w is listed by p. The outer representation of the closed sets is defined by the inner representation of their

complements. In [13] for subsets of the Euclidean space, θ< is called θen and
ψ> is called ψen. In [2,1] for computable metric spaces, ψ> is called δunion.
The computable version of “β ⊆τ ” is ν ≤ θ<. In fact, the computable function h : v '→ ι(v)000 ... translates ν to θ<. Recursively related spaces induce equivalent set representations:
Lemma 3.6 (θ< and ψ> are robust)
For effective T0-spaces X1 = (X, τ, β1, ν1) and X2 = (X, τ, β2, ν2),
θ< ≡t θ< and ψ> ≡t ψ> ;
1	2	1	2
θ< ≡ θ< and ψ> ≡ ψ>, if X1 and X2 are recursively related.
1	2	1	2

The representation
θ˜ of the open sets where a name of O lists all u ∈

dom(ν1) such that ν1(u)⊆O is not useful since it is not robust in general (Theorem 5.1.14 in [13]).
As a fundamental idea about “open” the property x ∈ O can be verified by looking close enough to (zooming in on) x and O. In terms of computability the relation should be recursively enumerable: x ∈ O is true, iff we will know this fact after a finite computation. For a discussion of the concept of open see [10]. By the following lemma the representations δX and θ< can be characterized up to equivalence as maximal elements among representations for which the element relation is open or r.e., respectively. It substantiates again that the representations δX and θ< are very “natural”. Let “x ∈ U ”:=
{(x, U ) ∈ X × β | x ∈ U } and “x ∈ O”:= {(x, O) ∈ X × τ | x ∈ O}.
Lemma 3.7 Let X = (X, τ, β, ν) be an effective T0-space. Then for every representation δ : ⊆Σω → X and θ : ⊆Σω → τ,
“x ∈ U” is (δ, ν) -open ⇐⇒ “x ∈ O” is (δ, θ<) -open	⇐⇒	δ ≤t δX ,
“x ∈ U” is (δ, ν) -r.e. ⇐⇒ “x ∈ O” is (δ, θ<) -r.e.	⇐⇒	δ ≤ δX ,
“x ∈ O” is (δX, θ) -open ⇐⇒ θ ≤t θ< ,
“x ∈ O” is (δX, θ) -r.e.	⇐⇒ θ ≤ θ<  (for computable X).
Finite and countable union and finite intersection on open sets are com- putable, more precisely:
Lemma 3.8
Let X = (X, τ, β, ν) be an effective T0-space. Then
countable union on τ is ([θ<]ω, θ<)–computable,
intersection is (θ<, θ<, θ<)–computable, if X is computable.
Instead of listing all basic open sets containing x we could list “sufficiently many” basic neighbourhoods.

Definition 3.9
Define a reperesentation δb

: ⊆Σω → X of X as follows: dom(δb )⊆Dν and

for all x ∈ X and p ∈ Dν,
δb (p)= x : ⇐⇒ {ν(u) | ι(u)  p} is a neighborhood base of x. 
Lemma 3.10
δX ≤ δb ,
δb ≤t δX,
in general neither δb ≤ δX nor the relation x ∈ U is [δb , ν]-r.e.
Proof: i. Obvious.
Let q ∈ Σω be a(n encoded) list of all (u, v) such that ν(u)⊆ν(v). Then for some computable function h : ⊆Σω × Σω → Σω, p '→ h(p, q) translates δb
to δX
Omitted.	 


Effective Metrization
In [9] Schr¨oder has constructed a computable metric for a given “computable” regular space. We will extend this space to a bigger one by adding a dense set of computable points. Since for this purpose we return to the details of Schr¨oder’s proof we outline it in this section using a slightly modified termi- nology.
A T0-space X = (X, τ ) is regular, if for every x ∈ X and every neighbour- hood V of x there exists a neighbourhood U of x such that x ∈ U¯ ⊆ V ([4]).
By a simple argument, every regular space is a a T2-space (Hausdorff space). A T0-space X = (X, τ ) is normal, if for every pair (A, A') of disjoint closed sets there is a pair (O, O') of disjoint open sets such that A⊆O and A'⊆O'. The following definition is equivalent to that from [9].
Definition 4.1 [computably regular space]
A computably regular space is a computable T0-space X = (X, τ, β, ν) for which there is a computable function t3 : ⊆ Σ∗ × Σ∗ → Σω such that for R := dom(t3),

(∀v ∈ dom(ν)), ν(v)=	 
(u,v)∈R
ν(u),  and

(∀(u, v) ∈ R) ν(u) ⊆ ψ>(t3 (u, v)) ⊆ ν(v)

Every computably regular space is regular. Every countably based regular

space is normal [4]. We prove a computable version.
Definition 4.2 [computably normal]
A computably normal space is a computable T0-space such that the multifunc- tion T4 : ⊆τc × τc ⇒ τ × τ defined by
dom(T4) := {(A, B) ∈ τc × τc | A ∩ B = ∅},
(OA, OB) ∈ T4 (A, B): ⇐⇒ A⊆OA ∧ B⊆OB ∧ OA ∩ OB = ∅,
is (ψ>, ψ>, θ<, θ<)–computable.
Theorem 4.3 (computably regular implies computably normal)
Every computably regular space is computably normal.
In the metrization proof in [9,4] a sequence of pseudometrics is defined each of which is constructed via a sequence of sets inducing contour levels on the space X.
Definition 4.4	(i) Let r : N → {q ∈ Q | 0 ≤ q ≤ 1} be a bijective standard numbering with r0 =0 and r1 =1 
(ii) and define the set of contour maps on X by
CM := {(Vi, Ci)i∈N | Vi ∈ τ, Ci ∈ τc, Vi ⊆ Ci ⊆ Vj if ri < rj, for i, j ∈ N} .

For any sequence (Vi, Ci)i∈N ∈ CM, the boundary of each set Vi can be considered as a contour line of level ri ∈ Q. Since these lines do not cross, the sequence (Vi, Ci)i∈N ∈ CM can be considered as a contour map on the space X with a hollow V0 of level 0 and the top of a hill C1 of level 1. For a computably normal space, from V0 and V1 a contour map (Vi, Ci)i∈N ∈ CM can be computed.
Lemma 4.5 Let X = (X, τ, β, ν) be computably normal space. Deﬁne SEQ :
⊆τc × τc ⇒ (τ × τc)N by
dom(SEQ) := {(A, B) ∈ τc × τc | A ∩ B = ∅},
(Vi, Ci)i∈N ∈ SEQ(A, B): ⇐⇒ (Vi, Ci)i∈N ∈ CM, A ⊆ V0 and V1 = Bc.
Then SEQ is (ψ>, ψ>, [θ<, ψ>]ω)–computable.
A contour map (Vi, Ci)i∈N ∈ CM can be “extended” to a continuous real function on X.

Lemma 4.6 Let X = (X, τ, β, ν) be computably normal space and deﬁne
SF : ⊆(τ × τc)N → C(X, [0, 1]) by
dom(SF) = CM,


SF((V ,C )
)(x)= ⎧⎨ inf{rs | x ∈ Vs}	if x ∈ V1 .

i	i i∈N
1	otherwise

Then SF is ([θ<, ψ>]ω, [δX → ρ])–computable, SF((Vi, Ci)i∈N)[V0] = {0} and
SF((Vi, Ci)i∈N)[X \ V1]= {1}.
As a by-product we get a computable Urysohn theorem.
Corollary 4.7 (computable Urysohn)
Let X = (X, τ, β, ν) be computably normal space. Then the multi-function UR := SF ◦ SEQ mapping every pair (A, B) of disjoint closed sets to all continuous functions f : X → [0; 1] such that f [A] = 0 and f [B] = 1 is (ψ>, ψ>, [δX → ρ])—computable.
For a definition of the representation [δX → ρ] see [13]. Let X = (X, τ, β, ν) be a computably regular space and let k '→ (uk, vk) be a canonical numbering of the r.e. set R = dom(t3) from Definition 4.1.
Lemma 4.8 There is a sequence ((V k, Ck)i∈N)k∈N of contour maps such that
i	i
ν(uk)⊆V k and ν(vk)= V k,
0	1
(k, i) '→ (V k, Ck) is (νN, νN, [θ<, ψ>])–computable.
i	i
Proof: For each k compute some element
(V k, Ck)i∈N ∈ SEQ(ψ>(t3(uk, vk), ν(vk)c)) .
i	i
Notice that U '→ Uc is (ν, ψ>)–computable.	 

Lemma 4.9 For the computable sequence of contour maps from Lemma 4.8 deﬁne sequences of functions (fk)k and (dk)k of real functions on X by
fk := SF((V k, Ck)i∈N),
i	i
dk(x, y) := | fk(x) − fk(y) | .
Then for each k, dk is a continuous (w.r.t. τ) pseudometric on X and
(k, x) '→ fk(x) is (νN, δX, ρ)–computable, and
(k, x, y) '→ dk(x, y) is (νN, δX, δX, ρ)–computable.

The proof is obvious. From the sequenc (dk)k of pseudometrics a com- putable metric can be defined.
Theorem 4.10 (effective metrization)
The function d : X × X → R deﬁned by
d(x, y) := Σ 2−kdk(x, y)
k=0
is a (δX, δX, ρ)–computable metric on X inducing the topology τ.

Computable Dense Subsets and Embedding to Com- putable Metric Spaces

A computable metric space [12,13] is a tuple M = (M, d, A, α) such that (M, d) is a metric space and α : ⊆ Σ∗ → A is a notation with recursive domain of a (countable) dense subset A⊆M such that the distance on A, (a, b) '→ d(a, b), is (α, α, ρ)–computable. The canonical representation of a computable metric space is the Cauchy representaion defined by δC(p) = x, iff p = ι(u0)ι(u1)ι(u2) ... such that (∀i)d(x, α(ui)) ≤ 2−i. In particular, the elments a ∈ A are δC–computable.
In the previous section for a computably regular space X = (X, τ, β, ν) we have constructed a (δX, δX, ρ)–computable metric (Definition 4.10) which generates the topology τ . But this does not mean that we have found a com- putable metric space since we do not have a dense set of computable points where computable means δX–computable such that the Cauchy representation is equivalent to δX. In general, a computably regular T0-space X with com- putable metric d may have no δX–computable points at all. But there is hope to find a dense set of computable points in its metric completion.
Example 5.1 Consider the computable T0-space X = (R, τR, Int, I) (Defini- tion 3.1) where τR is the Euclidean topology and I is a standard notation of the set Int of open intervals with rational end-points. Let δX be the “topological” standard representation of X (Definition 3.2). On the other hand, for the real numbers there is the computable metric space M = (R, d, Q, νQ) with Cauchy representation ρ. Since δX ≡ ρ, νQ is a notation of a set of δX–computable points.
Let X' = (R',τ ' , Int', I') be the space obtained from X by deleting all the ρ–computable points. Since ν(u)⊆ν(v) ⇐⇒ ν'(u)⊆ν'(v), X' is a computable T0-space. The embedding x '→ x from X' to X is (δX' , δX)–computable and its inverse is (δX, δX' )–computable. Therefore, X' cannot contain any δX' –

computable point, since the computable embedding would map it to a δX– computable, hence ρ–computable point.
There are various methods of metric completion. Embedding X into the (complete) Banach space B(X) of bounded functions from X into R (4.41 in [8]) requires a computability concept on B(X) which is a new problem. For effective completion via Cauchy sequences on a countable dense set (19.33 in [8], [13]) we need to know (computable) points, but we do not have such points. A third method can be derived from Cauchy’s intersection property: A metric space is complete, iff n Sn /= ∅ for every descending sequence of nonempty closed sets Sn such that dm(Sn) ≤ 2−n. A completion of our metric space (X, d) can be constructed by considering all (or sufficiently many) nested sequences of closed sets, introducing a pseudometric on these sequences and factorizing. It turns out that in our case we can compute suﬃciently many sequences in order to find a dense set of computable points in a “partial completion” of (X, d).
Notice, that so far our approach to computable topology was pointless. We have handled the notation ν of basic sets but have not considered any concrete points of the space X. Points occur only hypothetically. For example, if a function f is (δX, δX)–computable, then there is a Tpe-2 machine, which from a name p ∈ Σω of some point x computes some name of f (x). By our concept of realization, the machine works correctly for correct inputs but may behave arbitrarily otherwise. However, the machine is not able to check whether an input sequence is a correct name. It is the “user” who must “understand” the representation δX and who is “responsible” himself for supplying the machine with correct names of points.
In this section we extend our computably regular space X = (X, τ, β, ν) in such a way that the extension contains a dense set of computable points with computable distances. We start from the computable sequence (fk)k∈N of contour functions from Lemma 4.9. In the following we consider implicitly νN and some standard notation of the finite sequences of rational numbers. We begin with a technical lemma.
Lemma 5.2
There is a computable function h : (v, p, m) '→ (u, (a0, b0,... , am, bm)) mapping every v ∈ dom(ν), every p such that δX(p) ∈ ν(v) and every m ∈ N to some word u ∈ dom(ν) and a sequence of rational numbers such that for all k ≤ m,

δX(p) ∈ ν(u)⊆ν(u)⊆ν(v) ,
0 < bk − ak ≤ 2−m ,
ν(u)⊆f −1[ak; bk] .

Proof: First, from v and p some u' can b e computed such that δX(p) ∈ ν(u') and (u', v) ∈ R (Definition 4.1). Then ν(u')⊆ν(v). By Lemma 4.9, the function
(m, a, b) '→ f −1(a; b) is (νN, νQ, νQ, θ<)–computable
(0 ≤ a < b ≤ 1). There are rational numbers a0, b0,... , am, bm such that (∀k ≤ m)0 < bk − ak ≤ 2−m and
δX(p) ∈ ν(u') ∩ f −1(a0; b0) ∩ ... ∩ f −1(am; bm) /= ∅ .
0	m
Applying exhaustive search, by Lemma 3.8 and (21) some word u and rational numbers a0, b0,... , am, bm can be computed such that (∀k ≤ m)0 < bk − ak ≤ 2−m and
δX(p) ∈ ν(u)⊆ν(u') ∩ f −1(a0; b0) ∩ ... ∩ f −1(am; bm) .
0	m
(18-20) follow immediately.	 
The following similar lemma can be proved accordingly.
Lemma 5.3
There is a computable function h' : (v, m) '→ (u, (a0, b0,... , am, bm)) mapping every v ∈ dom(ν) and every m ∈ N to some word u ∈ dom(ν) anda sequence of rational numbers such that for all k ≤ m,

ν(u)⊆ν(u)⊆ν(v) ,
0 < bk − ak ≤ 2−m ,
ν(u)⊆f −1[ak; bk] .
By the following lemma in every base element ν(v) we can compute a nested sequence (Ui)i∈N of base elements and a sequence of real numbers (yk)k∈N such that for every pseudometric dk, the diameters dmk(Ui) and the distances dk(Ui, yk) converge to 0 rapidly.
Lemma 5.4
There is a (1IΣ∗ , [νω, ρω])–computable function H : w '→ ((Ui)i∈N, (yk)k∈N) mapping each w ∈ dom(ν) to some sequence of base elements and some se- quence of real numbers such that for all i and for all k ≤ i,
U0 = ν(w),	(∀i) Ui+1⊆Ui ,
dmk(Ui) ≤ 2−i ,
sup{|fk(x) − yk|| x ∈ Ui}≤ 2−i.
Proof: We compute a sequence (ui)i of (names of) base elements and for each
k a sequence ((ak; bk))i∈N of intervals with rational endpoints inductively as
i	i

follows.
i = 0 : u0 := w, ak =0 and bk =1 for all k.
0	0
i> 0 : With the function h' from Lemma 5.3 define
(28()ui, (a0, b0,... , ai, bi)) := h'(ui−1, i), and ak =0 and bk =1 for k > i .
i	i	i	i	i	i
Define Ui := ν(ui). Then (25) follows from (22). By (24), Ui⊆f −1[ak; bk] for
k	i	i
k	k
0 ≤ bk − ak ≤ 2−i for k ≤ i. Therefore, yk such that {yk} =	[ak; bk] exists.
(27) follows from yk ∈ [ak; bk], 0 ≤ bk − ak ≤ 2−i for k ≤ i and Ui⊆f −1[ak; bk].
i	i	i	i	k	i	i
Since 0 ≤ bk − ak ≤ 2−i for k ≤ i, the sequence of intervals converges rapidly
i	i
such that the real numbers yk can be computed.
(26) follows from Ui⊆f −1[ak; bk] and 0 ≤ bk − ak ≤ 2−i for k ≤ i.	 
k	i	i	i	i
The following lemma can be proved accordingly by using Lemma 5.2 in- stead of Lemma 5.3
Lemma 5.5

There is a (1IΣω , [νω
, ρω])–computable function H'
: p '→ ((Ui)i∈N, (yk)k∈N)

mapping each p ∈ dom(δX) to some sequence of base elements and some se-
quence of real numbers such that for all i and for all k ≤ i,
U0 = ν(w),	(∀i) δX(p) ∈ Ui+1⊆Ui ,
dmk(Ui) ≤ 2−i ,
sup{|fk(x) − yk|| x ∈ Ui}≤ 2−i.
Now we extend our computably regular space X = (X, τ, β, ν) with com- putable metric d from Theorem 4.10 to some space containing the limits of the sequences computed above. It is a “partial” completion via some nested sequences of closed balls. For a metric d on M and A, B⊆M we define, as usual, d(A, B) := infa∈A,b∈B d(a, b).
Definition 5.6 [partial completion]
Define a pseudometric space (S, dS) by
S := {(Ui)i∈N | Ui ∈ β, dm(Ui) < 2−i, Ui+1⊆Ui for all i ∈ N} , dS((Ui)i∈N, (Vi)i∈N) := sup d(Ui, Vi) .
i∈N
Let the metric space (X˜, d˜) be the factorization of the pseudometric space (S, dS) with respect to ∼, that is, (X˜, d˜)= (S/∼, dS/∼), where
(Ui)i∈N ∼ (Vi)i∈N ⇐⇒ sup d(Ui, Vi)= 0 .
i∈N

Let τ˜ be the topology generated by the metric d˜.
Lemma 5.7
The spaces (S, dS) and (X˜, d˜) are well-deﬁned.
Proof: Obviously, d(s, s') ≥ 0, d(s, s)= 0 and d(s, s')= d(s', s) for all s, s' ∈
S. It remains to prove the tiangle inequality for (Ui)i∈N, (Vi)i∈N, (Wi)i∈N ∈ S. For all i ∈ N and all x ∈ Ui, y', y'' ∈ Vi,z ∈ Wi,
d(x, z) ≤ d(x, y')+ d(y', y'')+ d(y'', z)
≤ d(x, y')+ 2−i + d(y'', z) since dm(Vi) < 2−i. This implies

d(Ui, Wi)= inf
x∈Ui
z∈Wi
d(x, z) ≤ d(x, y')+ 2−i + d(y'', z) .

Since this is true for all x, y', y'', z,


d(Ui, Wi) ≤ inf
x∈Ui
y'∈Vi
d(x, y')+ 2−i + inf
y''∈Vi
z∈Wi
d(y'', z)= d(Ui, Vi)+ 2−i + d(Vi, Wi) .



We obtain
d(Ui, Wi) ≤ sup d(Uj, Vj)+ 2−i + sup d(Vj, Wj)

j	j
and therefore,
sup d(Uj, Wj)= sup(d(Uj, Wj) − 2−j) ≤ sup d(Uj, Vj)+ sup d(Vj, Wj) ,
j	j	j	j
hence
dS((Ui)i∈N, (Wi)i∈N) ≤ dS((Ui)i∈N, (Vi)i∈N)+ dS((Vi)i∈N, (Wi)i∈N) .
The metric space (X˜, d˜) is obtained from the pseudometric space by identify- ing points of distance 0.	 
We introduce a canonical representation for the space (X˜, d˜) as follows.
Definition 5.8
Define a representation δ˜ of X˜ by
dom(δ˜) := {ι(u0)ι(u1) ... | ((ν(u0), ν(u1),.. .) ∈ S} ,
δ˜(ι(u0)ι(u1) .. .) := (ν(u0), ν(u1),.. .)/∼ .
Since the set S in Definition 5.6 does not contain all descending sequences of closed sets (or balls) in (X, d), the space (X˜, d˜) may be a proper subspace

of the completion of (X, d) (up to isometric mappings). But the space (X˜, d˜) already has a computable dense sequence of computable points. Furthermore, the space (X, d) can be embedded isometrically into (X˜, d˜). The inverse of
this embedding is continuous. For computability we introduce some further axiom.
Definition 5.9 [embedding]
Define a function emb : X → X˜ by
emb(x) := (Ui)i/∼ such that (Ui)i ∈ S and (∀i)x ∈ Ui .
Theorem 5.10
The embedding function emb is well-deﬁned, isometric and (δX, δ˜)– computable.
Its inverse is (δ˜, δX)-continuous.
Proof:
Prop. 1: For each p ∈ dom(δX) a sequence (Vj)j ∈ S can be computed such that (∀j)δX(p) ∈ Vj.
Proof 1: Let (Ui)i be the sequence computed by H' from p (Lemma 5.5. Define Vj := Uj+2. By (29), (∀j)δX(p) ∈ Vj. It remains to show dm(Vj) ≤ 2−j. Suppose x, y ∈ Vj. Since x, y ∈ Ui+2 by (30),

d(x, y)= Σ
k≤j+2
2−kdk(x, y)+ Σ
k>j+2
2−kdk(x, y)

≤ Σ
k≤j+2
2−k2−j−2 + Σ
k>j+2
2−k

≤ 2 · 2−j−2 + 2−j−2	<	2−j .
Therefore, dm(Vj) ≤ 2−j.
Prop. 2: If (Vj)j, (Wj)j ∈ S, (∀j)x ∈ Vj and (∀j)y ∈ Wj.
Then dS((Vj)j, (Wj)j)= d(x, y).
Proof 2: For all j, d(Vj, Wj) ≤ d(x, y) (since x ∈ Vj  and y ∈ Wj), hence
dS((Vj)j, (Wj)j)= supj d(Vj, Wj) ≤ d(x, y). Furthermore, for all j, all xj ∈ Vj and yj ∈ Wj,
d(x, y) ≤ d(x, xj)+ d(xj, yj)+ d(yj, y)
≤ 2−j + d(xj, yj)+ 2−j
since dm(Vj), dm(Wj) ≤ 2−j. Since this is true for all xj ∈ Vj and yj ∈ Wj,
d(x, y) ≤ 2 · 2−j + d(Vj.Wj) ≤ 2−j + dS((Vj)j, (Wj)j) Since this is true for all j, d(x, y) ≤ dS((Vj)j, (Wj)j).

Let δX(p) = δX(q) and let (Vj)j ∈ S and (Wj)j ∈ S be the sequences computed from p and q, repectively, according to Prop. 1. Then by Prop. 2, dS((Vj)j, (Wj)j = d(δX(p), δX(q)) = 0. Therefore, the function emb is well- defined and (δX, δ˜)–computable.

Immediately from Prop.	2 we conclude Therefore, the embedding is isometric.
d˜(emb(x), emb(y)) = d(x, y).

If δ˜(p)= emb(x) ∈ X˜, then p lists a neighbourhood base of x. Therefore the identity is a computable (δ˜, δb )-realization of emb−1 and emb−1 is (δ˜, δX)-continuous by Lemma 3.10.	 
Possibly neither emb−1 is (δ˜, δX)–computable nor the metric d˜ is (δ˜, δ˜, ρ)– computable on the set emb(X)⊆X˜. By the next theorem, however, there is

a notation α of a dense subset of X˜
computable on its range.
such that the distance
d˜ is (α, α, ρ)–

Theorem 5.11
There is a notation α : ⊆Σ∗ → A with recursive domain of some dense set A
in (X˜, d˜) such that α ≤ δ˜ and d˜ is (α, α, ρ)–computable on A.
Proof: We use the function H from Lemma 5.4. Let dom(α) := dom(ν). For each w ∈ dom(ν) let
α(w) := (Uj+2)j/∼ wherer (Ui)i = pr1H(w) .
As in the proof of Proposition 1 in the proof of Theorem 5.10, we can show (Uj+2)j ∈ S. Therefore, α is well-defined and α ≤ δ˜.
We show that range(α) is dense in X˜. Let x˜ ∈ X˜. Then x˜ = (ν(wi))i/∼
for some w0, w1,... ∈ dom(ν). For k ∈ N, α(wk)= (Vi)i/∼ for some sequence (Vi)i ∈ S such that Vi⊆ν(wk) for all i. Then
d˜((ν(wi))i/∼, (Vi)i/∼)= sup d(ν(wi), Vi) ≤ dm(ν(wk))) ≤ 2−k .
i
We show computability of d˜ on A. For H from Lemma 5.4 and u, v ∈
dom(ν)= dom(α) let
H(u)= ((Ui)i, (yj)j),
H(v)= ((Vi)i, (zj)j) .
For y ∈ Ui and z ∈ Vi (since in general | |a − b|− |c − d|| ≤ |a − c| + |b − d|), d(y, z) − Σ 2−k|yk − zk|
k≥0
= Σ 2−kdk(y, z)+ Σ 2−kdk(y, z) − Σ 2−k|yk − zk|− Σ 2−k|yk − zk| 


≤ Σ 2−k|fk(y) − fk(z)|− Σ 2−k|yk − zk| + 2−i+1

≤ Σ 2−k |fk(y) − fk(z)|− |yk − zk| + 2−i+1
k≤i
≤ Σ 2−k |fk(y) − yk| + |fk(z) − zk|  + 2−i+1
k≤i
≤ Σ 2−k(2−i + 2−i)+ 2−i+1	by (27)
k≤i
≤ 6 · 2−i
For s := Σk≥0 2−k|yk − zk|, s − 2−i+3 ≤ d(y, z) ≤ s + 2−i+3 and therefore,
s − 2−i+3 ≤ d(Ui, Vi) ≤ s + 2−i+3
since d(Ui, Vi) = inf{d(y, z) | y ∈ Ui,z ∈ Vi}. Since d(Ui, Vi) ≤ d(Ui+1, Vi+1), for all i,


We obtain
s − 2−i+3 ≤ sup d(Uj, Vj) ≤ s + 2−i+3 .
j


s = sup d(Uj, Vj)= dS((Ui+2)i, (Vi+2)i)= d˜(α(u), α(v)) .
j


Since the sequences (yi)i and (zi)i of real numbers can be computed from u and v and since yi, zi ≤ 2 by (27), s =  k≥0 2−k|yk − zk| = d˜(α(u), α(v)) can be computed from u and v.	 

So far for a computably regular space X = (X, τ, β, ν) with standard rep- resentation δX we have constructed a computable metric d generating τ and a metric space X˜ = (X˜, d˜) with representation d˜ such that
there is a (δX, δ˜)–computable isometric embedding emb : X → X˜,
emb−1 is (δ˜, δX)-continuous,

there is a notation α of a dense subset A⊆X˜
with recursive domain such

that α ≤ δ˜ and d˜ is (α, α, ρ)–computable on A.

For proving δb
≤t δX, that is, continuous reducibility of δb
to δX in

Lemma 3.10 we have used the set {(u, v) | ν(u)⊆ν(v)} as an “oracle”. In many applications there is some similar r.e. oracle for this purpose. In such a

case, δb
≡ δX. Since emb−1 is (δ˜, δb )–computable (proof of Theorem 5.10.ii)

the same oracles can be used to prove that emb−1 is (δ˜, δX)-continuous or
–computable.

Notice that (X˜, d˜, A, α) is a computable metric space [13]. The following Theorem summarizes these results.
Theorem 5.12
Let X = (X, τ, β, ν) be a computably regular space such that {(u, v) | ν(u)⊆ν(v)} is r.e. Then there is a (δX, δ˜)–computable isometric embedding to the computable metric space (X˜, d˜, A, α) and the inverse of the embedding is (δ˜, δX)–computable.
Given a computable metric space we have to consider the associated Cauchy representation (see [13]).
Definition 5.13
Let δC be the Cauchy representation of the computable metric space (X˜, d˜, A, α).

The representations
δ˜ and δC induce two computability concepts on X˜.

They are related as follows.
Theorem 5.14
δ˜ ≤ δC,	δC ≤t δ˜.
Proof: δ˜ ≤ δC: In the proof of Theorem 5.11 we have already proved that
A is dense. Suppose δ˜(p)= x Then by Definition 5.8, p = ι(w0)ι(w1) ... such
that x = (ν(w0), ν(w1),.. .)/∼. By (33) for all k, d˜(x, α(wk)) ≤ 2−k, hence
x = δC(ι(w0)ι(w1) .. .). Therefore, the identity translates δ˜ to δC.
δC ≤t δ˜: (Omitted)	 


Corollary 5.15
The distance d˜ on X˜
is (δ˜, δ˜, ρ)–computable.

Proof: This is true since d˜ is (δC, δC, ρ)–computable and δ˜ ≤ δC.	 


References
Brattka, V. and G. Presser, Computability on subsets of metric spaces, Theoretical Computer Science 305 (2003), pp. 43–76.
URL msubsets.html

Brattka, V. and K. Weihrauch, Computability on subsets of Euclidean space I: Closed and compact subsets, Theoretical Computer Science 219 (1999), pp. 65–93.
URL subsets.html
Collins, P., Continuity and computability on reachable sets, Theoretical Computer Science 341
(2005), pp. 162–195.

Engelking, R., “General Topology,” Sigma series in pure mathematics 6, Heldermann, Berlin, 1989.
Grubba, T. and K. Weihrauch, A computable version of Dini’s theorem for topological spaces, in: T. Grubba, P. Hertling, H. Tsuiki and K. Weihrauch, editors, Computability and Complexity in Analysis, Informatik Berichte 326 (2005), pp. 117–129, proccedings, Second International Conference, CCA 2005, Kyoto, Japan, August 25–29, 2005.
Grzegorczyk, A., Computable functionals, Fundamenta Mathematicae 42 (1955), pp. 168–202.
Lacombe, D., Extension de la notion de fonction r´ecursive aux fonctions d’une ou plusieurs variables r´eelles I, Comptes Rendus Acad´emie des Sciences Paris 240 (1955), pp. 2478–2480, th´eorie des fonctions.
Schechter, E., “Handbook of Analysis and Its Foundations,” Academic Press, San Diego, 1997.
Schr¨oder, M., Effective metrization of regular spaces, in: K.-I. Ko, A. Nerode, M. B. Pour- El, K. Weihrauch and J. Wiedermann, editors, Computability and Complexity in Analysis, Informatik Berichte 235 (1998), pp. 63–80, cCA Workshop, Brno, Czech Republic, August, 1998.
Smyth, M., Topology, in: S. Abramsky, D. Gabbay and T. Maibaum, editors, Handbook of Logic in Computer Science, Volume 1 (1992), pp. 641–761.
Stoltenberg-Hansen, V. and J. V. Tucker, Concrete models of computation for topological algebras, Theoretical Computer Science 219 (1999), pp. 347–378.
Weihrauch, K., Computability on computable metric spaces, Theoretical Computer Science 113
(1993), pp. 191–210, fundamental Study.
Weihrauch, K., “Computable Analysis,” Springer, Berlin, 2000.
Weihrauch, K., Multi-functions on multi-represented sets are closed under flowchart programming, in: T. Grubba, P. Hertling, H. Tsuiki and K. Weihrauch, editors, Computability and Complexity in Analysis, Informatik Berichte 326 (2005), pp. 267–300, proccedings, Second International Conference, CCA 2005, Kyoto, Japan, August 25–29, 2005.
Yasugi, M., T. Mori and Y. Tsujii, Effective properties of sets and functions in metric spaces with computability structure, Theoretical Computer Science 219 (1999), pp. 467–486.
Zhong, N. and K. Weihrauch, Computability theory of generalized functions, Journal of the Association for Computing Machinery 50 (2003), pp. 469–505.
Zhou, Q., Computable real-valued functions on recursive open and closed subsets of Euclidean space, Mathematical Logic Quarterly 42 (1996), pp. 379–409.
Ziegler, M., Computability on regular subsets of Euclidean space, Mathematical Logic Quarterly
48 (2002), pp. 157–181.
Ziegler, M., Computable operators on regular sets, Mathematical Logic Quarterly 50 (2004),
pp. 392–404.
