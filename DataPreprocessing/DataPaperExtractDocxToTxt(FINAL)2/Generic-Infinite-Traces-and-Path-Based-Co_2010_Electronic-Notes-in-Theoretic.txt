

Electronic Notes in Theoretical Computer Science 264 (2010) 83–103
www.elsevier.com/locate/entcs

Generic Infinite Traces and Path-Based Coalgebraic Temporal Logics
Corina Cˆırstea1
School of Electronics and Computer Science University of Southampton, UK

Abstract
This paper gives a general coalgebraic account of the notions of possibly infinite trace and possibly infinite execution in state-based, dynamical systems, by extending the generic theory of finite traces and executions developed by Hasuo and coauthors [8]. The systems we consider are modelled as coalgebras of endofunctors obtained as the composition of a computational type (e.g. nondeterministic or stochastic) with a general transition type. This generalises existing work by Jacobs [10] that only accounts for a nondeterministic computational type. We subsequently introduce path-based temporal (including fixpoint) logics for coal- gebras of such endofunctors, whose semantics is based upon the notion of possibly infinite execution. Our approach instantiates to both nondeterministic and stochastic computations, yielding, in particular, path- based fixpoint logics in the style of CTL* for nondeterministic systems, as well as generalisations of the logic PCTL for probabilistic systems.
Keywords: coalgebra, trace semantics, temporal logic, nondeterminism, probability


Introduction
Path-based temporal logics are commonly used as specification logics, particularly in the context of automatic verification. Instances of such logics include the logic CTL* with its fragments CTL and LTL for transition systems [3], and the logic PCTL for probabilistic transition systems [7]. In spite of the similarities shared by these logics, no general, unified account of path-based temporal logics exists.
Coalgebras are by now recognised as a truly general model of dynamical systems, instances of which subsume transition systems, their probabilistic counterparts, and many other interesting state-based models [14]. Moreover, the modal logics asso- ciated with coalgebraic models [13,1,2] are natural logics for specifying system be- haviour, that also instantiate to familiar logics in particular cases. These logics can be classified into one-step modal logics, wherein the semantics of modal operators

1 Email: cc2@ecs.soton.ac.uk

1571-0661 © 2010 Elsevier B.V. Open access under CC BY-NC-ND license.
doi:10.1016/j.entcs.2010.07.015

depends solely on the one-step behaviour of system states (as considered e.g. in [13,1]), and extensions of such logics with (e.g. fixpoint) operators whose interpre- tation depends on the long-term, possibly infinite behaviour of system states [2]. While (some of) the logics in the second category are able to express application- relevant temporal properties of states, their syntax does not directly refer to the computation paths from particular states, as is the case for logics such as CTL* and PCTL. Indeed, there is still no general, coalgebraic account of the notion of (infinite) computation path, as used in the semantics of CTL* and PCTL. Worse still, in the case of probabilistic transition systems, adding standard fixpoints to the corresponding one-step modal language (as considered in [12,1]) is not very useful, as it does not appear to allow the specification of properties such as: “the likelihood of some state property p holding eventually is greater than some q ∈ [0, 1]”.
In what follows, we give a general account of the notion of computation path, and of path-based temporal logics such as CTL* and PCTL. Following [10,8], we model systems as coalgebras of a signature functor obtained as the composition
of a computational type T (called branching type in [8]) with a transition type F ,
and require that T distributes over F in a suitable way. As examples, we consider nondeterministic and probabilistic systems, with the non-empty powerset functor P+ : Set → Set on the category of sets and respectively the probability measure
functor G1 : Meas → Meas on the category of measurable spaces describing the
computational types needed to recover the usual notions of computation path for such systems. While the transition type describes the type of individual transitions (typically linear) and determines the notion of computation path, the computational type describes how the transitions from particular states are structured (e.g. using sets, or probability distributions). The distributivity of T over F then allows com- putation paths from individual states to be similarly structured.
Our approach to defining infinite computation paths builds on earlier work by Jacobs [10] where inﬁnite trace maps were defined for coalgebras of type P ◦ F , with P : Set → Set the powerset functor and F : Set → Set a polynomial functor. We generalise this to arbitrary computational types T (subject to some additional constraints), thereby obtaining notions of possibly inﬁnite trace and possibly inﬁnite execution of a state in a T ◦ F -coalgebra, that are parametric in T and F . We sub-
sequently introduce path-based temporal (including fixpoint) logics for coalgebras of endofunctors of type T ◦ F , whose semantics is defined in terms of the possibly infinite executions from a particular state. By instantiating our approach, we re- cover known temporal logics and obtain new variants of known logics. Specifically,
taking T to be the non-empty powerset monad P+ and F = Id sheds new light on
the logic CTL* [3], which we recover as a fragment of a path-based fixpoint logic for P+ ◦ Id. Varying F to A × Id with A a set of labels yields an interesting variant of CTL* interpreted over labelled transition systems. On the other hand, taking
T = G1 and F = Id allows us to recover the logic PCTL [7] as an instance of a generic temporal logic with Until operators.
The paper is structured as follows. The remainder of this section gives a brief overview of the logics CTL* and PCTL, our main examples. Section 2 recalls some

basic definitions and results required later and some details of the generic theory of finite traces [8]. Section 3 defines infinite traces and executions and studies their properties. Section 4 uses infinite executions to define general path-based coalgebraic logics, including fixpoint logics and temporal logics with Until operators. A summary of the results and an outline of future work are given in Section 5.

Transition systems and the logic CTL*
The semantics of CTL* [5] is based on the notion of computation path. Given a transition system with set of states S and accessibility relation R ⊆ S × S, a computation path from a state s0 is an infinite sequence of states s0s1 ... such that siRsi+1 for i ∈ ω. The syntax of CTL* consists of path formulas, formalising prop- erties of computation paths and employing operators such as X (in the next state along the path), F (at some future state along the path), G (globally along the path) and U (until operator), and state formulas, formalising properties of states and employing operators (A and E) that quantify (universally, respectively existen- tially) over the computation paths from a particular state. Every state formula is also a path formula, with the latter requiring that the first state of a path satisfies the given state formula. For example, the property “along every path, the system will eventually reach a success state” is formalised as AF success, or equivalently as A(tt U success), where tt denotes the true proposition and success denotes an atomic proposition. The assumption one typically makes of the transition system of interest is that each state s has at least one outgoing transition. (For states where this is not the case, self-loops are added to the original transition system.) This allows one to focus only on the inﬁnite computation paths.

Probabilistic transition systems and the logic PCTL
In the probabilistic transition system model, the state transitions are governed by a probability distribution on the target states – this assigns a probability value to each outgoing transition from a particular state, with the values for transitions from the same state summing up to 1. The logic PCTL [7] for probabilistic transition systems is similar in spirit to CTL*: its syntax consists of path and state formulas, with similar operators (X and U) for the path formulas, and its semantics is based on the same notion of computation path; the main difference is that, instead of stating that a path formula holds in all/some of the paths from a particular state, the basic state formulas of PCTL, of the form [ϕ]∼p with ϕ a path formula, ∼∈ {<, ≤, >, ≥} and p ∈ [0, 1], refer to the likelihood of ϕ holding along the paths from a particular state. For example, [tt U success]≥1 states that the likelihood of eventually reaching a success state is 1. To interpret state formulas, one computes probability measures over the computation paths from each state of a given model.


The previous examples suggest that a general account of computation paths (to be referred to as inﬁnite executions in what follows) should first define the shape of a potential infinite execution (in the above cases, any infinite sequence of states), and

then provide a suitable structure on the actual infinite executions from each state of a particular model (e.g. a set of computation paths, or a probability measure over computation paths). The former should be sufficient to allow an interpretation of path formulas (of a generic path-based logic still to be defined), whereas the latter should support an interpretation of state formulas (of the same logic).

Preliminaries
We recall that a measurable space is given by a pair (X, ΣX ) with X a set and ΣX a σ-algebra of (measurable) subsets of X, whereas a measurable map between (X, ΣX ) and (Y, ΣY ) is given by a function f : X → Y with the property that f−1(V ) ∈ ΣX for each V ∈ ΣY . We write Meas for the category of measurable spaces and measurable maps. A measurable space (X, ΣX ) is called discrete if ΣX = PX. A subprobability measure on a measurable space (X, ΣX ) is then a
function μ : ΣX → [0, 1] such that μ(∅) = 0 and μ( i∈ω Xi) = Σi μ(Xi) for
countable families (Xi)i∈ω of pairwise disjoint measurable subsets of X. Thus, μ(X) ≤ 1 for any subprobability measure μ on (X, ΣX ). If μ(X) = 1, then μ is called a probability measure. Given a measurable space (X, ΣX ) and x ∈ X, the Dirac probability measure δx is defined by δx(U ) = 1 iff x ∈ U and δx(U ) = 0 otherwise.
We write G : Meas → Meas for the subprobability measure functor [6], sending a measurable space (X, ΣX ) to the set M(X, ΣX ) of subprobability measures on (X, ΣX ), equipped with the σ-algebra generated by the sets {μ | μ(U ) ≥ q} with U ∈ ΣX and q ∈ [0, 1]. A related functor, considered in [8], is the subprobability distribution functor S : Set → Set, sending a set X to the set of subprobability
distributions over X, i.e. functions μ : X → [0, 1] with Σx∈X μ(x) ≤ 1 2 .
Given a functor F : C → C, an F-coalgebra is given by a pair (X, γ) with X a C- object and γ : X → FX a C-arrow. As previously mentioned, we work in the setting of coalgebras of endofunctors obtained as the composition of a computational type with a transition type. The computational type is specified by a monad T on a category C, whereas the transition type is captured by an endofunctor F on C. As in [8], a crucial assumption is the existence of a distributive law λ : F ◦ T ⇒ T ◦ F of T over F . Such a distributive law must be compatible with the monad structure,
i.e. λ ◦ Fη = ηF and λ ◦ Fμ = μF ◦ Tλ ◦ λT , where η : Id ⇒ T and μ : T 2 ⇒ T
denote the unit and multiplication of the monad T .
As examples of computational types, we consider (variants of):
the powerset monad P : Set → Set, modelling nondeterministic computations, with unit given by singletons and multiplication given by unions,
the subprobability measure monad G : Meas → Meas, modelling probabilistic computations, with unit given by the Dirac measures and multiplication given by integration (see [6] for details).
Both of the above monads are strong and commutative, i.e. they come equipped

2 Thus, a subprobability distribution can take non-zero values on at most countably-many elements of X.

with a strength map stX,Y : X × TY → T (X × Y ) as well as a double strength map
dstX,Y : TX × TY → T (X × Y ), for each choice of C-objects X, Y 3 :
the powerset monad has strength given by stX,Y (x, V ) = {x}× V and double strength given by dstX,Y (U, V ) = U × V , for x ∈ X, U ∈ PX and V ∈ PY ,
the	subprobability	measure	monad	has	strength	given	by
st(X,ΣX ),(Y,ΣY )(x, ν)(U, V ) = ν(V ) iff x ∈ U and st(X,ΣX ),(Y,ΣY )(x, ν)(U, V ) = 0 
otherwise,	and  double  strength  given  by  dst(X,ΣX ),(Y,ΣY )(μ, ν)(U, V )	=
μ(U ) · ν(V ), for x ∈ X, μ ∈ M(X, ΣX ), ν ∈ M(Y, ΣY ), U ∈ ΣX , V ∈ ΣY .
It is shown in [8] that any commutative monad on Set has a canonical distribu- tive law over any shapely polynomial functor (i.e. a functor built from identity and constant functors using finite products and arbitrary coproducts). This provides examples of distributive laws of the powerset monad over shapely polynomial func- tors. Moreover, the construction of the canonical distributive law (by induction on the structure of the shapely functor) generalises straightforwardly to any category with products and coproducts, thereby also providing examples of distributive laws of the subprobability measure monad over shapely polynomial functors on Meas.
As in [8], the Kleisli category of a monad (T, η, μ) on a category C will play an important roˆle when defining the notions of infinite trace and infinite execution for systems whose computational type is given by T . This category, denoted Kl(T ), has the same objects as C, and C-arrows f : X → TY as arrows from X to Y . The composition of two Kl(T )-arrows f : X → Y and g : Y → Z is given by the C-arrow μZ ◦ Tg ◦ f . We let K : Kl(T ) → C denote the functor defined by:
K(X) = TX,
K(f ) = μY ◦ Tf for f : X → Y in Kl(T ),
and write J : C → Kl(T ) for its left adjoint, defined by:
J(X) = X,
J(f ) = Tf ◦ ηX = ηY ◦ f for f : X → Y in C.
Later we will make use of the following property of the functor J:
Lemma 2.1 If the functor T : C → C (weakly) preserves the limit (Z, (πi)i∈ω) of
an ωop -chain (f )	, then so does J : C → Kl(T ).
Proof. Assume first that T weakly preserves the limit (Z, (πi : Z → Zi)i∈ω) of (fi : Zi+1 → Zi)i∈ω. To show that (JZ, (Jπi : JZ → JZi)i∈ω) is a weakly limiting cone for (Jfi : JZi+1 → JZi)i∈ω in Kl(T ), let (X, (δi : X → JZi)i∈ω) denote an arbitrary cone for (Jfi)i∈ω in Kl(T ). Hence, in C, μZi ◦ T ηZi ◦ T fi ◦ δi+1 = δi, that is, Tfi ◦ δi+1 = δi for all i ∈ ω. This makes (δi)i∈ω a cone over (T fi)i∈ω in C, and the weak limiting property of (TZ, (Tπi)i∈ω) in C now yields a mediating map m : X → TZ such that Tπi ◦ m = δi in C for all i ∈ ω. This is equivalent to μZi ◦T ηZi ◦Tπi ◦m = δi in C for i ∈ ω, that is, Jπi ◦m = δi in Kl(T ) for i ∈ ω. The proof of the stronger statement, in the case when T preserves the limit of (fi)i∈ω,

3 Moreover, these are natural in X and Y .

is similar.
As mentioned above, we assume the existence of a distributive law λ of the monad T over the endofunctor F . It is known (see e.g. [8]) that such distributive laws λ : F ◦ T ⇒ T ◦ F are in one-to-one correspondence with liftings of the functor F : C → C to Kl(T ). In particular, the lifting F : Kl(T ) → Kl(T ) induced by a distributive law λ : F ◦ T ⇒ T ◦ F is defined by:

FA = FA,

Ff = λB ◦ Ff for f : A → B in Kl(T ).
The following property of this lifting will be used later:

Lemma 2.2 The lifting F satisﬁes F ◦ J = J ◦ F.
Proof. For f : X → Y in C, the C-arrows that define the Kleisli maps FJf and JFf are λY ◦ FηY ◦ Ff and respectively ηFY ◦ Ff . By the compatibility of the distributive law λ with the monad structure, these coincide.
In what follows we also assume that Kl(T ) is DCpo-enriched, that is, each homset
Kl(T )(X, Y ) is a partial order, with directed collections of maps (fi : X → Y )i∈I
admitting a join .i.∈I fi : X →. Y , and with composition of arrows preserving
note that the Kleisli categories of the monads P and G are DCpo-enriched, with the order on Kl(P)(X, Y ) being defined pointwise via the inclusion order on P(Y ), and the order on Kl(G)((X, ΣX ), (Y, ΣY )) being defined pointwise from the dcpo ≤Y on G(Y, ΣY ) given by μ ≤Y ν iff μ(U ) ≤ ν(U ) for all U ∈ ΣY .


Finite traces and executions
In [8], the authors consider coalgebras (X, γ) of endofunctors of the form T ◦ F with the monad T : Set → Set and the endofunctor F : Set → Set being related by a distributive law λ : F ◦T ⇒ T ◦F , and with the Kleisli category of T being DCpo⊥- enriched ; that is, in addition to DCpo-enrichedness, the orders on Kl(T )(X, Y ) are required to have a bottom element. In this setting, the elements of the carrier IF of the initial F -algebra provide the potential ﬁnite traces of states of T ◦F -coalgebras, and a ﬁnite trace map ftrγ : X → T (IF ) is defined via finality in Kl(T ). The crucial observation is that the initial F -algebra in Set lifts to a final F -coalgebra in Kl(T ) (where, as before, F : Kl(T ) → Kl(T ) is the lifting of F to Kl(T ) induced by λ). Thus, the finite trace map arises as the unique coalgebra morphism from the F -coalgebra in Kl(T ) induced by a T ◦ F -coalgebra in Set to the final F -coalgebra. The resulting notion of trace of a state of a T ◦F -coalgebra is referred to as fat trace in [11], as it retains the structure specified by the transition type F and therefore may involve branching.
A ﬁnite execution map for a T ◦ F -coalgebra (X, γ) is also defined in [11], as the finite trace map obtained by regarding (X, γ) as a T ◦F ◦(X×Id)-coalgebra. Here we propose a variant of this notion obtained by replacing the functor F ◦ (X × Id) with

the functor X × F . The reason for this variation is that we expect finite executions starting in a state of a coalgebra to incorporate the state itself.
Definition 2.3 Let T : C → C be a strong monad, F : C → C be an endofunctor, and λ : F ◦ T ⇒ T ◦ F be a distributive law of T over F . Also, for a T ◦ F -coalgebra (X, γ), let (IX, ιX ) denote an initial (X × F )-algebra, and let λX : (X × F ) ◦ T ⇒ T ◦(X×F ) denote the natural transformation given by (λX )Y = stX,F Y ◦(idX ×λY ). The ﬁnite execution map fexecγ : X → T IX is the C-map underlying the unique X × F -coalgebra morphism from (X, stX,F X ◦⟨idX, γ⟩) to the final X × F -coalgebra.

Modal logics for coalgebras
Our path-based coalgebraic temporal logics will be based on the notion of pred- icate lifting, as introduced by Pattinson [13]. However, the semantics of these logics will differ somewhat from the standard semantics of coalgebraic modal logics in- duced by predicate liftings, as defined e.g. in loc. cit. Also, the notion of predicate lifting used here is more general than the original one of [13], and applies to endo- functors on both Set and Meas.
We begin by fixing a category C with forgetful functor U : C → Set, and a contravariant functor P : C → Setop such that P is a subfunctor of Pˆ ◦ U , with
Pˆ : Set → Setop the contravariant powerset functor. Thus, for each state space
X, PX specifies a set of admissible predicates. As instances of P we will consider
the contravariant powerset functor Pˆ : Set → Setop (in the case of coalgebras of
endofunctors on Set), and the functor taking a measurable space to the carrier of its underlying σ-algebra (in the case of coalgebras of endofunctors on Meas).
Now given an endofunctor F : C → C and n ∈ ω, an n-ary predicate lifting for F is a natural transformation λ : Pn ⇒ P ◦ F . For simplicity of presentation, we assume all predicate liftings to be unary, however, our results generalise straight- forwardly to predicate liftings with arbitrary finite arities. We briefly recall the syntax and standard coalgebraic semantics of coalgebraic modal logics induced by predicate liftings. Given a set Λ of predicate liftings for F , the modal language LΛ has formulas given by:
LΛ e ϕ ::= tt | ¬ϕ | ϕ ∧ ϕ | [λ]ϕ	(λ ∈ Λ)
A coalgebraic semantics for this language is obtained by defining ϕ)γ ⊆ PC for each F -coalgebra (C, γ), by structural induction on ϕ ∈ LΛ. The interesting case is
 [λ]ϕ)γ = (Pγ)(λC( ϕ)γ )) for ϕ ∈ LΛ and λ ∈ Λ. In Section 4, we will see a novel use of modalities arising from predicate liftings, namely to interpret state formulas in path-based temporal logics. There, we will typically require our predicate liftings to be monotone, in that A ⊆ B implies λX (A) ⊆ λX (B) for all X and all A, B ∈ PX.

Possibly Infinite Traces and Executions
Our aim is to define a notion of possibly infinite execution of a state in a coalgebra, to be used in the semantics of path-based coalgebraic temporal logics. Some initial steps in this direction were made in [10], where a notion of infinite trace was defined

for coalgebras of type P ◦ F , with F : Set → Set a polynomial functor equipped with a distributive law λ : F ◦P ⇒ P ◦ F . Specifically, it was observed in loc. cit. that the final F -coalgebra in Set (whose elements represent potential infinite traces) gives rise to a weakly final F -coalgebra in Kl(P). Then, for a P ◦ F -coalgebra, an infinite trace map was obtained using weak finality, by regarding this coalgebra as an F -coalgebra in Kl(P). The order-enrichedness of Kl(P) guaranteed the existence of a canonical choice for the infinite trace map.
Here we propose a notion of infinite trace that applies to coalgebraic signatures of the form T ◦ F , with T a monad and F an endofunctor on a category C, related through a distributive law of T over F and subject to some additional constraints. Throughout this section, C denotes a category with countable limits, F : C → C is an endofunctor, T : C → C is a strong monad whose Kleisli category is DCpo-enriched, and λ : F ◦ T ⇒ T ◦ F is a distributive law of T over F .

Possibly inﬁnite traces
As in [10], the final F -coalgebra provides the potential infinite traces of elements of T ◦ F -coalgebras. We work under the assumption that F preserves the limit of the following ωop -chain

1 ,r!	 F 1 ,Fr!  F

2
21 ,r
... 

with 1 a final object in C and ! : F 1 → 1 the unique such map 4 . Assuming the above, the carrier of the final F -coalgebra is obtained as the limit in C of the above ωop -chain. We let (Z, ζ : Z → FZ) denote a final F -coalgebra, and write πi : Z → Fi1 with i ∈ ω for the corresponding projections. We begin by showing that, under some additional constraints on the monad T , a T ◦F -coalgebra
op
γ : X → TFX induces a cone over the ω  -chain:

T 1 ,Tr!  TF 1 ,TrF !  TF 
TF 2!


To this end, we define an ω-indexed family of maps (γi : X → TFi1)i∈ω by:
γ0 = η1◦!X : X → T 1, where !X : X → 1 is the unique such map,
γi+1 = μFi+11 ◦ TλFi1 ◦ TFγi ◦ γ : X → TFi+11 for i ∈ ω.
That is, the maps γi arise by unfolding the coalgebra structure i times, and using the distributive law λ of T over F and the monad multiplication to discard inner occurrences of T from the codomain of the maps γi. As the elements of Fi1 define finite approximations of potential infinite traces, the maps γi can be regarded as providing finite approximations of the infinite trace map for the T ◦ F -coalgebra γ. It is also worth noting that one can alternatively define the γis as maps in Kl(T ):
γ0 = J!X ,

γi+1 = Fγi ◦ γ for i ∈ ω.

4 This assumption is weaker than requiring F to preserve the limits of all ωop -chains, a condition that will not hold for certain instances of F considered later in the paper.

Lemma 3.1 Let !TF 1 : TF 1 → 1 be the only such map. If η1◦!TF 1 = T !, then the
above γ s deﬁne a cone over the ωop -chain (JFi!)	in Kl(T ).
i	i∈ω

Proof. The hypothesis ensures that γ0 = J!◦γ1. Now assuming γi = JFi!◦γi+1, we immediately obtain Fγi = FJFi! ◦ Fγi+1 = JFi+1! ◦ Fγi+1, where the last equality follows by Lemma 2.2. Precomposition with γ finally gives γi+1 = JFi+1! ◦ γi+2.
We immediately observe that the hypothesis of the above result is not satisfied by either of the two monads identified earlier:
for T = У, (η1◦!TF 1)(∅) = 1 /= ∅ = (У!)(∅);
for T = G, (η1◦!TF 1)(ν0) = μ1 /= μ0 = (G!)(ν0), where ν0 is the subprobability measure on F (1, У1) 5 which assigns the value 0 to each measurable set, whereas μ0 and μ1 are the subprobability measures on (1, У1) given by μ0(1) = 0 and respectively μ1(1) = 1.
To remedy the situation, we will work with submonads of these two monads for which the hypothesis of Lemma 3.1 is true. To this end, we first note that if the monad T is such that η1 : 1 → T 1 is an isomorphism, then the equality required by Lemma 3.1 is obtained immediately by finality. Strong monads with the above property are called affine, see e.g. [9] for an overview. Moreover, [9] shows how to construct, for any strong monad T , its affine submonad Ta, which is itself commutative whenever T is. This construction yields:
the non-empty powerset monad У+ : Set → Set as the affine part of У,
the probability measure monad G1 : Meas → Meas (with G1(X, ΣX ) containing only the probability measures on (X, ΣX )) as the affine part of G.
Thus, for T = У+ and T = G1, Lemma 3.1 applies. We also note that the canonical distributive laws of the original monads (У, respectively G) restrict to distributive laws of their affine submonads, and that the Kleisli categories of the affine submon- ads inherit an order-enriched structure from the Kleisli categories of the original monads. For the latter statement, one must verify that joins (taken in Kl(T )(X, Y )) of directed sets in Kl(Ta)(X, Y ) are themselves elements of Kl(Ta)(X, Y ) and are preserved by arrow composition; this is straightforward in both cases. In fact, for T = G1, the inherited order on Kl(G1)(X, Y ) is the equality. The former statement follows from a general result stating that any distributive law of a strong monad T over an endofunctor F restricts to a distributive law of Ta over F .
Proposition 3.2 Let λ : F ◦ T ⇒ T ◦ F be a distributive law of T over F. Then,
λ restricts to a distributive law λ : F ◦ Ta ⇒ Ta ◦ F.
Proof. As shown in [9], the action of the monad Ta on a C-object X is given by the following pullback diagram:


5 Note that (1, P1) is a final object in Meas.

TaX _ιX_zT X,

!TaX 
1, η1
T !X
, 
zT ,

Thus, using that !F 1 ◦ F !X =!FX (by finality of 1), the pullback diagram defining
TaFX can be written as
TaFX _ιF X_zT F,X 

 
 
 
1 , η1
TF !X
, 
TF 
T !F 1
, 
zT ,

Next, note that the maps λX ◦ FιX : FTaX → TFX and !F 1 ◦ F !TaX : FTaX → 1 define a cone over the diagram given by T !F 1 ◦ TF !X and η1:
T !F 1 ◦ TF !X ◦ λX ◦ FιX =	(naturality of λ)
T !F 1 ◦ λ1 ◦ FT !X ◦ FιX =	(definition of TaX)
T !F 1 ◦ λ1 ◦ Fη1 ◦ F !TaX =	(compatibility of λ with monad structure)
T !F 1 ◦ ηF 1 ◦ F !TaX =	(naturality of η) η1◦!F 1 ◦ F !TaX
The definition of TaFX now yields a map (λa)X : FTaX → TaFX. The naturality of the resulting maps and their compatibility with the monad structure follow easily by diagram chasing.
For our two examples (T = У+ and T = G1), assuming that F is a shapely polynomial functor, one can simply work with the canonical distributive laws. An easy induction proof (not given here) shows that these coincide with the distributive laws given by the previous result. However, Proposition 3.2 shows how to obtain a distributive law of the affine submonad over an arbitrary endofunctor.
To motivate our definition of the infinite trace map of a T ◦ F -coalgebra (X, γ), let us examine the case T = У+. Since the map γi takes a state of the coalgebra to a set of i-depth approximations of its possibly infinite traces, it seems natural to define the infinite trace map as a function trγ : X → У+Z sending a state s of the coalgebra to the set of possibly infinite traces whose i-depth approximation belongs to γi(s). Such a trace map can be defined by exploiting the weak preservation of limits of ωop -chains by J (which, in turn, follows from the weak preservation of such limits by У+). However, this property only guarantees the existence of a mediating map trγ : X → JZ in Kl(T ). As shown in [10] for the case T = У, a canonical choice for the infinite trace map is provided by the largest mediating map. Its existence is here guaranteed by the DCpo-structure of Kl(У+)(X, Z), together with the observation that in this particular case the mediating maps form a directed set. This justifies the following general definition of the infinite trace map.
Definition 3.3 Assume that the monad T is affine and that the functor J weakly

preserves the limit (Z, (πi)i∈ω
) of the ωop -chain (Fi!)
.  For a T ◦ F -coalgebra

(X, γ), let (X, (γi : X → JFi1)i∈ω) be the induced cone over (JFi!)i∈ω, and assume

further that the corresponding mediating maps form a directed set. The possibly inﬁnite trace map is the largest 6 mediating map trγ : X → JZ arising from the weak limiting property of (JZ, (Jπi)i∈ω) (regarded as a map in C).

In particular, Definition 3.3 can be applied to the non-empty powerset monad У+ : Set → Set, as well as to the probability measure monad G1 : Meas → Meas. The resulting notions of infinite trace are discussed in Sections 3.3 and 3.4. We also note that the affine submonad of the lift monad 1 + Id on Set (as considered in [8]) is the identity monad, to which Definition 3.3 applies trivially. A treatment of monads that are not affine is outside the scope of this paper.
We conclude this section by proving some properties of the infinite trace map, similar to the deﬁning properties of the infinite trace map in [10].
Proposition 3.4 Under the assumptions of Deﬁnition 3.3, the trace map trγ : X → JZ deﬁnes an op-lax F -coalgebra morphism from (X, γ) to (JZ, Jζ), that is, Ftrγ ◦ γ ± Jζ ◦ trγ. Under the additional assumptions that (JZ, (Jπi)i∈ω) is a limit of (JFi!)i∈ω, trγ deﬁnes an F-coalgebra morphism, that is, Ftrγ ◦ γ = Jζ ◦ trγ.
Proof. We begin by noting that the final F -coalgebra ζ : Z → FZ satisfies Fπi◦ζ = πi+1 for all i ∈ ω, and hence, in Kl(T ) we have JFπi ◦Jζ = Jπi+1 for all i ∈ ω. Now recall that (JFZ, (JFπi)i∈ω) is a weak limit of (JFi+1!)i∈ω. Moreover, since Jζ is an isomorphism in Kl(T ) (and hence admits an inverse), and since arrow composition in Kl(T ) preserves directed joins, it follows that the map Jζ ◦ trγ : X → JFZ is the
largest mediating map for the cone (X, (γ	)	) over the ωop -chain (JFi+1!)	.
i+1 i∈ω	i∈ω
On the other hand, we have: JFπi ◦ Ftrγ ◦ γ = FJπi ◦ Ftrγ ◦ γ = Fγi ◦ γ = γi+1.
Hence, since Jζ◦trγ : X → JFZ is the largest mediating map for (X, (γi+1)i∈ω), we obtain Ftrγ ◦γ ± Jζ◦trγ. That is, trγ defines an op-lax F -coalgebra morphism from (X, γ) to (JZ, Jζ). Under the stronger assumption that (JZ, (Jπi)i∈ω) is a limit of (JFi!)i∈ω, uniqueness of a mediating arrow induced by the cone (X, (γi+1)i∈ω) over (JFπi)i∈ω yields Ftrγ ◦ γ = Jζ ◦ trγ, that is, trγ defines an F -coalgebra morphism.
In the case of the non-empty powerset monad, the above result only implies that the infinite trace map is an op-lax coalgebra morphism. This is weaker than the defining property of the infinite trace map in [10], which asks for a proper coalgebra morphism. The study of sufficient conditions for the infinite trace map to define a proper coalgebra morphism for an arbitrary (affine) monad T remains an open question, but we conjecture that the local continuity of the functor F 7 will be at least a necessary condition.
On the other hand, we will see later that the additional assumption of Propo- sition 3.4 which ensures that the trace map is a coalgebra morphism holds for the probability measure functor G1 on Meas, when taking certain shapely polynomial functors on Meas as instances of F .

6 w.r.t. the order on Kl(T )(X, Z)
7 A functor F : C → D between DCpo-enriched categories is locally continuous if it preserves suprema of directed joins in C(X, Y ) for each X, Y . In enriched categorical terms, F is a DCpo-enriched functor.

Possibly inﬁnite executions
To obtain a notion of possibly infinite execution of a state in a T◦F -coalgebra, we use the approach in the previous section with a different choice of functor F . Similarly to Definition 2.3, given a T ◦ F -coalgebra (X, γ), we consider the endofunctor FX : C → C given by FX (Y ) = X × FY and the distributive law λX : FX ◦ T ⇒ T ◦ FX given by (λX )Y = stX,F Y ◦ (idX ×λY ). We call an element of the carrier of the final FX -coalgebra (ZX, ζX ) a potential inﬁnite execution, or computation path.
Definition 3.5 Assume that T is affine and that J weakly preserves the limit

(ZX
, (πi)i∈ω
) of the ωop -chain (F
i!)i∈ω
. For a T ◦ F -coalgebra (X, γ), let (X, (γi :

X → JFXi1)i∈ω) be the cone over (JFXi!)i∈ω induced by the T ◦ FX -coalgebra (X, stX,F X ◦ ⟨idX, γ⟩), and assume that the corresponding mediating maps form a directed set. The possibly inﬁnite execution map execγ : X → JZX of (X, γ) is the
possibly infinite trace map of the T ◦ FX -coalgebra (X, stX,F X ◦ ⟨idX, γ⟩).

(Labelled) transition systems
These are modelled as У+ ◦ F -coalgebras, with F = Id (respectively F = A × Id for a fixed set A of labels). Our use of the non-empty powerset monad agrees with the standard constraint put on transition systems when defining computation paths. The next result ensures that the hypotheses of Definitions 3.3 and 3.5 are satisfied.
Lemma 3.6 The (non-empty) powerset functor weakly preserves limits of ωop - chains; hence, by Lemma 2.1, so does J. Moreover, the resulting mediating maps, regarded as arrows in Kl(У) (resp. Kl(У+)) form a directed set.

Proof. Let (Z, (πi)i∈ω
) denote the limit of an ωop -chain (f

: Zi+1
→ Zi)i∈ω
. For

a cone (γi : X → УZi)i∈ω over (Уfi : УZi+1 → УZi)i∈ω, the map m : X → УZ
given by m(x) = {z ∈ Z | πi(z) ∈ γi(x) for i ∈ ω} for x ∈ X is a mediating map. (If X = ∅, the existence of a mediating map is trivial.) The same applies when replacing У by У+. This time, one also has to show that the set defining m(x) is non-empty. Using the axiom of choice one can construct, for each x ∈ X, a sequence (zi)i∈ω with zi ∈ γi(x) and fi(zi+1) = zi for i ∈ ω; this, in turn, yields z ∈ Z with πi(z) ∈ γi(x) for i ∈ ω.
For the second statement, note that the mediating map m defined previously is above any other mediating map (under the inclusion order), and thus the set of mediating maps is directed.
Remark 3.7 To see that neither У nor У+ preserve limits of ωop -chains, consider the final sequence (fi : Zi+1 → Zi)i∈ω of the endofunctor 1 + A × Id, with Zi =
  0≤j≤i Ai, and with limit object Z = A∗ ∪Aω. Now define a cone (γi : 1 → УZi)i∈ω
by letting γi(∗) consist only of the i-long sequence of a’s, for some fixed a ∈ A.
Then, both m(∗) = {a}∗ and m'(∗) = {a}∗ ∪ {a}ω define mediating maps. (A similar example is discussed in [8, Section 4.2].)
As a result of Lemma 3.6, Definition 3.5 yields, for each state in a transition system, a set of infinite executions.  As expected, this coincides with the set of

computation paths from that state, as considered in the semantics of CTL*. For F = A × Id, the infinite execution map gives, for each state s, the set of labelled computation paths from s, as infinite sequences of the form s = s0a1s1a2s2 ... with
si  ai zsi,+1 for i ∈ ω, whereas the infinite trace map yields the sequences of labels that occur along such labelled computation paths.
One can also vary the functor F in order to model explicit termination. This is achieved by taking F = 1 + Id or F = 1 + A × Id, as in [8]. In these cases, the resulting possibly infinite trace (execution) maps capture both finite and infinite traces (respectively computation paths).

Probabilistic models
A large variety of discrete probabilistic models have been studied, see e.g. [17] for a coalgebraic account of such models. Among these, probabilistic transition systems (also called Markov chains) appear as coalgebras of the endofunctor D = D ◦ Id and are used to interpret the logic PCTL [7], while generative probabilistic systems coincide with D◦ (A × Id)-coalgebras. Here, D : Set → Set denotes the probability distribution monad, a submonad of the subprobability distribution monad defined
on objects by DX = {μ ∈ SX | Σx∈X μ(x) = 1}.
Unfortunately, although affine, the monad D does not satisfy the requirement of Definition 3.3 concerning the weak preservation of limits by the induced functor J. To see this, let F : Set → Set be given by FX = {a, b}×X, and μi ∈ DFi1 be given
by μi(x) =  1 for x ∈ {a, b}i, with i ∈ ω. Thus, each μi defines a ﬁnite probability
distribution over Fi1, and we have (Di!)(μi+1) = μi for i ∈ ω. However, there
is no probability distribution μ on the final F -coalgebra (whose carrier, {a, b}ω, is uncountable) such that (Dπi)(μ) = μi for i ∈ ω – any such μ could only take non-zero values on countably-many elements of Z.  Indeed, a state of a D ◦ F -
coalgebra will in general have uncountably many infinite traces, and the emphasis when defining an infinite trace map should be on measuring sets of traces rather than individual traces.
A satisfactory treatment of infinite traces for discrete probabilistic models turns out to be possible by regarding such models as coalgebras of the probability measure monad G1. For technical reasons that will soon be made clear, we will work in a subcategory of Meas, namely the full subcategory SB of Meas whose objects are standard Borel spaces (spaces whose measurable sets arise as the Borel sets induced by a complete, separable metric, see e.g. [4]). A notable property of this category is that it is closed under countable coproducts and countable limits in Meas (see e.g. [16, Fact 1]). We also note that a discrete measurable space (X, УX) is standard Borel if and only if X is countable. As a result, we will only be able to define notions of infinite trace and infinite execution for D◦ F -coalgebras with countable carrier. We will do so by lifting the functor F to a functor Fˆ : SB → SB, and regarding a D◦ F -coalgebra on Set as a G1 ◦ Fˆ-coalgebra on SB.
We now proceed to define a restricted version of shapely polynomial functors on Meas. The restriction is driven by the need to work in the subcategory SB of Meas. Specifically, we call an endofunctor on Meas a restricted shapely polynomial

functor if it is built from identity and constant functors C(X,ΣX ) with (X, ΣX ) a standard Borel space, using finite products and countable coproducts. Then, given a restricted shapely polynomial functor F on Set, that is, a functor built from identity and countable constant functors using finite products and countable coproducts, we write Fˆ : Meas → Meas for its counterpart on measurable spaces, defined by structural induction on F :
I^d is the identity functor on Meas,
CˆX is the constant functor C(X,PX), for each countable set X,
F^1 × F2 = F^1 × F^1,

^Fi = 

i∈ω
F^i.

Lemma 3.8 If F : Set → Set is a restricted shapely polynomial functor, then so is
F^ : Meas → Meas. Moreover, F^ preserves (discrete) SB-spaces.
Proof. The first statement is immediate. Preservation of SB-spaces by F follows from results in [16], whereas preservation of discrete spaces follows by induction on the structure of F :
For F = CX with X countable, F^(Y, УY ) = (X, УX) = (FX, УFX) for all Y .
For F = Id, I^d(X, УX) = (X, УX) = (FX, УFX) for all X.
For F = F1 × F2, F^(X, УX) = F^1(X, УX) × F^2(X, УX) = (F1X, УF1X) ×
(F2X, УF2X) = (F1X × F2X, У(F1X × F2X)), where the last equality follows from finite products of discrete SB-spaces being themselves discrete SB-spaces.
The case F = i∈ω Fi is treated similarly. As a result, we immediately obtain
Proposition 3.9 A D◦ F-coalgebra (X, γ) with countable carrier yields a G1 ◦ F^- coalgebra ((X, УX), γ^), such that the cone (γi)i∈ω in Kl(D):
X ¸¸¸¸¸¸¸¸
γ0	¸¸¸¸ γ¸¸¸¸¸¸
, γ1	2   ¸¸s 
J1 ,rJF 1 ,rJF 21 ,r2 ... 

J!	JF !
JF !

with the γis being as in Section 3.1, deﬁnes a cone in Kl(G1):
(X, УX)
¸¸¸¸¸¸¸¸¸¸¸

γ0	γ ¸¸¸¸
γ¸¸¸¸¸¸¸

,  1	¸  2
¸¸¸z 

J'(1, У1) ,'rJ'F^(1, У1) ,rJ'F^2(1, У1) ,r... 
where J : Set → Kl(D) and J' : Meas → Kl(G1) are as in Section 2.
The coalgebra map γ : (X, УX) → G1F (X, УX) = G1(FX, УFX) yields, for each state x ∈ X, the probability measure on (FX, УFX) induced by the prob- ability distribution γ(x) on FX. Since (1, У1) is final in Meas, the latter of the above cones is over the image under J' of the final sequence of F^. As a result, we

can use the existence of trace maps of G1 ◦ F -coalgebras to define trace maps for
D◦ F -coalgebras.
The next lemma ensures that F^ and F^X preserve the limit of the initial ω -
segment of their respective final sequences, as required by Definitions 3.3 and 3.5.
Lemma 3.10 ([16]) Restricted shapely polynomial functors on Meas preserve sur- jective SB-morphisms and limits of ωop -chains of surjective SB-morphisms.
Proof. It was proved in [16, Proposition 3] that the class of endofunctors on Meas that preserve surjective SB-morphisms and limits of ωop -chains of surjective SB- morphisms is closed under countable coproducts and countable limits. The con- clusion then follows after noting that the identity functor and constant functors C(X,ΣX ) with (X, ΣX ) a standard Borel space belong to this class.
The required property of F now follows, since ! : F (1, У1) → (1, У1) is a sur- jective SB-morphism (assuming that F is non-trivial, i.e. F 1 /= ∅). As a result, for every restricted shapely polynomial functor F on Set, the final sequence of F belongs to SB, stabilises at ω, and its limit is the carrier of a final F -coalgebra, itself in SB. Moreover, if X is a countable set, the above also applies to the functor FX : Set → Set defined by FXY = X × FY . The restriction to countable carriers is necessary to ensure applicability of Definition 3.5. This is precisely the reason for working with the category SB.
Recall from Section 2 that commutative monads on any category with products and coproducts admit canonical distributive laws over shapely polynomial functors. This applies in particular to the monad G1 and any restricted shapely polynomial functor on Meas. Then, to be able to apply Definition 3.1 to the functors F and FX , with F : Set → Set a restricted shapely polynomial functor and X a countable set, all that remains to verify is that the functor G1 weakly preserves the limits of the final sequences of F^ and F^X . In fact, a stronger result holds:
op
Lemma 3.11 ([16]) The functor G1 : Meas → Meas preserves limits of ω -chains
of surjective SB-morphisms.
We note that the result in [16] refers to the subprobability measure functor G, but a similar proof can be given for the probability measure functor.
As a consequence, we obtain probabilistic trace and execution maps for D◦ F - coalgebras with countable carrier, with F : Set → Set as above.
Definition 3.12 Let F : Set → Set be a restricted shapely polynomial functor, let (X, γ) be a D ◦ F -coalgebra with countable carrier, and let (γi : (X, УX) → J'F i(1, У1))i∈ω denote the cone over (J'F i!)i∈ω induced by the G1 ◦ F -coalgebra γ : (X, УX) → G1F (X, УX). The probabilistic trace map trγ : X → JZ is defined as the underlying function of the unique measurable map arising from the limiting property of J'(Z, ΣZ), where (Z, ΣZ) is the carrier of a final F^-coalgebra.
Since limits in Meas are constructed from the underlying limits in Set (see e.g. [15]), the state space Z of the final F^-coalgebra is the carrier of a final F -

coalgebra, and thus the probabilistic trace map yields, as expected, for each state of a D◦ F -coalgebra, a probability measure over (Z, ΣZ).
Returning to the example of Markov chains (F = Id), the resulting notion of probabilistic execution gives, for each state in a Markov chain, a probability measure over its computation paths. Similarly, in the case of generative probabilistic systems (F = A×Id), the notion of probabilistic execution gives, for each state, a probability measure over its labelled computation paths. Finally, explicit termination can be modelled by taking F = 1 + Id or F = 1 + A× Id, as in [8], and the resulting notions of possibly infinite execution also incorporate finite (labelled) computation paths.

Path-Based Coalgebraic Temporal Logics
We now introduce CTL*-like coalgebraic temporal logics whose semantics is defined in terms of possibly infinite executions. Throughout this section, we fix a monad T : C → C, a functor F : C → C, and a T ◦ F -coalgebra (X, γ) together with a map execγ : X → T ZX obtained using the approach in Section 3, where (ZX, ζX ) is a final FX -coalgebra. We note in passing that the temporal languages defined in this section can also be interpreted by using the finite execution map fexecγ : X → T IX with (IX, ιX ) an initial (X × F )-algebra, as given by Definition 2.3, instead of the infinite execution map – the forthcoming definitions do not rely on the finality of (ZX, ζX ). However, this is only useful when F 0 /= 0, with 0 an initial object in C, as otherwise the initial FX -algebra has empty carrier. In particular, modelling explicit termination via functors such as F = 1 + Id or F = 1 + A × Id yields non-trivial finite execution maps to which the definitions in this section can be applied.
The temporal logics that we define are parameterised by sets ΛF and Λ of mono- tone predicate liftings for the functors F and respectively T . The category C will be instantiated to Set and Meas.
We recall that the definition of predicate liftings requires functors U : C → Set and P : C → Setop such that P is a subfunctor of Уˆ ◦ U . In addition, defining the semantics of path-based temporal logics will at least require that PX is closed under countable (including finite) unions and intersections, for each C-object X.

Path-based ﬁxpoint logics
We first consider the case when PX is a complete lattice for each X. Under this assumption, which holds e.g. when C = Set and P = Уˆ, we are able to define path- based coalgebraic ﬁxpoint logics. These logics are two-sorted, with path formulas denoted by ϕF , ψF ,... expressing properties of possibly infinite executions, and state formulas denoted by ϕ, ψ, . . . expressing properties of states of T ◦ F -coalgebras.
The language μL ::= μLΛF (VF , V) over a 2-sorted set (VF , V) of propositional variables (with sorts for paths and respectively states) is defined by the grammar
μLF e ϕF ::= tt | ff | pF | ϕ | ϕF ∧ ϕF | ϕF ∨ ϕF | [λF ]ϕF | ηpF .ϕF μLe ϕ ::= tt | ff | p | [λ]ϕF | ϕ ∧ ϕ | ϕ ∨ ϕ
where pF ∈ VF , p ∈ V, η ∈ {μ, ν}, λF ∈ ΛF and λ ∈ Λ. Thus, path formulas are

constructed from propositional variables and state formulas using positive boolean operators, modal operators [λF ] and fixpoint operators, whereas state formulas are constructed from atomic propositions and modal formulas [λ]ϕF with ϕF a path formula, using positive boolean operators. The modal operators [λF ] and [λ] with λF ∈ ΛF and λ ∈ Λ are thus both applied to path formulas, to obtain new path formulas and respectively state formulas. They are, however, of very different natures: while the operators [λF ] quantify over the one-step behaviour of computation paths, the operators [λ] quantify over the (suitably structured) long- term computation paths from particular states. This is made precise in the formal semantics of μLΛF (VF , V), as defined below.
Given a T ◦ F -coalgebra (X, γ) and a 2-sorted valuation V : (VF , V) → (PZX,PX) (interpreting path and state variables as sets of computation paths and respectively of states), the semantics QϕF ¢γ,V ∈ PZX of path formulas ϕF ∈ μLF and ϕ)γ,V ∈ PX of state formulas ϕ ∈ μL is defined inductively on the structure of ϕF and ϕ by:
QpF ¢γ,V = V (pF )
Qϕ¢γ,V = P (π1 ◦ ζX )( ϕ)γ,V )
Q[λF ]ϕF ¢	= (P (π2 ◦ ζX ) ◦ (λF )Z )(QϕF ¢	)

QμpF .ϕF ¢γ,V
QνpF .ϕF ¢γ,V
= lfp((ϕF )γ,V )
= gfp((ϕF )γ,V )

 p)γ,V = V (p)
 [λ]ϕF )	= (P execγ ◦ λZ )(QϕF ¢	)
and the usual clauses for the boolean operators, where, for pF ∈ VF , (ϕF )γ,V  :
PX → PX denotes the monotone map defined by (ϕF )γ,V (Y ) = QϕF ¢	' with
pF	γ,V
V '(pF ) = Y and V '(q) = V (q) for q /= pF , whereas lfp( ) and gfp( ) construct least and respectively greatest fixpoints. We note that the monotonicity of the predicate liftings in ΛF and Λ together with the absence of negation in either path or state
formulas ensure that the maps (ϕF )γ,V : PX → PX are monotone, and hence,
by the Knaster-Tarski theorem, admit least and greatest fixpoints.	Let us now examine the definition of the semantics of μLΛF (VF , V) in more detail:
To define Qϕ¢γ,V ∈ PZX from ϕ)γ,V ∈ PX, one uses the inverse image of the map π1 ◦ ζX which extracts the first state of a computation path in ZX :

Z  ζX  zX,× FZ 
 π1 zX,

This formalises the idea that a state formula ϕ (regarded as a path formula) holds in a path precisely when it holds in the first state of that path.
To define Q[λF ]ϕF ¢γ,V ∈ PZX from QϕF ¢γ,V ∈ PZX , one first applies the relevant component of the predicate lifting λF to obtain a set of one-step F -observations of computation paths, and then uses the inverse image of the map π2 ◦ ζX

Z  ζX  zX,× FZ 
 π2 zF,ZX

(which extracts the one-step F -observation of a computation path in ZX ) to obtain a set of computation paths again. This is the standard interpretation of the modal operator [λF ] in the F -coalgebra π2 ◦ ζX .
Finally, to define [λ]ϕF )γ,V ∈ PX from QϕF ¢γ,V ∈ PZX , one first applies the relevant component of the predicate lifting λ to obtain a set of suitably-structured computation paths, and then uses the inverse image of the execution map to obtain a set of states:

PZX
(λ)ZX zP,TZ 
 P execγ zP,X 

Example 4.1 We are now able to recover the negation-free fragment of the logic CTL* 8 as a fragment of the path-based fixpoint logic obtained by taking T = У+, F = Id, Λ = { , } and ΛF = {◦}, where the predicate liftings λ , λ : Уˆ ⇒ Уˆ◦У+ and λ◦ : Уˆ ⇒ Уˆ ◦ Id associated to these modalities are given by:
(λ )X (Y )= {Z ∈ У+X | Z ⊆ Y },
(λ )X (Y )= {Z ∈ У+X | Z ∩ Y /= ∅},
(λ◦)X (Y )= Y.
The choice of λ and λ as predicate liftings for У+ captures precisely the path quantifiers A and E of CTL*, whereas the ◦ modality captures the X operator on
paths. The remaining path operators of CTL* (F, G and U) can be encoded as fixpoint formulas. For example, the CTL* path formula ϕ U ψ can be encoded as
μX.(ψ ∨ (ϕ ∧ ◦X)).
Moreover, by varying the functor F to A × Id, we obtain an interesting variant of CTL* interpreted over labelled transition systems. For this, we take ΛF = {a |
a ∈ A}∪ {◦}, where the predicate liftings λa : 1 ⇒ Уˆ ◦ (A × Id) with a ∈ A and
λ◦ : Уˆ ⇒ Уˆ ◦ (A × Id) are given by:
(λa)X (∗)= {a}× X,
(λ◦)X (Y )= A × Y.
The resulting temporal language can easily express the property “a occurs along every computation path”, namely as  μX.(a∨◦X). The reader should compare this
to the formulation of the same property in the language obtained by adding fixpoints to the negation-free variant of Hennessy-Milner logic, namely as μX.(⟨ ⟩tt ∧ [−a]X). Here, the formulas ⟨ ⟩ϕ and [−a]ϕ should be read as “there exists a successor state (reachable by some label) satisfying ϕ” and respectively ”all states reachable by labels other than a satisfy ϕ”. It is easy to see that, as the required nesting depth of
fixpoint operators increases, the encodings of path properties in the latter language become complex very quickly, making the path-based language a better alternative.

Path-based temporal logics with Until operators
We now return to the more general situation when PX is only closed under count- able unions and intersections. This is for instance the case when C = Meas and

8 The entire language can also be obtained, using an approach similar to that of Section 4.2.

P (X, ΣX ) = ΣX . In this case, least or greatest fixpoints of monotone maps on PX do not necessarily exist, and we must restrict ourselves to temporal operators for which we are able to provide a well-defined semantics. In what follows we only consider Until operators similar to the ones of CTL* and PCTL, however, our ap- proach supports more general temporal operators. In particular, a suitable choice of temporal operators can be used to obtain the full language of CTL* without resorting to arbitrary fixpoints.
Before defining the general syntax of path-based temporal logics with Until operators, we observe that the structure of the functor F may result in the associated notions of trace and execution involving some branching (as is for instance the case when FX = A× X × X). In such cases, Until operators must take into account the branching. Due to space limitations, here we only consider existential versions of branching Until operators, and refer the reader to [2] for their universal counterparts. Path-based temporal logics with Until operators are obtained by discarding propositional variables VF from the path formulas of μLF , and replacing fixpoint formulas ηpF .ϕF with η ∈ {μ, ν} by formulas ϕF ULψF , with L ⊆ ΛF a subset of (typically disjunction-preserving) predicate liftings. Furthermore, one can add negation to the syntax of both path and state formulas, and discard the require-
ment that only monotone predicate liftings should be considered in Λ and ΛF , since
no appeal to the Knaster-Tarski theorem is needed to interpret Until operators. Instead, the semantics of Until operators is defined by

QϕF ULψF ¢
=  QϕF U≤tψF ¢

γ,V
t∈ω
L	γ,V

where the formulas ϕF U≤tψF with t ∈ ω are defined inductively by:

ϕF U≤0ψF ::= ψF
ϕF U≤t+1ψF ::= ψF ∨ (ϕF ∧ 
λF ∈L


[λF ](ϕF U≤tψF )

The semantics of state formulas remains as before.
Example 4.2 One can recover the logic PCTL [7] as a fragment of the temporal logic obtained by taking T = G1 and F = Id on Meas. Predicate liftings for end- ofunctors F : Meas → Meas were considered in [15], as natural transformations of type P ⇒ P ◦ F with P : Meas → Set given by P (X, ΣX ) = ΣX . In particular, the identity natural transformation defines a predicate lifting for F = Id, and we write
for the associated modality. Also, for q ∈ Q ∩ [0, 1], the natural transformation
λq : P ⇒ P ◦G1 given by (λq)(X,ΣX )(Y ) = {μ ∈ M1(X, ΣX ) | μ(Y ) ≥ q} for Y ∈ ΣX defines a predicate lifting for T = G1, and we write Lq for the associated modality.
The logic PCTL (interpreted over measurable spaces) is now obtained by letting ΛF = {◦} and Λ = {Lq | q ∈ Q ∩ [0, 1]}, and further simplifying the syntax of path
formulas to
ϕF ::= ◦ϕ | ϕU	ϕ
Its interpretation over Markov chains with countable state spaces is then obtained by regarding each such Markov chain as a discrete measurable space. For example,

the path formula ϕ U≤∞ ψ of PCTL is encoded as ϕU{◦}ψ.
Moreover, by varying the transition type to F = Id or F = 1 + A × Id, one
automatically obtains variants of PCTL interpreted over generative probabilistic systems, possibly with explicit termination.
We conclude this section by noting that the full language of CTL* can be re- covered using a similar approach, i.e. by defining the CTL* path operators directly rather than through fixpoint operators.

Concluding Remarks
We have provided a general account of possibly infinite traces and executions in sys- tems modelled as coalgebras. The notion of infinite execution has subsequently been used to give semantics to generic path-based coalgebraic temporal logics, instances of which subsume known path-based logics such as CTL* and PCTL. Moreover, we have shown that by simply varying the transition type, interesting variants of known logics can be obtained with very little effort.
Future work will generalise these results to arbitrary (non-affine) monads. Apart from the powerset, lift and subprobability measure monads, a non-affine monad of interest is the multiset monad, due to its relevance to graded temporal logic. The study of the relationship between finite and possibly infinite traces constitutes another direction for future work.

Acknowledgement
Thanks are due to Bart Jacobs for pointing out the notion of affine monad and its relevance to this work, and to the anonymous referees of an earlier version of this paper for their useful comments and suggestions.

References
C. Cˆırstea and D. Pattinson. Modular construction of complete coalgebraic logics. Theoretical Computer Science, 388:83–108, 2007.
C. Cˆırstea and M. Sadrzadeh. Modular games for coalgebraic fixed point logics. In Proc. CMCS 2008, volume 203 of ENTCS, 2008.
E.M. Clarke, O. Grumberg, and D.A. Peled. Model Checking. MIT Press, 1999.
J. L. Doob. Measure Theory. Springer, 1994.
E.A. Emerson and J. Halpern. ”sometimes” and ”not never” revisited: On branching versus linear time.
Journal of the ACM, 33:151–178, 1986.
M. Giry. A categorical approach to probability theory. In Categorical Aspects of Topology and Analysis, volume 915 of Lecture Notes in Mathematics, 1982.
H. Hansson and B. Jonsson. A logic for reasoning about time and reliability. Formal Aspects of Computing, 6(5):512–535, 1994.
I. Hasuo, B. Jacobs, and A. Sokolova. Generic trace semantics via coinduction. Logical Methods in Computer Science, 3:1–36, 2007.


B. Jacobs. Semantics of weakening and contraction. Annals of Pure and Applied Logic, 69:73–106, 1994.
B. Jacobs. Trace semantics for coalgebras. In Proc. CMCS 2004, volume 106 of ENTCS, 2004.
B. Jacobs and A. Sokolova. Traces, executions and schedulers, coalgebraically. In Proc. CALCO’09, volume 5728 of LNCS, 2009.
K.G. Larsen and A. Skou. Bisimulation through probabilistic testing. Information and Computation, 94:1–28, 1991.
D. Pattinson. Expressive logics for coalgebras via terminal sequence induction. Notre Dame Journal of Formal Logic, 45(1):19–33, 2004.
J. Rutten. Universal coalgebra: a theory of systems. Theoretical Computer Science, 249:3–80, 2000.
C. Schubert. Coalgebraic logic over measurable spaces: behavioural and logical equivalence. Draft.
C. Schubert. Final coalgebras for measure polynomial endofunctors. In Proceedings of TAMC’09, 2009.
A. Sokolova. Coalgebraic Analysis of Probabilistic Systems. PhD thesis, TU Eindhoven, 2005.
