Electronic Notes in Theoretical Computer Science 178 (2007) 79–87	
www.elsevier.com/locate/entcs

Integrating Algorithm Visualization Systems
Ville Karavirta1
Department of Computer Science and Engineering Helsinki University of Technology
Helsinki, Finland

Abstract
Helping students to understand difficult pieces of code remains a challenge in Computer Science education. By providing a view of the code on a higher level of abstraction, Algorithm Visualization (AV) aims at making the code more understandable. However, teachers consider producing AVs with the existing tools to require too much time and effort to be worthwhile.
One way to lower this effort is to allow data exchange between AV systems. This paper continues the work of the ITiCSE Working Group (WG) “Development of XML-based Tools to Support User Interaction with Algorithm Visualization”. The WG aimed at specifying a common language for AV systems. We analyzed a number of existing AV languages and came up with requirements for a common language. Based on these requirements and the previous work by the WG, this paper defines a new AV language. Furthermore, this study describes a set of tools that allow data exchange between some of the existing AV systems. This data exchange gives teachers more choices and ready-made examples to be used in teaching.
Keywords: algorithm animation, AV system integration, xml, data exchange


Introduction
Helping students to understand difficult pieces of code remains a challenge in Com- puter Science education. By providing a view of the code on a higher level of abstraction, Algorithm Visualization (AV) aims at making the code more under- standable. However, there is still speculation about its effectiveness in learning [3]. Recent studies indicate that to be educationally effective (i.e. aid students’ learn- ing) algorithm visualizations need to be more than passive animations; they must require users to interact with the animation [3]. This interaction can, for example, require the user to respond to multiple-choice questions during the animation or to construct an algorithm animation by using a visualization.
However, algorithm visualizations have not been widely adopted in teaching. One of the main reasons is the time and effort required to find and adopt such a

1 Email: vkaravir@cs.hut.fi

1571-0661 © 2007 Elsevier B.V. Open access under CC BY-NC-ND license.
doi:10.1016/j.entcs.2007.01.030

system (or ready-made examples) and to design, create, and integrate the visualiza- tions [8]. Thus, teachers need to have easier ways to find and produce visualizations that provide the needed interaction. For meeting these needs, several AV systems have been developed. Some of the systems that are currently being developed are Animal [10], JAWAA [1], and MatrixPro [6]. These systems provide different ways to create the animations as well as different types of interaction. Thereby, integrat- ing these systems could be beneficial, for example, by allowing the teacher to select the system based on the level of interaction it provides.
One way to achieve this integration is to define a common language for the al- gorithm visualization systems. This was the topic of one of the working groups at the Conference on Innovation and Technology in Computer Science Education (ITiCSE) 2005. The working group aimed at defining XML specifications for the various aspects of AV. The working group’s report [9] provides examples of these specifications as well as guidance on how to use the specifications in existing visu- alization systems. This paper refers to this group and its work as ITiCSE XMLWG or as working group.
The working group did a lot of good work in coming up with XML specifi- cations for different aspects of AV. However, a lot of the work remains on the level of examples instead of concrete specifications. One idea of the working group was to continue the work in the future. The work presented in this paper builds on the specifications and examples provided by the working group and introduces more concrete specifications in the form of a language, Xaal (eXtensible Algorithm Animation Language), defined to be used in data exchange between algorithm ani- mation systems. In addition, this paper introduces a set of tools that will hopefully benefit AV system developers. The aim of the tools is to allow data exchange be- tween the current AV systems as well as support other useful export formats from the systems.
In the following, Section 2 briefly introduces the main features of the

language.	For a more specific documentation, see the
Xaal
website at

http://www.cs.hut.fi/Research/SVG/XAAL/. Section 3 in turn describes the tools that support the data exchange. Finally, Section 4 discusses the usefulness of such a language and tools as well as looks into the future.

eXtensible Algorithm Animation Language
Xaal (eXtensible Algorithm Animation Language) is defined as an XML (Exten- sible Markup Language) language by specifying the allowed document structure. XML makes it easy for software to process data using the multitude of different tools and architectures available today. In addition, transforming XML documents to different XML formats or text is relatively simple and flexible using XSLT (Ex- tensible Stylesheet Language Transformations).
An important aspect of defining the language has been the need of transfor- mation between different existing algorithm animation languages. To find out the requirements for a language used in data exchange, a survey of the existing de-

scription languages was made [4]. Based on this survey, a taxonomy of algorithm animation languages was defined [5]. This taxonomy indicates that the features of an algorithm animation language can be roughly divided into three categories: data structures, graphical primitives, and animation. Problems arise when trying to exchange data between tools that have different approaches to AV. For example, Animal [10] describes animations using mostly graphical primitives, whereas Ma- trixPro [6] uses only data structures. These different approaches have been taken into account when defining Xaal.
In this section, we will briefly introduce the most important features of Xaal. The reader should note that this text is merely an overview of the language. For a more detailed discussion, see [4] and for the actual XML schemas, see the Xaal web- site.

Graphical Primitives
The basic graphical components that can be composed to represent arbitrarily com- plex objects (e.g., a tree data structure) are graphical primitives. The graphical primitives in Xaal are as specified by the ITiCSE XMLWG [9], where the fol- lowing have been defined: point, polyline, line, polygon, arc, ellipse, circle and circle-segment, square, triangle, rectangle, and text.
Other features specified by the working group are the definition of reusable shapes from the graphical primitives and changing the visual appearance of the graphical primitives using reusable styles. Both of these are intended to aid the creation of more complex primitives. Listing 1 in Appendix A gives an example of a shape definition that uses graphical primitives.

Data Structures
Xaal supports the usage of data structures to specify the visualizations, lowering the effort needed to produce them. The set of structures is basically the same as, for example, in JAWAA [1]: array, graph, list, and tree. The content of these data structures is described using nodes (or indices in case of an array) and edges con- necting the nodes. The structures can form arbitrarily complex hierarchies. On the other hand, the simplest kind of structure can be a string or a number. More- over, to support the different approaches of existing algorithm animation languages, all structures support an optional graphical presentation indicating how the struc- ture should be visualized. Listing 2 in Appendix A shows an example of an array definition.

Animation
A crucial part of the algorithm animation language is the animation functionality.

In the following, we will introduce the elements available in
Xaal
for defining

the animations. The animation operations in Xaal have been divided in three groups: graphical primitive transformations (for example, rotate), elementary data

structure operations (for example, replace), and abstract data structure operations (for example, insert).
The operations for manipulating graphical primitives use the format specified by the ITiCSE XMLWG [9]. These include operations such as show, hide, move, rotate, and scale. Listing 3 in Appendix A is an example of a rotate operation.
The elementary data structure operations available in Xaal are create, remove, replace, and swap. To be consistent with the structure definitions, every operation can have an optional part describing how the operation should be visualized using graphical primitive animation.
Abstract data structure operations are operations that depend on the semantics of the target structure. In Xaal, the available operations are insert, delete, and search. As with the elementary data structure operations, these operations can have an optional part describing how the operation should be visualized using graphical primitive animation. In addition, for systems that do not know the semantics of the abstract operation, the behavior can be optionally described using elementary data structure operations. Listing 4 in Appendix A shows an example of a delete operation.

Schema Speciﬁcation
We have defined an XML Schema for Xaal. To make the language more modular, we have divided the schema into several XML Schema documents. This kind of modularity makes it possible to more easily change or reuse some parts of this language in other languages.

Implementation
Our objective was to implement Xaal in a modular way that could be useful for other AV system developers in their aims at implementing the ITiCSE XMLWG specifications. In this section, we will introduce two different processing pipelines to add Xaal support into existing algorithm animation systems. In addition, we will briefly describe a prototype implementation of Xaal and several transformations.

Object hierarchy
The first processing solution is an architecture discussed by the ITiCSE XMLWG to implement its specifications. This architecture is represented in Figure 1. The basic idea is to have one Xaal parser that can be used by multiple algorithm animation systems. This parser generates a Java object hierarchy. In addition, there is a part of software that can serialize the object hierarchy to a Xaal document.
The existing AV systems can then implement adapters that convert the Xaal ob- ject hierarchy into an animation in that particular system. By implementing a gen- erator, the existing systems can generate the object hierarchy and serialize it as Xaal.



Fig. 1. Integrating Xaal with existing AA systems using an object hierarchy.
This solution requires no major modifications to the existing systems, and thus the workload of implementing Xaal remains fairly low. Another advantage is that the document has to be parsed only once. There is, however, one extra step in the process compared to the direct approach of parsing the Xaal document directly into the AV system. However, implementing a Xaal parser for each system would not be sensible, and thus the extra processing is not considered a major issue.
XSLT Processing
Another way to integrate Xaal with existing systems is to transform it to a format of the target system using XSLT (represented in Figure 2). This method provides a simple solution to import Xaal documents into existing AV systems that have an algorithm animation language. It can also be used to export different formats from a system that supports Xaal.

XSLT
Document


XAAL
Document
AA System Document

Fig. 2. Integrating Xaal with existing AA systems using XSL stylesheet processing.
The benefit of this approach is that the XSLT stylesheets are quite simple to write for a person who knows the syntax of Xaal, the target language, and XSLT. Moreover, the target system need not be changed at all. This makes it possible to integrate Xaal with systems that are not open-source. On the negative side, this approach requires parsing of three files: the stylesheet, the Xaal document, and the generated AV system document.
Prototype Implementations
We have implemented the Xaal object hierarchy with a parser and a serializer. The implementation is on a prototype level, and not all elements are fully supported.
We have also implemented various adapters and generators between Xaal and other algorithm animation languages. Thus, we already have several different for- mats available for the same animation. The current selection of formats is presented

in Figure 3. In addition to the formats in the figure, the systems allow some other export formats as well. For example, Animal can be used to export QuickTime movies and MatrixPro exports TeXdraw illustrations. Thus, we could create, for ex- ample, a QuickTime movie from an SVG animation (Scalable Vector Graphics) [11].

JAWAA	SVG
Fig. 3. Prototype format transformations implemented. The arrows represent the direction of the transfor- mation. The ellipse represents an AV system, whereas the other are documents.
The prototypes do not implement all the features of the new language. For example, graphical primitive animation is currently not implemented, although it can be considered very important when exchanging information between systems like Animal or JAWAA. Still, the prototypes enable us to transfer data between AV systems. Although the data currently is only static visualizations, we feel that we have demonstrated that this kind of approach is suitable for the problem at hand and it would be worthwhile to complete the implementation and include other languages in the future.

Discussion
In this paper, we have introduced an XML language for describing algorithm an- imations. The language is based on the specifications and examples of ITiCSE XMLWG. In addition, we have described a set of tools for exchanging data between algorithm animation systems. In the following, we will discuss what use this work can have for participants of the ITiCSE XMLWG, developers of AV systems, and teachers wanting to use AV.
For the participants and the continuing work of the working group, the specifi- cations and tools presented in this paper provide concrete tools aiding the adoption of a common language. As the XML schema of Xaal is modular, the other par- ticipants of the group can take advantage of the specifications using the working group’s definitions.
Developers of AV systems can implement different import and export formats for the existing systems with a reasonable effort. This can improve the applicability of the systems and thus promote the usage of AV systems.
Since the AV systems have different approaches to creating animations, an AV designer can combine the good features of multiple systems in the process of creating animations. This could lower the effort needed to create the animations.
Finally, for teachers, ready-made animations can be used in multiple systems and one system can use animations created for another system, thus expanding the selection of ready-made animations. In addition, the teacher can use only one system in teaching, thus helping students by providing animations with similar user

interface and appearance throughout a course. Furthermore, the teacher can select the system based on the level of interaction it provides.
Future Visions
We have numerous improvements and ideas for the future of the language, and here we will present some of the most interesting ones.
The most urgent requirement is to finish the prototype implementation of the parser and the adapters and generators. A natural continuation for this is to sup- port new formats. These new formats could be other algorithm animation lan- guages (for example, GAIGS-XML [7]), graph description languages (for exam- ple, GraphXML [2]), or something more different like OASIS OpenDocument, pro- grammable graphics canvas element of HTML, or Macromedia Flash. Furthermore, as can be seen from Figure 3, many of the transformations are only available in one direction. A future challenge is to be able to generate Xaal documents with other systems, or alternatively, parse/transform other formats into Xaal.
The language could be extended to include programming concepts and thus al- low the definition of algorithms and program visualization. There is also a need for more complete metadata and semantic information to be included in the algorithm visualizations allowing more flexible searching from algorithm animation reposito- ries. This combined with a web-based service for transforming existing algorithm animations would lower the time needed for teachers to search for suitable ready- made examples and use existing animations in their teaching. Furthermore, we need to include and implement the interaction specification of the ITiCSE XMLWG.
For this to happen, it would be important for other educators to join in the development of common tools for the whole community. Having a group of re- searchers developing open source tools for AV systems could allow the development of high-quality tools easily adoptable by teachers.

References
Akingbade, A., T. Finley, D. Jackson, P. Patel and S. H. Rodger, JAWAA: easy web-based animation from CS0 to advanced CS courses, in: Proceedings of the 34th SIGCSE technical symposium on Computer science education, SIGCSE’03 (2003), pp. 162–166.
Herman, I. and M. S. Marshall, GraphXML - an XML-based graph description format, in: Graph Drawing, 2000, pp. 52–62.
Hundhausen, C. D., S. A. Douglas and J. T. Stasko, A meta-study of algorithm visualization effectiveness, Journal of Visual Languages & Computing 13 (2002), pp. 259–290.
Karavirta, V., “XAAL - Extensible Algorithm Animation Language,” Master’s thesis, Department of Computer Science and Engineering, Helsinki University of Technology (2005), available online at http://www.cs.hut.fi/Research/SVG/publications/karavirta-masters.pdf .
Karavirta, V., A. Korhonen and L. Malmi, Taxonomy of algorithm animation languages, in: Proceedings of the 2006 ACM symposium on Software visualization, 2006, to appear.
Karavirta, V., A. Korhonen, L. Malmi and K. St˚alnacke, MatrixPro - A tool for on-the-fly demonstration of data structures and algorithms, in: A. Korhonen, editor, Proceedings of the Third Program Visualization Workshop, Research Report CS-RR-407 (2004), pp. 26–33.
Naps, T., M. McNally and S. Grissom, Realizing XML driven algorithm visualization, in: Proceedings of the Fourth Program Visualization Workshop, 2006.

Naps, T. L., G. R¨oßling, V. Almstrum, W. Dann, R. Fleischer, C. Hundhausen, A. Korhonen, L. Malmi,
M. McNally, S. Rodgers and J. A´ngel Vel´azquez-Iturbide, Exploring the role of visualization and engagement in computer science education, SIGCSE Bulletin 35 (2003), pp. 131–152.
Naps, T. L., G. Ro¨ßling, P. Brusilovsky, J. English, D. Jarc, V. Karavirta, C. Leska, M. McNally,
A. Moreno, R. J. Ross and J. Urquiza-Fuentes, Development of XML-based tools to support user interaction with algorithm visualization, SIGCSE Bulletin 37 (2005), pp. 123–138.
R¨oßling, G. and B. Freisleben, ANIMAL: A system for supporting multiple roles in algorithm animation, Journal of Visual Languages and Computing 13 (2002), pp. 341–354.
W3C, Scalable Vector Graphics (SVG) 1.0 specification, http://www.w3.org/TR/SVG (2001).

A	Xaal Examples

1
2
3
4
5
6
7
8
9
10
11
12
13
Listing 1: Example of defining a shape, in this case, a cat.
1
2
3
4
5
Listing 2: Example of an array definition.

1
2
3
4
5
Listing 3: Example of a rotation operation. In the example, it is assumed that
catObj1 is an instance of the shape defined in Listing 1.

1
2
3
4
5
6
7
8
9
10
Listing 4: Example of a delete operation. The figures show the structure before (on the left) and after (on the right) the deletion.
