

Electronic Notes in Theoretical Computer Science 229 (2009) 3–19
www.elsevier.com/locate/entcs

Analysing Biochemical Oscillation through Probabilistic Model Checking
Paolo Ballarini,1 Radu Mardare,2 Ivan Mura3
The Microsoft Research - University of Trento Centre for Computational and Systems Biology, Piazza Manci 17, Povo-Trento 38100, Italy

Abstract
Automated verification of stochastic models has been proved to be an effective technique for the analysis of a large class of stochastically behaving systems. In this paper we show how stochastic model-checking can be effectively applied to the analysis of biological systems. We consider a few models of biological systems taken from the literature, and we consider both their encodings as ordinary differential equations and Markovian models. We show that stochastic model-checking verification of biological systems can complement both deterministic and stochastic simulation techniques when dealing with dynamical properties of oscillators. We demonstrate how stochastic model-checking can provide exact quantitative characterization of properties of systems exhibiting oscillatory behavior, providing insights that cannot be obtained with differential equations models and that would require a large number of runs with stochastic simulation approaches.
Keywords: Biological oscillators, Ordinary differential equations, Markov models, Stochastic model checking, Simulation


Introduction
The quantitative analysis of the dynamics of biological systems is a fundamental task in systems biology, a new research field that focuses on the systematic study of complex interactions using an integrative approach rather than a reductive one [14]. Even simple biochemical networks of interacting proteins can show surprisingly complex behavior, a behavior that cannot be understood looking at the evolution of the single components but that instead requires a systemic analysis approach.
Traditionally, the study of time-dependent dynamics of biological systems has been addressed with deterministic approaches, based on ordinary differential equa- tion (ODE, hereafter) models. ODEs provide quite an adequate abstraction for capturing the interactions and transformation of biochemical species, and come

1 Email: ballarini@cosbi.eu
2 Email: murdare@cosbi.eu
3 Email: mura@cosbi.eu

1571-0661/© 2009 Elsevier B.V. Open access under CC BY-NC-ND license.
doi:10.1016/j.entcs.2009.02.002

with a consolidated set of computational tools for model definition and solution [12]. More recently, stemming from the foundational work of Gillespie [10], a dis- crete approach to the modeling of biochemical systems has been gaining consensus, especially to model systems in which the continuous approximation does not seem to be justified, for instance when only a few molecules exist for some species.
The relationships between the continuous deterministic and the discrete stochas- tic representation of a given system are quite interesting and still subject of research. When the number of molecules that constitute a molecular network is low, the stochastic modeling may represent a more suitable tool to represent and analyze the dynamics of the system. On the other hand, as the number of molecules grows, abstracting discrete number of molecules into continuous concentration levels and representing evolution of dynamics through a system of coupled ODEs provides very accurate representations and also has the advantage of not suffering from the state-space explosion problem that plagues stochastic modeling tools. Moreover, stochastic models are mostly solved via simulation, which may require performing a substantial number of simulation runs to compute statistically relevant results.
When dealing with biological systems that exhibit complex patterns of behav- ior, it may be difficult to check whether the dynamics of the system satisfies some interesting properties. One of such properties, quite often vaguely defined, is the oscillatory behavior that characterizes a variety of biological systems [4].Whereas it is comparatively easy to hypothesize the presence of oscillations through visual inspection of simulated time courses, another matter is to precisely verify whether the oscillations will continue forever or rather will definitely stop, either by being progressively damped down or abruptly interrupted. In this respect, the abstraction adopted by ODE models has some advantages, because the deterministic approach ensures that any periodic evolution will indefinitely repeat. However, as we will see in this paper, such properties may appear to hold only because of the contin- uous approximation. On the other hand, results obtained from discrete stochastic models can still provide clues about the existence of oscillatory behaviors, but the noise introduced by stochastic fluctuations may make them appear less pronounced. Furthermore, when oscillations do exist but their phase, period and amplitude is also varying stochastically, a multi-run analysis of simulation traces over the time domain does not help in characterizing the long-range behavior of the system.

In this paper we consider two examples of models of biochemical systems taken from the literature, which we use as case studies to demonstrate the advantages of a formal approach to the definition and verification of properties of biological sys- tems, including oscillatory behaviors. The major contribution of this paper is the definition of an approach to the formal specification of properties, based on Proba- bilistic Computation Tree Logic (PCTL, hereafter) [11] and Continuous Stochastic Logic (CSL) [1]. PCT/CSL formulas can be used to precisely define properties of system dynamics, such as convergence of a variable to a fixed value, bound oscil- lation around a fixed value, perpetual alternation of growth and decrease phases, relationships among multiple variables. Such formulas define a query-language in

which a user can encode a property of the systems he intends to verify. Proba- bilistic model checkers that accept PCTL formulas defined over the variables of a discrete stochastic model can then be used to verify whether the property holds of the system. In this paper, we show how the PRISM [15] model checker can be used for this purpose. We apply our formal approach to the example models to show how system properties can be characterized and to demonstrate the insights that can be obtained into system dynamics with the verification with PRISM. We show the obvious advantages provided by the exact quantitative solutions returned by a model-checking tool. In contrast, simulation of stochastic models can only pro- vide statistically approximate solutions. Our proposed approach applies to general models of biological systems, its current limitation being the fact that only models having a bounded state space are amenable to analysis.
The rest of this paper is organized as follows: in Section 2 we introduce the basics about biochemical oscillators illustrating a specific system which will be used as the running example throughout the remainder of the paper. In Section 3 we investigate the use of temporal logic as a means to encode relevant features of oscillating systems. In Section 4 we briefly describe probabilistic model checking. In Section 5 we analyse the structural properties of the Markovian model of the our running example, the verification of which by means of the PRISM model checker is illustrated in Section 6. We summarise our contribution in the final section of the paper.


Biochemical oscillations
A biochemical system consists of a number of correlated (type of) entities, referred to as reactants, and a number of, time consuming, interactions, referred to as re- actions. Each reactant belongs to a given species. Reactions are descriptions of the system’s dynamics and they indicate how the production/consumption of reac- tants is regulated by other reactants. A biochemical system is fully characterised by: a description of the system’s reactions (including the timing information of each reaction, referred to as reaction rate), and the initial amount of reactants of each species. In this work we are interested in analysing a specific behaviour of certain biochemical systems, namely oscillation. Informally we say that a biochem- ical system exhibits an oscillating behaviour when the system’s reactions result in a (periodic) fluctuation of the level of the reactants, around a given value. To this aim, we consider a specific example taken from the literature, known as the 3-way oscillator, which we use as the running example of the paper.


The 3-way oscillator: transient oscillation
We consider a simple system of three biochemical reactions involving three species of molecules, namely: A, B and C. The reactions are positive feedback arranged in

a loop fashion and their chemical equation form is:



A + B −→ B
+ B	B +
r
C −→ C
+ C	C +
r
A −→ A
+ A (2.1)


where rA, rB and rC are the kinetic constants of the reactions. The meaning of reactions (2.1) is intuitive. For example, the first equation indicates that a molecule of A and a molecule of B are consumed in order to produce two molecules of B and that happens at a constant rate rA 4 . Such system has been introduced in [3] and it has been referred to as the 3-way oscillator for it can be shown that the level of molecules of each species oscillates in time. Let a0, b0 and c0 be the initial number of molecules of the three species. The system enjoys the following properties: first the total number of molecules in the system INV = a0 + b0 + c0 is invariant, as the are not synthesis nor degradation reactions, and because of the stoichiometry of the reactions. Second the system remains alive meaning that the system reactions are all possible, as long as all reactants are present: as soon as one species get extinct the system irreversibly enter a terminating path at the end of which INV molecules have been cumulated into either one of the remaining species. For this reason we refer to the oscillation of the 3-way oscillator as transient (i.e. it damps off in finite time). We will see how the oscillation of the 3-way oscillator can be turned into a permanent one (i.e. one that never stops). Based on our running example we now briefly describe the two standard modeling approaches used in system biology.

Continuous Deterministic Modeling of Biological Systems
A deterministic model of a system is one in which the parameters and variables are not subject to random fluctuations, so that the system is, at any time, entirely defined by the initial conditions chosen. Biological systems have been extensively modeled with systems of coupled ODEs at various abstractions levels, ranging from molecular interactions [18] up to predator-preys population evolution [20]. Variables representing biochemical entities of a deterministic model are continuous and their value X(t) at time t represents the amount of the biochemical entities they repre- sent, i.e. the state of the system at that time. The state X(t0) of the system at time t0 defines the initial condition. Changes of the system state along time are described by a set of differential equations, in the form X'(t) = F (X(t)) with F : Rn → Rn, n being the number of variables in the model. The system of ODEs can be solved either analytically or via simulation (numerical integration) to determine the state of the system at any time t ≥ t0, and to determine possible stationary solutions. A continuous deterministic model of the 3-way oscillator can be straightforwardly derived from the chemical equations (2.1). It has 3 real-valued variables a, b and c, where x ∈ {a, b, c} represents concentration of species X ∈ {A, B, C}. The changes


4 Similar considerations hold for the other reactions.


	
(a) on the phase-space a × b × c	(b) on the phase-plane a × b

Fig. 1. ODEs solutions of the 3-way oscillator with (a0, b0, c0) =(100, 200, 10)

in the amount of species is described by the following system of ODEs:


a˙ = −rAab + rCac b˙ = rAba − rBbc
c˙ = −rCac + rBbc

(2.2)


where x˙ = dx denotes the first derivative (with respect to time) of x∈{a, b, c}.
Notice that the rate constants in (2.2) are multiplied by the concentrations of reactants to account for the concurrent execution of multiple instances of the same reaction according to the mass-action law. Given the concentrations of the 3 biochemical species at time t = t0, it is possible to solve the system of ODEs above to obtain the state of the system at time t ≥ t0. Many tools exist that can perform this task, some of which are also able to automatically obtain the system of ODEs from the system’s chemical equations form. Figure 1(a), Figure 1(b) show solutions 5 of the system (2.2) plotted onto the phase-space and phase-plane respectively. Those plots display that the concentrations of the three species follow indeed a very regular oscillating behaviour evidenced by the solution trajectories forming a neat triangular orbit around the initial concentration point.
We observe that, although a useful method to gain insights about a system behaviour, continuous deterministic modeling has some downsides. For example, as we will see, oscillation for the system (2.1) is transient but such a fundamental characteristic cannot be evinced through ODEs analysis. Furthermore, the system of ODEs (2.2) allows for some trivial fixed points, such as a0 = b0 = c0 (given that ka = kb = kc). The solution of (2.2) for an initial condition corresponding to any such fixed point will indicate that the system does not evolve at all, whereas, in reality, the system will certainly evolve for any initial condition such that a0 > 0, and b0 > 0 and c0 > 0.

5 Such solutions are calculated with the following rates values: ka = kb = kc =1 



Fig. 2. A simulation trace of the 3-way oscillator with initial configuration a0 = b0 = c0 = 333


Discrete Stochastic Modeling of Biological Systems
As the number of entities in biological systems is finite and discrete, it is possible describing biological systems as a collection of discrete state variables, whose value over time change as a consequence of interactions that stochastically happen in the system. It has been proved by Gillespie in [10] that, under homogeneity conditions, the time to the occurrence of the next reaction in a biochemical system can be very well approximated through a negative exponential probability distribution. This result provides the theoretical ground for representing and analyzing the dynamics of biochemical systems through continuous-time Markov chain (CTMC)[19] models. Gillespie’s result has lead to the implementation of many software tools for the stochastic simulation of biological systems (see for example [17,5,7]). Such tools take as input a description of modeled system and through application of the Gillespie algorithm they calculate an approximated time course of the system’s reactants. Figure 2 shows a plot of the output of a single simulation trace for the 3-way oscillator model (with initial condition a0 = b0 = c0 = 333) obtained through the Cyto-Sim [17] simulation tool. By observing the simulation trace in Figure 2 we can evince the following: first, the molecules of the 3 species A, B and C do follow an oscillating course; secondly, the amplitude of oscillation is not constant; thirdly, species B is the oscillation damper (i.e.  oscillation ends with 999 molecules of B and none of both A and C). Such observations, however, are true only for that (very) specific simulation run. Other simulation runs may (and will) provide us with different insights. Therefore, if we want to use simulation for devising meaningful information about the general behaviour of a system we need to calculate statistics over a large number of simulation runs.
Alternative approaches to the simulation of discrete stochastic models, are given by Markovian analysis techniques [19] and/or probabilistic/stochastic model check- ing [11],[1]. In the following section we introduce the basics about temporal logic and model-checking and we will show how relevant properties of systems of bio- chemical reactions can be stated as (probabilistic) temporal logic queries which can be automatically verified against a discrete stochastic model. First, though, we introduce a permanent oscillation variant of our running example.

The 3-way oscillator with doping: permanent oscillation
In [3] Cardelli shows that in order to make the oscillation of the simple 3-way oscillator, perpetual, it suffices to add a doping reaction for each of the 3 species A, B and C, where a doping reaction is one that is able to produce a molecule of a species X ∈{A, B, C} from a molecule of a doping substance DX and one of another species. Practically speaking the chemical equations form of the 3-way oscillator with doping is:


A + B −→ B
+ B	B +
r
C −→ C
+ C	C +
A −→ A + A

(2.3)

DA +
r
C −→ A
DB +
r
A −→ B
DC +
r
B −→ C


where DA, DB and DC are the doping substances for A, B and C respectively. The role of the doping reactions (the bottom three reactions in (2.3)) is to avoid that the system blocks once a species get extinct: the presence of at least one molecule of each doping species is enough to guarantee that a species will not get extinct (a species may have zero molecules at some point in time, but it is guaranteed that from there new molecules of the species will be generated through doping). As a result it can be shown that oscillation, for the “doped” version of the 3-way oscillator, is never ending. We will use this model to illustrate, in a comparative fashion, how model checking techniques can be used for the analysis of both non-perpetual and perpetual oscillating behaviours.

On the logical characterisation of oscillation
We consider temporal logic to express oscillation related queries. Given a model’s variable v we describe as oscillation (with respect to v) those evolutions for which v fluctuates around a value v = k. In logical terms (permanent) oscillation of a system may be expressed through the following temporal property: “always in the future, the variable v departs from and reaches the value v = k inﬁnitely often”. We consider branching-time temporal logic CTL [8] and its probabilistic extensions PCTL [11] and CSL [1] as formal means to expressing oscillation related properties. In the following we briefly introduce CTL and PCTL/CSL: for a detailed treatment the reader is referred to the literature [8,11,1].
In CTL, formulae are built upon a set of atomic propositions (AP ) and are evaluated against Kripke structure models. Two basic temporal operators are used in combination with propositional logic’s conjuntion (∧), disjuntion (∨) and negation (¬): a next-state operator (X), for referring to properties of successor states (i.e. X (a) is true in s, denoted s |= X (a), if a is true in some successor of s), and an until operator (U ) for referring to properties which hold in future states (i.e. (ψ Uφ) is true in s if and only if from s it is possible to reach a future state s' |= φ through a sequence of states satisfying ψ). Eventually in the future (F (a) ≡ (true U a)) and always in the future (G ≡ ¬F (¬a)) are special cases of until formulae. CTL temporal operators are path quantified, either existentially (EX, EU ) or universally (AX, AU ). Existentially quantified formulae must be satisfied by at least a path starting

from the current state, as opposed to universally quantified formulae, which must be satisfied by every path starting from the current state. Permanent oscillation (with respect to a variable v) can be characterised in CTL by the following formula:

φCT L ≡ AG(((v = k) → EF (v /= k)) Λ ((v /= k) → EF (v = k)))	(3.1)
which states that, at any point in the future, if the system’s evolution reaches a state such that v = k then it has to be possible to reach a future state such that v /= k and vice versa.
The probabilistic CTL [11] (PCTL) and the Continuous Stochastic Logic [1] (CSL) are logic to state properties of, respectively, discrete time and continuous time Markov chains models. PCTL and CSL formulae are of the same form as in CTL except that path operators are continuously quantified, rather than existentially or universally. Hence, for example, the formula PŒp(ψ U φ) is satisfied in a state s of a Markov chain model if the measure of probability of those paths satisfying (ψ U φ) is bounded by p (with Ð∈ {≤, <, >, ≥} and p ∈ [0, 1]). Relying on basics propositional equivalence the CTL expression of oscillation (3.1) can be reformulated in PCTL/CSL terms resulting in the following probabilistic formula:


φPCTL ≡ P≤0[T U ((((v = k) Λ P≤0(T U (v /= k)))) V (((v /= k) Λ P≤0(T U (v = k)))))]
(3.2)
which states that “evolutions for which once a state v = k is reached then it can- not be left” have a null probability. Other important aspects of oscillation can be coded in temporal logic, noise ﬁltering and periodicity or, more generally, regularity being two such examples. Fluctuations whose amplitude is below a certain (well defined) threshold classify as noise, and should not be detected as oscillations. If n is the noise threshold for a given system then existence of noise ﬁltered oscillations permanence can be encoded in CTL as 6 :

φCT L ≡ AG(((v = k) → EF ((v> k+n)V(v< k—n))Λ((v> k+n)V(v< k—n) → EF (v = k)))
(3.3)
Oscillation regularity aspects, on the other hand, regard the periodicity as well as the amplitude of fluctuations around k. Plots in Figure 3 are examples of different cases of oscillation. Figure 3(a) shows the most regular type of oscillation, one whose amplitude and periodicity are both always constant. Two examples of irregular oscillations are depicted in Figure 3(b) and Figure 3(c). Encoding of oscillation regularity aspects in temporal logic terms, is not a trivial task.

Probabilistic Model Checking
Probabilistic model checking is a formal technique for the verification of systems that can be modelled in terms of stochastic processes. It extends classical model

6 PCTL version of (3.3) is straightforward


		
(a) permanent, regular oscillation	(b) irregular transient oscillation	(c) irregular transient oscillation Fig. 3. Examples of regular vs irregular oscillation




checking [6], to the probabilistic framework. The basic idea behind (probabilis- tic) model checking is as follows: an algorithm is developed which takes as input a (stochastic) model M of the considered system (often expressed through some formal modelling language, such as, for example, stochastic process algebras or stochastic Petri Nets [16]) and a property φ expressed as a (probabilistic) temporal logic formula. The algorithm then automatically check φ against M , and provides a positive output, if M satisfies φ (denoted M |= φ) or a negative one if that is not the case (denoted M /|= φ). The verification of φ against M is achieved through an ex- haustive exploration of M , hence the output of model checking is exact, as opposed to the output of (stochastic) simulation which is inherently approximated. The main difference between classical and probabilistic model checking is in the nature of the model they are referred to, and, as a consequence, in the type of verification they allow for. In classical model checking, a model is given by a labelled tran- sition system, a graph which captures the system’s evolutions without expressing any timing information. With probabilistic model checking models are Markov pro- cesses (i.e. labelled transition systems enriched with stochastic information), thus inherently contain timing and probabilistic information. As a consequence classi- cal model checking is suitable for qualitative veriﬁcation of a system’s model, such as, for example “does the oscillation of a system eventually stop?”. On the other hand probabilistic model checking allows for quantitative veriﬁcation of a model: properties such as “what is the probability that the oscillation will stop within time T?” can be stated and verified through probabilistic model checking. Finally the expressiveness of probabilistic model checking analysis is further enhanced by the possibility of reward based veriﬁcation. A Markov chain model may be enriched with meaningful state rewards and/or transition rewards, and reward-based prop- erties, such as, for example, “what is the expected amplitude of oscillation within time T?”, may then be verified against it. Before proceeding with the probabilistic model checking verification of the 3-way oscillator model (Sec. 6), we first set the basics about reasoning on oscillations with temporal logic.



Fig. 4. State space of the 3 species oscillator with initial state a0 = b0 = c0 =3 
Markov Chain model of the 3-way oscillator
Based on the chemical equations (2.1) a CTMC model of the 3-way oscillator can be obtained straightforwardly. Figure 4 illustrates the state-space of the CTMC model of the 3-way oscillator corresponding to the initial conditions: a0 = b0 = c0 = 3. Each state in Figure 4 is given as a triple of integers (a, b, c) representing the corresponding number of molecules of each species in the state, whereas the labels on each arc represent the transitions rate 7 . We observe that the CTMC in Figure 4 enjoys a specific structure: each path along the perimeter of a given triangle corresponds to oscillations of constant amplitude 8 . We refer to the set of states on the perimeter of such a “triangle” as level k states , formally: Lk =
{(a, b, c) ∈ S : min(a, b, c) = k} ⊂ S and to the set of states contained in the level k triangle as L≥k = {(a, b, c) ∈ S : min(a, b, c) ≥ k} ⊆ S. Counting the number of states in L≥k is necessary in order to perform significant reward based analysis of the 3-way oscillator CTMC model (see Section 6). The total number of states in the CTMC is proportional to the system invariant (INV = a0 + b0 + c0) and is given in the the following proposition. Furthermore an iterative rule for computing the

7 Note that each transition rate is marking dependent, i.e. its value depends on the distribution of molecules on that state.
8 Note that states in each such “k-triangular” path are such that the minimum between A, B and C is equal to k.


	

total number of states
number of k-level
states for 1 ≤ k ≤ 10

Fig. 5. Total number of states and k-level states in the 3-way oscillator CTMC

number of states in L≥k is also defined.
Proposition 5.1 Let M = (S, Q, s0) be the CTMC model of the three species os- cillator with state-space S and initial state s0 = (a0, b0, c0)= (n, n, n) and INV = a0 + b0 + c0.
the number of states in S is given by:
(INV + 2) · (INV + 1)

|S| =
.
2	(5.1)

the number of states contained in the level-k triangle can be iteratively calculated as follows:
|L≥(k−1)| = |L≥(k)| +9 · k	∀k : 1 ≤ k ≤ n	(5.2)
and the number of state on level-k triangle’s perimeter is given by |Lk| = 9(n— k). Note that, trivially, |L≥n| = 1.
Through (5.1) we can straightforwardly assess the state-space explosion as a function of the model initial state (i.e. as a function of INV ). On the other hand (5.2) will be used to normalise the reward models described in the next section (Section 6) and which allow us to quantify the likelihood of the system to oscillate within level k as a function of the number of states in the model. Tables in Figure 5(a) and Figure 5(b) shows sample values obtained by application of (5.2) and (5.1).

Property specification and verification with PRISM
In this section we present results of probabilistic model checking verification of the PRISM model of the 3-way oscillator both in its standard and “doped” version. For the sake of space we omit the PRISM code, the interested reader can find it in [2].



The 3-way oscillator without doping has a non-null probability of never returning into state a = j


Probability of oscillation to terminate in A

Fig. 6. Probability of permanent oscillation and probability of oscillations to terminate in a given state
6.1	Veriﬁcation of the 3-way oscillator, with and without doping
The following queries, first described informally in natural language, then encoded as PRISM formulae, have been considered for verification.
What is the probability that the oscillation will never terminate ?
P=?[T U ((((a /= j)|P≥1(T U (a /= j)))&((a = j)|P≥1(T U (a = j))))]	(6.1)
Results of verification of (6.1) (referred to the initial state a0 = b0 = c0 = 5), are shown in Figure 6(a). They confirm that oscillation is permanent for the 3-way os- cillator with doping whereas it is not for the standard version of it: the probability of ever returning into state a = j is less than 1 6j ∈ [0,INV ] (note that for a = 5 such probability is equal to 1 simply because of the initial state a0 = 5). It should be noted that (6.1) provides a formal means to automated verification of oscillation termination, something which cannot be achieved through simulation.

What is the probability that oscillation terminates in species X ∈{A, B, C}?
P=?[T U (a = INV )]	(6.2)

Results for (6.2) are depicted in Figure 6(b). Specifically the probability that oscil- lation ends in A is plotted against the initial number of A molecules (a0), and for different (equal) initial number of B and C molecules (b0 = c0). Plots in Figure 6(b) reveal a maximum corresponding to a0 = 2, which indicates a particular probabilis-



Probability of oscillation to terminate in species A
within time T

Probability of oscillation to terminate within time T

Fig. 7. Probability of oscillation to terminate within a time bound T

tic tendency of the 3-way oscillator, that is: the smaller the initial value of species
X, the higher the probability that oscillation terminates in X.

1 What is the probability that oscillation terminates in species X within time T?
P=?[T U≤T (a = INV )]	(6.3)
C.2 What is the probability that the oscillation eventually terminates within time
T ?

P =?[T U≤T ((a = INV ) V (b = INV ) V (c = INV ))])	(6.4)
Results of verification of (6.3) and (6.4) are shown in Figure 7(a) and Figure 7(b) respectively. They show a rather counter intuitive peculiarity of the oscillator which is: the higher is the initial population, the faster the oscillator will reach its ab- sorbing state. Note that because these experiments are referred to uniform initial population (i.e. a0 = b0 = c0), then the limit probability in Figure 7(a) is 1/3. Finally, plots in Figure 7(a) and Figure 7(b) provide a quantification of the time to absorbtion: oscillation stops certainly within time T = 2.

D What is the probability of an oscillation of amplitude k?
P =?[((a = k) Λ (b > k))U ((a = k) Λ (b = k) Λ (c = (3 · a0 — 2 · k)))    (6.5)
An oscillation of amplitude k corresponds to the path on the perimeter of the level-k triangle (see Figure 4). Each side of the level-k triangle can be characterised by a CSL formula. For example (6.5) identifies the “height” of the triangle. Through ver-



Steady-state probability of A as a function of doping
DA


Steady-state probability of B as a function of doping
DA

Fig. 8. Oscillator with doping: steady-state probability of A and B as a function of doping DA


Fig. 9. Probability of oscillation of amplitude k


ification of (6.5) (and similar formulae for the remaining two sides of the triangle), we can get a quantification of the likelihood of an oscillation of amplitude k. Fig- ure 9 shows results of verification of (6.5) for different initial amount of molecules. The U-shaped plots in Figure 9 indicate that (very) small and (very) large ampli- tude oscillations are more likely than those whose amplitude is in between.
E (reward based). What is the expected level-k reward cumulated within time T?





Fig. 10.	Expected level-k within T with reward  1 
|Lk|
given to each level-k state and initial state

a0 =33, b0 =33, c0 =33

R{level k reward} =?[C≤T ]	(6.6)

where “level k reward” is a reward model, that assigns a reward of  1 
k
to each

level-k state, where the normalising constant |Lk| is defined as in Proposition 5.1. Verification of (6.6) leads to plots in Figure 10. Those curves indicate that, on av- erage, the system spend more time in the orbits closer to the initial state a0 = b0 = c0.

F (stready-state). What is the probability that the number of molecules of species
X is j on the long-run?

S =?[(a = j)]	(6.7)
such formula is referred to “doped” version of the 3-way oscillator only (i.e. the standard 3-way oscillator does not allow for a steady-state distribution). Results for (6.7) are depicted in Figure 8(a). Specifically the steady-state probability for (a = j) is plotted against the amount of A’s doping (DA) for different (equal) initial number of B’s and C’s doping (i.e. DB = DC = 1). When the amount of doping is equal for all three species the probability at steady state decreases linearly when we move from outer orbits towards inner ones. On the other hand, as we increase the amount of doping of a species (A in this example) while keeping the doping for the other species constant, then the more “doped” species becomes less likely to “dominate” the others. Such rather counter intuitive behaviour may be explained by looking at the nature of reactions (2.3): in fact the more doping we add, the more likely we are to synthesis new molecules of A, hence the more likely we are to consume them in the production of new B. As a result, opposite to what one would expect, augmenting the doping of species X is actually going to augment (the average number of molecules of) species X', where X' is the successor of X, assuming A < B < C as order.

Conclusion
In this paper we have proposed a comparative study of modelling techniques for the analysis of biochemical systems. We have focused on a specific class of systems, ones whose behaviour is characterised by existence of oscillations in the quantities of reactants they consist of. First we have demonstrated how useful insight about an oscillating system can be gained by application of standard system biology’s mod- elling techniques, such as solution of continuos deterministic (ODEs) model and simulation of a discrete stochastic model. However we have seen that both such methods lack to fulfil the modeller needs for analysis of the considered system. We have then argued that formal languages, such as temporal logic, may be applied to encoding relevant characteristic of an oscillator, providing a formalisation of the oscillation permanence in terms of two popular logic: CTL and PCTL. We have then developed a Markovian model of both a transient oscillator, known as the 3- way oscillator as well as of its permanent oscillation variant. We have demonstrated the effectiveness of automated temporal logic verification, by coding such models in the probabilistic model checker PRISM. we have been able to perform a thor- ough probabilistic analysis of several reachability as well as reward based logical formulae, which provided us with interesting outcomes which could not be obtained otherwise. Future developments of this work include the extension of the proposed methodology to the verification of more complex biological systems, such as the cell-cycle, a model of which is currently being developed and analysed.


Related work
Application of model checking techniques to system biology has been proposed in some other works. In [13], Kwiatkowska et al. developed a non trivial stochastic model of the complex Fibroblast Growth Factor (FGF) signalling pathway. They used PRISM to code the FGF pathway and developed a number of probabilistic properties, some of which reward-based, to verify relevant properties of the sig- nalling mechanism. In [9] Gilber et al. propose a general overview about formal modelling techniques suited to the verification of biological systems. Based on Petri Net model of the ERK signal transduction pathway, they identify what type of formalisms/verification-technique, is suitable to what type of analysis the modeller is interested in. Hence in the discrete-state modelling framework non-probabilistic model checking (i.e. standard temporal logic) has to be used to perform qualitative analysis, whereas probabilistic/stochastic is needed for quantitative analysis. Fi- nally in the continuous-state modelling framework, ODEs solution as well as Linear Time Logic with constraints (LTLc) are to be used for model analysis.

References
C. Baier, B. Haverkort, H. Hermann, and J.-P. Katoen. Model-checking algorithms for continuous-time Markov chains. IEEE Trans. on Software Eng., Vol. 29(6):pp. 524–541, June 2003.


P. Ballarini, R. Mardare, and I. Mura. Query-based verification of biochemical oscillations through probabilistic model checking, TR 05/2008, available at http://www.cosbi.eu. Technical report, CoSBi, 2008.
L. Cardelli. Artificial biochemistry. Technical report, The Microsoft Research - CoSBi, 2006.
M. Cavaliere and S. Sedwards. Modelling cellular processes using membrane systems with peripheral and integral proteins. In Springer, editor, Proceedings of the fourth International Conference on Computational Methods in Systems Biology (CMSB2006), LNBI-LNCS 4210, 2006.
F. Ciocchetta and J. Hillston. Bio-PEPA: an extension of the process algebra PEPA for biochemical networks. In Proceedings of FBTC 2007, volume 194 of Electronic Notes in Theoretical Computer Science, pages 103–117, 2008.
E. Clarke, O. Grumberg, and D. Peled. Model Checking. MIT Press, 1999.
L. Dematt´e, C. Priami, and A. Romanel. Modelling and simulation of biological processes in BlenX.
SIGMETRICS Performance Evaluation Review, 35(4):32–39, 2008.
E. Clarke, E. Emerson, and A. Sistla. Automatic verification of finite-state concurrent systems using temporal logic specifications. ACM Transactions on Programming Languages and Systems, Vol. 8(2):pp. 244–263, 1986.
D. Gilbert, M. Heiner, and S. Lehrack. A unifying framework for modelling and analysing biochemical pathways using petri nets. In In proceedings CMSB 2007, (Computational Methods in Systems Biology), Editors: M.Calder and S.Gilmore, Published by Springer-Verlag in LNCS/LNBI, 2007.
G. T. Gillespie. Exact stochastic simulation of coupled chemical reactions. J Phys Chem., 81(25):2340– 2361, 1977.
H. A. Hansson and B. Jonsson. A framework for reasoning about time and reliability. In Proc. 10th IEEE Real -Time Systems Symposium, pages 102–111, Santa Monica, Ca., 1989. IEEE Computer Society Press.
S. Hoops, S. Sahle, R. Gauges, C. Lee, J. Pahle, N. Simus, M. Singhal, L. Xu, P. Mendes, and
U. Kummer. COPASI — a COmplex PAthway SImulator. Bioinformatics, 22:3067–3074, 2006.
John Heath, Marta Kwiatkowska, Gethin Norman, Dave Parker, and Oksana Tymchyshyn. Probabilistic model checking of complex biological pathways. Theoretical Computer Science, 391:239– 257, 2008.
H. Kitano, editor. Foundations of Systems Biology. MIT Press, 2001.
M. Kwiatkowska, G. Norman, and D. Parker. Probabilistic symbolic model checking with probabilistic symbolic model checking with Prism. In J. Katoen and P. Stevens, editors, Proceedings of the 8th International Conference on Tools and Algorithms for Construction and Analysis of Systems (TACAS 2002), volume 2280 of Lecture Notes in Computer Science, 2002.
M. A. Marsan, G. Balbo, G. Conte, S. Donatelli, and G. Franceschinis. Modelling with Generalized Stochastic Petri Nets. Wiley, 1995.
S. Sedwards. and T. Mazza. Cyto-sim: A formal language model and stochastic simulator of membrane- enclosed biochemical processes. Bioinformatics, 2007.
J. C. Sible and J. J. Tyson. Mathematical modeling as a tool for for investigating cell cycle control networks. Methods, 41:238–247, 2007.
W. J. Stewart. Introduction to numerical solution of Markov Chains. Princeton, 1994.
V. Volterra. Variations and fluctuations of the number of individuals in animal species living together.
Animal Ecology, 1931.
