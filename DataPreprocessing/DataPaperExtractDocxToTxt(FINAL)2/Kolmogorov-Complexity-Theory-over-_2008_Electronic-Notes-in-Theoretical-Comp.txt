

Electronic Notes in Theoretical Computer Science 221 (2008) 153–169
www.elsevier.com/locate/entcs

Kolmogorov Complexity Theory over the Reals
Martin Ziegler1,2
University of Paderborn, Germany
Wouter M. Koolen3
CWI, Amsterdam, The Netherlands

Abstract
Kolmogorov Complexity constitutes an integral part of computability theory, information theory, and com- putational complexity theory—in the discrete setting of bits and Turing machines. Over real numbers, on the other hand, the BSS-machine (aka real-RAM) has been established as a major model of computation. This real realm has turned out to exhibit natural counterparts to many notions and results in classical complexity and recursion theory; although usually with considerably different proofs. The present work investigates similarities and differences between discrete and real Kolmogorov Complexity as introduced by Montan˜a and Pardo (1998).
Keywords: Kolmogorov Complexity, Real Recursion Theory, BSS Model, Transcendence Degree


Introduction
It is fair to call Andrey Kolmogorov one of the founders of Algorithmic Information Theory. Central to this field is a formal notion of information content of a fixed finite binary string x¯ ∈ {0, 1}∗: For a (not necessarily prefix) universal machine U let KU (x¯) denote the minimum length(⟨M⟩) of a binary encoded Turing machine
M such that U (⟨M⟩), on empty input, outputs x¯ and terminates.  Among the
properties of this important concept and the quantity KU , we mention [20]:
Fact 1.1	a) Its independence, up to additive constants, of the universal machine
U under consideration.

1 supported by the German Research Foundation (DFG) with project Zi 1009/1-2
2 ziegler@upb.de
3 wmkoolen@cwi.nl

1571-0661 © 2008 Elsevier B.V. Open access under CC BY-NC-ND license.
doi:10.1016/j.entcs.2008.12.014

The existence and even prevalence of incompressible instances x¯, that is with
KU (x¯) ≈ length(x¯).
The incomputability (and even Turing-completeness) of the function x¯	KU (x¯); which is, however, approximable from above.
Applications in the analysis of algorithms and the proof of (lower and average) running time bounds.
We are interested in counterparts to these properties in the theory of
Real Number Computation
Concerning problems over bits, the Turing machine is widely agreed to be the ap- propriate model of computation: it has tape cells to hold one bit each, receives as input and produces as output finite strings over 0, 1 , can store finitely many of them in its ‘program code’, and execution basically amounts to the application of a finite sequence of Boolean operations. A somewhat more convenient model, yet equivalent with respect to computability, the Random Access Machine (RAM) operates on integers as entities. Both are thus examples of a model of computation on an algebra: ( 0, 1 , , , ) in the first case and (Z, +, , , <) in the second. Among the natural class of such general machines [35], we are interested in that corresponding to the algebra of real numbers (R, +,  ,  ,  , <): this is known as the real-RAM and popular for instance in Computational Geometry [31,4]. In [6,3], it has been re-discovered and promoted as an idealized abstraction of fixed-precision floating-point computation. The latter publication(s) led to the name “BSS model” which we also adopt in the present work:
Definition 1.2 A BSS machine M consists of
An unbounded (input, work, and output) tape capable of holding a real number in each cell.
A reading and a writing head to move independently.
A finite set Q of states.
A finite, numbered sequence (c1,..., cJ ) of real constants.
And a finite control δ describing, when in state q and depending on the sign of the real x contained in the cell at the reading head’s current position, which of the following actions to take:
Copy, add, or multiply x to the real y under the writing head.
Subtract x from y or divide y by x (the latter under the provision that x /= 0).
Copy some cj to y.
Move the reading or writing head one cell to the left or to the right.
Halt.
Let R∗ := n∈N Rn denote the set of finite sequences of real numbers and size(x)= n for x ∈ Rn. M realizes a partial real function on R∗ (by abuse of notation also called M :⊆ R∗ → R∗, x '→ M(x)) according to the following semantics:
For x ∈ Rn, execution starts with the tape containing (n, x1,..., xn). If M eventu-

ally terminates and the tape contents is of the form (m, y1,.. .) with m ∈ N, then
M(x) := (y1,..., ym); otherwise M(x) := ⊥ (i.e. x /∈ dom(M)).
A subset L  R∗ is called a (real) language. It is (BSS) semi-decidable if L = dom(M) for some BSS machine M. L is (BSS) decidable if its characteristic function is realized by some M. L being (BSS) enumerable means that L = range(M) for some total (!) M.
The above definition refers to the BSS equivalent of a one-tape two-head Turing machine. It generalizes to k tapes: as usual without significantly increasing the power of this model. In [6,3], the authors transfer several important concepts and results from the classical (i.e. discrete) theory of computation to the real setting, such as
The existence of a universal BSS machine, capable of simulating any given ma- chine and satisfying SMN and UTM-like properties.
The undecidability of the termination of a given (encoding of another) BSS ma- chine, i.e. of the real Halting problem H.
A real language decidable in polynomial time by a non-deterministic BSS machine can also be decided in exponential time by a deterministic one:
PR ⊆ NPR ⊆ EXPR .	(1)
There exist decision problems complete for NPR; and, relatedly, an important open question asks whether and which of the inclusions in Equation (1) are strict.
Here, running times and asymptotics are considered in terms of the size n of the input x = (x1,..., xn) ∈ R∗: a natural algebraic counterpart to the (bit-) length of binary Turing machine inputs x¯ = (x1,..., xn) ∈ {0, 1}∗.
In fact the last two items above have spurred the development of a rich theory of computational complexity over the reals [24] with classes like #PR [22,7], PSPACER [15,18], BPPR [12], or PCPR [23] and their relations to the discrete realm [8,9,16,10]. It is in a certain sense quite surprising (and usually rather involved to establish) that this theory of real computation exhibits so many properties similar to its classical
counterpart, because proofs of the latter generally do not carry over. For instance, Hilbert’s Tenth Problem (i.e. the question whether a system of polynomial equations over field F admits a solution in F ) is undecidable over F = 0, 1 [21] but for F = R becomes decidable due to Quantifier Elimination.

Pure Algebra
This section recalls some well-known mathematical notions and facts; see for in- stance [13,19].
Definition 1.3 Let E ⊆ F denote fields.
Call x	F algebraic over E if p(x) = 0 for some non-zero p	E[X]. Otherwise
x is transcendental (over E).

We say that x1,..., xn		F is algebraically dependent over E if p(x1,..., xn)= 0 for some non-zero p	E[X1,..., Xn].
A set X	F is algebraically dependent over E if some finite subset of it is. Otherwise X is called algebraically independent.
The transcendence degree of X	F (over E), trdegE(X), is the maximum cardinality of a subset Y of X algebraically independent (over E).
A transcendence basis of F (over E) is a maximal algebraically independent subset of F .
F is purely transcendental over E if F = E(S) for some S	F that is alge- braically independent over E.
Fact 1.4  a) Let a1,..., an ∈ F be algebraic over E. Then there exists some
a ∈ F, called a primitive element, such that E(a1,..., an)= E(a).
If Y	X is algebraically independent over E and Card(Y ) = trdegE(X), then every element of X is algebraic over E(Y ).
Two transcendence bases have equal cardinality.
For a chain E ⊆ F ⊆ G of ﬁelds, it holds trdegE(G) = trdegE(F ) +trdegF (G).
In R, e and π are transcendental over Q.
Let a1,..., an be algebraic yet linearly independent over Q. Then ea1 ,..., ean
are algebraically independent over Q
Claim f) is the Lindemann-Weierstraß Theorem, cf. e.g. [1, Theorem 1.4].
Real Kolmogorov Complexity
The similarities between the discrete theory of Turing computation and the real one of BSS machines (Section 1.1) have led Montan˜a and Pardo to introduce and study in [28] the following real counterpart to classical Kolmogorov complexity:
Definition 1.5 For a universal BSS machine U and for x  R∗ let KU(x)  N denote the minimum size(p), p  R∗, such that U(p), on empty input, outputs x and terminates.
Based on Item a) in Section 1.1, they conclude in [28, Theorem 2] that Fact 1.1a) carries over from the discrete to the real setting:
Observation 1.6 For another universal machine U', KU(x) differs from KU' (x)
only by an additive constant independent of x.
Moreover for the special case of the constant-free universal BSS machine U0 intro- duced in [6, Section 8], [28, Theorems 3 and 6] establish the real Kolmogorov complexity to be bounded from below, and up to an additive constant from above, by the transcendence degree:
Fact 1.7 There exists some c ∈ Z such that, for any x ∈ R∗, it holds
trdegQ(x) ≤ KU0 (x) ≤ trdegQ(x) + c .	(2)

As an application, [28, Corollary 4] presents an alternative proof to a known lower bound in the algebraic complexity theory of polynomials, thus exemplifying the real incompressibility method as a natural counterpart to Fact 1.1d). We will give another application in Observation 4.1.
A further consequence of Fact 1.7: Since a ‘random’ n-element real vector has transcendence degree equal to n, incompressible strings are prevalent—a counter- part to Fact 1.1b), however based on entirely different arguments; see also Corol- lary 2.6 below. Moreover, as opposed to the discrete case, one can explicitly write down such instances, compare [28, Theorem 8] and Example 2.7a) below.

Overview
We focus on a natural variant of the universal machine U0 which leads to particularly compact BSS programs: all discrete code information (i.e. anything except for the real constants) is encoded into the first real number. For this Go¨delization, we extend the results in [28] in five directions.
First, Fact 1.7 can be improved in that the constant c may be chosen as 1; and we show that this is generally best possible. Second, in Section 2.2, we consider the mathematical question in which cases the first inequality of Equation (2) is tight and in which cases the second one; the answer turns out to be related to deep issues in algebraic geometry. Then we investigate the computational properties of the real Kolmogorov complexity function K: The classical incomputability argument, being based on exhaustively searching for an incompressible string, does not carry over to this continuous setting. Our third contribution features as a partial analogue to Fact 1.1c), the BSS incomputability of K (Section 3). Fourth, we show that K can (as in the discrete case but again by different arguments) be approximated from above. And finally in Section 3.2, K is proven not BSS-complete.
Compact BSS Go¨delization
While Observation 1.6 asserts a certain invariance of the Kolmogorov complexity of all strings, a fixed x’s complexity on the other hand may change dramatically when proceeding from U to U': simply by constructing U' to give this particular x a special short code treated separately. Nevertheless, and as opposed to the classical case, we will now introduce a particular class of universal real machines U and show them to give rise to relatively ‘minimal’ KU:
Definition 2.1 Fix a finite choice z := (z1,..., zD) of reals and let Uz denote a universal BSS machine with constants z1,..., zD to simulate, upon input of ‘pro- gram’ ⟨M⟩z and of x ∈ R∗, M on x. (The empty program produces no output and terminates precisely on the empty input.) Here, ⟨M⟩z is defined as follows:
Consider a BSS-computable integer/real pairing function	,	: N	R	R
with computable inverse; for instance something like
(n, x) '→ sign(x) · 2n · (2[|x|♩ + 1) + (|x|− [|x|♩)  .

Encode some machine M, with constants c1,..., cJ , z1,..., zD and control δ accord- ing to Definition 1.2, as ⟨M⟩z := (⟨δ, c1⟩, c2,..., cJ ).
Finally abbreviate Kz := KUz and K0 := K().
Here we have exploited that the control of M contains no real constants by itself but just references to them: to cj by virtue of an index j  1,...,J ; or to zd provided by its ‘host’ machine Uz by virtue of an index d   1,..., D . That δ thus being a purely discrete object permits to combine it with one other real, thus saving 1 element in size.
Remark 2.2 More precisely, any finite information (like, e.g. the number J of real constants following or the length of the input x to simulate M on) can be incorpo- rated in this way without increasing the size of the encoding. This simplifies several putative pitfalls from classical Kolmogorov Complexity like [20, Example 2.1.4]
Kz(x, y) ≤ Kz(x)+ Kz(y)
and, for instance, lifts the need for a real counterpart to classical preﬁx complexity [20, Section 3].
Also note that a fully real/real pairing function cannot be BSS computable: For instance it follows from the invariance of domain principle in Algebraic Topology that a BSS computable function from R R to R cannot be injective. Alternatively, Observation 4.1 below shows that a BSS-computable function from R to R R cannot be surjective: with a simple proof based on real Kolmogorov Complexity Theory!
Real Kolmogorov Complexity and Transcendence Degree
Intuitively, the encoding introduced in Definition 2.1 is as ‘compact’ as possible. Indeed, we have the following
Observation 2.3 For any universal real machine U' with constants ⊆ {z1,..., zD}, it holds K(z1,...,zD ) ≤ KU' .
Proof. Since Uz already contains all real constants of U', U' z is purely discrete; now apply Remark 2.2.	 
Since we are aiming for bounds on BSS Kolmogorov Complexity that are as tight as possibly, it turns out beneficial to refine Definition 1.5 to distinguish between the following closely related quantities corresponding to enumerability, decidability, and semi-decidability:
Definition 2.4	a) For x¯ ∈ {0, 1}∗ let Ko (x¯) denote the minimum length(p¯),
p ∈ {0, 1}∗, such that U (p¯), on empty input, outputs x¯ and terminates.
Ks (x¯) and Kd (x¯) are defined similarly by the condition that U (p¯) semi-
U	U
/decides the single-word language {x}.
For x	R∗ let Ko (x) denote the minimum size(p), p	R∗, such that U(p), on empty input, outputs x and terminates.

Ks (x) and Kd (x) are defined similarly by the condition that U(p) semi-
U	U

/decides the single-word language {x¯}.
One usually focuses on Ko (and we on Ko). Indeed, Ko , Kd , and Ks

differ at

U	U	U
most by an additive constant independent of x¯: a machine M outputting x¯ can be turned (with a fixed increase in complexity) into one which, given y¯, simulates M and compares its output to the input in order to semi-/decide {x¯}; conversely, M semi-deciding {x¯} may be used by M' generating all binary strings y¯ to output the one that M terminates on. In the BSS realm, the inequality “Ks (x) ≤ Kd (x) ≤
Ko (x)+ O(1)” can be proven similarly; whereas “Ko (x) ≤ Ks (x)+ O(1)” requires
some more work, because one cannot generate all real strings. In fact, it is a consequence of Observation 1.6 and the following, already announced
Theorem 2.5 For every x ∈ R+ and z ∈ R∗ it holds
Ks (x)= Kd (x) = max{1, trdegQ(z)(x)}.
max{1, trdegQ(z)(x)}≤ Ko (x) ≤ trdegQ(z)(x)+ 1;
If Q(z, x) is purely transcendental over Q(z), then Ko (x)= trdegQ(z)(x).
The proof is omitted for reasons of conciseness.
Corollary 2.6 Incompressible strings exist; they are in fact prevalent.
Proof. For fixed z1,..., zD, x1,..., xn ∈ R, the set {x ∈ R : x algebraic over Q(z, x)} is countable; hence algebraically dependent n-tuples have dimension n − 1 and in particular form a null set. Therefore guessing x1,..., xn ∈ [0, 1] inductively inde- pendently uniformly at random yields, with certainty, trdegQ(z)(x)= n.	 
Example 2.7	a) Ko(e√2	√	√	√ ,e ,..., e ) = n, where pn ∈ N de-
notes the n-th prime number.
b) For t ∈ R, it holds Ko(t, √2) = 1 in case t is algebraic and Ko(t, √2)=2 if t is
0	0
transcendental.
Proof. Indeed √2, √3,..., √pn are square roots of distinct square-free numbers and therefore [32] linearly independent over Q; from which it follows by Fact 1.4f) that their exponentials are algebraically independent over Q. Now apply Theo- rem 2.5c).
The first part of Claim b) follows immediately from Theorem 2.5b); similarly
for the inequality “ 2” of the second part. The reverse inequality is a consequence of Proposition 2.8a) below since √2  ( ) for transcendental. Indeed the pre- sumption √2= p(t)/q(t) with polynomials p, q   Q[T ] would imply p2(t)= 2q2(t),
hence 2  2 2 vanishes identically: in contradiction to the (classical proof of the)
irrationality of √2.	 

Non-Purely Transcendental Extensions
Unless x is purely transcendental, Theorem 2.5b) leaves a gap of 1 between lower and upper bound. This turns out very difficult to close and leads to deep questions

in algebraic geometry:
Proposition 2.8	a) Let t ∈ R be transcendental over Q(z) and a /∈ Q(z, t) alge- braic over Q(z, t). Then Ko (t, a)=2 > 1 = trdegQ(z)(t, a).
b) To any s, t ∈ R algebraically independent over Q there exist x, y, a ∈ R such that s, t, a ∈ Q(x, y) and a /∈ Q(s, t).
In particular, it holds Ko(s, t, a) = 2 = trdegQ(s, t, a) although a is not alge-
braic over Q(s, t).
The latter shows that there is no “only if” in Theorem 2.5c).
Proof of Proposition 2.8
Suppose toward contradiction that some BSS machine M with one real con- stants z,x can output t, a. By induction on the number of steps performed by M, it is easy to see that any intermediate result and in particular its out- put constitutes a rational function of z, x, that is, belongs to Q(z, x). Since t Q(z, x) is transcendental over Q(z), so must be x itself. Lu¨roth’s Theorem asserts every subfield between Q(z) and its simple transcendental extension Q(z, x) to be simple again; cf. e.g. [13, Theorem 5.2.4]. However Q(z, t, a) by prerequisite is not simple over Q(z): a contradiction.
Lu¨roth’s Theorem has been extended by Castelnuovo to the case of tran- scendence degree 2—however over algebraically closed fields. It is now known to fail from transcendence degree 3 on, and also for 2 over an algebraically non- closed field. See for instance to [17, Remarks 6.6.2] for a historical account of these results.
In particular for the field Q, we refer to a classical counter-example [33] due to Beniamino Segre showing the Q-variety V defined by the cubic b3 + 3a3 + 5s3 + 7t3 on the Q-sphere  3 =  (a, b, s, t)  Q4 : a2 + b2 + s2 + t2 = q2 , q Q, to be unirational but not rational. In other words (cmp. Lemma 3.11a below): For arbitrary s, t transcendental over Q and sufficiently large q, a (thus real) solution a to q2  a2  s2  t2 = (3a3 + 5s3 + 7t3)2 is algebraic over (but not contained in) Q(s, t); whereas unirationality of V means that Q(s, t, a) be in turn contained in some purely transcendental extension Q(x, y). A BSS machine storing x, y can therefore output s, t, a as rational functions thereof, showing Ko(s, t, a) ≤ 2.

Incomputability
A folklore property of classical Kolmogorov Complexity is its incomputability: No Turing machine can evaluate the function 0, 1 ∗ x¯  K(x¯). This follows from a formal argument related to the Richard-Berry Paradox which involves a contradiction arising from searching for some x¯  0, 1 ∗ of minimum length n such that K(x¯) exceeds a given bound; cf. e.g. [29, Theorem 5.5].

Remark 3.1 Over the reals, as opposed to 0, 1 n, Rn is too ‘large’ to be searched. As a consequence, concerning the simulation of a nondeterministic BSS machine by deterministic one, based on Tarski’s Quantifier Elimination as in [5, Section 2.5.1] the existence of a successful real guess can be decided, but a witness can in general not be found. More precisely, a BSS machine with constants c1,..., cJ is limited to generate numbers in Q(c1,..., cJ ) (compare the proof of Proposition 2.8a) and thus cannot output, even with the help of oracle access to Ko, any real vector of Kolmogorov Complexity exceeding J in order to raise a contradiction to the presumed computability of Ko.
Similarly, the classical proof does not carry over to show the incomputability of the decision version Kd, either: Given x as input one can, relative to Kd, detect (and terminate, provided) that x has sufficiently high Kolmogorov Complexity; however this approach accepts a large, not a one-element real language.	 

Nevertheless we succeed in establishing
Theorem 3.2 For each z ∈ R∗, both Ko and Kd are BSS–incomputable, even when
z	z
restricted to R2.
The proof is based on Claim c) of the following

Lemma 3.3	a) The set T	R of transcendental reals (over Q) is not BSS semi- decidable.
T is not even semi-decidable relative to oracle Q.
For y, z	R∗, the real language Tz := x	R : x transcendental over Q(z)	is not BSS semi-decidable relative to oracle Q(y).
For z	R∗, the real language R Tz = x	R : x algebraic over Q(z) is BSS semi-decidable.

Claim a) is folklore. Its extension b) has been established as [25, Theorem 4] and generalizes straight-forwardly to yield Claim c). Here we implicitly refer to the concept of BSS oracle machines MO whose transition function δ may, in addition to Definition 1.2v), enter a query state corresponding to the question whether the contents of the dedicated query tape belongs to O  R∗, and proceed according to the (Boolean) answer.
Regarding Claim d) it suffices to enumerate all non-zero p  Q(z)[X] and test “p(x) = 0”.

Proof of Theorem 3.2 Concerning Kd, fix some s ∈ R transcendental over Q(z). Then, according to Theorem 2.5a), Kd(s, t) = 2 if t ∈ Tz,s, and Kd(s, t) = 1
otherwise; that is BSS-computability of Kd(s, ·) contradicts Lemma 3.3c).

z
Similarly, according to Example 2.7b), Ko (t,
√2)=2 if
t ∈ Tz
, and
Ko (t,
√2) =

1 otherwise.	 

Approximability
Although the function x¯	K(x¯) is not Turing-computable, it can be approximated [20, Theorem 2.3.3]: from above, in the point-wise limit without error bounds.
Fact 3.4 The set {(x¯, k): K(x¯) ≤ k}⊆ {0, 1}∗ × N is semi-decidable.
In particular K becomes computable given oracle access to the Halting problem H.
Fact 3.5 (Shoenfield’s Limit Lemma) A function f :⊆ {0, 1}∗ → N is com- putable relative to H iff f (x¯) = limm→∞ g(x¯, m) for some ordinarily computable g : dom(f ) × N → N.
See for instance [34, §III.3.3]. . .
Remark 3.6 Concerning a real counterpart of Fact 3.5, only the domain but not the range extends from discrete to R:
A function f : R∗ → N is BSS computable relative to the real Halting Problem
H =  ⟨M⟩ : M terminates on input ()}
iff f (x)= limm→∞ g(x, m) for some BSS computable g : dom(f ) × N → N.
The function exp : R e x '→ ex ∈ R is the point-wise limit of BSS-computable
g(x, m) := Σm	xn/n! ∈ R; exp is, however, not BSS-computable relative to
any oracle O ⊆ R∗.
Computing real limits is the distinct feature of so-called Analytic Machines [11].
Proof.
a1) Since g(x, ) has discrete range, the sequence g(x, m) must eventually sta- bilize to its limit f (x). Now the real UTM and SMN theorems make it easy to construct from x ∈ R∗ and M ∈ N a BSS machine M which terminates iff

g(x, m)
m≥M
is not constant. Repeatedly querying H thus allows to determine

limm→∞ g(x, m)= f (x).
a2) Let f be computable relative to H by BSS oracle machine MH. Given x dom(f ), MH thus makes a finite number (say N ) of steps and oracle queries; let u1,..., uN	H denote those answered positively and v1,..., vN	H those answered negatively. Now define g(x, m) as the output of the following compu- tation: Simulate M for at most m steps and, for each oracle query “w		H?”, perform the first m steps of a semi-decision procedure: if it succeeds, answer positively, otherwise negatively.
Now although the latter answer may in general be wrong, the finitely many queries u1,..., uN  H admit a common M beyond which all are reported correctly; and so are the negative ones vj H anyway. Hence for m M, N , g(x, m)= f (x).
The proof of Proposition 2.8a) has already exploited that all intermediate re- sults (and in particular the output y), computed by a BSS machine with con- stants c upon input x, belong to Q(c, x) and in particular satisfy trdegQ(y) ≤

trdegQ(c, x) ≤ size(c) + trdegQ(c)(x) according to Fact 1.4d); whereas, for (xn) := ( 2,  3,  5,  7,  11,.. .) denoting the sequence of square roots of prime integers, the corresponding values yn := exp(xn) have according to Fact 1.4f) transcendence degree unbounded compared to trdeg(xn)= 0.

We now establish a real version of Fact 3.4.
Proposition 3.7 Fix z ∈ R∗.
The real Kolmogorov set Sd := {(x, k) : Kd (x) ≤ k} ⊆ R∗ × N is BSS semi-
z	z
decidable.
Kd : R∗ → N is BSS-computable relative to H.
By virtue of Remark 3.6a), Claim b) follows from a); which in turn is based on Lemma 3.3d) in combination with Part b) of the following
Lemma 3.8	a) Let U denote a vector space and V = lspan(y1,..., yn) ⊆ U the subspace spanned by y1,..., yn ∈ U. Then
dim(V ) = n	max k	1	i  < . . . < i	n :
∀j ∈ {1,..., n}\ {i1,..., ik} : yj ∈ lspan(yi1 ,..., yik )}
b) Let F = E(y1,..., yn) denote a ﬁnitely generated ﬁeld extension. Then
trdeg (F ) = n	max k	1	i  < . . . < i	n :
∀j ∈ {1,..., n}\ {i1,..., ik} : yj algebraic over E(yi1 ,..., yik )}
Part a) is of course the rank-nullity theorem from highschool linear algebra and mentioned only in order to point out the similarity to b).
Proof. Any yj algebraic over E(yi1 ,..., yik ) cannot be part of a transcendence ba- sis; hence trdegE(F ) ≤ n— k. Conversely, choosing (yi1 ,..., yik ) as a transcendence basis yields trdegE(F ) ≥ n — k according to Fact 1.4.	 

(Lack of) Completeness
Classically, undecidable problems are ‘usually’ also Turing-complete in the sense of admitting a (Turing-) reduction to the discrete Halting problem H. This holds in particular for the Kolmogorov Complexity function; cf. e.g. [20, Exercise 2.7.7]. Over the reals on the other hand, Q has been identified in [25] as a decision problem BSS undecidable but not complete. Similarly, BSS incomputability of Kd according to Theorem 3.2 turns out to not extend to BSS completeness:
Theorem 3.9 Fix z ∈ R∗.
Let
Iz :=  x ∈ R∗ : x algebraically independent over Q(z)} .
Then Sd is decidable relative to Iz and vice versa.

Let C	[0, 1] denote Cantor’s Excluded Middle Third, that is the set of all
x = Σn∞=1 tn3−n with tn ∈ {0, 2}. Then C’s complement is BSS semi-decidable
but C itself is not semi-decidable even relative to Iz.
H is not decidable relative to Sd or to Kd .
z	z
The proof is omitted but based on the following
Lemma 3.10 Fix w ∈ R∗.
To x ∈ C and ϵ > 0, there exists y ∈ Tw \ C with |x — y|≤ ϵ.
The set C ∩ Tw is uncountable and perfect (i.e. to ϵ > 0 and x ∈ C ∩ Tw there exists y ∈ C ∩ Tw with 0 < |x — y|≤ ϵ).
Proof. Notice that R \ Tw is only countable.
Let x = Σn∞=1 tn3−n with tn ∈ {0, 2} and ϵ = 3−N . The open interval Ix,N :=
ΣN−1 tn3−n + 3−N · ( 1 , 2 ) is disjoint from C and uncountable; hence so is
Ix,N \ (R \ Tw). From the latter, choose any y: done.
Since C is uncountable, so must be C	(R  T ).
Let x = Σn∞=1 sn3−n with sn ∈ {0, 2} and ϵ = 3−N . Already knowing that
C∩Tw is infinite, we conclude that there exists some y' = Σn∞=1 tn3−n ∈ C∩Tw

distinct from x with tn ∈ {0, 2}. Now let y := ΣN
sn3−n +Σn∞=N +1
tn−N 3−n:

It satisfies x  y  ϵ, belongs to C (having ternary expansion consisting only of 0s and 2s) and to Tw (since it differs from y  Tw by a rational scaling and rational offset).

Lemma 3.11 Let E ⊆ F denote inﬁnite ﬁelds.
Fix	transcendental over  and	[ ]. Then the vector of ‘numbers’ p1(x),..., pn(x) ∈ E(x)n is algebraically independent over E iff the vector of ‘functions’ (p1,..., pn) ∈ E(X)n is.
Fix X, Y ⊆ F, X algebraically independent over E. Then X ∪Y is algebraically in-/dependent over E iff Y is algebraically in-/dependent over E(X ).
Let p  E[X1,..., Xn, Y1,..., Ym] and x1,..., xn  F be algebraically in- dependent over E. Then p is irreducible (in E[X1,..., Xn, Y1,..., Ym]) iff p(x1,..., xn, ··· ) is irreducible in E(x1,..., xn)[Y1,..., Ym].
Let p	E[X1,..., Xn, Y1,..., Ym, Z] be irreducible and x1,..., xn, y1,..., ym
F algebraically independent over E but y1,..., ym,z F algebraically depen- dent over E and p(x1,..., xn, y1,..., ym, z)= 0. Then p does not ‘depend’ on X1,..., Xn, i.e. belongs to E[Y1,..., Ym, Z].
Proof.
If (	) are algebraically dependent, say (	) = 0 for 0 =
E[X1,..., Xn], then a fortiori q p1(x),..., pn(x) = 0.
Conversely let q p1(x),..., pn(x) = 0 for some non-zero q ∈ E[X1,..., Xn].

Then q(p1,..., pn)	E[X] vanishes on x. Since x is by hypothesis transcen- dental over E, this implies q(p1,..., pn)= 0.
Let Y be algebraically dependent over E(X ), 0 = p(y1,..., ym) for 0 /= p ∈
E(X )[Y1,..., Ym] where

n ∈ N,	p = Σ q¯ı(x1,..., xn) · Y ¯ı,	x ,...,x 

∈ X,

r¯ı(x1,..., xn)	1	n
and	q¯ı, r¯ı ∈ E[X1,..., Xn], r¯ı(x1,..., xn) /=0 .
Proceed to p˜ :=  rj¯· Σ	· Y : This polynomial in E[X1,..., Xn, Y1,..., Ym]
is non-zero (e.g. on x1,..., xn) and vanishes on x1,..., xn, y1,..., ym	.
Conversely let	be algebraically dependent over E.  Then it holds
p(x1,..., xn, y1,..., ym) = 0 for some n, m	N, x1,..., xn	X, y1,..., ym
Y , and non-zero p	E[X1,..., Xn, Y1,..., Ym]. A fortiori, q := p(x1,..., xn,	)
E(X)[Y1,..., Ym] satisfies q(y1,..., ym) = 0.	To conclude algebraic in- dependence of y1,..., ym over E(X), it remains to show q = 0. 0 = p E[X1,..., Xn, Y1,..., Ym] implies that there exist z1,..., zm	E such that 0 = p(X1,..., Xn, z1,..., zm)= r(X1,..., Xn)	E[X1,..., Xn]. Then q(z1,..., zm)
= r(x1,..., xn) = 0 holds because x1,..., xn	are algebraically independent by hypothesis.
Take some hypothetical non-trivial factorization p = q1 q2 in E[X1,..., Xn, Y1,..., Ym]. A fortiori, p(x, Y )= q1(x, Y ) q2(x, Y ) constitutes a factorization in E(x)[Y ]; a non-trivial one: because if for instance q1(x, Y ) were the constant polynomial, say q1(x, Y )= c  E, then q1(X, y)  c = 0 for some y1,..., ym
E (since q1 is by presumption a non-trivial factor of p) constitutes a non-zero polynomial in E[X] vanishing on x1,..., xn: contradicting that the latter are algebraically independent over E.
Conversely suppose p(x, Y ) = q1(x, Y ) q2(x, Y ) in E(x)[Y ] and consider the polynomial r := p  q1 q2  E[X, Y ]. Although vanishing on (x, Y ), it cannot be identically zero because that would mean a non-trivial factorization of irreducible p. On the other hand r(X, y1,..., ym) = 0 for some y1,..., ym
E would constitute a non-zero polynomial in E[X] vanishing on x1,..., xn: contradicting that the latter are algebraically independent over E.
Since (x, y) are algebraically independent over E, p(x, y, Z) is irreducible in E(x, y)[Z] by c). Since (y, z) are algebraically dependent over E, q(y, z)=0 for some non-zero q  E[Y , Z]; w.l.o.g., q is irreducible: and so is q(y, Z) in E(x, y)[Z], again by c). Each p(x, y, Z) and q(y, Z) vanishes on z, hence they share a common factor r  E(x, y)[Z]; but both being irreducible requires that they all coincide.
 
Proposition 3.12 For any ﬁxed z ∈ R∗, T is BSS decidable relative to Iz; which is in turn decidable relative to I := I(). In formula: T	Iz	I.
Proof. Suppose we are given oracle access to I. Since z is fixed, a BSS machine

may store as constants a transcendence basis y for Q(z) over Q. Given x  R∗, it can then decide membership to Iz by querying “(y, x)  I?”: Since y is algebraically independent over Q by construction, (y, x) is iff x is over Q(y) (Lemma 3.11b) or, equivalently, over Q(z).
Conversely given x, query membership to Iz T and accept if the answer is positive. Otherwise (y, x) is algebraically dependent over Q, hence there exists for some non-zero polynomial p  Z[Y ,X] irreducible over Q[Y ,X] and vanishing on (y, x). Moreover such p can be sought for (and hence found): By the Gauß Lemma [19, Theorem IV. 2.3], p  Z[Y ,X] is irreducible over Q[Y ,X] iff it is irreducible over Z[Y ,X]; and the latter property is decidable by testing the finitely many candidate divisors q Z[Y ,X] of degi(q) degi(p) whose coefficients qi Z divide pi for all i. Now once such p = p(Y ,X) is found, check whether it actually ‘depends’ on (i.e. has in dense representation a nonzero coefficient to) some Yi: According to Lemma 3.11d), this is the case iff x is transcendental over Q. 
Real Incompressibility Method
Discrete Kolmogorov Complexity Theory is a useful tool for establishing (lower and average) bounds on running times of specific algorithms as well as generally on the complexity of certain problems [20, Section 6]. The same can be said about its BSS counterpart [28, Corollary 4]. For instance we conclude from Example 2.7a) an entirely new proof of the following
Observation 4.1 There exists no BSS-computable surjective (and in particular no fully real pairing) function f : R → R × R.
Proof. Suppose that f is computable by machine M with constants c1,..., cJ . Iteration yields a surjection f (n) : R  Rn for any fixed n, computable again by a machine with constants c1,..., cJ . Take n N and z Rn of Kolmogorov Complexity much larger than J according to Example 2.7a). By surjectivity, there exists ζ ∈ R with f (n)(ζ)= z. Thus, z can be output by storing the single constant ζ and invoking the machine evaluating f (n): contradicting K(ζ) ≈ J  K(z). 
Miscellaneous
This section handles off few further, related topics from classical computability theory [29, Section 5.6] (see also [30]) in the context of real number computation:

Rado´’s Busy Beaver function, Quines, and
Theorems.
Kleene’s Recursion and Fixed Point

Busy Beaver
Classically, the busy beaver function Σ(n) amounts to the length of a longest string
x¯	0, 1 ∗ output by a terminating, input-free Turing machine M of length( M )
n. It is well-known, as is the Kolmogorov complexity function, incomputable, ap- proximable, and equivalent to the Halting problem.

Now every Turing machine M can be simulated by a BSS machine M of size(⟨M⟩)= 1 independent of length(⟨M⟩); hence it does not make sense to ask the following
Question 5.1 (unreasonable) What is the maximum size of a string x ∈ R∗
output by a terminating, input-free BSS machine M of size(⟨M⟩) ≤ n ?
The answer is, of course: infinite.
In view of Theorem 2.5, one might be tempted to instead consider
Question 5.2 What is the maximum transcendence degree of a string x ∈ R∗ out- put by a terminating, input-free BSS machine M of size(⟨M⟩) ≤ n ?
However, again, this question is easy to answer (namely “n”) and to compute.
Quines, Fixed-point and Recursion Theorems
A quine is a program p which (upon empty input) outputs itself (e.g. its own source code) and terminates. More generally, one may demand that p performs some prescribed computable operation on its input x and on its own encoding which, however, is not passed as input. Solutions to both problems are well-known to exist in the discrete realm and amount to Kleene’s first and second Recursion Theorem, respectively. Closely related is his Fixed Point Theorem, asserting that every recursive total function on Go¨del indices has a (semantic) fixed point.
All of them immediately carry over to the real setting: Since a BSS machine M accesses its constants by reference, it suffices to consider only M’s finite control δ — to which the discrete theorems apply. Alternatively, their classical proofs based on SMN and UTM properties translate literally to the real setting (recall Section 1.1a).
Observation 5.3 Fix a universal BSS machine U.
To any BSS machine M (with constants c1,..., cJ ), there exists another one M'
(again with constants c1,..., cJ ) such that M' on x behaves like M on (⟨M⟩, x).
To every total BSS-computable function f : R∗  R∗, there exists some x  R∗
such that
∀y ∈ R∗ :	U x, y  = U f (x), y .	(3)
Moreover, if f is realized by M, the mapping ⟨M⟩→ x is BSS-computable.
The equality in (3) is meant in the extended sense that either side is undefined iff the other is.
Conclusion
The present work has extended the work [28] and its real variant of Kolmogorov com- plexity theory. Some important properties have turned out to carry over, however with considerably different proofs. Specifically, ‘most’ real vectors have complexity equal to their length; and the complexity of a given string can be computationally approximated from above but not determined exactly. However opposed to the classical discrete case, real Kolmogorov Complexity is not reducible from the real Halting problem H.

We close with some open
Question 6.1	a) Does Proposition 3.7 extend to Ko ?
Does Theorem 3.9 extend to So := {(x, k): Ko (x) ≤ k}⊆ R∗ × N ?
Theorem 3.2 is only concerned with BSS G¨odelizations induced by machines of the form Uz. Does it extend to all universal machines U?
How about the complex case, i.e. w.r.t. BSS-machines over C permitted tests only for equality?
Acknowledgement
The first author is grateful to his colleagues Dennis Amelunxen, Peter Scheiblech- ner, and Thorsten Wedhorn for discussions about algebraic varieties and the rationality questions arisen in Section 2.2. Moreover, Peter Scheiblechner has been a great help in finding a proof for Lemma 3.11c). Finally we owe to Klaus

Meer
for pointing us to the seminal work of
Montan˜a and Pardo who first

introduced real Kolmogorov Complexity.

References
A. Baker: “Transcendental Number Theory ”, Cambridge University Press (1975).
P. Bu¨rgisser, M. Clausen, M.A. Shokrollahi: “Algebraic Complexity Theory”, Springer (1997).
L. Blum, F. Cucker, M. Shub, S. Smale: “Complexity and Real Computation ”, Springer (1998).
de Berg, M., M. van Kreveld, M. Overmars, O. Schwarzkopf: “Computational Geometry”, Springer (1997).
S. Basu, R. Pollack, M.-F. Roy: “Algorithms in Real Algebraic Geometry”, Springer (2003).
L. Blum, M. Shub, S. Smale: “On a Theory of Computation and Complexity over the Real Numbers:
-Completeness, Recursive Functions, and Universal Machines”, pp.1–46 in Bulletin of the American Mathematical Society (AMS Bulletin) vol.21 (1989).
P. Bu¨rgisser, F. Cucker: “Counting Complexity Classes for Numeric Computations II: Algebraic and Semialgebraic Sets”, pp.147–191 in Journal of Complexity vol.22 (2006).
P. Bu¨rgisser: “Complexity and Reduction in Algebraic Complexity Theory”, vol.7 in Algorithms and Computation in Mathematics, Springer (2000).
P. Bu¨rgisser: “Cook’s versus Valiant’s Hypothesis”, pp.71–88 in Theoretical Computer Science vol.235 (2000).
P. Bu¨rgisser: “On Defining Integers in the Counting Hierarchy and Proving Arithmetic Circuit Lower Bounds”, pp.133–144 in Proc. 24th Annual Symposium on Theoretical Aspects of Computer Science (STACS 2007), Springer LNCS vol.4393.
T. Chadzelek, G. Hotz: “Analytic Machines”, pp.151–165 in Theoretical Computer Science vol.219, Elsevier (1999).
F. Cucker, M. Karpinski, P. Koiran, T. Lickteig, W. Werther: “On Real Turing Machines that Toss Coins”, pp.335–342 in Proc. 27th ACM Symposium on Theory of Computing (STOC 1995).
P.M. Cohn: “Algebra” 2nd Edition vol.3 (1991).
F. Cucker: “The arithmetical hierarchy over the reals”, pp.375–395 in Journal of Logic and Computation
vol.2:3 (1992).

F. Cucker, P. Koiran: “Computing over the Real with Addition and Order: Higher Complexity Classes”, pp.358–376 in Journal of Complexity vol.11 (1995).
H. Fournier, P. Koiran: “Lower Bounds are not Easier over the Reals: Inside PH”, pp.832–843 in Proc. 27th International Colloquium on Automata, Languages and Programming (ICALP 2000), Springer LNCS vol.1853.
P. Gille, T. Szamuely: “Central Simple Algebras and Galois Cohomology”, Cambridge (2006).
P. Koiran, S. Perifel: “VPSPACE and a Transfer Theorem over the Reals”, pp.417–428 in Proc. 24th Annual Symposium on Theoretical Aspects of Computer Science (STACS 2007), Springer LNCS vol.4393.
S. Lang: “Algebra”, 3rd Edition Addison-Wesley (1993).
M. Li, P. Vit´anyi: “An Introduction to Kolmogorov Complexity and Its Applications” (2nd Edition) Springer (1997).
Y. Matiyasevich: “Enumerable sets are Diophantine”, pp.354-358 Soviet Mathematics. Doklady vol.11:2 (1970).
K. Meer: “Counting Problems over the Reals”, pp.41–58 in Theoretical Computer Science vol.242 (2000).
K. Meer: “Transparent Long Proofs: A first PCP Theorem for NPR”, pp.231–255 in Foundations of Computational Mathematics vol.5:3 (2005).
K. Meer, C. Michaux: “A Survey on Real Structural Complexity Theory”, pp.113–148 in Bull. Belg. Math. Soc. vol.4 (1997).
K. Meer, M. Ziegler: “An Explicit Solution to Post’s Problem over the Reals”, pp.467–478 in Proc. 15th International Symposium on Fundamental so Computation Theory (FCT 2005), Springer LNCS vol.3623.
C. Michaux: “Machines sur les r´eels et probl`emes –complets”, S´eminaire de Structures Alg´ebriques Ordonn´ees, Pr´epublications de l’equipe de logique math´ematique de Paris 7 (1990).
C. Michaux, C. Troestler: “Isomorphism theorem for BSS recursively enumerable sets over real closed fields”, pp.253–273 in Theoretical Computer Science vol.231 (2000).
J.L. Montan˜a, L.M. Pardo: “On Kolmogorov complexity in the real Turing machine setting”, pp.81–86 in Information Processing Letters vol.67 (1998).
B.M. Moret: “The Theory of Computation ”, Addison Wesley (1998).
L.S. Moss: “Recursion Theorems and Self-Replication via Text Register Machine Programs”, pp.171– 182 in Bulletin of the EATCS no.89 (2006).
F.P. Preparata, M.I. Shamos: “Computational Geometry ”, Springer (1985).
J. Rickard: “Re: The degree of this field”, Internet Usenet (2000);
http://www.math.niu.edu/~rusin/known_math/00_incoming/sqrt_q
B. Segre: “Sull’esistenza, sia nel campo razionale che nel campo reale, di involuzioni piane non birazionali”, pp.94–97 in Rendiconti dell’Accademia Nazionale dei Lincei (Classe di Scienze fisiche, matematiche e naturali) serie VIII, vol.X, fasc. 2 (1951).
R.I. Soare: “Recursively Enumerable Sets and Degrees”, Springer (1987).
J.V. Tucker, J.I. Zucker: “Computable functions and semicomputable sets on many sorted algebras”, pp317–523 in (S. Abramskz, D. Gabbay, T. Maibaum Eds.) Handbook of Logic for Computer Science vol.V (Logic and Algebraic Methods), Oxford University Press (2000).
