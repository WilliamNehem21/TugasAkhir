

Electronic Notes in Theoretical Computer Science 229 (2009) 41–58
www.elsevier.com/locate/entcs
Model Checking Biological Oscillators
Ezio Bartocci,1 Flavio Corradini,2 Emanuela Merelli,3 Luca Tesei4
Dipartimento di Matematica e Informatica University of Camerino
Via Madonna delle Carceri, 9, Camerino (MC), 62032, Italy

Abstract
We define a subclass of timed automata, called oscillator timed automata, suitable to model biological oscillators. The semantics of their interactions, parametric w.r.t. a model of synchronization, is introduced. We apply it to the Kuramoto model. Then, we introduce a logic, Kuramoto Synchronization Logic (KSL), and a model checking algorithm in order to verify collective synchronization properties of a population of coupled oscillators.
Keywords: Spontaneous synchronization, Kuramoto model, oscillator timed automata, KSL, model checking


Introduction
Synchronization phenomena in large populations of interacting components are widely represented in nature and intensively studied as physical, biological, chem- ical, and social systems. In Biology, examples include networks of pacemaker cells in heart [15], nervous system [8], group of synchronously flashing fireflies [6], just to mention some of those analyzed by Strogatz in his exciting book [16]. Understand- ing a synchronized collective behavior is essential in Systems Biology especially for developing methods to control the dynamics of systems with desired properties [10]. The distributed synchronization of biological systems is commonly modeled us- ing the theory of coupled oscillators proposed by several authors Art Winfree [18], Charles S. Peskin [15] and Yoshiki Kuramoto [11]. In this theory, each member of the population is modeled as a phase oscillator running independently at its own

1 Email: ezio.bartocci@unicam.it
2 Email: flavio.corradini@unicam.it
3 Email: emanuela.merelli@unicam.it
4 Email: luca.tesei@unicam.it

1571-0661/© 2009 Elsevier B.V. Open access under CC BY-NC-ND license.
doi:10.1016/j.entcs.2009.02.004

frequency. The synchronization could be achieved coupling each oscillator to all the others and making them to interact with a certain strength. Whereas, the con- trol is achieved either by introducing artificial oscillators or a new impulse, or by changing the parameters of individual oscillators. This approach gives rise to an artificial control strategy as it has been proposed by Wang in his recent work [17]. In the case of fireflies, an oscillator represents the internal clock dictating when to flash. Upon reception of a pulse from other oscillators, the clock is regulated. Over time, the synchronized behavior emerges, i.e. pulses of different oscillators are transmitted simultaneously, and then all fireflies simultaneously flash. The most successful attempt to model distributed synchronization has been proposed by Yoshiki Kuramoto. The Kuramoto’s model, based on Winfree’s ideas that mu- tual synchronization is a cooperative phenomenon, a temporal analogue of phase transition encountered in statistical physics, is beautiful and analytically tractable model. A wide description of the Kuramoto model can be found in [1].
In this paper, we define a subclass of timed automata, called oscillator timed au- tomata, suitable to model oscillators. Then, we introduce an interaction semantics which is parametric w.r.t. a model of synchronization. Subsequently, we instantiate it to the Kuramoto model. The main advantage of our approach is that although the timed automata show different behaviors, w.r.t. their original ones, when inter- acting, we do not need to change their structure. This is obtained by using a global time measure, which is the one of the observer, and several internal relative time measures, one for each oscillator, which are then re-scaled to the global time.
We also provide a Kuromoto Synchronization Logic (KSL) in order to specify properties on synchronization, during a simulation, of Kuramoto based oscillators. Moreover, we propose a model checking algorithm for the logic. We test it by verifying some properties with a prototype simulator and model checker that we have implemented.
The paper proceeds as follows: Section 2 introduces related works and the Ku- ramoto model. Section 3 recalls timed automata, defines oscillator timed automata, and specifies the interaction semantics. Section 4 introduces the Kuramoto Syn- chronization Logic (KSL) and its model checking algorithm. Section 5 shows an example of analysis and Section 6 concludes outlining some directions for future work.

Background
Related work
During these last decades, several mathematical models have been proposed to study the spontaneous synchronization phenomena in a population of biological coupled oscillators [16]. These models have been inspired by real biological systems, ranging from the mutual synchronization of cardiac and circadian pacemaker cells to the rhythmically flashing of fireflies and wave propagation in heart, brain, intestine and nervous system. In these systems, mutual synchronization could be performed both through episodic impulses and through smooth interactions.

The first case, in which a population of the so called pulse-coupled oscillators communicate by sudden pulse-like interactions - i.e. a neuron that fires - was first studied by Peskin [15], who proposed a model of the mutual synchronization of sinotrial node pacemaker cells. He worked with identical oscillators and he con- jectured that for any arbitrary conditions, they would all end up firing in unison. He proved this property for N = 2 oscillators and later Mirollo and Strogatz [14] demonstrated that the conjecture holds for all N . Peskin also conjectured that syn- chronization would occur even if the oscillators were not quite identical, but that problem remains still open.
For the second case, in which the interactions between oscillators are smooth, a first approach was proposed by Winfree [18] that introduced a model of nearly identical, weakly coupled limit-cycle oscillators. Using numerical simulation, he discovered that for these starting conditions, the system behaves incoherently, with each oscillator running at its natural frequency. He also found that, as the coupling is increased, the unsynchronized incoherence continues until a certain threshold, when a group of oscillators jump suddenly into synchrony.
Starting from Winfree’s results and assumptions, Kuramoto began working with collective synchronization phenomena and he proposed a refined model [11,12] pro- viding some analytical tools in order to render the problem more tractable and the synchronization measurable.

Kuramoto model
The Kuramoto model of synchronization [13] describes the dynamics of a set of N
interacting phase oscillators θi with natural frequencies ωi and initial phases θ0.
The standalone evolution of the i-th oscillator is described by θi(t) = ωit + θ0. Intuitively each oscillator i can be visualized as a point moving on a circle of radius 1 with angular speed ωi starting at angle θ0.
When the oscillators interact they tend to adapt themselves, by accelerating or decelerating, with respect to the phases and the frequencies of the others. This can be viewed as a process of collective synchronization which ends, under certain conditions, in a total synchronous behavior. In the metaphor of the points moving on the circle, when the system becomes synchronized the points move around in sync, meaning that the phase differences remain constant. If the oscillators have identical natural frequencies, they are also null.
By Kuramoto, the evolution of the interacting i-th oscillator is given by the following equation:


θ˙ = ω + K Σ sin(θ

— θ ), i = 1, ··· ,N	(1)

i	i	N
j	i
j=1

where K is the coupling strength depending on the type of interaction. A primary basic condition to the possibility of synchronization is that the natural frequencies of the N oscillators are equal or chosen from a lorentzian probability density given

by:

g(ω) = 

γ
π[γ2 + (ω − ω0)2]

where γ is the width and ω0 is the median.
In his analysis [13], Kuramoto provided a measure of synchronization by defining the complex order parameters r and ψ as:


reiψ =  1
N
Σ eiθj	(2)
j=1

where r is the magnitude of the centroid of the points and ψ indicates the average phase. The radius r represents the phase-coherence of the population of the oscil- lators and it is a convenient measure of the extent of synchronization in the limit N → ∞ and t → ∞. If all oscillators are in sync, r = 1 when all the ωi’s are the same while r ≈ 1 when the natural frequencies are not identical. On the other hand, when all oscillators are completely out of phase with respect to each other the value of r remains close to 0 most of the time.
In particular Kuramoto found that:


r = ⎪⎨ √1


(Kc/K)


K ≥ Kc


where Kc = 2γ. This means that the oscillators remain completely desynchronized until the coupling strength K exceeds a critical value Kc. After that, the population splits into a partially synchronized state consisting of two groups of oscillators: a synchronized group that contributes to the order parameter r, and a desynchronized group whose natural frequencies lie in the tails of the distribution g(ω) and are too extreme to be entrained. With further increases in K, more and more oscillators are recruited into the synchronized group, and r grows accordingly.
Usually, to approximate Equation (1) a suitable discretization is made by fixing a small time interval dt to perform a numerical simulation. See Section 4 for a discussion on the numerical methods used in our approach.
Automata model
In this section we show how oscillators can be modeled by timed automata and how their interaction semantics can be defined, basing on a synchronization model, without changing the structure of the standalone automata.
Timed automata
Timed Automata [2] are an established formalism for modeling and verifying real- time systems. They allow strict quantitative real-time constraints to be expressed. This characteristic will be used to model oscillators.

In this section we introduce the basic machinery on timed automata that we need for our purposes. The idea of clock variables is central in the framework of timed automata. A clock is a variable that takes values from the set R≥0. The clocks measure time as it elapses. All the clocks of a given system advance at the same rate: when increasing, they can be viewed as functions on time whose derivative is equal to 1. Clock variables are ranged over by x, y, z, . . . and we use X, X',... to denote sets of clocks. A clock valuation over X is a function assigning a positive natural number to every clock. The set of valuations of X , denoted by VX , is the
set of total functions from X to R≥0. Clock valuations are ranged over by ν, ν',.. .. Given ν ∈ VX and δ ∈ R>0, we use ν + δ to denote the valuation that maps each clock x ∈X into ν(x)+ δ.
Clock variables can be reset during the evolution of the system when certain actions are performed or certain events occur. The reset consists in instantaneously set the value of a clock to 0. Immediately after this operation the clock restarts to measure time at the same rate as the others. The reset is useful to measure the time elapsed since the action/event that reset the clock occurred. Given a set X of clocks, a reset γ is a subset of X . The set of all resets of clocks in X is denoted by ΓX and reset sets are ranged over by γ, γ',... Given a valuation ν ∈ VX and a reset γ, we let ν\γ be the valuation that assign the value 0 to every clock in γ and assign ν(x) to every clock x ∈X − γ.
The timed behavior of the system is expressed using constraints associated to the edges of the automaton. Such constraints depend on the actual values of the clock variables of the system. Given a set X of clocks, the set ΨX of clock constraints over
X are defined by the following grammar: ψ ::= true | false | x #c | x−y # c | ψ∧ψ
where x, y ∈ X , c ∈ N, and # ∈ {<, >, ≤, ≥, =}. A satisfaction relation |= is defined such that ν |= ψ if the values of the clocks in ν satisfy the constraint ψ in the natural interpretation.
Definition 3.1 A Timed Automaton T is a tuple (Q, Σ, E, q0, X, Inv ), where: Q is a finite set of locations, Σ is a finite alphabet of symbols, E is a finite set of edges, q0 is the initial state, X is a finite set of clocks, and Inv is a function assigning to every q ∈ Q an invariant, i.e. a clock constraint ψ such that for each clock valuation ν ∈ VX and for each δ ∈ R>0, ν + δ |= ψ ⇒ ν |= ψ. Constraints having
this property are called past-closed.
Each edge e ∈E is a tuple in Q × ΨX × ΓX × Σ × Q. If e = (q, ψ, γ, a, q') is an edge, q is the source, q' is the target, ψ is the constraint, a is the label, and γ is the reset.

We use timed automata with invariants on the states, usually called timed safety automata [9], that are the most common in the modeling and verification tools. They incorporate a strong notion of fairness, due to the invariants, which will be useful for the definition of oscillator timed automata in Section 3.2 and of the interaction semantics in Section 3.3.
Figure 1(a) shows a sample timed automaton with three states 0, 1, 2. The set of clocks is {x}, the alphabet is {a, b}, 0 is the initial state, and the invariant of state





>=1
y=5 c
{y}





(a)
(b)


Fig. 1. Two oscillator timed automata
0 is x < 4. There is an edge from state 0 to state 1 with clock constraint x < 4, label a and reset set {x}.
The semantics of a timed automaton T = (Q, Σ, E, q0, X, Inv ), is a labeled tran- sition system S(T ) whose states - ranged over by s, s',... - are pairs (q, ν), where q ∈ Q is a location of T , and ν ∈ VX is a clock valuation. The transition relation is defined by the following rules:


δ ∈ R>0	ν + δ |= Inv (q)
T1
(q, ν) −δ→(q, ν + δ)
(q, ψ, γ, a, q') ∈ E,ν |= ψ
T2
(q, ν) −a→(q', ν\γ)


Rule T1 let δ time units to elapse, provided that the invariant of the current location will be satisfied at the reached state. We call the transitions performed using this rule δ-transitions. Rule T2 describe a transition, labelled by a, of the automaton which is possible only if the current clock evaluation ν satisfies the clock constraint of the edge. The effect of the transition is to go in the targe location q' where the clocks in the reset set γ have been assigned to 0. We call the transitions performed using this rule a-transitions.
The initial state of S(T ) is (q0, ν0) where ν0 is the clock valuation assigning 0 to all clocks.
A prefix of a possible behavior of the automaton in Figure 1(a) is rex = (0, [x =

0]) −3→.4 (0, [x = 3.4]) −a→(1, [x = 0]) −1→.2 (1, [x = 1.2]) −→b
(2, [x = 1.2]) ... 

Let T = (Q, Σ, E, q0, X, Inv ) be a timed automaton and let r =
l
s0 −→ s
l
1 −→··· 

be an inﬁnite derivation of S(T ) where s0 = (q0, ν0) is an initial state.
- The time sequence t0 t1 t2 ··· of the times elapsed from state s0 to every state
si = (qi, νi) in r is defined as follows:
t−1 = 0 
⎧
ti+1 = ti + ⎨
⎪⎩ li otherwise

The label sequence of r is the sequence of the transitions occurred during r, in- cluding the elapsed times, from the initial state: (l0, t0)(l1, t0) ··· 
The action sequence of r is the projection of the label sequence of r on the pairs
{(li, ti) | i ≥ 0, li ∈ Σ}
If a ∈ Σ the a-sequence of r is the projection of the label sequence of r on the pairs {(li, ti) | i ≥ 0, li = a}
The time sequence of rex is t−1 = 0, t0 = 3.4, t1 = 3.4, t2 = 4.6, t3 = 4.6,... The label sequence is (3.4, 3.4)(a, 3.4)(1.2, 4.6)(b, 4.6) ··· The action sequence is (a, 3.4)(b, 4.6) ··· The b-sequence is (b, 4.6) ··· 

Oscillator timed automata
The following definition characterizes the subclass of timed automata that are suit- able to represent oscillators.
Definition 3.2 A timed automaton T is called oscillator timed automaton on a distinguished action a ∈ Σ with period p ∈ R>0 if and only if all the following conditions hold:
for all ϑ ∈ R≥0 such that 0 ≤ ϑ < p there exists a prefix of an infinite

derivation r of S(T ) of the form	l0
l1	ln−1	ln
where all l

s0 −→ s1 −→··· −→ sn −→ sn+1	i
(i = 0,...,n − 1) are in R>0 (i.e. they are δ-transitions) and ln = a
every infinite derivation r of S(T ) has a prefix of the form (i)
every infinite derivation r of S(T ) has an infinite a-sequence of the form (a, ϑ)(a, 1 · p + ϑ)(a, 2 · p + ϑ)(a, 3 · p + ϑ) ··· for some delay ϑ
every finite derivation of S(T ) is a prefix of an infinite derivation r of S(T )
This definition constrains an oscillator timed automaton to have an initial state from which the oscillation can start with every delay (i), to always perform the distinguished action as the first action (ii), to regularly repeat the distinguished action every period from the first action on (iii), and to not have dying paths (iv), that is paths ending in a state where time can not proceed.
Such a behavior is a convenient representation of an oscillator with its own initial phase θ0 (0 ≤ θ0 < 2π), which we represent here as a time delay ϑ instead of an angle, and its own frequency ω, which we represent here as a period p. They are
related as follows: ω = 2π and θ0 = 2π ϑ.
p	p
Figure 1(a) is an oscillator timed automaton on the distinguished action a with period 4. In Figure 1(b) we show a slightly more complex automaton which is an oscillator timed automaton on the distinguished action c with period 5. Note that there is non-determinism on the choice of the initial non-δ-transition. Moreover, there may be both an infinite self-loop on state 1 and a cycle between states 3 and 4 that eventually could end in the loop of state 1. In general, oscillator timed automata can be very complex automata performing several actions and involving cycles other than the one we focus on.  The choice of the distinguished action

identifies the particular observation with which an external observer recognizes the oscillating behavior.

Interacting oscillator timed automata
We want to describe the interaction among several oscillator timed automata. The definition we give here is parametric with respect to the model of synchronization. After the parametric definition we introduce the particular instance that uses the Kuramoto model.
Let T1,..., TN be oscillator timed automata on distinguished actions a1,..., aN with periods p1,..., pN . We suppose we are given, randomly determined or specif- ically chosen, N initial delays ϑ1,..., ϑN .
At every instant of the interaction process we need to keep track of the current position of each oscillator in its standalone cycle. To do this we define a simple transformation: we add a new clock xi to every Ti and, to guarantee a correct measure, we modify each Ti in such a way that xi is reset whenever the distin- guished action ai is performed by Ti. This can be easily done by replacing each edge (q, ψ, γ, ai, q') of Ti by (q, ψ, γ ∪ {xi}, ai, q').
The previous transformation ensures that, after a proper initialization, xi mea- sures, at every point of the evolution of S(Ti), the time elapsed since the last occurrence of ai. By the assumption that Ti is an oscillator timed automaton, we can also state that pi minus the value of xi measures the remaining time to the next occurrence of ai. The initialization process is described below.

Steps of activity
In order to describe the interaction semantics we need to define the steps of activity
of a single automaton.
Let T = (Q, Σ, E, q0, X, Inv ) be a timed automaton. Given Δ ∈ R>0 we define

a transition relation −→l
Δ
between two states of S(T ). We say that (q, ν) −→l
Δ
(q', ν')

if and only if there exists a ﬁnite derivation d of S(T ) of the form (q, ν) =

(q0, ν0)  L0
(q1, ν1)  L0
Ln−1 (qn, νn) = (q', ν') such that:

l is the string l0l1 ··· ln−1
Δ is the sum of the times elapsed during d, i.e. Δ = Σn−1


>0 li

The time sequence of d is defined as the time sequence of r in Section 3.1, starting from state (q, ν) and ending on state (q', ν'). The label sequence, action sequence and a-sequence of d are defined in the same way. Note that in this case

the sequences are all finite. Moreover, given a step (q, ν) −→l
Δ
(q', ν'), we define a

function A such that A(l) gives the action sequence of the derivation d associated to the step.
The steps of activity allow us to group a sequence of transitions of S(T ) into a 

single transition −→l
Δ
. We can decide the amount of time (Δ) of our observation (l)

of the automaton behavior. Note that a step of activity is always possible only if

the automaton has not dying paths. Since we use this transition relation only with oscillator timed automata, this is guaranteed by Definition 3.2:
Proposition 3.3 Let	T	be	an	oscillator	timed	automaton	and	let
(q0, ν0)  L0	Ln (q, ν) be a ﬁnite derivation of S(T ). Then, given Δ ∈ R>0, it is

−→··· −→
always possible to perform a step of activity (q, ν) −→l
Δ
(q', ν').

Proof. By property (iv) of oscillator timed automata expressed in Definition 3.2. 

Initialization
The initialization step of the interaction must ensure that we start each transition system S(Ti) in a state with complete information about the delay and, thus, about the values of xi and the other clocks. To achieve this requirement we need to perform a preliminary collective derivation of all S(Ti). Before describing the procedure we need to introduce the following proposition.
Proposition 3.4 Let T = (Q, Σ, E, q0, X, Inv ) be an oscillator timed automaton on the distinguished action a with period p. For all delays 0 ≤ ϑ < p, there exists

an edge (q , ψ, γ, a, q') ∈ E and a preﬁx d =	L0
L1	Ln−1	Ln
of an



0
inﬁnite derivation r of S(T ) such that:
s0 −→ s1 −→··· −→ sn −→ sn+1

all li, i = 0,...,n − 1, are in R>0, Σn−1 li = ϑ and ln = a
sn = (q0, ν0 + ϑ) and sn+1 = (q', (ν0 + ϑ)/γ)
Proof. The properties follow easily by Definition 3.2 and by the semantics of a timed automaton.	 
The previous Proposition implies that we can effectively determine a state sn+1 of S(T ) from which the actual interaction of the automaton with the others can start.
Let B1, B2,..., BK, K ≤ N , be a sequence of non-empty sets partitioning
{1,...,N} such that for all k, k = 1, 2,...,K − 1, if i ∈ Bk and j ∈ Bk+1 then ϑi < ϑj; i.e. every Bk contains the indexes of the automata with equal values of initial delay and the sequence arranges the indexes of automata in such a way that their initial delays are in strict ascending order.
The preliminary collective derivation is as follows. It is straightforward, but requires a lot of details: for the sake of brevity we only give a brief informal de- scription.
We consider the initial states s1, s2,..., sN of each S(Ti), where every Ti has been
0	0	0
transformed inserting the new clock and modifying the edges as specified above.
The process is a sequence of K steps. At the first step every S(Ti) performs zero or more δ-transitions in order to reach a state of the form (q0, ν0 + ϑ) where ϑ is the delay of the first group of oscillators whose indexes are in B1. Then, the automata in this group perform a further single a-transition (where a is the distinguished action) to reach a state of the form (q', (ν0 + ϑ)/γ), as guaranteed by Proposition 3.4. From now on every automaton of this group is considered “activated” and continues with

a sequence of transitions of the form −→l
Δ
where Δ is given by the times specified in

the subsequent steps.
At the i-th step the time that has to pass is ϑ = ϑk − ϑj, where j ∈ Bi−1 and
k ∈ Bi.  The previously “activated” automata perform a transition −→l , while all
ϑ
the others perform δ-transitions for a total of ϑ time units. Then, the automata
whose indexes are in Bi becomes “activated” performing their first a-transition (a distinguished). Again, this possibility is guaranteed by Proposition 3.4.
At the end of this process we group the N reached states into a tuple
⟨s1, s2,..., sN ⟩ which is the initial configuration of the interaction semantics. Note
0	0	0
that, during the process, the early “activated” automata could have performed other a-transitions, even distinguished ones. This does not influence the subsequent in- teractions, because there have not been perturbations due to the synchronization function. The important fact to remark is that the states of the starting tuple all have pertinent values for the clocks xi and represent running oscillators with the chosen delays and periods.

Interaction semantics
Now we can introduce the behavior of N oscillator timed automata running in parallel and interacting using a generic discretized model, which is represented by an interaction function I.
The main advantage of the interaction semantics is that it maintains the struc- ture of the automata Ti’s, though it defines a perturbed behavior of them due to the interaction. This is achieved by using a global time, which is the time measure of the observer, together with N different relative times, which are the internal time mea-
sures of each oscillator timed automata involved. This means that if, according to the interaction, Ti has to decelerate and Tj has to accelerate during the current slice of global time dt, then Ti performs a step of activity whose duration is shorter than dt, while Tj performs a longer one. The acceleration and deceleration is determined by the interaction function I of the particular chosen model of synchronization. The global observer detects perturbed behaviors because the timestamps of the actions performed by each interacting Ti are re-scaled to the magnitude of the global time slice dt.
Now we can introduce a transition relation, which we call progress relation, between configurations, i.e. tuples ⟨s1, s2,..., sN ⟩ where each si is a state of S(Ti).
The rule defining the relation is the following:


∀i = 1, 2,...N	Δ
= I(i, dt, s ,s ,...,s  )
li	'
λi = SC(A(l ), Δ , dt)

i	1	2
N	si −→ si	i	i

	Δi	
λ1,λ2,...,λN	'	'	'
⟨s1, s2,..., sN ⟩ −−−−−−−→ ⟨s1, s2,..., sN ⟩
dt

where the re-scaling function SC is defined as follows:
SC((a ,t )(a ,t ) ··· (a ,t ), Δ, dt) = (a , t0 · dt)(a , t1 · dt) ··· (a , tk · dt)

0  0	1  1	k  k
0 Δ	1 Δ	k Δ

The behavior of the interacting oscillator timed automata T1, T2,..., TN is then defined as an infinite derivation:

λ1,λ2,...,λN	λ1,λ2,...,λN
ρ = ⟨s1, s2,..., sN ⟩ −−0−−0−−−0→ ⟨s1, s2,..., sN ⟩ −−1−−1−−−1→ ··· 
0	0	0	dt	1	1	1	dt
To construct the trace associated to ρ, we need a function Ω that merges the scaled action sequences λ1, λ2,..., λN of every step of progress into one action se- quence in which the timestamps of each action are in ascending order. Moreover we need a function T (τ, (a0, t0)(a1, t1) ··· (ak, tk)) = (a0, t0 +τ )(a1, t1 +τ ) ··· (ak, tk +τ ) that adds a given amount of time τ to the timestamps of an action sequence.
Definition 3.5 Given  N  interacting  oscillator  timed  automata  T1,..., TN ,
λ1,λ2,...,λN
the	trace	associated	to	a	derivation	ρ	=	⟨s1, s2,..., sN ⟩	−−0−−0−−−0→


λ1,λ2,...,λN
0	0	0	dt
λ1,λ2,...,λN

⟨s1, s2,..., sN ⟩ −−1−−1−−−1→ ⟨s1, s2,..., sN ⟩ −−2−−2−−−2→ ··· is the following action
1	1	1	dt	2	2	2	dt
sequence:
Ω(λ1, λ2,..., λN ) T (1 · dt, Ω(λ1, λ2,..., λN )) T (2 · dt, Ω(λ1, λ2,..., λN )) ··· 

0	0	0
1	1	1
2	2	2

The observable behaviors of the interacting oscillator timed automata are all possible traces.
Note that traces contain all the actions performed by all the interacting au- tomata. Moreover, the timestamp of each action is the one perceived by the global observer, which can therefore detect the perturbations, due to interaction, on the original standalone behaviors. Projecting a trace on distinguished actions only allows to observe the synchronization process if, eventually, all the distinguished actions occur at the same times.
Kuramoto interaction
In this section we instantiate the interaction semantics given above to the discretized Kuramoto model of synchronization introduced in Section 2.2.
In the automata model we use periods instead of natural frequencies and initial delays instead of initial phases. Since the Kuramoto model is defined in terms of angular frequency and angular acceleration, we need to do a simple transformation
to express the acceleration K ΣN	sin(θj − θi) of the i-th oscillator in terms of
shorter or longer duration Δi of the step of activity of Ti at each progress of length
dt. This is what the function I does, which is described in the following.
First, note that each configuration ⟨s1, s2,..., sN ⟩ is a snapshot of the situation of each oscillator at a given point of time t. This situation can be depicted in a circle of radius 1 associating to each automaton Ti, modulo 2πh for some h ∈ N, the angle θi(t) = ui · 2π, where ui is the time elapsed since the last occurrence of the distinguished action ai. By the transformation described at the beginning of Section 3.3, we know that ui is precisely the value of the clock xi that can be derived from si = (q, ν) as ν(xi). Note that this is true also in the starting configuration (for which we consider t = 0), as we showed in Section 3.3.2.

Using this transformation we can calculate the quantity

α = K Σ sin(θ (t) − θ (t))
i	N		j	i j=1
for each automaton Ti. Then, according to the discretization of the Kuramoto model (see Section 2.2), during the time slice dt the i-th oscillator has to move forward,
in the circle representation, of an angle (ωi + αi)dt, where ωi = 2π is its natural
frequency. The time Δi the automaton Ti has to consume to do this is such that (ωi +αi)dt = ωiΔi. Thus, Δi = dt+ αidt , which is the value of I(i, dt, s1, s2,..., sN ).

Logic for biological oscillators
In this section, we introduce a logic, Kuramoto Synchronization Logic (KSL), in order to specify and detect collective synchronization properties in a population of oscillator timed automata. We provide the syntax, the semantics and a model checking algorithm for KSL. This logic has the same main temporal and logical operators as Linear Temporal Logic (LTL). However, while LTL use a finite state automaton, the Kripke structure, as a model, KSL use an uncountable state model. In KSL, atomic propositions are given in terms of equalities or inequalities about linear combinations of state variables. This form allows us to easily describe some useful properties about synchronization. We add a special operator D., inspired by the freeze quantification of [3], to store state variables in a certain step of the simulation that could be compared with the state variables of a successive step. Moreover, we use a bounded version of the until operator U adding to it a constraint on the maximum time interval to be considered.

Discrete time Kuramoto model
Our system model is a discrete time version of the Kuramoto model (see Equa- tion (1)) which can be represented by a tuple M = (Ω, Θ, D, D(∗), K, r), where Ω = {ω1, ··· , ωn} is the vector of frequencies of the oscillator timed automata, Θ = {θ1, ··· , θn} is the vector of the initial phases, D = { d1, ··· , dn} is the vector of the remaining times to accomplish the distinguished actions, D(∗) are the set of vectors of the stored remaining times during simulation, K ∈ R is the interaction constant between the oscillators automata, and r is the phase coherence calculated at current time as in Equation (2). We overload the definition of θi, di and r with the functions θi : N → R, di : N → R and r : N → R that map the discrete time t to the value of synchronization phases, remaining times and phase coherence.
The relations among synchronization phases and remaining times are given by the following equations:



θi(t + dt) = θi(t)+ (ωi
+ Σ K sin(θ (t) − θ (t))dt	(3)
j=1

di(t + dt) = 
(2qπ − θi(t + dt))
ωi

such that q = min(z ∈ N : 2zπ ≤ θi(t + dt))

If we consider dt as the time unit in the discretization of time we can rewrite Equation ()3) as follows:
Σt−1 ,	Σ K	⎞

θi(t) = θi(0) +

L=0
⎝ωi +

j=1
n sin(θi(l) − θj(l))⎠ dt	(4)

where θi(0) is the synchronization phase at the beginning of the simulation.
Although Equation (3) and (4) are very intuitive to understand and simple to be calculated, they need a very small dt to provide a good approximation, increasing dramatically the number of simulation steps. Consequently, in the simulator we implemented, we used the Runge-Kutta 4th order method [7] to obtain the best compromise between the approximation and the speed of computation.

Syntax and semantics of Kuramoto Synchronization Logic
The syntax of the Kuramoto Synchronization Logic is as follows:

φ ::= T | F | p | ¬φ | φ ∧ φ | Xφ | φ U≺m φ | D(h).φ p ::= Σ civi ∼ b | r ∼ b
where p is an atomic proposition, ci and b are real numbers, vi ∈ D ∪ D(∗) are time remaining variables, ∼∈ {<, ≤, >, ≥, =}, and ≺∈ {<, ≤}. A KSL formula has atomic propositions, logical connectives ¬ ∧, temporal connectives X (next) U≺m (bounded until), and a freeze connective D. As usual, we introduce shorthands by defining the following derivative logical and temporal operators:


ψ ∨ φ
⇔ ¬(¬ψ ∧ ¬φ)
or (∨)

ψ → φ ⇔ ¬ψ ∨ φ
ψ ↔ φ ⇔ (ψ → φ) ∧ (φ → ψ)
 ≺mψ ⇔ ¬(F U≺m¬ψ)
  ≺mψ ⇔ T U≺mψ
implies (→) equivalent (↔) bounded always ( )
bounded eventually ( )


Figure 2 shows the semantics of the basic operators. Concerning the temporal operators, Xφ is true if and only if φ is true at next simulation step, and ψ U≺m φ is true if and only if ψ is continuously true - in subsequent steps - until φ becomes true, which must happen within m (if ≺ is ≤) or m − 1 (if ≺ is <) steps.
Actually, the until operator of KSL can be expressed using the next operator.
This is because the operator is always bounded.



Fig. 2. Semantics of Kuramoto Synchronization Logic
Proposition 4.1 Let ψ U≺m φ be a formula of KSL. Then, for all M, t:





and


M,t |= ψ U≤m φ ⇔ M,t |=  fm(ψ, φ)
i=1

m−1



where
M,t |= ψ U<m φ ⇔ M,t |=
  fm(ψ, φ)
i=1

f (ψ, φ) = ,⎨ ψ ∧ X φ	if m = 1 
, ψ ∧ X (fm−1(ψ, φ)) if m > 1
The previous result allows us to simplify the model checking algorithm, which thus deals only with the next temporal operator (see Section 4.3).
Example 4.2 [Synchronization] Using the phase-coherence parameter r, it is pos- sible to measure the collective behavior of a system of coupled oscillators. In par- ticular Kuramoto [11] showed that if K is greater than a certain threshold Kc and the oscillators have the same frequency, after a certain amount of time they become perfectly synchronized, i.e. r = 1. The property that given a system of N oscillator timed automata with same frequencies, “it becomes perfectly synchronized within 10s”, can be specified as:
φpsynch =  ≤10s r = 1 
If the oscillators have slightly different frequencies and K is greater than a certain threshold Kc, the phase-coherence parameter r becomes approximately 1. Chosen an ϵ and given a system of N oscillator timed automata with slightly different frequencies, we can specify the property that “within 10s, it becomes synchronized

with an approximation of ϵ and, after that, it remains synchronized for at least 5s”:


є psynch
=  ≤10s  ≤5s r > 1 − ϵ

Example 4.3 [Locked and drifted oscillators] After a system of oscillators starts to synchronize, the population splits into a partially synchronized state consisting of two groups of oscillators: a synchronized group, called locked - that behaves with a frequency locked to the mean of the frequencies distribution - and a desynchronized group, called drifted, whose natural frequencies are too extreme to be entrained. In a set of locked oscillators no changes happen to the relative remaining times in two subsequent simulation steps. The property that, given a system of N oscillator timed automata, and given a set F = {i | 1 ≤ i ≤ N} of indexes “the oscillators in F become eventually locked within 10s”, can be expressed as:

φF	=  ≤10s D(1).X   (di − dj) − (d(1) − d(1)) = 0 

Locked
i	j
i,j∈F


Model checking algorithm
Algorithm 1 shows a high level description of the recursive model checking function mcKSL. It takes a KSL formula φ - where all the occurrences of the bounded until operator have been translated as shown in Proposition 4.1 - a tuple M, a discretized time (initially 0), and a dignostic trace (initially empty). The function evaluates the formula φ over M and gives a counterexample (a diagnostic trace) whenever the formula is false. The complexity of mcKSL is linear with respect to the length of the formula, O(|φ|). The addVariables function allows to store the current state variables di : i = 1, ··· ,N in M, when a freeze connective is met during the parsing. For each X connective in the formula, a nextStep function is called in order to calculate the evolution of the system using the discrete time Kuramoto model described in Equation (3). The functions notDiag and mergeAnd simply manage the returning of a correct counterexample, given the results of the recursive calls.

Reasoning on synchronization
In this section we briefly report an example of analysis performed by a prototype implementation of our model checker. A demo of the simulator is available at [5]. We generated a system of 40 oscillators by choosing randomly the initial phase syn- chronizations in the range (0, 2π) and frequencies using a Cauchy random variable in the range (0, 1). Figure 3 shows the distribution of frequencies and of phases of each oscillator. We set the coupling strength k = 1.0 and we check the φLockedF with F = {1, ··· , 40} and φpsynch with ϵ = 0.3. Figure 4 shows the result of the model checking after 10 seconds.

function mcKSL(φ, M, t, diagTrace)
d Returns (true,  ) or (false, a diagnostic trace)
select case case φ = T
return (True,  )
end case
case isAtomic(φ)
return checkAtomicProp(φ, M, t, diagTrace)
end case case φ = ¬φ1
return notDiag (mcKSL(φ1, M, t, diagTrace), φ1, M, t, diagTrace)
end case
case φ = φ1 ∧ φ2
return mergeAnd (
mcKSL(φ1, M, t, diagTrace), mcKSL(φ2, M, t, diagTrace))
end case case φ = X φ1
diagTrace ← append (diagTrace, φ, M, t)
M← nextStep(M)
return mcKSL (φ1, M,t + 1, diagTrace)
end case
case φ = D(h). φ1
diagTrace ← append (diagTrace, φ, M, t)
M← addVariables(M, h)
return mcKSL (φ1, M, t, diagTrace)
end case end select
end function
Algorithm 1. mcKSL Algorithm
Conclusion and future work
In this paper we have defined a subclass of timed automata, oscillator timed au- tomata, suitable to model biological oscillators. We have specified an interaction semantics, parametric w.r.t. a model of synchronization, and we have instantiated it to the Kuramoto model. The main advantage of the semantic definition is that it does not require changing the structure of the automata modeling the standalone os- cillators. We have also introduced a logic, Kuramoto Synchronization Logic (KSL), in order to specify and detect collective synchronization properties in a population of oscillators timed automata. A model checking algorithm has been presented and an example of analysis has been showed.
The main future directions of our work are: 1) extend our logic with control operators that allow us to infer how to influence a set of oscillators by adding artificial oscillators, which we can control, in order to satisfy a desired property. 2)



Fig. 3. Initial conditions of the analysis


Fig. 4. Verification of properties after 10 seconds



Use hybrid automata, instead of timed automata, to model oscillators and to define the interaction semantics. 3) Fully implement a model checker and simulator for KSL. A prototype is available at [5]. 4) A long term objective: apply the model checking of the extended logic, together with detection techniques already partially available, to control fibrillation in cardiac cells networks (for more details of this line of research see [4]).

Acknowledgement
Research partially supported by the Italian FIRB-MIUR LITBIO: Laboratory for Interdisciplinary Technologies in Bioinformatics.

References
Acebron, J., L. Bonilla, C. P´erez Vicente, F. Ritort and R. Spigler, The Kuramoto model: A simple paradigm for synchronization phenomena, Rev Mod Phys 77 (2005), pp. 137–185.
Alur, R. and D. L. Dill, A theory of timed automata, Theoretical Computer Science 126 (1994), pp. 183– 235.
Alur, R. and T. A. Henzinger, A really temporal logic, Journal of the ACM 41 (2004), pp. 181–203.
Bartocci, E., F. Corradini, R. Grosu, E. Merelli, S. Smolka and O. Riganelli, “StonyCam: a Formal Framework for Modeling, Analyzing and Regulating Cardiac Myocytes,” Lecture Notes in Computer Science, Springer-Verlag, 2008 pp. 493–502.
Bartocci, E., F. Corradini, E. Merelli and L. Tesei, Prototype of the KSL model checker and simulator.
URL http://cosy.cs.unicam.it/kuramoto/
Buck, J., Synchronous rhythmic flashing of fireflies II, The Quarterly Review of Biology 63 (1988),
pp. 265–289.
Butcher, J. C., “Numerical methods for ordinary differential equations,” John Wiley and Sons, 2003.
Dye, J., Ionic and synaptic mechanisms underlying a brainstem oscillator: An in vitro study of the pacemaker nucleus of apteronotus, Journal of Comparative Physiology 168 (1991), pp. 521—-532.
Henzinger, T. A., X. Nicollin, J. Sifakis and S. Yovine, Symbolic model checking for real-time systems, Information and Computation 111 (1994), pp. 193–244.
Kitano, H., “Foundations of Systems Biology,” MIT Press, 2002.
Kuramoto, Y., Phase dynamics of weakly unstable periodic structures: Condensed matter and statistical physics, Progress of theoretical physics 71 (1984), pp. 1182–1196.
Kuramoto, Y., Collective synchronization of pulse-coupled oscillators and excitable units, Physica D
50 (1991), pp. 15–30.
Kuramoto, Y., “Chemical Oscillations, Waves, and Turbulence,” Springer-Verlag, 2003.
Mirollo, R. E. and S. H. Strogatz, Synchronization of pulse-coupled biological oscillators, SIAM Journal of Applied Mathematics 50 (1990), pp. 1645–1662.
Peskin, C. S., “Mathematical Aspects of Heart Physiology,” Courant Institute of Mathematical Sciences, New York University, New York, 1975.
Strogatz, S. H., “SYNC, the emerging science of spontaneous order,” Hyperion, 2004.
Wang, R., L. Chen and K. Aihara, Synchronizing a multicellular system by external input: an artificial control strategy, Bioinformatics 22 (2006), pp. 1775–1781.
Winfree, A. T., Biological rhythms and the behavior of populations of coupled oscillators, Journal of Theoretical Biology 16 (1967), pp. 15 – 42.
