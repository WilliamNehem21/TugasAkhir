

Electronic Notes in Theoretical Computer Science 203 (2008) 67–88
www.elsevier.com/locate/entcs

Towards Algebraic High-Level Systems as Weak Adhesive HLR Categories
Ulrike Prange1 ,2
Department of Software Engineering and Theoretical Computer Science Technical University of Berlin
Berlin, Germany

Abstract
Adhesive high-level replacement (HLR) systems have been recently established as a suitable categorical framework for double pushout transformations based on weak adhesive HLR categories. Among different types of graphs and graph-like structures, various kinds of Petri nets and algebraic high-level (AHL) nets are interesting instantiations of adhesive HLR systems. AHL nets combine algebraic specifications with Petri nets to allow the modeling of data, data flow and data changes within the net.
For the development and analysis of reconfigurable systems, not only AHL schemas based on an algebraic specification and AHL nets using an additional algebra should be considered, but also AHL systems which additionally include markings of nets.
In this paper, we summarize the results for different kinds of AHL schemas and nets, and extend these results to AHL systems. The category of markings is introduced, which allows a general construction combining AHL nets with possible markings leading under certain properties to a weak adhesive HLR category.
Keywords: Algebraic High-Level Nets, Algebraic High-Level Systems, Adhesive HLR Categories


Introduction
Petri nets are an important modeling technique to describe discrete distributed sys- tems. Their nondeterministic firing steps are well-suited for modeling the concurrent behavior of such systems.
As the adaptation of a system to a changing environment gets more and more important, Petri nets that can be transformed during runtime have become a sig- nificant topic in the recent years. Application areas cover e.g. computer supported cooperative work, multi agent systems, dynamic process mining and mobile net- works. Moreover, this approach increases the expressiveness of Petri nets and allows a formal description of dynamic changes.

1 This work was partially funded by the research project MAÆNET of the German Research Council (see
http://tfs.cs.tu-berlin.de/formalnet/).
2 Email: uprange@cs.tu-berlin.de

1571-0661© 2008 Elsevier B.V. Open access under CC BY-NC-ND license.
doi:10.1016/j.entcs.2008.10.043

For the terminology in this paper, a Petri net describes only the structure of the net, while a Petri system consists of a Petri net and a suitable marking. In [6], the concept of reconfigurable place/transition (P/T) systems was introduced for modeling changes of the net structure while the system is kept running. In detail, a reconfigurable P/T system consists of a P/T system and a set of rules, so that not only the follower marking can be computed but also the net structure can be changed by rule application. So, a new P/T system is obtained that is more appropriate with respect to some requirements of the environment.
As an extension of Petri nets, algebraic high-level (AHL) nets combine algebraic specifications with P/T nets [8] to allow the modeling of data, data flow and data changes within the net. In general, an AHL system denotes an AHL net based on a specification SP in combination with an SP -algebra A and an initial marking M . Combining AHL systems with rules leads to reconfigurable AHL systems.
In this paper, we integrate rule-based transformations of AHL systems into the framework of adhesive high-level replacement (HLR) systems [2,4] that is inspired by graph transformation systems. Adhesive HLR systems are a suitable categorical framework for graph transformation in the double pushout approach. They combine the framework of HLR systems [3] with the framework of adhesive categories [7]. The main concept behind adhesive categories are the so-called van Kampen squares. These ensure that pushouts along monomorphisms are stable under pullbacks and, vice versa, that pullbacks are stable under combined pushouts and pullbacks. In the case of weak adhesive HLR categories, the class of all monomorphisms is replaced
by a subclass M of monomorphisms closed under composition and decomposition, and in the van Kampen squares certain M-morphisms are required.
The framework of weak adhesive HLR categories is sufficient to show under some additional assumptions as main results the Local Church-Rosser Theorem, the Parallelism Theorem, the Concurrency Theorem, the Embedding and Extension
Theorem, and the Local Confluence Theorem, also called Critical Pair Lemma.
For different kinds of Petri nets we already know that the corresponding cate- gories are weak adhesive HLR categories. For elementary nets, P/T nets and AHL schemas with a fixed specification this has been shown in [2], for AHL schemas and nets with suitable algebras in [9], and for P/T systems in [10]. The proof for P/T systems has been done by showing directly the different properties of a weak ad- hesive HLR category for P/T nets with markings. Analogously, this could be done for each kind of AHL system. But the more elegant way is to show that there is a categorical construction combining AHL nets and their markings, leading to a gen- eral proof for different kinds of low-level and high-level Petri net systems. Therefore we introduce the category Markings of markings and show that AHL systems can be considered as a comma category of AHL nets and markings, leading to a weak adhesive HLR category if the underlying category of AHL nets is a weak adhesive HLR category with suitable algebras.
This paper is organized as follows: In Section 2, we introduce the basic notions of weak adhesive HLR categories and adhesive HLR systems. Known results for P/T nets, AHL schemas, AHL nets and P/T systems are summarized in Section 3.

In Section 4, the category of markings is defined leading to the weak adhesive HLR category of AHL systems in Section 5. A small example of a reconfigurable AHL system is presented in Section 6. At last, in Section 7 the conclusion is given and future work is described.

Weak Adhesive HLR Categories and Adhesive HLR Systems
In this section, we introduce weak adhesive HLR categories and adhesive HLR systems. For a more detailed view we refer to [2].
The intuitive idea of weak adhesive HLR categories are categories with suitable pushouts and pullbacks which are compatible with each other. More precisely the definition is based on so-called van Kampen squares.
The idea of a van Kampen square is that of a pushout being stable under pull- backs, and vice versa that pullbacks are stable under combined pushouts and pull- backs.
Definition 2.1 (Van Kampen square) A pushout (1) is a van Kampen square, if for any commutative cube (2) with (1) in the bottom and the back faces being pullbacks holds: the top face is a pushout if and only if the front faces are pullbacks.

Since not even in the category Sets of sets and functions each pushout is a van Kampen square, for weak adhesive HLR categories only those squares are considered where m is an M-morphism, and some more morphisms in the cube are required to be in M.
Definition 2.2 (Weak adhesive HLR category) A category C with a morphism class M is a weak adhesive HLR category, if
M is a class of monomorphisms closed under isomorphisms, composition (f : A → B ∈ M,g : B → C ∈ M ⇒ g ◦ f ∈ M) and decomposition (g ◦ f ∈ M,g ∈ M ⇒ f ∈ M),
C has pushouts and pullbacks along M-morphisms and M-morphisms are closed under pushouts and pullbacks,
pushouts in C along M-morphisms are weak VK squares.
For a weak VK square, the VK square property holds for all commutative cubes with m ∈ M and (f ∈ M or b, c, d ∈ M) (see Def. 2.1).

For historical reasons, these categories are called weak adhesive HLR categories. In [11] and related work, adhesive categories are used as the categorical framework for deriving process congruences from reaction rules. The step from adhesive to adhesive HLR categories is justified by the fact that there are some important ex- amples – such as algebraic specifications and typed attributed graphs – which are not adhesive categories. However, they are adhesive HLR categories for a suitable sub- class M of all monomorphisms. Thus, the main difference between adhesive HLR
categories and adhesive categories is that a distinguished class M of monomor-
phisms is considered instead of all monomorphisms, so that only pushouts along
M-morphisms have to be VK squares. Another important example – the category PTNets of place/transition nets with the class M of injective morphisms – fails to be an adhesive HLR category, but is a weak adhesive HLR category with the restriction to weak van Kampen squares. This justifies the step to weak adhesive HLR categories.
The categories Sets of sets and functions, Graphs of graphs and graph mor- phisms, and GraphsTG of typed graphs and typed graph morphisms are weak adhesive HLR categories for the class M of all monomorphisms. Moreover, an im- portant example is the category (AGraphsATG, M) of typed attributed graphs with a type graph AT G and the class M of all injective morphisms with isomor- phisms on the data part.
Weak adhesive HLR categories are closed under product, slice, coslice, functor, and comma category constructions. This means that we can construct new weak adhesive HLR categories from given ones [2,9].
Theorem 2.3 (Construction Theorem) If (C, M1) and (D, M2) are weak ad- hesive HLR categories, then the following categories are also weak adhesive HLR categories:
the full subcategory (C', M') of C with M' = M1|C' if C' has pushouts and pullbacks along M'-morphisms which are preserved by the inclusion functor,
the product category (C × D, M1 × M2),
the slice category (C\X, M1∩C\X) and the coslice category (X\C, M1∩X\C)
for any object X in C,
for every category X the functor category ([X, C], M1-functor trans- formations), where an M1-functor transformation is a natural transformation t : F → G where all morphisms tX : F (X) → G(X) are in M1,
the comma category (ComCat(F, G; I), M) with M = (M1 × M2) ∩ MorComCat(F,G;I) and functors F : C → X, G : D → X, where F pre- serves pushouts along M1-morphisms and G preserves pullbacks along M2- morphisms.
Now we are able to generalize graph transformation systems, grammars and languages in the sense of [1,2].
In general, an adhesive HLR system is based on productions, also called rules, that describe in an abstract way how objects in this system can be transformed.

An application of a production is called a direct transformation and describes how an object is actually changed by the production. A sequence of these applications yields a transformation.
Definition 2.4 (Production and transformation) Given a weak adhesive HLR

category (C, M), a production p = (L ←l
K →r
R) (also called rule) consists of

three objects L, K and R called left hand side, gluing object and right hand side
respectively, and morphisms l : K → L, r : K → R with l, r ∈ M.
Given a production p = (L ←l  K →r  R) and an object G with a morphism
p,m
m : L → G, called match, a direct transformation G =⇒ H from G to an object
H is given by the following diagram, where (1) and (2) are pushouts. A sequence
G0 ⇒ G1 ⇒ ... ⇒ Gn of direct transformations is called a transformation and is
denoted as G0 ⇒∗ Gn.
Definition 2.5 (Adhesive HLR system, grammar and language) An adhe- sive HLR system AHS = (C, M,P ) consists of a weak adhesive HLR category (C, M) and a set of productions P .
An adhesive HLR grammar AHG = (AHS, S) is an adhesive HLR system AHS
together with a distinguished start object S.
The language L of an adhesive HLR grammar AHG = (AHS, S) is defined by


L = {G | ∃ transformation S ⇒∗
G}.

Note that there are two different kinds of systems: adhesive HLR systems, which consist of a weak adhesive HLR category and some productions, and Petri systems, which consist of a Petri net together with a suitable marking. Instantiating adhesive HLR systems with Petri systems leads to reconfigurable Petri systems, i.e. Petri nets with markings and productions.
For the theory of adhesive HLR systems we refer to [2]. In the following, we only analyze which kinds of low-level and high-level Petri nets are weak adhesive HLR categories. To apply the whole general theory of adhesive HLR systems to these nets, some more properties are necessary which are not handled here.

P/T Nets, AHL Schemas, AHL Nets and P/T Sys- tems as Weak Adhesive HLR Categories
In this section, we review under which conditions different kinds of P/T and AHL schemas, nets and systems are weak adhesive HLR categories.	We only define

the structures and present the results. The corresponding proofs can be found in [2,9,10].
Definition 3.1 An elementary net is given by EN = (P, T, pre, post) with sets P of places, T of transitions, and pre- and post-domain functions pre, post : T → P(P ), where P is the power set functor.
An elementary net morphism fEN : EN → EN ' is given by fEN = (fP : P → P ', fT : T → T ') compatible with the pre- and post-domain functions, i.e. pre' ◦ fT = P(fP ) ◦ pre and post' ◦ fT = P(fP ) ◦ post.
Elementary nets and elementary net morphisms form the category ElemNets.
Corollary 3.2 The category (ElemNets, M) is a weak adhesive HLR category, where M is the class of all injective morphisms [2,9].
Note, that (ElemNets, M) is not an adhesive HLR category as stated in [2], since the power set functor P only preserves pullbacks along injective morphisms, but not over general ones.
Definition 3.3 A place/transition net PN = (P, T, pre, post) is given by a set P of places, a set T of transitions, as well as pre- and post-domain functions pre, post : T → P ⊕, where P ⊕ is the free commutative monoid over P .
A place/transition net morphism fPN : PN → PN ' is given by fPN = (fP :
P → P ', fT : T → T ') compatible with the pre- and post-domain functions, i.e.
pre' ◦ fT = f ⊕ ◦ pre and post' ◦ fT = f ⊕ ◦ post.
P	P
Place/transition nets and place/transition net morphisms form the category
PTNets.
Corollary 3.4 The category (PTNets, M) is a weak adhesive HLR category, where M is the class of all injective morphisms [2].
Definition 3.5 A place/transition system PS	=	(PN, m) is given by a place/transition net PN = (P, T, pre, post) and a marking m : P → N.
A place/transition system morphism fPS	: PS	→ PS' is given by a place/transition net morphism fPN : PN → PN ' that is marking-preserving, i.e.
∀p ∈ P : m(p) ≤ m'(fPN (p)).
Place/transition systems and place/transition system morphisms form the cat- egory PTSystems.
Corollary 3.6 The category (PTSystems, M) is a weak adhesive HLR category, where M is the class of all strict morphisms, i.e. fPS : PS → PS' ∈ M if fPN is injective and marking-strict: ∀p ∈ P : m(p)= m'(fPN (p)) [10].
Definition 3.7 An AHL schema over an algebraic specification SP , where SP  = (SIG, E, X) has additional variables X and SIG = (S, OP ), is given by AC = (P, T, pre, post, cond, type) with sets P of places and T of transitions, pre, post : T → (TSIG(X) ⊗ P )⊕ as pre- and post-domain functions, cond : T →
Pfin(Eqns(SIG, X)) assigning to each t ∈ T a finite set cond(t) of equations over
SIG and X, and type : P  → S a type function.  Note that TSIG(X) is the

SIG-term algebra with variables X and (TSIG(X) ⊗ P ) = {(term, p) | term ∈
TSIG(X)type(p),p ∈ P }.
An AHL schema morphism fAC : AC → AC' is given by a pair of functions fAC = (fP : P → P ', fT : T → T ') which are compatible with pre, post, cond and type as shown below.

Given an algebraic specification SP , AHL schemas over SP and AHL schema morphisms form the category AHLSchemas(SP).
Corollary 3.8 The category (AHLSchemas(SP), M) is a weak adhesive HLR category, where M is the class of all injective morphisms [2,9].
Definition 3.9 An AHL net AN = (AC, A) is given by an AHL schema AC over SP and an SP -algebra A ∈ A(SP), where A(SP) is a subcategory of Algs(SP), the category of all algebras over SP .
An AHL net morphism fAN : AN → AN ' is given by a pair fAN = (fAC : AC → AC', fA : A → A'), where fAC is an AHL schema morphism and fA ∈ A(SP) an SP -homomorphism.
Given an algebraic specification SP , AHL nets over SP and AHL net morphisms form the category AHLNets(SP).
Corollary 3.10 If (A(SP), M) is a weak adhesive HLR category then the category (AHLNets(SP), M') is a weak adhesive HLR category, where M' is the class of all morphisms fAN = (fAC, fA) with fAC being injective and fA ∈ M [9].
For the algebra part, up to now it is not clear whether or under what conditions the category Algs(SP) of algebras over an arbitrary specification SP with the class Minj of injective morphisms is a weak adhesive HLR category. Nevertheless, there are two possible choices for the category (A(SP), M):
The category (Algs(SP), Miso) with the class Miso of isomorphisms, which is useful for systems where only the net part but not the algebra part is allowed to be changed by rule application.
The category (Algs(SP), Minj) with the class Minj of injective morphisms, where SP is a graph structure algebra, which means that only unary operations are allowed.
Definition 3.11 A generalized AHL schema GC = (SP, AC) is given by an alge- braic specification SP and an AHL schema AC over SP .
A generalized AHL schema morphism f : GC → GC' is a tuple fGC = (fSP :
SP → SP ', fP : P → P ', fT : T → T '), where fSP is a specification morphism and

fP , fT are compatible with pre, post, cond and type. f #
is the extension of fSP

to terms and equations.

Generalized AHL schemas and generalized AHL schema morphisms form the cate- gory AHLSchemas.
Corollary 3.12 The category (AHLSchemas, M) is a weak adhesive HLR cate- gory, where M is the class of all morphisms fGC = (fSP , fP , fT ) with fSP being strict injective and fP , fT being injective [9].
For the definition of generalized AHL nets we need the category Algs of algebras and generalized algebra homomorphisms, which is defined by
algebras A ∈ Algs(SP) for a specification SP as objects,
as morphisms, generalized algebra homomorphisms f : A → A' between algebras A ∈ Algs(SP) and A' ∈ Algs(SP'), i.e. algebra homomorphisms f : A → Vh(A') in Algs(SP) for a specification morphism h : SP → SP ', where Vh : Algs(SP') → Algs(SP) is the forgetful functor between the algebras.
Definition 3.13 A generalized AHL net GN = (GC, A) is given by a generalized AHL schema GC over the algebraic specification SP and an SP -algebra A ∈ A, where A is a subcategory of Algs.
A generalized AHL net morphism fGN : GN → GN ' is a tuple fGN = (fGC : GC → GC', fGA : A → Vf (A')), where fGC = (fSP , fP , fT ) is a generalized AHL schema morphism and fGA ∈ A a generalized algebra homomorphism. VfSP : Algs(SP') → Algs(SP) is the forgetful functor induced by fSP .
Generalized AHL nets and generalized AHL net morphisms form the category
AHLNets.
Corollary 3.14 If (A, M1) is a weak adhesive HLR category of algebras, then the category (AHLNets, M) is a weak adhesive HLR category, where M is the class of all net morphisms fGN = (fGC, fGA) with fGC being strict injective and fGA ∈ M1 [9].
As in the case of AHL nets, up to now we do not know whether the category Algs with the class Minj of injective morphisms is a weak adhesive HLR category and can be used for the algebra part. Again, we have two possible choices for the category (A, M1):
The category (Algs, Miso) with the class Miso of isomorphisms, which is useful for systems where only the net part but not the algebra part is allowed to be changed by rule application.

The category (Algs|QTA, Msinj) of quotient term algebras and unique induced homomorphisms, with the class Msinj of strict injective morphisms.
The Category of Markings
In this section, we define the category Markings of markings and show that this category is a weak adhesive HLR category.
In general, a marking of a net can be seen as a multiset, i.e. an element of a free commutative monoid – in the case of P/T nets of P ⊕, in the case of AHL nets of (A ⊗ P )⊕, where ⊗ means the type-correct product. As a consequence, we could use the category FCMonoids of free commutative monoids for our markings.
Unfortunately, in many cases the morphisms between P/T or AHL systems should not be marking-strict, which means that the marking on each place p has to be equal in both nets, as is the case for morphisms in FCMonoids.
For this reason, we define the category Markings, where the objects are sets combined with a function to natural numbers defining the quantity of each element of the set. For morphisms, we only require a mapping between the sets that preserves these quantities.
Definition 4.1 (Category Markings) The category Markings consists of
objects (S, s) with a set S and a function s : S → N,
morphisms f : (S, s) → (T, t) with a function f : S → T such that ∀s1 ∈ S :
s(s1) ≤ t(f (s1)),
a composition g ◦ f of f : (S, s) → (T, t), g : (T, t) → (U, u) with ∀si ∈ S :
g ◦ f (s1)= g(f (s1)) as in Sets,
identities id(S,s) : (S, s) → (S, s) with id(S,s) = idS as in Sets.
This category is well-defined since the morphisms are basically morphisms in Sets, and for the composition we have ∀s1 ∈ S : s(s1) ≤ t(f (s1)) ≤ u(g(f (s1))), which means g ◦ f is a valid Markings-morphism.
Now we shall show that the category of markings with a suitable morphism class
Mstrict of strict morphisms is a weak adhesive HLR category. First we define this morphism class Mstrict, and then we prove some lemmas which are necessary to show the desired result.
Definition 4.2 (strict morphism) A morphism f : (S, s) → (T, t) in Markings
is marking-strict if ∀s1 ∈ S : s(s1)= t(f (s1)).
A morphism f : (S, s) → (T, t) in Markings is strict, if f is injective and marking-strict. All strict morphisms form the morphism class Mstrict.
The category FCMonoids of free commutative monoids is a subcategory of Markings, where the morphisms in FCMonoids are exactly the marking-strict morphisms.
Lemma 4.3 Mstrict is a class of monomorphisms closed under composition and decomposition.

Proof. Given morphisms f : (S, s) → (T, t), g : (T, t) → (U, u) in Markings, we have:
If f is strict, then it is injective and we inherit from Sets that it is a monomor- phism.
Injective morphisms in Sets are closed under composition and decomposition. This holds also in Markings.
f strict	g strict
If f , g are strict we have ∀s  ∈ S : s(s )	t(f (s ))	u(g(f (s ))),
1	1	=	1	=	1
which means that also g ◦ f is strict.
g◦f strict	g strict
If g, g ◦ f are strict we have ∀s ∈ S : s(s )	u(g(f (s )))	t(f (s )),

1	1	=
which means that also f is strict.
1	=	1


The next proofs are very similar to the proofs for P/T systems being a weak adhesive HLR category in [10]. We generalize these proofs to the category of mark- ings. First we shall show that pushouts along Mstrict-morphisms exist and preserve Mstrict-morphisms.
Lemma 4.4 In Markings, pushouts along Mstrict-morphisms exist and preserve Mstrict, i.e. given morphisms f and m with m strict, then the pushout (PO) exists and n is also a strict morphism.

Proof. Given f , m with m ∈ Mstrict we construct D as pushout object in Sets,
.
which means D = (C ∪ B)\m(A) with inclusion n : C → D, and g : B → D : b1 ∈
B\m(A) '→ b1, m(a1) '→ f (a1). For d1 ∈ D, d is defined by
d1 = b1 ∈ B\m(A): d(b1)= b(b1),
d1 = c1 ∈ C: d(c1)= c(c1). Obviously, d : D → N is well-defined.
First we shall show that g, n are Markings-morphisms and n is strict.
∀b1 ∈ B we have:
(1)
b1 ∈ B\m(A) and b(b1) = d(b1)= d(g(b1)) or

∃a
∈ A with b = m(a ) and b(b )= b(m(a )) m strict
(2)

1	1	1	1
1	=	a(a1) ≤ c(f (a1)) =

d(f (a1)) = d(g(m(a1))) = d(g(b1)).
This means g ∈ Markings.
∀c1 ∈ C we have:
(2)
c(c1) = d(c1)= d(n(c1)).

This means n ∈ Markings and n is strict.
It remains to show the pushout property. Given Markings-morphisms h : (C, c) → (E, e), k : (B, b) → (E, e) with h ◦ f = k ◦ m, we have a unique induced morphism x in Sets with x◦n = h and x◦g = k. We shall show that x ∈ Markings,
i.e. ∀d1 ∈ D : d(d1) ≤ e(x(d1)).


For d1 = b1 ∈ B\m(A) we have d(b1) e(x(b1)).
(1)
= b(b1) ≤ e(k(b1)) = e(x(g(b1)) =

(2)
For d1 = c1 ∈ C we have d(c1) = c(c1) ≤ e(h(c1)) = e(x(n(c1))) = e(x(c1)).

As next property, we shall show that pullbacks along Mstrict-morphisms exist and preserve Mstrict-morphisms.
Lemma 4.5 In Markings, pullbacks along Mstrict-morphisms exist and preserve Mstrict, i.e. given morphisms g and n with n strict, then the pullback (PB) exists and m is also a strict morphism.

Proof. Given g, n with n ∈ Mstrict we construct A as pullback object in Sets, which means A = g−1(n(C)) with inclusion m : A → B and f : A → C : a '→ n−1(g(a)). For all a1 ∈ A, a is defined by
(∗) a(a1)= b(m(a1)).
Obviously, a is a well-defined marking. f is a well-defined function since n is injective. We have to show that f , m are Markings-morphisms and m is strict.

∀a
1 ∈ A we have: a(a1)
(∗)
= b(m(a1)) ≤ d(g(m(a1)) = d(n(f (a1))
n s=trict

c(f (a1)).
This means f ∈ Markings.
(∗)
∀a1 ∈ A we have: a(a1) = b(m(a1)).

This means m ∈ Markings and m is strict.
It remains to show the pullback property. Given Markings-morphisms h : (E, e) → (C, c), k : (E, e) → (B, b) with n ◦ h = g ◦ k, we have a unique induced morphism x in Sets with f ◦x = h and m◦x = k. We shall show that x ∈ Markings,
i.e. ∀e1 ∈ E : e(e1) ≤ a(x(e1)).
For e ∈ E we have e(e ) ≤ b(k(e )) = b(m(x(e ))) m s=trict a(x(e )).	 
It remains to show the weak VK property for Markings. We know that (Sets, M) is a weak adhesive HLR category for the class M of injective morphisms [2], hence pushouts in Sets along injective morphisms are van Kampen squares. But we have to give an explicit proof for the markings, because a square (1) in
Markings with m, n ∈ Mstrict, which is a pushout in Sets, is not necessarily pushout in Markings, since we may have d(g(b1)) > b(b1) for some b1 ∈ B\m(A).

Lemma 4.6 In Markings, pushouts along Mstrict-morphisms are weak van Kam- pen squares.
Proof. Given the following commutative cube (2) with m ∈ Mstrict and (f ∈ Mstrict or t, u, v ∈ Mstrict), where the bottom face is a pushout and the back faces are pullbacks, we have to show that the top face is a pushout if and only if the front faces are pullbacks.


”⇒” If the top face is a pushout then the front faces are pullbacks in Sets, since all squares are pushouts or pullbacks in Sets, respectively, where the weak VK property holds. For a pullback (1) with m, n ∈ Mstrict, the function a of A is completely determined by the fact that m ∈ Mstrict as shown in the proof of Lemma 4.5. Hence a diagram (1) in Markings with m, n ∈ Mstrict is a pullback
in Markings if and only if it is a pullback in Sets. This means, the front faces are
also pullbacks in Markings.
”⇐” If the front faces are pullbacks we know that the top face is a pushout in Sets. To show that it is also a pushout in Markings we have to verify the conditions (1) and (2) from the construction in Lemma 4.4.
For b' ∈ B'\m'(A') we have to show that d'(g'(b' )) = b'(b' ).
1	1	1
If f is strict then also g and g' are strict, since the bottom face is a pushout
and the right front face is a pullback, and Mstrict is preserved by both pushouts
and pullbacks. This means that b'(b' )= d'(g'(b' )).
1	1
Otherwise t and v are strict. Since the right back face is a pullback and b' ∈
B'\m'(A') we have t(b' ) ∈ B\m(A). With the bottom face being a pushout we have by (1) in Lemma 4.4

'	(1)	'
(∗) d(g(t(b1 ))) = b(t(b1)).


It follows that d'(g'(b' )) v s=trict	'  '
'	(∗)
'	t s=trict

b'(b' ).
1	d(v(g (b1))) = d(g(t(b1 )))
= b(t(b1))

For c' ∈ C' we have to show that d'(n'(c' )) = c'(c' ).
1	1	1
With m being strict also n and n' are strict, since the bottom face is a pushout
and the left front face is a pullback, and Mstrict is preserved by both pushouts
and pullbacks. This means that c'(c' )= d'(n'(c' )).
1	1

Theorem 4.7 The category (Markings, Mstrict) is a weak adhesive HLR category.

Proof. By Lemma 4.3, the morphism class Mstrict has the required properties. Moreover, we have pushouts and pullbacks along Mstrict-morphisms in Markings, as shown in Lemma 4.4 and Lemma 4.5, respectively. By Lemma 4.6, pushouts along strict morphisms are weak van Kampen squares. Hence all properties of weak adhesive HLR categories are fulfilled and (Markings, Mstrict) is a weak adhesive HLR category.	 

Remark 4.8 If we consider the full subcategory B of Markings consisting of objects (S, s) with s : S → {0, 1} only, this category can be shown to be a weak adhesive HLR category as well. With this category, we are able to describe the markings of elementary nets, where on each place at most one token is allowed.

From Nets to Systems
In this section we combine nets with markings and show that under certain condi- tions the category of the corresponding systems is also a weak adhesive HLR cat- egory. The term net means any variant of Petri nets, for example place/transition nets, AHL nets or generalized AHL nets.
The general idea is to define for a net N a marking set M (N ) dependent on N , where the actual marking is a function m : M (N ) → N. For place/transition nets this marking set is the set P of places, for AHL nets and generalized AHL nets this marking set is the set (A ⊗ P ). Then the category of the corresponding systems can be seen as a subcategory of a comma category of nets and markings, where the marking set is compatible with the net.
Definition 5.1 (System) Given a category Nets of nets, a system S = (N, m) is given by a net N ∈ Nets and a function m : M (N ) → N, where M : Nets → Sets is a functor assigning a marking set to each net N .
For systems S = (N, m) and S' = (N ', m'), a system morphism fS : S → S' is a net morphism fN : N → N ' such that M (fN ) : (M (N ), m) → (M (N '), m') is a Markings-morphism.
Systems and system morphisms form the category Systems.
Theorem 5.2 Given a weak adhesive HLR category (Nets, M') of nets with a marking set functor M : Nets → Sets that preserves pushouts and pullbacks along M'-morphisms, then the category (Systems, M) of systems over these nets is a weak adhesive HLR category, where M is the class of all morphisms fS = (fN ) with fN ∈ M' and M (fN ) ∈ Mstrict.
Proof. First we define the category C = ComCat(M, V, {1}) with V : Markings → Sets,V (T, t)= T, V (f )= f . We can apply Thm. 2.3.(v) using that M preserves pushouts along M' and V preserves pullbacks along Mstrict, which follows from the construction in the proof of Lemma 4.5. It follows that (C, MC ) with MC = (M' × Mstrict)|C is a weak adhesive HLR category.
Now we only consider objects (N, (T, t), op1) ∈ C where op1 : M (N ) → T is an identity, i.e. M (N )= T . This restriction leads to the full subcategory D of C. By construction, the category D is isomorphic to the category Systems:
For an object D = (N, (T, t), op1) ∈ D we have op1 : M (N ) → T is an identity, i.e. D = (N, (M (N ),t : M (N ) → N), idM (N )), which is a one-to-one correspondence to the system (N, t) ∈ Systems.
For a morphism f = (fN , fM ) : D → D' with D = (N, (T, t), op1) and D' =
(N ', (T ', t'), op1' ) we have D = (N, (M (N ),t : M (N ) → N), id	) and D' =
(N ', (M (N '), t' : M (N ') → N), idM (N ')), and by the definition of morphisms in a comma category idM(N') ◦ M (fN ) = V (fM ) ◦ idM(N). This means that M (fN ) = V (fM ), which corresponds to the morphism fS = (fN ) ∈ Systems, where M (fN ) is a Markings-morphism.
To apply Thm. 2.3.(i), we have to show that D has pushouts and pullbacks along

MD-morphisms with MD = MC |D that are preserved by the inclusion functor.
Given objects (Ni, (M (Ni), mi), op1 = idM (N )) for i = 0, 1, 2 and morphisms fS =
i	i
(fN , fM ) : (N0, (M (N0), m0), op1) → (N1, (M (N1), m1), op1) and gS = (gN , gM ) : 
0	1
(N0, (M (N0), m0), op1) → (N2, (M (N2), m2), op1) with fS ∈ MD we can construct
0	2
the pushout (1) of fN , gN in Nets with fN ∈ M'. Since M preserves pushouts along M'-morphisms, (2) is a pushout in Sets. By assumption, we have M (fN ) ∈ Mstrict. Now we can use the construction in the proof of Lemma 4.4 to construct a marking m3 : M (N3) → N leading to the pushout (3) in Markings. By the construction of
pushouts in comma categories, (N3, (M (N3), m3), op1 = idM(N )) is a pushout in C
3	3
and D.
Analogously, this can be done for pullbacks using the fact that M preserves pullbacks along M'-morphisms and the construction of pullbacks in Markings.
This means that we can apply Thm. 2.3.(i) and (Systems, M) =∼ (D, MD) is
a weak adhesive HLR category.	 
As stated in Cor. 3.6 and already shown in [10], the category PTSystems with the class M of all strict morphisms is a weak adhesive HLR category. This follows directly from Thm. 5.2, since (PTNets, M') is a weak adhesive HLR category and M : PTNets → Sets with M (P, T, pre, post) = P preserves pushouts and pullbacks along M'-morphisms because pushouts and pullbacks in PTNets along injective morphisms are constructed componentwise in Sets. Similarly, using Rem. 4.8, we obtain that elementary systems with the class M of all strict morphisms form a weak adhesive HLR category.
Now we can apply Thm. 5.2 to AHL systems and show that AHL systems, with a suitable choice of algebras and M-morphisms, are a weak adhesive HLR category.
Definition 5.3 Given an algebraic specification SP , an AHL system AS = (AN, m) is given by an AHL net AN = (P, T, pre, post, cond, type, A) over SP with A ∈ A(SP), where A(SP) is a subcategory of Algs(SP), and a marking m : (A ⊗ P ) → N.
An AHL system morphism fAS : AS → AS' is given by an AHL net morphism fAN = (fAC, fA) : AN → AN ' with fAC = (fP , fT ) and fA ∈ A(SP) that is marking-preserving, i.e. ∀(a, p) ∈ A ⊗ P : m(a, p) ≤ m'(fA(a), fP (p)).
AHL	systems	and	AHL	system	morphisms	form	the	category
AHLSystems(SP).
Theorem 5.4 If (AHLNets(SP), M') is a weak adhesive HLR category and the functor M : AHLNets(SP) → Sets, deﬁned by M (P, T, pre, post, cond, type, A)= A ⊗ P  and M (fN )  =  fA ⊗ fP  for fAN  =  (fAC, fA) and fAC  =

(fP , fT ), preserves pushouts and pullbacks along M'-morphisms, then the category (AHLSystems(SP), M) is a weak adhesive HLR category, where M is the class of all strict morphisms, i.e. fAS = (fAC, fA) : AS → AS' ∈ M if fA ∈ M1, fAC = (fP , fT ) is injective and fAS is marking-strict, i.e. ∀(a, p) ∈ A ⊗ P : m(a, p)= m'(fA(a), fP (p)).
Proof. By Cor. 3.10, the category (AHLNets(SP), M') with a suitable choice of algebras is a weak adhesive HLR category. Then we can apply Thm. 5.2 to obtain the result that (AHLSystems(SP), M) is a weak adhesive HLR category. 
Unfortunately, the condition that M has to preserve pushouts and pullbacks along M'-morphisms is very strict and up to now only two suitable choices for the category (AHLNets(SP), M') are known:
The category (AHLNets(SP), Miso) with the class Miso of isomorphisms. Given the pushout square (1) along an isomorphism fAN in AHLNets(SP),
also f '	is an isomorphism. It follows that (fA ⊗ fP ) and (f ' ⊗ f ' ) are isomor-
AN	A	P
phisms and (2) is a pushout in Sets. This can be done analogously for pull-
backs, therefore M preserves pushouts and pullbacks along Miso-morphisms.
Note, that not only the algebra homomorphism but also the net morphism has to be an isomorphism. This means that this morphism class is not useful for adhesive HLR systems, since only isomorphic productions would be allowed.
The category (AHLNets(SP, Afin), Minj) of algebraic high-level nets with a finite, fixed algebra A, with the class Minj of injective morphisms with identities on the algebra part.
Given the pushout square (1), we have to show that also (2) is a pushout.

For s ∈ S, define Ps = {p ∈ P | type(p)= s} and fs = f |Ps for a morphism f : P → P '. Then we have for an AHL net AN = (P, T, pre, post, cond, type, A) that M (AN )= (A ⊗ P )=  s∈S(As ⊗ Ps)=  s∈S( a∈As ({a}× Ps)).
Using the weak van Kampen property and the fact that (3) is a pushout,
also (4) is a pushout. For a ∈ As the square (4a) is isomorphic to (4) and thus also a pushout. Since coproducts of pushout squares are again pushouts, also

(2) =  s∈S( a∈As (4a)) is a pushout.

Analogously this can be done for pullbacks, since coproducts of pullback squares are again pullbacks in Sets.
Even in the case of algebras without operations and the class M' of injective morphisms with isomorphic data part, the marking set functor M does not preserve pushouts along M'-morphisms, as shown in Fig. 1 with f ∈ M', where all places are typed by nat. The square (1) is a pushout in AHLNets(SP), but the square
(2) as the result of applying M to (1) is no pushout in Sets. This is due to the fact that the product of two pushouts in Sets in general does not yield a pushout.

Fig. 1. Pushout along M'-morphism f that is not preserved by the marking set functor M

Analogously, we can show that generalized AHL systems form a weak adhesive HLR category, if the marking set functor M preserves pushouts and pullbacks along M'-morphisms.
Definition 5.5 A generalized AHL system GS = (GN, m) is given by a general- ized AHL net GN = (SP, P,T, pre, post, cond, type, A) with A ∈ A, where A is a subcategory of Algs, and a marking m : (A ⊗ P ) → N.
A generalized AHL system morphism fGS : GS → GS' is given by a generalized AHL net morphism fGN = (fGC, fGA): GN → GN ' with fGC = (fP , fT ) and fGA ∈ A that is marking-preserving, i.e. ∀(a, p) ∈ A ⊗ P : m(a, p) ≤ m'(fA(a), fP (p)).
Generalized AHL systems and generalized AHL system morphisms form the
category AHLSystems.
Theorem 5.6 If (AHLNets, M') is a weak adhesive HLR category and the functor
M : AHLNets → Sets with M (SP, P,T, pre, post, cond, type, A) = A ⊗ P and

M (fGN , fGA) = fGA ⊗ fP for fGN = (fGC, fGA) and fGC = (fP , fT ) preserves pushouts and pullbacks along M'-morphisms, then the category (AHLSystems, M) is a weak adhesive HLR category, where M is the class of all strict morphisms, i.e. fGS = (fGC, fGA): GS → GS' ∈ M if fGA ∈ M1, fGC = (fP , fT ) is strict injective and fGS is marking-strict, i.e. ∀(a, p) ∈ A ⊗ P : m(a, p)= m'(fA(a), fP (p)).
Proof. By Cor. 3.14, (AHLNets, M') with a suitable choice of algebras is a weak adhesive HLR category. Then we can apply Thm. 5.2 to obtain the result that (AHLSystems, M) is a weak adhesive HLR category.	 
Analogously to the case of AHLNets(SP), the conditions for M are very rere- strictive, so only two suitable choices for the category (AHLNets, M') are known up to now:
The category (AHLNets, Miso) with the class Miso of isomorphisms, which is, analogously to the case (AHLNets(SP), Miso), not useful for adhesive HLR systems.
The category (AHLNetsiso, Msinj) of algebraic high-level nets with mor- phisms that are isomorphisms on the algebra part, with the class Minj of strict injective morphisms.

Example for a Reconfigurable AHL System
In this section we present an example for a reconfigurable AHL system, i.e. an AHL system that can be transformed by rule applications.
Our goal is to model a small library system, where users may enter the reading hall if they have an access card and do not carry a bag. In the reading hall, they may read books if they have a library card. For leaving the reading hall they have to give back all books.
The specification SP with empty set of equations and the algebra A are given in Fig. 2. We define various items that users may carry and some books in the reading hall.

Fig. 2. Specification and algebra for the library example

A user outside the reading hall is modeled by the net in Fig. 3(a), where the tokens at the place u are the items she carries around, which can be used by firing the transition use. A user can also interact with its environment by receiving some items firing the transition get or by delivering some items firing the transition put. The reading hall is modeled by a place b as shown in Fig. 3(b) where the tokens at b are all the available books.


	
(a) User net	(b) Reading hall net
Fig. 3. Nets for the different parts of the library system

For a concrete example we construct the disjoint unions of the reading hall net and the user nets (for two different users), which is shown in Fig. 4.

Fig. 4. Start net for the library system with two users

The movement of the users is modeled by productions, where we use, in addition to Def. 2.4, productions with negative application conditions. A negative applica- tion condition forbids a certain structure in the net extending the match. Formally,

given a production p = (L ←l
K →r
R) it is an object N and a morphism n : L → N .

p,m	'
In this case, p can be applied to G via a match m : L → G if G =⇒ G is a direct
transformation and we do not find a morphism q : N → G such that q ◦ n = m.
The productions enter and leave in Fig. 5 handle the use of the reading hall, where all morphisms are inclusions given by the names of the elements. With enter, a user may enter the reading hall. In this case, she needs to carry an access card, modeled by the token accessCard on u, and is not allowed to carry a bag, which is modeled by a negative application condition. After the application of the production, if she has a library card she is able to take books by firing the new transition take and to read them by firing the transition read. She can no longer interact with her environment, so we delete the transitions put and get. If she


Fig. 5. Productions for entering and leaving the reading hall

Fig. 6. Library system after the application of the production enter and the firing of take

has given back all books, she may leave the reading hall by applying the inverse production leave. This restriction does not have to be modeled by a negative application condition, because due to the pushout construction the production is only applicable if there is no token at the place ub. In Fig. 6, the application of the

production enter to the right user in Fig. 4 followed by a firing step take is shown. Now this user may read Moby Dick. The production enter cannot be applied to the left user, because she does have a bag. But she might use the transition put to leave the bag and, afterwards, she may go to the reading hall.

Conclusion and Future Work
In this paper we have introduced the category of markings for Petri nets, which gives a general construction for the marking of a net. Using this category, we have extended different variants of Petri nets to systems, i.e. nets with markings. In par- ticular this works for place/transition systems, AHL systems and generalized AHL systems and we have shown that these systems are weak adhesive HLR categories
for a suitable choice of markings and M-morphisms. This means that we can apply the theory for graph transformations developed in [2] also to different kinds of net transformations based on AHL schemas, nets, and systems.
There are many different notions of Petri nets, AHL nets etc., which have been shown to be weak adhesive HLR categories. In Fig. 7, an overview of the available results for schemas, nets and systems is given.

Fig. 7. Requirements for schemas, nets and systems to be weak adhesive HLR categories

At the moment, the available data structure underlying the AHL nets is re- stricted to a few, but still interesting cases. More work is needed in the area of algebras, where the categories Algs(SP) of algebras over a certain specification SP and Algs of generalized algebras and homomorphisms should be verified to be weak adhesive HLR categories, likely under some restrictions on the specification or M-
morphisms. The category Algs is equivalent to a Grothendieck category (see [12])
indexed over the category Specs. Grothendieck categories have general pushouts and pullbacks, if so have the underlying categories, and they have free constructions, but they have not been shown to be weak adhesive HLR categories. A step towards this has been made in [5], where also some restrictions to the morphism class M
are discussed which could lead to a suitable weak adhesive HLR category.
In addition, it should be analyzed if there are other categorical constructions leading to Petri net systems that can be shown to be weak adhesive HLR categories, where the very strict conditions on the marking set functor M can be weakened.

References
Ehrig, H., Introduction to the Algebraic Theory of Graph Grammars (A Survey), in: V. Claus, H. Ehrig and G. Rozenberg, editors, Graph Grammars and their Application to Computer Science and Biology, LNCS 73 (1979), pp. 1–69.
Ehrig, H., K. Ehrig, U. Prange and G. Taentzer, “Fundamentals of Algebraic Graph Transformation,” EATCS Monographs, Springer, 2006.
Ehrig, H., A. Habel, H. Kreowski and F. Parisi-Presicce, Parallelism and Concurrency in High-Level Replacement Systems, Mathematical Structures in Computer Science 1 (1991), pp. 361–404.
Ehrig, H., A. Habel, J. Padberg and U. Prange, Adhesive High-Level Replacement Systems: A New Categorical Framework for Graph Transformation, Fundamenta Informaticae 74 (2006), pp. 1–29.
Ehrig, H., F. Orejas and U. Prange, Categorical Foundations of Distributed Graph Transformation, in:
A. Corradini, H. Ehrig, U. Montanari, L. Ribeiro and G. Rozenberg, editors, Graph Transformations. Proceedings of ICGT 2006, LNCS 4178 (2006), pp. 215–229.
Hoffmann, K., H. Ehrig and T. Mossakowski, High-Level Nets with Nets and Rules as Tokens, in:
G. Ciardo and P. Darondeau, editors, Applications and Theory of Petri Nets. Proceedings of ATPN 2005, LNCS 3536 (2005), pp. 268–288.
Lack, S. and P. Sobocin´ski, Adhesive and Quasiadhesive Categories, Theoretical Informatics and Applications 39 (2005), pp. 511–546.
Padberg, J., H. Ehrig and L. Ribeiro, Algebraic High-Level Net Transformation Systems, Mathematical Structures in Computer Science 5 (1995), pp. 217–256.
Prange, U., Algebraic High-Level Nets as Weak Adhesive HLR Categories, ECEASST 2 (2007), pp. 1– 13.
Prange, U., H. Ehrig, K. Hoffmann and J. Padberg, Transformations in Reconfigurable Place/Transition Systems, in: P. Degano, R. De Nicola and J. Meseguer, editors, Concurrency, Graphs and Models. Essays Dedicated to U. Montanari, LNCS 5065 (2008), pp. 96–113.
Sobocin´ski, P., “Deriving Process Congruences from Reaction Rules,” Ph.D. thesis, BRICS (2004).
Tarlecki, A., R. Burstall and J. Goguen, Some Fundamental Algebraic Tools for the Semantics of Computation: Part 3: Indexed Categories, Theoretical Computer Science 91 (1991), pp. 239–264.
