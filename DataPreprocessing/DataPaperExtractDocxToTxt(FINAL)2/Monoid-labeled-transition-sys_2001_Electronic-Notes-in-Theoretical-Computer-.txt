Electronic Notes in Theoretical Computer Science 44 No. 1 (2001)
URL: http://www.elsevier.nl/locate/entcs/volume44.html 20 pages


Monoid-labeled transition systems

H. Peter Gumm, Tobias Schro¨der
Fachbereich Mathematik und Informatik Philipps-Universit¨at Marburg
Marburg, Germany
{gumm,tschroed}@mathematik.uni-marburg.de


Abstract
Given a -complete (semi)lattice L, we consider L-labeled transition systems as coalgebras of a functor L(−), associating with a set X the set LX of all L-fuzzy sub- sets. We describe simulations and bisimulations of L-coalgebras to show that L(−) weakly preserves nonempty kernel pairs iff it weakly preserves nonempty pullbacks iff L is join infinitely distributive (JID).
Exchanging L for a commutative monoid M, we consider the functor M(−) which associates with a set X all finite multisets containing elements of X with multiplici- ties m ∈ M . The corresponding functor weakly preserves nonempty pullbacks along injectives iff 0 is the only invertible element of M, and it preserves nonempty kernel pairs iff M is refinable, in the sense that two sum representations of the same value, r1 + ... + rm = c1 + ... + cn, have a common refinement matrix (mi,j) whose k-th row sums to rk and whose l-th column sums to cl for any 1 ≤ k ≤ m and 1 ≤ l ≤ n.
Key words: Coalgebra, transition system, fuzzy transition, multiset, weak pullback preservation, bisimulation, refinable monoid, distributive lattice.

Introduction
It is well known that transition systems can be described as coalgebras of the covariant powerset functor P. The general theory of coalgebras automatically supplies the fundamental notions of homomorphism and bisimulation. The fact that the functor P is well behaved, i.e. that it preserves (generalized) weak pullbacks, guarantees a collection of useful properties. In particular, the relational product of bisimulations is a bisimulation, the largest bisim- ulation is an equivalence relation and kernels of homomorphisms are always bisimulations. The subclass of image-finite transition systems corresponds to coalgebras of the finite powerset functor Pω. This functor, in addition, is bounded, so a terminal Pω-coalgebra exists, providing semantics and a proof principle (coinduction) for image-finite transition systems.
◯c 2001 Published by Elsevier Science B. V. Open access under CC BY-NC-ND license.


Introducing labels does not complicate the situation. Given a set L of labels, an L-labeled transition system on a state set S is a ternary rela- tion T ⊆ S × L × S.  Again, the equivalent coalgebraic view as a map α : S → P(S)L, i.e. as a P(−)L-coalgebra, better captures the dynamic aspects of labeled transition systems. What has been said above for P-, resp. Pω-coalgebras carries over to P(−)L-, resp. Pω(−)L-coalgebras. In fact an L-labeled transition system is nothing but a collection of (plain) transition systems, one for each label.
The situation becomes more interesting, when the labels carry some alge- braic structure. This structure is relevant, when arc labels denote, for instance, flow capacities or durations.
In general, we shall assume the labels to define a commutative monoid, i.e. a commutative, associative operation with a neutral element 0. This allows us a coalgebraic interpretation of labeled transition systems as a map from states to graded sets of successor states. This view will be seen to provide an interesting intertwining of coalgebraic structure with algebraic properties of the monoid.
Another motivation for this work is the study of Set-functors. In previous work ([Gum98],[GSb],[GS00]) we have studied the coalgebraic significance of various preservation properties of Set-endofunctors. Here we construct such functors, that are parameterized by a commutative monoid, so we can custom build functors by selecting commutative monoids with appropriate algebraic properties.
In the first sections, we start with an arbitrary -complete semilattice L, and we consider L-multisets. A multiset S can be thought of as a set, each of whose elements s is contained in S with some multiplicity (probability, certainty) l ∈ L. There are plenty of natural choices for L, such as {0, 1}, N ∪{∞}, or the real interval [0, 1], giving rise to the standard notions of (plain old) set, bag (multiset), or fuzzy set.
The semilattice L gives rise to a functor L(−) which generalizes the powerset functor P for L = {0, 1}. Thus L(−)-coalgebras generalize transition systems to multiset transition systems and fuzzy transition systems.
We show that L(−) always preserves nonempty pullbacks along injective maps, and that it preserves arbitrary nonempty weak pullbacks just in case L is join inﬁnitely distributive, that is, finite meets distribute over infinite joins.
In semilattices, the possibility of defining infinite sums is closely tied to the idempotent law. In arbitrary commutative monoids, we can form infinite sums only in cases where all but finitely many summands are zero. This leads to a slightly different functor, M(−), for an arbitrary commutative monoid
M. We study it in the second half of this paper. This functor preserves nonempty pullbacks along injective maps iff the monoid is positive and it pre- serves nonempty weak pullbacks of arbitrary maps iff additionally the monoid is reﬁnable in a sense to be defined later.

Basic notions
Let R ⊆ A × B and S ⊆ B × C be binary relations. We denote by (R ; S) their composition or relational product :
(R ; S) := {(a, c) | ∃b ∈ B. (a, b) ∈ R, (b, c) ∈ S}.
With R− we denote the converse of R, i.e. R− := {(b, a) | (a, b) ∈ R}. We use “aRb” as a shorthand for “(a, b) ∈ R”.
If ϕ : A → B is a map then we denote by G(ϕ) its graph, that is
G(ϕ) := {(a, ϕ(a)) | a ∈ A}.
With these definitions we get: G(ψ ◦ ϕ) = G(ϕ); G(ψ).

F-coalgebras and homomorphisms
Let F : Set → Set be a functor from the category of sets to itself. A coalgebra of type F is a pair A = (A, α), consisting of a set A and a map α : A → F (A). A is called the carrier set and α is called the structure map of A.
If A = (A, α) and B = (B, β) are F -coalgebras, then a map ϕ : A → B is called a homomorphism, if
β ◦ ϕ = F (ϕ) ◦ α,
that is, if the following diagram commutes:
A	ϕ	 B 
α	β
J F (ϕ)	J 

F (A)
 F (B)

F -coalgebras and their homomorphisms form a category SetF . It is well known that all colimits in SetF exist, and they are formed just as in Set. In

map α :	i∈I Ai → F (  i∈I Ai) with
α ◦ ιAi = F (ιAi ) ◦ αi
for all i ∈ I, where each ιAi is the canonical embedding of Ai into the disjoint union	i∈I Ai.
Subcoalgebras
A subset U ⊆ A is called a subcoalgebra of A = (A, α), provided there exists a coalgebra structure ν : U → F (U ) so that the inclusion map ⊆A: U → A is
a homomorphism from U = (U, ν) to A.


One reads off the definition of homomorphism, that U is a subcoalgebra of A = (A, α) iff

∀u ∈ U. ∃v ∈ F (U ). α(u) = F (⊆A)(v).

U = ∅ is always a subcoalgebra. If U /= ∅, then the inclusion map ⊆A has a left inverse. Consequently, F (⊆A) has a left inverse too, in particular it is injective. Thus, if a structure map ν as above exists, it is unique. For that reason we use the term “subcoalgebra” interchangeably for the coalgebra U as well as for its carrier set U .

Bisimulations
A binary relation R ⊆ A × B is called a bisimulation between A and B if it is possible to define a coalgebra structure δ : R → F (R), so that the projection maps π1 : R → A and π2 : R → B are homomorphisms. This can be expressed by the following commutative diagram:


A ¸,π1
α
J 
R	π2	 B 
 δ	β
J	J 

F (A) ¸F (,π1) F (R) F (π2) F (B)

If R is a bisimulation between A and B, then its converse R− is a bisimula- tion between B and A. The union of a family of bisimulations is a bisimulation again, so there is always a largest bisimulation ∼A,B between coalgebras A and B.
If A = B, then we shall call R a bisimulation on A. The diagonal relation
∆A = {(a, a) | a ∈ A} is always a bisimulation, hence the largest bisimulation on A, denoted by ∼A, is always reflexive and symmetric. In general, though, it need not be transitive.
A map ϕ : A → B is a homomorphism between coalgebras A and B, iff its graph G(ϕ) is a bisimulation. If R is a coalgebra, and ϕ : R→A and ψ : R→C are homomorphisms, then {(ϕ(r), ψ(r)) | r ∈ R} = (G(ϕ)− ; G(ψ)) is a bisimulation between A and B. As a consequence, a bisimulation R between A and B gives rise to a bisimulation R˜ := {(ιA(a), ιB(b)) | (a, b) ∈ R} on their sum A + B.

The functor L(−)
Let L be a complete -semilattice. L can be made into a complete lattice by defining for any subset S:

  S =  {l ∈ L | ∀s ∈ S. l ≤ s}.


For any set A, let LA denote the set of all maps σ : A → L. Each such σ
can be thought of as the characteristic function of an L-multiset:

x ∈l σ ⇐⇒ σ(x) = l.

Given a map f : A → B, we define a map Lf : LA → LB by
Lf (σ)(b) :=  {σ(a) | f (a) = b}, then it is easy to check:
Lemma 3.1 L(−) is a (covariant) Set-endofunctor.
Proof. Given sets A, B, and C and maps f : A → B, g : B → C, we calculate for arbitrary σ : A → L, a ∈ A, and c ∈ C:
LidA (σ)(a)=	{σ(x) | idA(x) = a}
= σ(a)
= idLA (σ)(a).

(Lg ◦ Lf )(σ)(c)=	{Lf (σ)(b) | g(b) = c}
=	{	{σ(a) | f (a) = b}| g(b) = c}
=	{σ(a) | (g ◦ f )(a) = c}
= Lg◦f (σ)(c).
Obviously, when L is the two-element lattice {0, 1}, this functor is natu- rally isomorphic to the powerset functor P via η : L(−) → P, defined for any set X by
ηX(σ) := {x ∈ X | σ(x) = 1}.
It is also straightforward to check that each	-preserving map ϕ : L→ L'
induces a natural transformation between L(−) and L'(−).

L-Coalgebras.
According to the general definition of coalgebras, an L(−)-coalgebra is a pair (A, α) consisting of a set A and a map α : A → LA. Given two L(−)-coalgebras (A, α) and (B, β), a map ϕ : A → B is a homomorphism if Lϕ ◦ α = β ◦ ϕ, that is, if for all a ∈ A and b ∈ B we have

β(ϕ(a))(b) = Lϕ(α(a))(b) =   {α(a)(a') | a' ∈ A, ϕ(a') = b}.

In the sequel we shall speak of L-coalgebras rather than of L(−)-coalgebras. It is convenient to introduce an “arrow notation” familiar from transition


systems as a shorthand. We write


a−→l
a'	iff	α(a)(a') = l.


Obviously, the L-coalgebra structure α : A → LA may also be interpreted as an L-graded relation αˆ : A × A →L by setting αˆ(a, a') := α(a)(a').
When L is the two-element lattice then an L-coalgebra is just a Kripke- frame. In the general case, L provides a set of measures for indicating how “strong” a pair (a, a') should be in the L-graded relation αˆ, or, alternatively, how confident we might be that (a, a') is in αˆ. If L is the unit interval, then αˆ is just a fuzzy relation.

Subcoalgebras
The functor L(−) is not standard in the sense defined in [Mos99], that is

L(⊆A ) /= ⊆LA .
U
LU

Rather, we always have:

L⊆A (τ )(a) =  τ (a),	if a ∈ U
0,	otherwise.

From that one obtains straightforwardly:
Lemma 3.2 U ⊆ A is a subcoalgebra of A = (A, α) iff
∀u ∈ U, a ∈ A. ∀m /= 0. u−m→a =⇒ a ∈ U.

Proof.
U is a subcoalgebra of A = (A, α)
⊆A
⇐⇒ ∀u ∈ U. ∃τ : U → L. α(u) = L U (τ )
⇐⇒ ∀u ∈ U. ∀a ∈ (A − U ). α(u)(a) = 0 
⇐⇒ ∀u ∈ U, a ∈ A ∀m /= 0. u−m→a =⇒ a ∈ U.

For coalgebras of arbitrary type F it is known that subcoalgebras are always closed under finite intersections (see [GSa]). For the functor F = L(−), we even get from the above:
Corollary 3.3 The intersection of an arbitrary family (Ui)i∈I of subcoalgebras of an L-coalgebra A is again a subcoalgebra of A.

L-Simulations
Definition 3.4 We define a simulation between A and B as a relation S ⊆
A × B where for all (a, b) ∈ S and all a' ∈ A
a−m→a' =⇒  {l | ∃y ∈ B. b−→l  y, a'Sy}≥ m.

Thus, if a is simulated by b and if a' is an m-successor of a, then there must be sufficiently many li-successors bi of b, each one simulating a' and together yielding  i∈I li ≥ m.
directly from the definition:


Lemma 3.5 If A ~S
B and B ~T
C, then A ~ C. Thus the class of all L-

coalgebras with simulations as arrows forms a category.
L-Homomorphisms
Homomorphisms turn out to be maps between coalgebras which strengthen the graded relation and whose converse is a simulation, that is:
Lemma 3.6 A map ϕ : A → B between coalgebras A = (A, α) and B = (B, β) is a homomorphism if and only if the following two conditions are satisﬁed for all a, a' ∈ A, all b' ∈ B and for all m ∈ L:
a−m→a' =⇒ ϕ(a) m' ϕ(a') for some m' ≥ m	(1)
ϕ(a)−m→b' =⇒ m ≤  {l | ∃x ∈ A. a−→l  x, ϕ(x) = b'}.	(2)
Proof. The homomorphism condition requires that for every a ∈ A and every
b' ∈ B we have the equation
β(ϕ(a))(b') = Lϕ(α(a))(b'). Translating this, using the arrow–notation, we get
βˆ(ϕ(a), b') =  {l | ∃x ∈ A. a−→l  x, ϕ(x) = b'}.

The two homomorphism conditions are equivalent to the inequalities which are obtained by replacing “=” above by “≥” and “≤”. From the first homomor-
phism condition we obtain βˆ(ϕ(a), b') ≥ l whenever a−→l x and ϕ(x) = b', thus
β(ϕ(a))(b') ≥  {l | ∃x ∈ A. a−→l  x, ϕ(x) = b'}. From this inequality, in turn,
the right hand side, to obtain βˆ(ϕ(a), ϕ(a')) ≥ l whenever a−→l a'. The second
homomorphism condition is obviously equivalent with the inequality obtained from replacing “=” with “≤”.


Using the description of homomorphisms and of subcoalgebras, it is now straightforward to check:
Corollary 3.7 If ϕ : A→B is a homomorphism and V ≤ B is a subcoalgebra of B, then ϕ−[V ] is a subcoalgebra of A.
Observe that the first, resp. second, homomorphism condition just states that G(ϕ), resp. G(ϕ)−, is a simulation, thus we get:
Corollary 3.8 A map ϕ : A → B is a homomorphism between L-coalgebras A and B if and only if both G(ϕ) and G(ϕ)− are simulations.

L-Bisimulations
We have already remarked that a map between coalgebras A and B is a ho- momorphism iff its graph is a bisimulation. However, a relation R is not necessarily a bisimulation even if R and R− are simulations. To see the con- nections we have to characterize bisimulations:
Proposition 3.9 A relation R between coalgebras A = (A, α) and B = (B, β) is a bisimulation if and only if for all (a, b) ∈ R and all a' ∈ A, b' ∈ B we have:

a−m→a' =⇒  {m ∧ l | ∃y ∈ B. b−→l b−m→b' =⇒  {m ∧ l | ∃x ∈ A. a−→l
y, a'Ry} = m,	and	(3)
x, xRb'} = m.	(4)

Proof. Let R be a bisimulation, and (a, b) ∈ R, then there is some τ :=
δ(a, b) : R →L with
α(a)= Lπ1 (τ ),  and	(5)
β(b)= Lπ2 (τ ).	(6)
For a' ∈ A we have therefore by (5)
αˆ(a, a')= Lπ1 (τ )(a')
=	{τ (u) | π1(u) = a'}
=	{τ (a', y) | a'Ry}.
By (6) we have for every y with a'Ry: βˆ(b, y)= Lπ2 (τ )(y)
=	{τ (v) | π2(v) = y}
=	{τ (x, y) | xRy}
≥ τ (a', y).
Combining the above, we get


αˆ(a, a')=	{τ (a', y) | a'Ry}
=	{αˆ(a, a') ∧ τ (a', y) | a'Ry}
≤	{αˆ(a, a') ∧ βˆ(b, y) | a'Ry}
≤ αˆ(a, a').
Hence, αˆ(a, a') = {αˆ(a, a')∧βˆ(b, y) | a'Ry}, which is the first bisimulation condition. The second one is obtained symmetrically.
To show the converse, let the bisimulation conditions (3) and (4) be sat- isfied. We need to show that R is a bisimulation. Define a structure map δ : R → LR by
δ(a, b)(x, y) := αˆ(a, x) ∧ βˆ(b, y).
For an arbitrary a' ∈ A we have
Lπ1 (δ(a, b))(a')=	{δ(a, b)(u) | π1(u) = a}
=	{δ(a, b)(a', y) | a'Ry}
= αˆ(a, a')
= α(a)(a').
Hence Lπ1 (δ(a, b)) = α(a) = (α ◦ π1)(a, b), thus Lπ1 ◦ δ = α ◦ π1, and, analo- gously, Lπ2 ◦ δ = β ◦ π2. Therefore, R is a bisimulation.
Notice that lemma 3.6 could be inferred from the above, since for gen- eral coalgebras, homomorphisms are precisely those maps whose graph is a bisimulation. We also get the following corollary:
Corollary 3.10 If R is a bisimulation then both R and R− are simulations.
The role of distributivity
In the applications of coalgebras one often has type functors which satisfy an important technical property: They preserve weak pullbacks. This is to say that a (weak) pullback diagram is transformed into a weak pullback diagram. Many results in coalgebra theory (e.g. [Rut00]) hinge on this property. In [GSa] it was shown that a functor F preserves nonempty weak pullbacks if and only if bisimulations between F -coalgebras are closed under composition. Now consider corollary 3.10. If its converse is true then by lemma 3.5
bisimulations will be closed under composition, thus L(−) will preserve weak
pullbacks. In this section we shall show that this and related properties hinge on a certain distributivity condition on the lattice L.
Definition 4.1 [[Gr¨a98]] A lattice is called join inﬁnite distributive (in short JID), if it satisfies the law

x ∧  {xi | i ∈ I} =  {x ∧ xi | i ∈ I}.


If L is a complete semilattice, we shall say that L is JID iff this is the case for the lattice induced on L.
Whenever L is JID, the bisimilarity conditions for L-coalgebras simplify
to:
Lemma 4.2 If L is JID then a relation R ⊆ A× B is a bisimulation between coalgebras A and B if and only if

a−m→a' =⇒  {l | b−→l b−m→b' =⇒  {l | a−→l
y, a'Ry}≥ m,	and	(7)
x, xRb'}≥ m.	(8)

The following theorem, amongst other things, provides a converse to this lemma and to corollary 3.10:
Theorem 4.3 Let L be a	-semilattice, then the following are equivalent:
L is JID.
R ⊆ A × B is a bisimulation ⇐⇒ R and R− are simulations.
Bisimulations are closed under compositions.
L(−) preserves nonempty weak pullbacks.
L(−) weakly preserves nonempty kernel pairs.
The largest bisimulation ∼A on every L-coalgebra is transitive.
Proof. (i) → (ii) follows from lemma 4.2. (ii) → (iii) is a consequence of lemma 3.5. (iii) → (iv) is shown for arbitrary functors in [GS00]. (iv) →
(v) → (vi) can be found in [GS00], so we may concentrate on proving (vi) →
(i).
Let a family (li)i∈I and a further element m of L be given, it suffices to show
m ∧  li ≤  (m ∧ li),

since the reverse inclusion holds in any lattice. On the sets
A := {ai | i ∈ I}∪ {a, a'}
B := {bi | i ∈ I}∪ {b}
C := {c, c'}
define coalgebra structures α, β, and γ given in arrow-notation as follows:
a−→e a', where e := m ∧  l
i
a−l→i  a , for all i ∈ I
i
b−l→i  b , for all i ∈ I
i
c  li c'.
Using lemma 3.6 it is easy to see that ϕ : A → C, defined as ϕ(a) = c and
ϕ(a') = ϕ(ai) = c' for all i ∈ I, and ψ : B → C given by ψ(b) = c and


ψ(bi) = c' for all i ∈ I are homomorphisms. Consequently, G(ϕ) and G(ψ)−
are bisimulations.

 a,,	c	b,

  eee
e   eeee
,,,
,,


  ϕ	 

¸,ψ
eee
ee
,,,
,,

     
,s
'
ee li
ee
   e
lj ,,,
,,,zz
eeeeli
J	 ee  e
lj ,,,,
,,zz

a	ai	...	aj	c'	bi	...	bj
Consider now the sum of the three coalgebras A + B + C. We still have that G(ϕ) and G(ψ)− are bisimulations, in particular, they are contained in the largest bisimulation ∼=∼A+B+C. Thus a ∼ c and c ∼ b. By assumption, now a ∼ b.
Proposition 3.9 tells us that there is a subcollection (bj)j∈J⊆I with
e ≤  {e ∧ l | b lj  b }≤  (e ∧ l ).



Hence

m ∧  li = e ≤  (e ∧ li) =  (m ∧ li),


finishing the proof.
i∈I
i∈I
i∈I

The implication (i) → (iv) is due to S. Pfeiffer [Pfe99]. A finite lattice is distributive iff it does not contain one of the characteristic five-element nondistributive sublattices M3 or N5, see ([Gr¨a98]). By separately excluding these cases, she also obtained the converse (iv) → (i) in case that L is finite and distributive.
Observe that nonempty weak pullbacks along injective maps, resp. nonempty pullbacks of an arbitrary collection of injective maps, are always preserved, without assuming JID. In [GS00], these conditions have been shown to be equivalent to homomorphic preimages of subcoalgebras, resp. arbitrary in- tersection of subcoalgebras, being subcoalgebras again. Thus, these results follow from corollaries 3.7 and 3.3.
One might wonder, whether in general, simulations could not have been defined by just one clause of 3.9 so that condition (ii) would automatically be satisfied for arbitrary -semilattices L. Notice, however, that with such a definition we would not have been able to show that simulations are closed under composition.

Labeling with a commutative monoid
In the definition of the functor L(−) it is essential that L has arbitrary suprema,
i.e. that L is	-complete. When trying to replace L by an arbitrary commu- tative monoid M = (M, +, 0), we do not have infinite sums available anymore,


unless when almost all summands are 0. Hence, we must redefine the functor by only considering maps σ : X → M with ﬁnite support :
Definition 5.1 Let M = (M, +, 0) be a commutative monoid. Whenever X is a set and all but finitely many elements of a family (g(x))x∈X are 0, we denote its sum by  (g(x) | x ∈ X).
Given any set X and a map σ : X → M , we call
supp(σ) := {x ∈ X | σ(x) /= 0}
the support of σ. Let
MX := {σ : X → M | |supp(σ)| < ω}
be the set of all maps from X to M with finite support, and for any map

f : X → Y let Mf
be the map defined on any σ ∈ MX
by:

∀y ∈ Y. Mf (σ)(y) := Σ(σ(x) | x ∈ X, f (x) = y).

One easily checks that Mf (σ) is a map from Y to M with finite support, so using associativity and commutativity of +, one verifies as before:
Lemma 5.2 M(−) is a Set-endofunctor.
When M is the two-element Boolean algebra ({0, 1}, ∨, 0) then M(−) is

just the ﬁnite powerset functor Pω(−).
Coalgebras of type M(−), in the sequel called M

-coalgebras, may again

ω	ω
be viewed as graphs with arcs labeled by elements of M , so we continue using the arrow-notation as in the case of L-coalgebras. In particular, if (A, α) is an Mω-coalgebra, a, a' ∈ A and m ∈ M , we can choose between the equivalent notations

α(a)(a') = m,  or
αˆ(a, a') = m, or a−m→a'.

For Mω-coalgebras, the basic coalgebraic constructions can be easily de- scribed:
Lemma 5.3 Let A = (A, α) and B = (B, β) be Mω-coalgebras, then
U ⊆ A is a subcoalgebra of A, iff for all u ∈ U, and all a ∈ A:
u−m→a, m /= 0 =⇒ a ∈ U.
ϕ : A → B is a homomorphism iff for all a ∈ A, b' ∈ B:
ϕ(a)−m→b' ⇐⇒ m = Σ(m' | ∃a' ∈ A. a m' a', ϕ(a') = b').
Corollary 5.4 The intersection of an arbitrary family (U )i∈I of subcoalgebras of an Mω-coalgebra A is again a subcoalgebra of A.

If ϕ : A → B is a homomorphism and U ⊆ B a subcoalgebra of B, then ϕ−[U ] need not be a subcoalgebra of A. This stands in contrast to the situation for lattice labeled coalgebras (corollary 3.7). Thus, the functor M(−) does in general not preserve nonempty pullbacks along injective maps ([GS00]). In the next section, we shall study algebraic conditions on the monoid M which are responsible for such properties of the functor.
We conclude this section with a characterization of bisimulations R ⊆
A × B between Mω-coalgebras A and B. For this we consider the elements
of MA as vectors with |A| many components and the elements of MR as
|A|× |B|-matrices with entries from M . From the definition of bisimulation in section 2.3, we obtain:
Lemma 5.5 Let A = (A, α) and B = (B, β) be Mω-coalgebras. A relation R ⊆ A × B is a bisimulation iff for every (a, b) ∈ R there exists an |A|× |B|- matrix (mx,y) with entries from M such that:
all but ﬁnitely many mx,y are 0,
mx,y /= 0 implies (x, y) ∈ R,
α(a) is the vector of all row-sums of (mx,y), i.e.
∀x ∈ A.αˆ(a, x) = Σ(mx,y | y ∈ B),
β(b) is the vector of all column-sums of (mx,y), i.e.
∀y ∈ B.βˆ(b, y) = Σ(mx,y | x ∈ A).

Positive monoids.
Any commutative semigroup can be turned into a commutative monoid by simply adjoining a new element 0. The obtained monoid is rather special though, it can be internally characterized by the fact that no nonzero element is invertible:
Definition 5.6 A monoid element m ∈ M is called invertible if there exists some m− ∈ M with m + m− = 0. A monoid M = (M, +, 0) is called positive if 0 is the only invertible element.
If a commutative monoid is not positive, we can obtain one by factoring out the invertible elements, or by deleting all invertible ones, except for 0, for it is easy to check:
Lemma 5.7 The invertible elements of a commutative monoid form a group
I(M). Factoring M by the induced congruence relation yields the largest positive factor of M. At the same time, any commutative monoid is the union of the subgroup I(M) of invertible elements with a positive submonoid M+.

Example 5.8 The following monoids are positive:
(N, +, 0)
(N \ {0}, ·, 1)
(L, ∨, 0) for any (semi)lattice with 0.

Reﬁnable monoids.
We shall need to consider a further monoid condition which we shall call reﬁnable. For this, let us consider an m × n-matrix (ai,j) of monoid ele- mentsΣ. Consider their row-sums ri =  1≤j≤m ai,j, and their column sums
r1 + ... + rn = c1 + ... + cm. Refinability is just the inverse condition, that is:
Definition 5.9 Given m, n ∈ N, a monoid M is called (m, n)-reﬁnable, if for any r1,..., rm, c1,..., cn ∈ M with r1 + ... + rm = c1 + ... + cn one can find an m × n-matrix (ai,j) of elements of M , whose row sums are r1,..., rm and whose column sums are c1,..., cn.

Obviously, when m = 1 or n = 1, the condition is vacuous. When m > 1 then M is (m, 0)-refinable iff it is positive. For the remaining cases we prove:
Proposition 5.10 For any m, n > 1 we have: A commutative monoid is
(m, n)-reﬁnable, iff it is (2, 2)-reﬁnable.
Proof. In an (m, n+1)-refinement of r1+.. .+rm = c1+.. .+cn+0, we can add corresponding elements from the last two rows to obtain an (m, n)-refinement of r1 + ... + rm = c1 + ... + cn, so one direction is clear.
The other direction is proved by an easy induction over the number of columns, followed by a similar induction over the number of rows. As a hint, we show how to get from (2, 2) to (3, 2):
Given r1 + r2 + r3 = c1 + c2, use the (2, 2) refinement property to find a 2 × 2-matrix (ai,j) with column sums c1, c2 and row sums r1, (r2 + r3). Now a2,1 + a2,2 = r2 + r3, so there is another 2 × 2 matrix with row sums r2, r3 and column sums a2,1, a2,1:


and


obviously now, the following matrix solves the original problem:


As a consequence of this proposition, we may simply call a commutative monoid reﬁnable if it is (2, 2)-refinable. Refinability does not imply positivity, since nontrivial abelian groups, for instance, are refinable, but not positive.
For the next section, we shall need the following observation, referring to infinite matrices:
Lemma 5.11 Suppose that M is reﬁnable. Given X, Y nonempty sets, σ ∈
X and τ ∈ MY with Σ(σ(x) | x ∈ X)Σ= Σ(τ (y) | y ∈ Y ). There exists an
sums  (mx,y | x ∈ X) = τ (y), where all but ﬁnitely many mx,y are 0.
Proposition 5.10 makes it easy to check that the first two instances of ex- ample 5.8 are refinable. In fact, any commutative monoid which is cancellative and which satisfies

∀c, r ∈ M.∃x ∈ M. c = x + r or r = x + c

is easily seen to be refinable. This also covers the case of (N, +, 0).
In the case of (N \ {0}, ·, 1), refinability is a consequence of the fact that every element has a unique prime factor decomposition.
Refinability does not carry over to submonoids. Consider, for instance, the submonoid (N \ {0, 2}, ·, 1) of the previous example, and the refinement problem 5 · 6 = 3 · 10. Any refinement would require the prime factor 2, which is unavailable.
In the case of a lattice L, we obtain a familiar property:
Lemma 5.12 If L is a lattice with smallest element 0, then (L, ∨, 0) is reﬁn- able if and only if L is distributive.
Proof. Given a distributive lattice L and a, b, c, d ∈ L with a∨b = c∨d, then we have a refinement
Conversely, if L is not distributive, then one of the following lattices, known


as N5, resp. M3, must be a sublattice of L (see e.g. [Gr¨a98]):


p ¸¸¸¸¸
c

    
a 
p ,,
,,,
,
c

N5 =	b ,,,
,,,,

,,, a
M3 =
,,,,
,,,

q ,,,	q 
In both cases, a ∨ b = b ∨ c. Suppose we had a refinement

with x, y, u, v ∈ L. From the table, it follows that u ≤ b and u ≤ c, so u ≤ b ∧ c = q ≤ a. Also, y ≤ a, hence u ∨ y = c ≤ a. But c /≤ a, both in M3 and in N5.


Weak pullback preservation
We now study conditions under which the functor M(−)

weakly preserves

nonempty kernel pairs, pullbacks along injectives, or arbitrary pullbacks.
A functor F is said to (weakly) preserve pullbacks along injective maps, provided for any f : X → Z and g : Y → Z with g injective, a (weak) pullback of f with g is transformed by F into a weak pullback of F (f ) with F (g). In [GS00], we have shown that a Set-endofunctor F weakly preserves nonempty pullbacks along injective maps if and only the preimage ϕ−[V ] of any F -subcoalgebra V ≤ B under a homomorphism ϕ : A → B is again a subcoalgebra of A.
For L-coalgebras, this condition is always satisfied according to corollary
We shall see, however, that this is not necessarily the case for Mω- coalgebras. In fact we shall algebraically characterize those monoids M for which M(−) preserves weak pullbacks along injective maps.
Finally, we consider preservation of arbitrary weak pullbacks.
Theorem 5.13 Let M = (M, +, 0) be a commutative monoid.
M(−) (weakly) preserves nonempty pullbacks along injective maps iff M
is positive.
M(−) weakly preserves nonempty kernel pairs iff M is reﬁnable.
M(−) weakly preserves nonempty pullbacks iff M is positive and reﬁnable.
Proof. (i): Assume that M is positive, and let ϕ : A → B be a homomor- phism of M-coalgebras and V a subcoalgebra of B. We need to show that


ϕ−1[V ] is a subcoalgebra of A. Given a ∈ ϕ−1[V ], a' ∈/ ϕ−1[V ] and a−m→a', we need to show that m = 0. We know that ϕ(a) ∈ V and ϕ(a') ∈/ V , so by part
(i) of lemma 5.3 we conclude ϕ(a)−→0 ϕ(a'). Part (ii) of the same lemma then
yields  (n | a−n→x, ϕ(x) = ϕ(a')) = 0. Positivity forces each summand to be 0, in particular m = 0.
To prove the converse, let m1, m2 ∈ M be given with m1 + m2 = 0. Consider the coalgebra A, given by a point p and two transitions to points q1 and q2, labeled with m1 and m2. Let B consist of two points r and s with no transitions (all transitions labeled with 0). We get a homomorphism ϕ with ϕ(p) = r and ϕ(q1) = ϕ(q2) = s. Now {r} is a subcoalgebra of B, and the assumption forces ϕ−1{r} = {p} to be a subcoalgebra of A, but this implies m1 = m2 = 0.


  p ,,,	r

m1 
q  j
,,m2
,vz
ϕ 

0	= B
J 

1	q2	s



A slight modification of this construction also gives us the backward di- rection of (ii): Assume that F weakly preserves nonempty kernel pairs, then kernels of homomorphisms are bisimulations. Suppose m1 + m2 = s1 + s2 in
M. We take a copy A' of A as above, but we label the arcs of A' with s1 and
s2. If B' is obtained from B by changing the edge label to m1 + m2 = s1 + s2, there is an obvious homomorphism ϕ : A + A' → B'. Its kernel must be a bisimulation, so lemma 5.5, provides us with a refinement of m1 +m2 = s1 +s2.
We combine the ’if’-directions of (ii) and (iii): Assume that M is refinable.
Given homomorphisms ϕ : A→ C, and ψ : B→ C, we need to show that


pb(ϕ, ψ) := {(a, b) | ϕ(a) = ψ(b)}


is a bisimulation between A and B.
Let (a, b) ∈ pb(ϕ, ψ) be given. We shall define an |A|× |B|-matrix (mx,y) with entries from M , satisfying the conditions of lemma 5.5.
rx
For any c ∈ ϕ[A] ∩ ψ[B], put X := ϕ−1({c}) and rx := αˆ(a, x), i.e. a−→x,
for any x ∈ X . Similarly, Y := ψ−1({c}) and cy = βˆ(b, y) for every y ∈ Y .
With lemma 5.11 we obtain an |X|× |Y | matrix (mc ) with row sums (rx)x∈X
and column sums (cy)y∈Y . Observe that we can achieve that

for all but finitely many c is (mc
) the 0-matrix

all but finitely many entries in each (mc
) are 0.

The final |A|× |B|-matrix (mx,y) is obtained by putting all (mc
) together



and filling up with zeroes:








mx,y :=







c x,y




if ϕ(x) = c = ψ(y),

0	otherwise.



By construction, mx,y /= 0 implies (x, y) ∈ pb(ϕ, ψ). Moreover, all but

finitely many entries of (m
x,y
) are zero. Suppose now that a−→r
a'. We need

to show that the a'-th row sum is r, i.e.	(m	| b ∈ B) = r.
Let c := ϕ(a'). If ψ−1({c}) /= ∅ then Σ(ma',b | b ∈ B) = Σ(mc'
| b ∈

B) = r. If ψ−1({c}) = ∅ (this case cannot happen in (ii)), we shall invoke
positivity to show r = 0. Specifically, for s with ϕ(a)−→s c we have
Σ(m | a−m→a', ϕ(a') = c) = s = Σ(m | b−m→b', ψ(b') = c) = 0.

Hence r + u = 0 for some u ∈ M , whence r = 0.
A more elegant way to see (iii) is to directly conclude it from (i) and (ii), by invoking the following lemma from the second author’s thesis:
Lemma 5.14 [Sch01] A Set-endofunctor weakly preserves pullbacks iff it weakly preserves kernel pairs and pullbacks along injective maps.
Discussion
One motivation for this study was to provide a repository of examples of Set- endofunctors with particular combinations of preservation properties. This we achieve by parameterizing a certain class of functors with algebraic structures and translating the functorial properties into corresponding algebraic laws. For instance, theorem 5.13 can be used to obtain an example of a functor weakly preserving nonempty kernel pairs, but not weakly preserving nonempty pullbacks: Simply choose for M any nontrivial abelian group.
Of course, L-coalgebras and M(−)-coalgebras as L-, resp. M-labeled tran-
sition systems are of independent interest. L-valued sets and relations are considered by Goguen in [Gog67]. In the book [FS90], Freyd and Scedrov consider the following operations on “L-valued relations” R : A × B →L and S : B × C → L:
(R ◦ S)(a, c) :=  {R(a, b) ∧ S(b, c) | b ∈ B}.

When L = {0, 1}, this agrees with the familiar composition of relations. The


authors remark that this operation is associative iff L is join infinitely dis- tributive (JID), also called a locale in [Bor94].
L. Moss, in [Mos99], considers the following subfunctor of R(−):
Q(X) := {f : X → R | supp(f ) finite,	f (x) = 1}.
x∈X

Coalgebras of this functor are stochastic transition systems([Mos99],[dVR99]). Moss invokes the “Row/Column-theorem” for R+, which is to say that R is (m, n)-refinable for each m, n > 1, to show that Q weakly preserves pullbacks. (He attributes the proof of the Row/Column theorem to Saley Aliyari).
We have borrowed the term reﬁnable from a classical line of algebraic investigation, asking for the existence of unique product decompositions of finite algebras. If A1 × ... × Am ∼= B1 × ... × Bn are two representations of the same finite algebra as a product of indecomposables, one would like to conclude m = n and Bi ∼= Aτ(i), for some permutation τ .
It is easy to come up with examples of finite algebras that do not have unique decompositions. In such cases it may still be possible to prove a re- ﬁnement property : Given that A1 ×... ×Am ∼= B1 ×... ×Bn, then each factor
can be further decomposed into a product of smaller algebras Qi,j, until one has the same collection of factors Qi,j on the left and on the right side.
J.D.H. Smith has reminded us of a result of B. Jo´nsson and A. Tarski [JT47] which states that a class of algebras, amongst whose operations are a binary operation + and a constant 0, which is neutral with respect to + and idempotent for all fundamental operations, has the (m, n)-refinement property. This means that the class of all finite Jo´nsson-Tarski algebras, with the monoid structure given by the direct product (×) and with {0} as neutral element, is a refinable monoid.
J´onsson and Tarski needed the operations + and 0 to represent direct products as “inner products”. Without some such assumptions, refinement
is not possible in general, for refinement implies cancellability: A × B ∼=
A×C	=⇒	B ∼= C. When A has a 1-element subalgebra, cancellability
holds, according to L. Lova´sz ([Lov67]), but otherwise, one needs to replace “isomorphy” by the weaker notion of “isotopy”, see [Gum77]. A refinement theorem up to isotopy for algebras in congruence modular varieties has been proved in [GH79].

References
[Bor94] F. Borceux, Handbook of categorical algebra 1: basic category theory, Cambridge University Press, 1994.
[dVR99] E.P. de Vink and J.J.M.M. Rutten, Bisimulation for probabilistic transition systems: a coalgebraic approach, Theoretical Computer Science (1999), no. 211, 271–293.


[FS90] P. Freyd and A. Scedrov, Categories, allegories, Elsevier, 1990.
[GH79] H.P. Gumm and C. Herrmann, Algebras in modular varieties: Baer refinements, cancellation and isotopy, Houston Journal of Mathematics 5 (1979), no. 4, 503–523.
[Gog67] J.A. Goguen, L-fuzzy sets, Journal of Mathematical Analysis and Applications (1967), no. 18, 145–174.
[Gra¨98] G. Gra¨tzer, General lattice theory, Birkha¨user Verlag, 1998.
[GSa] H.P. Gumm and T. Schro¨der, Coalgebras of bounded type, Submitted. [GSb] H.P. Gumm and T. Schro¨der, Products of coalgebras, Algebra Universalis,
to appear.
[GS00] H.P. Gumm and T. Schro¨der, Coalgebraic structure from weak limit preserving functors, CMCS (2000), no. 33, 113–133.
[Gum77] H.P. Gumm, A cancellation theorem for finite algebras, Coll. Math. Soc.
J´anos Bolyai (1977), 341–344.
[Gum98] H.P. Gumm, Functors for coalgebras, Algebra Universalis, to appear, 1998. [JT47] B. J´onsson and A. Tarski, Direct decompositions of finite algebraic systems,
Notre Dame Mathematical Lectures (1947), no. 5.
[Lov67] L. Lova´sz, Operations with structures, Acta. Math. Acad. Sci. Hungar. 18
(1967), 321–328.
[Mos99] L.S. Moss, Coalgebraic logic, Annals of Pure and Applied Logic 96 (1999), 277–317.
[Pfe99] S. Pfeiffer, Funktoren fu¨r Coalgebren, Master Thesis, Universit¨at Marburg, 1999.
[Rut00] J.J.M.M. Rutten, Universal coalgebra: a theory of systems, Theoretical Computer Science (2000), no. 249, 3–80.
[Sch01] T. Schro¨der, Coalgebren und Funktoren, PhD-Thesis, Philipps-Universit¨at Marburg, 2001.
