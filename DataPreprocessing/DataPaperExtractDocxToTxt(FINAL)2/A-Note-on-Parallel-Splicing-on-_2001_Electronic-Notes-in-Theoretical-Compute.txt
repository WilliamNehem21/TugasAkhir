Electronic Notes in Theoretical Computer Science 46 (2001)
URL: http://www.elsevier.nl/locate/entcs/volume46.html 14 pages


A Note on Parallel Splicing on Images

P. Helen Chandra 1, K. G. Subramanian 2, and D. G. Thomas
Department of Mathematics, Madras Christian College, Tambaram, Chennai (formerly Madras) 600 059, INDIA
D. L. Van
b Hanoi Institute of Mathematics, P.O.Box 631 Bo Ho, 10000 Hanoi, Vietnam


Abstract
The concept of splicing on images which is done in parallel is introduced. This is an extension of the operation of splicing on strings extensively studied in the context of DNA computing. Various properties of splicing on images are examined.


Introduction
L-systems which were introduced in the seventies to model biological devel- opment initiated the use of parallel rewriting of strings and enriched both formal language theory and life sciences with major developments [4, 7]. Splic- ing systems are another model recently introduced by Head [2] on biological considerations. These systems are intended to model certain recombinant behavior of DNA molecules and are of current interest and study [3].
On the other hand, in syntactic approaches to generation and recognition of images or pictures considered as digitized arrays, several two-dimensional grammars have been proposed and studied [6]. Extending the L-system type rewriting to arrays, a generative model was proposed in [8]. In [1], an elegant generalization of the concept of local and recognizable string languages to two- dimensional picture languages has been done. Recently, Krithivasan etal [5] extended the concept of splicingto arrays and defined array splicingsystems.
In this paper, a new method of applying the splicing operation on images of rectangular arrays is introduced. Splicing rules that involve 2 × 1 or 1 × 2 dominoes are considered. Two arrays are column spliced or row spliced by us- ing the domino splicing rules in parallel. The resulting model called H array

1 Email: chandrajac@yahoo.com
2 Email: kgsmcc@kmronline.com
◯c 2001 Published by Elsevier Science B. V. Open access under CC BY-NC-ND license.


splicing system which is simple to handle is compared with other generative mechanisms of picture languages. Some closure results under geometric oper- ations and language theoretic operations are considered. The study initiated in this paper might prove useful to analyze better the structure of images.


Basic Definitions
Let Σ be a finite alphabet. Σ∗ is the set of all words over Σ includingthe empty word λ. An image or a picture over Σ is a rectangular array of elements of Σ. The set of all images is denoted by Σ∗∗. An image or a picture of size m × n is an array of the form
a11 a12 a13 ··· a1n a21 a22 a23 ··· a2n
··· ··· ··· 
··· ··· ··· 
am1 am2 am3 ··· amn

or in short [aij]m×n. A picture language or a two-dimensional language over Σ is a subset of Σ∗∗.




Let A =
a11 ··· a1p
··· 
am1 ··· amp

,	B  =
b11 ··· b1q
··· 
bn1 ··· bnq


The column concatenation AΦB of A and B is defined only when m = n
and is given by



AΦB =
a11 ··· a1p b11 ··· b1q
···	· ·· 
···	· ·· 
am1 ··· amp bn1 ··· bnq


Similarly, the row concatenation AΘB of A and B is defined only when

p = q and is given by






AΘB =
a11 ··· a1p
··· 
··· am1 ··· amp b11 ··· b1q
··· 
··· 
bn1 ··· bnq

If L1, L2 are two picture languages over an alphabet Σ, the column con- catenation L1ΦL2 of L1 and L2 is defined by

L1ΦL2 = {AΦB|A ∈ L1 and B ∈ L2}.

The row concatenation L1ΘL2 of L1 and L2 is defined by
L1ΘL2 = {AΘB|A ∈ L1 and B ∈ L2}.

We recall the notions of local and recognizable picture languages [1]. Given a picture A of size (m, n), we denote by Bh,k(A), for h ≤ m, k ≤ n, the set of all blocks (or sub-pictures) of A of size (h, k). We call a square picture of size (2, 2) as a tile. Let Γ be a finite alphabet. A two-dimensional language L ⊆ Γ∗∗ is local if there exists a finite set θ of tiles over the alphabet Γ ∪ {#}
such that L = {A ∈ Γ∗∗|B2,2(Aˆ) ⊆ θ} where Aˆ is a picture of size (m+2,n+2)
obtained by surrounding A with a special boundary symbol # ∈/ Γ.

Example 2.1 The picture language M consistingof arrays A (Fig. 1a) of all sizes describing token L of 1's (interpreting 0's as blank) (Fig. 1b) is a local language.


The correspondingset



 # 1, 0 #, # #, # #, 1 0, 0 0
θ =  # 1 0 # 1  1  0 # 1 0 0 0
# 1, 0 #, # #, 1 #, 1 0, 0 0
1 0 0 0
 1 1, 1  1








A tiling system (TS) is a 4-tuple T = (Σ.Γ, θ, π), where Σ and Γ are two finite alphabets, θ is finite set of tiles over the alphabet Γ ∪ {#} and π : Γ → Σ is a projection. The tiling system T defines a language L over the alphabet Σ as follows: L = π(L') where L' = L(θ) is the local language over Γ corresponding to the set of tiles θ. We write L = L(T ). We say that a language L ⊆ Σ∗∗ is recognizable by tiling systems (or tiling recognizable) if there exists a tiling system T = (Σ, Γ, θ, π) such that L = L(T ). We denote by L(TS) the family of all two-dimensional languages recognizable by tiling system. In other words L ∈ L(TS) if it is a projection of some local language.
Different systems for generating pictures using grammars have been studied in the literature [1]. We recall here models that consist of two sets of rewriting rules: horizontal and vertical rules, respectively. These models operate by first generating a (horizontal) string σ using the horizontal rules; then generating a rectangular picture from the top row σ by applyingin parallel vertical rules. These grammars actually formalize the parallel generation of two-dimensional languages.
A two-dimensional right-linear grammar (2RLG) is defined by a 7-tuple G = (Vh, Vv, ΣI, Σ, S, Rh, Rv), where Vh is a finite set of horizontal variables; Vv is a finite set of vertical variables; ΣI ⊆ Vv is a finite set of intermediates; Σ is a finite set of terminals; S ∈ Vh is a starting symbol; Rh is a finite set of horizontal rules of the form S1 → AS2 or S1 → A, where S1, S2 ∈ Vh and A ∈ ΣI; Rv is a finite set of vertical rules of the form W → aW' or W → a, where W, W' ∈ Vv and a ∈ Σ.
Example 2.2
Let G = (Vh, Vv, ΣI, Σ, S, Rh, Rv) be a grammar, where :
Vh = {S, T}; Vv = {A, B, C, D}; ΣI = {A, B};Σ = {0, 1};
Rh = {S → AT ; T → BS; T → B};
Rv = {A → 1C; C → 0A; C → 0; B → 0D; D → 1B; D → 1.}
In the first phase, G generates the string language H(G) = {AB}+. In the second phase, startingfrom strings of H(G) considered as top rows of pictures,

by application of the vertical rules in Rv, we obtain the arrays of the picture language L generated by G, which is the set of “chessboard” pictures of even side-length; i.e., pictures of the following form:

represented by
1 0 1 0 1 0 1 0 1 0 
0 1 0 1 0 1 0 1 0 1 
1 0 1 0 1 0 1 0 1 0 
0 1 0 1 0 1 0 1 0 1 
1 0 1 0 1 0 1 0 1 0 
0 1 0 1 0 1 0 1 0 1 
with 1 standingfor black and 0 for white.
We denote by L(2RLG), the family of picture languages generated by two- dimensional right linear grammars.
The array splicingsystem introduced in [5], is a generalization of the splic- ing system on strings originally considered by Head [2]. We refer to [5] for details of the array splicing systems. We informally describe the idea. Four types of splicingare considered in [5]. The idea here is that the arrays X and Y involved in splicing are “split” into sub arrays suitably, ‘crossings’, which are sub arrays of X and Y are required to be the same for splicing to take place. ‘Type-i prefixes’ are exchanged due to splicing.

H array Splicing Systems
We now introduce the main notion of H array SplicingSystems.
Definition 3.1 Let V be an alphabet. #, $ are two special symbols, not in


V. A domino over V is of the form
or a b , a,b ∈ V.

A domino column splicingrule over V is of the form r = α1# α2 $ α3 # α4


where each αi =
for some a, b ∈ V	or αi =
where λ is the empty word.

A domino row splicing rule over V is of the form r = β1# β2 $ β3 # β4
where each βi =	for some a, b ∈ V or βi = λ λ .
Given two arrays X and Y of sizes m × p and m × q respectively


a11 ··· a1,j a1,j+1 ··· a1p a21 ··· a2,j  a2,j+1 ··· a2p
X =
···	· ·· 
am1 ··· am,j am,j+1 ··· amp




b11 ··· b1,k b1,k+1 ··· b1q b21 ··· b2,k  b2,k+1 ··· b2q
Y =
···  ··· 
bm1 ··· bm,k bm,k+1 ··· bmq

We write (X, Y ) | Φ Z if there exist column splicingrules r1, r2, r3, ··· , rm−1
not all different such that



ri =
#
$	#



for all i, (1 ≤ i ≤ m − 1) and for some j, k(1 ≤ j ≤ p) and (1 ≤ k ≤ q) and


a11 ··· ai,j b1,k+1 ··· b1q a21 ··· a2,j  b2,k+1 ··· b2q
Z  =
···	··· 
am1 ··· am,j bm,k+1 ··· bmq


In particular if any of the symbols aij is λ then for all i, (1 ≤ i ≤ m), aij = λ. Likewise for ai,j+1, bik, bi,k+1(1 ≤ i ≤ m). We now say that Z is obtained from X and Y by domino column splicingin parallel.
We can similarly define row splicing operation of two arrays U and V of

sizes p × n and q × n usingrow splicingrules to yield an array W.


a11	a12	a1n
···	· ··	··· 
ai,1	ai,2	··· ai,n
U =
ai+1,1 ai+1,2 ··· ai+1,n
···	· ··	··· 
ap1	ap2	apn
b11	b12	b1n
···	· ··	··· 
bk,1	bk,2	··· bk,n
V  =
bk+1,1 bk+1,2 ··· bk+1,n
···	· ··	··· 
bq1	bq2	bqn


We write (U, V ) | Θ W if there exist row splicingrules r1, r2, r3, ··· rn−1 not all different such that


ri =
#
$	#

for all j, (1 ≤ j ≤ n − 1) and for some i, k(1 ≤ i ≤ p) and (1 ≤ k ≤ q) and



W =
bk+1,1 bk+1,2 ··· bk+1,n
···	· ··	··· 
bq1	bq2	bqn
We now say that W is obtained from U and V by domino row splicing in parallel.
Definition 3.2 We define an H array scheme and an H array splicingsystem. An H array scheme is a triplet Γ = (V, Rc, Rr) where V is an alphabet, Rc = a finite set of domino column splicingrules, and Rr = a finite set of domino row splicingrules.
For a given H array scheme Γ = (V, Rc, Rr) and a language L ⊆ V ∗∗, we define


Γ(L)= 
 Z ∈ V ∗∗|(X, Y )| Φ Z or (X, Y )| Θ Z for some X, Y ∈ L,
	pi ∈ Rc and qj ∈ Rr(1 ≤ i ≤ m − 1), (1 ≤ j ≤ n − 1)

In other words, Γ(L) consists of arrays obtained by column or row splicing any two arrays of L usingthe array column or row splicingrules.
Iteratively we define

Γ0(L)= L
Γi+1(L)= Γi(L)   Γ(Γi(L)),i ≥ 0
Γ∗(L)=  Γi(L).
i≥0
An H array splicingsystem is defined by S = (Γ, I) where Γ = (V, Rc, Rr) and I is a finite subset of V ∗∗. The language of S is defined by L(S)= Γ∗(I) and we call it a splicing array language and denote the class of such languages by FHA.
We illustrate with an example.
Example 3.3 Let V = {a, b} a b 
I =
b a

Rc = p



1

#
b
$	#
a


p2 :

#

$
#	a  


Rr =

 q1 :

#
b	
$	#	b a

q2 :
#
$
#	,

On column splicingin parallel using p2, the arrays a b  a b yield
 a b  λ	λ  a b  | Φ	 a b a b 

We have shown the empty column λ to indicate the place where splicing
is done. Likewise, row splicingin parallel using q1, q2, gives

a b a b 
 b a b a λ λ λ λ 
 λ λ λ λ  
, a b a b	|
b a b a
a b a b b a b a a b a b b a b a

L is the language consisting of all “chessboards” with even side-length [1].
a b a b a b b a b a b a a b a b a b b a b a b a
Theorem 3.4 The classes LOC of local array languages and FHA of splicing array languages are incomparable but not disjoint.

Proof. The picture language M consistingof all m×n arrays (m ≥ 2,n ≥ 2) describingtoken L of 1’s is in LOC. A member of M is shown in Fig. 1a. Now we give an H array splicing system S = (V, Rc, Rr, I) to describe M.
Let V = {0, 1}

Rc = p1


p

:	#

:	#

$	#
$	#	




Rr =

and
I = 

q1 :	#	$
q2 :	#	$
1 0 
1 1 
#
#	,

The picture language L of all images (Fig. 2) over V = {a} with 3 columns is known to be not in LOC. But it is obtained by an H array splicing system where
I = a	a	a



and Rc = ϕ.
Rr =
#
$	#

The picture language of square images in which diagonal positions carry symbol 1 but the remaining positions carry symbol 0 (Fig. 3) is in LOC [1]. But it is not in FHA, since it is clear from the definition of row and column splicingthat pictures with only square size cannot be generated.

Remark 3.5 The class FHA intersects L(TS), since LOC ⊆ L(TS).
Theorem 3.6 The class FHA intersects L(2RLG)
Proof. The result follows on noting that the picture language of “chess- boards” with even side-length is generated by a FHA, and is generated by a 2RLG[1].	✷


Theorem 3.7 The class FHA intersects with the class of null-context splicing array languages of [5].
Proof. Let Grid < X, Y, m,n > represent an image G of size < m, n > where
m, n are odd positive integers m, n ≥ 3, and G is given by
G[i, j]=  X if i is odd or j is odd
 Y  otherwise
where 1 ≤ i ≤ m, 1 ≤ j ≤ n. G is said to be a Grid defined over < X, Y > of size < m, n > . GRIDS < X, Y > represent the set of all Grids over < X, Y > . A member of GRIDS< X, . > is shown in Fig. 4.
X X X X X X X 
X . X . X . X X X X X X X X 
X . X . X . X X X X X X X X 
X . X . X . X X X X X X X X 
Fig4. Grid < X, ., 7, 7 >
It is known that GRIDS < X, ., m,n > is a null-context splicing array language[5].We give an H array splicing system S = (V, Rc, Rr, I), generating it.

Let V = {X,.}
 X X X 

I = Grid < X, ., 3, 3 >=  X .	X 



 X X X 

Rc = p1


p
:

:
#

#
$

$
#





Rr =
q1 :	#	$
q2 :	#	$
#
#	,	✷

Remark 3.8 We now consider row-column combination of two string lan-

guages[1]. Let V be a finite alphabet and let S1 and S2 ⊆ V ∗ be two string languages over V.The row-column combination of S1 and S2 is a picture lan- guage L = S1 ⊕ S2 ⊆ V ∗∗ such that a picture p ∈ V ∗∗ belongs to L if and only if the strings corresponding to the rows and columns of p belongto S1 and S2 respectively.
We give an example of a picture language L in FHA which is a row-column combination picture language. Here L consists of all pictures over V = {0, 1} whose first and last column consist only of 1’s. In fact L = ({1}S1{1}) ⊕ V ∗ where S1 ⊆ V ∗.

Let V = {0, 1} I =  1 x1 1
 1 x2 1
1
 where xi

= 0 or 1(i = 1, 2).

Rc = p1 :

Rr =  q1 :
q2 :
q3 :
#	$
1
# #
#
#

$
$
$
and
# #
#	,


Now we examine certain closure results:
Theorem 3.9 The class FHA is closed under reflections on the base and right leg and rotations by 90◦, 180◦ and 270◦.
Proof. We first prove that FHA is closed under reflections.
Let S = (Γ, I) where Γ = (V, Rc, Rr) and I is a finite subset of V ∗∗ be a splicingsystem, with rules in Rc of the form


p =
#
$	#



and in Rr of the form
q =

#

$	#

describing a picture language L.
The picture language consisting of images which are reflections of arrays of L on the base can be obtained by an H array splicing system consisting of rules of the form
#	$	#

correspondingto p and rules of the form



correspondingto q.
#
$	#

Similarly the reflections of arrays of L on the right leg can be obtained by an H array splicingsystem with modified rules

#	$	#


and

#

$	#

respectively correspondingto p and q.
We next prove that FHA is closed under rotations by 90◦, 180◦ and 270◦.
We mention only the modified rules of Rc and Rr

#	$	#


and

for rotation by 90◦;

#


#

$	#


$	#



and

for rotation by 180◦;

#


#

$	#


$	#



and

#

$	#

for rotation by 270◦.	✷
Theorem 3.10 The class FHA is not closed under union and concatenation.
Proof. Let L1 be a language consisting of arrays with 3 rows and any number of columns with left border made of a’s, right border of b’s and inner part of x’s. A member of L1 is shown in fig. 5.


a x x x x x b a x x x x x b a x x x x x b 
Fig. 5.
Similarly, let L2 be another language of arrays as in L1 but left border made of c’s, right border of d’s. It is clear that a member of L1 ∪ L2 will have left and right borders only of a’s and b’s respectively or only of c’s and d’s respectively. Any column splicing rule required to generate L1 ∪ L2 will have to increase the inner columns of x’s. But on column splicing, two initial arrays of the form

a x b 
a x b	, a x b 
c x d c x d c x d 

of an H array splicingsystem would yield arrays with left and right border of
a's and d's or c's and b's. These are not elements of L1 ∪ L2.
Likewise, column splicingof two initial arrays of the form
a x b c x d a x b c x d a x b c x d 
of an H array splicing system that might generate L1ΦL2 would yield arrays that are not in L1ΦL2. An analogous argument applies to row concatenation.✷

Conclusion
In this paper, an attempt has been made to extend in a simple but effective manner, the splicing operation to images of rectangular arrays. Although this new system intersects with the array splicingsystem of [5], it remains open to find out where exactly this class stands.
Acknowledgement
The authors K.G. Subramanian and D.G. Thomas would like to thank Hanoi Institure of Mathematics, Vietnam for extendingsupport for their visit to the institute duringOct. - Nov., 1999. The authors are grateful to Prof. D.L.Van for his collaboration.

References
Giammarresi, D. and A. Restivo, Two-dimensional Languages, In Hand- book of Formal Languages, eds. G.Rozenberg and A.Salomaa, Springer Verlag 3 (1997), 215-265.
Head, T., Formal Language Theory and DNA: An Analysis of the Gener- ative Capacity of Specific Recombinant Behaviours, Bull. Math. Biology, 49 (1987), 735-759.
Head, T., Gh. Pˇaun and D. Pixton, Language Theory and Molecular Genetics: Generative Mechanisms suggested by DNA Recombination, In Handbook of Formal Languages, eds. G. Rozenberg and A. Salomaa, Springer Verlag 2 (1997), 295-358.
Herman, G. T. and G. Rozenberg, “Developmental Systems and Lan- guages”, North-Holland, Amsterdam (1975).
Krithivasan, K., V. T. Chakaravarthy and R. Rama, Array Splicing Sys- tems, In Computing with Bio-molecules: Theory and Experiments, ed. Gh. Pˇaun, Springer Verlag (1998).
Rosenfeld, A. and R. Siromoney, Picture Languages - A Survey, Lan- guages Des. 1 (1993).
Rozenberg, G. and A. Salomaa, The Mathematical Theory of L−Systems, Academic Press, New York (1980).
Siromoney, R. and G. Siromoney, Extended Controlled Table L−Arrays, Information and Control 35 (1977), 119 -138.
