

Electronic Notes in Theoretical Computer Science 264 (2010) 125–140
www.elsevier.com/locate/entcs
From Coalgebraic to Monoidal Traces
Bart Jacobs
Institute for Computing and Information Sciences, Radboud University of Nijmegen
P.O. Box 9010, 6500 GL Nijmegen, The Netherlands Email: bart@ cs. ru. nl URL: www. cs. ru. nl/ ~ bart

Abstract
The main result of this paper shows how coalgebraic traces, in suitable Kleisli categories, give rise to traced monoidal structure in those Kleisli categories, with finite coproducts as monoidal structure. At the heart of the matter lie partially additive monads inducing partially additive structure in their Kleisli categories. By applying the standard “Int” construction one obtains compact closed categories for “bidirectional monadic computation”.
Keywords: Coalgebra, execution trace, monoidal trace, iteration, Kleisli category


Introduction
The notion of trace occurs prominently in the (classical) categorical work on traced monoidal categories [13]. It generalises the trace operator in linear algebra and captures fixed points for operations with feedback. Recently, also a coalgebraic approach to traces emerged [12], where traces are maps in Kleisli categories in- duced by monads that capture the observable behaviour in for instance sequences of (monadic) computations. Such traces are often described by removing states from execution traces. Naturally one wonders if there is a connection between these monoidal and coalgebraic traces. This paper addresses this question and shows how coalgebraic traces give rise to monoidal traces. The word ‘trace’ thus different meanings in this context, but hopefully without generating too much confusion.
The way this result is obtained is via the work of Haghverdi [9], where it is shown that partially additive categories (see also [5]) are traced monoidal, via what is called the execution (or trace) formula. Thus the paper proceeds by proving that under certain assumptions on a monad T , firstly the Kleisli category of T is such a partially additive category, and secondly the execution formula coincides with the

٨ ENTCS Proceedings of Coalgebraic Methods in Computer Science (CMCS 2010).

1571-0661 © 2010 Elsevier B.V. Open access under CC BY-NC-ND license.
doi:10.1016/j.entcs.2010.07.017

coalgebraic trace. The technical core of the paper involves the identification of the notion of a “partially additive monad”, see Definition 4.3, and the proof that the Kleisli categories of such monads are partially additive.
We describe the organisation of this paper and at the same time the flow of developments. The paper starts with an elementary initial algebra in Section 2 that gives rise to a final coalgebra in suitably order-enriched Kleisli categories in Section 3, and thus to coalgebraic trace semantics, following [12]. For this particular coalgebra it also yields an iteration operation as in [8,6]. Section 4 then shows that what we call partially additive monads in such a setting additionally yields partially additive structure M on Kleisli homsets, as studied earlier in [5]. They enable us to obtain the main result in Section 5, namely that Kleisli categories of suitable monads, with finite coproducts, are traced monoidal, via [9]. The “Int” construction from [13] can then be applied and yields in Section 6 new categories Bd(T ) of “bidirectional monadic computations”, with connections to game semantics and quantum computation. This forms a topic of its own that will be further investigated elsewhere. Throughout the paper there is a series of running examples, consisting of powerset, lift, distribution and quantale monads. The latter eventually yields examples of strongly compact closed categories.

A basic initial algebra
Assume C is a category with countable coproducts, written as	X with co- projections κi: Xi → i∈I Xi. In order to further fix the notation, we shall write []X:0 → X or simply []: 0 → X (without subscript) for the unique arrow (the empty cotuple) out of an initial object 0. The two coprojections for a binary coproduct

are written as X
−→ X + Y
κ
←− Y
, with cotupling of f : X → Z and g: Y → Z

denoted by [f, g]: X + Y → Z. Hence on morphisms, h + k = [κl ◦ h, κr ◦ k].
This C with its finite coproducts (0, +) yields a symmetric monoidal category (SMC). In general, for an SMC (A,I, ⊗) we write the familiar isomorphisms as:
X ⊗ (Y ⊗ Z)  α  (X ⊗ Y ) ⊗ Z	X ⊗ I   ρ  X  X ⊗ Y   γ  Y ⊗ X
∼=	∼=	∼=
A copower I · X = i∈I X comes with coprojections κi: X → I · X and cotupling [fi]i∈I: I · X → Y for an I-indexed collection of maps fi: X → Y .
Proposition 2.1 Let C have countable coproducts, as above. For a ﬁxed object Y ∈ C, the functor Y + (−): C → C has the copower N · Y = n∈N Y as initial algebra, with structure map:


defn
0
Y + N · Y	∼=
n+1]n∈N

 N · Y

Proof For an arbitrary algebra [a, b]: Y + X → X we define f : N · Y → X as
f = [bn ◦ a]n∈N. It forms the unique algebra homomorphism from ξ to [a, b].	 
The copower object N · Y may be understood in the standard way (see [16]) as

the colimit of repeated application of the functor Y +(−) to the initial object 0 ∈ C, as in:

	[]		  Y + []		Y + (Y + [])
0	 1 · Y	 2 · Y
· Y	 · · · 

	 3 	
We write 0 · Y = 0 and (n + 1) · Y = Y + n · Y .  The resulting colimit cone
λn: n · Y → N · Y is then defined as:
λ0 = []: 0 −→ N · Y	and	λn+1 = [κn, λn]: Y + n · Y −→ N · Y.
The “twist” in this definition of λn is needed to ensure that the “oldest” element in n · Y is put at the first position in N · Y . Indeed, in this way we get λn+1 ◦ κr = λn for the chain maps κr: Yn → Yn+1.

A final coalgebra in a Kleisli category: trace seman- tics
We now assume that our category C (with coproducts) carries a monad T : C → C, with unit η and multiplication μ. We shall write Kl(T ) for the resulting Kleisli category, with forgetful functor Kl(T ) → C and left adjoint J: C → Kl(T ). Trivially, Kl(T ) inherits coproducts from C. They behave like in C on objects, but have slightly different coprojections and coproducts of maps. In order to disambiguate them we shall write a dot for operations in a Kleisli category, as in:


g ⊙ f = μ ◦ Tg ◦ f
κ˙ l = J(κl) = η ◦ κl
h+˙ k = [T (κl) ◦ h, T (κr) ◦ k],	so that	J(a + b) = J(a) +˙



J(b).


This dot-notation is meant to prevent confusion. We shall use it with prudence and shall write for instance identity maps in Kleisli categories simply as idX and not as id˙X = ηX. The (obvious) identities g ⊙ J(f ) = g ◦ f and J(g) ⊙ f = T (g) ◦ f are often used.
For an object Y ∈ C we thus also get a functor Y + (−): Kl(T ) → Kl(T ). Its initial algebra is the copower N · Y , by Proposition 2.1, but in Kl(T ). Its final coalgebra will be of more interest here.
In [12] a general framework is developed for generic trace semantics, which works for coalgebras of the form X → TFX, where T is a monad and F an endofunctor. The main result in [12] says that, under suitable order-theoretic assumptions, the initial algebra in C yields a final coalgebra in Kl(T ). Here we shall only be interested in the special case where the functor F is of the form Y + (−).
Proposition 3.1 (From [12]) Let T be a monad on a category C with coproducts. Assume that the Kleisli category Kl(T ) is dcpo-enriched, that (Kleisli) homsets have bottom elements ⊥ which are left strict (i.e. satisfy ⊥ ⊙ f = ⊥) and that cotupling is monotone (i.e. [−, −] preserves the order in both coordinates).

The initial algebra ξ: Y +N · Y
—=→ N · Y in C from Proposition 2.1 then yields a

ﬁnal coalgebra J(ξ−1): N·Y —=→ T
(Y +N·Y ) of the functor Y +(−): Kl(T ) → Kl(T ).

Concretely, this means that for every coalgebra c: X → T (Y + X) there is a unique map tr(c): X → T (N · Y ) forming a unique coalgebra homomorphism in the Kleisli category Kl(T ) as in:
id +˙ tr(c)


Y +,X,_ _ _ _ _ _ Y + N,·,Y

c
tr(c)
∼= J(ξ−1)

X _ _ _ _ _ _ _ _ N · Y
Intuitively, this trace map tr(c) sends an element x ∈ X to the “set” of those (n, y) ∈ N · Y for which c reaches y ∈ Y from x in n cycles through X, see the examples below.
We shall write c# = ∇ ⊙ tr(c): X → Y in Kl(T ) for the “iterate” of c, like in [8,5] 1 , where ∇ = [id]n∈N: N · Y → Y is the codiagonal in Kl(T ). It yields an operator between Kleisli homsets of the form:
(−)#	 
Kl(T )(X, Y + X)	Kl(T )(X, Y )

Clearly, such an iterate c# does not keep track of the number of rounds that are made to reach a result in Y —like tr(c) does.
Here we omit the proof and refer to [12] for details but we shall explicitly describe the definition of the trace map tr(c) so that we can use it later on. It uses the fact that the initial object 0 ∈ C is final in Kleisli categories as in the proposition, with
⊥: X → 0 in Kl(T ) as unique map (see also Lemma 4.1 (1) below). This allows us to define a sequence of maps cn: X → n · Y in Kl(T ) as:



	c0 = ⊥ : X −→ 0 = 0 · Y

 

Then we can define the trace map as join:

​
tr(c) =  n∈N
J(λn) ⊙ cn

in the Kleisli homset of maps X → N · Y , with λn as defined in (2).
Example 3.2 We shall consider what the above result amounts to for our four main examples for the monad T , namely P, D, L and Q(−) on Sets.
The Kleisli category Kl(P) of the powerset monad P: Sets → Sets is the category of sets with relations as arrows between them. Homsets are ordered by pointwise inclusion, and form complete lattices. Commutation of diagram (3) means that for a coalgebra c: X → P(Y + X) the resulting trace map tr(c): X → P(N · Y ) satisfies:
(n, y) ∈ tr(c)(x0) ⇔ ∃x1,..., xn ∈ X. x1 ∈ c(x0) ∧ ... ∧ xn−1 ∈ c(xn) ∧ y ∈ c(xn)
⇔ ∃x1,..., xn ∈ X.	i<n xi+1 ∈ c(xi) ∧ y ∈ c(xn)

1 In [8,5] the notation c† is used, instead of c#, but we prefer to reserve the dagger † for involutions, see Lemma 5.4.

where we have left out the coprojections κl, κr for simplicity.
For the lift monad L = 1 + (−) we write ⊥∈ 1+ X for the bottom element
⊥∈ 1 and up(x) ∈ 1+ X for an element x ∈ X. These sets 1 + X are “flat” dcpos. For c: X → 1+ (Y + X) we then get a trace map tr(c): X → 1+ N · Y with:
tr(c)(x0) = up(n, y) ⇔ ∃x1,..., xn ∈ X.	i<n c(xi) = up(xi+1) ∧ c(xn) = up(y)
We shall write D for the (sub)distribution monad on Sets given by:

D(X) = {ϕ: X → [0, 1] |	x∈X ϕ(x) ≤ 1}.
Notice that we do not require that such ϕ ∈ D(X) have finite support (i.e. have finitely many elements x ∈ X that are not mapped to 0). The sets D(X) are dcpos with pointwise order and bottom element ⊥ = λx. 0. The Kleisli maps X → D(Y ) can then also be ordered, pointwise.
For a coalgebra c: X → D(Y + X) we obtain a trace map tr(c): X → D(N · Y ) as in diagram (3), given explicitly by the following probability formula.

tr(c)(x0)(n, y) =	Σ
=	Σ
c(x0)(x1) · ... · c(xn−1)(xn) · c(xn)(y)

  c(xi)(xi+1) · c(xn)(y)

x1,...,xn∈X i<n
Let Q be a quantale, i.e. a complete lattice with a monoid structure (1, ·) where multiplication · preserves suprema in both arguments (see [14]). The mapping X '→ QX is then a monad on Sets with unit and multiplication given by:
	η	 X	Q(QX ) 	μ	 X

X

x	 λx '.
Q
  1 if x' = x


Φ	 λx .
Q

Φ(ϕ) · ϕ(x)

⊥ otherwise
ϕ∈QX


A function f : X → Y yields Qf : QX → QY by ϕ '→ λy.	x∈f −1(y) ϕ(x). The powerset monad P from (1) is a special case for Q = 2.
For a coalgebra c: X → QY +X diagram (3) now yields a trace map tr(c): X →
QN·Y that formally resembles the previous one:
tr(c)(x0)(n, xn+1) =		  c(xi)(xi+1)
x1,...,xn∈X i≤n

We collect some basic results about coalgebraic traces tr(c) and iterates c#.
Lemma 3.3 In the situation of the previous proposition:
Uniformity: if f is a homomorphism of coalgebras c → d in Kl(T ),
tr(c) = tr(d) ◦ f	and so	c# = d# ◦ f.

Naturality in Y : for g: Y → T (V ),


tr((g +˙
id) ⊙ c) = N · g ⊙ tr(c)	and	((g +˙
id) ⊙ c)# = g ⊙ c#.

Dinaturality in X: for f : U → T (X),


tr(c ⊙ f ) = tr((id +˙
f ) ⊙ c) ◦ f	and	(c ⊙ f )# = ((id +˙
f ) ⊙ c)# ⊙ f.


Proof Everything follows from (the uniqueness part of) finality. For instance the second point involves the diagram:

V + X  id +˙ tr(c) V + N · Y  id +˙ N · g  V + N · V

,,
g +˙ id
,,	,,
g +˙ id

Y + X  id +˙ tr(c) Y + N · Y	∼=
,,	,,
c	∼=
	tr(c)			N · g	
X	 N · Y	˛ N · V

tr((g +˙
id) ⊙ c)


The diagram on the right commutes by definition of N · g.	 

Additive structure on Kleisli homsets
We start this section by some preparatory observations about the structure in- duced by order on Kleisli homsets, making coproducts behave a bit like products (i.e. biproducts). It will lead to a description of additive structure (certain sums) in such homsets, which we shall write with a separate symbol M in order to prevent confusion with the sum f + g = [κl ◦ f, κr ◦ g] induced by coproducts +. The main contribution of this section lies in the notion of partially additive monad, see Definition 4.2, and in the result that the Kleisli categories of such monads form partially additive categories.
The first point of the next lemma has already been used, but will be repeated here for completeness.
Lemma 4.1 Assume C is a category with countable coproducts. Let T : C → C be a monad whose Kleisli homsets Kl(T )(X, Y ) = C(X, T (Y )) are partially ordered.
If each Kleisli homset has a bottom element ⊥: X → T (Y ) which is left strict (i.e. satisﬁes ⊥ ⊙ f = ⊥), then 0 is a ﬁnal object in Kl(T ). Since 0 is obviously initial in Kl(T ), it becomes a zero object (or “nullary” biproduct).
If ⊥ is “bi-strict”, i.e. is preserved by both pre- and post-composition in Kl(T ), then there are natural “projection” maps pj: i∈I Xi → T (Xj) satisfying:
pj ⊙ κ˙ j = id	and	pj ⊙ κ˙ m = ⊥	for j /= m.

In the binary case we shall write pl, pr, just like for coprojections κl, κr.
Proof (1) There is only ⊥: X → 0 in Kl(T ) because each f : X → 0 satisfies:
f = f ⊙ id0 = f ⊙ ⊥ = ⊥, by left strictness.
(2) One takes pj = [pi,j]i∈I:  i∈I Xi → T (Xj) where pj,j = ηXj and pi,j = ⊥ for i /= j. Then clearly pj ⊙ κ˙ j = pj ◦ κj = pj,j = η, which is the identity in Kl(T ), and pj ⊙ κ˙ m = ⊥ for j /= m. Naturality follows from (right) strictness.	 
For the formulation of the following notion it is convenient to assume that our category C has set-indexed products. The definition can be given without such prod- ucts, using “jointly monic families”. But that only makes it harder to understand the matter.
Definition 4.2 Assume projections pi as in the previous lemma, for a monad T on a category C with countable coproducts and products. By bc, for ‘bicartesian’, we denote the following map.




bc =  T

(  i∈I
⟨ pb ⟩i∈I
Xi)	i


  i∈I

T (Xi

)	where

b	μ ◦ T

(pi).

The monad T is called partially additive if these bc’s form cartesian natural trans- formations with monic components. This means that all naturality squares:


T ( i
X ) T (  i fi) T ( 
Yi)

J	J 
bc	bc

J 
i T (Xi)
  i T (fi)    J 


are pullbacks in C, for collections of maps fi: Xi → Yi in C.
The monad T may be called additive if these bc’s are isomorphisms. Such mon- ads are investigated further in [7]. The next definition of sums on Kleisli homsets is based on [5].
Definition 4.3 Let T be a partially additive monad on C, as in the previous defi- nition. For countably many fi: X → Y in Kl(T ) write Mi∈I fi = ∇I ⊙ b: X → Y in Kl(T ) if there is a “bound” map b: X → T (I · Y ) = T (   Y ) with p ⊙ b = f .
This bound property can be expressed as: bc ◦ b = ⟨fi⟩i∈I: X →  i∈I T (Y ) = 
T (Y )I. By the mono requirement on bc there is at most one such bound b.
We may observe that certain joins always exist: for a map f : X → T (Y + Z),
one has f = (κ˙ l ⊙ pl ⊙ f ) M (κ˙ r ⊙ pr ⊙ f ), via the bound (κ˙ l +˙ κ˙ r) ⊙ f : X →
T ((Y + Z)+ (Y + Z)).
Before further investigation of this sum M we check what it means in the exam- ples.
Example 4.4 We shall consider the powerset monad as special case of the quantale monad Q(−), namely for Q = 2. For convenience, we consider the binary sum M only.

For the lift monad L, recall that Kleisli homsets are flat orders, in which very few joins (or sums) exist. The projections Yl + Yr → 1 + Yi are given by pi(w) = up(y) iff w = κi(y), for i ∈ {l, r}. For b: X → 1+ (Y + Y ) one has:



(pi
⊙ b)(x) =	up(y) if b(x) = up(κiy)
⊥	otherwise.


Hence b is completely determined by these pi ⊙ b, so that projections are jointly monic—and bc from (6) is monic. The pullback property for bc is left to the reader.
Now if fi: X → 1+ Y are given, and we have a bound b: X → 1+ (Y + Y ) with
pi ⊙ b = fi, then we know:
if fl(x) = up(y), then (pl ⊙ b)(x) = up(y) so that b(x) = up(κly) and thus (pr ⊙ b)(x) = ⊥, so that fr(x) = ⊥.
if fr(x) = up(y), then similarly fl(x) = ⊥.
The existence of this bound b thus guarantees that both fl(x) /= ⊥ and fr(x) /= ⊥ does not happen. Hence their join exists, namely the non-bottom value, if any. This value is given by ∇ ⊙ b.
The Kleisli category Kl(Ð) of the subdistribution monad Ð inherits its point- wise order from the unit interval [0, 1]. This interval has joins, but it turns out that M describes the partially defined + on [0, 1]. The projections Yl + Yr → Ð(Yi) are given by pi(w)(y) = if w = κiy then 1 else 0. Thus for b: X → Ð(Y + Y ) we have (pi ⊙ b)(x)(y) =  w∈У +У pi(w)(y) · b(x)(w) = b(x)(κiy). And bc: Ð(Yl + Yr) → Ð(Yl) × Ð(Yr) is given by bc(ϕ) = ⟨ϕ ◦ κl,ϕ ◦ κr⟩. It is thus clearly monic.
For the pullback property for bc, assume a collection fi: Xi → Yi together with maps ⟨αl, αr⟩: A → Ð(Xl) × Ð(Xr) and β: A → Ð(Yl + Yr) satisfying Ð(fi) ◦ αi = pb ◦ β. The only possible mediating map γ: A → Ð(Xl + Xr) is defined as γ(a)(κlx) = αl(a)(x) and γ(a)(κrx) = αr(a)(x). We have to check that γ(a) is a subdistribution. This follows from because β(a) is a subdistribution:


=	y∈У (Ð(fl) ◦ αl)(a)(y)+	y∈У (Ð(fr) ◦ αr)(a)(y)
= Σx∈XÆ αl(a)(x)+ Σx∈Xr αr(a)(x)
Further, if fi: X → Ð(Y ) are given with fi = pi ⊙ b, then:

(fl M fr)(x)(y) = (∇ ⊙ b)(x)(y) =	w∈У +У ∇(w)(y) · b(x)(w)
= b(x)(κly)+ b(x)(κry)
= fl(x)(y)+ fr(x)(y).

For the quantale monad Q(−) we have projections Yl + Yr → QУi given by pi(w)(y) = if w = κiy then 1 else ⊥, so that for b: X → QУ +У we get (pi ⊙ b)(x)(y) =  w∈У +У pi(w)(y) · b(x)(w) = b(x)(κiy). The map bc is in this case an
—→ Q
fi have a bound, then their sum is given by union: (fl M fr)(x)(y) = fl(x)(y) V
fr(x)(y).
These examples illustrate that the sum operation M is determined by (Kleisli) composition, and hence ultimately by the monad involved.
We continue with some basic properties of M.
Lemma 4.5 In the situation of the previous deﬁnition, one has:
M is preserved by both pre- and post-composition;
The sum of the singleton family {f} if f itself; the sum over the empty family is ⊥;
If cotupling [—, —] is monotone, then fj ≤ Mi∈I fi;
Assume the Kleisli category is Dcpo-enriched. Let I be a countable set such that Mi∈J fi exists for each ﬁnite subset J ⊆ I. Then Mi∈I fi exists.
Proof (1) Suppose Mifi exists for fi: X → T (Y ), say with bound b: X → T (I · Y ). For g: U → T (X) the composite b ⊙ g: U → T (I · Y ) is obviously a bound for fi ⊙ g and yields Mi(fi ⊙ g) = ∇ ⊙ b ⊙ g = (Mifi) ⊙ g.
Similarly, for h: Y → T (U ) the map I · h ⊙ b is a bound for h ⊙ fi, by naturality of projections, so that Mi(h ⊙ fi) = ∇ ⊙ I · h ⊙ b = h ⊙ ∇ ⊙ b = h ⊙ (Mifi).
The map f is a bound for {f} and ⊥ is a bound for the empty family.
If cotupling is monotone we get pi ≤∇ and thus for a bound b,
fi = pi ⊙ b ≤∇ ⊙ b = Mifi.
Assume for convenience that our index set is N. Let fn: X → T (Y ), for n ∈ N, be a collection such that the sum M exists for each finite subset. There are sums f0 M f1 M· · ·M fn−1, say via bound bn: X → T (n · Y ). It is not hard to see that the collection κ˙ i ⊙ fi: X → T (N · Y ), for i < n, also has a bound, namely
' = (κ˙ 0 +˙ ··· +˙ κ˙ n−1) ⊙ bn: X → T (n · N · Y ). We then define

gn = ∇ ⊙ b' = (κ˙ 0 ⊙ f0) M ··· M (κ˙ n−1 ⊙ fn−1) : X —→ N · Y.
This yields a monotone collection gn ≤ gn+1 by the previous point. Hence we get a map f =  n gn: X → N · Y as directed join, which is the intended sum.	 
One further property of M is required, which is sometimes called “partition associativity”. It is non-trivial and depends on the pullback requirement from Def- inition 4.2.
Lemma 4.6 If a (countable) collection I can be written as disjoint union I =
 k∈K Ik, then Mi∈I fi exists if and only each sum fk = Mi∈Ik fi exists and Mi∈I fi =

Mk∈K fk.
As a result, M is commutative and associative.
Proof If I =	k∈K Ik is a disjoint union, then I · Y ~=	k∈K Ik · Y . Hence it is more convenient to consider a collection of maps fk,i: X → Y for k ∈ K and i ∈ Ik. In one direction, suppose b: X →	k∈K Ik · Y is bound for the collection (fk,i),
so that fk,i = pi ⊙ pk ⊙ b. Write bk = pk ⊙ b: X → Ik · Y . It forms a bound for
the collection (fk,i)i∈Ik , since pi ⊙ bk = pi ⊙ pk ⊙ b = fi, for each i ∈ Ik. The sums fk = Mi∈Ik fi = ∇Ik ⊙ bk have a bound a = ( k∈K ∇Ik ) ⊙ b: X → K · Y , since for each k ∈ K,

pk ⊙ a = pk ⊙ (	k∈K ∇Ik ) ⊙ b = ∇Ik ⊙ pk ⊙ b	by naturality of projections
= ∇Ik ⊙ bk = Mi∈Ik fi = fk.

Hence Mk∈Kfk exists as ∇K ⊙ a = ∇K ⊙ (	k∈K ∇Ik ) ⊙ b = ∇I ⊙ b = Mi∈I fi.
For the other direction assume that the sums fk = Mi∈Ik fk,i and Mk∈Kfk exist; we need to show that also Mk∈I,i∈I fk,i exists—and is equal to Mk∈Kfk. So let
bk: X → Ik · Y be a bound for the collection (fk,i)i∈Ik and a: X → K · Y be a bound
for these fk =  i∈Ik fi = ∇Ik	bk. We need a bound c: X →  k∈K Ik · Y , which
⊙
we obtain via the following naturality pullback, as required in Definition 4.3.


X ¸ ¸ ¸

c¸ ¸
T (	I
a

· Y )


T ( k ∇Ik )	z˛	)



⟨bk⟩k∈K
k∈K k
J 
bc
	 T ( K · Y
J 
bc

z J 
  k T (∇Ik )    J 



Hence the mediating map c is a bound for these bk and thus for the fk,i. The resulting sum is: Mk∈K,i∈Ik fk,i = ∇K ⊙  k∈K ∇Ik ⊙ c = ∇K ⊙ a = Mk∈Kfk.	 
We are now ready to collect the requirements that we need in this paper.
Requirements 4.7 The category C is assumed to have countable coproducts and the monad T : C → C satisﬁes:
its Kleisli category Kl(T ) is Dcpo⊥-enriched, so that Kleisli homsets have (countable) directed joins and a bottom element, which are preserved by com- position;
this Kleisli category also has monotone cotupling;
the monad T is partially additive, as in Deﬁnition 4.3.
¿From Lemma 4.5 we may now conclude a basic result.
Proposition 4.8 Let category C with monad T satisfy Requirement 4.7. The Kleisli category Kl(T ) is then partially additive. Further, it is additive (has all countable sums M) iff it has countable strict biproducts.	 

For what it precisely means to be partially additive we refer to the literature [5]. Here we shall simply use that Kleisli homsets have certain sums M, with properties as described in Lemma 4.5. The projections pi make the Kleisli categories into what are called ‘unique decomposition categories’, see also [10]. The “further” part of the proposition is [9, Theorem 3.0.17]. It applies to the Kleisli category of quantale monads.
Kleisli categories are traced monoidal
Now that we have seen additive structure on Kleisli homsets we can conclude from [9] that we have traced monoidal structure in these Kleisli categories. But before we do so we return to Section 3 and re-describe the iterate c# of a coalgebra c in terms of the newly discovered sums. This will be used (in the proof of Theorem 5.2) to show that the induced traced monoidal structure coincides with the coalgebraic trace.
Lemma 5.1 For C,T satisfying Requirements 4.7 the iterate c# of a coalgebra
c: X → T (Y + X), from Proposition 3.1, can be described as sum:
c# = cl ⊙ Mn∈N cn = cl ⊙ c٨,
r	r
where cl = pl ⊙ c: X → T (Y ) and cr = pr ⊙ c: X → T (X), and h٨ = Mn∈N hn.
Proof Recall that the iterate is defined as c# = ∇ ⊙ tr(c): X → N · Y → Y . Hence it is a sum M by construction. So we only have to check that pi ⊙ tr(c) = cl ⊙ ci , for i ∈ N. But before we can do so we need a better handle on the projections pi: n · Y → Y in Kl(T ), for i < n. They are given inductively by:
p0 = [η, ⊥]: Y + n · Y —→ T (Y )	and	pi+1 = [⊥, pi]: Y + n · Y —→ T (Y )
Then it is not hard to see that pi ◦ λn = pn−i−1: n · Y → T (Y ), for i < n, and
pi ◦ λn = ⊥, for i ≥ n.
Next we use the explicit description of tr(c) as directed join from (5):


pi ⊙ tr(c) = pi ⊙ 
n∈N

J(λn) ⊙ cn 

=	n∈N
=
n∈N
pi ⊙ J(λn) ⊙ cn
pn−i−1 ⊙ cn	as we have just seen, where i < n 

(=∗) c
⊙ ci .


The equation (∗) is obtained by induction on n, using (4).	 
The main result of this paper now shows how coalgebraic traces in Kleisli cat- egories yield a traced monoidal structure with respect to this monoidal structure (0, +). The result is actually a direct consequence of Proposition 4.8, using [9, Theorem 3.1.4] (which dualises Hasegawa’s result that uniform fixed point opera- tors are uniform traces [11]). We should point out that the induced trace structure is of a very special kind, since the monoidal structure consists of coproducts, and

the obtained trace operators are uniform. Hence it can equivalently be presented in terms of iteration operators a` la Bloom-E´sik, i.e. as the duals of uniform fixed point operators, see [6]. So we are basically looking at an instance of Elgot iterative theories, see [4].

Theorem 5.2 For C and T satisfying Requirements 4.7, the Kleisli category Kl(T ) with (0, +) is traced monoidal (see [13]). For a map f : X + U → Y + U in Kl(T ) we deﬁne Tr(f ): X → Y as the composite ∇ ⊙ tr(f ) ⊙ κl = f # ⊙ κl at the bottom in:


Y + (X+ U )  id + tr(f^)

Y + N · Y

f^ = (idУ
+˙ κ˙ r) ⊙ f
^
~= J

 

(ξ−1)




Tr(f )
f^#	

This monoidal trace operation Tr then satisﬁes standard requirements from [13], and also the following special properties.
Identity Tr(idX+U ) = idX ;

Uniformity Tr(f ) = Tr(g), if (id +˙
⊙ f = g ⊙ (id +˙
h),

for f : X + U → Y + U, g: X + V → Y + V and h: U → V (see [11]).

Proof The result follows from the properties of iteration (—)#, see [9] 2 , once we know that the definition of trace in [9] coincides with the coalgebraic one described in the theorem. This follows from Lemma 5.1 using a matrix description of f : X +U → Y + U . Write fij = πj ⊙ f ⊙ κ˙ i, for i, j ∈ {l, r}, so that:
⎛⎜ X fll T ( Y )	U flr T ( Y ) ⎞⎟
We have to show that Tr(f ) = f # ⊙ κ˙ l as defined above can be written as the (regular) expression fll M flrf ٨ frl that is used in [9], and called the execution (or




2 which, in dual form for products and a fixed point operator, should also be attributed to Masahito Hasegawa [11] and to Martin Hyland, see also [15].

Tr(f ) =  f^# ⊙ κ˙ l  =  pl ⊙ f^ ⊙   Mn  (pr  ⊙ f^)n   ⊙ κ˙ l trace) formula. This follows from the description of iteration (—)# in Lemma 5.1:
= p ⊙ f ⊙  id M M (κ˙  ⊙ p ⊙ f )n+1  ⊙ κ˙
= (pl ⊙ f ⊙ κ˙ l) M (pl ⊙ f ⊙ Mn (κ˙ r ⊙ pr ⊙ f )n+1 ⊙ κ˙ l)

(∗)
ll
M (pl
⊙ f ⊙  Mn
κ˙ r
⊙ (pr
⊙ f ⊙ κ˙

r)n  ⊙ pr
⊙ f ⊙ κ˙ l)

= fll M pl ⊙ f ⊙ κ˙ r ⊙ Mn (pr ⊙ f ⊙ κ˙ r)n ⊙ frl 
rr

The marked equation holds because
(κ˙ r ⊙ pr ⊙ f )n+1 ⊙ κ˙ l = κ˙ r ⊙ (pr ⊙ f ⊙ κ˙ r)n ⊙ pr ⊙ f ⊙ κ˙ l,
which is obtained by induction.
The identity and uniformity properties are a consequence of Lemma 3.3.	 
Example 5.3 We shall quickly review what this monoidal trace amounts to for a map f : X + U → T (Y + U ) where T is one of the monads У, L, Ð, Q(−) from Example 3.2.
For the powerset monad У we get Tr(f ): X → У(Y ) given by:

y ∈ Tr(f )(x) ⇐⇒ En ∈ N. (n, y) ∈ tr(f )(x)
⇐⇒ Eu1,..., un ∈ U. u1 ∈ f (x) Λ u2 ∈ f (u1) Λ · · · Λ un ∈ f (un−1) Λ y ∈ f (un).
The lift monad yields Tr(f ): X → 1+ Y as
Tr(f )(x) = up(y) ⇐⇒ En ∈ N.f (x) = up(u1) Λ f (u1) = up(u2) Λ · · ·Λ 
f (un−1) = up(un) Λ f (un) = up(y).
The subdistribution monad yields Tr(f ): X → Ð(Y ) with: Tr(f )(x)(y)

= Σ	Σ
f (x)(u1) · f (u1)(u2) · ... · f (un−1)(un) · f (un)(y).

n∈N u1,...,un∈U

Similarly, the quantale monad yields Tr(f ): X → QУ with:

Tr(f )(x)(y)
=	f (x)(u1) · f (u1)(u2) · ... · f (un−1)(un) · f (un)(y).


We have already seen that Kleisli categories of quantale monads are special, because they have biproducts. But there is more.
Lemma 5.4 The Kleisli category Kl(Q(−)) of the monad Q(−) for a commutative
quantale Q has an involution (—)†: Kl(Q(−))op —=→ Kl(Q(−)) that preserves biprod-
ucts and (monoidal) traces.
Proof On objects one has X† = X and on a morphism f : X → QУ one gets f†: Y → QX by f†(y)(x) = f (x)(y). Clearly, (—)†† = id. Commutativity of Q’s monoid (1, ·) is needed to show that (—)† preserves composition and traces. 

A category for bidirectional monadic computation
In this section we continue to work with a monad T on a category C as in Require- ments 4.7 for which we thus have both coalgebraic traces (as in Proposition 3.1) and monoidal traces (by Theorem 5.2). Then we can apply the standard “Int” con- struction from [13]. We shall write Bd(T ) for the resulting category Int(Kl(T )) of “bidirectional computations of type T ”.
This final section only contains an explicit description of this category Bd(T ) and a brief examination of our standard examples.
Definition 6.1 Let Bd(T ) be the category with:
Objects A = (Al, Ar) consisting of pairs of objects Al, Ar ∈ C;
Morphisms f : A → B are maps f : Al + Br → T (Bl + Ar) in C. Of course they may also be described as maps Al + Br → Bl + Ar in the Kleisli category Kl(T );
Identities idA: A → A are (Kleisli) identities Al + Ar → T (Al + Ar);
Composition For f : A → B and g: B → C, that is for f : Al + Br → T (Bl + Ar) and g: Bl + Cr → T (Cl + Br), the composite g ◦ f is the (monoidal) trace of the following “obvious” map: (Al + Cr)+ Br → T ((Cl + Ar)+ Br), given explicitly in Kl(T ) as:


 [(κ˙ 1 +˙ id) ⊙ g ⊙ κ˙ 1, κ˙ 1 ⊙ κ˙ 2] ⊙ f ⊙ κ˙ 1, (κ˙ 1 +˙

id) ⊙ g ⊙ κ˙ 2 

[(κ˙ 1 +˙
id) ⊙ g ⊙ κ˙ 1, κ˙ 1 ⊙ κ˙ 2] ⊙ f ⊙ κ˙ 2 .


We refer to [13] for the proof of the fact that this yields a compact closed category, with a full and faithful functor Kl(T ) → Bd(T ) given by A '→ (A, 0). Such proofs are non-trivial, and can best be done using a suitable graphical notation.
In the remainder we briefly review our running examples. For the lift monad L the category Bd(L) contains the essence of the category of games G as described in [3]. There, the objects can be described in terms of pairs of sets (Al, Ar) of moves, of a player (left, say) and opponent (right), together with additional structure, given by a set of plays, as suitable subset of the set of (Al + Ar)٨ sequences of moves. Morphisms A → B in G are “strategies”, that can be described as certain partial

functions Al + Br - Bl + Ar, that is 3 , as Kleisli maps Al + Br → 1+ (Bl + Ar). Composition of these strategies takes place via Girard’s “execution formula”, which corresponds to composition as described in Definition 6.1.
The category Bd(Ð) for the distribution monad Ð does not seem to have been studied yet. The other example involving quantale monads gives rise to a separate result, yielding a setting for quantum computation, see [2]. It includes the familiar situation of relations.
Proposition 6.2 The category Bd(Q(−)) obtained from the quantale monad Q(−)
for a commutative quantale Q is strongly compact closed.
Proof The involution (—)† from Lemma 5.4 is preserved by the “Int” construction, as claimed in [1].	 

Acknowledgement
Thanks to are due to Masahito Hasegawa for helpful comments, and to referees of (earlier versions of) this paper.

References
S. Abramsky. Abstract scalars, loops, and free traced and strongly compact closed categories. In J.L. Fiadeiro, N. Harman, M. Roggenbach, and J. Rutten, editors, Conference on Algebra and Coalgebra in Computer Science (CALCO 2005), number 3629 in Lect. Notes Comp. Sci., pages 1–31. Springer, Berlin, 2005.
S. Abramsky and B. Coecke. A categorical semantics of quantum protocols. In Logic in Computer Science, pages 415–425. IEEE, Computer Science Press, 2004.
S. Abramsky, R. Jagadeesan, and P. Malacaria. Full abstraction for PCF. Inf. & Comp., 163:409–470, 2000.
J. Ad´amek, S. Milius, and J. Velebil. Elgot theories: A new perspective of iteration theories (extended abstract). In S. Abramsky, M. Mislove, and C. Palamidessi, editors, Mathematical Foundations of Programming Semantics, number 249 in Elect. Notes in Theor. Comp. Sci., pages 407–427. Elsevier, Amsterdam, 2009.
M.A. Arbib and E.G. Manes. Algebraic Approaches to Program Semantics. Texts and Monogr. in Comp. Sci. Springer, Berlin, 1986.
S.L. Bloom and Z. E´sik. Iteration Theories: The Equational Logic of Iterative Processes. EATCS Monographs. Springer, Berlin, 1993.
D. Coumans and B. Jacobs. Scalars, monads and categories, 2010. Manuscript.
C.C. Elgot. Monadic computation and iterative algebraic theories. In H.E. Rose and J.C. Shepherson, editors, Logic Colloquium ’73, pages 175–230, Amsterdam, 1975. North-Holland.
E. Haghverdi. A categorical approach to linear logic, geometry of proofs and full completeness. PhD thesis, Univ. of Ottawa, Canada, 2000.
E. Haghverdi. Unique decomposition categories, geometry of interaction and combinatory logic. Math. Struct. in Comp. Sci., 10:205–231, 2000.
M. Hasegawa. The uniformity principle on traced monoidal categories. In Category Theory and Computer Science, number 69 in Elect. Notes in Theor. Comp. Sci. Elsevier, Amsterdam, 2003.
I. Hasuo, B. Jacobs, and A. Sokolova. Generic trace theory. Logical Methods in Comp. Sci., 3(4:11), 2007.

3 These strategies are maps ƒ: M P + M O ~ M O + M P in the notation of [3, Section 2.4].
A	B	A	B


A. Joyal, R. Street, and D. Verity. Traced monoidal categories. Math. Proc. Cambridge Phil. Soc., 119(3):425–446, 1996.
K.I. Rosenthal. Quantales and their applications. Number 234 in Pitman Research Notes in Math. Longman Scientific & Technical, 1990.
A. Simpson and G. Plotkin. Complete axioms for categorical fixed-point operators. In Logic in Computer Science, pages 30–41. IEEE, Computer Science Press, 2000.
M.B. Smyth and G.D. Plotkin. The category theoretic solution of recursive domain equations. SIAM Journ. Comput., 11:761–783, 1982.
