
ORIGINAL ARTICLE
Design and analysis of stochastic DSS query optimizers in a distributed database system

Manik Sharma a,*, Gurvinder Singh b, Rajinder Singh b

a Department of Computer Science and Applications, DAV University, Jalandhar, India
b Department of Computer Science, Guru Nanak Dev University, Amritsar, India

Received 7 June 2015; revised 17 August 2015; accepted 26 October 2015
Available online 19 November 2015

Abstract Query optimization is a stimulating task of any database system. A number of heuristics have been applied in recent times, which proposed new algorithms for substantially improving the performance of a query. The hunt for a better solution still continues. The imperishable develop- ments in the field of Decision Support System (DSS) databases are presenting data at an exceptional rate. The massive volume of DSS data is consequential only when it is able to access and analyze by distinctive researchers. Here, an innovative stochastic framework of DSS query optimizer is pro- posed to further optimize the design of existing query optimization genetic approaches. The results of Entropy Based Restricted Stochastic Query Optimizer (ERSQO) are compared with the results of Exhaustive Enumeration Query Optimizer (EAQO), Simple Genetic Query Optimizer (SGQO), Novel Genetic Query Optimizer (NGQO) and Restricted Stochastic Query Optimizer (RSQO). In terms of Total Costs, EAQO outperforms SGQO, NGQO, RSQO and ERSQO. However, stochastic approaches dominate in terms of runtime. The Total Costs produced by ERSQO is better than SGQO, NGQO and RGQO by 12%, 8% and 5% respectively. Moreover, the effect of replicating data on the Total Costs of DSS query is also examined. In addition, the statistical analysis revealed a 2-tailed significant correlation between the number of join operations and the Total Costs of dis- tributed DSS query. Finally, in regard to the consistency of stochastic query optimizers, the results of SGQO, NGQO, RSQO and ERSQO are 96.2%, 97.2%, 97.45 and 97.8% consistent respectively.
© 2015 Production and hosting by Elsevier B.V. on behalf of Faculty of Computers and Information,
Cairo University. This is an open access article under the CC BY-NC-ND license (http://creativecommons.
org/licenses/by-nc-nd/4.0/).






* Corresponding author.
E-mail address: manik_sharma25@yahoo.com (M. Sharma).
Peer review under responsibility of Faculty of Computers and Information, Cairo University.


Introduction

Database is a systematic collection of closely interrelated data designed to converge the information demands of a business organization. It is a repository of the data that can be shared and accessed by concurrent users. It holds the operational data as well as its comprehensive description. Last few decades wit- nessed the phenomenal progress in the database technology. There has been an outstanding change in the way many

http://dx.doi.org/10.1016/j.eij.2015.10.003
1110-8665 © 2015 Production and hosting by Elsevier B.V. on behalf of Faculty of Computers and Information, Cairo University. This is an open access article under the CC BY-NC-ND license (http://creativecommons.org/licenses/by-nc-nd/4.0/).



organizations operate and manage data. There is a substantial progress in the number of database users and the organizations that use it. Database system is a comprehensive collection of interrelated programs used to successfully create, store, retrieve and manage data in the database. Earlier, the complete database was supposed to be placed on a server machine, and was shared among database users. This approach of database management was well recognized as centralized database man- agement. This approach had considerably overwhelmed the various problems (Data Redundancy, No Sharing, Security, Inconsistency, etc.) of traditional file based systems. Later, it was seriously contemplated that storing the entire database on a single site was one of the major bottlenecks of this system, as it degraded the performance of the system. Moreover, this approach failed to provide faster ‘Access Time’ and ‘Response Time’ as the size of database was increased to the significant higher levels. In 1980s, with the fusion of database system and computer networking, a new term called distributed data- base system emerged. It was one of the major developments of database technology. Several problems of traditional database systems were resolved by the distributed database system.
Query is a statement or group of statement that adequately performs some basic database operations viz. ‘Read’, ‘Write’, ‘Delete’, and ‘Update’. It plays a consequential role in manag- ing and retrieving data. In general, distributed queries are more complex and complicated as compared to centralized queries. A distributed query is further classified as Online Transaction Processing (OLTP), and Decision Support System (DSS) queries. DSS query is distributed in nature. In general, it is complicated and takes more execution time. These queries can access data from a local as well as from remote sites. These queries normally deal with substantial volume of data as com- pared to OLTP queries. DSS queries use up ample quantity of input–output, processing and communication resources and can abruptly halt CPU or even memory server of a distributed database system. Moreover, the running time of distributed DSS query is conventionally unforeseeable. DSS queries work on relations having a size in mega bytes, giga bytes or even lar- ger in size. Query optimization finally revolved out to be the biggest challenge for the database researchers. Query optimiza- tion in distributed database system has gained considerable attention in recent years. It is a process to determine the best query execution plan in terms of Total Costs or Response Time. A non-optimal query execution plan is costly either in terms of usage of system resources or in terms of execution time. In this research work, the focus is to analyze the performance of dif- ferent stochastic distributed DSS query optimizers. The results are compared based upon usage of system resources and run- time of the distributed DSS query. Here, two novel stochastic query optimizers viz. Restricted Stochastic Query Optimizer (RSQO) and Entropy based Restricted Stochastic Query Opti- mizer (ERSQO) have been proposed to optimize a set of dis- tributed DSS queries. The results of ERSQO and RSQO are compared with SGQO and NGQO.
The paper is divided into several sections. Section 2 of the paper highlighted the related work. Research problem is formu- lated in Section 3. The basic concept of query optimization is depicted in Section 4. Section 5 represents the design of differ- ent stochastic query optimizers. The design of cost coefficients and experimental setup has been described in Section 6. Sec- tion 7 represents discussion and results. Conclusion has been
made in Section 8. Finally, future research scope is mentioned in Section 9.

Related works

The credit of query optimization goes to Yao and Hevner. In the late 1970s, authors used heuristic with exhaustive enumer- ation approach to optimize the queries. In 1980s different key researcher’s viz. Ceri and Palagatti, Chen and Li, Yu and Chang, Peter Apers, Lam and Martin proposed the different query optimization strategies. Rho and March further extend the query optimization model in 1995. In the 21st century, the researcher’s like Ahmat Cosar, Zehai Zhou used ‘Genetic Algorithm’ to optimize the distributed queries [1–5,29]. Tradi- tionally ‘Exhaustive Enumeration’ with some heuristics algo- rithms (Dynamic Programming, Branch and Bound, Greedy Algorithm, etc.) was dominantly used to optimize queries. However, this technique was not fit for large and complex queries as it almost failed to provide an optimal query alloca- tion plan in a finite amount of time. It took minutes, hours, or even days to provide an optimal query execution plan for a complex query [6,7]. In randomized optimization strategies, an optimal solution was found by a set of random moves. Every solution of search space was represented as a solution point. Random moves were used to connect one solution point to another as an edge. The set of random moves heavily depends upon the nature of optimization problem and set of solutions. ‘Iterative Improvements’, ‘Simulated Annealing’, ‘Random Sampling’, etc. are some of the examples of random- ized optimization strategies. In recent times, evolutionary tech- niques are used in optimizing the distributed queries. Evolutionary techniques are based on the evolution of a pop- ulation. Some of the important features of evolutionary tech- niques are tolerance for imprecision, uncertainty and partial truth to achieve tractability, robustness, low solution cost and better rapport with reality. Some of the commonly used evolutionary techniques are ‘Genetic Algorithms’, ‘Swarm Intelligence’, ‘Memetic Algorithms’, ‘ACO’, etc [8–11].

Problem formulation

Query optimization is an NP-Hard problem. A number of heuristics have been applied in recent times, which propose new techniques to optimize the query processing cycle. The hunt for better solutions still continues. In general, a query can be optimized by changing the execution order of sub- queries, restructuring a query in different ways or with the effective allocation of sub-operations to distinctive sites (opera- tion site allocation). Operation site allocation problem is one of the prominent distributed database research problems that con- tinue to spur a massive deal of attention. Therefore, in this research work, while optimizing a query, the primary focus has been given to allocate sub operation to different sites of a distributed database network. Decision support system queries process massive amount of data (in gigabytes, petabytes or even more). These queries are not subjected to the response time. However, usage of system resources required to execute the query is of major concern. Therefore, DSS queries are opti- mized on the basis of Total Costs (Sum of input output, process- ing and communication Costs). The problem is devised as below:

Costs’ of the distributed DSS query. Finally, the consistency of DSS query optimizer has been statistically analyzed.

























A distributed DSS query optimizer has been designed to solve the operation site allocation problem of distributed DSS queries. For finding an optimal operation site allocation plan, first of all, a ‘SQL’ based decision support system query is decomposed into relational algebra expressions (sub- operations) based on ‘selection’, ‘projection’, ‘join’ and ‘semi-join’. These sub-operations are then allocated to differ- ent sites for their execution by exploring various amalgams of operations and sites. The costs of each sub-operation are computed by using the size of relation/fragment involved in the query, site allocated and the values of costs coefficients of input–output, processing and communication. The opera- tion site allocation problem is represented in Fig. 1.
Here, a DSS query has been optimized using exhaustive enumeration, stochastic, restricted stochastic and entropy based restricted stochastic approaches. Moreover, the effect of data replication on the distributed query optimization process has examined. An effort is also made to analyze the correlation between number of joins operation and the ‘Total
DSS query optimization

Query optimization is a process that generates the different operation site allocation plans to execute the query. The objec- tive of operation site allocation problem is to select a better query execution plan which optimizes the Total Costs of the distributed decision support system query. In commercial database systems, the query optimization routine is mecha- nized by a software module called query optimizer. A query optimizer is composed of three components viz. ‘Cost Model’, ‘Search Space’ and ‘Search Strategy’ [2,12]. The search space represents a set of alternative query execution plans for a query. To find an optimal or best possible operation site allo- cation plan, the different execution plans generated by query optimization approach are compared on the basis of the ‘Total Costs’ of a query. The cost model is responsible for associating the ‘Costs’ with each query execution plan. The costs are gen- erated on the basis of the operation and execution environ- ment of a query. In common practice, ‘Costs’ are represented by a ‘Costs Function’ also called objective function. It is nor- mally constructed on the basis of the usage of system resources or the execution time of a query. It is significantly affected by different factors such as speed of input output devices, net- work media, size and cardinality of relations, and size of blocks. The role of search strategy is to find the best possible query execution plan by probing the search space [13].

Design of DSS query optimizers using stochastic approaches

On the basis of earlier works, it was found that the scaled up NP-hard problems are almost intractable to solve using exhaustive enumeration techniques. However, it can be effec- tively solved by stochastic approaches. Genetic Algorithm (GA) is a prevalent stochastic approach. In GA, the time taken in obtaining solution is independent of the search space. There- fore, genetic approach is best suited for optimizing the queries in a distributed environment [8,14,15,10,16].
‘Genetic Algorithm’ commonly abbreviated as ‘GA’ was proposed by John Holland. These are search algorithms specif- ically designed to simulate the principle of the natural biolog- ical evolution process. ‘GA’ borrows its essential features from




Figure 1	Query processing in distributed database system.



natural genetics. In other words, genetic algorithms are stochastic techniques that stipulate good-quality solution with low time complexity. It permits a population composed of many individual chromosomes to evolve under delineated selection rules to generate a state that optimizes the objective function. These types of algorithms successfully operate on a population of solutions rather than a single solution. It gener- ally employs some heuristics such as selection, crossover and mutation to develop better solutions [16,8].
‘Genetic Algorithms’ are capable of being applied to an enormously wide range of problems. Some of the major appli- cations of these algorithms are Image Processing, Environmen- tal Sciences, Analysis of Time Series, Task Scheduling, Bioinformatics, Clustering, Game Theory, Artificial Intelli- gence, Aeronautics, etc. [17–22]. In general, these types of algo- rithms aim for searching better solution from a number of available solutions. As stated, GA starts its working from a set of solutions rather than a single solution. The initial popu- lation is generated randomly. Each solution of the problem is adequately represented by encoding a string (Chromosome) of bits or characters (Genes). Every chromosome has a fitness value associated with it. The collection of chromosomes with their corresponding fitness values is called population. The population at a particular instance is called generation. Fitness function is one of the major decisive parameters of ‘Genetic Algorithm’. It defines the objective of the problem to be opti- mized. A pair of chromosomes based on their fitness values is used to reproduce offsprings. The genetic properties of both the chromosomes are intermixed to generate better offspring, such a mechanism is called crossover. After crossover opera- tion, the genetic characteristics of the generated offspring are further modified. Mutation is a procedure to modify the prop- erties of the generated offspring to make it more effective. The algorithm terminates when the required condition is fulfilled [16,23].
A simple pseudo-code for a genetic algorithm is given below:
Initially, the design of Rho and March (SGQO) and Sevinc and Cosar (NGQO) is implemented as SGQO and NGQO respectively. Furthermore, two restricted stochastic query opti- mizers have been proposed as RSQO and ERSQO. ERSQO uses the concept of Genetic Algorithm and Havrda and Char- vat entropy. The remaining section explains the design and working of different stochastic distributed DSS query optimizers.

Design of Exhaustive Enumeration Query Optimizer (EAQO)

Exhaustive Enumeration approach is a deterministic technique that accomplishes a complete search of solution space. It gen- erates and inspects all the possible combinations of search space that is assured to provide the best promising solution. It is quite easy to understand and implement it. However, it is inelegant to solve large and complex problems. While solv- ing a DSS Operation Site Allocation problem, it explores all possible combinations of query execution plans. The design of Exhaustive Enumeration Query Optimizer (EAQO) for solv- ing the above said research problem in distributed database environment is based upon the following decision variables:




In this research paper, an effort has been made to design and implement four different variations of Genetic Algorithms.



Design of Simple Genetic Query Optimizer (SGQO)

On the basis of Rho and March [14] approach, Simple Genetic Query Optimizer (SGQO) has been designed for solving the operation site allocation problem of distributed DSS queries. SGQO starts with randomly generated initial population. A chromosome is designed on the basis of number of operations and number of sites. The chromosome has been designed in way that its length is one less than the number of operations of a query [14]. The pseudo-code for SGQO is formulated as below:
designed for optimizing distributed DSS queries [8]. The pseudo-code of NGQO is given below:








































Design of Novel Genetic Query Optimizer (NGQO)

Sevinc and Cosar [8] proposed a Novel Genetic Query Opti- mizer (NGQO) for optimizing the distributed queries in a novel way. NGQO improved the quality of solution in finding an optimal query execution plan by forbidding the redundant chromosome while performing crossover and mutation opera- tions. On the basis of Sevinc and Cosar approach, NGQO is
Design of Restricted Stochastic Query Optimizer (RSQO)

Like SGQO and NGQO, RSQO also starts with randomly gen- erated initial population. A chromosome is designed to allo- cate sub-operations of a DSS query on a distributed network. The innovation of approach lies in the restricted growth of the chromosome design. Here, projection sub- operations is supposed to be executed on the same machine where the corresponding selection operations were executed. This design of chromosome reduced the ‘Processing Costs’ of the query, which further reduced the Total Costs of the DSS query. The three basic operators of ‘GA’ viz. ‘Selection’, ‘Crossover’ and ‘Mutation’ are modified. The quality of solu- tion produced by RSQO is better than as given by SGQO and NGQO. However, like other stochastic approaches, it does not guarantee the best solution as compared to Simple Exhaustive Enumeration and Restricted Exhaustive Enumeration approach [24].
The pseudo-code of RSQO is as given below:

In general, P can be represented as Pij. Here
Pij = nSij/PopSize.
nSij denotes the number of placements of site j on the locus of i. H(P)	approaches	to	maximum	values	Max = (PopSize1—a — 1)/(1 — a) when each site of a distributed data- base system involved in DSS query appears uniformly in the population. On the other hand, H(P) tends to minimum or zero when all the sites involved in a DSS query lie on the same locus or path of all chromosomes [25–27]. The pseudo-code of Entropy based Genetic Algorithm with restricted growth encod-
ing scheme is as given below:





























Design of Entropy based Restricted Stochastic Query Optimizer (ERSQO)

To improve the design of RSQO, an Entropy based Restricted Stochastic Query Optimizer is proposed. In ERSQO, the innova- tion lies in the restricted growth of chromosome and the use of Havrda and Charvat entropy. Here, entropy is used at two differ- ent levels. Firstly, the concept of entropy is implemented at the selection operator of ERSQO so that every member of Popula- tion/Generation has uniform probability of selecting as a parent to perform crossover and mutation operations. The concept of entropy is also used while selecting a site for executing the sub-operations of a DSS query. Here each permissible site has uniform probability of its selection. Furthermore Havrda and Charvat entropy is used to refrain low diversity population prob- lem which normally occurs in the implementation of ‘Genetic Algorithm’. The low diversity population problem deteriorates the quality of the stochastic approach. The diversity of all chro- mosomes is measured by using the following formula [25–27,31].
n
H(P) =	XPn — 1	(1.2)
1
1 — a k=1


Differences between the different query optimization approaches

Five different query optimization approaches to optimize dis- tributed DSS queries in a distributed environment have been discussed. From the above subsections, it is found as exhaus- tive enumeration scans all different possible query execution plans, hence it is not feasible to use EAQO for complex dis- tributed DSS queries. SGQO being stochastic is able to give an optimal query execution plan for moderate to complex dis- tributed DSS query, however for complex moderate to com- plex DSS query may have redundant chromosomes. NGQO avoid redundant in chromosome, but still may lead to low diversity problem. RGQO is introduced to further improve the design of NGQO by using the restricted design of the chro- mosomes. On the other hand, ERSQO has been implemented by using the hybrid idea of restricted growth chromosome design and entropy to solve the low diversity population problem.

Experimental setup

For analyzing the efficiency and performance of different DSS query optimizers, following set of adhoc distributed DSS queries has been designed. The queries are focused on TPC- DS a benchmark database which is based upon customer and sales. The queries are represented in the form of relational algebra expressions. A set of queries is selected in such a way that in experimentation one has different number of join oper- ations in each query. The queries are designed over a range of one-to-ten join operations. The queries are selected in such a way to vary the number of join operations. The queries are fired on a distributed database consisting of relations viz. Cus- tomer, Sales, Cust_Address, Marketing, Shipping, Webstore, Warehouse, Store, and Items [30].

DSS1: (p (r) Customer): X: (p (r) Cust_Address)
DSS2: (p (r) Customer): X: (p (r) Cust_Address): X: (p (r) Sales)
DSS3: (p (r)Customer): X: (p (r)Sales): X: (p (r)Ware- house): X: (p (r) Marketing).
DSS4: (p (r) Customer): X: (p (r)Cust_Address): X: (p (r)
Sales): X: ((p (r) Warehouse): X: (p (r) Sales))
DSS5: (p (r)Store): X: (p (r) Customer): X: (p (r) Cust_Ad-
dress): X: (p (r)Store): X: (p (r)Sales): X: (p (r) Items)
DSS6: (p (r) Sales): X: (p (r) Cust_Address): X: (p (r)
Sales): X: (p (r)Item): X:(p (r) Marketing): X: (p (r)Sales): X: (p (r)Shipping).
DSS7: (p (r) Sales): X: (p (r) Cust_Address): X: (p (r)
Items): X: (p (r) Warehouse): X: (p (r)Sales): X: (p (r)Mar- keting): X: (p (r)Shipping): X: (p (r)Webstore)
DSS8: (p (r) Sales): X: (p (r)Cust_Address): X: (p (r)
Items): X: (p (r) Warehouse): X: (p (r)Sales): X: (p (r)Mar-
keting): X: (p (r)Shipping): X: ((r)Webstore: X: (p (r) Items)
DSS9: (p (r) Sales): X: (p (r)Cust_Address): X: (p (r)
Items): X: (p (r) Warehouse): X: (p (r)Sales): X: (p (r)Mar-
keting): X: (p (r)Shipping): X: (p (r) Webstore: X: (p (r) Items): X: (p (r) call center)
DSS10: (p (r) Sales): X: (p (r) Items): X: (p (r)Cust_Ad-
dress): X: (p (r) Customer): X: (p (r) Store): X: (p (r)Sales):
X: (p (r) Warehouse): X: (p (r)Sales): X: ((r) Marketing): X: (p (r) Sales: X: (p (r) shipping)

To solve operation site allocation problem, a simulator was developed to unravel the operation site allocation problem for a set of distributed DSS queries. It was designed using ‘MATLAB 2008’ environment without using the inbuilt ‘GA’ facilities. The system takes parameters of DSS query as an input and generates different query execution plans as an out- put. The system uses a number of input parameters such as number of base relations, total number of operations, number of selection operations, number of projection operations, num- ber and size of intermediate fragments, costs coefficients of I/ O, communication and processing, and number of join opera- tions during the optimization process of a DSS query. The best possible query allocation plan that reduces the combined usage of I/O, CPU and communication resources requisite to execute a DSS query is selected as a final output. All the experiments were carried out based on the following assumptions [13,14].

The computations were made based on the number of data blocks required by a query.
Block size of a relation was assumed to be of 8 Kbytes.
The base relation was replicated randomly on any two dif- ferent sites. Size of intermediate fragments was calculated based on the selectivity estimation techniques.
The default ratio of cost coefficients of input output and communication was assumed to be 1:1.6.
‘Selection’ and ‘Projection’ operations were processed on the sites where the corresponding base relation was placed.
‘Join’ operations were allowed to be executed on any site of a distributed database network.
Here, a set of distributed queries was designed assuming adhoc DSS queries. All the queries are focused on retrieval operations of a distributed database system. The queries are formulated by using selection, projection and join operations of relational algebra. ‘Join’ operation plays a prominent part in distributed database queries. Therefore, a set of queries is designed over a range of join operations. A series of experi- ments was conducted for a set of distributed DSS queries. The statistics of the set of distributed DSS queries is repre- sented in Table 1.
As stated earlier, distributed database composed of distinc- tive base relations ‘B’ was simulated over a network of sites ‘S’. ‘Q’ denotes a set of DSS queries to be optimized. ‘q’ is a DSS query designed to be analyzed by decomposing it into several sub-operations ‘y’.
The costs coefficients of input output, processing and com- munication are designed on the basis of the ‘Costs Model’ of Rho and March, Dougless and Cornell, Sevinc and Cosar [8,14,28]. The design of ‘Input–Output’ costs coefficients is exhibited in the form of a linear array. The size of array is restricted by the number of sites available in a distributed data- base system. As per specification based on works of Rho and March, Sevinc and Cosar and Ozsu and Valduries the ratio of input–output costs coefficients to the communication costs coefficients has been taken as 1:1.6. Communication costs coefficients are depicted in the form of a square matrix of size




restricted by the number of sites. On the other hand, the ratio of processing costs coefficients to input output costs coeffi- cients is 1:10. Like input–output costs coefficients, processing costs coefficients are also represented in the form of a linear array [13]. The prototype of different costs coefficients for a DSS query in a distributed database system consisting of ten sites is given below:





The costs coefficients for data allocation variables are repre- sented in the form of a rectangular matrix having size of order of number of sites and base relations. Each relation is sup- posed to be replicated on two adjacent sites. The prototype of data allocation variable for ten sites and seven base relations is as given below:
Using the above designed decision variables and costs coeffi- cients, one can find local processing costs (LP_Costs) and com- munication costs (CM_Costs) of a DSS query. Local processing costs is abbreviated as LP_Costs and communica- tion costs is abbreviated as CM_Costs. Let T_Costsio is the total input output costs and T_Costscpu is the total processing costs of a query.
Local processing costs are the sum of total input output costs (T_Costsio) and total processing costs (T_Costscpu) of selection, projection and join operations of query. The input–output costs of the selection operation was computed by multiplying the input–output costs coefficients (ICC) of site with the number of memory blocks accessed by a base relation ‘b’ i.e. size of intermediate fragments. Similarly, the ‘Process- ing Costs’ is generated by multiplying the processing costs coefficients (PCC) of the site with the number of memory blocks read or written by a base relation ‘b’. Finally, the sum- mation was used to find the total input output costs and total processing costs.
The communication costs is associated with join opera- tions. The communication Costs of a query is computed as follows:

In the first step, communication costs from the correspond- ing site of left child of ‘Join’ operation to the site where ‘Join’ operation is executed is selected. The communication costs then multiplied with the number of data blocks as given by ‘Left Fragment’ of the join operation.
Similar calculation has been carried out for the right child of the ‘Join’ operation.
Finally, the results of these two operations are added itera- tively for the number of join operations involved in the query.

The mathematical formulation of local processing costs and communication costs in the proposed cost model is given below:


LPCosts =
NXoSo i=1

Icc * Fi +

NoPo
Icc * Fj +
j=1
NoSo
Pcc * Fi
i=1

NoPo
+	Pcc * Fj	(1.3)
j=1



The mathematical representation of the communication costs (CMCT) is as given below:
Nojo
CM Costs =	CMcc(LPO, JO)* LPFi
i=1
XNojo
are performed to optimize a set of distributed DSS queries by using exhaustive enumeration and four different stochastic approaches. The queries are optimized to reduce the usage of system resources requisite to execute it. In general, for a dis- tributed DSS query, there are three types of system resources viz. input–output, processing and communication. Total Costs



Here
+
i=1
CMcc(LPO, JO)* RPFi	(1.4)
also known as ‘Total Time’ represents the combined usage of
system resources required to execute the query [13]. Here, the focus is to improve the throughput of the stochastic query optimizer. The major objectives of this research work revolve around the following points:

Analysis of different DSS query optimizer’s viz. EAQO, SGQO, NGQO, RSQO and ERSQO.
To examine the effect of data replication factor on the DSS query optimization process.
To statistically analyze the relationship between number of join operations and the usage of system resources required to execute the distributed DSS query.




NoSo

NoPo

NoSo
The remaining subsections explain the results of different

T CostsDSS = XIcc * Fi + XIcc * Fj + XPcc * Fi
distributed DSS query optimizers in context to the above said

i=1
j=1
i=1
objectives.

NoPo	Noj
+	Pcc * Fj +	CMcc(LPO, JO)

Comparative analysis of different DSS query optimizers

j=1

* LPFi +

XNoj

i=1
i=1

CMcc(LPO, JO)* RPFi	(1.5)

An extensive experimentation was carried out on a set of dis- tributed DSS queries. All the experiments were well performed under simulated environment. Table 2 represents the Total

The queries are optimized using four different stochastic
approaches viz. ‘Simple Genetic Approach’, ‘Novel Genetic Approach’, ‘Restricted Genetic Approach’ and ‘Entropy based Restricted Genetic Approach’. The optimization is based upon the Total Costs of the query. The outputs of the stochastic DSS query optimizers are compared with the results of EAQO. While optimizing the distributed DSS queries, the focus is to minimize the requirement of system resources essential to exe- cute the distributed DSS query. For stochastic approaches, it is very difficult to confine the values of different GA parameters. In SGQO, NGQO, RSQO and ERSQO, several experiments are accomplished by varying the different parameters of genetic approach such as size or population, number of gener- ations, crossover rate, and mutation rate. Empirically, it is observed that the optimal value of Total Costs for the above set of distributed database queries is obtained with the follow- ing statistics of genetic parameters [20,21].


The results and analysis of DSS queries are described in the next section.

Results and discussions

An effort has been made to analyze and improve the design of stochastic DSS query optimizer [32]. A number of experiments
Costs for a set of distributed DSS queries obtained using the above said query optimization approaches. The Total Costs is measured in seconds. To avoid any discrepancy in the results of stochastic approaches, an experiment is performed several times and the average of the results has been taken.
From Table 2, it is observed that in general, Total Costs of distributed DSS query increases when number of join opera- tions is increased. It was observed that the Total Costs of dis- tributed DSS query produced by ERSQO approach is consistently less than that of stochastic approaches (SGQO, NGQO, RSQO) and Entropy based Restricted Stochastic Query Optimizer. In other words, EAQO always found the optimal solution for Operation Site Allocation problem. Fig. 2 repre- sents the values of Total Costs of a set of distributed DSS queries obtained when the queries are optimized using four dif- ferent approaches viz. SGQO, NGQO, RSQO and ERSQO.
Fig. 2 represents the quality of solution in terms of Total Costs with respect to the results quality of exhaustive enumer- ation approach. From Fig. 3, observation is that the solutions of operation site allocation problem of DSS query obtained using SGQO are 20% less optimal than exhaustive enumera- tion query optimizer. Novel Genetic Approach of ‘Sevinc and Cosar’ improved the solution quality in terms of Total Costs of SGQO up to 5%. The optimal solution produced by NGQO is 15% less optimal than the solution produced by EAQO. RSQO also improved the results of NGQO by up to 3%, i.e. the solutions produced by RSQO are 12% less optimal than that of EAQO. ERSQO further improved the solution quality of RSQO by 5%. Thus, the quality of the results produced using ERSQO is very close to that of EAQO. To summarize, by using Entropy based Restricted Stochastic Query Optimizer, the Total Costs  of  DSS  query in distributed  database





100.00

95.00

90.00

85.00

80.00
Quality of Solution of Different Optimization Techniques







DSS1  DSS2  DSS3  DSS4  DSS5  DSS6  DSS7  DSS8  DSS9 DSS10
A Set of Experimental DSS Queries



SGQO NGQO RGQO ERSQO

Figure 2	Stochastic versus exhaustive enumeration query optimizer.





25000
20000
15000
10000
5000
0
Analysis of Runtime Required to Find Optimal Solution








1	2	3	4	5	6	7	8	9	10
A Set of Experimental DSS Queries


EAQO  SGQO  RSQO  NGQO  ERSQO

Figure 3	Runtime analysis of different stochastic approaches.


environment was reduced up to 13%, 8% and 6% as compared to Rho and March (SGQO), Sevinc and Cosar (NGQO) and Restricted Stochastic Query Optimizer (RSQO) respectively.
Fig. 3 represents the runtime required to find an optimal solution for operation site allocation problem of DSS query using different approaches.
From Fig. 3, it is concluded that Exhaustive Enumeration (EAQO) strategy can be used for simple DSS queries, as the runtime increased at an incredible rate for large and complex DSS queries. However, the runtime of SGQO, NGQO, RSQO and ERSQO remained constant or increased very slowly. Therefore, independent of the number of join operations, all the different stochastic genetic approaches work effectively for both simple and complex queries. Moreover, from Fig. 3, it is clear that the curve for all the stochastic query optimizer lies on a single line, as there is insignificant or no variation in their corresponding values.
Analysis of the effect of data replication over total costs

Initially, the data were supposed to be replicated on two differ- ent sites of a distributed database system. In this section, an effort has been made to examine the effect of data replication on the optimization process of the distributed decision support system queries. Here, two extreme cases of data replication are considered as given below:

Case I: When 20% data is replicated. Case II: When 90% of data is replicated.

Several experiments are performed to examine the effect of data replication on the usage of system resources required to execute the query i.e. the Total Costs of distributed DSS query. The experiments are carried out by using four different



4
3.5
3
2.5
2
1.5
1
0.5
0
Effect of Data Replication on ver Total Costs of DSS Query









DSS1  DSS2  DSS3  DSS4  DSS5  DSS6  DSS7  DSS8  DSS9 DSS10
A Set of DSS Queries







SGQO NGQO RGQO ERSQO

Figure 4	Analysis of effect of replication factor over total costs of DSS queries.


stochastic approaches viz. SGQO, NGQO, RSQO and ERSQO. From the experimental results, it was found that by increasing the replication rate from 20% to 90%, the Total Costs of a DSS query can be further optimized. For a set of experimental DSS queries, the Total Costs was reduced by 1.5%, 1.7%, 2% and 3.5% by using SGQO, NGQO, RSQO
and ERSQO respectively. Fig. 3 represents the effect of high factor  on  different  stochastic  DSS  query





6.00
Total Costs versus Number of Join Operations using ERSQO


5.00

4.00

3.00

2.00

1.00


0.00


1	2	3	4	5	6	7	8	9	10

Figure 5	Scatter diagram of total costs and number of join operations.


Analysis of Variation in the Different Runs of Experiment
4
3
2
1
0

3.8

DSS1	DSS2	DSS3	DSS4	DSS5	DSS6	DSS7	DSS8	DSS9	DSS10
A Set of Experimental DSS Queries
 Variation in the Results of SGQO  Variation in the Results of NGQO  Variation in the Results of RGQO  Variation in the Results of ERSQO
Figure 6	Variation analysis of different DSS query optimizers.



Analysis of correlation between number of join operations and total costs

Number of experiments has been conducted on a set of dis- tributed DSS queries to establish the relationship between join operation and the Total Costs of query using ERSQO. Table 3 shows the value of number of join operations and the Total Costs of the distributed DSS queries.
Fig. 5 represents the scatter diagram between the number of join operations and the Total Costs of the DSS query as gen- erated by ERSQO.
From Fig. 5, a positive correlation is remarked between a number of join operations and the Total Costs of DSS query as generated using ERGA. In this case, Pearson’s Coefficient of Correlation(r) is 0.997. Therefore, a strong relationship between join operations and the Total Costs has been wit- nessed. To analyze the accuracy level of different stochastic DSS query optimizers, the analysis of variation has been car- ried out. The experiment for each DSS query is repeated ten times for different approaches and the variation among the dif- ferent results of each experiment is examined. The study reveals that Entropy based Restricted Stochastic DSS query optimizer again outperforms other stochastic approaches. For a set of ten different experiments distributed DSS queries, the variation in the results is up to 3.8%, 2.8%, 2.55% and 2.2% for SGQO, NGQO, RSQO and ERSQO respectively. The variation is represented in Fig. 6.

Conclusion

Decision support system queries process massive amount of data (in GigaBytes, PetaBytes or even more). For a distributed DSS query, system resources required to execute the query is of major concern. Therefore, DSS queries are optimized on the basis of Total Costs (Sum of input output costs, processing costs and communication costs). The proposed system (RSQO & ERSQO) designs a model to reinforce the performance of a distributed DSS query. The intention was to quickly generate the best possible DSS query operation allocation scheme. A simulator was developed to decipher the operation site alloca- tion problem for a set of distributed DSS queries. A set of adhoc DSS queries is examined based upon Total Costs and runtime by using different query optimizers viz. EAQO, SGQO, NGQO, RSQO and ERSQO. It is observed that the quality of solution (Total Costs) in finding an optimal query execution plan was not so good in SGQO and NGQO as com- pared to exhaustive enumeration approach. The proposed RSQO improves the quality of solution of SGQO and NGQO by 7% and 3% respectively. To further improve the quality of stochastic query optimizer, the idea of ‘Havrda and Charvat’ entropy has been incorporated with the stochastic approach. It was experimentally found that the use of Havrda and Char- vat entropy improves the quality of SGQO, NGQO and RSQO by 12%, 8% and 5% respectively. Moreover, the Total Costs of the distributed DSS query is also affected by the replication factor of distributed database system. By increasing the repli- cation rate from 20% to 90%, the Total Costs of DSS query was reduced by 1.5%, 1.7%, 2% and 3.5% by using SGQO, NGQO, RSQO and ERSQO respectively. It was ascertained that for distributed DSS queries, Entropy based Restricted Stochastic Query Optimizer better achieved the conflicting
goals of high quality (Total Costs) and low time complexity (Runtime). In terms of solution quality, ERSQO outperformed SGQO, NGQO and Restricted Stochastic Query optimizer as well. In addition to this, a statistical analysis of number of join operations and the Total Costs of DSS query shows that a pos- itive correlation exists between the number of join operations and the Total Costs of DSS query. Moreover, ERSQO shows more consistent results as compared to other stochastic query optimizers.

Future scope

Further, research is needed to be carried out to automate the transformation process in which a ‘SQL’ based query automat- ically generates its query tree before the optimization process starts. The design of entropy based stochastic DSS query opti- mizer can be further improved by examining the effect of dif- ferent selection techniques of genetic approach. The results of the proposed approach can be compared and contrasted with other nature inspired evolutionary optimization techniques. One can also analyze the effect of data allocation and access policies for optimization operation of DSS queries.

Conflict of interest

Authors declare no conflict of interest.

References

Hevener AR, Yao SB. Query processing in distributed database systems. IEEE Trans. Softw. Eng. 1979;5(3):177–87.
Ceri S, Pelagatti G. Allocation of operations in distributed database access. IEEE Trans. Comp. 1982;31(2):119–29.
Chen Yan, Zhou Lin, Li Taoying, Yu Yinging. The semi-join query optimization in distributed database system. In: National Conference on Information Technology and Computer Science. Atlantis Press; 2012. p. 606–9.
Martin TP, Lam KH, Russel Judy I. An evaluation of site selection algorithm for distributed query processing. Comp. J. 1990;33(1):61–70.
Apers Peter MG, Hevner Alan N, Yao Bing S. Optimization algorithms for distributed queries. IEEE Trans. Softw. Eng. 1983; SE-9.1:57–68.
Ghaemi Reza, Fard Amin Milani, Tabatabaee Hamid, Sadeghi- zadeh Mahdi. Evolutionary query optimization for heterogeneous distributed database systems. World Acad. Sci., Eng. Technol. 2008;2:34–40.
Mor Jyoti, Kashyap Indu, Rathy RK. Analysis of query optimization techniques in databases. Int. J. Comp. Appl. 2012;47(15):5–9.
Sevinc Ender, Cosar Ahmat. An evolutionary genetic algorithm for optimization of distributed database queries. Comp. J. 2011;54 ():717–25.
Kayvan Asghari, Ali Safari Mamaghani, Mohammad Reza Meybodi, An evolutionary algorithm for query optimization in database, in: Innovative Techniques in Instruction, E-Learning, E-Assessment and Education, 2008, pp. 249–254.
Chande Swati V, Sinha Madhvi. Genetic algorithm: a versatile optimization tool. BVICAM’s Int. J. Inf. Technol. 2008;1(1):7–12.
Panicker Shina, Vijay Kumar TV. Distributed query plan gener- ation using multi-objective genetic algorithms. World Scient. J. 2014;2014:1–17.
Johann Christoph Fregtag, The Basic Principles of Query Optimization in Relational Database Management System, Euro-



pean Computer Industry Research Centre Germany, Internal Report IR-KB-59, 1989, pp. 1–15.
M. Tamer Ozsu, Valduries Patrick, Principles of Distributed Database System, second ed., Pearson Education (chap. 1–6).
March, Rho ST. Allocating data and operations to nodes in distributed database design. IEEE Trans. Knowl. Data Eng. 1995; 7(2):305–17.
Kumar TV, Singh V, Verma AK. Distributed query processing plan generation using genetic algorithm. Int. J. Comp. Theory Eng. 2011;3(1):38–45.
Goldberg David E. Genetic Algorithm in Search, Optimization & Learning. New Delhi: Pearson Education; 1999 (chap. 1).
Paulinas Mantas, Usˇ inskas Andrius. A survey of genetic algo- rithms applications for image enhancement and segmentation. Inf. Technol. Control 2007;36(3):278–84.
Carlos Alberto Gonzalez Pico, Roger L. Wainwright, Dynamic scheduling of computer tasks using genetic algorithms, in: Proceedings of the First IEEE Conference on Evolutionary Computation IEEE World Congress on Computational Intelli- gence, Orlando, 1994, pp. 829–833.
Omara Fatma A, Arafa Mona M. Genetic algorithm for task scheduling problem. J. Paral. Distrib. Comput. 2010;70(1):13–22.
Karegowda Asha Gowda, Manjunath AS, Jayaram MA. Appli- cation of genetic algorithm optimized neural network connection weights for medical diagnosis of Pima Indians diabetes. Int. J. Soft Comput. 2011;2(2):15–23.
Hill Anthony M, Kang Sung-Mo. Genetic algorithm based design optimization of CMOS VLSI circuits. Lecture Notes in Computer Science 2005;866:545–55.
Lienig J. A parallel genetic algorithm for performance-driven VLSI routing. IEEE Trans. Evolution. Comput. 1997;1(1):29–39.
Man KF, Tang KS, Kwong S. Genetic algorithms: concept and applications. IEEE Trans. Indust. Electron. 1996;43(5):519–34.
Du Jun, Alhajj Reda, Barker Ken. Genetic Algorithm based approach to database vertical partition. J. Intell. Inf. Syst. 2006;26:167–83.
Kapoor JN. Measures of Information and Their Applications. Wiley Publishers; 1994.
Zhou Rongxi, Cai Ru, Tong Guanqun. Applications of entropy in finance: a review. Entropy 2013;15(11):4909–31.
Hien To, Kuorong Chiang, Cyrus Shahabi, Entropy-based histogram for selectivity estimation, in: CIKM, 2013, pp. 1939– 1948.
Cornell Douglas W, Yu Philip S. On optimal site assignment for relations in the distributed database environment. IEEE Trans. Softw. Eng. 1989;15(8):1004–9.
Pramanik Sakti, Vineyard David. Optimizing join queries in distributed databases. IEEE Trans. Softw. Eng. 1988;14(9): 1319–26.
TPS-DS Benchmark Report, 2012 <www.tpc.org/tpcds/spec/ tpcds_1.1.0.pdf> (accessed on 25/04/2013).
Sarjo, Kapila, Kumar Dinesh, Kanika. A genetic algorithm with entropy based probabilistic initialization and memory for auto- mated rule mining. Adv. Comp. Sci. Inf. Technol. Commun. Comp. Inf. Sci. 2011;131:604–13.
Drenick PE, Smith EJ. Stochastic query optimization in dis- tributed databases. ACM Trans. Database Syst. 1993;18(2): 262–88.
