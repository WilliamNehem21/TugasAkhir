Electronic Notes in Theoretical Computer Science 46 (2001)
URL: http://www.elsevier.nl/locate/entcs/volume46.html 16 pages


An Elementary Algorithm for Digital Arc Segmentation

David Coeurjolly and Laure Tougne 1
Laboratoire ERIC Universit´e Lumi`ere Lyon 2 5 av. Pierre Mend`es-France 69676 Bron, France
Yan G´erard and Jean-Pierre Reveill`es 2
Laboratoire LLAIC1 IUT Clermont 1
Universit´e d’Auvergne Clermont 1
B.P. 86
63172 Aubi`ere France


Abstract
This paper is concerned with the digital circle recognition problem and more pre- cisely with the circular separating algorithm. It tries to go further in implementation details, giving pseudo-code algorithms for the main points, and avoids using the so- phisticated machinery coming either from Computational Geometry or from Linear Programming found in previous papers on this subject. After recalling the geomet- rical meaning of the separating circle problem, we present an incremental algorithm to segment a discrete curve into digital arc.
Keywords: digital arc recognition, arc separability, digital circle, digital curvature.


Introduction
Euclidean shape recognition is an important topic of Discrete Geometry. Many works have been done for straight lines [12,5], planes [4,17] and algorithms become more and more efficient. Some solutions exist for higher order objects such as conics [14] or general polynoms [8] but a lot of further developments remains to be done.

1 Email: {dcoeurjo,ltougne}@univ-lyon2.fr
2 Email: {reveil,gerard}@llaic.u-clermont1.fr
◯c 2001 Published by Elsevier Science B. V. Open access under CC BY-NC-ND license.


This paper is concerned with the digital circle recognition problem and more precisely with the circular separating algorithm. It tries to go further in implementation details, giving pseudo-code algorithms for the main points, and avoids using the sophisticated machinery coming either from Computa- tional Goemetry or from Linear Programming found in previous papers on this subject.
After recalling the geometrical meaning of the separating circle problem, we present an elementary algorithm based on duality, the formal approach to Hough transform. This algorithm is then applied to find a partition of any 8- connected curve in digital circular arcs. Such an algorithmallows us to define and compute the local curvature to a digital curve.

The Separating Arc Problem
Let S and T be two finite sets of points of Z2, we say that they are circularly separable if there exists an Euclidean circle C(ω, R) centered at ω and with radius R, such that:
∀s ∈ S, ∀t ∈ T , we have s ∈ C(ω, R) and t /∈ C(ω, R)
If such a circle exists for given S and T , its center ω necessarily satisfies the following inequalities:
∀s ∈ S, ∀t ∈ T, dist(ω, s) < dist(ω, t)
where dist(a, b) denotes usual Euclidean distance between points a and b.
This means that the set acd(S, T ) (i.e. arc center domain) of centers of circles separating sets S and T is equal to the intersection of half planes defined by perpendicular bisectors of points s and t containing points of S. If for all s in S and for all t in T , H(s, t) denotes the half-plane bounded by bisector of s and t and containing s, this convex set is thus defined by


acd(S, T )= 
s∈S,t∈T
H(s, t)

Such a convex set is also called generalized Voronoi cell. The figure 1 shows an example of such a set acd(S, T ) where the points of S are white and the points of T are black.
Various algorithms exist for the construction of set acd(S, T ) [7] [11] [2] [3], but we shall present a very elementary one using duality, (the theoretical content of the Hough transform), which could reveal useful for the Imagery applications which require the lightest possible implementations.

Points-lines duality
In order to simplify our use of duality let us suppose that the rightmost point
R of convex set acd(S, T ) is unique, and the same for its leftmost point L.




Fig. 1. Set acd(S, T ) of centers of separating circles.

Consequently, this set contains no vertical edge; such a restriction can be sim- ply disposed of by intersecting convex set acd(S, T ) with the eventual vertical lines as a last step of the algorithm.
The lower part of the positively oriented boundary of acd(S, T ) is a polyg- onal curve L−, between points R and L, and, similarly its upper part is the line L+ starting at L and ending at R.
Let us denote by v−,i = 0,...,m the vertices of L−, where v− = R and
i	0
− = L and similarly by v+,i = 0,..., n, the vertices of L+ where, this
time, v+ = L and v+ = R. In the same way edges of L− are denoted by
e−,i = 1,...,m and those of L+ are denoted by e+,i = 1,..., n.
i	i
Our uniqueness hypothesis about west and east vertices of acd(S, T ) im- 
plies that all equations of the lines defined by edges of this set can be written as
y = aix + bi
Due to the symmetry between upper and lower parts of acd(S, T ), we shall restrict our study to lines of the upper part L+ and leave the treatment of L− to the reader.
We now observe that polygonal curve L+ is contained in the lower envelope of lines associated to edges e+. If, moreover, equation of the line bounding half-plane H(s, t),s  S, t  T is written ax + by + c = 0, giving its normal
vector (a, b) the orientation of vector −→st, implies that the half-plane
H(s, t)= {M|−→st.−µ−M→ ≤ 0}
where µ is the midpoint of segment st, may also be defined by inequality


H(s, t)= {(x, y)|ax + by + c ≤ 0}.
Thus introducing the set Ineqs of all inequalities ax + by + c 0 associated with all cords −→st, s in S,t in T, we see that upper part L+ of acd(S, T ) is also defined by the subset of Ineqs where b > 0 (once again b = 0 is not allowed
because vertical lines are omitted); this subset is denoted Ineqs+. Lines of Ineqs+ having equations ax+by+c = 0 where b > 0, may be termed as upward oriented. Of course set Ineqs+ contains the set of lines which support edges of L+, both of them having the same lower envelope. Lines of the larger family
Ineqs+, are easily selected among bisectors of cords −→st, the main problem to
determine L+ is to find those which appear in their lower envelope.



D*





Primal space	Dual space



Fig. 2. Illustration of prop. 2.1.
Equations of lines of Ineqs+ may be written y = ax + b, with convenient
a and b, which allows writing inequalities of Ineqs+ as y ≤ ax + b.
Let us recall that duality is the geometrical process which maps line whose equation is y = ax + b to the point (a,  b) and the point (u, v) to the line y = ux  v. It is convenient to denote by D∗ the dual of line D and by P∗ the line dual of point P . The figure 2 shows an example of dual elements. It is easily proven that
Proposition 2.1 Point M = (u, v) of primal space belongs to half-plane ax + by + c <= 0, where b > 0, if and only if point (−a/b, c/b) lies beneath line M∗ of dual space whose equation is y = ux − v.
Both conditions are in fact equivalent to inequality au + bv + c ≤ 0.
From this it can be immediately deduced that if D, D', D” are three lines such that intersection point M = D' D” has coordinates M = (a, b), then lower envelope of D, D', D” takes value b if x = a if and only if point D∗ is located below the line M∗ dual of point M , (see Fig. 2).
Following result is an immediate consequence of this observation.
Proposition 2.2 Let F be a set of lines (no one of which is parallel with Oy axis) and F the set of points which are the dual transforms of the lines of F. Then duality maps lines of the lower envelope of F in a one to one way with the vertices of the upper part of the convex hull of F .














Primal space	Dual space



Fig. 3. Lower envelope of a family of lines corresponds to the vertices of the upper part of the convex hull of their dual transforms.

Using duality the lower envelope of a family of lines can be obtained by constructing the convex hull of their transforms. Moreover duality transform of the edges of this hull are the intersection points of the envelope lines.
Corollary 2.1 The set acd(S, T ) can be obtained in
card(S).card(T ).log(card(S).card(T ))
time using only elementary primitives like points-lines duality and 2D convex hull.
Fromprop. 2.1. it follows that construction of the upper boundary L+ of acd(S, T ) is clearly obtained in S.T.log(ST ) time; the same can be said for its lower boundary L−. Intersection of these polygonal curves takes at most O(S.T ) time; the result follows.
We can present the basic algorithm:

Algorithm 1: An elementary separating arc algorithm
Input: Two non-empty sets S and T
Output: acd(S, T )
Let Ineqs be the set of half planes H(s, t) with s	S and t	T Ineqs+ = ax + by + c	0	Ineqs / b < 0
Ineqs− =  ax + by + c	0	Ineqs  /  b > 0
C+ = convexhull(dual(Ineqs+)) C− = convexhull(dual(Ineqs−)) Extract L+ as the lower part of C+ Extract L− as the upper part of C−
Compute the intersection between L+ and L−
Return the obtained polygon acd(S, T )



Improvements of the separating circle algorithms
Several observations are valuable if the former algorithm has to be effectively implemented.

Reducing S
If a circle separating sets S and T exists, this circle being convex contains convex hull of S. Thus replacing set S by the set of vertices of its convex hull does not change the solution of the circular separation problem. Cost of this processing being O(S.log(S)) it does not increase complexity of the overall algorithm.

Reducing T
In the same way let us consider two points t, t' of set T and let us suppose that the convex hull of S  t  contains t', then if there exists a circle containing S which does not contain t' then this circle does not contain t.
This leads to process T points as follows:
adjoint a point t  T to the convex hull of S and remove t out of T if hull(S, t) contains another point of T . A simple O(Tlog(T )) algorithmcan be devised to make this reduction. An even more elaborate process, presented in 3.1, will associate a set T satisfying this property to the given set S.

Relation with Vorono¨ı diagrams
This point shows a very simple relation with the previous more sophisticated approach of the separating circle problem [7]. Let us suppose that set T is given and let us introduce points of S one by one; let s be such a point. In this case set acd( s ,T ) is obviously the Vorono¨ı cell of site s in the Vorono¨ı diagramof s  T ; let us denote by vor(s, T ) this convex polygon. We deduce from this remark that in the general case acd(S, T ) is the intersection of all vor(s, T ) when s takes all values of S, that is

acd(S, T )=	vor(s, T )
s∈S
Previous remark leads to another interesting geometric observation. Of course S and T are disjoint sets and a point s of S cannot lie on a line de- fined by two distinct points of T thus points of S belong to the open interior of the convex hull of T or are strictly exterior to that polygon. This shows, obviously, that the convex polygon vor(s, T ),s  S is bounded if and only if s is an interior point of the convex hull of T . This partition of points of S into two families, those having a bounded Vorono¨ı cell vor(s, T ) and the other ones, leads again to interesting coding simplification and improvement.
Let us now apply the previous results on discrete curves. The following section describes an arithmetical approach to compute the minimum number of necessary elements of S and T in order to separate the points that belong to the discrete curve (corresponding to S) fromthe other ones (corresponding to T ).

An Arithmetical Approach
Input description and Algorithms
We shall now present an incremental algorithm to cut a 8-connected discrete curve into pieces of circular digital arcs. Let us briefly describe this algorithm before we present the arithmetic properties of Z2 which will lead to crucial improvements on the complexity of this algorithm.
A first treatment, made with Debled’s linear polygonalization algorithm, divides C into digital line segments which are then gathered into strictly convex or concave (SCoC) parts denoted {Ci}1,...,k. This preprocess can be done in time O(n) where n denotes the number of pixels of C.
Then we compute the classical convex hull of each i. As a classical dis- cretization of ordinary convex continuous curves satisfies the Weakly Exter- nally Visible property [15] these convex hulls, denoted Γi 1,...,k can be ob- tained in linear time, for example by the Three Coins algorithm [9,13].
Without reducing the problem we are thus led to consider 8-connected curves which are the discretization of convex polygonal lines. These are cut into one or several pieces of digital circular arcs (or quasi-circular arcs for short). Let Γ be one such convex polygonal curve; its partition into quasi- circular arcs is done defining suitable sets S, T of interior and exterior points associated to Γ. Sets S, T are initialized so that acd(S, T ) = and are in- creased until this separating domain becomes empty, where a new circular arc is started.
Let v1, v2,..., vr denote Γ's positively ordered vertices and fi denotes the linear functional induced by successive vertices vi, vi+1 such that Γ's other vertices satisfy fi(v) ≤ 0. Integer points x which satisfy one of the inequalities f1(x) > 0, f2(x) > 0,..., fn−1(x) > 0 are said to be exterior to Γ; interior integer points of Γ are defined as usual. Remark that functional fn defined by vn, v1, is missing because points satisfying fn(x) > 0 do not need to be considered. Of course S should be composed of interior points of Γ and T of its exterior points but, if it is obvious that S can be reduced to Γ vertices (cf. 2.2.1), reducing T efficiently is a little more subtle than what is indicated in
2.2.2 and needs considering special points lying close to any integer vector.
Let us denote by −→u  = (a, b)T a directional vector of a given fi such that gcd(a, b) = 1. Let us consider the vector −→v be a unimodular vector to −→u  (i.e. det(−→u, −→v )= ±1).
Definition 1 A point of integer coordinates (x, y) is a weakly exterior point (or a Bezout’s point) of the discrete line defined by −→u if and only if:

 x 	−→	−→

−→ −→

	 =

v + k u	with	k ∈ Z	and	det( u, v )= ±1

and (x,y) is exterior to Γ.

As we constraint the separating arc to go through the extremities, we can remark that it is sufficient to be sure that the weakly exterior point nearest fromthe middle of the edge is over the separating arc to conclude that all the others are (see Figure 4). Consequently, we reduce the number of constraints to one, whatever the length of the segment is. Thus, for a given edge with extremities vi and vi+1, and the excluded exterior point E, the convex set solution is defined by acd( vi, vi+1 , E ). The figure 5 shows an example of piece of discrete curve, its associated convex hull and weakly exterior point.

Fig. 4. Illustration of the choice of the nearest exterior point from the middle of an edge. All other points are also excluded.



Excluded points






Fig. 5. An example of piece of discrete curve and its associated convex hull and the weakly exterior points
In the following parts, we first present a elementary algorithm to construct the arc center domain associated to a SCoC part and then we present an incremental algorithm to construct the maximum domains of a general discrete curve.
Strictly Convex or Concave (SCoC) part case
Let us first consider a sequence of edges of a SCoC i (Figure 5 shows an example of a SCoC). We consider all the edges at the same time. In order to construct the convex set associated to them, we have to consider the union of the constraints generated by each one. The algorithmis the following one:

Algorithm 2: A global separating arc algorithm on a SCoC curve
Input: a sequence of edges of Γ.
Output: the convex set acd(S, T ) (maybe empty)
S = ∅


T =
For each edge of the exterior part of the convex hull of Γ
Let (a, b, vi, vi+1) denotes the parameters of such a segment Let compute E the weakly exterior point
S := S + vi, vi+1
T := T + E
end for
Compute acd(S, T ) using the algorithm 1
Return acd(S, T )

If we denote by N the number of edge of the convex hull, we have to consider :
(N + 1) extremity points,
N weakly exterior points.
Consequently, we are leaded to consider the respective sets of points S and T such that card(S) = N + 1 and card(T ) = N . We finally obtain O(N 2) constraints.

Incremental algorithm
In this case, we apply the Debled’s algorithm to split the curve into SCoC parts. On each such parts, we incrementally consider the edges of the convex hull taking them one by one in order to compute the maximum arc center domain. When we go from SCoC piece to another, or when the next edge will lead to an empty domain, we store the current convex set as the maximum arc center domain and we continue with new one. We have the algorithm:

Algorithm 3: An incremental separating arc algorithm on a discrete curve
Input: A discrete curve
Output: An array of all the convex polygons
i := 0
For each  i part given by the polygonalisation algorithm on
S :=
T :=
Γi:=convexhull(Ci)
For each exterior edges vjvj+1 of Γi
Let (a, b, vj, vj+1) denotes the parameters of such a segment Let compute E the weakly exterior point
S := S + vj, vj+1
T := T + E
Compute newacd := acd(S, T ) using algorithm 1
If newacd =	then we define a new domain
S := ; T :=
acd[i] := prevacd i := i +1 
else
prevacd := newacd


end for
acd[i] := prevacd
i:=i+1;
end for Return acd

Just remark that in this case, a priori, for each generated new segment we have to consider all the intersections between the half planes of the current segment and all the previous ones. As we have O(N 2) constraints at each of the N steps, we obtain O(N 3) constraints.
Using the part 2, let us do a complexity analysis of the previous algorithms.
Complexity analysis
If we remind the previous notations, n denotes the number of pixels of the discrete curve and N the number of edges of the convex hull of the curve. First, we use the well-known property:
Proposition 3.1 On a convex discrete curve, the number of edges of the con- vex hull is bounded by O( nlog(n)).
Using this proposition, we can give the complexity of previous algorithms.

Global algorithm complexity
Since we have shown that the number of constraints is in O(N 2), this leads to a linear number of constraints, with respect to n. In the following, we only consider SCoC discrete curve, indeed if the curve has got inflection points, the global separating arc convex is empty. This hypothesis can be checked in O(n) as a preprocessing. Hence, we can apply the algorithm1 to compute the vertices of the convex set, maybe empty, in O(nlog3(n)).

Incremental algorithm complexity
We have the following proposition:
Proposition 3.2 Let n denote the number of pixels of a discrete curve, the complexity of the incremental algorithm (Alg. 3) is O(nlog3(n)).
Proof: In this algorithm, since we compute the convex set for each new in- serted edge, a basic complexity analysis leads to n (for a general discrete curve, the number of edges is in O(n)) tests on O(N 2) linear constraints and thus to a complexity in O(n2log3(n)). However, we can transform the algorithm 1 into an incremental one. Furthermore, we only use classical com- putational geometric tools on which a lot of literature can be found [3]. So, we can reuse an incremental convex hull algorithm on which the update cost is in O(log(n)). Hence, if we have computed a convex set acd(S, T ) and if we insert a new constraint, the updates of convex hulls C+ and C− can be done in O(log(card(S)card(T ))). All other processes of algorithm 1 can

be easily designed in an incremental form keeping the update complexity in O(log(card(S)card(T ))). Hence, each time we test a new edge, we update the polygon acd(S, T ) in log(n). This leads to a global complexity in O(nlog3(n)).
Note that the bound N = O(√nlog(n)) is a pessimistic one, we expect a bound in O(√n) that will lead to a complexity in O(nlog(n)) for both
algorithms.
Let us notice the important reversibility property.

Reversibility
Let us consider a piece of the discrete curve , denoted by P , such that the corresponding convex set is not empty. This convex set characterizes all the arcs that separate P from the other points of the plane. These arcs have the following property:
Proposition 3.3 Let acd(S, T ) be the arc center domain defined by a piece of a discrete curve C and let p be a point in acd(S, T ). For each Euclidean arc A of center p and radius r ∈ [minX∈P dist(c, X), minY ∈/P dist(c, Y )[, the OBQ (Object Boundary Digitization) digitization [10] of A is exactly the considered piece of C.
This property is proved by construction of the domain. To be more precise and since a lot of digitization processes can be found, we consider here a inner digitization, that is the set of discrete points closest to the center p.
We can use the previous algorithms to compute the curvature at each point of a discrete curve.

Application to curvature estimation
Let us suppose our goal to be the curvature estimation at each point of the discrete curve . A classical way to define the curvature at a point of a curve is to consider the inverse of the osculating circle radius [1], this computation can be done considering the best fitting circle locally at each point of the curve. In the previous sections, we have shown an algorithmto recognize digital arc pieces from a discrete curve based on convex hull vertices and edges. For the curvature estimation problem, we use the same tools but with specific characteristic points:
Definition 2 Let M be a point of C, we define k(M ) the curvature at M by:
k(M )= sign		1	
min({dist(c, M )) | c ∈ acd({M, L, R}, {Lext, Rext})
Where L, R, Lext, Rext and sign are defined by:
[ML] and [MR] are discrete straight lines

Lext the weakly exterior point associated to the segment [ML] exterior to the polyline (LMR)
Rext the weakly exterior point associated to the segment [MR] exterior to the polyline (LMR)
L and R are maximal for the acd problem, it means that L (resp. R) is the farthest point on C from M such that the arc center domain acd({M, L, R},
{Lext, Rext}) is not empty.
sign is +1 or -1 according to the convexity or concavity of the polyline
(LMR)
This curvature is the inverse radius associated with the closest vertex of acd({M, L, R}, {Lext, Rext ) to M , that defines the minimum curvature radius and thus the maximum curvature at M . Since M, L and R may not be convex hull points, some points of [MR] or [ML] might be outside the computed sep- arating arcs. This makes the process not reversible but this is not important in the case of local curvature computation.
We have an elementary algorithm to estimate the curvature at a point of a curve.

Algorithm 4: Curvature estimation at a point of a discrete curve
Input: A discrete curve	and a point M
Output: the estimated curvature of M
Note : the discrete curve is stored as a double-link list L:=M→prev
R:=M→next
Compute Lext and Rext
While (acd( M, L, R , Lext, Rext ) = ) AND ([M L] is a discrete straight line) AND ([MR] is a discrete straight line) do
L:=L→prev R:=R→next
Compute Lext and Rext
end while
If acd = ∅ then we come back to a non empty acd
L:=L→next R:=R→prev
Compute Lext and Rext
Let A be the arc defined by the closest center of the acd({M, L, R}, {Lext, Rext}) to M
Return the inverse radius of A

Since the acd computation is only based on five points the first test of the while loop can be done in a constant time but the straight line recognition can be in O(n) in a basic complexity analysis. In order to estimate the curvature at each point of the curve, we must apply the above algorithm to each point of the curve:



Algorithm 5: Curvature estimation at each point of a discrete curve
Input: A discrete curve
Output: the estimated curvature graph K
For each point M of the curve
Let store in K[M ] the curvature estimation using Alg. 4 at M
end for Return K

A basic complexity analysis of Alg. 5 will lead to an O(n2) complexity. However, we can use discrete tangents defined by [16] in order to bound the discrete segment growth. As a matter of fact these discrete tangents are defined by the longest discrete segment at a point of  and thus half-tangent at M define the longest possible segment for [ML] and [MR]. Since these discrete tangents can be computed in O(n) at each point of the curve [6] we can bound the [ML] and [MR] in the same complexity.
If the extreme L and R lead to an empty acd, we have to backtrack on the segments using a dichotomy process in order to find appropriated L and
R. Each tested points in the recursive process will take O(log(n)) to check if the acd is empty or not (i.e O(log(n)) to compute the new equation of the segment and O(1) to test the acd). We finally obtain a global complexity in O(nlog(n)2).
The figure 6 represents an example of the acd obtained from the small points in black (T) and white (S). Notice that the tangents come from the circle of center (170, 30) and of radius (25) and, the estimated center using the above algorithmis well located.

Fig. 6. An example convex set obtained from two half-tangents computed on a discrete circle of center (170,30).

As in [1], some complementary experiments would be necessary to compare this new curvature estimation algorithm to previous ones.

Let us now present some experiments we have made in order to test the accuracy of the global approach.

Some experiments
The first experiment concerns digital circle center recovering; a digital circle C being given we try to find a point M of R2 (and a real number R) such that the discretization of the circle of center M and radius R gives C back.To obtain this, we compute its convex hull and our goal is to test the number of edges that are necessary to find a good approximation of the radius of the circle. In figures 7, 8 and in table 1, we show the results obtained for a circle of radius 100. We extract from the shape of the convex set the mid point and the standard deviation of its vertices. We can remark that the mid point fastly converges to the real center and the standard deviation also decreases very quickly.


7

6

5

4

3

2

1

0 0	5	10	15	20	25	30	35	40
Number of edges
Fig. 7. Euclidean distance between the center of a discrete circle of radius 100 and the mid point of acd(S, T ).



Table 1
Some numerical results on the mid point localization and the standard deviation considering the convex set vertices on a circle of radius 100.


  
Fig. 8. Some examples of the convex set evolution when we increase the number of edges on the circle of radius 100.
Conclusion and future works
Purposed approach uses elementary geometrical notions only : finding circles separating two sets of points and one obvious property of Z2 geometry : Be- zout’s points. This allows conceiving of various simple algorithms leading to efficient programs. If query for a single separating circle is the need, first part of our work is enough; if segmentation of a digital curve into circular arcs is wanted, the knowledge of all arc centers domains is necessary to recognize points where it becomes empty, then our incremental version of the second part can be the tool. Let us insist, at this point, on the quite reasonable complexity increase beyond linearity of this incremental algorithm; linearity is already reached by the query of only one separating circle when, here, all these circles are computed.
Many trails seem interesting to follow after this work such as the study of variations of the local digital curvature of the discretization of algebraic curves, comparison of our approach with those using higher order derivatives in the definition of discrete curvature, or the recognition of higher differential invariants.
Beside these most urgent tasks we are interested as much by theoretical developments like higher dimensional generalizations as by the practical sides like optimizing algorithms and resulting codes.

References
Coeujolly, D., S. Miguet and L. Tougne, Discrete curvature based on osculating circle estimation, in: International Worshop in Visual Form IV, 2001.
Damaschke, P., The linear time recognition of digital arcs, Pattern Recognition Letters (1995), pp. 543–548.
de	Berg,	M.,	M.	van	Kreveld,	M.	Overmars	and	O.	Schwarzkopf, “Computational Geometry,” Springer-Verlag, 2000.
Debled, I., “Etude et reconnaissance des droites et plans discrets,” Ph.D. thesis, Universit´e Louis Pasteur - Strasbourg (1995).


Debled-Rennesson, I. and J.-P. Reveill`es, A linear algorithm for segmentation of digital curves, Parallel Image Analysis: Theory and Applications (1993), pp. 73– 100.
Feschet, F. and L. Tougne, Optimal time computation of the tangent of a discrete curve : Application to the curvature, in: Discrete Geometry for Computer Imagery, 1999.
Fisk, S., Separating points sets by circles, and the recognition of digital disks, IEEE Transaction on Pattern Analysis and Machine Intelligence 8 (1986),
pp. 554–556.
G´erard, Y., “Contribution a` la g´eom´etrie discr`ete,” Ph.D. thesis, Universit´e
d’Auvergne - Clermont-Ferrand I (1999).
Graham, R. L., An efficient algorithm for determining the convex hull of a ﬁnite planar set, Information Processing Letters 1 (1972), pp. 132–133.
Jonas, A. and N. Kiryati, Digital representation schemes for 3d curves, Pattern Recognition 30 (1997), pp. 1803–1816.
Kovalevsky, V. A., New deﬁnition and fast recognition of digital straight segments and arcs, Proceedings of the tenth international conference on Pattern Analysis and Machine Intelligence (1990).
Rosenfeld, A., Digital straight lines segments, IEEE Transactions on Computers (1974), pp. 1264–1369.
Sklansky, J., Measuring concavity on a rectangular mosaic, IEEE Trans. Comput. 21 (1972), pp. 1355–1364.
Sladoje, N. and J. Zuni´c, Ellipses estimation from their digitization, , 1347, 1997, pp. 187–198.
Toussaint, G. T. and D. Avis, On a convex hull algorithm for polygons and its application to triangulation problems, Pattern Recognition (1982).
Vialard, A., Geometrical parameters extraction from discrete paths, Discrete Geometry for Computer Imagery (1996).
Vittone, J., “Caract´erisation et reconnaissance de droites et de plans en g´eom´etrie discr`ete,” Ph.D. thesis, Universit´e Joseph Fourier-Grenoble 1 (1999).
