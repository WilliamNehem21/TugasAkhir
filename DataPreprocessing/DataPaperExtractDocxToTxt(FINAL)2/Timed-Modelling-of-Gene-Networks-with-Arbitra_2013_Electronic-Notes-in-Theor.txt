Available online at www.sciencedirect.com


Electronic Notes in Theoretical Computer Science 293 (2013) 67–81
www.elsevier.com/locate/entcs

Timed Modelling of Gene Networks with Arbitrarily Precise Expression Discretization
S. Van Goethem, J.-M. Jacquet
Faculty of Computer Science, University of Namur Namur, Belgium
L. Brim, D. Sˇafra´nek 1
Faculty of Informatics, Masaryk University Brno, Czech Republic

Abstract
In this paper, a novel approach to discrete modeling of gene regulatory networks is presented. The approach is based on timed automata and is new in: (i) reflecting discrete abstraction of gene expression with arbitrary granularity, (ii) combining boolean logic with approximation of Hill kinetics. This is achieved by introducing delays that change dynamically with respect to current activity levels of regulating genes. The approach is implemented in UPPAAL and evaluated on benchmark models and on a biological case study.
Keywords: Discrete modeling, gene regulatory network, Boolean logic, UPAAL


Introduction
The central topic in systems biology is analysis of dynamics imposed by complex interaction networks. The elementary layer of these networks is formed by genes and their mutual interactions through transcriptional regulation [15]. This phe- nomenon is captured by gene regulatory networks (GRNs). These networks control gene expression dynamics running on a relatively slow time-scale while determining functional modes of the cell.
There are several conceptually different approaches for modelling of GRN dy- namics.  The most common approach is that of ordinary differential equations

1 The work has been partially supported by the Czech Grant Agency grant no. GAP202/11/0312 and by EC OP project No. CZ.1.07/2.3.00/20.0256.

1571-0661© 2013 Elsevier B.V. Open access under CC BY-NC-ND license.
doi:10.1016/j.entcs.2013.02.019

(ODE) describing deterministic (population average) behaviour in continuous man- ner. Since even a simple interaction among two genes introduces a necessary non- linear term into the ODE of the affected gene, analytical solution of ODE models of GRNs is impossible, thus leaving simulation as the only practical method. Moreover, continuous models require quantitative knowledge in terms of kinetic coefficients, which are unknown and very difficult to measure in vitro. As a consequence, various abstraction approaches have been developed to make GRN models more convenient for analysis under data uncertainty [21,18,20,10,8].
All of these models are purely qualitative (and discrete) provided that the as- pect of time (resp. velocity of the dynamics) is entirely abstracted out, thus leading to strong approximations. However, although rates of individual processes in tran- scription are not known, they can be estimated synthetically to achieve behaviour observed in vitro. To this end, it appeared important to make a step back in the abstraction by extending discrete models with the quantitative aspect of time.
The most direct approach that appeared recently is that of Siebert et al. [17] further extended by Batt et al. [3]. It relies on timed automata implemented, in the former case, by employing the UPPAAL tool [4], and in the latter case, by employing IF tool suite [7]. The approach employs multi-value discrete model which is extended by time-delays representing deadlines for exiting individual discrete configurations of genes. Every discretized gene expression level in the system is statically assigned a minimal and maximal delay determining the allowed time range of exit deadline. Such a static treatment of delays is sufficient for boolean models with minimal number of levels considered in discrete abstraction of gene expression. However, to reflect the dynamics appropriately when the model precision is allowed to be set to arbitrary number of discrete levels, time-delays defined for a regulated gene should be dynamically sensitive to actual configuration (expression values) of regulating genes (regulators conﬁguration).
In [16], a general framework for abstracting continuous systems by timed au- tomata is introduced. Under that framework, an ODE model of dynamical system is rigorously transformed into a timed automaton representing over-approximation of continuous behaviour. However, supported non-linear ODE models must fit in the class of multi-affine systems. Since GRNs are modeled by means of higher non- linear systems based on Hill kinetics, the approach cannot be directly employed.
In a different context, another piece of work [6] closely related to our treatment presents a timed automata based approach to model signalling pathways with UP- PAAL. The approach is (under)approximative in terms of maximal and minimal delay being degraded to an exact delay. A significant contribution of the underlying model is that it makes delays sensitive to the actual configuration of signal states. A technical problem of the timed model employed is spurious instability coming from non-determinism in parallel processes controlling regulations. In particular, regulation processes generate discrete events driving the regulated genes to increase or decrease expression levels provided that production competes with degradation. Each event is repetitively generated with a particular non-zero rate. For example, a positively regulated gene has a high rate of production, but also a small non-

zero rate of degradation. Non-deterministic generation of increase and decrease events causes irregular gene expression profiles with oscillations over two adjacent expression levels. A detailed analysis of this problem is provided in [11] including extensions of the formalism that attempt to overcome the problem.
In this paper we present a new approach to timed modeling of GRNs that avoids problems mentioned above. In contrast to [16], our contribution lies on the com- putational side. In particular, we investigate construction of the timed model for Hill kinetics by using the ideas formalized in the piece-wise affine approximation. However, this paper is a preliminary step – we do not present a formal abstrac- tion technique, but provide an experimental evaluation of our treatment supported by a prototype tool chain. From the technical viewpoint, features of [3] and [6] are unified under our approach. In particular, we support arbitrarily precise dis- cretization of gene expression while treating delays dynamically. Conceptually, our model is based on incorporating rate control into the original discrete model [21] according to piece-wise affine model [18]. Instability problems encountered in [6] are eliminated. Additionally, our approach allows mixing of boolean operations over regulatory interactions with algebraic summation of their effects.
Many approaches to formalizing dynamics of gene networks have been identified in the domain of hybrid systems. The main idea is based on the observation that regulation function of a gene has a sigmoidal shape and therefore can be approx- imated by step-functions or ramp-functions [14,12]. Overall continuous dynamics of gene expression is abstracted into a finite number of local modes through which the (hybrid) system traverses according to the approximated sigmoidal regulatory control [10,2]. Mathematically, these approaches are based on piece-wise affine or piece-wise multi-affine models. Naturally, analysis methods developed for hybrid systems can be employed [9]. However, efficient quantitative analysis of hybrid systems is computationally demanding. Lesser precise models fitting the domain of timed automata can therefore present a suitable solution meeting the current biological knowledge.
Background
Gene Regulatory Networks
Topology of gene regulatory networks
Let G = {g1, ..., gn} be a set of genes, and let P = {p1, ..., pn} be a set of proteins. We consider that a protein pi is a product expressed from gi by transcription. Expression of gi can depend on concentration of some proteins in P which are transcription factors (TFs) regulating expression of gi. TFs that enhance expression of gi are called positive regulators (activators). TFs that inhibit expression of gi are called negative regulators (inhibitors).
We formally represent a GRN by a directed graph ×G, E⟩ with edges displaying regulations, E ⊆ G × G. Each edge is labelled with a sign +, resp. −, indicating the regulation type (activation, resp. inhibition). Considering an edge ×gi, gj⟩, gi represents the regulator and gj the regulated gene. An edge ×gi, gj⟩ ∈ E is denoted

eij, its label is denoted σij, σij ∈ {+, −}. An example of a GRN is depicted
in Fig. 1(ab). We use the notation P + = {pi ∈ P | eij ∈ E ∧ σij =j +j} and
P— = {pi ∈ P | eij ∈ E ∧ σij =j −j} for the set of all activators (resp. inhibitors) of gj.








g_a







g_b
(a)	(b)
tAA = 2, tAB =1 
KA,∅ =2 
KA,{A} =0 
KB,∅ =0 
KB,{A} =1 

(c)
Fig. 1. (a) An example of a network where a negatively self-regulated gene gA activates gene gB. (b) The respective GRN as a simple graph (the +-edge represents an activation, the —-edge represents an inhibition).
(c) Reachability graph generated for the given settings.

Discrete semantics of gene regulatory networks
For discrete (untimed) semantics of GRNs, we consider the boolean model of Ren´e Thomas [21]. In this model, the concentration of protein pi is discretely abstracted by the activity level li with li ∈ [0, ri] ⊂ N where ri is the maximal activity level of pi. Each edge eij ∈ E is associated a threshold tij (0 < tij ≤ ri) indicating minimal li such that eij is active (eij is active iff li ≥ tij). For ri > 1 it is assumed
∀k ∈ [1, ri] (∃j(eij ∈ E) ∧ (tij = k)), a convention reducing the number of consid- ered activity levels to a necessary minimum (in our framework later we relax this constraint).
The semantics of a GRN is determined by a regulatory logic defined as the set
{Ki,ρ | 1 ≤ i ≤ n, ρ ⊆ P + ∪ P—} where Ki,ρ denotes the target activity level of
j	j
gi when regulated by all proteins in the regulatory context ρ, 0 ≤ Ki,ρ ≤ ri. Ki,ρ
identifies a state towards which pi converges under regulatory context ρ.
Once the regulatory logic is set, the semantics of a GRN is defined as the transi-
tion system given as a tuple ×S, T, s0⟩ where S = Qn  {0, ..., ri} is the set of states
with s0 ∈ S being the initial state and T ⊆ S × S is the transition relation defined as follows.
First denote li(s) the activity level of gi in state s ∈ S. Assume eij ∈ E. We say that gi is a resource for gj in s if σ(eij) =j +j and li(s) ≥ tij, or σ(eij) =j −j and li(s) < tij. Let Re(s, gj) denote the set of all resources for gj in s. There is a transition s → sj ∈ T iff one of the following rules holds:
there exists j such that Kj,Re(s,gj ) > lj and lj(sj)= lj(s) + 1 (increase),
there exists j such that Kj,Re(s,gj ) < lj and lj(sj)= lj(s) − 1 (decrease).
Moreover, it is required that s differs from sj in the expression value of just one gene. This gives the widely-used asynchronous semantics [20,5]. Example of the transition system for a particular setting of regulatory logic is given in Fig. 1(c). Asynchronous semantics results in non-deterministic transition systems where non- determinism represents choice from the set of active regulatory contexts and selec- tion of the updated gene (asynchrony).

Non-trivial regulatory contexts represent multi-input logic operators for a regu- lated gene. Interpretation is boolean – a context is enabled/disabled by resources. In doing so, the logical cooperation of regulators is modeled.
Piecewise-affine model
The model based on piecewise-affine differential equations (PADE) provides a dis- crete abstraction with exact relation to continuous ODE models. As a base for our timed model, we use Snoussi’s model [18]. Here the concentration of a protein pj is considered continuous and denoted by [pj], [pj] ∈ [0, ri] ⊆ R, where ri ∈ R+ is max- imal concentration. Regulation thresholds are also interpreted in R+. Additionally, for each regulation eij,a rate βij is specified, representing contribution of regulator pi to positive change (production) of [pj]. For each protein pj, rates αj and κj are defined where αj is dilution/degradation rate of pj, and κj is basal production rate. The dynamics of a protein pj is defined by the following differential equation:

d[pj] = κ
+ Σ β
· θ([p ] > t )+ Σ β
· θ([p ] < t ) − α [p ]	(1)

dt	j
ij
i∈P +
i	ij
ij
i∈P−
i	ij	j  j

where θ(·) returns 1, if the condition (·) is true, or 0, otherwise.
In comparison to boolean model, PADE model does not abstract from time and protein concentration, the abstraction approximates continuous Hill kinetics by reg- ulatory logic while time and its effect on concentration dynamics is preserved in the form of rates. For a given initial state, there is a unique PADE trajectory repre- senting time behaviour of all proteins. In contrast, from the corresponding initial state in the boolean model, there are several paths providing untimed abstractions which may represent unrealistic behaviours.
Timed models
To discard unrealistic paths in the boolean model, time constraints reflecting tran- sition rates have been introduced and implemented using timed automata [17,3].

For activity level l (0 ≤ l ≤ ri) of pi, two delays δ↓
and δ↑
are specified. δ↓
(resp.

δ↑ ) is the delay necessary for pi to switch from l to l − 1 (resp. l + 1). E.g., when considering the state ×1, 0⟩ in Fig. 1c, the decision between switching to ×2, 0⟩ or
×1, 1⟩ depends on the rate of pA and pB production which can be different. In this
case, δ↑	is compared with δ↑	and transition with the shortest delay is chosen.
Nevertheless, the approach mentioned above still relies on strong abstractions. First, each pair of delays (δ↓ , δ↑ ) is shared for all regulatory contexts of gi. More-
i,l  i,l
over, to precisely model time behaviour we also need to distinguish delays for in-
dividual regulators configurations activating a given context. E.g., for pB in Fig. 1 and the context {A}, we should distinguish situation lA = 1 and lA = 2. Both activate the regulatory context {A} of pB. However, the rate of pB production will be probably faster in the latter case due to stronger influence of the activator.
Second, protein time behaviour is not exactly reflected. In particular, each level change causes the history of protein behaviour to be lost. For example, assume pi at

level li is associated with delays satisfying δ↓
↑
i,li
. Then exact production time

of pi is lost once δ↓
is reached and pi level decreased. This problem is overcome

in [17,3] by generalizing each delay δ to interval [0, δ] at the price of adding many unrealistic paths including Zeno paths.

A New Timed Approach for GRNs
To overcome the problems mentioned in Section 2.1.4, we propose an approach that extends boolean model with time aspects adopted from the PADE model. In contrast to the boolean model, our approach works with arbitrary number of arbitrarily distributed activity levels discretizing the protein concentration domain. This refinement brings the abstraction of regulatory modes closer to a continuous model, namely, the effect of an activation can be considered stronger with increasing level of the respective regulator (as modelled in Hill kinetics). Each particular configuration of regulators is assigned with an individual time delay affecting the activity of regulated gene. For a given configuration of regulators, the time delay is obtained as a value reciprocal to the corresponding rate in PADE model.
Delays are generalized to intervals of the form [δmin, δmax] representing delay uncertainty. Moreover, for δmin = 0 delay intervals ensure conservative abstraction wrt discrete approximation of continuous concentration. In the continuous system, exiting the range of a discrete level from two different concentration values under this level takes different time.
Additionally, we consider logical cooperations coming from the boolean model. In our setting, a logical cooperation guards a certain portion of the protein pro- duction rate. It is evaluated as a boolean condition over the Cartesian product of regulating proteins activity levels. Formally, for a gene gj regulated cooperatively

by regulators Pcop
⊆ P + ∪ P— a cooperation c for gene gj is defined as a boolean

j	j	j
function Θcopjc given as a logical formula built over propositions of the form (li ⊙tij)
where ⊙ ∈ {<, >, ≤, ≥}, pi ∈ Pcopj , and tij ∈ [1, ri] is a threshold. A simple exam- ple of a cooperation for gz consists of the conjunction of two activators px and py. Such cooperation is enabled only if both proteins are active at the same time. This is encoded by θ((lx ≥ txz) ∧ (ly ≥ tyz)). The set of all cooperations for gene gj is denoted by Cj.

Formalization of Time Delays
For a GRN ×G, E⟩, each gene product pj is assigned a maximal number of activity levels rj which is now arbitrary. Timed semantics of pj dynamics is based on delay determined for current regulators configuration and is given as a value reciprocal to the rate d[pj ] in the corresponding PADE model.
Formally, let ω ∈ {jminj,j maxj} be a label denoting the minimal/maximal delay. For pj at current activity level lj, delay to next change of pj activity level, δω, is determined by the following equation (sgn(δω) indicates the direction of the
expected change):



1	1
δω =  δω
+	1
δω
+	1
δω
lj
+	θ(Θcopjc ) +	1
δω	δω
(2)

j	κj
i∈P + k=1
k,βij
i∈P− k=0
k,βij
c∈Cj
copjc
k=1
k,αj

(i) basal production
` activa˛ti¸on (ii) x
` inhibi˛ti¸on (ii) x
cooperative activation (iii)
  
degradation (iv)


where
δω
j


is the delay implied by the (constant) basal production rate of pj , δω


> 0.

δω	 is the delay implied by the regulator pi satisfying li = k. If pi ∈ P + then ∀k ∈ [1, ri] : 
 k,βij	Σ	j

δω	> 0 and	ri  1/δω	> 0. If pi ∈ P− then δω	> 0, ∀k ∈ [1, ri]: δω
< 0.

k,βij
k=1
k,βij
j	0,βij
k,βij

effect of cooperation c is determined by delay δω
jc
satisfying δω
jc
> 0.

|δω
j
| is the delay implied by the dilution/degradation of pj at level lj = k, ∀k ∈ [1, ri]: δω
j
< 0.

For any neglected delay in a particular configuration, the value is considered diverging (+∞ or −∞). It is also supposed that every delay satisfies δmin ≤ δmax.
Implementation in Extended Timed Automata Framework
The timed model is represented compositionally in terms of UPPAAL processes (communicating timed automata) provided that there is an individual process re- flecting the behaviour of each protein. For protein pj, the respective process is associated with clocks cdown and cup, controlling level decrease and increase, respec-
j	j
tively. Clocks are employed to stopwatch the delay to the next change of pj activity
level. We employ two strategies in modeling clocks – stopwatch and non-stopwatch, both described in more detail in Section 3.2.1. Time delay is specified by the interval [δmin, δmax]. Current values of δmin, δmax are atomically updated whenever some
j	j	j	j
protein changes its activity level. There are two strategies for updating δmin, δmax
j	j
– selecting from a precomputed array or computing delays on-the-fly. We have
implemented both strategies in our UPPAAL timed automata framework.
A general process scheme is displayed in Fig. 2(left). The scheme is displayed for 3-level protein. It can be trivially generalized to n levels. A concrete instance is shown in Fig. 2(right). The process is assigned an output broadcast channel to which information about each level change of pj is sent. For each regulator in P + ∪ P—, the process is assigned an input channel for receiving messages notifying
j	j
(potential) changes of regulators configuration. Self-regulations are managed by
self-communication through local process variables.
For each activity level k, k ∈ [0, ri], there is a level location Lk representing pj at level lj = k, and an update location Uk, where regulators configuration changes are processed. Level changes are represented by red (increasing level) and blue (decreasing level) transitions in Fig. 2. Under constant regulators configuration, level updates are achieved directly by transitions among level locations. When the regulatory configuration is changed, level update is obtained indirectly by switch- ing to the respective update location (where delays are updated) and then to a particular level location. Red and blue transitions inform other processes through


	

Fig. 2. (left) Automata template for 3-level protein processes. (right) Instance for a protein pZ regulated by pX , pY ; self-transitions are ignored for the sake of lucidity. Level changing locations are denoted blue (decrease level) and red (increase level). Regulators configuration information is received on broadcast channels Xbr, Ybr. Grey and orange transitions manage the received information and implement update of the process delay variables.

the output channel. After any level change, time delays δmax, δmin are updated to
j	j
reflect the newly achieved regulators configuration. Therefore each such a transition
is accompanied by procedure rA() that performs all necessary updates and clock resets (depending on the clock strategy). Considering update locations committed ensures delays to be updated atomically.
A level location is switched to the respective update location if a message is received on some input channel (black transitions). Effect of these transitions is immediate update of δmin and δmax according to Formula 2. In update state Uk it
j	j
is decided whether the changed regulators configuration will lead to a level change
or not. In the negative case, a regret transition (orange) leads back to Lk causing clock manipulation managed by procedure r() (depending on the clock strategy).
Update locations have self-transitions (black) that ensure reupdating of delays whenever the regulators configuration changes. Self-transitions on level locations (green) are employed only in the case of stopwatch clock strategy. Their meaning is explained in Section 3.2.1. Finally, dotted transitions treat “blind” level updates ensuring the system never exceeds the range [0, rj].

3.2.1	Time Constraints
Next we describe the mechanism of time constraints reasoning about clocks cup, cdown
j	j
wrt actual delays δmin, δmax. Under stopwatch strategy, for each pj both clocks
j	j

cup, cdown
are considered as stopwatches satisfying that just one is active in any

j	j
point in time provided that cup (resp. cdown) keeps the total time pj spent increas-
j	j
ing (resp. decreasing) since the initial state. This strategy precisely reflects timed
behaviour at the extent of limiting the analysis tasks to simulation. Under this treatment, clock manipulation procedures r(), rA() ensure activation of the clock appropriate for current values of delays while freezing the second clock. In non- stopwatch strategy, the respective clocks are reset by procedures r(), rA() invoked


 
Table 1
Settings of level state invariants and transition time constraints (left). Settings of delay variables for individual situations of delay values (right).


with any level update and thus measure only time from the last level change. Within this strategy timed behaviour is strongly approximated but entirely fits the basic timed automata framework which allows formal analysis, e.g., model checking. In our UPPAAL framework we have developed a model supporting the application of both strategies. Figure 3 shows the difference between the two strategies.

Fig. 3. Evolution of the difference cup — cdown in the stopwatch strategy (left) compared with the corre- sponding approximation in the non-stopwatch strategy (right). Red and blue segments of X-axis correspond to times when just a single clock is active. Concurrent activity is denoted by black segments.


In any system configuration, δmin, δmax
satisfy either δmax
≥ δmin
> 0 (1),

j	j	j	j

min j
≤ δmax
< 0 (2), δmin
< 0 < δmax
(3), or δmin
→ −∞, δmax
→ ∞  (4).

To detect these situations, we supply the pj process with local boolean variables
upj, downj such that upj is true iff ∞ > δmax > 0 and downj is true iff −∞ < δmin <

j
0. Additionally, we introduce delay variables Δmin, Δmax, Δmin
, Δmax
j
to allow

upj
upj
downj
downj

easy setting of time constraints reflecting each of the situations. Definition of time
invariants and constraints for states/edges of pj process is given in Table 1(left). Table 1(right) describes settings of delay variables for all mentioned situations.
Constraints for situations (1), (2), (4) directly implement expected behaviour. Situation (3) is more intricate. It happens just when delay uncertainty allows both degradation and production. In non-stopwatch strategy, the behaviour is naturally modelled by non-determinism. In stopwatch case, concurrent activity of both clocks is solved by non-deterministically selecting just one of the clocks cup, cdown to be
j	j
active. This is achieved by the effect of green self-transitions placed on level locations
and guarded by condition upj ∧ downj.
Since a level change in any process may affect the current regulators configura- tion, a particular clock manipulation procedure is invoked in both clock strategies immediately after the respective update of delays.

Example
In Fig. 4, a simple gene interaction model is presented. Table in the middle gives values for degradation delays of pB and production delays guarded by the activa- tion eAB. Minimal and maximal delays are assumed to coincide. Actual delay δB is computed from the equation (according to Formula 2):

1	1
 =
δY	δβ1,XY
Θ(lX ≥ 1) +
1
δβ2,XY
Θ(lX ≥ 2) —
1
δα1,Y
Θ(lY ≥ 1) —
1
δα2,Y
Θ(lY ≥ 2)

Table on the right shows δY evaluated for each system configuration.

rA = rB =3 

Fig. 4. (left) Delays for the example model. (right) Delay δB computed for particular configurations of pB
levels (columns) and pA levels (rows).


Evaluation and Case Study
To automatize the process of translating models into UPPAAL language, we have developed a tool model-builder [11]. The model-builder takes as input an XML file describing the GRN together with the settings of the timed model. Output of model-builder is a UPPAAL timed automaton representing the GRN timed model. In addition to this, the tool can parse the traces returned by UPPAAL simulation/model-checking in order to visualize the respective trajectories.
In order to evaluate expressiveness of our timed model, we have conducted sim- ulations of a two-component regulatory motif [13] producing a nontrivial oscillatory behaviour. The motif, depicted in Fig. 5, has the advantage of being very sensitive to perturbations in rate coefficients, therefore, it has been chosen as a challenging model to test our methodology.

With X self-activation.	Without X self-activation.
Fig. 5. Two-component oscillatory motif and its continuous simulations.
In the continuous framework, the following ODEs describe this model:


d[pX ]
0.6 · [pX ]10	8
d[pY ]
2 · [pX ]4

=
dt	4.610
+ [pX ]
10 +
[pY ]10
10
— 0.1 · [pX ]
v  ˛ 
=
dt	54
+ [pX ]4
— 0.1 · [pY ]
v  ˛ 

self-activation
5.5 
inhibition by Y
degradation
activation by X
degradation


Table 2
Parameter values of the original continuous model and its rescaled and normalized version used as a base for the timed model.

Table 2 (first row) shows the original parameters. Respective simulated tra- jectories are given in Fig. 5 (presented in two variants – with and without the X self-activation). In order to prepare the original continuous model for discrete approximation by a timed automaton, we first normalize (second row) the concen- tration domain by dividing the values by the maximal concentration value reached (26M · s—1). Values of degradation parameters remain unchanged, because they are independent of molar volume. Since we implement our timed model with on-the-fly delay computation in UPPAAL where time is approximated in integer domain, we upscale the time domain by a certain integer factor which will reduce the impreci- sion caused by integer rounding of rational rates when evaluating the equation (2). For our particular example we choose the factor 40 which implies that a single time unit (1s) in the original model is rescaled to 40s thus making the dynamics 40 times slower. This implies that rate parameters are divided by 40 (third row in Table 2). After uniformly discretizing the normalized concentration domains of both pro- teins to 11 discrete levels, we proceed to transforming rate constants to delays. We consider the rate parameters of the normalized model and try to identify for each particular discrete level of pX, pY the delays for the next level increase/decrease. Table 3(left) summarizes delays for our model. Note that delays are always specified to mimic the normalized rates. Upscaling of time is done implicitly by model-builder
and is not included in the timed model specification.

Table 3
Parameters for the oscillatory pattern with 11 levels (left) and 3 levels (right).

After running model-builder and UPPAAL we have obtained simulations de-

picted in Fig. 6. The results qualitatively reflect simulations achieved with the continuous model as can be seen by comparing with Fig. 5. We have also consid- ered a variant discretizing the concentration domain by 3 levels. The timed model is given by delays specified in Table 3(right). Simulation results are depicted in Fig. 7. When comparing the 3-level model with the 11-level model, it can be seen that increasing granularity of discretization naturally leads to a more precise re- production of the original continuous model behaviour. However, when comparing the two tables in Table 3, the 3-level model requires significantly less parameters (delays) to be specified.

With self-activation of X	Without self-activation of X
Fig. 6. Simulation results using our model builder and UPPAAL. Non-stopwatch strategy has been em- ployed. The time axis is upscaled by factor 40.
Please note that a comprehensive set of further case studies as well as per- formance benchmarks results is available in [11]. As regards the performance of UPPAAL reachability analysis for both model variants, the analysis of the 3-level model took 0.14s with 2491 states visited. For the 11-level model, the computation time was 0.73s with 6059 states visited. Results were performed on a computer based on Intel T7200 (dual core) 2GHz CPU with 2GB RAM.

With the self-activation of X	Without the self-activation of X
Fig. 7. Simulation of the oscillatory pattern. Each concentration level lj is expressed as relative concentra- tion level l′ = lj /rj .

To show a biological case study, we have investigated a model of a central GRN module governing the G1/S cell cycle transition in mammalian cells [19]. The model considers a two-gene network describing interaction of the tumor suppressor protein pRB and the central transcription factor E2F 1 (see Fig. 8 (left)). The model demonstrates the feature of bistability, i.e., the occurrence of two stable states characterized by different concentration of E2F 1. The first stable state represents the low level of the E2F 1 protein concentration. In this state, the cell stays in G1 phase. When increased enough, the concentration of E2F 1 grows higher, to the level of the second stable state, which causes the cell approaches to S phase.

−1	+2


tpRB,pRB = tE2F 1,pRB ∼ 0.5
tpRB,E2F 1 ∼ 5, tE2F 1,E2F 1 ∼ 4
−2


d[pRB] = βpRB θ([pRB] < 0.5 ∧ [E2F 1] > 0.5) + βpRB θ([pRB] < 5 ∧ [E2F 1] > 0.5) — αpRB[pRB]
dt	1	2
d[E2F 1] = βE2F 1 θ([pRB] < 5 ∧ [E2F 1] > 0.5) + βpRB θ([pRB] < 5 ∧ [E2F 1] > 4) — αE2F 1[E2F 1]
dt	1	2

βpRB1 = 0.9, βpRB2 = 0.1, αpRB = 0.05
βE2F 11 = 0.1, βE2F 12 = 1.5, αE2F 1 = 0.1

Fig. 8. Genetic regulatory network controlling the G1/S transition and the respective PADE model used for constructing the timed model.

Table 4
(left) Degradation delays set for the G1/S timed model. (right) Model checking results.

We reformulated the model in the timed automata framework and we employed UPPAAL model checking algorithm to identify bistability. By abstracting the origi- nal continuous model [19], we obtained PADE model depicted in Fig. 8. Domains of both proteins were naturally discretized into 3 levels by the thresholds. The consid- ered rate coefficients as shown in [19] impose bistability of E2F 1 (converging either to concentration E2F 1=8 or E2F 1 = 0 with the bistable switch at E2F 1= 1.5). This bistable switch is sensitive to the degradation coefficient αpRB.
We built the timed model for the considered GRN by directly transforming the rates to delays as defined in Section 3. We set the respective delays to reciprocal val-

ues of rates (δβpRB
= 11, δE2F 12 = 6, δβpRB
= δβE2F 1
= 100). All delay values are

multiplied by 10 to increase precision of their integer representation in UPPAAL. We
considered two sets of pRB degradation delays reflecting the bistable/non-bistable situation.
To detect bistability, we have formulated the following properties:
ϕ1 = E2F 1 ≤ 1 =⇒ AG(E2F 1 ≤ 1) stating that when E2F 1 is initially lower than tE2F 1,pRB then it stabilizes below tE2F 1,pRB.
ϕ2 = E2F 1 ≥ 1 =⇒ AG(E2F 1 ≥ 1) stating that when E2F 1 is initially higher than tE2F 1,pRB then it stabilizes above tE2F 1,pRB.
ϕ3 = E2F 1 ≥ 1 =⇒ AF(E2F 1 ≤ 1) stating that when E2F 1 is initially higher than tE2F 1,pRB then it always eventually reaches the level below tE2F 1,pRB.

Properties have been set to be expressible in UPPAAL temporal logic. Since UPPAAL does not support nesting of temporal operators, the initial concentration proposition has been represented by appropriate setting of initial states. Model checking of all the properties has been performed using the reachability analysis bounded by 5·108 time units. This is an acceptable restriction since the longest delay considered in the model is 4 · 103 time units. Results are presented in Table 4(right).

The results confirm the presence of bistability and its neglection by decreasing the
pRB degradation rate.
Conclusions
We presented a new approach to incorporate time into discrete models of regulatory networks. Employing our prototype tool chain, we transformed the timed model into UPPAAL language. In consequence, we have successfully evaluated the model on simulation and model checking experiments.
Evaluation showed that the more activity levels are distinguished, the more precise are the results. However, increasing resolution of discrete levels arises in technical difficulty of delineating proper values for time delays. The results were achieved on automata without stopwatches, the entailed approximation did not qualitatively affect the expected (approximate) results.
For future work we plan to develop a method automatizing setting of delay values wrt rates in PADE model. This can be achieved easily for exponential decays in the degradation term. However, for delays of simple and even cooperated regulations the task is non-trivial and remains to be solved. An interesting question is to employ the inverse problems method [1] to determine constraints on delays compatible wrt time-series measurements on micro-arrays. On the theoretical side, we plan to study rigorously the relation of timed automata to the approximated ODE model. The abstraction has been only informally defined in this paper.

References
Andr´ea, E., T. Chatain, L. Fribourg and E. Encrenaz, An inverse method for parametric timed automata, Electron. Notes Theor. Comput. Sci. 223 (2008), pp. 29–46.
Batt, G., C. Belta and R. Weiss, Model checking liveness properties of genetic regulatory networks, in:
TACAS 2007, LNCS 4424 (2007), pp. 323–338.
Batt, G., R. B. Salah and O. Maler, On timed models of gene networks, in: Formal Modeling and Analysis of Timed Systems, LNCS 4763 (2007), pp. 38–52.
Behrmann, G., A. David, K. G. Larsen, O. Mu¨ller, P. Pettersson and W. Yi, Uppaal - Present and Future, in: Proc. of 40th IEEE Conference on Decision and Control, IEEE 3 (2001), pp. 2881–2886.

Bernot, G., J.-P. Comet, A. Richard and J. Guespin, Application of formal methods to biological regulatory networks: Extending thomas’ asynchronous logical approach with temporal logic, Journal of Theoretical Biology 229 (2004), pp. 339–347.
Bos, W., Interactive signaling network analysis tool (2009), Master’s thesis, University of Twente.
URL http://essay.utwente.nl/59184/

Bozga, M., S. Graf, I. Ober, I. Ober and J. Sifakis, The if toolset, in: M. Bernardo and F. Corradini, editors, Formal Methods for the Design of Real-Time Systems, Lecture Notes in Computer Science 3185, Springer Berlin / Heidelberg, 2004 pp. 131–132.

Chaouiya et al., C., Qualitative analysis of regulatory graphs: A computational tool based on a discrete formal framework, in: Positive Systems, Lecture Notes in Control and Information Sciences 294, Springer Berlin, 2003 pp. 830–832.
Dang, T., C. L. Guernic and O. Maler, Computing reachable states for nonlinear biological models, in:
CMSB’09, LNCS 5688 (2009), pp. 126–141.

de Jong, H., J. Geiselmann, C. Hernandez and M. Page, Genetic network analyzer: qualitative simulation of genetic regulatory networks, Bioinformatics 19 (2003), pp. 336–344.
Goethem, S. V., Modelling gene regulatory networks with timed automata (2011), Master’s thesis, University of Namur.
URL http://anna.fi.muni.cz/~xsafran1/Work/cs2bio/

Grosu, R., G. Batt, F. Fenton, J. Glimm, C. L. Guernic, S. Smolka and E. Bartocci, From cardiac cells to genetic regulatory networks, in: Proceedings of the 23rd international conference on Computer aided verification, CAV’11 (2011), pp. 396–411.
Guantes, R. and J. Poyatos, Dynamical principles of two-component genetic oscillators, PLoS Comput Biol 2 (2006).
Hal´asz, A., V. Kumar, M. Imielinski, C. Belta, O. Sokolsky, S. Pathak and H. Rubin, Analysis of lactose metabolism in e.coli using reachability analysis of hybrid systems, Systems Biology, IET 1 (2007), pp. 130–148.
Jacob, F. and J. Monod, Genetic regulatory mechanisms in the synthesis of proteins, Journal of Molecular Biology 3 (1961), pp. 318–356.
Maler, O. and G. Batt, Approximating continuous systems by timed automata, in: Proceedings of the 1st international workshop on Formal Methods in Systems Biology, FMSB ’08 (2008), pp. 77–89.
Siebert, H. and A. Bockmayr, Incorporating time delays into the logical analysis of gene regulatory networks, in: CMSB, 2006, pp. 169–183.
Snoussi, E. H., Qualitative dynamics of piecewise-linear differential equations: A discrete mapping approach. dynamics and stability of systems, Dynamics and Stability of Systems 4 (1989).
Swat, M., A. Kel and H. Herzel, Bifurcation Analysis of the Regulatory Modules of the Mammalian G1/S Transition, Bioinformatics 20 (2004), pp. 1506–1511.
Thieffry, D. and R. Thomas, Dynamical Behavior of Biological Regulatory Networks, Bulletin of Mathematical Biology 57 (1995), pp. 277–297.
Thomas, R., Boolean formalization of genetic control circuits., Journal of Theoretical Biology 42 (1973).
