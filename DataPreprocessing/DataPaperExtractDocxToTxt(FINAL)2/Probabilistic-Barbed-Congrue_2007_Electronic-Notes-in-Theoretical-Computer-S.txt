	Electronic Notes in Theoretical Computer Science 190 (2007) 185–203	
www.elsevier.com/locate/entcs

Probabilistic Barbed Congruence
Yuxin Denga, Wenjie Dub
a Shanghai Jiao Tong University, China
yuxindeng@sjtu.edu.cn
b Shanghai Normal University, China
wenjiedu@shnu.edu.cn



Abstract
This paper defines a probabilistic barbed congruence which turns out to coincide with observational equiva- lence in a probabilistic extension of CCS. Based on this coincidence result, we provide a sound and complete axiomatisation for the barbed congruence in a finite fragment of probabilistic CCS.
Keywords: Probabilistic process calculus, Barbed congruence, Observational equivalence, Axiomatisation.

Introduction
Nowadays process algebras have become an important model to reason about con- current computations. To describe the operational behaviour of a process, one can usually define two types of semantics: The transition semantics is given by defin- ing appropriate equivalences (e.g. observational equivalence) based on a labelled transition system, while the reduction semantics is given by defining appropriate equivalences (e.g. barbed bisimulation) based on an unlabelled transition system. Reduction semantics is simpler but in some cases more enlightening than transition semantics, especially when one wants to compare two calculi which syntactically may be quite far from each other. Barbed bisimulation [14] was proposed by Milner and Sangiorgi as a tool to describe uniformly bisimulation-based equivalences which can be used in many different calculi. The idea is to equip a global observer with a minimal ability to observe actions and process states. However, barbed bisimu- lation is a very weak relation and it often fails to be a congruence. An easy way of inducing a congruence from barbed bisimulation is to require two processes to be barbed bisimilar under all contexts. The congruence thus obtained is called barbed congruence, which has the disadvantage of being difficult to use because of the quantification over all contexts.

1571-0661 © 2007 Elsevier B.V. Open access under CC BY-NC-ND license.
doi:10.1016/j.entcs.2007.07.011

Sangiorgi has shown in [15, Theorem 3.3.2] that weak bisimulation coincides with barbed congruence in a variant of CCS [13] with a guarded sum. This char- acterisation result is significant because it allows us to use the coinductive proof technique offered by weak bisimulation to establish the equivalence of two processes under barbed congruence, and we do not need to consider all contexts any more.
In this paper we extend Sangiorgi’s result to the probabilistic setting. More pre- cisely, we define observational equivalence and barbed congruence in a probabilistic extension of Milner’s CCS, then we show that the two equivalences coincide in this probabilistic CCS. In addition, we provide a sound and complete axiomatisation for observational equivalence in a finite fragment of the probabilistic CCS. Thanks to the above coincidence result, the axiomatisation is also sound and complete for barbed congruence.
Observational equivalence was already studied in various probabilistic process algebras [6,7,8]. However, the definitions of observational equivalence in [6,7,8] require a notion of combined weak transitions [17], which are formed by linear com- binations of our familiar basic weak transitions. In this paper, we adopt the notion of weak transitions defined in [9], which is obtained by lifting a relation between states and distributions of states to one between distributions and distributions. Since the weak transitions of [9] have a built-in linear combination, it turns out to be equivalent to the combined weak transitions of [17]. However, the former is cleaner and more elegant than the latter because it constructs weak transitions from strong transitions simply by inserting some invisible transitions, as in the nonprob- abilistic setting [13]. We no longer have to define complicated weak transition rules as in [6,7,8].
Although it is easy to show that observational equivalence is included in barbed congruence, the opposite inclusion is nontrivial. We need to build a class of contexts powerful enough to guarantee that barbed bisimulation on these contexts implies observational equivalence. The proof schema is similar to that in [15], but our construction of contexts is somewhat simpler though we are in the probabilistic setting.
The completeness proof of our axiomatisation uses the same idea as the related proof in [7]: we exploit a Promotion Lemma (Lemma 5.6) as our stepping stone to show that the axiomatisation is complete w.r.t. observational equivalence (The- orem 5.7). Although more operators such as parallel composition are considered in this paper than in [6,7], they are not difficult to deal with in axiomatisation. For example, we use a probabilistic version of the expansion law to eliminate all occurrences of parallel composition.
There is a lot of other related work about axiomatisations of probabilistic equiv- alences [10,4,2,18,1,3]. However, most of them is about axiomatizing probabilistic strong bisimilarity, so the interesting and subtle issue about weak transitions does not arise. Amongst those work about weak equivalences (e.g. branching bisimula- tion), to the best of our knowledge, none of them deals with barbed congruence.
The rest of the paper is structured as follows. In Section 2, we present the syntax and operational semantics of a probabilistic version of CCS. Next, we define

observational equivalence and show that it is a congruence in Section 3. We define barbed congruence and prove its coincidence with observational equivalence in Sec- tion 4. We provide a sound and complete axiomatisation in Section 5, restricted to a finite fragment of our calculus. Finally, we conclude in Section 6.

Probabilistic CCS
In this section we give a probabilistic extension of CCS [13] that allows for non- deterministic and probabilistic choice. It is similar to the calculi studied in [5,11]. We assume a countable set of atomic actions, A = {a, b, ...}. Given a special action τ not in A, we let u, v, ... range over the set of actions, Act = A∪ A∪ {τ }, where A = {a¯ | a ∈ A}. The class of processes P is defined by the following syntax:
P ::= u.  piPi | Σ Pi | P1 | P2 | P \A | P [f ] | C⟨x˜⟩
where A ⊆A and f : Act → Act is a renaming function. Here	i∈I piPi stands for a probabilistic choice operator, where the pi’s represent positive probabilities, i.e., they satisfy p ∈ (0, 1] and	p = 1. Sometimes we are interested in certain branches of the probabilistic choice; in this case we write	p P as p P ⊕ ... ⊕ p P or (	p P ) ⊕ p P where		p P abbreviates (with a slight abuse of notation) p P ⊕ ... ⊕ p		P	. The second construction		P stands for a nondeterministic choice, and occasionally we may write		i∈1..m Pi as P1 + ... + Pm. When m = 0 we abbreviate the nondeterministic choice as 0; when m = 1 we abbreviate it as P1. We also abbreviate u.0 as u. We use | to denote the usual parallel composition. The restriction and renaming operators are as in CCS: P \A behaves like P as long as P does not perform an action a ∈ A; P [f ] behaves like P where each action a ∈ Act is replaced by f (a). A constant C has a definition
def
C = (x˜)P , where P ∈ P and the parameters x˜ collect all action names which
may occur in P . The intuition is that C⟨y⟩ behaves as P with y replacing x. For simplicity, sometimes we shall put in the parameters x only those action names of P which are supposed to be instantiated.
Before giving the operational semantics of processes we need to introduce some notation about probability distributions. A (discrete) probability distribution over a set S is a mapping Δ : S → [0, 1] with  s∈S Δ(s)= 1. The support of Δ is given by [Δ| := { s ∈ S | Δ(s) > 0 }. Let D(S), ranged over by Δ, Θ, Φ, denote the collection of all such distributions over S. We use s to denote the point distribution assigning probability 1 to state s and 0 to all others, so that [s| = {s}. If pi ≥ 0 and Δi is a distribution for each i in some finite index set I, then i∈I pi · Δi is a distribution given by
(Σ pi · Δi)(s)	=	Σ pi · Δi(s)
i∈I	i∈I
where	i∈I pi = 1. We will sometimes write it as p1 · Δ1 + ... + pn · Δn when the index set I is {1,... , n}.



u.	piPi −u→ Δ where Δ(P )= Σ{pi | i ∈ I, Pi = P }
Pi −u→ Δ

Σi∈I
Pi −u→ Δ
P −u→ Δ
for some i ∈ I


P −u→ Δ


P | P −u→ Δ | P
P1 −a→ Δ1	P2 −a¯→ Δ2
P1 | P2 −τ→ Δ1 | Δ2

P −u→ Δ1	u /∈ A ∪ A P \A −u→ Δ \A


P | P −u→ P | Δ
P1 −a¯→ Δ1	P2 −a→ Δ2

P1 | P2 −τ→ Δ1 | Δ2
P −v→ Δ1	f (v)= u P [f ] −u→ Δ [f ]

def	u
 C = (x˜)P	P {y˜/x˜} −→ Δ 
C⟨y˜⟩ −u→ Δ
Table 1 Operational semantics


Some operations on processes can be extended to distributions of processes straightforwardly. Let Δ1, Δ2 be two distributions on processes. We define Δ1 | Δ2, Δ1\A and Δ1[f ] as the following distributions.

(Δ1 | Δ2)(P ) d=ef ⎧⎨
⎩

(Δ1\A)(P ) d=ef ⎨
⎩
Δ1(P1) · Δ2(P2)	if P = P1 | P2
0	otherwise
Δ1(P ')	if P = P '\A
0	otherwise


(Δ1[f ])(P )
def ⎧⎨
Δ1(P ')	if P = P '[f ]

⎩ 0	otherwise
The operational semantics of a process P is defined as a simple probabilistic automaton [16] whose states are the processes reachable from P and the transition relation is defined by the rules in Table 1, where P −u→ Δ describes a transition that, by performing an action u, leaves from P and leads to a distribution Δ ∈ D(P). The meaning of the rules should be self-explanatory.
The presence of both probabilistic and non-deterministic choice in the prob- abilistic CCS allows us to specify systems that have both probabilistic and non- deterministic behaviour.

Observational equivalence
In the probabilistic setting, the definitions of bisimulation-like equivalences are somewhat complicated by the fact that transitions go from processes to distributions (see e.g. [12]). So we need to generalise relations between processes to relations be- tween distributions. Inspired by [9], we develop the mathematical machinery below for doing this.
Let R⊆P × P be a relation from processes to processes. We lift it to a relation
R⊆ D(P) × D(P) by letting Δ R Θ whenever
Δ = Σi∈I pi · Pi, where I is a finite index set and Σi∈I pi =1 
For each i ∈ I there is a process Qi such that PiRQi
Θ = Σi∈I pi · Qi.
An important point here is that in the decomposition (i) of Δ into  i∈I pi · Pi, the processes Pi are not necessarily distinct: that is, the decomposition is not in general unique.
The lifting construction satisfies the following useful properties.

Lemma 3.1  (i) If R1 ⊆ R2 then R1 ⊆ R2
(ii) If R is a transitive relation, then so is R.	 
Proof. See Appendix A.	 
The following proposition is inherited from Proposition 6.1 of [9].
Proposition 3.2 Suppose R⊆P × P and Σi∈I pi = 1. Then we have
Θi R Δi implies (Σi∈I pi · Θi) R (Σi∈I pi · Δi).
If (	i∈I pi · Θi) R Δ then Δ =	i∈I pi · Δi for some set of distributions Δi such that Θi R Δi.		 


We write P −τ→ˆ
Δ if either P −τ→ Δ orΔ = P . We write P −u→ˆ
Δ for P −u→ Δ if

u /= τ . To define weak transitions we need to consider sequences of transitions, so we generalise transitions in such a way that they go from distributions to distributions.

Let Δ −u→ˆ
Θ whenever

Δ = Σi∈I pi · Pi, where I is a finite index set and Σi∈I pi =1 
For each i ∈ I there is a distribution Θi such that Pi −u→ˆ Θi
Θ = Σi∈I pi · Θi.
Weak transitions are defined in the standard manner except that they now apply
to distributions, and −τ→ˆ is used instead of −τ→. This reflects the intuition that if a
distribution may perform a sequence of invisible moves before or after executing a visible action, different parts of the distribution may perform different numbers of internal actions.

τˆ
τˆ	∗

Let Δ1 =⇒ Δ2 whenever Δ1(−→) Δ2.

u	τˆ	u	τˆ
Let Δ1 =⇒ Δ2 denote Δ1 =⇒ −→ =⇒ Δ2.

If u /
u⇒ˆ
u⇒ Δ .

= τ we also write Δ1 =	Δ2 for Δ1 =	2
Definition 3.3 An equivalence relation R ⊆ P × P is a (weak) bisimulation if

P R Q and P −u→
Δ implies Q =⇒
Θ such that Δ R Θ.

Two processes P and Q are bisimilar, written P ≈w Q, if there exists a bisimu- lation R s.t. P R Q.
To see that ≈w is the biggest bisimulation, we need to establish some properties of bisimulations.

Lemma 3.4 Suppose Σ

i∈I pi
= 1 and Δi =⇒
Φi for each i ∈ I, with I a finite

index set. (Recall that Σi∈I pi · Δi is only defined for finite I.) Then

Σ pi · Δi	uˆ i∈I
Σ pi · Φi
i∈I



Proof. We first prove the case u = τ . For each i ∈ I there is a number ki such that

Δi = Δi0 −τ→ˆ
Δi1 −τ→ˆ
Δi2 −τ→ˆ
··· −τ→ˆ
Δiki = Φi. Let k = max{ki | i ∈ I}, using

that I is finite. Since we have Φ −τ→ˆ
Φ for any Φ ∈ D(P), we can add spurious

transitions to these sequences, until all ki equal k. After this preparation the lemma follows by k applications of lifting transitions.
The case u /= τ now follows by one more application of lifting transitions on
−u→, preceded and followed by an application of the case u = τ .	 

Lemma 3.5 Let R be a bisimulation. Suppose Δ R Φ and Δ
−u→ Δ'. Then

uˆ
Φ =	Φ
for some Φ'
such that Δ'
R Φ'.

Proof. First Δ R Φ means that
Δ= Σ pi · Pi,	Pi R Ri,	Φ= Σ pi · Ri ;


also Δ −u→ Δ' means
i∈I
i∈I

Δ= Σ qj · Qj,	Qj −u→ Θj,	Δ' = Σ qj · Θj ,
j∈J	j∈J
and we can assume w.l.o.g. that all the coefficients pi, qj are non-zero. Now define
Ij = { i ∈ I | Pi = Qj } and Ji = { j ∈ J | Qj = Pi }, so that trivially


and note that (5)
{(i, j) | i ∈ I, j ∈ Ji}	=	{(i, j) | j ∈ J, i ∈ Ij}

Δ(Pi)= Σ qj	and	Δ(Qj)= Σ pi

j∈Ji	i∈Ij

Because of (5) we have
Φ= Σi∈I pi · Ri = Σi∈I pi · Σj∈J


 qj  i Δ(Pi)

= Σi∈I
 pi·qj 
j∈Ji Δ(Pi)	i

Now for each j in Ji we know that in fact Qj = Pi, and so from the middle parts of
uˆ	'		'
(2) and (3) we obtain Ri =⇒ Φij such that Θj R Φij . Lemma 3.4 yields

uˆ	'	Σ	Σ

 pi·qj 	'

where within the summations Pi = Qj, so that, using (4), Φ' can also be written as

(6)
Σ Σ  pi · qj  · Φ'

j∈J i∈Ij
Δ(Qj)	ij



Below we show that Δ' R Φ', which we do by manipulating Δ' so that it takes on a form similar to that in (6):
Δ' = Σj∈J qj · Θj

= Σj∈J qj · Σi∈I
  pi  · Θj	using (5) again

= Σj∈J
 pi·qj 
i∈Ij Δ(Qj)	j



Comparing this with (6) above we see that the required result, Δ' R Φ', follows from an application of Proposition 3.2(i).	 

Lemma 3.6 Let R be a bisimulation. Suppose Δ R
Φ and Δ =⇒
Δ'.  Then

uˆ
Φ =	Φ
for some Φ'
such that Δ'
R Φ'.

Proof. First we consider two claims

If Δ R Φ and Δ −τ→ˆ	'
τ⇒ˆ
Φ' for some Φ' such that Δ R Φ'

If Δ R
τ⇒ˆ	'
τ⇒ˆ
Φ' for some Φ' such that Δ' R Φ'.

The proof of claim (i) is similar to that of Lemma 3.5. Claim (ii) follows from claim
τˆ
(i) by induction on the length of the derivation of = . By combining claim (ii)
with Lemma 3.5, we obtain the required result.	 
Lemma 3.7 Let R =	i{ Ri | Ri is a bisimulation }. Then the equivalence clo- sure of R, written R∗, isa bisimulation.
Proof. If P R∗ Q then there exists some bisimulations R0, ..., Rn−1 and some processes P0, ..., Pn such that P = P0, Q = Pn, and for all i with 0 ≤ i < n, we have

Pi Ri Pi+1. If P −u→
'	u⇒ˆ
Δ' with Δ
R Δ' .

Δ0 then there exist Δ1 such that P1 =	1
0	0	1

For all i with 1 ≤ i < n, by Lemma 3.6 there exis t Δ'
such that Pi+1 =⇒
'
i+1

with Δ' Ri Δ'	. By Lemma 3.1 it holds that Δ0 R∗ Δ' .	 
i	i+1	n
Because of the above lemma, we can equivalently express ≈w as R∗, which is the biggest bisimulation. As usual, observational equivalence is defined in terms of
≈w.

Definition 3.8 Two processes P, Q are observationally equivalent, written P  w Q, if

whenever P −u→
whenever Q −u→
Δ, there exists Θ s.t. Q =⇒ Θ and Δ ≈w Θ Θ, there exists Δ s.t. P =⇒ Δ and Δ ≈w Θ.

The following lemma can be used to show that  w is indeed an equivalence relation.

τ	'	''
τ	''  τˆ	'

Lemma 3.9 If Δ =⇒ Δ then there exists Δ
such that Δ −→ Δ =⇒ Δ .

Proof. Let [Δ| = {Pi}i∈I for some index set I and Δ(Pi)= pi for each i ∈ I. We first consider the special case that

Δ −τ→ˆ
Θ −τ→
Θ' =⇒ Δ'

with Δ /= Θ and Δ −τ→ Θ. By definition there exists Θi for each i ∈ I such that

Pi −τ→ˆ Θi and Θ = Σ

i∈I
pi · Θi. More precisely, there is a partition of I into two

sets I1, I2 such that
(7)

∀i ∈ I

: P −τ→ Θ and ∀i ∈ I :Θ = P .

That is, Θ = Σi∈I1 pi · Θi + Σi∈I2 pi · Pi. By Proposition 3.2 (ii), we know from
Θ −τ→ Θ' that Θ' = Σ	pi · Θ' + Σ	pi · Θ' and

(8)
∀i ∈ I
:Θ −τ→ Θ' and ∀i ∈ I :Θ −τ→ Θ'

1	i	i	2	i	i
for some Θ' (i ∈ I). It follows from (7) and (8) that

Δ −τ→ Σ

i∈I1
pi · Θi + Σ

i∈I2
pi · Θ'

−τ→ˆ
Σi∈I1
pi · Θ' + Σ

i∈I2
pi · Θ'

= Θ'


For the general case that
=⇒ Δ'

τˆ



τ	'  τˆ	'

Δ =⇒ Θ −→ Θ =⇒ Δ
we prove by induction that Δ −τ→ Δ'' =τ⇒ˆ Δ' for some Δ'', using the result for the
above special case.	 
Proposition 3.10  w is an equivalence relation.
Proof. Reflexivity and symmetry are immediate. Using Lemmas 3.9 and 3.6, tran- sitivity is easy to show.	 
In Proposition 3.12 we show that the probabilistic CCS operators are composi- tional for w, i.e. w is a congruence. The following lemma gathers some facts we need in the proof of this proposition. Their proofs are straightforward.

Lemma 3.11
If P =⇒
Δ then P + Q =⇒ Δ.

uˆ	'
uˆ	'
uˆ	'

If Δ1 =⇒ Δ1 then Δ1 | Δ2 =⇒ Δ1 | Δ2 and Δ2 | Δ1 =⇒ Δ2 | Δ1.

a	a¯
If Δ1 −→ Δ' and Δ2 −→ Δ' then Δ1 | Δ2
u	f (u)
−τ→ Δ'
| Δ' .

If P =⇒ Δ then P [f ] =⇒ Δ[f ].
u		u
If P =⇒ Δ and u /∈ A ∪ A then P \A =⇒ Δ\A.	 
Proposition 3.12 Suppose Pi  w Qi for i ∈ I. Then
u. Σi∈I piPi  w u. Σi∈I piQi
P1 + P2  w Q1 + Q2
P1 | P2  w Q1 | Q2
P1\A  w Q1\A
P1[f ]  w Q1[f ]
Proof. We consider the third item, which is the hardest. We construct the relation
R⊆ P × P as follows:
R d=ef {(P1 | P2, Q1 | Q2) | P1 ≈w Q1 and P2 ≈w Q2}.
We show that R is a bisimulation. There are four cases to consider.
Suppose P ≈  Q , P ≈  Q and P | P −u→ Δ | P because of the transition

P −u→
uˆ
Δ1. Then Q1 =
Θ1 for some Θ1
with Δ1 ≈w
Θ1. By Lemma 3.11 we

have Q1 | Q2 =⇒ Θ1 | Q2 and also (Δ1 | P2) R (Θ1 | Q2).

Suppose P1 | P2
−τ→ Δ	| Δ  because of the transitions P
−a→ Δ and

P2 −a¯→	2
1  τ⇒ˆ
Θ' −a→
''  τ⇒ˆ
Θ1 for some Θ1, Θ' , Θ'' with

Δ . Then we have Q =	1
Θ1 =	1	1

Δ ≈	τˆ
'	a¯
''  τˆ
'	''

1	w Θ1, and Q2 =⇒ Θ2 −→ Θ2 =⇒ Θ2 for some Θ2, Θ2, Θ2 with Δ2 ≈w Θ2.

By Lemma 3.11 we have Q1 |
2	τ⇒ˆ
Θ' | Θ'
−τ→ Θ'' |
''	τ⇒ˆ
Θ1 | Θ2 and



(Δ1 | Δ2) R (Θ1 | Θ2).
Q  =	1	2
1	Θ2 =

The symmetric cases of (i) and (ii) can be similarly analysed.
So we have checked that R is a bisimulation. Now suppose P1  w Q1 and P2  w Q2. It is immediate that (P1 | P2) R (Q1 | Q2), thus (P1 | P2) ≈w (Q1 | Q2). Moreover, by using arguments similar to the above analysis, it can be shown that

if P1
| P2
−τ→ Δ then Q
| Q2 =⇒ Θ for some Θ such that Δ R Θ

if Q1
| Q2
−τ→ Θ then P
| P2 =⇒ Δ for some Δ such that Δ R Θ.

Therefore, it holds that P1 | P2  w Q1 | Q2.	 

Barbed congruence
In this section, although we define barbed congruence in the probabilistic CCS, the definition can be given in any probabilistic process calculus that possesses a reduction relation and a predicate ↓a detecting the possibility of performing action a.

We write P ↓a if P
−a→ Δ for some Δ, and Δ ↓a if P ↓a for all P ∈ [Δ|. We

write P ⇓a
τˆ
if P =
Δ for some Δ s.t. Δ ↓a; similar for Δ ⇓a. The negation of P ↓a

is P /↓a; similar for the meaning of Δ /⇓a.
Definition 4.1 An equivalence relation R ⊆ P × P is a barbed bisimulation if
P R Q implies:

whenever P −τ→
τˆ
Δ then Q =
Θ and Δ R Θ

for each atomic action a, if P ↓a then Q ⇓a.
Two processes P and Q are barbed-bisimilar, written P ≈b Q, if P R Q for some barbed bisimulation R.
The following property is fundamental.
Lemma 4.2 Let R be a barbed bisimulation. If Δ R Φ and Δ ⇓a then we have
Φ ⇓a.	 
Proof. First we consider two claims

If Δ R Φ and Δ −τ→ˆ	'
τ⇒ˆ
Φ' for some Φ' such that Δ' R Φ';

Δ , then Φ =
If Δ R Φ and Δ ↓a, then Φ ⇓a.
The proof of claim (i) is similar to that of Lemma 3.5. Claim (ii) can be easily proved by using Lemma 3.4. The required result then follows from the two claims.	 
Barbed bisimilarity is too weak to be a congruence, but it induces a congruence relation by quantifying over all contexts. As usual, a context is a process expression with a hole in it. Given a context C[·] and a process P , we write C[P ] to denote the process obtained by filling in the hole of C[·] with P .
Definition 4.3 Two processes P and Q are barbed-congruent, denoted by P  b Q, if for each context C[·], it holds that C[P ] ≈b C[Q].
We now characterize barbed congruence as observational equivalence. The proof schema of this characterisation is similar to that in [15], namely, to construct con- texts with sufficient distinguishing power so that two processes barbed-bisimilar un- der these contexts must be able to strictly mimic each other’s moves in the manner of observationally equivalent processes. It is interesting to see that our construction of the contexts does not involve probabilistic choice operator, and it is somewhat simpler than the construction in [15], though we are dealing with probabilistic pro- cesses.
Theorem 4.4  b and  w coincide.
Proof. The inclusion w ⊆ b is immediate. For the opposite direction, we need to build a class of contexts Cxt powerful enough to guarantee that barbed bisimulation on these contexts implies observational equivalence, i.e. prove that
R = {(P, Q) | for some C[·] ∈ Cxt : C[P ] ≈b C[Q]}
is an observational equivalence.
As in [15], we use H to represent a set of pairs of action names, and let Hi
denote the projection of H on the i-th component of the pairs, for i = 1, 2. We

require that H1 ∩ H2 = ∅ and there is a bijective function from H1 × N to H2 that maps a pair (a, n) ∈ H1 × N to a name an ∈ H2. Let {in, on, cn | n ∈ N} be a set of names disjoint from names in H. We define the processes

Vn def


and the relation
R1 def
Σ	a¯.((an + in) | an.Vn+1⟨H⟩)
+ Σa∈H1 a.((an + on) | an.Vn+1⟨H⟩)+ cn)

1

= {(P, Q) | n, H exist s.t. act(P ) ∪ act(Q) ⊆ H
(P | Vn⟨H⟩) ≈b (Q | Vn⟨H⟩)}
and

where act(P ) collects the set of action names appearing in P . For simplicity, in the sequel we omit the parameter H and write Vn for Vn⟨H⟩.
We now prove that R1 is a weak bisimulation. It is straightforward that R1 is an equivalence relation. So let’s see how two processes related by R1 can match each other’s transitions. Suppose P R1Q and P −u→ Δ, we need to find some Θ s.t.


(9)
uˆ
Q =	Θ and Δ	1 Θ.

We consider the case when u is an input, say u = a. The cases when u is an output can be similarly analyzed; and the case when u is τ is simpler. Process P | Vn has the following transitions:
P | Vn −τ→ Δ | (an + in) | an.Vn+1 d=ef Φ1
−τ→ Δ | Vn+1	def
Since P | Vn ≈b Q | Vn, there exist distributions Γ1, Γ2 s.t.
Q | Vn =⇒ Γ1 ≈b Φ1
τˆ
=⇒ Γ2 ≈b Φ2
We shall see that Γ's structure, i = 1, 2, strictly mirrors Φ's.
i	i
Γ1: Since (Q | Vn) ⇓cn and Φ1 /⇓cn , process Vn has to perform some action in Q |
Vn =⇒ Γ1 so as to ensure Γ1 ≈b Φ1. However, Vn cannot perform more than one

actions because Φ1 ⇓in
. Therefore Γ1 must be of the form Θ1 | (u'
+ in) | u' .Vn+1

'	u'
u'	'	'

for some u and Θ1 s.t. Q =⇒ Θ1 and Vn −→ (un + in) | un.Vn+1. Since Φ1 ⇓an
and Γ1 must be able to do the same, we deduce that u' = an, thus u' = a, i.e.
Γ1 = Θ1 | (an + in) | an.Vn+1. So the structure of Γ1 is very similar to that of Φ1.
Γ2: Since Γ1 ⇓an and Φ2 /⇓an , there must be an interaction between an + in and an.Vn+1 so as to ensure Γ2 ≈b Φ2. However, an.Vn+1 cannot perform more than one actions because Φ2 ⇓cn+1 . Therefore it must be the case that Γ2 = Θ2 | Vn+1
for some Θ2 s.t. Θ1 =⇒ Θ2. Now we can observe that Γ2’s structure strictly mirrors Φ2’s.

Combining the above steps gives Q =⇒ Θ2. Moreover, we have Δ R1 Θ2 because

Δ | Vn+1 = Φ2 ≈b Γ2 = Θ2 | Vn+1
def
2

. Hence, for Θ = Θ , the requirements in (9) are
met, this completes the proof that R1 is a weak bisimulation.
We now define the relation
R = {(P, Q) | P + w ≈b Q + w and P R1Q}
where w does not appear in P, Q.  If P RQ then P ≈w Q since R1 is a weak
bisimulation. Suppose P −τ→ Δ, then P + w −τ→ Δ. Since P + w ≈ Q + w, then
τˆ
there is some Θ such that Q + w =⇒ Θ and Δ ≈b Θ. It is obvious that Δ /⇓w, so
Θ /⇓w, which means that Q + w must be able to make some τ move and discard the summand w. In other words, Q + w =⇒ Θ for some Θ withΔ ≈b Θ. This can only
τ	τ
happen if Q =⇒ Θ. Symmetrically, if Q −→ Θ, we can show that there is some Δ
such that P =⇒ Δ and Δ ≈b Θ. Therefore, it holds that P  w Q.	 

Axiomatisation for finite processes
In this section we restrict ourselves to a finite fragment of our calculus, using all operators in Section 2 except for constants. We present the axiom system A for w, which includes all axioms and rules displayed in Table 2, together with the usual rules for equality (reflexivity, symmetry, transitivity and substitutivity).
Remark 5.1 In fact, A is obtained from the axiom system Ao in [8] by dropping all axioms about recursion and adding R1-2, N1-2, the axioms about restriction and renaming operators; for a detailed account of other axioms, the reader is refered to [8], where an observational equivalence ( ) was defined and completely axiomatized by Ao. As we shall see later,  w is completely axiomatized by A. It follows that, although formulated in different ways, and w coincide, at least for finite processes without restriction and renaming operators.
The notation A ▶ P = Q means that the equation P = Q is derivable by applying the axioms and rules from A. The soundness of the axioms displayed in Table 2, and therefore of A, is easy to be verified.
Theorem 5.2 (Soundness) If A▶ P = Q then P  w Q.	 
The remainder of the section is devoted to proving the completeness of A.
Definition 5.3 We say that P is in normal form if P is of the form
Σ ui.   pij Pij
i	j
where each Pij is also in normal form.
Lemma 5.4 For each process P, there is some P ' in normal form, such that A▶ 
P = P '.
Proof. The proof is carried out by induction on the structure of P . By using axioms R1-2, N1-2 and E, we can eliminate all occurrences of restriction, renaming and parallel composition operators.	 




S1	P + 0 = P
S2	P + P = P
S3	Σi∈I Pi = Σi∈I Pρ(i)	ρ is any permutation on I
S4	u.  i∈I piPi = u.  i∈I pρ(i)Pρ(i)	ρ is any permutation on I
S5	u.(( i piPi) ⊕ pP ⊕ qP )= u.((  i piPi) ⊕ (p + q)P )

T1	τ.  i pi(Pi + u.  j pij.Pij)+ u.  i,j pipij.Pij
= τ.  i pi(Pi + u.  j pij.Pij)
T2	u.  i pi(Pi + τ.  j pij.Pij)+ u.  i,j pipij.Pij
= u.  i pi(Pi + τ.  j pij.Pij)
T3	u.(pτ.P ⊕  i piPi)= u.(pP ⊕  i piPi)
T4	If τ.P = τ.P + Q and τ.Q = τ.Q + P then τ.P = τ.Q.


R1	(u. 
p P )\A = ,⎨ 0	if u ∈ A ∪ A

i∈I  i  i
, u. 
p (P \A) otherwise

i∈I  i	i
R2	(Σi∈I Pi)\A = Σi∈I Pi\A

N1	(u.  i∈I piPi)[f ]= f (u).  i∈I piPi[f ]
N2	(Σi∈I Pi)[f ]= Σi∈I Pi[f ]

C	Σi∈1..n u.  j pij Pij = Σi∈1..n u.  j pij Pij + u.  i∈1..n  j ripij Pij
with Σi∈1..n ri = 1.


E	Assume P ≡	i ui.	j pijPij and Q ≡	k vk.	l qklQkl. Then infer:
P | Q = Σi ui.  j pij(Pij | Q)+ Σk vk.  l qkl(P | Qkl)
+ Σui opp vk τ.  j,l(pijqkl)(Pij | Qkl)
where ui opp vk means that ui and vk are complementary actions, i.e.,
u¯i = vk.

Table 2
The axiom system A

Lemma 5.5 (Saturation) If P is in normal form and P
{Pi}i∈i and Δ(Pi)= pi then A▶ P = P + u.  i piPi.
=⇒ Δ with [Δ| =

Proof. By transition induction. We heavily rely on the probabilistic τ -laws T1-3
and the axiom C. Details are given in Appendix B.	 
The proof of completeness is established by induction on the depth, d(P ), of a normal form P . Its depth is defined as:
d(0) = 0 
d(u.  i piPi) = 1 + max{Pi}i
d(Σi Pi) = max{d(Pi)}
As in [7], we prove a Promotion Lemma and use it as a stepping stone to establish the completeness of A.
Lemma 5.6 (Promotion) If P ≈w Q then A▶ τ.P = τ.Q.
Proof. We assume that P and Q are in normal form, in view of Lemma 5.4. The proof is by induction on d = d(P )+ d(Q). We consider the nontrivial case that d > 0.

Let u. 
j∈J
rjRj be any summand of P . Then we have P
−u→ Δ, with Δ =

Σj∈J
rj · Rj. Since P ≈w
uˆ
Q, there exists Θ such that Q =
Θ and Δ ≈w Θ. Hence,

Δ= Σ pi · Pi,	Pi ≈w Qi,	Θ= Σ pi · Qi.
i∈I	i∈I
It follows from induction hypothesis that A ▶ τ.Pi = τ.Qi. So we can use T3
to derive that A ▶ u.	p P = u.	p τ.P = u.	p τ.Q  = u.	p Q . Since
Σj∈J rj · Rj = Δ = Σi∈I pi · Pi, it follows from S5 that A ▶ u.  j∈J rjRj =

u.	i  i
u⇒ Θ, we know from Lemma 5.5 that A▶ τ.Q =

p P . Now observe that τ.Q =
τ.Q + u.  i∈I piQi = τ.Q + u.  j∈J rjRj.
In summary A▶ τ.Q = τ.Q + P . Symmetrically A▶ τ.P = τ.P + Q. Therefore,
A▶ τ.P = τ.Q by T4.	 
Theorem 5.7 (Completeness) If P  w Q then A▶ P = Q.
Proof. The proof is similar to that for Lemma 5.6.

Let u. 

j∈J
rjRj be any summand of P . Then we have P
−u→ Δ, with Δ =

Σj∈J
rj · Rj. Since P  w
Q, there exists Θ such that Q =⇒ Θ and Δ ≈w Θ. Hence,

Δ= Σ pi · Pi,	Pi ≈w Qi,	Θ= Σ pi · Qi.
i∈I	i∈I
It follows from the promotion lemma that A ▶ τ.Pi = τ.Qi. So we can use T3
to derive that A ▶ u.	p P = u.	p τ.P = u.	p τ.Q  = u.	p Q . Since
Σj∈J rj · Rj = Δ = Σi∈I pi · Pi, it follows from S5 that A ▶ u.  j∈J rjRj =

u.	i  i
u⇒ Θ, we know from Lemma 5.5 that A ▶ Q =

p P . Now observe that Q =
Q + u.  i∈I piQi = Q + u.  j∈J rjRj.
In summary A ▶ Q = Q + P . Symmetrically A ▶ P = P + Q. Therefore,
A▶ P = Q.	 
Corollary 5.8 P  b Q iff A▶ P = Q.
Proof. A direct consequence of Theorems 4.4, 5.2 and 5.7.	 

Concluding remarks
In this paper we have proposed a probabilistic barbed congruence and proved that it coincides with observational equivalence in a probabilistic extension of CCS. For finite processes, we have provided an axiom system which is sound and complete
w.r.t. barbed congruence.
In the future it would be interesting to establish similar results in other proba- bilistic process calculi. It was shown in [15] that in the π-calculus barbed congruence coincides with early bisimulation congruence. We think that it might be possible to extend this result to a probabilistic π-calculus.

References
L. Aceto, Z. E´sik, and A. Ing´olfsd´ottir. Equational axioms for probabilistic bisimilarity (preliminary report). Technical Report RS-02-6, BRICS, 2002.
S. Andova. Probabilistic Process Algebra. PhD thesis, Eindhoven University of Technology, 2002.
S. Andova, J. C. M. Baeten, and T. A. C. Willemse. A complete axiomatisation of branching bisimulation for probabilistic systems with an application in protocol verification. In Proceedings of the 17th International Conference on Concurrency Theory, volume 4137 of Lecture Notes in Computer Science, pages 327–342. Springer, 2006.
J. C. M. Baeten, J. A. Bergstra, and S. A. Smolka. Axiomatizing probabilistic processes: ACP with generative probabilities. Information and Computation, 121(2):234–255, 1995.
C. Baier and M. Z. Kwiatkowaska. Domain equations for probabilistic processes. Mathematical Structures in Computer Science, 10(6):665–717, 2000.
E. Bandini and R. Segala. Axiomatizations for probabilistic bisimulation. In Proceedings of the 28th International Colloquium on Automata, Languages and Programming, volume 2076 of Lecture Notes in Computer Science, pages 370–381. Springer, 2001.
Y. Deng and C. Palamidessi. Axiomatizations for probabilistic finite-state behaviors. Theoretical Computer Science, 373(1-2):92–114, 2007.
Y. Deng, C. Palamidessi, and J. Pang. Compositional reasoning for probabilistic finite-state behaviors. In Processes, Terms and Cycles: Steps on the Road to Infinity, Essays Dedicated to Jan Willem Klop, on the Occasion of His 60th Birthday, volume 3838 of Lecture Notes in Computer Science, pages 309–337. Springer, 2005.
Y. Deng, R. van Glabbeek, M. Hennessy, C. Morgan, and C. Zhang. Remarks on testing probabilistic processes. Electronic Notes in Theoretical Computer Science, 172:359–397, 2007.
A. Giacalone, C.-C. Jou, and S. A. Smolka. Algebraic reasoning for probabilistic concurrent systems. In Proceedings of IFIP WG 2.2/2.3 Working Conference on Programming Concepts and Methods, pages 453–459, 1990.
M. Z. Kwiatkowska and G. Norman.  A testing equivalence for reactive probabilistic processes.
Electronic Notes in Theoretical Computer Science, 16(2):114–132, 1998.

K. G. Larsen and A. Skou. Bisimulation through probabilistic testing. Information and Computation, 94(1):1–28, 1991.
R. Milner. Communication and Concurrency. Prentice-Hall, 1989.
R. Milner and D. Sangiorgi. Barbed bisimulation. In Proceedings of the 19th International Colloquium on Automata, Languages and Programming, volume 623 of Lecture Notes in Computer Science, pages 685–695. Springer, 1992.
D. Sangiorgi. Expressing Mobility in Process Algebras: First-Order and Higher-Order Paradigms. PhD thesis CST–99–93, Department of Computer Science, University of Edinburgh, 1992.
R. Segala. Modeling and Verification of Randomized Distributed Real-Time Systems. PhD thesis, MIT, Deptartment of EECS, 1995.
R. Segala and N. A. Lynch. Probabilistic simulations for probabilistic processes. In Proceedings of the 5th International Conference on Concurrency Theory, volume 836 of Lecture Notes in Computer Science, pages 481–496. Springer, 1994.
E. W. Stark and S. A. Smolka. A complete axiom system for finite-state probabilistic processes. In
Proof, language, and interaction: essays in honour of Robin Milner, pages 571–595. MIT Press, 2000.

Appendix
Proof of Lemma 3.1

Part (i) of the lemma is easy to prove because of the fact that if Δ1 R1 Δ2 and R1 ⊆ R2 then Δ1 R2 Δ2. We now prove part (ii). Given three distributions Δ1, Δ2, Δ3 and a transitive relation R, we show that if Δ1 R Δ2 and Δ2 R Δ3 then Δ1 R Δ3.
First Δ1 R Δ2 means that

(A.1)
Δ1 = Σ pi · Pi,	Pi R P ',	Δ2 = Σ pi · P ' ;

i∈I
also Δ2 R Δ3 means that
i	i
i∈I

(A.2)
Δ2 = Σ qj · Q' ,	Q'
R Qj,	Δ3 = Σ qj · Qi ;

j	j
j∈J
j∈J

and we can assume w.l.o.g. that all the coefficients pi, qj are non-zero. Now define
Ij = { i ∈ I | P ' = Q' } and Ji = { j ∈ J | Q' = P ' }, so that trivially
i	j	j	i

(A.3)
and note that (A.4)
{(i, j) | i ∈ I, j ∈ Ji}	=	{(i, j) | j ∈ J, i ∈ Ij}
Δ2(P ')= Σ qj	and	Δ2(Q' )= Σ pi

i

Because of (A.4) we have
j∈Ji
j
i∈Ij

Δ1 = Σi∈I pi · Pi = Σi∈I pi · Σj∈J
qj
i Δ2(P ')
· Pi

= Σ	Σ
 pi·qj  · P

Similarly
i∈I
j∈Ji Δ2(P ')	i

Δ3 = Σj∈J qj · Qj = Σj∈J qj · Σi∈I
pi
j Δ2(Q' )


· Qj

= Σj∈J Σ
= Σ	Σ
 pi·qj  · Q
j
 pi·qj  · Q



by (A.3)

Now for each j in Ji we know that in fact Q' = P ', and so from the middle parts
of (A.1) and (A.2), together with the transitivity of R, we obtain Δ1 R Δ3.	 


Proof of Lemma 5.5
We find it convenient to show the following result and consider Lemma 5.5 as a corollary.

 u
Lemma B.1 If P is in normal form and P =	Δ with Δ = P	and Δ(P )= 
pi then A▶ P = P + u.  i piPi.


Proof. We write (−τ→ˆ
on n that
)n for n steps of τˆ-transitions. First, we prove by induction

(B.1)


If P (−τ→ˆ
)n −u→ Δ then A▶ P = P + u. 

i∈I
piPi

where Δ = Σi∈I pi · Pi.
n = 0. If P −u→ Δ then by the definition of lifting there is a finite index set I

such that Δ = Σ

i∈I
pi · Δi and P
−u→ Δi for each i ∈ I. Let [Δi| = {Pij}j∈J

and Δ (P )= p . Since P is in normal form, it has the summand u.	p P
for each i ∈ I. So we use S2 to derive that A ▶ P = P + u.	j∈Ji pijPij. By repeating this procedure for all i ∈ I, we have that
A▶ P = P + Σi∈I u.  j∈Ji pijPij
= P + Σi∈I u.  j∈Ji pij Pij + u.  i∈I,j∈Ji pipij Pij	by C
= P + u.  i∈I,j∈Ji pipij Pij.
Suppose (B.1) holds for some n ≥ 0 and we consider the case for n + 1. We claim that

(B.2)
If P −τ→ˆ
Δ'(−τ→ˆ
)n −u→ Δ then A▶ P = P + u. 
piPi

where Δ = Σi∈I pi · Pi. To see this, we focus on the first step of transition
P −τ→ˆ  Δ'. There are two cases.
Δ' = P . So P (−τ→ˆ )n −u→ Δ and we use induction hypothesis to derive that
A▶ P = P + u.  i piPi.
P −τ→ Δ'. By the definition of lifting and Proposition 3.2 (ii), there is finite
index set I such that (1) Δ' = Σ	pi · P '; (2) P '(−τ→ˆ )n −u→ Δi; (3) Δ =
i∈I pi · Δi. Let Δi =	j∈Ji pijPij, then we know from part (2) of the above statement and induction hypothesis that

(B.3)
A▶ P ' = P ' + u.  pijPij

i	i
j∈Ji

Therefore, we derive that
A▶ P = P + τ.  i∈I
= P + τ.  i∈I
= P + τ.  i∈I



piP '
pi(P ' + u. 
pi(P ' + u. 






j∈Ji

j∈Ji


by S2
pijPij)	by (B.3)
pij Pij )

+ u.  i∈I,j∈Ji pipij Pij	by T1
= P + u.  i∈I,j∈Ji pipij Pij
So we have proved claim (B.2).
Now suppose that P (−τ→ˆ )n+1 −u→ Δ. By the definition of lifting and Propo-
sition 3.2 (ii), there is a finite index set I such that Δ = Σi∈I pi · Δi and

P (−τ→ˆ
that
)n+1 −u→ Δi for each i ∈ I. Let Δi = Σ

j∈Ji
pijPij. Therefore, we have

A▶ P = P + Σi∈I u.  j∈Ji pijPij	by (B.2)
= P + Σi∈I u.  j∈Ji pij Pij + u.  i∈I,j∈Ji pipij Pij by C
= P + u.  i∈I,j∈Ji pipij Pij
This completes the proof of (B.1).
We are now in a position to show by induction on m that

(B.4)
If P =⇒
−u→ (−τ→ˆ
)mΔ then A▶ P = P + u.  i∈I

piPi

where Δ = Σi∈I pi · Pi.
m = 0. Then the result follows from (B.1).
Suppose (B.4) holds for some m ≥ 0 and we consider the case for m + 1. Assume

τˆ	u
τˆ	m  '	τˆ
'	τˆ

that P =⇒−→ (−→) Δ −→ Δ. We focus on the last step Δ −→ Δ. By the
definition of lifting, there is a finite index set I such that (1) Δ' = Σi∈I pi · Pi; (2)

Pi −τ→ˆ
Δi; (3) Δ = Σ

i∈I
pi · Δi. From part (1) of this statement and induction

hypothesis, we know that
(B.5)

A▶ P = P + u.   piPi
i∈I

Part (2) of the above statement includes two cases.
Δi = Pi. By S2, it holds that

(B.6)
Pi −τ→ Δi. Let Δi = Σ



j∈Ji
A▶ τ.Pi = τ.Pi + τ.Pi
pijPij. It is easy to see that Pi is in normal form,

so τ.  j∈Ji pijPij is a summand of Pi. It follows from S2 that

(B.7)
A▶ Pi = Pi + τ.  pijPij
j∈Ji



We can partition I into two disjoint sets I1, I2 such that (1) Δi = Pi for all i ∈ I1;

(2) Pi −τ→ Δi for all i ∈ I2. We continue our inference from (B.5).
A▶ P = P + u.(  i∈I1 piPi ⊕  i∈I2 piPi)
= P + u.(  i∈I1 piτ.Pi ⊕  i∈I2 piPi)	by T3
= P + u.(  i∈I1 pi(τ.Pi + τ.Pi)
⊕  i∈I2 pi(Pi + τ.  j∈Ji pijPij))	by (B.6) and (B.7)
= P + u.(  i∈I1 pi(τ.Pi + τ.Pi)
⊕  i∈I2 pi(Pi + τ.  j∈Ji pijPij))
+ u.(  i∈I1 piPi ⊕  i∈I2,j∈Ji pipij Pij )	by T2
= P + u.(  i∈I1 piPi ⊕  i∈I2,j∈Ji pipij Pij )
This completes the proof of (B.4), from which we immediately obtain the required result that

(B.8)
If P =⇒ Δ then A▶ P = P + u.

i∈I
piPi

where Δ = Σi∈I pi · Pi.	 
Lemma 5.5 is an obvious corollary of Lemma B.1.
