Available online at www.sciencedirect.com


Electronic Notes in Theoretical Computer Science 341 (2018) 219–237
www.elsevier.com/locate/entcs
Partial Traces on Additive Categories
Naohiko Hoshino1,2
Research Institute for Mathematical Sciences Kyoto University
Kyoto, Japan

Abstract
In this paper, we study partial traces on additive categories. Haghverdi and Scott introduced partially traced symmetric monoidal categories generalizing traced symmetric monoidal categories given by Joyal, Street and Verity. The original example of a partial trace is given in terms of the execution formula on the category of vector spaces and linear functions. Malherbe, Scott and Selinger gave another example of a partial trace on the category of vector spaces, and they observed that we can define these two partial traces on arbitrary additive categories. A natural question is: what kind of partial traces does the category of vector spaces have? We give a (partial) answer to this question. Our main result is: every abelian category has a largest partial trace. Here, “largest” means that every partial trace on the abelian category is obtained by restricting the domain of the largest partial trace. As a corollary, we show that the partial trace given by Malherbe, Scott and Selinger is the largest partial trace on the category of vector spaces.
Keywords: partial trace, execution formula, kernel-image trace, Geometry of Interaction, additive category, abelian category.


Introduction
In computer science, traced monoidal categories [9] and their variants are fundamen- tal algebraic structures in the study of categorical semantics for cyclic computation. For example, a trace operator on a cartesian category is a parametrized fixed point operator [7], and a trace operator on a cocartesian category models iteration. Traced monoidal categories also appear in a categorical framework for Girard’s Geometry of Interaction (GoI) [4,1] where trace operators capture interactive communication between automata.
In [5], Haghverdi and Scott introduced partially traced symmetric monoidal categories generalizing the notion of trace in order to give a categorical framework for the original GoI based on vector spaces. Their generalization provides many examples of partially traced symmetric monoidal categories that have not emerged

1 The author is supported by the JSPS-INRIA Bilateral Joint Research Project CRECOGI and by JSPS KAKENHI Grant Number JP26730004
2 Email: naophiko@kyoto-u.ac.jp

https://doi.org/10.1016/j.entcs.2018.11.011 1571-0661/© 2018 Published by Elsevier B.V.
This is an open access article under the CC BY-NC-ND license (http://creativecommons.org/licenses/by-nc-nd/4.0/).

in studies of categorical semantics for lambda calculi. Typically, we need to consider partial traces when the underlying symmetric monoidal category can only model converging iteration process. For example, Haghverdi and Scott showed that the original execution formula
Ex ,A B⎞ = A + B(I − D)−1C	(1)

given in [4] is a partial trace on the symmetric monoidal category of vector spaces with the biproducts as the monoidal products, and they constructed a denotational semantics for linear logic using the execution formula. Roughly speaking, in their work, the execution formula computes the adjacent matrix associated to the normal form of a given proof Π of linear logic. The block matrices A, B, C and D in (1) are adjacent matrices corresponding to certain fragments of Π, and when D is nilpotent,
(1) is equal to A + n∈N BDnC, which is the adjacent matrix associated to the normal form of Π. Since the inverse (I − D)−1 may not be defined, the execution formula is partially defined. In [13], Malherbe, Scott and Selinger observed that
we can generalize construction of the partial trace by Haghverdi and Scott to any additive category, and they also showed that every additive category has another partial trace called the kernel-image trace. A question about these observations is: what kind of partial traces does an additive (or an abelian) category have?
The goal of this paper is to give an answer to this question. We study partial traces on additive categories and abelian categories, and we prove the following results.
In every additive category, the partial trace given by Haghverdi and Scott is the largest partial trace that satisfies strong naturality. (Theorem 3.3)
Every abelian category C has a largest partial trace that is given by restricting the canonical total trace on the category consisting of objects in C and relations between them. We also show that the largest partial trace is a natural extension of the kernel-image trace on C. (Theorem 4.5 and Theorem 4.6)
If an abelian category C is semisimple, then the largest partial trace on C coincides with the kernel-image trace. (Corollary 4.8)
The second result means that any abelian category has essentially one partial trace; all partial traces on an abelian category are just restrictions of the largest partial trace. It follows from our results that the category of finite dimensional vector spaces equipped with the kernel-image trace is a traced symmetric monoidal subcategory of the category of finite dimensional vector spaces and relations between them. This is an answer to the following question posed in [13]:
“One question that we did not answer is whether specific partially traced cate- gories can be embedded in totally traced categories in a natural way. For example, the category of finite dimensional vector spaces, with the biproduct ⊕ as the ten- sor, can be equipped with a natural partial trace in several ways. By our proof, it

follows that it can be faithfully embedded in a totally traced category. However, we do not know any concrete natural description of such a totally traced category (i.e., other than the free one constructed in our proof).”
Our motivation to study (partial) trace comes from importance of (partial) traces in categorical semantics for recursive computation and GoI, and we are interested in partial traces on additive categories and abelian categories because of use of C*- algebra in the first GoI. However, our results are just answers to purely technical questions on additive categories and abelian categories, and at this point, we do not have any practical application of our results to these research areas. To find practical application of our results is a future work.
The structure of this paper is as follows. In Section 2, we recall the notions of partially traced symmetric monoidal category, additive category and abelian cat- egory. We also give some examples and basic properties of these categories. In Section 3, we give examples of partial traces on additive categories and show that the partial trace given by Haghverdi and Scott is the largest partial trace among partial traces satisfying strong naturality. In Section 4, we show that every abelian category has a largest partial trace and when the abelian category is semisimple, the kernel-image trace is the largest partial trace. For proofs of some statements, see [8].
Categorical preliminaries
Symmetric monoidal category and symmetric monoidal functor
A symmetric monoidal category consists of a category C equipped with a unit object I and a monoidal product ⊗ : C×C → C and natural isomorphisms λX : I ⊗X ∼= X, ρX : X ⊗ I ∼= X, αX,Y,Z : (X ⊗ Y ) ⊗ Z ∼= X ⊗ (Y ⊗ Z) and σX,Y : X ⊗ Y ∼= Y ⊗ X subject to some coherence conditions (see [12,2] for example). We simply write (C,I, ⊗) or C for symmetric monoidal categories when we can infer other data from the context. In this paper, we often regard a cartesian category C as a symmetric monoidal category (C, 1, ×) where 1 is the terminal object and X ×Y is the product of X and Y .
Let (C,I, ⊗) and (D, J, ⊙) be symmetric monoidal categories. A symmetric monoidal functor (F, n, m) from (C,I, ⊗) to (D, J, ⊙) consists of a functor F : C → D with an arrow n : J → FI and a natural transformation mX,Y : FX ⊙FY → F (X ⊗ Y ) subject to some coherence conditions (see [12,2] for example). A symmetric monoidal functor (F, n, m) is strong when n and mX,Y are isomorphisms. We write F : C → D to denote a (strong) symmetric monoidal functor when we can infer n and mX,Y from the context.
Partial trace
We recall the definition of a partial trace introduced by Haghverdi and Scott in [5]. We prepare several notations. Given partially defined expressions E and F , we write E ≤ F when E is not defined or both E and F are defined and they are

the same. For example, we have Σn∈N xn ≤  1  for all x ∈ [0, ∞) because the left
hand side is defined if and only if 0 ≤ x < 1, and we have Σn∈N xn =  1  for all
0 ≤ x < 1. We write E  F when both E ≤ F and F ≤ E are true.
Definition 2.1 Let (C,I, ⊗, λ, ρ, α, σ) be a symmetric monoidal category. A partial trace tr on C is a family of partial functions


Z X,Y
: C(X ⊗ Z, Y ⊗ Z) ~ C(X, Y )	(X, Y, Z ∈ C)

subject to the following conditions:
(Naturality) For all f : X ⊗ Z → Y ⊗ Z, g : U → X and h : Y → V ,


g ; trZ
(f ) ; h ≤ trZ
((g ⊗ Z) ; f ; (h ⊗ Z)).

(Sliding) For all f : X ⊗ W → Y ⊗ Z and g : Z → W ,


W X,Y
(f ; (Y ⊗ g))  trZ
((X ⊗ g) ; f ).

(Superposing) For all f : X ⊗ Z → Y ⊗ Z,


W ⊗ trZ
Z
W ⊗X,W ⊗Y
(αW,X,Z ; (W ⊗ f ) ; α−1	).



(Vanishing I) For all f : X ⊗ I → Y ⊗ I, trI
(f ) is defined and is equal to

ρ−1 ; f ; ρY .
(Vanishing II) For all f : (X ⊗ W ) ⊗ Z → (Y ⊗ W ) ⊗ Z, if trZ

(f ) is

defined, then

trW


(trZ


(f ))  trW ⊗Z(α−1

; f ; αY,W,Z).

X,Y
X⊗W,Y ⊗W
X,Y
X,W,Z

(Yanking) For all X ∈ C, trX	(σX,X ) is defined and is equal to idX .
A partially traced symmetric monoidal category is a symmetric monoidal category equipped with a partial trace. A total trace is a partial trace that is totally defined, and a totally traced symmetric monoidal category is a symmetric monoidal category equipped with a total trace. We note that the notion of totally traced symmet- ric monoidal category coincides with the notion of traced (symmetric) monoidal category given in [9].

We often present trZ
(f ): X → Y as the following feedback loop:



Z X
Z
Z	X,Y
Y
(−)

X	Y .

For many totally traced symmetric monoidal categories in computer science, this feedback loop nicely fits in our intuition. As an example, let (Pfn, ∅, ⊕) be the symmetric monoidal category of sets and partial functions whose monoidal product

is the disjoint sum
X ⊕ Y = {(0, x) | x ∈ X}∪ {(1, y) | y ∈ Y }.

The symmetric monoidal category (Pfn, ∅, ⊕) has a total trace iter: for a partial

function f : X ⊕ Z ~ Y ⊕ Z, the trace iterZ
(f ): X ~ Y is given by



iterZ
(f )(x)= y ⇐⇒ there is a finite sequence z1,..., zn ∈ Z such that
f (0, x)= (1, z1) and f (1, z1)= (1, z2) and ··· and f (1, zn)= (0, y).



The definition of iterZ
(f )(x) means that for x  ∈  X, the partial trace

iterZ
(f )(x) is defined and is equal to y ∈ Y if and only if there is a finitely

many loops like the following dotted line:

This diagrammatic presentation helps us to convince that iter is a total trace. For example, the sliding axiom holds because the difference between the following two diagrams


X	Y	X	Y
is just how we arrange boxes and wires, and the arrangement has nothing to do with how data flow along wires.
We can construct various partial traces by applying the following theorem to already known partial traces.
Theorem 2.2 ([13, Proposition 3.20]) Let (C,I, ⊗) and (D, J, ⊙) be symmetric monoidal categories, and let tr be a partial trace on D. If there is a faithful strong symmetric monoidal functor (F, n, m): (C,I, ⊗) → (D, J, ⊙), then C has a partial trace tr given by

Z	 g : X → Y,	if trFZ 


(mX,Z ; Ff ; m−1 ) is defined and equals Fg,


This is well-deﬁned since F is faithful.
Example 2.3 Let (Set, ∅, ⊕) be the symmetric monoidal category of sets and func- tions whose monoidal product is given by the disjoint sum of sets. Since there is a trivial inclusion functor J : Set → Pfn, we have a partial trace on Set that is given

by pulling back iter along J. Concretely, the partial trace iterZ
on Set is given

by
 iterZ



(f ),	if iterZ


(f ) is totally defined,


Example 2.4 Let (Set, {0}, ×) be the symmetric monoidal category of sets and functions whose monoidal product is given by the cartesian product of sets, and let (Rel, {0}, ×) be the symmetric monoidal category of sets and relations whose monoidal product is also given by the cartesian product of sets. The symmetric monoidal category (Rel, {0}, ×) has a total trace given by


Z X,Y
(r) = {(x, y) ∈ X × Y | ((x, z), (y, z)) ∈ r for some z ∈ Z}.

By pulling back the total trace tr along the obvious inclusion functor Set → Rel, we obtain a partial functor tr on Set. To be concrete, given a function f : X ×Z →

Y × Z, the partial trace trZ
(f ) is defined and is equal to a function g : X → Y if

and only if
{(x, y) ∈ X × Y | f (x, z)= (y, z) for some z ∈ Z}
is the graph relation of g. In the next section, we will generalize this construction to regular categories.
The next example is about existence of the least partial trace.
Example 2.5 For partial traces tr1 and tr2 on a symmetric monoidal category

(C,I, ⊗), we write tr1 ≤ tr2 when we have (tr1)Z
(f ) ≤ (tr2)Z
(f ) for all arrows

f : X ⊗ Z → Y ⊗ Z in C. This is a partial order on the set of all partial traces on C. With respect to this partial order, every non-empty family of partial traces
{trλ}λ∈Λ on C has a greatest lower bound tr given by

Z X,Y
(f ) is defined and equals g ⇐⇒

for all λ ∈ Λ, (trλ)Z
(f ) is defined and equals g.

In particular, if C has a partial trace, then the meet of all partial traces on C exists and is the least partial trace on C. We note that the least partial trace on C is not the everywhere undefined operator because every partial trace must be defined at σX,X . It is not easy to find concrete description of the least partial trace.
Regular category
In this paper, a partial trace on a regular category plays an important role. In a regular category C, we can consider relations between objects in C, and we can define a category Rel(C) consisting of objects in C and relations between them. It is well-known that Rel(C) has the structure of a totally traced symmetric monoidal category. Then we can define a partial trace on C by pulling back the total trace on Rel(C). Below, we precisely describe this construction. We first recall the definition of a regular category.
Definition 2.6 A regular category is a category with finite limits such that

every arrow f : X → Y has a factorization f = e ; m with a monomorphism
m : Z → Y and a regular epimorphism e : X → Z,
the pullback of a regular epimorphism along any arrow is a regular epimorphism.
Here, an epimorphism e : X → Y is regular if and only if e is a coequalizer of a pair of arrows u, v : Z ⇒ X. Below, we write e : X → Y when e is a regular epimorphism from X to Y , and we write m : X > Y when m is a monomorphism from X to Y .
For example, the category Set of sets and function is a regular category where the image factorization of a function f : X → Y from a set X to a set Y is:

  f	
X	,{,y,∈ Y | y = f (x) for some x ∈ X} ,, ,Y , .

It is known that regular-epi/mono factorization is unique up-to isomorphism. This means that if an arrow f : X → Y in a category C has two regular-epi/mono fac- torizations


f = X   e  ,Z,,m, ,Y,,
f = X	e′
Zj	m′  Y,


then there is an isomorphism θ : Z → Zj such that e ; θ = ej and θ ; mj = m.
When C is a regular category, regular-epi/mono factorization enables us to define a totally traced symmetric monoidal category Rel(C): objects in Rel(C) are objects in C, and arrows from X to Y are (equivalence classes of) subobjects r : R > X×Y . This is a generalization of the category Rel of sets and relations. In fact, we have Rel(Set) ∼= Rel. The identity on X is the diagonal arrow δX : X > X × X, and the composition r ∗ s : T > X × Z of relations r = ⟨r1, r2⟩ : R > X × Y and s = ⟨s1, s2⟩ : S > Y × Z is defined to be the mono-part of the regular-epi/mono factorization of ⟨p1 ; r1, p2 ; s2⟩:


⟨p1;r1,p2;s2⟩
U   p2 ,S ,

r 
U	,T,,, ,X,× Z
where
p1	p.b	s1
,	, 

r2 ,Y , .
Here, ⟨−, −⟩ is the tuple of arrows. Well-definedness of the composition of arrows in Rel(C) follows from uniqueness of regular-epi/mono factorization. The unit object of Rel(C) is the terminal object 1 ∈ C, and the monoidal product of objects X and Y in Rel(C) is the product X×Y . The monoidal product of relations r : R > X×Y and s : S > Z × W is given by
r ⊗ s = R × S  r×s ,(X,× Y ) × (Z × W )   ~= ,(X,× Z) × (Y × W ).


For a relation r : R > (X × Z) × (Y × Z), the trace trZ
(r) is the mono-part of

the regular-epi/mono factorization of the vertical arrow from P to X × Y in the

following diagram:
P	P 	,Z,


,	, 
R
p.b

′	′

δZ
, 
,Z,× Z


Z X,Y
, 
(r)
r;(πX,Z×πY,Z )
r;(πX,Z ×πY,Z )

X , 	, 


To clarify intuition of trZ
(r), we concretely describe the above diagram assuming

that C is the category of sets and functions. First, the set R is the graph of r:
R = {((x, z), (y, zj)) ∈ (X × Z) × (Y × Z) | ((x, z), (y, zj)) ∈ r},

and two arrows going out from R are projections. The set P is a subset of R given by
P = {((x, z), (y, z)) ∈ (X × Z) × (Y × Z) | ((x, z), (y, z)) ∈ r}.
Therefore, the image S of the arrow from P to X × Y is
{(x, y) ∈ X × Y | ((x, z), (y, z)) ∈ r for some z ∈ Z}.

We note that we can derive this total trace from the compact closed structure of Rel(Set), and this is true for arbitrary regular category: the total trace trZ on Rel(C) is derived from a compact closed structure of Rel(C) and is called the canonical trace in [9]. (We can check that Rel(C) is a compact closed category by following the idea of the proof of Rel being compact closed.) For relationship between compact closed categories and total traces, see [9,14]. It is tedious but doable to directly check that tr is a total trace on Rel(C).
Now, we can apply Theorem 2.2 to the totally traced symmetric monoidal cat- egory (Rel(C), 1, ×, tr).
Example 2.7 Let C be a regular category, and let HC be a faithful strong symmetric monoidal functor HC : C → Rel(C) given by
HC (X)= X,	HC (f : X → Y )= ⟨idX,f⟩ : X > X × Y.

As we have observed, Rel(C) has a total trace. Therefore, it follows from Theo- rem 2.2 that HC gives rise to a partial trace on C. We write relC for this partial trace on C. Concretely, for an arrow f : X × Z → Y × Z in C, the partial trace

(relC )Z
(f ) is defined if and only if there exists g : X → Y in C such that the

mono-part of the regular-epi/mono factorization of p ; ⟨πX,Z,f ; πY,Z⟩ is equal to
⟨idX, g⟩:


	p		 ⟨πX,Z ,f ;πY,Z ⟩ 
P	,X,× Z	,X,× Y = P
X	⟨idX ,g⟩  ,X,× Y

where p : P → X × Z is the pullback of δZ along ⟨πj	,f ; πj	⟩:

P 	,Z,
p	p.b	δZ
,	, 

X × Z	′
X,Z
,f ;π′
,Z,× Z	,
⟩



and when (relC )Z
(f ) is defined, (relC )Z
(f ) is equal to g.


Additive categories and abelian categories
We recall the notions of an additive category and an abelian category, and we give their basic properties. For more details, see [12,3].
Definition 2.8 A pre-additive category C is a category such that every hom-set has the structure of an abelian group and the composition is bilinear. We write 0X,Y : X → Y for the unit of C(X, Y ) and f + g for the addition of f, g : X → Y . An additive category is a pre-additive category that has finite coproducts.
The category Ab of abelian groups and homomorphisms is an additive category. When R is a ring, the category ModR of left R-modules and homomorphisms is also an additive category. In particular, the category VectK of vector spaces over a field K and linear maps is an additive category. We denote the subcategory of VectK consisting of finite dimensional vector spaces by fdVectK, which is an additive category.
When C is an additive category, C has finite products and those coincide with finite coproducts: the initial object 0 is the terminal object, and the coproduct X ⊕ Y with


πX,Y = [idX, 0Y,X ]: X ⊕ Y → X,	πj
= [0X,Y , idY ]: X ⊕ Y → Y	(2)

is the product of X and Y where [−, −] is the cotuple of arrows. The diagonal

arrow δX : X → X ⊕ X is given by ιX,X + ιj
where ιX,Y : X → X ⊕ Y and

j
X,Y
: Y → X ⊕ Y are injections. By the definition of projections, we have



ιX,Y ; πX,Y = idX	ιj
j
X,Y
= idY	ιX,Y ; πj
= 0X,Y	ιj
; πX,Y = 0Y,X



and πX,Y ; ιX,Y + πj
j
X,Y
= idX⊕Y . The codiagonal arrow γX : X ⊕ X → X is

equal to πX,X + πj
. The addition f + g : X → Y is equal to δX ; (f ⊕ g) ; γY . It

follows from coincidence of finite coproducts and finite products that every arrow
f : X ⊕ Y → Z ⊕ W in C is uniquely decomposed into a matrix of arrows
,fXZ : X → Z	fXW : X → W ⎞	,ιX,Y ; f ; πZ,W	ιX,Y ; f ; πj	⎞

⎝	⎠ = ⎝ j
j	j	⎠

called the matrix decomposition of f . This decomposition is unique because we can recover f as follows:


f = πX,Y ; fXZ ; ιZ,W + πX,Y ; fXW ; ιj
j
X,Y
; fY Z ; ιZ,W + πj
; fYW ; ιj	.

The composition of arrows in C is compatible with matrix multiplication, namely, the matrix decomposition of f ; g : X ⊕ Y → Z ⊕ W → U ⊕ V is equal to
,fXZ	fXW ⎞ ; , gZU	gZV ⎞

⎝fY Z	fY W ⎠
⎝gWU	gWV ⎠
= ,fXZ ; gZU + fXW ; gWU	fXZ ; gZV + fXW ; gWV ⎞
Y Z	ZU	Y W	WU	Y Z	ZV	Y W	WV 

where (fAB : A → B)A,B and (gBC : B → C)B,C are the matrix decompositions of
f and g.
Definition 2.9 In a pre-additive category, a (co)kernel of f : X → Y is, if it exists, a (co)equalizer of f and 0X,Y . An abelian category is a pre-additive category with finite limits and finite colimits such that every monomorphism is a kernel of some arrow, and every epimorphism is a cokernel of some arrow.
By the definition of abelian categories, every additive category is an abelian category. Categories Ab, ModR, VectK and fdVectK are abelian categories. Let C be an abelian category. For an arrow f : X → Y in C, we write Y → coker(f ) for the cokernel of f : X → Y , and we write ker(f ) > X for the kernel of f : X →
Y . Because any epimorphism in C is a cokernel, epimorphisms in C are regular epimorphisms. It is known that any arrow f : X → Y in C has a regular-epi/mono factorization
X  e ,im,(f ) ,m, ,Y ,
where m is the kernel of the cokernel Y → coker(f ) and e is the cokernel of the kernel ker(f ) > X. Furthermore, the pullback of an epimorphism along any arrow is an epimorphism. (See [3, Theorem 1.5.5 and Proposition 1.7.6].) Hence, any abelian category is a regular category. Because the definition of abelian category is self-dual, if C is an abelian category, then Cop is an abelian category. In particular, Cop is a regular category.
An object X in a category C is projective when for every epimorphism f : Y → Z and for every arrow g : X → Z in C, there is h : X → Y such that h ; f = g. An object X ∈ C is injective when X is projective in Cop. The following definition is from [10].
Definition 2.10 An abelian category is semisimple when one of the following equivalent conditions is true:
Every object is projective.
Every object is injective.

The category VectK is semisimple for any field K. More generally, when a ring R is semisimple, i.e., R is a direct sum of its irreducible left R-submodules, then the category ModR of left R-modules is semisimple. For example, finite direct products K1 ×· · ·× Kn of fields are semisimple. It follows from Maschke’s theorem [11] that given a field K and a finite group G of order n such that the characteristic of K does not divide n, the category ModK[G] of left K[G]-modules is semisimple where K[G] is the group ring of G over K.

Remark 2.11 In the sequel, we always regard an additive category C as a symmet- ric monoidal category (C, 0, ⊕). As usually, we omit canonical isomorphisms such as 0 ⊕ X ∼= X ∼= X ⊕ 0 and (X ⊕ Y ) ⊕ Z ∼= X ⊕ (Y ⊕ Z) when we can infer them from the context, and we simply write X ⊕ Y ⊕· · · ⊕ Z for ((X ⊕ Y ) ⊕ ··· ) ⊕ Z.



Concrete description of fdVect
As an illustration, we explain how the abelian category fdVectK looks like. We first note that we can regard each arrow f : Kn → Km in fdVectK as an n× m-matrix. Below, we identify n× m-matrices with arrows from Kn to Km, and we also identify the monoidal product Kn ⊕ Km with Kn+m in the obvious way. Under this identification, the identity on Kn is the n × n identity matrix In, and the composition of arrows in fdVectK is the multiplication of matrices. The zero arrow 0Kn,Km : Kn → Km is the zero matrix, and the addition f + g : Kn → Km is given by the pointwise manner. The projections πKn,Km : Kn+m → Kn and

πj n,K
m : Kn+m → Km are given by



π	= ,	In
⎞ ,	πj
= ,0Kn,Km ⎞ ,

Kn,Km
⎝0Km,Kn ⎠
Kn,Km
⎝	Im	⎠



and the injections ιKn,Km : Kn → Kn+m and ιj

n,K
m : Km → Kn+m are given by




ιKn,Km =  In

0Kn,K

m ,	ιj


n,K

m = 0K


m,K

n Im .


It is easy to check the four equations (2) are true for these projections and injections. For example, we have ιKn,Km ; πKn,Km = idKn because




 In 0Kn,Km
 ,⎝	In
⎞⎠ = In ; In + 0Kn,Km ; 0Km,Kn = In.

The matrix decomposition of an arrow f : Kn+m → Kn′+m′ is the partitioning of f
into the following 4 blocks:




.






Given an arrow f : Kn → Kn′ in fdVect
isomorphisms in fdVectK such that
, let u : Kn → Kn and v : Kn′ → Kn′ be

f = u ; ,	Il	0Kl,Kn′−l
0Kn−l,Kl 0Kn−l,Kn′−l
⎞⎠ ; v.	(3)

The natural number l is the rank of f . The regular-epi/mono factorization of f is of the following form:
n   e  	l  m  	n′

K
where e and m are given by
,K,,, ,K,

e = u ; ,⎝	Il
⎞⎠ ,	m = Il



0Kl,Km−l


 ; v.


Because u and v in (3) are not unique, the above decomposition of f is not unique. Still, the decomposition is unique up to isomorphism.
Partial traces on additive categories
Because an additive category with a total trace is equivalent to the trivial one-object additive category {0} (see [8]), interesting partial traces on additive categories must be strictly partial. We give some examples of partial traces. The first two examples are from [5,13].
Example 3.1 We define a partial trace exC on an additive category C by
Z	  fXY + fXZ ; (idZ − fZZ)−1 ; fZY ,	if idZ − fZZ is invertible,

where (fAB : A → B)A,B is the matrix decomposition of f : X ⊕ Z → Y ⊕ Z. When

fZZ is nilpotent, idZ − fZZ is an isomorphism, and we have


(exC )Z
n ZZ
n∈N
; fZY .	(4)

The right hand side is called the execution formula [6]. Informally, the result of the execution formula is the accepting language of the following automaton:
ϵ
where ϵ is the ϵ-transition, and Y is the final state. We note that (4) does not make sense in general as the execution formula subsumes infinite summation.
Example 3.2 We give another partial trace kiC called the kernel-image trace on an additive category C. For f : X ⊕ Z → Y ⊕ Z, if there are g : X → Z and h : Z → Y such that

X 	fXZ	,Z,

idZ −fZZ
rZ,


h


fZY



r,Y ,, ,

we define (kiC )Z
(f ) to be fXY + fXZ ; h; otherwise, (kiC )Z
(f ) is undefined. We

note that (kiC )Z
(f ) is independent of the choice of g and h. It is easy to see that

when idZ − fZZ is invertible, (kiC )Z
(f ) is defined and is equal to (exC )Z
(f ).

Hence, we have exC ≤ kiC . For the definition of the partial order ≤ between partial traces, see Example 2.5.
We say that a partial trace tr on an additive category C satisfies strong naturality
when tr satisfies


g ; trZ
(f ) ; h trZ
((g ⊕ Z) ; f ; (h ⊕ Z))

for all f : X⊕Z → Y ⊕Z, g : U → X and h : Y → V in C. We give a characterization of exC .
Theorem 3.3 Let C be an additive category. We have:
The partial trace exC satisﬁes strong naturality.
If a partial trace tr on C satisﬁes strong naturality, then tr ≤ exC. Hence, exC is the largest partial trace that satisﬁes strong naturality.
Proof. It is easy to check the first claim. For the second claim, the point of the proof is that for a partial trace tr on C and for an arrow f : X ⊕ Z → Y ⊕ Z in C,

if
Z Z,Z

((Z ⊕ δZ) ; (σZ,Z ⊕ fZZ) ; (Z ⊕ γZ)) : Z → Z	(5)

is defined, then it is the inverse of idZ − fZZ where fZZ : Z → Z is the (Z, Z)th entry of the matrix decomposition of f . We use strong naturality to show that if

Z X,Y
(f ) is defined, then (5) is defined	2

We give an example of a partial trace that is smaller than exVectK . Let G ⊆
K \ {0} be a subgroup. We define a partial trace tr on VectK by
Z	 fXY + fXZ ; (idZ − fZZ)−1 ; fZY ,	if det(idZ − fZZ) ∈ G,


where {fAB : A → B}A,B is the matrix decomposition of f . We can check that tr is a partial trace as in the proof of exVectK being a partial trace given in [5, Section 2.2]. When G is not equal to K \ {0}, we have tr < exVectK .
Partial traces on abelian categories
In this section, we study partial traces on abelian categories. When C is an abelian category, C and Cop are regular categories. Therefore, as we observed in Example 2.7, there are two different constructions of partial traces on C: one is relC that is induced by the strong symmetric monoidal functor HC : C → Rel(C), and the other is relCop that is induced by the strong symmetric monoidal functor (HCop )op : C → Rel(Cop)op. The goal of this section is to clarify how these partial traces are related and to give their characterizations. Below, we fix an abelian category C.
Proposition 4.1 relC = relCop .
Proof. (Sketch) We define a functor Θ: Rel(C) → Rel(Cop)op by ΘX = X and

R   s  ,Y ,

Θ(⟨r, s⟩ : R > X ⊕ Y )= [q, p]: Y ⊕ X → S	where
r	p.o	q
,	, 

X	p  ,S ,.
It is easy to check that HC ; Θ is equal to (HCop )op. The functor Θ is a symmetric monoidal isomorphism and preserves total traces. Hence, by the definition of relC and relCop , they are the same.	2
We next show that relC is the largest partial trace on C. We prepare two lemmas.

Lemma 4.2 Let f : X ⊕ Z  → Y ⊕ Z be an arrow in C, let (fAB : A  →
B)A=X,Z; B=Y,Z be the matrix decomposition of f, and let
Z 	e	,W,,,m	,Z,

be the regular-epi/mono factorization of idZ − fZZ. If there are arrows g : X → W
and h : W → Y such that the following triangles commute:
X  fXZ ,Z,

m
r¸ ¸
W

r 
Z  fZY  ,Y , ,


then (relC )Z
(f ) is deﬁned and is equal to fXY + g ; h.

Proof. We define p : P → X to be the pullback of e : Z → W along g : X → W :
P	q	,Z,
p	p.b	e
,	, 
X	g	,W, .
By the definition of arrows p and q, the tuple ⟨p, q⟩ : P > X ⊕ Z is the kernel of

πX,Z ; g − πj
; e. Since m is a monomorphism, ⟨p, q⟩ : P > X ⊕ Z coincides with

the kernel of (πX,Z ; g − πj
; e) ; m, which is equal to f ; πj

	q	
P	,Z,
j
X,Z
. Hence,

⟨p,q⟩	δZ
,	, 

X ⊕ Z	′
X,Z
,f ;π′
,Z,⊕ Z
⟩

is a pullback square. Because p is an epimorphism, the right hand side of
⟨p, q⟩ ; ⟨πX,Z,f ; πY,Z⟩ = p ; ⟨idX, fXY + g ; h⟩
is the regular-epi/mono factorization of the left hand side of this equation. Hence,

(relC )Z
(f ) is defined and is equal to fXY + g ; h.	2

Lemma 4.3 Let C be an additive category, and let tr be a partial trace on C. For all arrows f : X → Z, g : Z → Z and h : Z → Y in C, if

Z X,Y
((f ⊕ δZ) ; (σZ,Z ⊕ g) ; (h ⊕ γZ))

is deﬁned, then for all k : Z → W,

Z X,W
((f ⊕ δZ) ; (σZ,Z ⊕ g) ; (((idZ − g) ; k) ⊕ γZ))

is deﬁned and is equal to f ; k.

Lemma 4.4 Let f : X ⊕ Z  → Y ⊕ Z be an arrow in C, let (fAB : A  →
B)A=X,Z; B=Y,Z be the matrix decomposition of f, and let
Z 	e	,W,,,m	,Z,
be the regular-epi/mono factorization of idZ − fZZ. Given a partial trace tr on C,

if trZ
(f ) is deﬁned, then there are arrows g : X → W and h : W → Y such that

the following triangles commute:
X  fXZ ,Z,

m
r¸ ¸
W




and trZ


(f ) is equal to fXY + g ; h.
r 
Z  fZY  ,Y , ,

Proof. We first note that m : W > Z is the kernel of the cokernel of idZ − fZZ,

and e : Z → W is the cokernel of the kernel of idZ − fZZ. Because trZ
(f ) is

defined, the right hand side of

−fXY + trZ
(f )  γX ; ((−fXY ) ⊕ trZ
(f )) ; δY

Z X,Y
((fXZ ⊕ γZ) ; (σZ,Z ⊕ fZZ) ; (fZY ⊕ δZ))

is defined. Therefore, by Lemma 4.3,


Z X,Z
((fXZ ⊕ δZ) ; (σZ,Z ⊕ fZZ) ; ((idZ − fZZ) ⊕ γZ))

is defined and is equal to fXZ. Let c : Z → C be the cokernel of idZ − fZZ. Then by naturality, we obtain


fXZ;c ≤ trZ
((fXZ⊕fZZ);γZ;ιj
)  trZ
(f ;(0Y,C⊕Z)) ≥ trZ
(f );0Y,C ≤ 0X,C.

Hence, there exists a unique g : X → W such that
  g 
fXZ = X	,W,,, ,Z,. 

In the same way, we can show that there exists a unique h : W → Y such that
fZY = Z   e  ,W,  h  ,Y ,. 
It remains to check that trZ	(f ) is equal to fXY + g ; h. We define p : P → X to
be the pullback of e : Z → W along g : X → W :
P	q	,Z,
p	p.b	e
,	, 
X	g	,W, .

Because
p ; (−fXY + trZ


(f ))  p ; γX ; ((−fXY ) ⊕ trZ


(f )) ; δY

Z P,Y
Z P,Y
(((p ; fXZ) ⊕ δZ) ; (σZ,Z ⊕ fZZ) ; (fZY ⊕ γZ))
(((q ; (idZ − fZZ)) ⊕ δZ) ; (σZ,Z ⊕ fZZ) ; (fZY ⊕ γZ)),



it follows from Lemma 4.3 that p ; (−fXY + trZ
(f )) is equal to q ; fZY = p ; g ; h.

Hence, we see that trZ	(f ) is equal to fXY + g ; h.	2
The following theorems are straightforward consequences of Lemma 4.2 and Lemma 4.4. The first one means that relC is the largest partial trace on C, and the second one means that we can define relC without referring to Rel(C).
Theorem 4.5 If tr is a partial trace on C, then tr ≤ relC.
Theorem 4.6 Let f : X ⊕ Z → Y ⊕ Z be an arrow in C, let (fAB : A →
B)A=X,Z; B=Y,Z be the matrix decomposition of f, and let
Z 	e	,W,,,m	,Z,
be the regular-epi/mono factorization of idZ − fZZ. Then we have
⎧⎪⎨fXY + h ; k,	if fXZ = h ; m and fZY = e ; k for some
		
undefined,	otherwise.
Corollary 4.7 Any partial trace tr on an abelian category C is uniform in the following sense: for all arrows f : X ⊕ Z → Y ⊕ Z and g : X ⊕ W → Y ⊕ W such

that trZ
and trW
are deﬁned, if there is an arrow h : Z → W satisfying
  f	
X ⊕ Z	,Y ,⊕ Z

X⊕h
, 
Y ⊕h
, 

X ⊕ W	g	,Y ,⊕ W	,


then trZ
(f ) = trW
(g).

Proof. We can easily check that relC is uniform in the above sense. Uniformity of arbitrary traces tr on C follows from tr ≤ relC .	2
When C is a semisimple abelian category, the kernel-image trace kiC is equal to the largest partial trace relC .
Corollary 4.8 Let C be a semisimple abelian category. If tr is a partial trace on
C, then tr ≤ kiC.
Proof. We show that kiC coincides with relC . Let f : X ⊕ Z → Y ⊕ Z be an

arrow in C such that (relC )Z
(f ) is defined. Let (fAB : A → B)A=X,Z; B=Y,Z be

the matrix decomposition of f , and let
Z 	e	,W,,,m	,Z,
be the regular-epi/mono factorization of idZ − fZZ. By Theorem 4.6, there are g : X → W and h : W → Y such that fXZ = g ; m and fZY = e ; h. Because every object is projective and injective, we obtain arrows gj : X → Z and hj : Z → Y such that every triangle in

X 	fXZ	,Z,

g

′

g

Z



fZY	,Y ,

commutes.	Hence, (kiC )Z	(f ) is defined and is equal to fXY + gj ; fZY  =

(relC )Z
(f ).	2

We note that Corollary 4.8 does not hold for Ab, which is not a semisimple abelian category. To see this we show that kiAb < relAb. Let f : Z2 ⊕ (Z ⊕ Z2) → Z2 ⊕ (Z ⊕ Z2) be an arrow in Ab given by
f ([x], y, [z]) = ([x], y, [x + y + z])
where we write Z2 for Z/2Z, and [n] ∈ Z2 is the equivalence class of an integer
n ∈ Z. We shall show that (kiAb)Z⊕Z2 (f ) is not defined and that (relAb)Z⊕Z2 (f )

is defined and is equal to idZ2 .
Z2,Z2
Z2,Z2

(kiAb)Z⊕Z2 (f ) is not defined because there is no g : Z2 → Z ⊕ Z2 such that


ιZ2,Z⊕Z2
j
Z2,Z⊕Z2
= g ; (idZ⊕Z2
j
Z2,Z⊕Z2
Z2,Z⊕Z2 ).

We note that the left hand side is equal to ιj
2
and idZ⊕Z2
j
Z2,Z⊕Z2
j
Z2,Z⊕Z2

maps (y, [z]) to (0, [y]).
(relAb)Z⊕Z2 (f ) is defined and is equal to idZ
because the triangles



	ι′
Z2	¸¸2
ι′
Z,Z2
¸¸
r 
2
¸¸
e
Z ⊕ Z2







0Z2,Z2


0Z⊕Z2,Z2





r,Z2 ,



commute where the vertical arrow e ; ιj
2
is the regular-epi/mono factorization

of h. The epimorphism e : Z ⊕ Z2 → Z2 is given by e(x, [y]) = [x].

References
Abramsky, S., E. Haghverdi and P. J. Scott, Geometry of interaction and linear combinatory algebras, Mathematical Structures in Computer Science 12 (2002), pp. 625–665.
Blute, R. and P. J. Scott, “Category Theory for Linear Logicians,” London Mathematical Society Lecture Note Series, Cambridge University Press, 2004 pp. 3–64.
Borceux, F., “Handbook of Categorical Algebra,” Encyclopedia of Mathematics and its Applications
2, Cambridge University Press, 1994.
Girard, J.-Y., Geometry of interaction 1: Interpretation of system F, in: R. Ferro, C. Bonotto,
S. Valentini and A. Zanardo, editors, Logic Colloquium ’88, Studies in Logic and the Foundations of Mathematics 127, Elsevier, 1989 pp. 221–260.
Haghverdi, E. and P. J. Scott, Towards a typed geometry of interaction, Mathematical Structures in Computer Science 20 (2010), pp. 473–521.
Haghverdi, E. and P. J. Scott, “Geometry of Interaction and the Dynamics of Proof Reduction: A Tutorial,” Springer-Verlag Berlin Heidelberg, 2011 pp. 357–417.
Hasegawa, M., “Models of Sharing Graphs: A Categorical Semantics of let and letrec,” Ph.D. thesis, University of Edinburgh (1997), ECS-LFCS-97-360.
Hoshino,	N.,	Partial	traces	on	additive	categories,
http://www.kurims.kyoto-u.ac.jp/~naophiko/mfps_proof.tex

Joyal, A., R. Street and D. Verity, Traced monoidal categories, Mathematical Proceedings of the Cambridge Philosophical Society 119 (1996), pp. 447–468.
Kashiwara, M. and P. Schapira, “Categories and Sheaves,” Grundlehren der mathematischen Wissenschaften 332, Springer-Verlag Berlin Heidelberg, 2006.
Lang, S., “Algebra,” Graduate Texts in Mathematics 211, Springer-Verlag New York, 2002.
Mac Lane, S., “Categories for Working Mathematician,” Springer-Verlag New York, 1978.
Malherbe, O., P. J. Scott and P. Selinger, Partially traced categories, Journal of Pure and Applied Algebra 216 (2012), pp. 2563–2585.
Selinger, P., A survey of graphical languages for monoidal categories, in: B. Coecke, editor, New Structures for Physics, Lecture Notes in Physics 813, Springer-Verlag Berlin Heidelberg, 2011 pp. 289–355.
