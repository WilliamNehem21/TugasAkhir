Available online at www.sciencedirect.com


Electronic Notes in Theoretical Computer Science 286 (2012) 5–16
www.elsevier.com/locate/entcs

Category Theoretic Understandings of Universal Algebra and its Dual: Monads and Lawvere Theories, Comonads and What?
Mike Behrischa,1 Sebastian Kerkhoffa,2 and John Powerb,3
a Institut fu¨r Algebra, Technische Universit¨at Dresden, Dresden, GERMANY
b Department of Computer Science, University of Bath, Bath, ENGLAND

Abstract
Universal algebra is often known within computer science in the guise of algebraic specification or equational logic. In 1963, it was given a category theoretic characterisation in terms of what are now called Lawvere theories. Unlike operations and equations, a Lawvere theory is uniquely determined by its category of mod- els. Except for a caveat about nullary operations, the notion of Lawvere theory is equivalent to the universal algebraist’s notion of an abstract clone. Lawvere theories were soon followed by a further characterisation of universal algebra in terms of monads, the latter quickly becoming preferred by category theorists but not by universal algebraists. In the 1990’s began a systematic attempt to dualise the situation. The notion of monad dualises to that of comonad, providing a framework for studying transition systems in particular. Constructs in universal algebra have begun to be dualised too, with different leading examples. But there is not yet a definitive dual of the concept of Lawvere theory, or that of abstract clone, or even a definitive dual of operations and equations. We explore the situation here.
Keywords: Universal algebra, Lawvere theory, abstract clone, monad, comonad.


Introduction
There have been two main category theoretic formulations of universal algebra. The earlier was by Bill Lawvere in 1963 [16]. Nowadays, his central construct is usually called a Lawvere theory, more prosaically a single-sorted finite product theory [1,2]. Lawvere made a careful distinction between the notions of Lawvere theory and equational theory. Equational theories are a form of presentation for Lawvere theo- ries: every equational theory determines a Lawvere theory and every Lawvere theory

1 Email: Mike.Behrisch@mailbox.tu-dresden.de
2 Email: sebastian.kerkhoff@tu-dresden.de
3 Email: A.J.Power@bath.ac.uk

1571-0661 © 2012 Elsevier B.V. Open access under CC BY-NC-ND license.
doi:10.1016/j.entcs.2012.08.002

is determined by an infinite class of equational theories. Choosing good presenta- tions for a Lawvere theory and deriving an invariant description of the theory from a presentation are important, but the semantics of a Lawvere theory can be consid- ered independently of that [16]. We give the definitions and outline the situation in Section 2.
Universal algebraists have had the same concerns about the lack of invariance of presentations as category theorists have had. They have long used the notion of clone, of which Lawvere was aware, and they have gradually moved towards that of abstract clone [4]. Subject to a caveat about nullary operations, the notion of abstract clone is equivalent to that of Lawvere theory. So, subject to the caveat, universal algebraists readily recognise the definition of Lawvere theory and accept its significance for universal algebra. We give the definitions and constructions in Section 3.
The second category-theoretic formulation of universal algebra, which was in terms of monads, has a more complicated history and is much less accepted by universal algebraists. Monads typically arise from adjoint pairs of functors. The notion of monad (or triple or standard construction) arose in algebraic topology for reasons distinct from universal algebra, see for instance [6]. In 1965, Eilenberg and Moore noted that in case T is the free group monad, their category of T -algebras is the category of groups [5].
In 1966, Linton made the general connection between monads and Lawvere theories: every Lawvere theory gives rise to a monad on Set whose category of algebras is equivalent to the category of models of the Lawvere theory, and, subject to a generalisation in the definition of Lawvere theory, every monad arises thus, uniquely up to coherent isomorphism [17]. So Linton focused on a generalisation of the notion of a Lawvere theory, one that corresponds exactly to the notion of monad. We give the details in Section 4.
Monads have been the more common category theoretic formulation of universal algebra, see for example [19]. But Lawvere theories relate more closely to universal algebra; they arose directly from universal algebra; and they allow natural con- structions that arise in universal algebra, such as the sum or tensor of theories, while monads do not [9]. So it seems little wonder that, although many universal algebraists are aware of monads, they seem generally not to have found them, or an equivalent notion, very helpful. Much of the relevant historical development has been summarised in [9].
Over the past decade or so, category theorists, computer scientists and universal algebraists have all become interested in the dual of this situation, for a variety of reasons [7,10,14,24,26,29].
A leading example for the interest by computer scientists arises from transition systems, which play a fundamental role in, for example, concurrency [21]. A finitely branching transition system is given by a set S together with a function t : S −→ Pf (S), where Pf (S) is the set of finite subsets of S. The functor Pf on Set generates a cofree comonad G(Pf ), and t corresponds to the G(Pf )-coalgebra that sends an element σ of S to the set of all possible streams of transitions generated by t with

source σ. We would like to develop a body of theory that is dual to universal algebra and includes this example, but it is not easy. We outline some of the issues in Section 5.
One approach to dualising the theory of Lawvere theories is by defining a co- model of a Lawvere theory L in Set to be a model of L in Setop. That line of thought has proved to be valuable for category theorists, for computer scientists, and for uni- versal algebraists [14,24,26]. The category of comodels induces a comonad and is the category of coalgebras for the induced comonad on Set. But this approach does not include transition systems.
Alternatively, one can dualise definitions associated with presentations, carefully dualising the structure of [13,27]. That line of thought has value too [7]. But the fact that Set is a locally finitely presentable category while Setop is not, leads to less elegant results than one would wish [7], and one loses the presentation independence that is central to the notions of Lawvere theory and abstract clone.
Linton’s generalised notion of Lawvere theory, corresponding exactly to the no- tion of monad on Set, suggests a third approach: Linton did not require size con- ditions [17,18], so dualising his definition is immediate, yielding a definition that is equivalent to that of comonad on Set, thus including transition systems. But sums of monads need not exist, so products of comonads need not exist either; similarly for tensors.
So the question is open, hence the question mark in the title of this paper. We outline the above three proposals in Section 6, and we propose a tentative definition of a dual Lawvere theory in Section 7, leaving its development for further work.
Lawvere theories
In his 1963 PhD thesis, Lawvere gave a category theoretic formulation of universal algebra along the following lines.
Definition 2.1 Let ℵ0 denote a skeleton of the category of finite sets and all func- tions between them, considered as a category with strictly associative coproducts.
Since ℵ0 is equipped with strictly associative finite coproducts given by the ordinal sum of natural numbers, the opposite category ℵop is equipped with strictly associative finite products. It is equivalent to the free category with finite products on 1 as ℵ0 is equivalent to the free category with finite coproducts on 1.
Definition 2.2 A Lawvere theory consists of a small category L with (necessarily strictly associative) finite products and a strict finite-product preserving identity-
on-objects functor I : ℵop −→ L. A map of Lawvere theories from L to Lj is a
(necessarily strict finite-product preserving) functor from L to Lj that commutes with the functors I and Ij.
Thus the objects of any Lawvere theory L are exactly the objects of ℵ0, and every function between such objects yields a map in L. Note that the functor I need not be an inclusion. One often refers to the maps of a Lawvere theory as

operations. The notion of map between Lawvere theories encapsulates the idea of an interpretation of one theory in another.
The definitions of Lawvere theory and map between them yield a category Law, with composition given by ordinary composition of functors. The category Law is complete and cocomplete, indeed a locally finitely presentable category.
Given an equational theory, one generates a Lawvere theory by putting L(n, 1) = F n, the free algebra on n generators. This determines L(n, m) for any m as L(n, m) must be the product of m copies of L(n, 1). The composition of L is fully determined by the family of maps
(F p)n × Fn −→ Fp 
determined by substitution of n terms of p variables into a term of n variables.
For most mathematical purposes, one understands a Lawvere theory by study of its models.
Definition 2.3 A model of a Lawvere theory L in a category C with finite products is a finite-product preserving functor M : L −→ C.
Note that one has preservation of finite products here, not strict preservation. Preservation rather than strict preservation of finite products is fundamental: if one demanded strict preservation, the category of models for the Lawvere theory for a monoid would be empty, rather than being the category of monoids as one wants. The reason is that, with the usual set-theoretic definitions, finite products in Set are not strictly associative, whereas they are strictly associative in any Lawvere theory. Preservation rather than strict preservation also allows a smooth account of change of base category along a finite product preserving functor H : C −→ Cj. The requirement that M preserves projections, which is part of what preserva- tion of products means, determines the behaviour of M on all operations of the form If : projections in L amount to coprojections in ℵ0, and every function f is given by a family of coprojections. So what determines a model is the interpretation of
the other operations.
There is a mild difference here between universal algebra and category theory traditions. Some universal algebraists only admit non-empty models [3]. So, for example, a category theorist would regard the empty set as a carrier for the struc- ture of a semigroup, whereas some universal algebraists would not. For a category theorist, the empty semigroup is important as it is the initial object in the category of semigroups.
Definition 2.4 For any Lawvere theory L and any category C with finite products, the category Mod(L, C) is defined to have objects given by all models of L in C, with maps given by all natural transformations between them.
The definition of map in Mod(L, C) is subtle. One can readily prove that any natural transformation between models respects finite products: for any natural transformation α between models M and N , and for any n in ℵ0, the map αn : Mn −→ Nn is given by the product of n copies of the map α1 : M 1 −→ N 1. Thus

the maps in Mod(L, C) could equally be defined to be those natural transformations that respect the product structure of L.
The semantic category C of primary interest is Set. Consider a model M of a Lawvere theory L in Set. The set M 1 determines Mn up to coherent isomorphism for every n in L: for M preserves finite products of L, equivalently of ℵop; these are finite coproducts of ℵ0, which are given by finite sums; and so Mn must be a product of n copies of M 1. Thus to give a model M is equivalent to giving a set X = M 1 together with, a function from Xm to X for each map of the form f : m −→ 1 in the category L, subject to the equations given by the composition and product structure of L; and Mod(L, Set) is equivalent to the evident category of such structures. This analysis routinely extends to any category C with finite products.
The category Mod(L, Set) is always complete and cocomplete, with the initial object given by the empty set if L has no nullary operations.
Unlike equational theories, Lawvere theories are semantically invariant. The precise sense in which that is so is as follows. With each Lawvere theory L, we associate the underlying set functor
ev1 : Mod(L, Set) −→ Set
given by evaluation at 1. This is the semantics functor of Lawvere [16]. We say that the categories Mod(L, Set) and Mod(Lj, Set) of models are coherently equivalent if there is an equivalence of categories between them that respects the underlying set functor.
Proposition 2.5 [16] Given Lawvere theories L and Lj, if the categories Mod(L, Set) and Mod(Lj, Set) are coherently equivalent, then the Lawvere theo- ries L and Lj are isomorphic in the category Law.
Abstract clones
Let C be an arbitrary category and let X be an object of C for which all finite powers of X also exist in C.
Definition 3.1 Setting OX = n>0 C(Xn,X), a subset Cl ⊆ OX is called a clone of operations over the object X if it contains all projections πi : Xn −→ X and is closed under composition, i.e., writing Cln for those elements of Cl that lie in C(Xn,X), given f ϵ Cln and f1,..., fn ϵ Clk, the composite f (f1,..., fn) is in Clk.
This seems the most straightforward possible generalisation of a clone to abstract categories [14]. It is almost verbatim the definition in universal algebra [4] except that the composition under which the clones must be closed is written with the help of tuplings. In particular, putting C = Set, this is exactly the notion of a clone as studied in universal algebra [25,28,15].
Note that nullary operations are excluded from the definition, i.e., C(X0,X) /⊆ OX . This follows a convention in universal algebra, which has its advantages but also disadvantages. The notion is naturally connected with that of models of Law-

vere theories, although it would be even more natural if one would allow nullary operations, which are less often encountered in universal algebraic literature, e.g., in [20].
Proposition 3.2 [14] A subset Cl ⊆ OX is a clone of operations over X if and only if there exists a model M : L −→ C of a Lawvere theory L in C such that
M (1) = X and Cl = `n>0{M (f ) | fϵL(n, 1)}.
The notion of clone is standard within universal algebra and has been so for many years. What is less standard is the abstraction from a base set X toa notion corresponding exactly to that of a Lawvere theory, modulo the above caveat about nullary operations. In order to state a precise equivalence result, in the following, we shall allow abstract clones to have nullary operations.
Definition 3.3 cite [4,14] An abstract clone consists of
for each n ≥ 0, a set Cln, the elements of which are called n-ary operations
for 1 ≤ i ≤ n, an n-ary operation πi (allowing overloading of notation as, strictly speaking, we have a πi for each n)
for each n-ary operation g and m-ary operations f1,..., fn, an m-ary operation
g(f1,..., fn)
such that, subject to the composites being defined,
(h(g1,..., gn))(f1,..., fm)= h(g1(f1,..., fm),..., gn(f1,..., fm))
πi(f1,..., fn)= fi for all ≤ i ≤ n
f (π1,..., πn)= f .
Proposition 3.4 To give an abstract clone is equivalent to giving a Lawvere theory.
Proof. Given an abstract clone Cl, put LCl(n, m) = Clm, with composition de- termined by the composition of operations in Cl, and with the identity on n given by (π1,..., πn). Observe that LCl forms a category with strictly associative finite products given by ordinal sum of natural numbers together with tuples of the πi’s, and use the fact that ℵop is the free category with finite products on 1 to generate
op	0
the functor I : ℵ0 −→ LCl. Thus LCl is a Lawvere theory.
For the converse, given a Lawvere theory L, put (ClL)n = L(n, 1), define the πi’s using projections of L, and define composition of operations by the composition of L together with the universal property of finite products. This data readily satisfies the axioms for an abstract clone.
The two constructions are routinely checked to be mutually inverse.	2
Monads
Soon after Lawvere theories were defined, Linton showed that every Lawvere theory yields a monad on Set [17]. The construction extends to a fully faithful functor from Law to the category Mnd of monads on Set. The functor is not an equivalence of

categories. So in this precise sense, a monad on Set is a more general notion than that of Lawvere theory.
Linton also gave a partial converse. One can generalise the definition of Lawvere theory to allow for arities of arbitrary size, with a generalised theory no longer a small category or fully determined by one. The construction of a monad from a Lawvere theory then generalises to an equivalence of categories between the category of generalised Lawvere theories and Mnd. In [18], Linton accordingly generalised Lawvere’s treatment of semantics and algebraic structure.
In more detail, for any Lawvere theory L, let UL : Mod(L, C) −→ C denote evaluation at 1, cf. Proposition 2.5. If UL has a left adjoint FL, as it does whenever C is locally presentable, it exhibits Mod(L, C) as equivalent to the category TL-Alg for the induced monad TL on C [1]. Since Set is locally finitely presentable, every Lawvere theory L induces a monad TL on Set.
Proposition 4.1 The monad TL may be described by the following colimit:
nєℵ0
TLX = ∫ L(n, 1) × Xn
This colimit can be constructed by taking the coproduct
L(n, 1) × Xn
nєℵ0
then factoring by identifying elements determined by taking projections and diago- nal maps of ℵop. So it is the set of all equivalence classes of terms generated by the operations of L, with variables among the elements of X, subject to the equalities determined by L.
Proposition 4.2 The construction sending a Lawvere theory L to the monad TL extends to a fully faithful functor from Law to Mnd. Moreover, the comparison functor exhibits an equivalence between Mod(L, Set) and TL-Alg.
One can readily check that TL is always finitary. When the base category is Set, finitariness characterises the image of the construction, but that was an observation of a later time [12].
For a converse, observe that for any monad T on Set, the Kleisli category Kl(T ) has all small coproducts and the canonical functor I : Set −→ Kl(T ) preserves them: the canonical functor I has a right adjoint and is identity-on-objects. Re- stricting I to the full subcategory ℵ0, we obtain (the opposite of) a Lawvere theory as in the diagram.
Lop 	) Kl(T )
ˆ	ˆ
ℵ0 	) Set

It is straightforward to show the following.
Proposition 4.3 The construction sending a monad T on Set to the category

Kl(T )op
0
determined by restricting Kl(T ) to the objects of ℵ0 extends to a func-

tor L− : Mnd −→ Law.
Given a Lawvere theory L, one can readily prove that L(TL) is isomorphic to L, but the converse is false: the only monads of the form TL are the finitary ones. Thus we have the following.
Theorem 4.4 The constructions sending L to TL and that sending T to LT exhibit
Law as a full coreflective subcategory of Mnd, the category of monads on Set.
Because this is not an equivalence of categories, Linton generalised the definition of Lawvere theory to consider a locally small category L with all small products, together with a strict product preserving identity-on-objects functor from the oppo- site of a skeleton of Set to L. With this generalised notion of Lawvere theory, Linton showed that the construction of Proposition 4.2 extends, and in the corresponding version of Theorem 4.4, one has an equivalence of categories [17].
The different range of generality of the ideas of monads and Lawvere theories extends to the connection between (generalised) Lawvere theories and monads. One can consider monads on any category, while Lawvere theories correspond to (fini- tary) monads on Set. On the other hand, a monad on a category C has algebras, i.e., models, only in C, while a Lawvere theory naturally has models in any cat- egory with products. So while monad maps between monads on Set (see [1] for this notion of monad map) correspond directly to maps of Lawvere theories, there is nothing in the world of monads (at least nothing to which one has immediate access) corresponding to the functoriality of Mod(L, C) in C.
Comonads and transition systems
The notions of monad and algebra dualise to those of comonad and coalgebra: that is easy.
Definition 5.1 A comonad on a category C is a monad on Cop. Given a comonad
G on C, a G-coalgebra is a G-algebra for G qua monad on Cop.
So the body of abstract theory initiated by Eilenberg and Moore for algebra immediately yields a body of abstract theory for coalgebra [5], and that has proved to be of considerable importance for computer science over the past twenty years or so [10]. A leading example is as follows.
Definition 5.2 Given a set A, a ﬁnitely branching A-labelled transition system is a pair (S, t) consisting of a set S and a function t : S −→ Pf (A × S), where Pf (X) is the set of finite subsets of a set X.
The transition function t tells you, given a machine in state σ, to what states it might pass in one A-labelled move. The notion is fundamental to the theory of concurrency, for instance, playing a central role in CCS [21].

The axiomatic situation is that in a category C such as Set, one considers a pair (X, x) consisting of an object X of C and a map x : X −→ H(X), where H is an endofunctor on C. Such a pair is called an H-coalgebra [10]. In such axiomatic terms, a finitely branching A-labelled transition system is precisely a Pf (A × −)- coalgebra.
The structure of the category of Pf (A×−)-coalgebras can be used to characterise the critical notion of bisimulation in concurrency [21]. In fact, the body of theory of bisimulation can be defined and developed axiomatically in terms of H-coalgebras for an arbitrary endofunctor H satisfying axiomatically defined conditions [10].
The most fundamental construct one makes in coalgebra is the construction of the cofree comonad G(H) on H if it exists. To give an H-coalgebra is equivalent to giving a G(H)-coalgebra, where the term coalgebra is overloaded, as H is treated as an endofunctor while G(H) is treated as a comonad.
Theorem 5.3 [7] For any ﬁnitary endofunctor H on any locally ﬁnitely pre- sentable category C, a cofree comonad G(H) on H exists.
Although the statement of this theorem is dual to the statement of a theorem about algebras [11], the proof is different, not dual to the proof of the corresponding theorem for algebras. The reason for the difference is that Set is a locally finitely presentable category, while Setop is not. Much of the category-theoretic effort in- volved with coalgebra revolves around handling that fact.
Although a cofree comonad on a finitary endofunctor on a locally finitely pre- sentable category necessarily exists, it typically is not finitary.
Example 5.4 [7] Given a set A, consider the endofunctor H = A ×− on Set. The cofree comonad G(H) sends a set X to the set of infinite streams of elements of A × X. So, for any countably infinite set X, the set G(H)(X) contains a stream involving infinitely many different elements of X. Such a stream cannot be given by a finite subset of X, and so although G(H) has a rank, that rank is necessarily greater than ℵ0.
This phenomenon has been studied extensively and generalised by Worrell [29]. The key consequence of these issues for us is that dualising notions such as that of Lawvere theory is subtle, and we cannot expect to obtain as neat a relationship as that between Lawvere theories and monads.
Dualising Lawvere theories
One approach to dualising the body of theory of Lawvere theories is as follows.
Definition 6.1 A comodel of a Lawvere theory L in a category with finite coprod- ucts C is a model of L in Cop.
Comodels in C generate a category Comod(L, C), with maps given by natural transformations, and a forgetful functor UL : Comod(L, C) −→ C given by evalua- tion at 1, just as for models as in Section 2. Moreover, albeit with a different proof

to that for models, we have the following, cf. Proposition 4.3.
Theorem 6.2 [26] For any Lawvere theory L and locally ﬁnitely presentable cat- egory C, the forgetful functor UL has a right adjoint, generating a comonad GL on C, whereupon Comod(L, C) is coherently equivalent to GL-Coalg.
This dual of the theory of Lawvere theories appeared in [26], where it was used to model arrays. If LS be the (countable) Lawvere theory for global state, as described in [23,8], the category Comod(LS, Set) is equivalent to the category of arrays [26]. Lawvere theories and their comodels have also been used, extending [23], to model operational semantics [24]. And they have been used, in terms of coclones, in [14]. But this dualisation of the theory of Lawvere theories does not include transition systems [10].
A second approach to dualising algebra is to start not with the notion of Law- vere theory but rather with that of equational theory, dualise it to a notion of co- equational theory, then look for an invariant, allowing us to mimic Proposition 2.5. There is an axiomatic account of the notions of operations, equations, algebras and monads in [13,27] that has been dualised in [7]. The idea is as follows.
Example 6.3 Consider three binary operations and no equations. This may be seen as a single binary operation with codomain 3, cf. the way in which one generates a Lawvere theory from an equational theory [13,27]. A model is a set X together with a function of the form X2 −→ X3. Dualise this to consider a function of the form 2X −→ 3X .
Axiomatically, in [7], one retained the natural numbers as arities, defined the notions of co-operation, co-equation and coalgebra in the spirit of Example 6.3, and proved that any family of co-operations and co-equations generates a comonad G on Set such that the category of G-coalgebras is isomorphic to the category of coalgebras for the co-operations and co-equations. Finitely branching A-labelled transition systems provided a leading example.
A third approach to a dual notion of Lawvere theory is generated by Linton’s work [17,18], as his generalised notion of Lawvere theory as discussed in Section 4 does not depend upon Set being locally finitely presentable, and so generates a dual just as the notion of monad does. As for algebra, this has the drawback of not allowing duals of basic universal algebraic constructs such as sum.
These three approaches, together with a recent characterisation of Lawvere the- ories in [22], collectively suggest a tentative definition of dual Lawvere theory, which we give in Section 7.
Further Work: a proposal for dualising
There are several different but equivalent formulations of the notions of Lawvere theory and model. Starting with the usual definition of Lawvere theory as in Defini- tion 2.2, to give a model of L in Set (Definition 2.3) is equivalent to giving a functor M : L −→ Set such that the composite MI is of the form Set(J−,X), where J

is the inclusion of ℵ0 in Set: it follows from this definition that M preserves finite products; the converse is given by putting X = M 1.
With considerably more effort, one can prove that to give a Lawvere theory is equivalent to giving a small category L together with an identity-on-objects functor I : ℵop −→ L such that I preserves all finite limits in ℵop: this does not imply that
0	0
L has all finite limits, although it does follow that L has all finite products [22].
So one possible notion of dual to investigate is as follows: a dual Lawvere theory is a small category L together with an identity-on-objects functor I : ℵ −→ L that preserves all finite limits in ℵ. Note the dropping of (−)op. A comodel in Set is a functor C : L −→ Set for which CI is of the form Set(X, J−).
This seems to bear comparison with the definitions in [7] and seems to restrict Linton’s abstract work [17,18], which does not require size. It is not clear yet how it relates to comodels of Lawvere theories qua finite coproduct preserving functors. We propose this as further work.

References
Barr, M., and C. Wells, “Toposes, Triples, and Theories,” Grundlehren der math. Wissenschaften 278, Springer-Verlag, 1985.
Barr, M., and C. Wells, ”Category Theory for Computing Science,” Prentice-Hall, London, 1990.
Burris, S. N., and H. P. Sankappanavar, “A course in Universal Algebra,” Springer-Verlag, New York, 1981.
Cohn, P.M. “Universal Algebra,” D. Reidel Publishing, Dordrecht, Netherlands, 1981.
Eilenberg, S., and J. C. Moore, Adjoint Functors and Triples, Illinois J. Math. 9 (1965) 381–398.
Godement, R., “Th´eorie des faisceaux,” Herman, Paris, 1958.
Ghani, N. C. Luth, F. de Marchi and A. J. Power, Dualising initial algebras, Mathematical Structures in Computer Science 13 (2003) 349–370.
Hyland, M., G. D. Plotkin and A. J. Power, Combining effects: sum and tensor, Theoretical Computer Science, 357 (2006) 70-99.
Hyland, M., and A. J. Power, The category theoretic understanding of universal algebra: Lawvere theories and monads, Electronic Notes in Theoretical Computer Science 172 (2007) 437–458.
Jacobs, B., and J. J. M. M. Rutten, An Introduction to (Co)Algebras and (Co)Induction, Advanced Topics in Bisimulation and Induction, Cambridge Tracts in Computer Science (2011) 38-99.
Kelly, G. M., A unified treatment of transfinite constructions for free algebras, free monoids, colimits, associated sheaves, and so on, Bull. Austral. Math. Soc 22 (1980) 1–83.
Kelly, G. M., Structures defined by finite limits in the enriched context I, Cahiers Topologie Geom. Differentielle 23 (1982) 3–41.
Kelly, G. M., and A. J. Power, Adjunctions whose counits are coequalizers, and presentations of finitary enriched monads, J. Pure Appl. Algebra 89 (1993) 163–179.
Kerkhoff, S., “A General Duality Theory for Clones,” PhD Thesis, Technische Universit¨at Dresden, 2011.
Lau, D., “Function algebras on finite sets,” Springer-Verlag, Berlin, 2006.
Lawvere, F. W., “Functorial Semantics of Algebraic Theories,” PhD Thesis, Columbia University, 1963. (Available with commentary as TAC Reprint 5.)

Linton, F. E. J., Some aspects of equational theories, Proc. Conf. on Categorical Algebra at La Jolla (1966), 84–95.
Linton, F. E. J., An outline of functorial semantics, Seminar on Triples and Categorical Homology Theory, Lecture Notes in Mathematics 80 (1969) 7-52.
Mac Lane, S., “Categories for the Working Mathematician,” Springer-Verlag, Berlin, 1971.
McKenzie, R. N., G. F. McNulty, and W. F. Taylor, “Algebras, lattices, varieties. Vol. I,” The Wadsworth & Brooks/Cole Mathematics Series, vol. I, Wadsworth & Brooks/Cole Advanced Books & Software, Monterey, CA, 1987.
Milner, R., “Communication and Concurrency,” Prentice-Hall, London, 1989.
Nishizawa, K., and A. J. Power, Lawvere theories over a general base, J. Pure Appl. Algebra 213
(2009) 377-386.
Plotkin, G. D., and A. J. Power, Notions of computation determine monads, Proc. FOSSACS 2002, Lecture Notes in Computer Science 2303 (2002) 342–356.
Plotkin, G. D., and A. J. Power, Tensors of comodels and models for operational semantics, Proc. MFPS 2008, Electronic Notes in Theoretical Computer Science 218 (2008) 295–311.
P¨oschel, R., and L. A. Kaluˇznin, “Funktionen- und Relationenalgebren,” Mathematische Monographien 15, Deutscher Verlag der Wissenschaften, Berlin, 1979. Ein Kapitel der diskreten Mathematik. [A chapter in discrete mathematics].
Power, A. J., and O. Shkaravska From models to comodels: state and arrays, Proc. CMCS 2004, Electronic Notes in Theoretical Computer Science 106 (2004) 297–314.
Robinson, E., Variations on algebra: monadicity and and generalisations of equational theories, Formal Aspects of Computing 13 (2002) 308–326.
Szendrei, A´., “Clones in universal algebra,” S´eminaire de Math´ematiques Sup´erieures 99, Presses de l’Universit´e de Montr´eal, Montreal, 1986.
Worrell, J., Terminal sequences for accessible endofunctors, in Proc. CMCS 1999, Electronic Notes in Theoretical Computer Science 19 (1999) 24–38.
