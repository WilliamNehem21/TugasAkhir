Available online at www.sciencedirect.com


Electronic Notes in Theoretical Computer Science 298 (2013) 257–282
www.elsevier.com/locate/entcs
Rational Operational Models
Stefan Miliusa,1 Marcello M. Bonsangueb,2 Robert S.R. Myersc,3 Jurriaan Rotb,4
a Lehrstuhl fu¨r Theoretische Informatik, Friedrich-Alexander Universit¨at Erlangen-Nu¨rnberg, Germany
b LIACS – Leiden University and Centrum Wiskunde en Informatica (CWI), The Netherlands
c Institut fu¨r Theoretische Informatik, TU Braunschweig, Germany

Abstract
GSOS is a specification format for well-behaved operations on transition systems. Aceto introduced a restriction of this format, called simple GSOS, which guarantees that the associated transition system is locally finite, i.e. every state has only finitely many different descendent states (i.e. states reachable by a sequence of transitions).
The theory of coalgebras provides a framework for the uniform study of systems, including labelled transition systems but also, e.g. weighted transition systems and (non-)deterministic automata. In this context GSOS can be studied at the general level of distributive laws of syntax over behaviour. In the present paper we generalize Aceto’s result to the setting of coalgebras by restricting abstract GSOS to bipointed specifications. We show that the operational model of a bipointed specification is locally finite, even for specifications with infinitely many operations which have finite dependency. As an example, we derive a concrete format for operations on regular languages and obtain for free that regular expressions have finitely many derivatives modulo the equations of join semilattices.
Keywords: coalgebra, distributive law, regular process, simple GSOS, rational behaviour

Introduction
GSOS [13] is a popular specification format for operations on transition systems, which guarantees that bisimilarity is a congruence. Every GSOS specification in- duces an operational model, which is a concrete transition system on the closed terms of the syntax. Aceto’s simple GSOS [1] is a restriction of this format which guarantees the operational model to be locally finite. This means that any state in this model is contained in a finite subsystem, i.e. it has only finitely many dif- ferent descendent states. Consequently, the behaviour of each term is some kind

1 Email: mail@stefan-milius.eu
2 Email: marcello@liacs.nl
3 Email: me.robmyers@gmail.com
4 Email: jrot@liacs.nl. The research of this author has been funded by the Netherlands Organisation for Scientific Research (NWO), CoRE project, dossier number: 612.063.920.

1571-0661 © 2013 Elsevier B.V. Open access under CC BY-NC-ND license.
http://dx.doi.org/10.1016/j.entcs.2013.09.017

of regular tree modulo bisimilarity. Simple GSOS rules differ from ordinary GSOS in that the target of a conclusion is either a single operation or a variable, rather than an arbitrary term. Moreover, while the number of operations can be infinite, each operation may only depend on finitely many others. Most operations used in practice can be specified in simple GSOS [2].
Operations that preserve finiteness are of considerable importance in automata theory. In order to provide a uniform mathematical treatment of operations on different types of systems, including those from automata theory, we use the theory of universal coalgebra, where the type of a system is completely specified by an endo- functor F . In this context, the rational ﬁxpoint of an endofunctor F on Set is the subcoalgebra of the final F -coalgebra which consists of the behaviours of all finite F -coalgebras. Bipointed speciﬁcations were introduced in [14] as a format which, for a given finite signature of operations with finite arity, defines algebraic operations on the rational fixpoint. This provides an easy syntactic criterion for the preservation of finite behaviour in terms of a format which is a restriction of Turi and Plotkin’s generalization of GSOS via distributive laws [31,20]. Under the assumption that the signature is finite, bipointed specifications for labelled transition systems coincide with simple GSOS. However, the operational model was not considered in [14].
In this paper we complete the generalization of Aceto’s results: (a) we extend the results of [14] from specifications for finitely many algebraic operations to spec- ifications that may define infinitely many operations, but with ﬁnite dependency (cf. [2]); (b) we prove that for a bipointed specification having finite dependency its operational model is locally finite. Result (a) allows e.g. to treat all real numbers as constants in the stream calculus [28], while (b) gives a construction of a finite model for each term, thus paving the way for decidability results.
For the Set functor whose coalgebras are deterministic automata, the rational fixpoint is carried by the set of regular languages. At this point one might expect that all the operators of regular expressions might be specified by bipointed speci- fications for this functor. However, the corresponding rule format is not expressive enough to capture concatenation or the Kleene star. So as a final result we derive a concrete rule format for operations on regular languages, by instantiating our re- sults in the category of join semilattices. Operations defined by rules in this format preserve regular languages, examples being the shuffle product or sequential compo- sition. In fact, the format allows us to define the behaviour of regular expressions. Consequently we obtain for free the well-known result [16] that regular expressions modulo the axioms of join semilattices have only finitely many derivatives.

Preliminaries
We assume that the reader is familiar with basic notions from category theory, including (initial) algebras and (final) coalgebras for endofunctors. Let us now fix notation and briefly mention some examples. We denote by Set the category of sets and functions and by Jsl the category of join semilattices and their morphisms.
We denote the initial algebra for a functor Σ : A→A by ι : Σ(μΣ) → Σ. In most

cases in this paper, Σ will be a polynomial functor on Set given by a (finitary, yet not necessarily ﬁnite) signature of operation symbols, each with prescribed finite arity. Algebras and homomorphisms for such a functor are precisely the general algebras and homomorphisms for the signature.
The final coalgebra for a functor F : A→A is denoted by t : νF → F (νF ). We consider several examples of coalgebras for A = Set (see [27] for many more):
Example 2.1 (1) Deterministic automata with input alphabet A are coalgebras for FX = 2 × XA, where 2 = {0, 1}. The final coalgebra is carried by the set of formal languages P(A∗).
Finitely branching labelled transition systems (LTS) with actions from the set A are coalgebras for FX = Pf(A × X), where Pf is the finite powerset functor. The final coalgebra for F exists and can be thought of as consisting of processes modulo strong bisimilarity of Milner [25].
Weighted transition systems (WTS) are labelled transition systems where tran- sitions have weights (modelling multiplicities, costs, probabilities, etc.) in a monoid M = ⟨M, +, 0⟩. They can be seen as coalgebras (see e.g. Klin [19]): one considers the functor FM, which acts on a set X and a function f : X → Y as FM(X) = {φ : X → M | φ has finite support} and FM(f )(φ)(y) = x∈f−1(y) φ(x). Weighted transition systems with actions from the set A are
then precisely coalgebras for FX = (FMX)A.
Locally finitely presentable coalgebras. We are interested in alge- braic operations on regular behaviour, i.e. behaviour of ﬁnite coalgebras (S, f ) for a functor F . As previously in [14] we present our results for endofunctors on general categories A in which it makes sense to talk about “finite” objects and the ensuing rational behaviour of “finite” coalgebras. So we work with the locally ﬁnitely pre- sentable categories of Gabriel and Ulmer [17] (see also Adamek and Rosicky´ [7]), and we now briefly recall the basics.
A functor F : A→B is called ﬁnitary if A has and F preserves filtered colimits. An object X of a category A is called ﬁnitely presentable if its hom-functor A(X, −) is finitary. A category A is locally ﬁnitely presentable (lfp) if (a) it is cocomplete, and (b) it has a set of finitely presentable objects such that every object of A is a filtered colimit of objects from that set.
Example 2.2 (1) Examples of lfp categories include the category Set, the category of posets and monotone functions, and the category of (multi)graphs and graph morphisms. Their finitely presentable objects are the finite sets, finite posets and finite graphs, respectively.
Fix any finitary signature and also a set of equations between terms over this signature. This induces a finitary variety, i.e. a category whose objects are the algebras for this signature which satisfy the equations, e.g. groups, monoids, join semilattices etc. Its morphisms are the usual algebra morphisms for the signature. Such categories are lfp: the finitely presentable objects are those algebras presented by finitely many generators and finitely many relations.

As a special case consider locally ﬁnite varieties, where the free algebras on finitely many generators are finite. Examples include join semilattices, dis- tributive lattices, boolean algebras and the two-sorted variety of multigraphs. Here the finitely presentable objects are precisely the finite algebras.
Another special case of point (2) is the category VecF of vector spaces over any fixed field F, where the finitely presentable objects are precisely the finite dimensional vector spaces.
Remark 2.3 On the category Set, a finitary functor is determined by its behaviour on finite sets. More precisely, a functor F : Set → Set is finitary iff it is bounded (see, e.g. Ad´amek and Trnkov´a [10]), i.e. for every set X and every element t ∈ FX, there exists a finite subset i : Y ‹→ X such that t ∈ Fi[FY ] ⊆ FX.
Example 2.4 The finite powerset functor Pf is finitary, whereas the ordinary pow- erset functor P is not. The functor FX = XA is finitary if and only if A is a finite set. More generally, the class of finitary endofunctors on Set contains all constant functors and the identity functor, and it is closed under finite products, arbitrary coproducts and composition. Thus, a polynomial functor Σ is finitary iff every op- eration symbol of the corresponding signature has finite arity (but there may be infinitely many operations). The functor FX = R × X is finitary both on Set and on VecR.
Assumption 2.5 Throughout the rest of this paper, we assume, unless stated otherwise, that A is a locally finitely presentable category and F : A → A is a finitary functor. So F has a final coalgebra t : νF → F (νF ) (see Makkai and Par´e [23]).
For a functor F on an lfp category A, the notion of a “finite” coalgebra is captured by requiring the carrier to be finitely presentable. That is, we denote by Coalgf (F ) the full subcategory of Coalg(F ) consisting of those F -coalgebras f : S → FS whose carrier S is a finitely presentable object in A. In order to talk about the behaviour of finite coalgebras in this setting, we would like to consider a coalgebra that is final amongst all coalgebras in Coalgf (F ). However, Coalgf (F ) need not have a final object; for example, in the case of deterministic automata (see Example 2.1(1)), the desired final coalgebra for finite automata should be formed by all regular languages, but this coalgebra is itself not finite. For this reason we take the closure of Coalgf (F ) under filtered colimits in Coalg(F ), in which the desired final object exists. It is often useful to view these filtered colimits as directed unions of machines, taken at the level of their carrier. We will write Coalglfp(F ) for this closure. The objects of Coalglfp(F ) were called locally ﬁnitely presentable coalgebras in [24,15,14]; they are precisely the filtered colimits of diagrams over Coalgf (F ), i.e. colimits of filtered diagrams of the form D → Coalgf (F ) ‹→ Coalg(F ).
Example 2.6 We recall from [24,15] concrete descriptions of the objects of
Coalglfp(F ) in some categories of interest.
A coalgebra for a functor on Set is locally finitely presentable iff it is locally ﬁnite, i.e. every finite subset of its carrier is contained in a finite subcoalgebra.

For an endofunctor on a locally finite variety, a coalgebra is locally finitely presentable iff every finite subalgebra of its carrier lies in a finite subcoalgebra.
A coalgebra (S, f ) for a functor on VecF is locally finitely presentable iff every finite dimensional subspace of its carrier S is contained in a subcoalgebra of (S, f ) whose carrier is finite dimensional.
Recall from [23], that the Ind-completion of a category is the free completion of that category under filtered colimits. We will make use of the following non-trivial fact:
Theorem 2.7 The category Coalglfp(F ) is the Ind-completion of Coalgf (F ).
Proof We use a result from Johnstone’s book [18] i.e. the theorem in Subsec- tion VI.1.8. This theorem states that if (a) the category C has finite colimits, and
(b) I : C → E is a full embedding into a cocomplete category E whose image con- sists of finitely presentable objects in E , then the unique filtered colimit preserving extension I∗ : Ind(C) →E is also a full embedding.
So let E be Coalg(F ) which is certainly cocomplete, and let C be Coalgf (F ). First of all, C has finite colimits. For a finite colimit of objects from Coalgf (F ) evaluated in Coalg(F ) gives another object in Coalgf (F ) (since colimits are constructed in the base category and finitely presentable objects are closed under finite colimits). Then since Coalgf (F ) is a full subcategory, these colimits restrict.
Secondly, from [6] we know that for any finitary functor F on an lfp category,
those F -coalgebras with finitely presentable carrier are actually finitely presentable objects in Coalg(F ).
Then we can apply the theorem from [18]: the unique (filtered colimit preserving) extension of the full embedding I : C → E is itself a full embedding I∗ : Ind(C) → E . The definition of this extension is that it takes formal filtered diagrams of objects in C and constructs their colimit. Therefore its image is precisely Coalglfp(F ) (as we defined it), so restricting we obtain the desired equivalence.	2
The rational fixpoint. The category Coalglfp(F ) has a final object given by the filtered colimit of the inclusion functor Coalgf (F ) ‹→ Coalg(F ). We denote this coalgebra by r : ρF → F (ρF ). This coalgebra captures the behaviour of all coalgebras in Coalgf (F ). It has been shown in [5] that it is a fixpoint of F , i. e., its structure morphism r is an isomorphism. Following [24,15] we call the coalgebra (ρF, r) the rational ﬁxpoint of F .
Remark 2.8 For A = Set the rational fixpoint ρF is the union of all images f†[S] ⊆ νF , where f : S → FS ranges over the ﬁnite F -coalgebras and f† : S → νF is the unique coalgebra homomorphism (see [5, Proposition 4.6 and Remark 4.3]). So, in particular, we see that ρF is a subcoalgebra of νF .
For endofunctors on different categories than Set, this need not be the case as shown in [15, Example 3.15]. However, for functors preserving monomorphisms on categories of vector spaces over a field and on locally finite varieties such as Jsl the rational fixpoint always is a subcoalgebra of νF (see [15, Proposition 3.12]).

Example 2.9 We give a number of examples of ρF ; for more, see [5,15].
For the functor FX = R × X on Set whose final coalgebra is carried by the set Rω of all streams over R, the rational fixpoint consists of all streams that are eventually periodic, i.e., of the form σ = vwwww . . . for words v ∈ R∗ and w ∈ R+. For the similar functor FV = R × V on the category of vector spaces over R, the rational fixpoint consists of all rational streams (e. g., Rutten [29]).
The carrier of the rational fixpoint of the deterministic automata functor FX = 2 ×XA is the set of all languages accepted by ﬁnite automata, viz. the set of all regular languages. If we define F instead on the category Jsl of join semilattices, its rational fixpoint is still given by all regular languages, this time with the join semilattice structure given by union and ∅.
For FX = Pf(A × X) on Set the rational fixpoint contains all ﬁnite-state pro- cesses (modulo bisimilarity); more precisely, ρF is the coproduct of all ﬁnite F -coalgebras modulo the largest bisimulation.
For the functor FX = (FMX)A of weighted transition systems the rational fix- point is obtained as the coproduct of all finite WTS’s modulo weighted bisimi- larity.
Bipointed specifications. In [14] we introduced bipointed speciﬁcations, which are natural transformations of the form Σ(F × Id ) → F (Σ + Id ), where Σ: A → A is a given functor. We also showed that for Σ a polynomial endofunc- tor for a finite signature on Set and for FX = Pf(A × X) bipointed specifications are equivalent to transition system specifications in the simple GSOS format of Aceto [1]. In order to understand Aceto’s theorem below and to give a first in- tuition on bipointed specifications we now recall GSOS and simple GSOS. Given a signature Σ, a GSOS rule for an operator f ∈ Σ of arity n is of the form (1)
where m is the number of pos-	aj	bk

itive premises, l is the num- ber of negative premises, and
{xij → yj}j=1..m	{xik /→}k=1..l
f (x1,..., xn) →c  t
(1)

a1,..., am, b1,..., bl,c ∈ A are labels. The variables x1,..., xn, y1,..., ym are pair- wise distinct; let V denote the set of these variables. Finally t is a Σ-term over variables in V . In the simple GSOS format, t is restricted to be either a variable in V or a flat term g(z1,..., zp), where g is a p-ary operation symbol in Σ and z1,..., zp ∈ V . Additionally there is a finiteness condition on the dependency of operators, which we recall below in Section 4. Examples of GSOS rules which adhere to the simple GSOS format include the parallel operator, choice, action prefixing, relabelling and many more.
In the mathematical operational semantics of Turi and Plotkin [31] (see also Bartels [12]) one considers for a specification in the form of a natural transforma- tion as above (and more general formats; see Klin [20] for an overview) an opera- tional model and a denotational model. The operational model is an F -coalgebra structure on the initial Σ-algebra (μΣ, ι) and the denotational model is given by a Σ-algebra structure on the final F -coalgebra (νF, t); we denote those structures by c : μΣ → F (μΣ) and α : Σ(νF ) → νF . Notice that c is uniquely determined by the

commutativity of the diagram below 5 :
Σ(μΣ) 	ι	zμΣ,

Σ⟨c,id⟩
, 
c	(2)
, 

Σ(F (μΣ) × μΣ)	λ	zF,(Σ(μΣ) + μΣ) F [ι,id] zF,(μΣ)
Similarly, α is uniquely determined by the commutativity of the “dual” diagram (replacing μΣ by νF and reversing and renaming arrows as appropriate).
In concrete instances, c provides behaviour on closed terms over the signature of the algebraic operations specified, and α provides the denotational semantics of the algebraic operations as specified by λ, taking input from the final coalgebra.
In the previous paper [14] we assumed that a bipointed specification λ : Σ(F × Id ) → F (Σ+ Id ) is given, whereΣ isa strongly finitary functor [4], i. e., Σ is finitary and it preserves finitely presentable objects.
Example 2.10 (1) The class of strongly finitary functors on Set contains the iden- tity functor, all constant functors on finite sets, the finite power-set functor Pf, and it is closed under finite products, finite coproducts and composition. A polynomial functor Σ on Set is strongly finitary iff the corresponding signature has finitely many operation symbols of finite arity.
The functor FX =2 × XA is strongly finitary iff A is a finite set.
The type functor FX = R × X of stream systems as coalgebras is finitary but not strongly so. However, if we consider F as a functor on VecR, then it is strongly finitary; in fact, for every finite dimensional real vector space V , R ×V is finite dimensional, too.
The main result in [14] is the following:
Theorem 2.11 Let λ be a bipointed speciﬁcation where Σ is strongly ﬁnitary. Then there is a unique Σ-algebra structure β : Σ(ρF ) → ρF such that the following diagram commutes:
Σ(ρF )	Σ⟨r,id⟩	zΣ(,F (ρF ) × ρF )	λρF	zF,(Σ(ρF )+ ρF )

β
,	r
F [β,id]
, 
(3)

ρF	zF,(ρF )
It then follows that the unique F -coalgebra homomorphism (ρF, r) → (νF, t) is a Σ-algebra homomorphism from (ρF, β) → (νF, α). So in those cases where ρF is a subcoalgebra of νF , β is a restriction of α to ρF . This shows that the rational fixpoint is closed under operations on the denotational model specified by bipointed specifications.

5 In diagrams we will omit indices of natural transformations (here λ) indicating the component.

In [14], we also provided a number of applications, which we briefly recall. In each case Σ is a polynomial functor for a finite signature.
Labelled transition systems. As already mentioned in the discussion above, for FX = Pf(A × X) and a polynomial endofunctor Σ on Set corresponding to a finite signature, bipointed specifications correspond precisely to transition system specifications in Aceto’s simple GSOS format. As a special case of Theorem 2.11 we thus obtain the well-known result that for a finite signature, finite state processes (i. e., the elements of ρF ) are closed under operations specified by simple GSOS rules. This includes for example all CCS combinators and many other operations. But the results on the simple GSOS format are not restricted to finite signatures. So one aim of the present paper is to extend our previous results to infinite signatures, and we do this in Section 4.
Streams. For the functor FX = R × X and Σ a polynomial functor, we worked out a concrete rule format which is equivalent to bipointed specifications. So The- orem 2.11 yields the result that the coalgebra ρF of eventually periodic streams is closed under operations specified by rules in our format. Concrete examples include the well-known zipping operation and many others.
Non-deterministic automata. This application considers FX = 2 × (PfX)A, and here we provide a concrete rule format that yields bipointed specifications (but not necessarily conversely). Theorem 2.11 then yields the result that the rational fixpoint ρF (of finite state branching behaviours) is closed under operations specified in our format. This includes examples such as the shuffle product. But one would wish for formats defining operations on formal languages—so our results would then yield that regular languages are closed under such operations. However, if one works out what bipointed specifications mean for deterministic automata (i. e., FX = 2 × XA), then the format is not powerful enough to capture interesting operations like the shuffle product. So another aim of this paper is to work in the category Jsl in lieu of Set to obtain a more powerful format; we do this in Section 5.
Weighted transition systems. For FX = (FMX)A we obtain a concrete rule for- mat corresponding to bipointed specifications by restricting a general GSOS format for weighted transition system given by Klin [19]. Then Theorem 2.11 specializes to the result that the coalgebra ρF of all finite weighted transitions systems modulo weighted bisimilarity is closed under operations specified in our format.
Remark 2.12 Turi’s and Plotkin’s original specifications in abstract GSOS format are natural transformations
λ : Σ(F × Id ) ⇒ FTΣ,
where TΣ is the free monad on Σ; for a polynomial functor Σ on Set, TΣX is the set of all terms of operations in Σ over variables of X. Clearly, this format is more general than bipointed specifications where instead of TΣ we only allow Σ + Id in the codomain; for a polynomial functor Σ on Set this is the restriction to terms of depth at most one. Abstract GSOS specifications also induce an operational model,

i.e. a Σ-algebra on the final F -coalgebra. However, this algebra usually does not restrict to the rational fixpoint of F ; in [14, Example 3.4], we gave an abstract GSOS specification (involving a term of depth two in the rule conclusion) for FX = R ×X yielding an operation on the final F -coalgebra of streams that does not restrict to the eventually periodic or rational streams (cf. Example 2.9(3)).
Operational model and behaviour on free Σ-algebras
We will now make a first step towards proving our main result, the generalization of Aceto’s theorem to mathematical operational semantics. We will prove in this section that for a bipointed specification the operational model is a locally finitely presentable coalgebra, our notion of regularity.
Actually, we will prove a more general result concerning free algebras first. In fact, we will show that the free monad on Σ lifts to a functor on Coalglfp(F ). This means that for every locally finitely presentable coalgebra (S, f ) the free algebra ΣˆS of “terms in S” carries an operational model.
Assumption 3.1 In this section we assume that λ : Σ(F × Id ) → F (Σ + Id ) is a bipointed specification, where F : A → A is finitary and Σ : A → A a strongly finitary functor on the lfp category A.
Since Σ is (strongly) finitary, on every object X of A a free Σ-algebra ΣˆX exists.

As proved by Barr [11], free algebras yield free monads. Indeed, Σˆ
is the object

assignment of a free monad on Σ. Recall from [3] the free algebra construction by which ΣˆX is obtained as the colimit of the chain
X 	inr	zΣX, + X  Σinr+X zΣ(,ΣX + X)+ X 	z· ·,·	(4)
Furthermore, it follows that as a functor Σˆ can be constructed as the colimit of the chain
Id 	inr	zΣ,+ Id  Σinr+Id zΣ(,Σ + Id )+ Id 	z· ·,·	(5) More precisely, we define functors Tn : A → A, n < ω, by induction: T 0 = Id and
Tn+1 = ΣTn + Id . The connecting natural transformations are defined by t0,1 = inr
and tn+1,n+2 = Σtn,n+1 +Id . In order to prove the main result of this section further below we first need the following auxiliary property
Lemma 3.2 The chain (5) lifts to a chain of endofunctors on Coalgf (F ).
Proof We will prove that each functor Tn lifts to an endofunctor on Coalg(F ) and that each connecting natural transformation tn,n+1 : Tn → Tn+1 is a natural transformation between the lifted functors. That these lifted functors restrict to Coalgf (F ) is easy to see by induction on n using that Σ preserves finitely presentable objects and that these objects are closed under finite coproducts.
Tn lifts to Coalg(F ). This is proved by induction on n. The base case T 0 = Id is trivial. For the induction step let an F -coalgebra (S, f ) be given and let Tn(S, f ) = (TnS, fn). Now define Tn+1(S, f ) = (Tn+1S, fn+1) to be the following

F -coalgebra
Tn+1S = ΣTnS + S	Σ⟨fn,id⟩+f	zΣ(,FT nS × TnS)+ FS 



FTn+1S = F (ΣTnS + S) ,r	
λ+id
n	,n 

[F [inl,tn,n+1],F inr]
F (ΣT
S + T S)+ FS 


That Tn+1 is functorial can be proved with a straightforward diagram chase using that Tn is functorial as well as naturality of λ and tn,n+1. We omit the details.
We also omit the details of the proof that tn,n+1 : Tn → Tn+1 is a natural transformation between lifted functors. Here one must prove that each component is an F -coalgebra homomorphism, and this is done by induction on n.	2
Theorem 3.3 The free monad Σˆ : A→A lifts to a functor on Coalglfp(F ).
Proof (1) Σˆ lifts to Coalg(F ). By Lemma 3.2, all the functors Tn in the chain (5) lift to Coalg(F ). Now colimits of functors are computed objectwise and the forgetful

functor Coalg(F ) → A creates all colimits. This implies that the colimit Σˆ
chain (5) canonically lifts to a functor on Coalg(F ).
of the

Σˆ restricts to Coalglfp(F ). Let (S, f ) be a coalgebra in Coalgf (F ), i. e., S

is a finitely presentable object of A.  By the point (1), the F -coalgebra
ΣˆS is

obtained as the filtered colimit of the F -coalgebras carried by TnS in the chain (4), n = 0, 1, 2,.. ., which all lie in Coalgf (F ). Thus, ΣˆS lies in Coalglfp(F ), and we have a restriction Σˆ : Coalgf (F ) → Coalglfp(F ). Since Coalglfp(F ) is the Ind-completion of Coalgf (F ), there is (up to equivalence) a unique extension of Σˆ to an endofunctor on Coalglfp(F ).	2

Since μΣ =
Σˆ0, it follows that μΣ carries some F -coalgebra structure that

turns it into a locally finitely presentable coalgebra. It remains to show that the coalgebra structure on μΣ provided by the previous theorem is indeed the structure c : μΣ → F (μΣ) of the operational model from the previous section:
Theorem 3.4 The operational model of λ is a locally ﬁnitely presentable coalgebra.
Before we proceed to the proof of the theorem let us make a couple of technical remarks.
Remark 3.5 Recall that the operational model c is uniquely determined by the commutativity of Diagram (2). Actually, c is obtained by using the initiality of μΣ to obtain a unique Σ-algebra homomorphism from (μΣ, ι) to the Σ-algebra

⟨λ,Σπ1⟩	F [ι,id]×ι
Σ(F (μΣ) × μΣ) −−−−−→ F (Σ(μΣ) + μΣ) × Σ(μΣ) −−−−−→ F (μΣ) × μΣ	(6)
It is then easy to prove that this homomorphism must be of the form
⟨c, id⟩ : μΣ → F (μΣ) × μΣ

so that c is uniquely determined by the commutativity of (2).
Remark 3.6 (1) In the case of an initial object X = 0 the free algebra chain (4) yields the chain Σn0 with connecting morphisms tn,n+1 = Σnu, where u :0 → Σ0 is unique. We will denote the colimit injections by tn : Σn0 → μΣ. Notice also that Tn(0, u) from Lemma 3.2 takes the form fn : Σn0 → F (Σn0).
Any Σ-algebra (A, α) induces a canonical cocone αn : Σn0 → A on this chain:
α0 :0 → A is uniquely determined and
αn+1 = Σn+10= Σ(Σn0) −Σ−α−→n  ΣA −→α  A.
Furthermore, for every Σ-algebra homomorphism h : (A, α) → (B, β) we have
h · αn = βn	for every n < ω.	(7)
Notice that the unique Σ-algebra homomorphism h : (μΣ, ι) → (A, α) arises as the unique morphism from the colimit μΣ induced by the canonical cocone,
i.e. h is the unique morphism such that the following triangles commute:
Σn0

tn
μΣ	h	zA,
(8)

Proof (Theorem 3.4) Consider the operational model c : μΣ → F (μΣ) uniquely determined by the commutativity of Diagram (2). To prove the theorem we must show that c is the coalgebra structure on the colimit μΣ induced by the coalgebra structures fn : Σn0 → F (Σn0). To this end we will show that for every n the outside of the following square commutes:
Σn0  fn  zF,(Σn0)

tn	π1·αn
Ftn
(9)

,	r¸, 
μΣ	c	zF,(μΣ)
It then follows that (μΣ, c) is the filtered colimit of the chain of coalgebras Tn(0, u)= (Σn0, fn) (c.f. the proof of Theorem 3.3), which all have finitely presentable carrier since Σ is strongly finitary. Thus, (μΣ, c) lies in Coalglfp(F ) as desired.
To see that (9) commutes, let α : Σ(F (μΣ) × μΣ) → F (μΣ × μΣ) be the algebra
in (6) and consider its canonical cocone αn : μΣ → F (μΣ) × μΣ, n < ω. We will prove that the two inner triangles in Diagram (9) commute, where π1 is the left- hand product projection. Indeed, the lower left-hand triangle follows from (8) with h = ⟨c, id⟩ (cf. Remark 3.5). To show the commutativity of the upper right-hand triangle we will now prove that


⟨f ,id⟩
αn	−−−−→ F Σ
0 × Σ
n −F−t−n−×−t→n  F (μΣ) × μΣ).	(10)

Let us first consider the right-hand product component. First it is easy to see that
π2 : (F (μΣ) × μΣ, α) → (μΣ, ι) is a Σ-algebra homomorphism. Thus, we see that
π2 · αn = ιn = tn,
where the two equations hold by (7) and (8), respectively.
We now proceed by induction on n to prove (10). The base case n = 0 is obvious, and for the induction step we consider the following diagram (we need only consider the left-hand product component of (10)):


fn+1
 Σ⟨f ,id⟩ 	F [id,t	]
Σ(Σ 0)	zΣ(,F Σ 0 × Σ 0)	zF,(ΣΣ 0+ Σ 0)

,n 

Σαn
Σ(F tn×tn)
F (Σtn+tn)

Ftn+1

, ¸j	λ	z,	, 
F [ι,id]	, 

Σ(F (μΣ) × μΣ)

π1·α
F (Σ(μΣ) + μΣ)
zF,(μΣ)
¸¸

This diagram commutes: the upper part is the coalgebra structure fn+1 from Lemma 3.2 in the special case where S = 0, for the left-hand part remove Σ and use the induction hypothesis the middle part commutes by naturality of λ, and for the right-hand part remove F and consider the components of the coproduct in the upper left-hand corner separately (both clearly commute). This completes the proof.	2
Finite dependency
With Theorem 3.4 we have the main ingredient for generalizing Aceto’s theorem for simple GSOS specifications. However, notice that our restriction to strongly finitary functors Σ means that Theorem 3.4 only generalizes Aceto’s theorem for the special case of transition system specifications over a ﬁnite signature of specified operations. Aceto’s theorem instead was proved for transition system specifications having ﬁnite dependency. In this section we briefly recall that concept. Then we generalize finite dependency to bipointed specifications, and we prove that our previous results hold for bipointed specifications having finite dependency.
GSOS specifications having finite dependency. Let T be a transition system specification in the GSOS format defining operations in the signature Σ (see [2] and Section 2.3). Operator dependency is the smallest transitive relation on Σ which contains a pair (f, g) of operations if there is a rule in T of the form (1) where g occurs in the term t. We say that T has ﬁnite dependency if each operation f of Σ only depends on finitely many other operations.
The positive trigger of a rule (1) is the sequence ⟨A1,.	, An⟩ where each Ai ⊆ A
aj
consists of those labels aj with ij = i, i.e. xi −→ yj occurs in the premise of the
rule. An operation f is called bounded if for every positive trigger there are only finitely many rules with f on the left-hand side of the conclusion. In the following

theorem, by the associated transition system of T we mean the (operational) term model given by the initial Σ-algebra. Regularity means that from every state there are only finitely many other states reachable by a sequence of transitions.
Theorem 4.1 ([2, Theorem 5.28]) Let T be a transition system speciﬁcation in simple GSOS format having ﬁnite dependency, where every operation is bounded. Then the associated transition system of T is regular.
Example 4.2 A simple example of a transition

system specification is given by the prefixing op- eration for an infinite label alphabet A; the infinite rule set in (11) obviously has finite dependency.
a.P −→a P
(a ∈ A)	(11)

Bipointed specifications having finite dependency. Transition system specifications in simple GSOS format for which every operation f is bounded are in 1-1-correspondence with bipointed specifications Σ(Pf(A×Id ) ×Id ) → Pf(A× (Σ + Id )); in fact, the functor Pf in the codomain of the bipointed specification models the finitely many transitions specified for f for each positive trigger.
Now we will analyze how finite dependency can be captured on the level of bipointed specifications. Let T be a transition system specification satisfying the conditions in Theorem 4.1 and let λ : Σ(F × Id ) → F (Σ + Id ) be the corresponding bipointed specification (where Σ is a polynomial endofunctor on Set). Suppose that Γ is a subfunctor of Σ that corresponds to a subsignature that is closed under operator dependency in Σ and let inΓ :Γ → Σ be the corresponding inclusion map. Then there exists a bipointed speci-

fication λΓ : Γ(F × Id ) → F (Γ + Id ) such that inΓ is a morphism of bi-
Γ(F × Id )  λΓ zF,(Γ + Id )

pointed speciﬁcations, i.e. the square on the right commutes. Also every inclusion m :Γ → Γj between closed
inΓ(F×Id )
, 
Σ(F × Id )


λ
F (inΓ+Id )
, zF,(Σ + Id )
(12)

subsignatures of Σ is a morphism of bipointed specifications; one has F (m+Id)·λΓ = λΓ′ · m(F ×Id). Recall from Example 2.9(1) that a polynomial functor Γ is strongly finitary iff its associated signature is finite.
Proposition 4.3 Let T be a transition system speciﬁcation as in Theorem 4.1 and let λ : Σ(F × Id ) → F (Σ + Id ) be its corresponding bipointed speciﬁcation. Then Σ is the directed union of a diagram of strongly ﬁnitary polynomial functors Γ such that there exist λΓ as in (12).
Remark 4.4 Recall the notion of a closure operator on a poset (P, ≤). This is a monotone map x '→ x on P satisfying x ≤ x and x = x. An element x ∈ P is called closed if x = x.
Proof (Proposition 4.3) We will abuse notation and denote by Σ the signature of the operation symbols specified by T as well as the associated polynomial functor. For any subsignature Γ of Σ let
Γ= {f | f depends on some g in Γ}.



Then Γ '→ Γ isa closure operator on the set of subsignatures of Σ. Notice that due to finite dependency the closure Γ of a finite subsignature is finite. It follows that Σ is the directed union of all its finite closed subsignatures Γ; for Σ is the directed union of all its finite subsignatures and every finite subsignature is contained in a closed finite subsignature. Now the desired result follows because for a closed subsignature Γ of Σ we easily see that there is λΓ as in (12).	2
The previous proposition states that λ is the directed union of the λΓ. In the following definition we consider the colimit of a filtered diagram of bipointed speci- fications λΓ : Γ(F × Id ) → F (Γ + Id ), i.e. the bipointed specification for the colimit Σ of all functors Γ from the diagram uniquely determined by the commutativity of the squares (12).
Definition 4.5 Let F : A → A be finitary and Σ : A → A. A bipointed specifica- tion λ : Σ(F × Id ) → F (Σ + Id ) has ﬁnite dependency if it is the filtered colimit of a diagram of bipointed specifications λΓ : Γ(F × Id ) → F (Γ + Id ) where each Γ is a strongly finitary functor.
Remark 4.6 (1) One common instance of the above definition is when Σ can be decomposed into a (not necessarily finite) coproduct Σ =  i∈I Σi such that there are bipointed specifications λi : Σi(F × Id ) → F (Σi + Id ) such that (12) commutes with Γ replaced by Σ for each i ∈ I. Indeed, Σ is then the filtered colimit of all ΣJ = i∈J Σi, where J ranges over all finite subsets of I with λJ formed by the obvious “copairing” involving those λi with i ∈ J. For a concrete example consider FX = R × X and the behavioural differential equation (see [28]) rˆ = r : rˆ for every r ∈ R. Then one has I = R and Σi is constant on 1 for all i.
(2) That filtered colimits are necessary in Definition 4.5 is demonstrated by the usual definition of constants in the stream calculus [28]: [r] = r : [0]. All constants [r] depend on [0], and therefore the signature can not be decomposed into a coproduct. In the context of simple GSOS rules on transition systems, a similar example can
be found by defining infinitely many constants cn, n < ω, by the axioms cn+1 −→a  cn,
for some a ∈ A. This specification cannot be decomposed into finite independent parts as in point (1) above.
The following proposition is related to results of Lenisa, Power and Watan- abe [22, Section 5] for distributive laws of monads over copointed endofunctors. Indeed, notice that a bipointed specification can equivalently be presented as a dis- tributive law of the free pointed functor Σ + Id over the cofree copointed functor F × Id , and the latter gives rise to a distributive law of the free monad on Σ over F × Id . Lenisa, Power and Watanabe show how to combine distributive laws using coproduct; here we consider filtered colimits.
Proposition 4.7 Let λ be a bipointed speciﬁcation having ﬁnite dependency, and let (λΓ)Γ∈D be as in Deﬁnition 4.5. Then, for each Γ, the denotational models α : Σ(νF ) → νF and αΓ : Γ(νF ) → νF of λ and λΓ, respectively, satisfy


α  = (Γ(νF ) inΓ
Σ(νF ) −→α
νF ).

Proof Recall that for every Γ ∈ D the denotational model αΓ : Γ(νF ) → νF is uniquely determined by the commutativity of the square

Γ(νF ) Γ⟨t,id⟩ zΓ(,F (νF ) × νF )	λ	zF,(Γ(νF )+ νF )
αΓ	F [αΓ,id]
,	, 
νF	t	zF,(νF )

and similarly for α : Σ(νF ) → νF . So by precomposing the diagram for α by a colimit injection inΓ : Γ(νF ) → Σ(νF ) we obtain the commutative diagram

 Γ⟨t,id⟩ 		λΓ	
Γ(νF )	zΓ(,F (νF ) × νF )	zF,(Γ(νF )+ νF )

inΓ
inΓ(F×id)
F (inΓ+id)

, Σ⟨t,id⟩	, 
α	z,
λ	z,	, 

Γ	Σ(νF )
Σ(F (νF ) × νF )
F (Σ(νF )+ νF )

α	F [α,id]
,	, 

	zνF,
t	zF,(νF ) ,r	


So the desired equation holds by the unicity of αΓ.	2

The following result extends the main result from [14] from the bipointed spec- ifications considered in Section 2.3 to those with finite dependency.
Corollary 4.8 Let λ be a bipointed speciﬁcation having ﬁnite dependency. Then
(a) there is a unique Σ-algebra structure β : Σ(ρF ) → ρF such that the diagram (3) commutes, and (b) the unique F-coalgebra homomorphism (ρF, r) → (νF, t) is a Σ-algebra homomorphism from (ρF, β) to (νF, α).
Proof Let (λΓ)Γ∈Q be as in Definition 4.5.
Ad (a). By Proposition 4.7, we have α · inΓ = αΓ for each Γ ∈ D for the denotational models of λ and λΓ, respectively. So by Theorem 2.11 we have a unique βΓ : Γ(ρF ) → ρF such that the diagram

Γ(ρF )	Σ⟨r,id⟩	zΓ(,F (ρF ) × ρF )	λΓ	zF,(Γ(ρF )+ ρF )

βΓ
,	r
F [βΓ,id]
, 

ρF	zF,(ρF )

commutes for every Γ ∈ D. Now recall that the colimit Σ = colimΓ∈Q Γ of functors is formed objectwise, and so Σ(ρF ) is a filtered colimit of the Γ(ρF ). It is not difficult to see that the denotational models βΓ : Γ(ρF ) → ρF form a cocone; indeed, to see this let m : Γ → Γj be a connecting natural transformation in D and consider the

following diagram
 Γ⟨r,id⟩ 		λΓ	
Γ(ρF )	zΓ(,F (ρF ) × ρF )	zF,(Γ(ρF )+ ρF )


Γ (ρF )
) × ρF )
zF,(Γ (ρF )+ ρF )


r	zF,(ρF ) ,r	
Its upper left-hand square commutes by the naturality of m, the upper-right-hand square commutes since m is a morphism of bipointed specifications and the lower part as well as the outside of the diagram commute by Theorem 2.11. Thus, the desired equation βΓ′ · m = βΓ follows from the unicity of βΓ. This implies that there exists a unique β : Σ(ρF ) → ρF satisfying β · inΓ = βΓ. To prove that β is uniquely determined by the commutativity of the diagram in the statement of the Corollary we consider the diagram obtained from the one in the proof of Proposition 4.7 by replacing (νF, t) by (ρF, r) and α by β:
 Γ⟨r,id⟩ 		λΓ	
Γ(ρF )	zΓ(,F (ρF ) × ρF )	zF,(Γ(ρF )+ ρF )

inΓ
inΓ(F×id)
F (inΓ+id)

, Σ⟨r,id⟩	, 
β	z,
λ	z,	, 

Γ	Σ(ρF )
Σ(F (ρF ) × ρF )
F (Σ(ρF )+ ρF )

β	F [β,id]
,	, 

	zρF,
r	zF,(ρF ) ,r	

Now we see that the desired lower square commutes when extended by any colimit injection inΓ since all other parts and the outside commute. For the uniqueness assume that β is given such that the lower part commutes. Then we see that β · inΓ = βΓ by the uniqueness of βΓ in Theorem 2.11.
Ad (b). The second statement easily follows from the fact that the unique F - coalgebra homomorphism h : (ρF, r) → (νF, t) is a Γ-algebra homomorphism from (ρF, βΓ) to (νF, αΓ) for every Γ ∈ D (recall the discussion after Theorem 2.11). Indeed, we have the diagram
Γ(ρF )  inΓ zΣ(,ρF )	β  zρF,
Γh	Σh	h
,	,	, 
Γ(νF ) inΓ zΣ(,νF )	α  zνF,
where the left-hand square commutes by the naturality of inΓ. So the right-hand square commutes when precomposed with every inΓ; now use that the colimit in- jections inΓ form an epimorphic family.	2
Remark 4.9 Bipointed specifications that do not have finite dependency will, in

general, not yield a “restriction” of the denotational model α : Σ(νF ) → νF to β : Σ(ρF ) → ρF . To see this consider the following example for streams (cf. [14, Example 3.5]), i.e. FX = R × X on Set. Let ΣX = N be given by constants cn, n ∈ N and operational rules
.
cn −→n  cn+1
This induces a natural transformation
lX : ΣFX = N → R × N = F ΣX	with	n '→ (n, n + 1),
and   we   get   a   bipointed   specification   λ	= (Σ(F × Id )  Σπ0 zΣF, l zF Σ, F inl zF (,Σ + Id ).  The  corresponding  opera- tional model α : N → Rω interprets the constants cn as the streams α(n)= (n, n + 1,n + 2,.. .) which clearly are not eventually periodic.
We are now ready to state the main result of this paper, the generalization of Theorem 4.1 to bipointed specifications.
Theorem 4.10 Let λ be a bipointed speciﬁcation having ﬁnite dependency. Then the lifted functor Σˆ : Coalg(F ) → Coalg(F ) restricts to Coalglfp(F ).
Proof Let (λΓ)Γ∈Q be as in Definition 4.5. For the proof of the theorem we proceed in two steps.
First notice that Σ is a finitary endofunctor being the filtered colimit of the (strongly) finitary functors Γ ∈ D. The coproduct injections inΓ :Γ → Σ extend to monad morphisms
iˆnΓ : Γˆ → Σˆ,
which are colimit injections exhibiting the free monad Σˆ as a filtered colimit of the free monads Γˆ. By Theorem 3.3 every Γˆ lifts to a functor on Coalg(F ) and so does Σˆ, by the same argument as in the proof of Theorem 3.3. Since filtered colimits of monads are formed objectwise in A and since the forgetful functor Coalg(F ) → A creates all colimits it follows that the lifting of Σˆ is a filtered colimit of the liftings of Γˆ to Coalg(F ). Now let (S, f ) be an F -coalgebra. Using the constructions of ΣˆS and ΓˆS (see (4)) one can easily prove by induction on n that for each Γ ∈ D, (iˆnΓ)S is an F -coalgebra homomorphism from Γˆ(S, f ) to Σˆ(S, f ).
Every Γ ∈ D is strongly finitary. From Theorem 3.3 we then know that Γˆ

restricts to Coalglfp(F ). It then follows that Σˆ
restricts to Coalglfp(F ): for every

coalgebra (S, f ) in Coalg(S, f ), Σˆ(S, f ) is a filtered colimit of the coalgebras Γˆ(S, f ),
Γ ∈ D. So since all Γˆ(S, f ) are in Coalglfp(F ) and Coalglfp(F ) has filtered colimits we see that Σˆ(S, f ) lies in Coalglfp(F ) as desired.	2
In other words, for every locally finitely presentable coalgebra (S, f ) the free Σ-algebra ΣˆS carries a canonical locally finitely presentable coalgebra. So finally, we obtain the desired generalization of Aceto’s theorem. Notice that the following theorem is not just a trivial corollary of Theorem 4.10; as for Theorem 3.4 we still

need to prove that the canonical F -coalgebra structure arising on μΣ= Σˆ0 coincides with the operational model c : μΣ → F (μΣ).
Theorem 4.11 Let λ be a bipointed speciﬁcation having ﬁnite dependency. Then the operational model of λ is a locally ﬁnitely presentable coalgebra.

Remark 4.12 Let inΓ : Γ → Σ and iˆnΓ : Γˆ
→ Σˆ
denote the colimit injections

from the proof of Theorem 4.10. The natural transformation inΓ induces natural transformations from the free-algebra chain for ΓˆX to the one for ΣˆX, for every object X (see (4)). We only need the case X = 0 here; we denote the components of the corresponding natural transformation by hΓ : Γn0 → Σn0. They are defined
by hΓ = id0 and

Γ
n+1
Γ
= (Γn+10 = Γ(Γn0) −−→n
Γ(Σn0) inΓ
Σ(Σn0) = Σn+10).

This natural transformation induces the morphism hˆΓ : μΓ → μΣ on the colimits
of the chains, i. e., hˆΓ is unique such that hˆΓ · tΓ = tn · hΓ, where tΓ : Γn0 → μΓ and
n	n	n
tn : Σn0 → μΣ are the chain colimit injections (cf. the proof of Theorem 3.4).
Proof (Theorem 4.11) Let Σ = colimΓ∈Q Γ as in Definition 4.5. From Theo- rem 4.10, we know that the F -coalgebra structure on μΣ= Σˆ0 is uniquely induced on this colimit by the coalgebra structures on μΓ= Γˆ0 that we have for each Γ ∈ D. From the proof of Theorem 3.4 we know that the latter coalgebra structures are the operational models cΓ : μΓ → F (μΓ) of λΓ (see (12)). So all we need to prove is that the following squares commute:
μΓ  cΓ zF,(μΓ)

hˆΓ
, 
F hˆΓ
, 
for each Γ ∈ D.

μΣ	c  zF,(μΣ)
For this we will use that the coalgebra (μΓ, cΓ) is a colimit of the chain of coalgebras (Γn0,f Γ) and that (μΣ, c) is a colimit of the chain of coalgebras given by (Σn0, fn) (cf. the proof of Theorem 3.4). So we consider the following square:

  tΓ
n

Γ
n
n , 	
hˆΓ
, 

(Σ 0, fn)	tn   z(μ,Σ, c)
On the levels of the carriers of the displayed F -coalgebras the square commutes. So in order to prove that the right-hand arrow is an F -coalgebra homomorphism
as indicated it suffices to show that the composite hˆΓ · tΓ = tn · hΓ is one (since
n	n
we already know that tΓ also is one and the tΓ, n < ω, form a jointly epimorphic
n	n
family). Furthermore, because we know that tn is a F -coalgebra homomorphism it
only remains to prove that hΓ is one. This is done by induction on n. The base

case n = 0 is trivial. For the induction step we consider the following diagram:


Γn+10
hΓ
n+1	zΣn,+10


ΓhΓ	in
Γ(Γn0) 	n	zΓ(,Σn0) 	Γ	zΣ(,Σn0)

Γ⟨f Γ,id⟩
, 


Γ(F (hΓ)×hΓ)
Γ⟨fn,id⟩
,	in
Σ⟨fn,id⟩
, 

Γ(F (Γn0) × Γn0) 	n	n	zΓ(,F (Σn0) × Σn0) 	Γ	zΣ(,F (Σn0) × Σn0)

λΓ
,	F (ΓhΓ+hΓ)
λΓ	λ
,	F (inΓ+id)	, 

F (Γ(Γn0) + Γn0) 	n	n	zF,(Γ(Σn0) + Σn0)
F [id,f Γ	]
, 
zF,(Σ(Σn0) + Σn0)
F [id,fn,n+1]
, 

F (Γn+10)
Γ
n+1
zF,(Σn+10)



This diagram commutes: the upper part commutes by the definition of hΓ
, and

we next consider the four small inner squares. For the commutativity of the upper left-hand square remove Γ and consider the product components separately: the left-hand one commutes using the induction hypothesis and the right-hand one is trivial. The upper right-hand and lower left-hand and square commute by the naturality of inΓ and λΓ, respectively, and the lower right-hand square commutes by (12). Finally, to see that the lowest part commutes, remove F and consider the coproduct components separately: the left-hand component commutes by the
definition of hΓ	again, and the right-hand one by naturality of hΓ (recall that this
is a natural transformation from the chain (Γn0)n<ω to the chain (Σn0)n<ω). So since the left-hand and right-hand edges of the diagram above are the coalgebras
(Γn+10,f Γ ) and (Σn+10, fn+1) we are done.	2
Remark 4.13 We chose to present all our results for bipointed specifications be- cause in applications it is easier to find concrete rule formats corresponding to them. But we believe that all of our results can be proved more generally for so-called coG- SOS laws ΣF¯ → F (Σ+Id ), where F¯ denotes the cofree comonad on F (see Klin [20,
Section 6.4]).
A rule format for operations on regular languages
In [14] there are a number of examples of concrete formats and operations cor- responding to bipointed specifications. All of these examples are on Set. How- ever, for example in the case of deterministic automata, bipointed specifications on Set are rather limited; standard operations like concatenation, Kleene star or the shuffle product of languages cannot be specified by bipointed specifications for FX =2 × XA on Set.
Moving from Set to the category Jsl, bipointed specifications allows for different and more powerful specification formats. Recall that the functor F =2 × IdA lifts

to the functor F¯ = 2 × IdA on Jsl, the category of join semilattices, where 2 = {0, 1} is the join semilattice where 0 is bottom and the join is the usual “or” operation on bits. Recall from Example 2.9(2) that the rational fixpoint of F¯ is carried by the set of regular languages as well. In this section we exploit this fact to derive a concrete format for operations on regular languages from bipointed specifications for F¯. This format is more expressive than bipointed specifications for F , as the join semilattice structure allows to express non-determinism in the conclusion of rules.
Before we present a concrete rule format we will analyze (certain) bipointed

specifications for F¯. In the sequel let U : Jsl,⊥r zSe,t
: Φ denote the free and

forgetful functor, respectively. We also denote by J : FJsl → Jsl the inclusion of the full subcategory given by free join semilattices. We are interested in functors Σ : Jsl → Jsl of the form ΦPΓU , where PΓ : Set → Set is a polynomial functor associated to the signature Γ. The reason for this is that Σ-algebras are precisely
join semilattices A equipped with a function of the type PΓUA → UA, i. e., for every operation symbol γ ∈ Γ a (not necessarily join preserving) operation Aar(γ) → A.
Lemma 5.1 Families of natural transformations
γˆ : (FUJ × UJ )ar(γ) ⇒ FU (ΣJ + J)	γ ∈ Γ	(13)
are in one-to-one correspondence with bipointed speciﬁcations of Σ = ΦPΓU over the functor F¯.
The proof of the lemma makes use of the fact that any variety is the completion of its subcategory of free finitely generated algebras under sifted colimits. We recall the necessary notions and prove a technical lemma.
First recall (e. g. from Ad´amek and Rosicky [8]) that a colimit of a diagram with domain (or diagram scheme D) is called sifted if D-colimits commute with all finite products in Set. For example, filtered colimits and reflexive coequalizers are sifted colimits.
Let V be a finitary variety. Recall from Example 2.2(2) that the finitely pre- sentable objects A ∈ V are precisely those algebras presented by finitely many generators and finitely many relations. For example, in Jsl they are precisely the finite algebras because the finitely generated free algebras Φn are finite. One can define a notion of strongly ﬁnitely presentable object A ∈ V; these are precisely the retracts of finitely generated free algebras [9]. In Set and Vect(F) they coincide with the finitely presentable objects. But this fails in Jsl: for example, the 3 element chain is a retract of the four element algebra Φ2. Let Vsfp be the full subcategory of V given by strongly finitely presentable objects.
Remark 5.2 Note that sifted colimit preserving functors between varieties are equivalently (1) finitary functors which preserve reflexive coequalisers (see [8]), or
(2) equationally presentable functors i.e. those with a presentation by rank-1 equa- tions [21, Theorem 4.9].
Lemma 5.3 Let V, W be ﬁnitary varieties and V0 be the full subcategory of V given by ﬁnitely generated free algebras with the inclusion functor J : V0 ‹→ V. Then the

functor category [V0, W] is equivalent to the category of sifted colimit preserving functors from V to W. More precisely, we have an equivalence of categories
[V, W]sift ∼= [V0, W]
given by restricting by composition with J; in symbols, G '→ GJ.
Proof It is known that [Vsfp, W] ∼= [V, W]sift for any finitary variety V and W
(see [8, Definition 2.2 and Theorem 3.10]).
Now it suffices to show that [V0, W] ∼= [Vsfp, W]. This follows from the fact that Vsfp is equivalent to the Cauchy-completion of V0. To see this, note that V is cocomplete and V0 is a full subcategory of it. In this case the Cauchy completion is equivalent to the closure of V0 under retracts in V, viz. Vsfp. The desired equivalence now follows from the universal property of the Cauchy completion.	2
Proof (Lemma 5.1) Let Γ be a signature with associated polynomial set functor PΓ : Set → Set, let Σ = ΦPΓU : Jsl → Jsl. A bipointed specification in this case is a natural transformation
λ : ΦPΓU (F¯ × Id) ⇒ F¯(ΦPΓU + Id).
Notice that its components are Jsl homomorphisms. Since Φ preserves colimits and U preserves limits, such bipointed specifications are in one-to-one correspondence with families
Φ((U F¯ × U )ar(γ)) ⇒ F¯(ΦPΓU + Id)	(γ ∈ Γ)
of natural transformations. These are, by virtue of the adjunction Φ E U and the fact that F¯ lifts F , in one-to-one correspondence to families of natural transforma- tions
(FU × U )ar(γ) ⇒ FU (ΦPΓU + Id)	(γ ∈ Γ)	(14)
whose components are just functions.
Such natural transformations are in fact uniquely determined by their compo- nents at free algebras, i.e., they are equivalently given by families as in (13). To see this notice that the two functors (FU ×U )ar(γ) and FU (ΦPΓU + Id) are finitary and clearly preserve reflexive coequalizers. This implies that they preserve sifted colimits (see [8]). The desired result is now an application of the Lemma 5.3 to V = W = Jsl with V0 being the finite free algebras.	2
We proceed to move from free join semilattices to plain sets and consider natural transformations
γ¯ : (F × Id)ar(γ) ⇒ FU Φ(PΓU Φ+ Id)	γ ∈ Γ	(15)
Such families of natural transformations induce bipointed specifications, but the converse does not hold.
Lemma 5.4 Every γ¯ as in (15) induces a γˆ as in (13), and consequently such a collection induces a bipointed speciﬁcation.

Proof Let γ¯ : (F × Id)ar(γ) ⇒ FU Φ(PΓU Φ + Id) be a natural transformation. Let J : FJsl → Jsl again be the inclusion of free join semilattices. Then γ¯ induces a natural transformation γ¯U J : (FUJ × UJ )ar(γ) ⇒ FU Φ(PΓU ΦUJ + UJ ) simply by instantiating it to the carriers of the free join semilattices. Since Φ preserves coproducts this is equivalent to a natural transformation
γ¯jUJ : (FUJ × UJ )ar(γ) ⇒ FU (ΦPΓU ΦUJ + ΦUJ ) .
By composing the counit ϵ : ΦU → Id of the adjunction Φ E U : Jsl → Set we obtain a natural transformation


def
j	ar(γ)

γˆ = FU (ΦPΓUϵJ + ϵJ) · γ¯ UJ : (FUJ × UJ )	⇒ FU (ΦPΓUJ + J)
which is of type (13) as desired.	2
Remark 5.5 The above treatment of bipointed specifications on Jsl does not de- pend on the specific properties of join semilattices, but works similarly for any locally finite variety.
We are now ready to define a concrete syntactic rule format, inducing the above families of natural transformations γˆ.
5.1 A concrete format for deterministic automata on Jsl. In the remainder of this section let Σ be a finitary signature. A transition rule and an output rule are of the form


{xi↓}i∈I	{xi↑}i∈J
and	{xi↓}i∈I	{xi↑}i∈J

σ(x1,..., xn) −→a  t
σ(x1,..., xn)↓

respectively, where x1,..., xn is a collection of pairwise distinct variables, σ an n- ary operator of Σ; further I, J ⊆ {1, 2,..., n} and t is a term over the grammar
t ::= ⊥| t ⊕ t | τ (u1,..., uar(τ )) | x	u ::= ⊥| u ⊕ u | x,	(16) where τ ranges over the operators of Σ, x ranges over the least collection of variables V such that xi ∈ V for all i, and for each alphabet letter a ∈ A and index i ≤ n there
is a distinct variable xa ∈ V . Intuitively, xi↑ and xi↓ represent states that must be non-final and final, respectively, and xa represents the unique state reached by xi after an a-transition 6 . A (bipointed) DFA (SOS) speciﬁcation is a set of transition rules and output rules such that for every operator σ of Σ, every alphabet symbol a ∈ A and all possible sets of premises {xi↓}i∈I and {xi↑}i∈J only finitely many rules
with a conclusion of the form σ(x1,..., xn) −→a  t exist. (Notice that this finiteness
property corresponds to boundedness of GSOS specifications.)
Operator dependency on Σ and finite dependency of a DFA specification is defined in exactly the same way as for GSOS specifications (see Section 4.1).

6	a	a
In analogy with standard SOS we will denote xi by a variable y by writing a transition xi → y in the
premise of the rule.

Proposition 5.6 Any DFA speciﬁcation (having ﬁnite dependency) induces a bi- pointed speciﬁcation (having ﬁnite dependency).
Proof (1) First we see that every DFA SOS specification corresponds precisely to a family of functions
fσ : 2ar(σ) → 2 × LA,
where L is the set of terms defined by the grammar in (16) on the set of variables
V = {xi, xa | a ∈ A, i = 1,..., ar(σ)}. Indeed, given σ ∈ Σ define π1 · fσ(s)=1 iff there is an output rule for σ with
s(i)=1 ⇐⇒ i ∈ I	and	s(i)=0 ⇐⇒ i ∈ J.	(17)


And we define
π2 · fσ(s)(a)=   {t | σ(x1,..., xn) −→a


t conclusion of a transition rule with (17)}.

This is a well-defined term in L since the join above is formed over a finite set because
we assume that there are only finitely many rules with conclusion σ(x1,... xn) −→a  t.
Next observe that L is precisely the set Φ(PΣU ΦV + V ). So the fσ form a family of functions
fσ : 2ar(σ) → FU Φ(PΣU ΦV + V ).
Now for every σ ∈ Σ the function fσ induces a natural transformation
Set(V, −) → FU Φ(P U Φ+ Id)2ar(σ)	(18)
by an application of the Yoneda Lemma. Finally, observe that the set V of variables is isomorphic to ar(σ) × (A + 1). Thus, Set(V, −) is (isomorphic to) the functor (IdA × Id)ar(σ). Then the natural transformation in (18) corresponds precisely to a natural transformation
(2 × IdA × Id)ar(σ) → FU Φ(PΣU Φ+ Id),
i.e. a natural transformation as in (15). So we obtain a bipointed specification λ
according to Lemma 5.4.
(2) It remains to show that finite dependency of the given DFA specification entails finite dependency of the induced bipointed specification. As in the proof of Proposition 4.3 we see that Σ is the directed union of all its closed subsignatures Γ, which are all finite. For a closed subsignature Γ of Σ we see that each fσ, σ ∈ Γ, above restricts to
fσ : 2ar(σ) → 2 × LΓA,
where LΓ is the subset of L given by the terms using only operators from Γ. Now it is not difficult to prove that by following the same steps as in point (1) we get bipointed specifications λΓ for each closed subsignature Γ of Σ whose directed union is λ as obtained in (1); this shows that λ has finite dependency (see Definition 4.5). We leave the details to the reader.	2

Thus by Corollary 4.8 the rational fixpoint, i.e., the set of regular languages, is closed under any operations defined by a DFA specification having finite dependency. And by Theorem 4.11 the operational model is locally finite. We proceed to show several examples.
Given two words w and v, the shuﬄe of w and v, denoted w da v, is the set of words obtained by arbitrary interleavings of w and v [30]. For example, ab da c = {abc, acb, cab}. The shuffle of two languages L1 and L2 is the pointwise
extension: L1 da L2 =  w∈L1,v∈L2 w da v. The shuffle operator can be defined in
terms of a DFA specification as follows:


x →a x da y →a
xj
xj da y
y →a x da y →a
yj
x da yj
x↓	y↓


(x da y)↓

By Corollary 4.8 the set of regular languages is closed under shuffle.
Concatenation, Kleene star, a single alphabet letter and the neutral element 1 = {ε} w.r.t. concatenation, are defined as follows (the Kleene star is defined using an additional binary operation ƒ , such that intuitively ƒ (L1, L2)= L1 · L∗):


x →a xj
x↓	y →a yj
x↓	y↓



x · y →a xj · y
x · y →a yj


(x · y)↓	a →a
a ∈ A
1


x →a xj	x↓	y →a yj	x↓

ƒ (x, y) →a
ƒ (xj, y)
ƒ (x, y) →a
ƒ (yj, y)
	
ƒ (x, y)↓	1↓

For the corresponding signature Γ the functor Σ = FPΓU on Jsl thus represents syntactically the above operations, in addition to the join semilattices operations. Thus the initial algebra of Σ consists of regular expressions (with a binary Kleene star) modulo the join semilattice equations. So the operational model is precisely the coalgebra of regular expressions; by Theorem 4.11 this is locally finite. As such, we obtain for free that the number of derivatives of a regular expression is finite modulo the join semilattice equations (cf. [16]).
Interestingly, Proposition 5.6 works for any DFA specification having finite de- pendency, thus also when considering an infinite signature. Consider, for example, the (obviously infinite) signature containing all regular languages L ⊆ A∗ as con- stant, together with the following DFA specification:


L →a
if ε ∈ L
La	L↓


where La is the a-derivative of L given by {w | aw ∈ L}. Because every regular languages has finitely many different derivatives [16], the above DFA specification has finite dependency, and thus by Theorem 4.11 the operational model is locally finite (it coincides, in fact, with the rational fixpoint, with, as carrier, the set of all regular languages).

Conclusions and future work
We have generalized Aceto’s theorem on the regularity of the operational model of a transition system specification from process algebra to the realm of mathe- matical operational semantics of Turi and Plotkin. In previous work [14] it was already shown that bipointed specifications for F = Pf(A × Id ) generalize Aceto’s simple GSOS format, and it was proved that for general bipointed specifications of a strongly finitary functor Σ over a finitary one F a canonical Σ-algebra structure is induced on the rational fixpoint of F “restricting” the denotational model on the final coalgebra for F . Here we have extended this result to finitary functors Σ that are not necessarily strongly finitary. The key to our extension is an abstract formu- lation of the notion of finite dependency for bipointed specifications that captures Aceto’s more concrete notion for simple GSOS specifications as a special instance. This then allows us to prove our generalisation of Aceto’s result in Theorem 4.11: the operational model of such a specification is a locally finitely presentable coal- gebra. The latter property is interesting for possible tool development, as in any locally finite variety it implies decidability of bisimilarity: there are only finitely many states to check. Moreover, recent results on up to context techniques [26] may lead to a generic and efficient construction of a bisimulation witness of the desired equivalence.
Our second contribution is the new rule format of DFA specifications for op- erations on formal languages. These specifications are obtained by instantiating bipointed specifications for functors of the form Σ = ΦPΓU on the category of join semilattices. From our results we then conclude that regular languages are closed under operations specified by DFA specification, and as a corollary we also obtain the well-known result that regular expressions have only finitely many derivatives modulo the axioms of join semilattices.
Many interesting directions are still to be explored. The process described in Section 5.1 can easily be adapted to other locally finite varieties, allowing to derive more expressive concrete formats based on adding equations. In order to treat ra- tional power series and even context-free ones, one needs to move to other algebraic categories, such as vector spaces and idempotent semirings. Furthermore, we plan to investigate the extension of bipointed specification to coGSOS laws [20] to allow arbitrary lookahead in premises of rules.

References
Aceto, L., GSOS and finite labelled transition systems, Theoret. Comput. Sci. 131 (1994), pp. 181–195.
Aceto, L., W. Fokkink and C. Verhoef, Structural operational semantics, in: Handbook of Process Algebra, Elsevier Science, 2001 pp. 197–292.
Ad´amek, J., Free algebras and automata realizations in the language of categories, Comment. Math. Univ. Carolin. 15 (1974), pp. 589–602.
Ad´amek, J., S. Milius and J. Velebil, Free iterative theories: a coalgebraic view, Math. Structures Comput. Sci. 13 (2003), pp. 259–320.
Ad´amek, J., S. Milius and J. Velebil, Iterative algebras at work, Math. Structures Comput. Sci. 16
(2006), pp. 1085–1131.

Ad´amek, J. and H.-E. Porst, On tree coalgebras and coalgebras presentations, Theoret. Comput. Sci.
311 (2004), pp. 257–283.
Ad´amek, J. and J. Rosicky´, “Locally presentable and accessible categories,” Cambridge Univ. Press, 1994.
Ad´amek, J. and J. Rosicky´, On sifted colimits and generalized varieties, Theory Appl. Categ. 8 (2001),
pp. 33–53.
Ad´amek, J., J. Rosicky´ and E. Vitale, “Algebraic Theories,” Cambridge Univ. Press, 2011.
Ad´amek, J. and V. Trnkov´a, “Automata and Algebras in Categories,” Mathematics and its Applications
37, Kluwer Academic Publishers, 1990.
Barr, M., Coequalizers and free triples, Math. Z. 116 (1970), pp. 307–322.
Bartels, F., “On generalised coinduction and probabilistic specification formats,” Ph.D. thesis, CWI, Amsterdam (2004).
Bloom, B., S. Istrail and A. Meyer, Bisimulation can’t be traced, J. ACM 42 (1995), pp. 232–268.
Bonsangue, M., S. Milius and J. Rot, On the specification of operations on the rational behaviour of systems, in: EXPRESS/SOS’12, Elect. Proc. of Theoret. Comput. Sci. 89, 2012, pp. 3–18.
Bonsangue, M., S. Milius and A. Silva, Sound and complete axiomatizations of coalgebraic language equivalence, ACM Trans. Comput. Log. 14 (2013).
Brzozowski, J. A., Derivatives of regular expressions, J. ACM 11 (1964), pp. 481–494.
Gabriel, P. and F. Ulmer, “Lokal pr¨asentierbare Kategorien,” Lecture Notes Math. 221, Springer, 1971.
Johnstone, P., “Stone Spaces,” Cambridge University Press, 1986.
Klin, B., Structural operational semantics for weighted transition systems, in: Semantics and Algebraic Specification, LNCS 5700 (2009).
Klin, B., Bialgebras for structural operational semantics: An introduction, Theoret. Comput. Sci. 412
(2011), pp. 5043–5069.
Kurz, A. and J. Rosicky´, Strongly complete logic for coalgebras, Log. Meth. in Comput. Sci. 8 (2012),
pp. 3–14.
Lenisa, M., A. J. Power and H. Watanabe, Category theory for operational semantics, Theoret. Comput. Sci. 327 (2004).
Makkai, M. and R. Par´e, “Accessible categories: the foundation of categorical model theory,” Contemporary Math. 104, Amer. Math. Soc., Providence, RI, 1989.
Milius, S., A sound and complete calculus for finite stream circuits, in: Proc. of LICS 2010 (2010), pp. 421–430.
Milner, R., “Communication and Concurrency,” Prentice Hall, 1989.
Rot, J. Bonsangue, M., Rutten, J., Coalgebraic Bisimulation-Up-To, in Proc. of SOFSEM 2013, Lecture Notes Comput. Sci. 7741 , Springer (2013) pp. 369–381.
Rutten, J., Universal coalgebra: a theory of systems, Theoret. Comput. Sci. 249 (2000).
Rutten, J., A coinductive calculus of streams, Math. Structures Comput. Sci. 15 (2005), pp. 93–147.
Rutten, J., Rational streams coalgebraically, Log. Meth. in Comput. Sci. 4 (2008), pp. 1–22.
Shallit, J., “A Second Course in Formal Languages and Automata Theory,” Cambridge Univ. Press, 2008.
Turi, D. and G. Plotkin, Towards a mathematical operational semantics, in: Proc. of LICS 1997 (1997),
pp. 280–291.
