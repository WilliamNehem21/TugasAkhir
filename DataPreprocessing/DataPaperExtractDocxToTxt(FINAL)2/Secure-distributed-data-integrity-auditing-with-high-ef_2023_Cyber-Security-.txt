Cyber Security and Applications 1 (2023) 100004

		




Secure distributed data integrity auditing with high eﬃciency in 5G-enabled software-defined edge computing
Dengzhi Liua,b,∗, Zhimin Li a, Dongbao Jiaa
a School of Computer Engineering, Jiangsu Ocean University, Lianyungang 222005, China
b Jiangsu Institute of Marine Resources Development, Lianyungang 222005, China


a r t i c l e	i n f o	a b s t r a c t

	

Keywords:
Edge computing
5G and software definition Distributed data integrity auditing Certificateless cryptography
Key exposure resistance Privacy-preserving
In edge computing, the idle resources of the devices in the network can be virtualized into a platform that provides clients with storage resource and computing capability. Note that the service response of edge computing is faster than that of cloud computing. The service provision speed and the distributed resources utilization rate of edge computing will be further improved when integrated with 5 G and software definition paradigm in the design of the network system. However, the issues of data storage security and edge devices’ trustworthiness seriously restrict the development of edge computing. To enhance the security of the data storage in edge computing, a secure distributed data integrity auditing is proposed. The proposed auditing scheme in this paper can be used to guarantee the correctness and the completeness of the stored data in 5G-enabled software-defined edge com- puting. The auditing results of the distributed data in the proposed scheme can be used as an important basis for evaluating the trustworthiness of the edge devices. Due to the utilization of certificateless cryptography in the design of the proposed scheme, the computational cost of the terminal side can be highly reduced. Security anal- ysis of the proposed scheme demonstrates that the properties of key exposure resistance and privacy-preserving are provided in data auditing. Simulation results of the time cost of the server side and the terminal side show that the proposed scheme is highly eﬃcient compared to previous schemes.





Introduction

Edge computing is a paradigm that can improve the quality of the service and the rate of resource utilization of the network system. Edge computing is developed from distributed computing that can integrate the hardware resources of the devices nearby the terminals to provide high quality services to users with low latency [1,2]. Similar to cloud computing, edge computing provides services to users via the network. Compared with the high centralization of cloud computing, edge com- puting is decentralized. The services provided by devices in edge com- puting do not need to be managed and provided through a centralized server. That is to say, the services provision of edge computing is directly client oriented that results in the service quality is more high, reliable and secure compared to that in cloud computing [3]. The obvious ad- vantages of edge computing determines that it can be well used in many network-based scenarios, such as internet of things [4], wireless sensor networks [5], smart cities [6], etc.
Edge computing is a promising technique, especially for the devel- oping requirements of the intellectualized and the network control in all walks of life. It is worth noting that the feature of heterogeneity of edge devices will lead to insuﬃcient utilization of the resources. More-

∗ Corresponding author.
E-mail address: liudz@jou.edu.cn (D. Liu).
over, the edge devices in edge computing are highly dispersed and only serve peripheral devices, which results in low resource utilization of edge resources. Hence, how to fully schedule the resources of edge de- vices has become a hot research topic in the study of edge computing. To reduce the execution latency and the energy consumption of edge devices, Miao et al. proposed an optimize task oﬄoading scheduling and transmit power allocation scheme for mobile edge computing. Note that the proposed scheme in Miao et al.’s research is constructed based on alternating minimization [7]. To solve the stochastic task genera- tion and dynamic network conditions in mobile edge computing, Liu et al. proposed a computation oﬄoading and resource scheduling based on reinforcement learning for mobile computing [8]. Moreover, Liu et al.’s scheme can estimate the cumulative latency and energy rewards. However, the related schemes of scheduling in edge computing have not been studied from the mode of resource management, which limits the development of edge computing.
To improve the flexibility of edge resources management and realize the intelligent collaboration of edge devices, in 2020, Hu et al. proposed the paradigm of software-defined edge computing (SDEC) inspired by the concept of software-definition [9]. The proposed framework in Hu et al.’s scheme can well optimize the management of edge devices and


https://doi.org/10.1016/j.csa.2022.100004
Received 27 June 2022; Received in revised form 15 July 2022; Accepted 20 July 2022
Available online 23 July 2022
2772-9184/© 2022 The Authors. Published by Elsevier B.V. on behalf of KeAi Communications Co., Ltd. This is an open access article under the CC BY license (http://creativecommons.org/licenses/by/4.0/)


Fig. 1. The paradigm of the SDEC with IoT.































reasonably schedule the resources in edge computing. The framework of the SDEC combined with IoT (Internet of Things) is shown as Fig. 1. Note that there are four components in SDEC, including software-defined edge device, software-defined edge storage, software-defined edge com- puting resource and software-defined edge service. It worth noting that all the components in the system are managed and controlled by a con- trol center. The main goal of the design of SDEC is to realize the au- tomatic interaction and collaboration between hardware and software that can make full use of the idle resources in edge computing.
The SDEC can be viewed as a promising framework to construct a system of edge computing in the further, especially combined with the emerging network technologies, such as 5G-enabled SDEC. The tech- nology of 5 G can provide communications with high quality and low latency [10,11] that makes the service provision in SDEC more eﬃcient. However, with the increase of the amount of edge devices, a new prob- lem is emerged that is how to guarantee the storage security of the ter- minals’ stored data in edge devices. The traditional related distributed data protection methods [12–14] are not suitable for SDEC environment because the local resources of terminals are limited and the edge devices are decentralized. Hence, it is necessary to construct a data storage se- curity protection scheme with high eﬃciency for 5G-enabled SDEC.

Related work

In the security assurance of edge computing, many researches of data storage have been studied. In 2018, Fu et al. proposed a secure data stor- age and searching mechanism that can execute data processing, secure data storage, eﬃcient data retrieval and dynamic data collection [15]. Note that ID-AVL tree and hash value are used to construct the data structure to process the raw data and store the time-sensitive data in edge server in Fu et al.’s scheme. To improve the security of caching
data in data retrieval, a cache data integrity auditing scheme is pro- posed in Li et al.’s scheme [16]. In Li et al.’s scheme, the variable Merkle Hash Tree is used to generate the storage proof to improve the accuracy of the cache data. To realize the stored private data integrity checking in edge computing, Wang et al. proposed a data integrity verification scheme based on ZSS signature to ensure the privacy protection and public auditing for the data stored in edge servers [17]. However, the consideration of data security in the previous schemes in data auditing and storage is not enough.
To improve the storage security, many auditing schemes have been proposed in recent years. The first two studies of data integrity auditing are PDP (Provable Data Possession) [18] and POR (Proof of Retrievabil- ity) [19]. Note that PDP and POR cannot support the public auditing which improves the computational cost of proof checking at the local side. In 2009, Wang et al. first proposed a public auditing with data dynamics to reduce the storage auditing computational cost of client side [20]. To realize the property of privacy preserving, Wang et al. pro- posed a public auditing based on random masking in 2010 [21]. The extended works [22,23] of the above public auditing are published in 2011 and 2013, respectively. In [22], the Merkle Hash Tree is firstly used to construct the data structure in storage auditing to realize se- cure data dynamics. In [23], the techniques of homomorphic linear au- thenticator and random masking are used to construct public auditing with privacy-preserving for cloud storage. In 2013, Yang et al. proposed a public auditing based on the property of bilinear pairing to support data dynamics and batch auditing [24]. Note that Yang et al.’s scheme can be executed in storage auditing with high security and eﬃciency. To realize eﬃcient data dynamics, a dynamic hash table structure is de- signed for the public data auditing in Tian et al.’s scheme [25]. To deal with the big data auditing, Sookhak et al. proposed a structure of Di- vide and Conquer Table (D&CT) to support the dynamic operations for



the big data in 2018 [26]. It is worth noting that the proposed audit- ing in Sookhak et al.’s scheme can be executed with low communication and computational cost. However, the related schemes cannot be used directly in edge computing because the edge devices in the environ- ment of edge computing cannot complete the complexity computation with limited resources. Hence, a secure and eﬃcient distributed data
user can create his/her own private key according to the received par- tial key and the generated secret value. In general, certificateless cryp-
tography consists of five phases, including 𝑆𝑒𝑡𝑢𝑝, 𝑃 𝐾𝑒𝑦𝐺𝑒𝑛(Partial Key
Generation), 𝑆𝑉 𝑎𝑙𝐺𝑒𝑛(Secret Value Generation), 𝑆𝐾𝑒𝑦𝐺𝑒𝑛(Secret Key Generation) and 𝑃 𝐾𝑒𝑦𝐺𝑒𝑛(Public Key Generation). The main process of
the five phases is shown as follows:

integrity auditing needs to be studied for 5G-enabled software-defined
edge computing.
𝑆𝑒𝑡𝑢𝑝 → (𝑝, 𝑀
𝑆𝐾
): The operations in this phase are executed by the


Contributions

This paper proposed a secure distributed data integrity auditing with high eﬃciency in 5G-enabled software-defined edge computing. The main contributions of this paper are listed as follows.
The paradigm of the certificateless cryptography is used to design the proposed scheme, which highly eliminates the computational cost of the terminal side in the generation of security keys and tags.
The ECS in the system can audit the data blocks without using any keys and parameters of terminals expect the public key. In other words, the proposed scheme can provide the property of key expo- sure resistance in the storage auditing.
In the data integrity auditing, the ECS cannot obtain the complete data file of terminals according to the storage proof elements re- ceived from edge computing. In other words, the proposed scheme supports privacy-preserving for the audited data.

Organization of this paper

The reminder of the paper is organized as follows. Section 2 de- scribes the preliminaries that are used in the design of the proposed scheme. Section 3 introduces the system model and the design goals. Section 4 presents the details of the proposed scheme in this paper. Section 5 provides the evaluation that includes security analysis and performance analysis. The conclusion is given in Section 6.

Preliminaries

The preliminaries that are used in the construction of the proposed scheme are introduced briefly in this section. First, the description of the bilinear pairing is presented. Then, the main process of certificateless cryptography is provided.

Bilinear pairing

The technique of bilinear pairing was first proposed in identity-based encryption by Boneh et al. in 2001 [27]. In the bilinear pairing, three
multiplicative groups of 𝔾1 , 𝔾2 and 𝔾𝑇 with prime order 𝑞 are defined.
The generators of 𝔾1 and 𝔾2 are denoted as 1 and 2 . The property of bilinear pairing can be denoted as 𝑒 ∶ 𝔾1 × 𝔾2 → 𝔾𝑇 . Suppose that two elements of P and g are randomly chosen from group 𝔾1. For any P1 , P2 ∈ 𝔾1 , we can get that 𝑒(P1 ⋅ P2 , g) = 𝑒(P1 , g) ⋅ 𝑒(P2 , g). Here, as- sume that there are two integers of 𝑎and 𝑏that are randomly chosen from ℤ∗. The properties of the bilinear pairing are shown as follows.
Bilinear: 𝑒(P 𝑎, g𝑏) = 𝑒(P, g)𝑎𝑏.
Non-degenerate: 𝑒(1 , 2 ) ≠ 1.
Computable: 𝑒(P, g) can be eﬃciently computed by an existing al-
gorithm.

Certificateless cryptography

The technique of the certificateless cryptography is proposed to solve the problem of key escrow in identity-based encryption [28]. To avoid the leakage of the private key of users, the KGC should generate a par- tial private key according to the user’s identity information. Then, the
KGC. The input of this phase is a security parameter 𝜃. Then, the
KGC will generate the system parameter 𝑝 and the secret master key
𝑀𝑆𝐾 . Note that the system parameter 𝑝 will be sent to the user.
𝑃 𝐾𝑒𝑦𝐺𝑒𝑛 → 𝑃𝑠𝑘 : According to the user’s identity 𝐼𝐷, the KGC will compute the partial key 𝑃𝑠𝑘 for the user using the system parameter
𝑝 and the secret master key 𝑀𝑆𝐾 . Finally, the partial key is sent to
the user.
𝑆𝑉 𝑎𝑙𝐺𝑒𝑛 → 𝑆𝑣 : In this phase, the user will compute a secret value
𝑆𝑣 according to his/her own identity 𝐼𝐷 and the received system parameter 𝑝 from the KGC.
𝑆𝐾𝑒𝑦𝐺𝑒𝑛 → 𝑆𝐾: This phase is executed by the user. It takes as input the system parameter 𝑝, the received partial key 𝑃𝑠𝑘 and the secret value 𝑆𝑣 . The output of this phase is the user’s secret key 𝑆𝐾.
𝑃 𝐾𝑒𝑦𝐺𝑒𝑛 → 𝑃 𝐾: This phase can output the user’s public key 𝑃 𝐾 by
using the system parameter 𝑝 and the secret value 𝑆𝑣 .
System model and design goals

This section first presents the system model of the proposed scheme. Then, the design goals of the proposed scheme in this paper are de- scribed.

System model

The system model of the proposed scheme consists of three layers. The bottom layer contains the terminals, which are the users to enjoy the services provided by edge computing. The middle layer of the sys- tem is edge computing that the belonged edge devices are connected by the wireless and wired networks. In this paper, the communication technology between different devices and layers is 5 G that can provide high bandwidth services to the connected devices. Moreover, the tech- nique of 5 G can ensure the high quality in communications with low latency. To reduce the impact of heterogeneous devices on service pro- vision in edge computing, the paradigm of software-defined networks is used to manage and control the edge devices in edge computing. That is to say, the edge computing in the system is a Software-Defined Edge Computing (SDEC). In addition, an Edge Computing Server (ECS) is in- troduced in the system to manage the services provided by the SDEC. The system framework of the proposed 5G-enabled SDEC is shown as Fig. 2. The following description is the details of the system model and the corresponding security assumptions.
Layer 1. Terminals: The terminals in the system are the devices in IoT (Internet of Things) networks that enjoy the services from the upper layer of edge computing via 5 G in the system. It is worth noting that the terminals in this layer are lightweight devices with limited computational capability and storage space. Hence, the ter- minals need to delegate the tasks of storage and computing to the edge devices. On the aspect of security, the terminals are not trusted. The terminals are easy to be attacked by adversaries for financial in- terest in the system. To ensure the security of the gathered data, the terminals should encrypt the data before outsourcing it to edge computing for storage and service requests. In addition, the termi- nals can delegate the ECS to audit the stored data in edge computing to enhance the storage security.
Layer 2. Services Provider: The service provider in this layer are the edge devices in edge computing. The edge devices are the idle devices nearby the IoT in the network. Here, the communication network is the 5 G that can improve the service response speed and


Fig. 2. The system framework of the 5G- enabled SDEC.






















information transmission quality. That is to say, the devices in edge computing are the connected devices in the cellular network pro- vided by the same base station and adjacent base stations in 5 G. Compared to cloud computing, the resource center in edge comput- ing is closer to terminals. The distributed devices can provide high quality services to terminals with low latency. To fully schedule the resources of edge devices, the concept of software-definition is used to manage the storage resources, the computing capability and the edge services. Hence, the services and resources provision in the pro- posed 5G-enabled SDEC are more flexible compared to traditional edge computing. This layer is responsible for storing the gathered data and executing the computational tasks outsourced by the IoT devices. The edge devices are honest but curious to the stored data. Moreover, it is possible that the edge devices will delete the less often used data and try to forge the computational result when the corre- sponding data has been destroyed. Hence, it is necessary to check the trustworthiness of edge devices and audit the storage integrity of the data periodically in edge computing.
Layer 3. Server/Controller: The server is the ESC that can be used to manage the resource and services of edge computing. Moreover, the ESC plays the role of the controller in SDEC. That is to say, the ESC is the management and control center that schedules the re- sources of edge computing and achieves the collaboration among devices, storage, computing capability and services in edge comput- ing. Moreover, the ESC is the KGC of the system and can be seen as the auditor of the distributed data integrity auditing in edge com- puting. Different from the entities in layer 1 and layer2, the ESC is a fully-trusted entity that can successfully generate and compute the parameters and keys according to the algorithms in the proposed scheme.

Design goals

The design goals that the proposed scheme should be achieved in the design are listed as follows.
Distributed Data Integrity Auditing. To enhance the security of the system, the proposed scheme should ensure that the distributed data stored in edge devices can be audited by the fully-trusted ESC on behalf of the terminals.
High Efficiency. Due to the constrained computing capability of terminals, the proposed scheme should reduce the computational cost of local side in data processing for the storage and auditing.
Key Exposure Resistance. In the data storage and auditing, the pro- posed scheme should avoid the key leakage. In other words, the ESC audits the data using the public keys of terminals and its own secu- rity parameters.
Privacy-Preserving. The proposed scheme should support that the ESC cannot obtain and recover the original data file from the audit- ing elements. In other words, the proposed scheme should provide the property of privacy-preserving for the data in auditing.

The proposed scheme

The details of the proposed scheme are introduced in this section. First, a high description is resented, which describes the main process of the proposed auditing scheme. Then, the detailed description of the proposed scheme is provided, including the phases of Key Generation, Data Tag Generation, Data Auditing Challenge, Storage Proof Genera- tion and Data Integrity Auditing.

High description

The proposed scheme mainly focuses on the distributed data in- tegrity auditing in edge computing. Moreover, the edge computing in this paper is managed and controlled by using the paradigm of the software-definition to fully schedule the resource of storage, service and computing in edge computing. In the proposed scheme, the certificate- less cryptography is used in the design of the proposed auditing protocol. The main computation of the authenticator and tag in the previous au- diting [22–26] has been eliminated. That is to say, the proposed data integrity auditing has low computational cost at the terminal side. In the data tag generation step, the terminal can compute the data block tags and the corresponding data file tag using the secret value and the public key. Then, the data tags along with the data file will be outsourced to the edge devices for storage. When the ECS initiates a challenge of storage auditing, the edge devices can compute the storage proof for the data according to the stored tags and the received challenge information. Finally, the ECS checks whether the challenged data storage is correct


Fig. 3. The main process of the proposed scheme.

























and complete by verifying the storage proof using the public keys and its own security parameters.

The detailed description

The proposed auditing scheme mainly consists of five steps, includ- ing Key Generation, Data Tag Generation, Data Auditing Challenge, Storage Proof Generation and Data Integrity Auditing. The main pro- cess of the auditing protocol is shown as Fig. 3. Note that the notations with the corresponding explanation are provided in Table 1. The de- tailed description of the proposed scheme is shown as follows.
Key Generation. In the system setup, two multiplicative groups of
𝔾1 and 𝔾2 are generated. The prime order of groups 𝔾1 and 𝔾2 is
𝑞. The generator of 𝔾1 is . Here, a bilinear pairing is denoted as
𝑒 ∶ 𝔾1 × 𝔾1 → 𝔾2. Then, a parameter of 𝑠 is randomly chosen from ℤ∗ as the master key by the ECS. To generate the partial key for the system, the ECS selects a hash function 𝐻 for the system that can map a value to a point on 𝔾1. Here, the data file of one terminal stored in edge devices is denoted as 𝐹 = {𝑓1, 𝑓2, ⋅⋅ ⋅, 𝑓𝑛}. The partial

Table 1
Notations.

Notation	Description
𝔾1 , 𝔾2	Multiplicative groups
	Generator of group 𝔾1
key can be computed as 𝑝𝑠𝑘 = 𝐻 (𝐼𝐷𝐹 )𝑠 based on the master key and
ECS computes a public value 𝑝𝑣 = 𝑠 for the further data integrity the identifier of the data file stored in edge devices. After that, the
auditing.
Data Tag Generation. In this step, the terminals can generate the
Suppose that a terminal in the system selects a security parameter 𝑥 secret value for the public key computation and the data encryption. from ℤ∗. Note that the parameter of 𝑥 is a secret value of the termi- nal. Then, the public key of the terminal can be computed as 𝑝𝑘 = 𝑥
by the terminal using the secret value. To improve the storage secu- rity of the data stored in the edge devices, the terminal can compute
a block tag for 𝑓𝑖 as 𝑡𝑖 = 𝑝𝑘𝑓𝑖 = 𝑥⋅𝑓𝑖 using its public key. For the
data block integrity auditing, the data file tag can be computed as
𝑇 = 𝐻 (𝐼𝐷𝐹 )𝑥 by the terminal utilizing its secret value 𝑥. Finally, the
block tags and the data file tag are outsourced to edge devices via
the network for the storage.
Data Auditing Challenge. In the proposed scheme, the ECS is re- sponsible for auditing the stored data blocks of terminals. The pe- riodically sampling auditing to the data blocks stored in the edge devices can improve the security of the data storage. Moreover, the auditing result of the stored data is an important factor for evaluat- ing the reputation of the edge devices in the data storage. Suppose
that the number of data blocks of one terminal is 𝑛. Suppose that the
ECS wants to audit 𝑚 data blocks for the terminal in edge computing. Here, 1 ≤ 𝑚 ≤ 𝑛.
In the phase of auditing challenge generation, the ECS first randomly
selects 𝑚 elements from ℤ∗ as {𝑠 , 𝑠 , ⋅⋅ ⋅, 𝑠 }. Then, the ECS chooses

ℤ∗	Integers set of 1 to 𝑞−1
𝑞	1  2	𝑚
∗

𝑞
𝑞	Large prime order
𝑠, 𝑝𝑠𝑘	Master key and partial key
𝐻	Hash function
𝐹, 𝑓𝑖	Data file and data blocks
𝐼𝐷𝐹	Identifier of the data file
𝑝𝑣	Public value of ECS
𝑥	Secret value of the terminal
𝑝𝑘	Public key of the terminal
𝑡𝑖 , 𝑇	Data block tag and data file tag
𝑛, 𝑚	Number of data blocks and challenged data blocks
𝑠𝑖 , 𝑐𝑖	Radom elements for the auditing challenge
𝐴, 𝑃	Proof auxiliary parameter and the storage proof
𝑐𝑖 from ℤ𝑞 for every 𝑠𝑖. The challenge for the 𝑚 data blocks auditing
can be denoted as {𝑖, 𝑐𝑖}. Finally, the ECS sends the auditing chal-
lenge to edge computing for the corresponding data blocks storage
proof computation.
Storage Proof Generation. According to the received challenge, the edge devices that store the challenged data blocks will com- pute the storage proof. First, the edge devices compute a proof aux-
iliary parameter based on the challenge element 𝑐𝑖 and the stored
blocks 𝑓𝑖. The proof auxiliary parameter of 𝐴 can be computed as
𝐴 =  ∑  𝑐𝑖 ⋅ 𝑓𝑖. Then, the edge devices compute the corresponding
𝑖∈[1,𝑠𝑚 ]

storage proof of the data blocks as𝑃 =  ∏
𝑖∈[1,𝑠𝑚 ]
(𝑡𝑖 ⋅ 𝑇 )𝑐𝑖 . Finally, the

Table 2
Computational cost of different phase.

edge devices send {𝐴, 𝑃 } to the ECS for the integrity auditing.
Data Integrity Auditing.
Upon receiving the storage proof from the edge devices, the ECS can check the correctness of the storage proof using the public key of the terminal, the generated public value and partial key. According to the correctness of the following Eq. (1), the ECS can determine whether the audited data blocks have been corrupted or stored com- pletely in edge devices.
∑  𝑐𝑖
𝑒(𝑃 , 𝑝𝑣)?𝑒(𝑝𝑠𝑘𝑖∈[1,𝑠𝑚 ] , 𝑝𝑘) ⋅ 𝑒(𝐴, 𝑝𝑘) ⋅ 𝑒(𝑝𝑣, 𝑝𝑘)	(1)

Evaluation

To demonstrate the advantages of the proposed auditing scheme, the security and the performance are evaluated in this section. First, the proofs of the correctness and the security of the proposed scheme are presented in security analysis. Then, the computational eﬃciency of the proposed scheme is analyzed in the performance analysis according to the theoretical comparison and the simulation of the computational overhead.






∗ 𝑇𝐸., 𝑇𝐻., 𝑇𝑀𝑢𝑙., 𝑇𝐴𝑑𝑑. , 𝑇𝑃. : Time required to execute the corresponding operation.
∗ 𝑚: The number of the challenged data blocks.


and the partial secret key are generated by the ESC in Key Generation. That is to say, the ESC only uses the terminal’s public key in the data integrity auditing. Hence, the property of the key exposure resistance
can be proved. ∗
Theorem 3. The proposed auditing scheme can provide the property of privacy-preserving for the original data in the auditing.
Proof. The ECS can audit the data storage in the edge devices according to the received proof auxiliary parameter and the stor- age proof. From the description in the step of Storage Proof Genera-
tion in Section 4.2, we can get that the proof auxiliary parameter𝐴 =

Security analysis
∑
𝑖∈[1,𝑠𝑚 ]
𝑐𝑖 ⋅ 𝑓𝑖. That is to say, when the number of the challenged blocks

Three theorems of the proposed scheme and the corresponding proofs are given. The details are shown as the following description.
Theorem 1. The proposed data integrity auditing can be proved to be correct if the required security parameters are generated correctly according to the protocol.
Proof. Suppose that all the entities are honest and can successfully generate the required parameters and keys defined in the abovemen- tioned auditing protocol. The correctness of the auditing protocol can be proved by elaborating Eq. (1). The left-hand side of Eq. (1) can be computed as follows.
𝑒(𝑃 , 𝑝𝑣)
stored in the edge devices is large, the ECS cannot distinguish which element is the determined data block even if the ECS has random el-
ement 𝑐𝑖. That is to say, the true data blocks can be concealed in the
age proof, the true data blocks are blinded in the data block tag 𝑡𝑖. Here, proof auxiliary parameter by using the random elements. In the stor-
𝑡𝑖 = 𝑝𝑘𝑓𝑖 = 𝑥⋅𝑓𝑖 . The adversary can get 𝑓𝑖 by computing 𝑡𝑖∕𝑝𝑘. Then, the
adversary tries to get 𝑓𝑖from 𝑓𝑖 . It other words, the DL (Discrete Loga-
rithm) problem must be solved by the adversary if the adversary wants
to obtain the original data block, which contradicts the DL assumption [29]. Hence, the proposed scheme supports the privacy-preserving for the terminal’s data in the auditing.

Performance analysis

= 𝑒( ∏
𝑖∈[1,𝑠𝑚 ]
= 𝑒(
𝑖∈[1,𝑠𝑚 ]
(𝑡𝑖 ⋅ 𝑇 )𝑐𝑖 , 𝑠)
(𝑥⋅𝑓𝑖 ⋅ 𝐻 (𝐼𝐷𝐹
)𝑥)𝑐𝑖 , )
In order to show the high eﬃciency of the proposed auditing scheme in this paper, we list the computational cost of each phase and compare

= 𝑒( ∏
𝑖∈[1,𝑠𝑚 ]
(𝑓𝑖 ⋅ 𝐻 (𝐼𝐷𝐹
))𝑠⋅𝑥⋅𝑐𝑖 , )
ing, the symbols of 𝑇𝐸., 𝑇𝐻., 𝑇𝑀𝑢𝑙., 𝑇𝐴𝑑𝑑., 𝑇𝑃. are used to denote the time the computational operation amounts of them. For ease of understand-
that executes the corresponding operations of exponentiation, hash to

Similarly, the right-hand side of Eq. (1) can also be elaborated us- ing the keys and parameters mentioned in the details of the proposed scheme. The elaboration of the right-hand side of Eq. (1) is provided as follows.
point, multiplication, addition and bilinear pairing in the construction of the auditing protocol in this paper. Table 1 is the comparasion result of the main computational time of the four phases in the proposed au- ding protocol. According to the comparasion result listed in Table 1, it

∑
𝑒(𝑝𝑠𝑘𝑖∈[1,𝑠𝑚 ]
𝑐𝑖
, 𝑝𝑘) ⋅ 𝑒(𝐴, 𝑝𝑘) ⋅ 𝑒(𝑝𝑣, 𝑝𝑘)
can be found that the computational cost in phases of Key Generation

𝑠⋅ ∑
= 𝑒(𝐻 (𝐼𝐷𝐹 ) 𝑖∈[1,𝑠𝑚 ]
𝑐𝑖
∑
, 𝑥) ⋅ 𝑒(𝑖∈[1,𝑠𝑚 ]
𝑐𝑖 ⋅𝑓𝑖
, 𝑥) ⋅ 𝑒(𝑠, 𝑥)
and Data Tag Generation is a constant. Note that the computational cost
in the two phases of Storage Proof Generation and Data Auditing is de-

= 𝑒( ∏
𝑖∈[1,𝑠𝑚 ]
(𝐻 (𝐼𝐷𝐹
))𝑠⋅𝑐𝑖 , 𝑥) ⋅ 𝑒( ∏
𝑖∈[1,𝑠𝑚 ]
(𝑐𝑖 ⋅𝑓𝑖 )𝑠, 𝑥)
termined by the number of the challenged data blocks. That is to say, with the growth of the challenged data blocks in the auditing request,

= 𝑒( ∏
𝑖∈[1,𝑠𝑚 ]
(𝐻 (𝐼𝐷 ) ⋅ 𝑓𝑖 )𝑠⋅𝑥⋅𝑐𝑖 , )
the computational time of phases in Storage Proof Generation and Data Auditing will be higher. In addition, from Table 2, we can find that the

According to the above elaboration of Eq. (1), it can be seen that the
of the proposed data integrity auditing scheme can be proved. ∗ final results of the two side are the same. That is to say, the correctness
Theorem 2. The proposed scheme can resist the exposure of keys in the data auditing.
Proof. In the phase of the data integrity auditing, the retrieved data storage proof from the edge devices can be checked by the ECS using
the public value 𝑝𝑣, the partial secret key 𝑝𝑠𝑘 and the public key of
the terminal. It can be seen that there is no need to use the terminal’s
secret keys and parameters in the auditing. Moreover, the public value
computational cost of the phase in Data Tag Generation is larger than that of Key Generation.
The proposed auditing scheme is also simulated to present the real computational time cost. In the simulation analysis, we compare the time cost of the proposed auditing scheme with that of the previous schemes [22,23,25,26]. The comparative schemes are PPA [22], EPA [23], DPA [25] and ABD [26]. The experimental platform used to con- duct the simulation is constructed based on MIRCAL cryptographic li- brary. MTRCAL was developed by Shamus software Ltd. that can be used to perform the program of cryptography related to large number opera- tion, including RSA public cryptography, Diﬃe Hellman key exchange,


Fig. 4. The time cost of the server side under different au- dited data blocks.





















Fig. 5. The time cost of the terminal side under different data blocks.
















programming languages used in the simulation are C++ and Python. AES, DSA digital signature and elliptic curve cryptography [30]. The
The conducted computer is configured with 8GB RAM and 2.60 GHZ CPU.
First, we simulate the time cost of the server side that executes the auditing operations. In the simulation, the number of the audited data blocks ranges from 50 to 100. The simulation result under the different number of the audited data blocks is shown as Fig. 4. From Fig. 4, we can find that the time cost of the proposed auditing scheme and the comparative schemes will be higher with the increase of the number of the audited data blocks. Moreover, the time cost of the proposed scheme is always lower than that of the previous schemes under the condition of different audited data blocks. In particular, when the number of the audited data blocks is 500, the computational time cost of the server side in the proposed auditing scheme is only about 1/3 of the previous schemes’ average time cost. In addition, the computational time of the terminal side is also simulated on the experimental platform. Fig. 5 is the simulation result of the time cost at the terminal side under different data blocks. Similar to that in Fig. 4, we can find that the time cost of the proposed auditing scheme and the previous schemes increases linearly with the growth of the data block number from Fig. 5. It is vital to show that the time cost of the terminal side in the proposed auditing scheme is always less compared to that in the previous schemes under the same number of data blocks. As the simulation results show, it can be concluded that the proposed scheme can be performed with high eﬃciency compared to the previous schemes.
Conclusion

To improve the security of the services provision in 5G-enabled software-defined edge computing, a secure distributed data integrity au- diting with high eﬃciency is proposed in this paper. The technique of certificateless cryptography is used to construct the process of the secu- rity keys and parameters generation that can highly improves the com- putational eﬃciency of the terminal side in the system. Moreover, the proposed auditing scheme in this paper can realize the data integrity auditing by using the terminals’ public keys and the ECS’s own secu- rity parameters. In other words, the proposed can provide the property of the key exposure resistance for terminals. In addition, the privacy- preserving of the terminals’ stored data blocks can be guaranteed in the data auditing. Security analysis proves the correctness of the proposed auditing scheme as well as the security properties of key exposure resis- tance and privacy-preserving. Performance analysis demonstrates that the proposed auditing scheme can be executed with low computational cost. According to the obvious advantages in security and eﬃciency, the proposed scheme can be well used to improve the security of edge computing in the aspect of the services provision.

Declaration of Competing Interest

The authors declare that they have no known competing financial interests or personal relationships that could have appeared to influence the work reported in this paper.



Acknowledgments

This work is supported by the National Science Foundation of China under Grant No. 62102169, No. 62072249, No. 12105120, the Natu- ral Science Foundation of the Jiangsu Higher Education Institutions of China under Grant 21KJB520033, the Key Research and Development Program (Social Development) of Lianyungang under Grant SF2102, the Research Start-up Fund of JOU under Grant KQ20039.
References

W. Shi, C. Jie, Z. Quan, Y. Li, L. Xu, Edge computing: vision and challenges, Internet Things J. 3 (5) (2016) 637–646, doi:10.1109/JIOT.2016.2579198.
D. Liu, Y. Zhang, D. Jia, Q. Zhang, X. Zhao, H. Rong, Toward secure distributed data storage with error locating in blockchain enabled edge computing, Comput. Standards Interfaces (2021), doi:10.1016/j.csi.2021.103560.
W. Shi, S. Dustdar, The promise of edge computing, Computer (Long Beach Calif.) 49 (5) (2016) 78–81, doi:10.1109/MC.2016.145.
J. Pan, J. McElhannon, Future edge cloud and edge computing for inter- net of things applications, IEEE Internet Things J. 5 (1) (2018) 439–449, doi:10.1109/JIOT.2017.2767608.
Z. Sheng, S. Pfersich, A. Eldridge, J. Zhou, D. Tian, V.C.M. Leung, Wireless acoustic sensor networks and edge computing for rapid acoustic monitoring, IEEE/CAA J. Automatica Sinica 6 (1) (2019) 64–74, doi:10.1109/JAS.2019.1911324.
W. Hou, Z. Ning, L. Guo, Green survivable collaborative edge com- puting in smart cities, IEEE Trans. Ind. Inf. 14 (4) (2018) 1594–1605, doi:10.1109/TII.2018.2797922.
Y. Mao, J. Zhang, K.B. Letaief, Joint task oﬄoading scheduling and transmit power allocation for mobile-edge computing systems, in: Proceedings of the IEEE Wireless Communications and Networking Conference (WCNC); 2017 March 19-22, IEEE, San Francisco, CA, USA, 2017, pp. 1–6, doi:10.1109/WCNC.2017.7925615.
T. Liu, Y. Zhang, Y. Zhu, W. Tong, Y. Yang, Online computation oﬄoading and resource scheduling in mobile-edge computing, IEEE Internet Things J. 8 (8) (2021) 6649–6664, doi:10.1109/JIOT.2021.3051427.
P. Hu, W. Chen, C. He, Y. Li, H. Ning, Software-defined edge computing (sdec): principle, open iot system architecture, applications, and challenges, IEEE Internet Things J. 7 (7) (2020) 5934–5945, doi:10.1109/JIOT.2019.2954528.
J. Sachs, L.A.A. Andersson, J. Araújo, C. Curescu, J. Lundsjö, G. Rune, E. Steinbach,
G. Wikström, Adaptive 5g low-latency communication for tactile internet services, Proc. IEEE 107 (2) (2019) 325–349, doi:10.1109/JPROC.2018.2864587.
J. Varga, A. Hilt, C. Rotter, G. Járó, Providing ultra-reliable low latency services for 5g with unattended datacenters, in: Proceedings of the International Symposium on Communication Systems, Networks & Digital Signal Processing; 2018 July 18-20, IEEE, Budapest, Hungary, 2018, pp. 1–4, doi:10.1109/CSNDSP.2018.8471756.
C. Wang, J. Shen, P. Vijayakumar, B.B. Gupta, Attribute based secure data aggre- gation for isolated iot-enabled maritime transportation systems, IEEE Trans. Intell. Transp. Syst. (2021), doi:10.1109/TITS.2021.3127436.
R. Rayarikar, A. Bokil, An encryption algorithm for end-to-end secure data transmis- sion in manet, Int. J. Comput. Appl. 56 (16) (2012) 29–33, doi:10.5120/8977-3187.
D. Liu, Y. Zhang, W. Wang, K. Dev, S.A. Khowaja, Flexible data integrity checking with original data recovery in iot-enabled maritime transportation systems, IEEE Trans. Intell. Transp. Syst. (2021), doi:10.1109/TITS.2021.3125070.
J. Fu, Y. Liu, H. Chao, B.K. Bhargava, Z. Zhang, Secure data storage and searching for industrial iot by integrating fog computing and cloud computing, IEEE Trans. Ind. Inf. 14 (10) (2018) 4519–4528, doi:10.1109/TII.2018.2793350.
B. Li, Q. He, F. Chen, H. Jin, Y. Xiang, Y. Yang, Auditing cache data integrity in the edge computing environment, IEEE Trans. Parallel Distrib. Syst. 32 (5) (2021) 1210–1223, doi:10.1109/TPDS.2020.3043755.
H. Wang, J. Zhang, Y. Lin, H. Huang, ZSS signature based data integrity verification for mobile edge computing, in: Proceedings of the IEEE/ACM 21st International Sym- posium on Cluster, Cloud and Internet Computing (CCGrid); 2021 May 10-13, IEEE, Melbourne, Australia, 2021, pp. 356–365, doi:10.1109/CCGrid51090.2021.00045.
G. Ateniese, R. Burns, R. Curtmola, J. Herring, L. Kissner, Z. Peterson, D. Song, Prov- able data possession at untrusted stores, in: Proceedings of the 14th ACM Conference on Computer and Communications Security; 2007 October 28-31, ACM, Alexandria, Virginia, USA, 2007, pp. 598–609, doi:10.1145/1315245.1315318.
A. Juels, B.S. Kaliski, Pors: proofs of retrievability for large files, in: Proceed- ings of the 14th ACM Conference on Computer and Communications Secu- rity; 2007 October 28-31, ACM, Alexandria, Virginia, USA, 2007, pp. 584–597, doi:10.1145/1315245.1315317.
Q. Wang, C. Wang, J. Li, K. Ren, W. Lou, Enabling public verifiability and data dynamics for storage security in cloud computing, in: Proceed- ings of the 14th European Symp. Research in Computer Security (ESORICS 2009); 2009 September 21-23, Springer, Saint-Malo, France, 2009, pp. 355–370, doi:10.1007/978-3-642-04444-1_22.
C. Wang, Q. Wang, K. Ren, W. Lou, Privacy-preserving public auditing for data stor- age security in cloud computing, in: Proceedings of the International Conference on Computer Communication (IEEE INFOCOM 2010); 2010 March 14-19, IEEE, San Diego, CA, USA, 2010, pp. 1–9, doi:10.1109/INFCOM.2010.5462173.
Q. Wang, C. Wang, K. Ren, W. Lou, J. Li, Enabling public auditability and data dynamics for storage security in cloud computing, IEEE Trans. Parallel Distrib. Syst. 22 (5) (2011) 847–859, doi:10.1109/TPDS.2010.183.
C. Wang, S.S.M. Chow, Q. Wang, K. Ren, W. Lou, Privacy preserving public au- diting for secure cloud storage, IEEE Trans. Comput. 62 (2) (2013) 362–375, doi:10.1109/TC.2011.245.
K. Yang, X. Jia, An eﬃcient and secure dynamic auditing protocol for data storage in cloud computing, IEEE Trans. Parallel Distrib. Syst. 24 (9) (2013) 1717–1726, doi:10.1109/TPDS.2012.278.
H. Tian, Y. Chen, C.C. Chang, H. Jiang, Y. Huang, Y. Chen, J. Liu, Dynamic-hash- table based public auditing for secure cloud storage, IEEE Trans. Serv. Comput. 10
(5) (2017) 701–714, doi:10.1109/TSC.2015.2512589.
M. Sookhak, F.R. Yu, A.Y. Zomaya, Auditing big data storage in cloud computing using divide and conquer tables, IEEE Trans. Parallel Distrib. Syst. 29 (5) (2018) 999–1012, doi:10.1109/TPDS.2017.2784423.
D. Boneh, M.K. Franklin, Identity-based encryption from the weil pairing, in: Pro- ceedings of the 21st Annual International Cryptology Conference (CRYPTO 2001); 2001 August 19–23, Springer, Santa Barbara, California, USA, 2001, pp. 213–229, doi:10.1007/3-540-44647-8_13.
S.S. Al-Riyami, K.G. Paterson, Certificateless public key cryptography, in: Proceed- ings of the in International Conference on the Theory and Application of Cryptol- ogy and Information Security (ASIACRYPT 2003); 2003 November 30-December 4, Springer, Taipei, Taiwan, 2003, pp. 452–473, doi:10.1007/978-3-540-40061-5_29.
K. Nyberg, R.A. Rueppel, Message recovery for signature schemes based on the discrete logarithm problem, in: Proceedings of the Workshop on the Theory and Application of of Cryptographic Techniques (EUROCRYPT 1994); 1994 May 9-12, Springer, Perugia, Italy, 1995, pp. 182–193, doi:10.1007/BFb0053434.
X. Hu, H. Lu, H., .H Xu, J. Wang, Y. Yang, An eﬃcient identity-based proxy signature scheme in the standard model with tight reduction, in: Proceedings of the International Joint Conference, Advances in Intelligent Systems and Comput- ing (CISIS 2015); 2015 June 15-17, Springer, Burgos, Spain, 2015, pp. 309–319, doi:10.1007/978-3-319-19713-5_27.
Dengzhi Liu received the M.E. degree and Ph.D. degree from the School of Computer and Software, Nanjing University of Information Science and Technology, in 2017 and 2020, re- spectively. He is currently an Assistant Professor with the School of Computer Engineering, Jiangsu Ocean University, China. He mainly focuses on the security and privacy issues in data storage and transmission. He has authored more than 50 research papers and published in international conferences and journals. His-current research interests include cloud com- puting security, cyber security, and data security.




Zhimin Li received the Ph.D. degree from the School of Infor- mation Engineering, Beijing University of Posts and Telecom- munications in 2009. She is currently a Lecture with the School of Computer Engineering, Jiangsu Ocean University, China. Her current research interests include applied cryptog- raphy, electronic forensics, blockchain and so on.








Dongbao Jia is an associate professor at School of Computer Engineering, Jiangsu Ocean University, Lianyungang, China. And he is also currently a special researcher at the Univer- sity of Toyama, Toyama, Japan. He received his M.E. and Ph.D. degrees from the Department of Intellectual Informa- tion Engineering, Graduate School of Science and Engineering for Education, University of Toyama, Toyama, Japan, in 2015 and 2018, respectively. His-main research interests are intel- ligence algorithm, neural engineering and system security.
