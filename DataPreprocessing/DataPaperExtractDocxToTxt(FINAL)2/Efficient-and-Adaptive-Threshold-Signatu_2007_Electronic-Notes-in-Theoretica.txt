	Electronic Notes in Theoretical Computer Science 171 (2007) 93–105	
www.elsevier.com/locate/entcs

Efficient and Adaptive Threshold Signatures for Ad hoc networks
Roberto Di Pietro1 ,2
Dipartimento di Matematica Universita` di Roma Tre Rome, Italy

Luigi Vincenzo Mancini3
Dipartimento di Informatica Universita` di Roma “La Sapienza” Rome, Italy

Giorgio Zanin4
Dipartimento di Informatica Universita` di Roma “La Sapienza” Rome, Italy


Abstract
In this paper, we propose a secure, flexible, robust and fully distributed signature service, for ad hoc groups. In order to provide the service, we use a new threshold scheme, that allows to share a secret key among the current group members. The novelty of the scheme is in that it easily and efficiently enables dynamic increase of the threshold, according to the needs of the group, so that the service provides both adaptiveness to the level of threat the ad hoc group is subject to, and availability. We prove the correctness of the protocol and evaluate its efficiency. The changes to the threshold are performed by using a protocol that is efficient in terms of interactions among nodes and per-node required resources, resulting suitable even for resource- constrained settings. Finally, the same proposed scheme allows to detect nodes that attempt to disrupt the service, providing invalid contributions to the distributed signature service.
Keywords: threshold cryptosystem, signature scheme, secret sharing, peer-to-peer network, ad hoc networks, wireless network, ubiquitous service.


1 The authors have been partially funded by the WEB-MINDS project, supported by the italian MIUR under the FIRB program.
2 Email: dipietro@mat.uniroma3.it
3 Email: mancini@di.uniroma1.it
4 Email: zanin@di.uniroma1.it

1571-0661 © 2007 Elsevier B.V. Open access under CC BY-NC-ND license.
doi:10.1016/j.entcs.2006.11.012

Introduction and Background

Mobile Ad Hoc Networks (MANETs) are inherently self-organized, large-scale and fault-tolerant networks, made of miniature wireless devices such as PDAs, cellular phones, Pocket PCs. They generally exhibit dynamic membership and topology,
i.e. nodes can join and leave the network, as well as fail, over time. In particular, their size may change drastically in a short time period. MANETs, as in common ad hoc groups, can be characterized by a not-hierarchical structure, such that their nodes are autonomous peers. Due to their ability to provide a wide range of services, their use can be appealing for both military and civilian applications. Further, they are expected to be employed for providing pervasive services, playing a crucial role in any aspect of everyday life, impacting the way people work, and interact with each other, and the way business, education, entertainment, and health-care are operating, depicting the vision of anytime ubiquitous computing.
However, MANETs introduce new security challenges, compared to traditional wired or cellular wireless networks, due to: dynamic topology, produced by mobility and change in the number and distribution of active nodes in the network; severe resource constraints, that call for power-efficient protocols; absence of a trusted infrastructure; necessity for group oriented distributed services and protocols. These challenges have stimulated considerable research interest in recent years, because ad hoc networks cannot be adopted widespread, without adequate security. In particular, features such as decentralized operation and dynamic membership, bring a bulk of challenges from the perspective of security, such as member authentication, access control, secure group communication, and secure routing, to cite a few.
In this paper, we present a distributed signature scheme for ad hoc networks, that improves over current solutions. Basically, a signature Sig(m) of a message m is an encryption of m using a secret key sk, that is Sig(m) = [m]sk. In practice, any signature scheme is generally applied to hashed values of messages, rather than to the messages themselves; the hashed values are computed by using a strong hash function, such as SHA-1. Here, for ease of presentation, we assume that m is an already such hashed value. The signature needs to be verifiable by using a public key pk, that is, for any valid signature Sig(m), it is required that [Sig(m)]pk = m holds.
In order to distribute a signature service, two tools are necessary: one for gener- ating the <sk, pk> pair, and one for distributing, among a set of distinct individuals, the ability to sign messages under sk. In the following, we assume the MANET to have associated an RSA key pair <sk, pk>. Current solutions, for distributing the signing ability to a group of individuals, are based on standard threshold schemes [4], in which sk is divided into a given number of shares that are distributed to as many cosigners.
The main limitation of standard threshold schemes is that they tolerate only a fix number of corruptions, regardless the dimension of the network. Indeed, in ad hoc settings, the members of the network typically exhibit physical vulnerabilities and they are exposed to attacks by adversaries able to compromise and/or corrupt likely

many of them. This is likely to occur for large-scale long-lived networks, because the probability to compromise a sufficiently large number (up to the threshold) of shares increases with the number of nodes. In order to limit the corruption power of a mobile adversary, generally proactive secret sharing [1] is employed. However, such a defence is not effective against silent adversaries that behave honestly, as long as they control a number of nodes below the threshold. We claim that, in order to cope with such a kind of adversary, it is necessary to increase the robustness of the secret sharing scheme employed, i.e. to increase the threshold. Unfortunately, typical secret sharing schemes found in the literature are affected by a major limitation, that is their robustness does not scale with the number of members in the network; in fact, increasing the robustness of these schemes generally requires several messages exchange among all the nodes of the network, that can be too expensive for MANET environments.
We propose a novel secret sharing scheme that additively shares sk among all the current members of the network, so that limited subgroups of them, provided with different shares, can act on behalf of the group, and collectively issue a signature. The scheme is basically a (t,t)-threshold scheme in which shares are replicated, and the value of the threshold t can be enlarged, in order to increase the robustness of the signature scheme. Each member belonging to the subgroup, separately and independently issues a partial signature, and all the partial signatures are combined afterwards by the applicant, in order to have a standard signature. Further, the dimension of the produced signature does not depend on the size of the subgroup, and it is possible to easily verify the signature correctness. Finally, it is possible to detect cosigners attempting to cheat.
The rest of the paper is organized as follows: in Section 2, we review the related literature. In Section 3, we propose the novel additive scheme for sharing an RSA secret key, and the share replication policy enforced. In Section 4, we present the protocols executed to issue a distributed signature and to increase the robustness of the scheme. In Section 5 we provide the proof of correctness of the signature scheme. In Section 6 we evaluate the efficiency of the scheme in terms of both space and computational requirements. Finally, in Section 7, we summarize the results.

Related Work
The general notion of threshold signature has been introduced in [4]. In [5] a non- robust and non-interactive RSA scheme is presented, with no security analysis. The scheme is extended in [8], with a new synchronized scheme, and further in [3] with a non-robust and non-synchronized scheme, in which the share size grows linearly with the number of cosigners. The linear growth of the share size limits its scal- ability. In [10, 9, 16] robust threshold RSA schemes that require synchronization are considered, and rigorously analyzed. These schemes are proactive threshold schemes [1], i.e. they periodically refresh the shares, without changing the signing key. The current best RSA-based scheme seems to be [16], however, if N is the RSA modulus and n is the number of cosigners, the size of the key used for the signature

generation is 2 log(nN ) and the memory requirement is 2n log(nN ). Some schemes such as [2, 11] are veriﬁable, i.e. they permit to check whether the partial signa- tures and the newly created shares have been correctly computed. In [22] a robust, verifiable, and non-interactive scheme based on RSA is presented; the size of any individual signature is bounded by a constant times the size of the RSA modulus; however it assumes a static corruption model: the adversary must choose which cosigners to attack at the very beginning of the attack. All the previous schemes assume a limited number of cosigners: this number is considered fixed, and the system needs to restart if it changes. In [14] a scalable threshold RSA signature scheme is proposed: new shares can be computed from existing shares but, in or- der to keep secret the initial shares, an expensive synchronized interaction among existing cosigners is required. Moreover, as it has been shown in [15], the scheme is not robust. A recent work [18] permits to avoid any interaction among the existing cosigners. Other works [19, 20, 13] propose solutions based on threshold signatures for ad hoc and peer-to-peer environments, however they do not address the prob- lem of increasing the threshold. In [7] a distributed signature scheme, specifically suitable for MANETs in which connectivity is partial, is presented. The scheme is robust against Byzantine adversaries, and does not need any trusted dealer; more- over, it is efficient, requiring little interaction for the signature issuance/verification phases.
Among the above schemes, only the two protocols in [9] permit to change the threshold, but this is achieved with multiple communication rounds, and needs the simultaneous on-line presence of all the cosigners. Another scheme that provides dynamic threshold is presented in [6]; the scheme does not require the intermediate reconstruction of the secret, and permits to transform a given threshold scheme into another, even between disjoint sets of cosigners; however, the scheme is not robust and compromised cosigners can distribute incorrect shares to newly admitted members. The same shortcoming can be referred to [9].

Distributed Signature Service
In this section, we assume the reader familiar with the RSA [17] signature scheme. The proposed additive secret sharing scheme is based on the following observation:
∀m ∈ N+,v ⊙ α mod m ≡ v mod m, provided that α is the neutral element with respect to the operation ⊙. Further, if r0 ⊙ r1 ⊙ ... ⊙ rt−1 ≡ α mod m, and ⊙ is commutative and associative, it follows that:
(v ⊙ r0) ⊙ ... ⊙ (v ⊙ rt−1) ≡ v ⊙ ... ⊙ v	mod m.
` t t˛im¸ es x
In Zm, by choosing ⊙ = +, than 0 is the neutral element. Hence, if we restrict
t to be a positive odd number, and bind the sign of v to the index i, we have:
Σt−1((−1)iv + ri) ≡ v mod m. In order to ensure that Σt−1 ri ≡ 0 mod m, it is
mod m, so that Σt−1 ri ≡ 0 mod m, by construction.

Hence, a secret RSA exponent d can be shared among t cosigners (t odd), by using shares of kind:
si ≡ (−1)id + ri	mod φ(N ),	i = 0,... ,t − 1
where r is an integer such that, if t is the required threshold to issue a signature, then:  t−1 ri ≡ 0 mod φ(N ). Moreover, in order to provide verifiability, each share si can be bound to a corresponding public veriﬁer :
wi ≡ (−1)i + e · ri	mod φ(N ),	i = 0,... ,t − 1
where e is the public RSA exponent, corresponding to d. Upon receipt of a share si, any cosigner can verify si’s correctness, by ensuring that (asi )e ≡ awi  mod N , for an arbitrary a. Indeed (asi )e ≡ (a(−1)id+ri mod φ(N ))e ≡ a(−1)i+e·ri mod φ(N ) ≡ awi mod N . Note that, as long as φ(N ) is unknown, wi does not provide any information about the corresponding share, or about the secret signing key.
Similar arguments hold by working in Z instead of Zm, that is performing the operations showed above without computing the modulus. In particular, by con- sidering Z, it is possible to increase the robustness of the scheme of an arbitrary value k, by means of the following share-split procedure: a) by using a round robin policy, select a share si to split; b) choose k as a positive odd number; c) ran-

domly select a share sj,j /= i; then, generate k + 1 new shares: s'
= si + u0,

st+g−1 = (−1)gsi + ug,g = 1,... , k, and an update factor s'' = si + uk+1, such that
Σk+1 uj = 0. Finally, replace si with s' and update sj with s' = sj + s''. At the
created, and two shares s', s' have been proactively updated. The corresponding
i	j
verifiers are set to: w' = wi + e · u0, wt+g−1 = (−1)g + e · ug,g = 1,... , k, and
' = wj + wi + e · uk+1. Note that we used equalities (=) instead of congruences
(≡) since we were operating in Z instead of Zm. It can be proved that, unless the adversary controls si, the robustness of the scheme increases of an arbitrary odd factor k ≥ 1, upon the completion of the share-split procedure. Note that this is performed by updating only two existing shares, namely si and sj, without facing interpolation over Zφ(N ) as in [14]. Moreover, the scheme can be extended to pro- vide a proactive renewal of all the shares: it is enough to update each share s by a
single update factor ui, where the update factors are chosen such that Σt−1 ui = 0,
and t is the current number of different shares.
The drawback of the proposed solution could be the growth of both the share and verifier size, because their values are computed over Z, instead of Zφ(N ). However, as we show in Section 6, this growth in size, that could have a severe impact on both communications and computations overhead, is very limited, making the solution feasible and efficient.
Unlike typical (t,n)-threshold schemes, in which each node is provided with a different share, here there are only t different shares, that are replicated: different cosigners are provided with the same share, according to the following distribution constraint: let x be the unique identifer of node Dx, si is distributed to Dx if and

only if:
F (x) ≡ i	(mod t)	(1)

where F is a hashing function mapping the set of cosigner identifiers into {0,... , t − 1}. As long as F is chosen uniformly at random from a universal hash family, the prob- ability that two cosigners have the same share is less than or equal to 1/t. This property is essential if we want the ad hoc network to provide an ubiquitous service: different shares will be evenly distributed among the nodes, then the service could be provided at each node’s locality. Basically, enforcing the distribution constraint (1)

partitions the set of cosigners into t classes, Ct,... ,Ct
, corresponding to shares

0	t−1
si, i = 0,... ,t − 1. With notation Ct, we denote the class of nodes corresponding
to the ith share, when t is the necessary number of shares for reconstructing the

signing key, and with Dji
we denote a member of Ct; in other words, each Dj
∈ Ct

is provided with si. Note that, in such a scheme, the minimum effort required to
the adversary for denying the service is to compromise all the replicas of a given share, that is the effort to corrupt all the nodes into a given class. Moreover, since the shares are distributed by enforcing (1), it can be shown that, as the number of cosigners increases, all the classes have asymptotically the same size.


Protocols
In this section we present the protocols executed by the nodes of the network in order to issue a signature, and to increase the threshold. We make standard assumptions: each member Dx of the group has a unique nonzero identifier x, such as a MAC address; Dx is connected via a broadcast communication channel to the neighbors in its transmission range; Dx can fail, dynamically join or leave the network, and has a source of randomness. Moreover, we assume that there is a routing layer for reliable message delivery. Messages are exchanged through secure channels.


Setup
We assume that the network is initialized by a trusted dealer D, that chooses a group secret key sk = (d, N ), and shares sk in such a way that any set of t nodes, one for each class, is able to issue a signature. For each share si, D also computes a corresponding veriﬁer wi that can be used for misbehavior detection. Note that D needs only to initialize t initial nodes, while other nodes can be initialized with the cooperation of that initial set. After the setup phase, the dealer is not necessary any longer. D performs the following actions:



Signature Issuance and Veriﬁcation
Once shares si, i = 0,... ,t − 1, have been distributed to n ≥ t initial cosigners, the signature service can start. Any applicant Dx can obtain a signature Sig(m) for a message m with the consent of at least t cosigners belonging to different classes. The protocol consists of two rounds of communication:


Note that each cosigner can perform its job asynchronously, i.e. it neither re- quires to coordinate with other nodes, nor to be aware of other node’s identities or on-line presence.

mod N , and checks for its correctness, by ensuring that Sig(m)e ≡ m mod N ; if the verification fails, Dx checks for correctness of each partial signature, ensuring that pSigj (m)e ≡ mwi mod N . The action to be taken once a partial signature is recognized as fake is out of the scope of this paper.
Threshold increase
In order to increase the threshold, new shares are generated from existing ones, by using the share-split procedure, described in section 3, and a fraction of cosigners

are redistributed into the newly created classes. The protocol that we describe here permits to increase the scheme’s robustness from value t to value t + k, with k a positive odd number, any time it is executed.
In accordance with a stated policy, a member Dji is designated to execute the split procedure on its share si. Dji distributes the new shares by means of the following protocol:


Upon receipt of the list and the new share-verifier pair, each Dli checks for the correctness of the received values, by ensuring that w' + w' +	k−1 wt+g = wi + wj,

its current share, accepting s' , otherwise it raises a policy dependant exception;
i
each Dlj performs the same checks as Dli , and if they succeed, each Dlj updates its
current share s' = sj + s'', otherwise it raises an exception.
j	i
Note that only those cosigners in Ct and in Ct take part in the protocol, that is,
i	x
in order to increase the threshold, only a fraction of the cosigners need to cooperate.
This permits to save network resources, by limiting the communication traffic and the overall computations performed by the nodes of the network.
At the end of the protocol, k new classes have been created, and they are filled

with those cosigners who acquired the new shares, i.e. the members in Ct
are

reallocated into Ct+k,Ct+k,... ,Ct+k	, where Ct+k replaces Ct. In order to evenly
i	t	t+k−1	i	i
reallocate those cosigners, Dji enforces the following share distribution: a member
with unique identifier l is assigned to class Ct+k, 0 ≤ j ≤ k−1, if and only if F (l) ≡ j
mod k + 1, where F is a hashing function mapping the set of node identifiers into
{0,... , k}, otherwise it is assigned to Ct+k. Note that, as long as the selection of the share to split is performed with a round robin policy, and the original threshold is known by all the members, it is always possible to determine the class that a given member fell into at a given time, by determining how many executions of the protocol have been performed up to that time.

Correctness
The scheme is correct, as shown by the following lemma.

Lemma 5.1 The cooperation among t cosigners belonging to different classes, where
t is the current threshold, allows to issue a valid signature.
Proof. We consider the necessary cooperation among the cosigners in two cases: a) at any time between the setup phase and the ﬁrst share-split; b) at any time between the qth and the (q + 1)th share-split, for an arbitrary q.
If no share-split occurred, t partial signatures, with t odd, issued by using different shares, are necessary and sufficient to issue a signature Sig(m). Indeed,
since Σt−1 ri ≡ 0 (mod φ(N )) by construction, and t is odd:

t−1

i=0

psigji (m) ≡
t−1

i=0

m(−1)id+ri ≡ md · m


t−1
i=0 i ≡ m	(mod N )= Sig(m).

Assume now that q share-splits, 1 ≤ q ≤ t, occurred, according to a round robin policy. Let uig ,g = 0,... ,k +1 (k odd), denote the random numbers chosen
to split share si; note that, for any i, Σk+1 ui =0 by construction; further, let s'
the new value of the proactively updated share sj. After q share-splits, the number of shares required to issue a signature is t' = t + qk. In particular, without loss of generality, assume there are:
t − 2q initial shares that are not affected by the share-splits: sh = (−1)hd + rh, h = 0,... ,t − 2q − 1;
q new shares: s' = (−1)id + ri + ui , i = t − 2q,... ,t − q − 1;
i	0

q initial shares, proactively updated: s'
= (−1)jd + rj + si + ui
, i ∈ [t −

2q,... ,t − q − 1], j = t − q,... ,t − 1;
qk new shares si = (−1)gsi + ui , i = t − 2q,... ,t − q − 1, g = 1,... , k. Let l be the index of these shares, running as: l = t,... ,t + qk − 1.
By combining t' partial signatures, issued by using different shares, since k is
odd and for any i, Σk+1 ui =0 by construction, then:


t+qk−1
t−2q−1
t−q−1
t−1
' t+qk−1

Y

c=0
psigjc (m) ≡
Y

h=0
msh
'
m i
i=t−2q
s
m
j=t−q
Y

l=t
msl ≡

t−2q−1
(−1)h d+rh
t−q−1
(−1)i d+ri+ui
t−1,t−q−1
(−1)j d+r +s +u
k+1
t−q−1,k
(−1)g si+uig

m
h=0
m
i=t−2q
0	m
j=t−q,i=t−2q
m	≡
i=t−2q,g=1

0t−2q−1
1  0 t−q−1
t−q−1
1  0 t−q−1
t−q−1
t−1	1

Y
h=0
m(−1)h d+rh A · @
Y
i=t−2q
ui0
Y
i=t−2q
m(−1)i d+ri A · @
Y
i=t−2q
msi
Y
i=t−2q
uik+1
Y
j=t−q
m(−1)j d+rj A ·

0 t−q−1  −
t−q−1,k
u

·	Y m
i=t−2q
i	Y
i=t−2q,g=1
m ig A ≡

t−1
(−1)h d+r
t−q−1,k+1
ui
d	Pt−1 r
(mod φ(N ))	d

m
h=0
h	m
i=t−2q,g=0
g ≡ m · m
h=0 h
≡ m	(mod N )= Sig(m).

The same arguments hold if q > t, considering that every share is equal to an initial share, added to a random factor uxg ,g ∈ [0,k+1] for some x ∈ [0, t+qk−1]. 

Efficiency
In this section we show that the number of extra bits required to support our scheme is limited by a small constant, with overwhelming probability, hence the solution is pretty feasible in resource-constrained environments such as MANETs, as well as in other ad hoc settings. Note that this analysis is necessary, because the operations for increasing the threshold are performed over the integers, not in modulus, then the share/verifier bit-length could increase with the number of share-splits performed, affecting both storage requirements and computational costs of our solution.
Share and verifier bit length. The analysis is based on three facts from elementary probability [12]. Let X be a random variable with uniform distribution

in the range [− N−1 , N−1 ], μX be its expected value and σ2
its finite variance.

2	2	X
Then:

Fact 6.1 μX
=0 and σ2
(N −1)2


12

Fact 6.2 for any constant a > 0, the random variable Z = aX has ﬁnite variance
2 = a2σ2 .
σ2
Fact 6.3 for any constant k > 0, P (|X − μX |≥ k) ≤  X .
Let us now consider q share-splits that affect a given share si. Without loss of generality, assume si is one of the initial shares provided in the initialization
phase by the trusted dealer. After q share-splits, the new share is s' = ±d + ri

(mod φ(N )) + u1 + u2 + ... + uq, where ri ∈
N −1
2
N −1
2
i
has been randomly

selected by the trusted dealer, and uj ∈ − N−1, N−1 ,j = 1,... , q, are the numbers
randomly selected by the designated member at the jth share-split. Indeed, the share could have value s' = ±m · d + r (mod φ(N )) + u1 + u2 + ... + uq,m ≥ 0, as effect of the split of other shares, in the event of si to be chosen for the proactive update. However, the expected value for m is 1. Let each uj be modeled by a


fact 6.1, it follows that μ	= 0 and σ2	= (N−1)2 . Let be U = Σq
U . By




since the random variables Uj are independent: σ2
2
U1+...+Uq
q	2
j=1 Uj

Σq	(N −1)2 = q(N−1)2 . Hence, by fact 6.3, for a given constant b > 0:



2
P (|U − μU | ≥ b · N )= P (|U | ≥ b · N ) ≤	U	 =
(b · N )2

q(N − 1)2


12b2N 2

q
< 12b2


(2)

We are interested in the probability that U is greater than bN and, in particular, we want this probability to be less or equal to a desired small value p. It turns out from (2) that the least value satisfying the inequality is b = 1  qp−1 . Note that, in
order to represent bN , at most [log2 bN | = [log2 b + log2 N | bits are necessary. On the other hand, the initial share si = d + ri (mod φ(N )) can be represented over at least [log2 N |− 2 bits. Hence, the necessary number of extra bits required for a

share by our solution is


  1  qp−1 
	
	


In order to figure out how (3) impacts on the length of the share, consider the following example: assume q = 230 share-splits affecting si have been performed, and p = 2−30. Note that, by assuming a round robin policy for selecting the share to split, the actual total number of performed splits is much higher. It follows that b = 229, hence 31 extra bits are enough for any practical use.
Similar arguments hold for verifiers.  After q splits of si, the corresponding
verifier is: w' = ±1+ e · ri (mod φ(N )) + e(u1 + u2 + ... + uq). Let be W =

q j=1
Wj = Σq
e · Uj = e · U . Note that e is a constant, then, by Fact 6.2, it

follows that σ2 = e2σ2 . Hence, by leveraging the results provided for the share,
for a given constant c:


2
P (|W − μW | ≥ c · N )= P (|U | ≥ c · N ) ≤	W	 <
(c · N )2
e2q


12c2
(4)

By choosing c = b · e, (2) and (4) yield the same value. It follows that, if e = 216 + 1, as usual in common settings [21], a practical number of extra bits required for the verifier by our solution is 2 + [log2 c| = 2 + [log2(be)| = 2 + [log2 b| + [log2 e| = 31 + 17 = 48.
Table 1 summarizes the overhead incurred for each protocol execution: prgs is the number of pseudo-random generations required; Applicant is any individual requesting a signature; Cosigner is any node participating to the signature issuance; Designated is a current cosigner delegated to execute the share-split; t is the current threshold; si is the current share for members in class Ct, and wi is the corresponding
verifier; |Ct| is the size of Ct; k is the number of newly created shares (that is,
i	i
classes) at each share-split. We assume that any number a can be expressed in at
most [log2 a| bits, and the RSA exponentiations are performed with the Square- and-Multiply algorithm.

Table 1
Overhead sustained by nodes in different roles.

Conclusions
In this paper, we have presented a secure, adaptive, robust and efficient mecha- nism to provide distributed signatures in ad hoc groups. In particular, we have proposed a dynamically adjustable signature threshold scheme. This feature, that allows to adapt to an increasing level of threat the ad hoc group is subject to, has been implemented by leveraging a peculiar property of RSA cryptosystem. Further, all the features of the proposed mechanism are achieved requiring just local com- munications and very little overhead, in terms of both memory and computations requirements. These appealing characteristics make these protocols particularly suitable for the mobile ad hoc environment, and appealing even for resource con- strained devices. Finally, the proposed scheme allows to detect nodes that attempt to disrupt the distributed signature service by providing a non-valid contribution to the computation.

References
Canetti, R., R. Gennaro, A. Herzberg and D. Naor, Proactive security: Long-term protection against break-ins, RSA CryptoBytes 3 (1997), pp. 1–8.
Chor, B., S. Goldwasser, S. Micali and B. Awerbuch, Verifiable secret sharing and achieving simultaneity in the presence of faults, in: Proceedings of the 26th IEEE Symposium on Foundation of Computer Science: FOCS’85, 1985, pp. 383–395.
De Santis, A., Y. Desmedt, Y. Frankel and M. Yung, How to share a function securely, in: Proceedings of the 6th ACM Symposium on the Theory of Computing: STOC’94, 1994, pp. 522–533.
Desmedt, Y., Society and group oriented cryptography: A new concept, in: Advances in Cryptology– CRYPTO’87, A Conference on the Theory and Applications of Cryptographic Techniques on Advances in Cryptology, Lecture Notes in Computer Science 293 (1988), pp. 120–127.
Desmedt, Y. and Y. Frankel, Shared generation of authenticators and signatures, in: J. Feigenbaum, editor, Advances in Cryptology–CRYPTO’91, Lecture Notes in Computer Science 576 (1992), pp. 457– 469.
Desmedt, Y. and S. Jajodia, Redistributing secret shares to new access structures and its applications, Technical Report ISSE TR-97-01, George Mason University (1997).
Di Crescenzo, G., R. Ge and G. R. Arce, Improved topology assumptions for threshold cryptography in mobile ad hoc networks, in: SASN ’05: Proceedings of the 3rd ACM workshop on Security of ad hoc and sensor networks (2005), pp. 53–62.
Frankel, Y. and Y. Desmedt, Parallel reliable threshold multisignature, Technical Report TR-92-04-02, Department of EE & CS, University of Wisconsin-Milwaukee, Milwaukee, WI, USA (1992).
Frankel, Y., P. Gemmell, P. Mackenzie and M. Yung, Optimal resilience proactive public-key cryptosystems, in: Proceedings of the 38th Annual Symposium on Foundations of Computer Science: FOCS’97, 1997.
Frankel, Y., P. Gemmell, P. Mackenzie and M. Yung, Proactive RSA, in: Advances in Cryptology: CRYPTO’97, 1997.
Gennaro, R., T. Rabin, S. Jarecki and H. Krawczyk, Robust and efficient sharing of rsa functions, Journal of Cryptology 13 (2000), pp. 273–300.

∗The overhead 1.5t(log e + log wi) is sustained only if the verification of the signature fails, in order to check for the correctness of the partial signatures.

Haigh, J., “Probabilty Models,” Springer Verlag, 2002.
Jarecki, S. and N. Saxena, Further simplifications in proactive rsa signatures., in: TCC 2005: Theory of Cryptography, Second Theory of Cryptography Conference, Lecture Notes in Computer Science 3378 (2005), pp. 510–528.
Luo, H., J. Kong, P. Zerfos, S. Lu and L. Zhang, URSA: Ubiquitous and Robust Access Control for Mobile Ad-hoc Networks, IEEE/ACM Transactions on Networking (ToN) 12 (2004), pp. 1049–1063.
Narasimha, M., G. Tsudik and J. H. Yi, On the utility of distributed cryptography in p2p and manets: The case of membership control, in: ICNP ’03: Proceedings of the 11th IEEE International Conference on Network Protocols (2003), p. 336.
Rabin, T., A simplified approach to threshold and proactive RSA, in: H. Krawczyk, editor, Advances in Cryptology: CRYPTO ’98, Lecture Notes in Computer Science 1462 (1998).
Rivest, R., A. Shamir and L. Adleman, A method for obtaining digital signatures and public-key cryptosystems, Communications of the ACM 21 (1978), pp. 120–126.
Saxena, N., G. Tsudik and J. Yi, Efficient node admission for short-lived mobile ad hoc networks., in:
Proceedings of the 13th International Conference on Network Protocols: ICNP’05, 2005, pp. 269–278.
Saxena, N., G. Tsudik and J. H. Yi, Admission control in peer-to-peer: design and performance evaluation, in: SASN ’03: Proceedings of the 1st ACM workshop on Security of ad hoc and sensor networks (2003), pp. 104–113.
Saxena, N., G. Tsudik and J. H. Yi, Identity-based access control for ad hoc groups., in: Information Security and Cryptology - ICISC 2004, 7th International Conference, 2004, pp. 362–379.
Schneier, B., “Applied Cryptography: Protocols, Algorithms and Source Code in C,” John Wiley & Sons, Inc., 1996, 2nd edition, iSBN 0-471-12845-7.
Shoup, Practical threshold signatures, in: B. Preneel, editor, Advances in Cryptology: EUROCRYPT 2000, Lecture Notes in Computer Science 1087 (2000), pp. 207–220.
