

Electronic Notes in Theoretical Computer Science 264 (2010) 155–175
www.elsevier.com/locate/entcs

Structural Operational Semantics and Modal Logic, Revisited
Bartek Klin1
University of Cambridge, Warsaw University

Abstract
A previously introduced combination of the bialgebraic approach to structural operational semantics with coalgebraic modal logic is re-examined and improved in some aspects. Firstly, a more abstract, conceptual proof of the main compositionality theorem is given, based on an understanding of modal logic as a study of coalgebras in slice categories of adjunctions. Secondly, a more concrete understanding of the assumptions of the theorem is provided, where proving compositionality amounts to finding a syntactic distributive law between two collections of predicate liftings.
Keywords: structural operational semantics, modal logic, coalgebra


Introduction
Compositionality of process equivalences is an important issue in the theory of Structural Operational Semantics (SOS; see e.g. [1,7]). Compositionality proofs for specific languages are often tedious, therefore plenty of meta-results have been proved that guarantee the compositionality of various equivalences by subjecting operational specifications to certain syntactic restrictions, called formats.
The process of inducing well-behaved transition systems from SOS specifications has been explained at the abstraction level of coalgebras, in the bialgebraic frame- work of [28]. There, a well-known SOS format called GSOS was understood as a type of distributive laws between behaviour and syntax endofunctors. The fact that LTS bisimilarity on GSOS-induced specifications is compositional, was explained at that level of generality.
One way to extend that approach to equivalences other than bisimilarities is to understand them as logical equivalences for some modal logics, and use a general coalgebraic approach to modal logic as developed, e.g., in [4,5,10,12,16,18,19,23,27].

1 This work was supported by EPSRC grant EP/F042337/1. Email: klin@mimuw.edu.pl

1571-0661 © 2010 Elsevier B.V. Open access under CC BY-NC-ND license.
doi:10.1016/j.entcs.2010.07.019

In [15,17], such a combination of the bialgebraic approach with coalgebraic modal logic was presented. To prove that an equivalence defined by some logic on a transi- tion system induced from an SOS specification is a congruence, one needs to equip logical formulas with a coalgebraic behaviour, and exhibit a “logical distributive law” of logical syntax over that behaviour that reflects the distributive law model- ing the SOS specification.
Looking from some perspective, neither mathematical economy nor practical usability of [15,17] was entirely satisfactory. Firstly, the proof of the main composi- tionality result, albeit elementary, involved plenty of diagram chasing and inductive proofs, and in general was not very illuminating. Second, perhaps more painful deficiency, was that no intuitive general understanding of coalgebraic behaviour for logical formulas was provided. Although logical distributive laws for some specific kinds of logical behaviour were presented in an appealing, SOS-like manner, no concrete understanding of such laws for other types of behaviour was found. Also, no guidelines to finding behaviour functors for logical formulas were given, other than wild guessing. Checking that a candidate logical distributive law was correct involved heavy calculations of complex natural transformations, far removed from common understanding of formulas and processes.
This paper is an attempt to remove these two deficiencies to some degree. First, a more abstract, conceptual proof of the main compositionality theorem of [15] is provided (and the theorem is mildly generalized in the process). To this end, the interpretation of modal logic in coalgebras is understood as a functor from the category of coalgebras to a slice category of an adjunction. The compositionality theorem then follows from lifting that functor to structures that involve process syntax, via an adjoint lifting theorem.
Secondly, a concrete understanding of the compositionality theorem is provided for the important example where both processes and formulas live in the category of sets. Coalgebraic behaviour for formulas is explained in terms of predicate lift- ings [22,27], and logical distributive laws are syntactic distributive laws between two collections of liftings. Proving compositionality of a logical equivalence amounts to finding a suitable collection of liftings for process syntax, together with a set of equations that involve those liftings. Since the notion of predicate lifting is well studied and understood, this formulation should hopefully aid the understanding of our bialgebraic approach to logical compositionality.
The paper is structured as follows. In Sections 2 and 3, the bialgebraic approach to SOS and coalgebraic modal logic are briefly recalled. Section 4 studies endofunc- tors, algebras and coalgebras in slice categories of adjunctions, and culminates in a proof of the main compositionality theorem. Section 5 provides a concrete interpre- tation of the theorem in terms of predicate liftings. Finally, Sections 6 explains how both deficiencies mentioned above persist to some degree in the present formulation. Some proofs, not essential for the main line of reasoning, are relegated to Appendix. Parts of the paper might be of interest also to those readers who do not care much about compositionality or SOS. For an explanation of coalgebraic modal logic in terms of (co)algebras in slice categories of adjunctions, without any involvement

of process syntax, it is enough to read Sections 3, 4.1 and 4.2.
The reader is expected to be acquainted with basic category theory ([21] is a standard reference) and with the coalgebraic approach to theory of systems [26].
Acknowledgment. The author is grateful to Ichiro Hasuo for many interesting discussions.
SOS and distributive laws
In the context of Structural Operational Semantics, transition systems of various kinds are defined by structural induction using inference rules, and have closed terms over some signature as states. For example, given a fixed set A of labels, the set of rules



a a→ 0
x a→ x'	y a→ y'


x ⊗ y a→ x' ⊗ y'
(1)

(where a ranges over A) inductively defines a labeled transition system (LTS) on the set of closed terms over the grammar:
t ::= 0 | a | t ⊗ t	(a ∈ A).	(2)

In [28], this situation was expressed in the coalgebraic setting with the use of dis- tributive laws and bialgebras for them. For example, rules (1) define a natural transformation λ : ΣB =⇒ BΣ (see e.g. [17] for a gentle explanation of this con- struction), where Σ is the polynomial endofunctor on Set corresponding to the grammar (2), and B = (Pω−)A, where Pω is the finite powerset endofunctor; B- coalgebras are image-finite A-labeled transition systems (LTSs).
For any endofunctors Σ and B on a category C, a transformation as above, called a distributive law of Σ over B, induces an endofunctor Σλ on the category B-coalg of B-coalgebras, and an endofunctor Bλ on the category Σ-alg of Σ-algebras, acting on objects as follows:
Σ ( X  h		 B X ) = ΣX  Σh  ΣB X  λX  B ΣX Bλ( ΣX	g		 X ) = ΣBX λ	 B ΣX Bg  B X

and as Σ (resp. B) on morphisms. Clearly Σλ lifts Σ and Bλ lifts B along the respective forgetful functors UB : B-coalg →C and U Σ : Σ-alg → C.
It is easy to see that a Σλ-algebra, or a Bλ-coalgebra, consists of a Σ-algebra g
and a B-coalgebra h with the same carrier, so that the diagram:
ΣX   g	 X   h  B X

Σh	Bg
Σ J 	 
(3)

BX	λX	BΣX
commutes.	Such structures are called λ-bialgebras (with carrier X), and a λ- bialgebra morphism is a map in C between the respective carriers that is simul-

taneously an algebra morphism and a coalgebra morphism; this defines a category λ-bialg of λ-bialgebras. There is an isomorphism of categories and a commuting square of forgetful functors:
λ-bialg UΣλ B -coalg

λ-bialg ∼= Σλ-alg ∼= Bλ-coalg

UBλ
Σ

UB
J 	 J 
(4)

-alg	C.
U

If g is an initial Σ-algebra, then there is a unique B-coalgebra h such that (3) commutes, defined as the unique Σ-algebra morphism from g to Bλ(g). The result is an initial λ-bialgebra, and if λ corresponds to an SOS specification as in (1), then h corresponds to the transition system induced by the specification.
Dually, if a final B-coalgebra exists, it extends uniquely to a final λ-bialgebra.
This immediately implies:

Proposition 2.1 For any λ-bialgebra ΣX	g	 X 
h  B X , the unique coalgebra

morphism from h to the ﬁnal B-coalgebra is a Σ-algebra morphism from g.
When C = Set, two elements x, y ∈ X for a given coalgebra h : X → BX are called observationally equivalent if they are identified by some coalgebra morphism. In particular, if final B-coalgebras exist, observational equivalence on h is the kernel relation of the final coalgebra morphism from h. Thus Proposition 2.1, applied to initial bialgebras, means that observational equivalence on the transition system induced by a specification is a congruence, if the specification corresponds to a distributive law λ. 2
The practical applicability of Proposition 2.1 as stated here is rather limited, since few interesting examples actually correspond to λ as above. Already in [28] more general laws were studied, involving the free pointed endofunctor Id + Σ and the free monad Σ∗, and the cofree copointed endofunctor Id×B and cofree comonad Bω (assuming they exist). In particular, distributive laws of Σ∗ over Id × B corre- spond bijectively [20] to natural transformations λ : Σ(Id × B) =⇒ BΣ∗, and for B = (Pω−)A, these correspond [2] to SOS specifications in the well-studied GSOS format [3]. Similarly, distributive laws of Id + Σ over Bω correspond to a format called safe-ntree in [28]. Proposition 2.1 is proved without much change for each of these more expressive laws; in fact, one does not need to prove each case separately, as each type of laws in question induces distributive laws of the monad Σ∗ over the comonad Bω along the lines of [20], and Proposition 2.1 works for such laws as well, with essentially the same proof.
In this paper, only simple distributive laws λ : ΣB =⇒ BΣ are considered. This is mainly to simplify the presentation and save space in the technical development in Section 4. The general case of distributive laws of monads over comonads is dealt with in an entirely analogous manner, but with additional checks to ensure

2 In [28], the congruence result is proved for coalgebraic bisimilarity [26] rather than observational equiv- alence; for that, the additional assumption of B preserving weak pullbacks was needed.

the existence of certain (co)free (co)monads and the compatibility of (co)units and (co)multiplications, and is better left to an extended version of this paper.

Coalgebraic modal logic
An abstract approach to modal logics for coalgebras, based on adjunctions of con- travariant functors, has attracted considerable attention (e.g., [4,5,10,12,16,18,27]). Assume an adjunction Sop E T : Cop → Ð, with the intuition that objects of Ð are sets (or structures) of formulas, and objects of C are sets (or structures) of processes or states. For an endofunctor B on C, a coalgebraic modal logic for B-coalgebras is given by an endofunctor L on Ð (the logical syntax), and a natural transforma- tion ρ : LT =⇒ TBop (called a connection). Under the assumption that an initial L-algebra a : LΦ → Φ exists (intuitively, it is an algebra of logical formulas), the interpretation of logic (L, ρ) on a given coalgebra h : X → BX is obtained by transposing along the adjunction Sop E T the unique L-algebra morphism s from a to Th ◦ ρX, as in the diagram:

LTX ¸L,s   LΦ
ρX

BX,,
J 
TBX
∼= a
(5)

h
X 	 SΦ 
Th 
J ¸,_ _ _J_ 

sb	TX	s	Φ

where the left part is drawn in C and the right part in Ð.
Take for example C = Ð = Set and S = T = 2− (where 2 = {tt, ff}), and B = (Уω—)A. The trace fragment of Hennessy-Milner logic for B-coalgebras (i.e. LTSs) has syntax described by the grammar φ ::= T | ⟨a⟩φ that corresponds to the endofunctor LΦ = 1 + A × Φ, and its standard semantics corresponds to ρX : L2X → 2BX defined by:

ρX(T)(b) = tt always	(6)
ρX(⟨a⟩φ)(b) = tt ⇐⇒ Ey ∈ b(a). φ(y) = tt

for any X. It is straightforward to check that (the kernel relation of) the interpre- tation of this (L, ρ) on a B-coalgebra is the trace equivalence on it.
When searching for a logic for a given B, one may often restrict attention to endofunctors of a certain shape, without losing any generality. We now briefly recall an analysis from [16]. Connections ρ : LT =⇒ TBop are in bijective correspondence with natural transformations ρ˜ : L =⇒ TBopSop by ρ˜ = ρSop ◦Lη, where η : IdD → TSop is the unit of Sop E T . If one insists on L being finitary, then ρ˜ factors through the finitary restriction of TBopSop. The latter is defined by a coend formula; without losing generality one may replace the coend with a coproduct and, for Ð = Set,

require a natural transformation

ρ˜ : L =⇒   TBSn × (—)n.
n∈N

For S = T = 2− and n ∈ N, elements of TBSn are functions β : B(2n) → 2, which we call n-ary B-modalities. (By Yoneda Lemma, these bijectively correspond to natural transformations βY : (2−)n =⇒ 2B−, i.e., polyadic predicate liftings of [27].) As a result, a finitary L with ρ can be presented as a collection of B-modalities: a

family (Ln)n∈N
of sets Ln
⊆ 2B2n represents the polynomial endofunctor

L =   Ln × (—)n,	(7)
n∈N

with ρ : L(2−) =⇒ 2B− defined by copairing all predicate liftings βY : (2−)n =⇒ 2B− for each n ∈ N and β ∈ Ln.
For example, the trace logic for B = (Уω—)A is represented by the following collection of modalities: L0 = {T}, L1 = {⟨a⟩ | a ∈ A}, Ln = ∅ for n > 1, where T : B1 → 2 and ⟨a⟩ : B2 → 2 are defined by:

T(b) = tt always,	⟨a⟩(b) = tt ⇐⇒ tt ∈ b(a).	(8)

We mention in passing that this approach to logics suffers from practical expres- sivity problems similar to those mentioned in Section 2. For example, although a version of finitary Hennessy-Milner logic [8] for bisimilarity can be defined this way, it is rather unwieldy, with infinitely many modalities of arbitrary arities (see [16]). This is because logics based on S = T = 2− lack in-built support for propositional connectives, which must then be encoded as parts of complex modalities.
One way to avoid this problem is to change the adjunction Sop E T in question
(see [12] for examples). Another way is to consider, by analogy to distributive laws and SOS, more general types of connections. For example, one can allow ones like ρ : LT =⇒ T (Id × B)op, whereby propositional connectives such as ∧ can easily be defined as simple modalities. One can even consider connections such as
ρ : LT =⇒ T (Bω)op to describe e.g. Hennessy-Milner logic for weak bisimilarity.
Again, in this paper only simple connections ρ : LT =⇒ TB are considered; the issue of coalgebraic modal logics based on more complex connections is left for a separate study.

Compositionality for logical equivalences
Our main technical goal is to modify Proposition 2.1 to deal with logical equiva- lences rather than with observational equivalence. We shall prove (in Theorem 4.6)

that under certain assumptions, for any λ-bialgebra ΣX	g	 X 
h  B X , the in-

terpretation of logic (L, ρ) on h is a Σ-algebra morphism from g. To formulate the theorem and its proof, we introduce some basic notions and results regarding

(co)algebras on slice categories of adjunctions. To structure the development to some degree, we shall begin with slice categories of functors, and later see what additional structure the adjunction Sop E T introduces.

Slice categories
For a functor T : Cop → Ð, the slice category (Ð↓T ) has:
as objects, triples ⟨Φ, X, s⟩ with Φ ∈ Ð, X ∈C and s : Φ → TX in Ð,
as maps from ⟨Φ, X, s⟩ to ⟨Ψ, Y, r⟩, pairs (g, f ) with g : Φ → Ψ in Ð and f : Y →
X in C such that
Φ  	s    T X 

g	Tf 
J	 J 
(9)

Ψ	r	TY 
commutes.
There are obvious projection functors, denoted Π1 : (Ð↓ T ) → Ð and Π2 : (Ð↓ 
T ) → Cop.
If an initial object 0 in Ð exists, it determines a full embedding 0→ : Cop → (Ð↓ T ) defined on objects by 0→(X) = ⟨0, X, 0 : 0 → TX⟩, where the arrow 0 is unique by initiality, and on arrows by 0→(g) = ⟨id0, g⟩. It is easy to verify that:
Proposition 4.1 0→ is left adjoint to Π2 : (Ð ↓ T ) → Cop, and the unit of the adjunction is the identity natural transformation.	 
Sliced endofunctors. Assume endofunctors B : C → C and L : Ð → Ð, and a natural transformation ρ : LT =⇒ TBop.
These ingredients define an endofunctor on (Ð↓T ), denoted ρ^, as follows:
on objects, ρ ⟨Φ, X, r⟩ = ⟨LΦ, BX, ρX ◦ Lr⟩
on maps, ρ ⟨g, f⟩ = ⟨Lg, Bf⟩.
It is easy to check that this is well-defined and functorial. Clearly ρ lifts L along Π1, in the sense that Π1 ◦ ρ = L ◦ Π1. Similarly, ρ lifts Bop along Π2.
Endofunctors on (Ð↓ T ) that arise in this way will be called sliced (by ρ). Not every endofunctor on (Ð↓ T ) is sliced in general, even if T is well-behaved (for a counterexample, see the Appendix). However:
Proposition 4.2 Consider an endofunctor K : (Ð↓ T ) → (Ð↓ T ) such that for some L : Ð → Ð and B : C → C, K lifts L along Π1 and Bop along Π2. Then K is sliced in a unique way.
Proof. See the Appendix.	 
It immediately follows that sliced endofunctors are closed under composition. However, a more direct proof is possible: for ρ : LT =⇒ TBop and ρ' : L'T =⇒
T (B')op, it is easy to check that the composite endofunctor ρ^ρ^' is sliced by:
ρ(B')op ◦ Lρ' : LL'T =⇒ T (BB')op.	(10)

Sliced natural transformations. Assume connections ρ : LT =⇒ TBop and ρ' : L'T =⇒ TB'op. Any two natural transformations α : L =⇒ L' and β : B' =⇒ B such that
LTS   ρ  zT B  op

αT	Tβop
'cz	 z c'opz
(11)

L T	ρ'  TB 
commutes, give rise to a natural transformation α ② β : ρ^ =⇒ ρ^' defined by:
α ② β⟨Φ,X,s⟩ = ⟨αΦ, βX ⟩ .	(12)
Not every transformation between sliced endofunctors is of this form (for a coun- terexample, see the Appendix). However, in Section 4.2 we shall show that this is the case if T has a left adjoint.
Algebras. Given a connection ρ : LT =⇒ TBop, a ρ-algebra is, equivalently, an L- algebra g : LΦ → Φ in Ð, a B-coalgebra h : X → BX in C, and a map s : Φ → TX, such that the diagram
LΦ   Ls  LT X  ρX  T B  X

g	Th 
J	 J 
(13)

Φ	s	TX 
commutes in Ð. Moreover, ρ-algebra morphisms are easily seen to be pairs of an L-algebra morphism and a B-coalgebra morphisms. In particular, there are evident projection functors Π1 : ρ-alg → L-alg and Π2 : ρ-alg → (B-coalg)op.
Let us pause for a moment to reflect on the meaning of ρ-algebras: they are B-coalgebras h (systems) together with L-algebras g (logical theories) interpreted in them (via s). For example, if C = Ð = Set and S = T = 2−, the function s : Φ → TX in the carrier of a ρ-algebra is just a relation between Φ and X. For B = (Уω—)A and (L, ρ) as in (6), the equivalence relation on X defined by this relation is always contained in trace equivalence on h, and coincides with it if g is initial. Morphisms of ρ-algebras reflect these equivalence relations, implicitly present in their carriers. This suggests that when one wants to study coalgebras “up to” some logical equivalence, and when the task of finding an explicit coalgebraic presentation of these “up to” structures (such as in [11]) seems difficult or simply not worthwhile, one may try to resort to implicit modeling of logical equivalences by theories interpreted in coalgebras; this view is advocated e.g. in [23], and the present paper may be considered as an example application of it. One may argue that, just as structural operational semantics is a study of coalgebra in categories of algebras, coalgebraic modal logic is a study of (co)algebra in slice categories.
Back to the formal development: an alternative reading of (13) is that s is
a L-algebra morphism.	In other words, ρ^-algebras are morphisms between L-
algebras of a certain shape. To formalize this, observe that ρ induces a functor T : (B-coalg)op → L-alg defined by T ( X   h  B X ) = LTX  ρX  T B  X  T h  T X on B-coalgebras, and as T on B-coalgebra morphisms.



Proposition 4.3 ρ^-alg ∼= (L-alg ↓T ).
Proof. We have already essentially noticed the correspondence on objects; mor-
phisms are equally easy.	 
Corollary 4.4 If an initial L-algebra exists, then the projection functor Π2 : ρ-alg → (B-coalg)op has a left adjoint, and the unit of the adjunction is the identity natural transformation.
Proof. Use Proposition 4.3 and apply Proposition 4.1. Given an initial L-algebra a, the left adjoint will be denoted a→.	 
Note that the composition of a→ with the forgetful functor from ρ^-alg:
a→	z 

(B-coalg)op ¸⊥ ,
Π2
ρ^-alg  U  (Ð ↓T )

corresponds almost entirely to the interpretation of coalgebraic modal logic in B- coalgebras, as constructed in (5). Indeed, the only step missing in this functorial presentation is the transposition of the semantic map s from the initial L-algebra. For this final step, obviously, it is crucial that the functor T has a left adjoint; we shall now proceed to develop our theory further with this additional assumption.

Slice categories of adjunctions
In this section, we shall assume that T : Cop →Ð has a left adjoint Sop : Ð → Cop. The unit and counit of the adjunction Sop E T will be denoted η : Id =⇒ TSop and ϵ : SopT =⇒ Id respectively. Obviously then T op : C → Ðop is left adjoint to S : Ðop → C, and ηop : T opS =⇒ Id and ϵop : Id =⇒ ST op are the counit and the unit of the adjunction T op E S. This adjoint situation means that there is a bijection
C(X, SΦ) ∼= Ð(Φ,TX)
natural in X ∈ C and Φ ∈ Ð; we shall abuse notation and denote both sides of this bijection by —b. A defining property of adjunctions is the isomorphism of
slice categories: (Ð↓ T ) ∼= (C↓S)op (the isomorphism maps an object ⟨Φ, X, s⟩ to
 X, Φ, sb ).
Coalgebraic modal logic as a functor. One immediate consequence of the adjunction assumption is that one can represent the entire modal logic interpretation construction (5) as a functor from the category of B-coalgebras:


g→
op z	U ρb
¸,
Π2
 (Ð ↓T ) ∼= (C↓S)op	(14)

However, the most useful consequences of that assumption appear when one decides to study coalgebras for sliced endofunctors on (Ð↓T ).
Coalgebras. In the situation considered in Section 4.1, categories of coalgebras

for sliced endofunctors have, in general, considerably less structure than those of algebras.
Consider endofunctors Σ on C and Γ on Ð, and a connection ζ : ΓT =⇒ T Σop
as in Section 4.1. A ζ-coalgebra is a Γ-coalgebra h : Φ → ΓΦ in Ð, a Σ-algebra
g : ΣX → X in C, and a map s : Φ → TX, such that the diagram

ΓΦ  Γs  ΓT X  ζX  T Σ X

,,	,,
h	Tg 
(15)

Φ	s	 T X 

commutes in Ð, and a ζ-coalgebra morphisms is a pair of a Γ-coalgebra morphism and a Σ-algebra morphism. This gives projection functors Π1 : ζ-coalg → Γ-coalg and Π2 : ζ-coalg → (Σ-alg)op.
In general, contrary to the situation of sliced algebras, the diagram (15) can- not be read as a coalgebra morphism (in [23], it was called a “twisted coalgebra morphism”). As a result, no property analogous to Proposition 4.3 holds for ζ- coalgebras in general. However, additional structure appears when we assume a left adjoint Sop E T . Indeed, then connections ζ : ΓT =⇒ T Σop are in bijective correspondence with their adjoint mates [14] ζ٨ : ΣS =⇒ SΓop, defined by trans- posing ζSop ◦ Γη : Γ =⇒ T ΣopSop. It is straightforward to check that ζ٨ coincides
with (ζ)op along the isomorphism (C↓S) ~= (Ð↓T )op. In particular, this implies an
isomorphism
ζ^-coalg ~= (ζ^٨-alg)op.	(16)
Natural transformations are sliced. Finally, the fact that T has a left adjoint implies that all natural transformations between sliced endofunctors are sliced. In- deed, consider any ρ : ΓT =⇒ T Σop and ρ' : Γ'T =⇒ T Σ'op.
Proposition 4.5 If Sop E T then natural transformations κ : ρ =⇒ ρ' are in one- to-one correspondence with pairs ⟨α : Γ =⇒ Γ',β : Σ' =⇒ Σ⟩ such that Tβop ◦ ρ = ρ' ◦ αT as in (11).
Proof. (12) shows how to define κ from α and β. For the other direction, see the Appendix.	 

Sliced distributive laws and compositionality
We now proceed to the study of bialgebras for distributive laws between sliced endofunctors.
Sliced distributive laws. For an adjunction Sop E T : Cop → D, consider endo- functors B, Σ on C and L, Γ on Ð, together with connections ρ : LT → TBop and ζ : ΓT =⇒ T Σop that define sliced endofunctors ρ, ζ on (Ð↓T ).
Now assume a distributive law of ρ over ζ, i.e., a natural transformation κ : ρζ =⇒ ζρ. By (10), both ρζ and ζρ are sliced, and further by Proposition 4.5, κ is of the form κ = χ ② λ (see (12)) for some distributive laws χ : LΓ =⇒ ΓL

and λ : ΣB =⇒ BΣ such that the hexagon of natural transformations commutes (cf. (11)):

LΓT
χT
 Lζ   zLT Σ
op  ρΣop zT ( BΣ)op
T λop

(17)

cz	 z 
op 	 zT ( Σ czop

ΓLT Γρ
ΓTB 
ζBop
B)  .

Sliced bialgebras. As in Section 2, the law κ defines endofunctors ρκ on ζ-coalg and ζκ on ρ-alg, with an isomorphism of categories and a commuting square of forgetful functors (cf. (4)):
κ-bialg Uρbκ ζ^- coalg

κ-bialg ~= ρ^κ-alg ~= ζ^κ-coalg
Uζbκ			Uζb
(18)

J 
ρ^-alg	U ρb
J 
Ð↓T ).

To convey some intuition, it might be useful to provide a more concrete descriptions of κ-bialgebras. Each of these consists of a χ-bialgebra LΦ  k	 Φ  l  ΓΦ  , a λ-

bialgebra ΣX	g	 X 
diagram:
h  B X and an arrow s : Φ → TX in Ð, such that the

LΦ 	k	 Φ	l	 ΓΦ 

Ls
J	 
s	Γs
	 J	  ¸, 	J 
(19)

LTX ρX
TBX Th 
TX	Tg 
T ΣX
X
ΓTX 

commutes. Morphisms of κ-bialgebras are pairs of a χ- and a λ-bialgebra mor- phisms; in particular, there is an evident projection functor, which we will denote Π2 : κ-bialg → (λ-bialg)op.
Lifting coalgebraic modal logic. Our immediate goal now is to exhibit a left adjoint to Π2. Note that the bottom row of (19) is not a χ-bialgebra, so κ-bialg is not easily a slice category and the simple tactic of using Proposition 4.1 cannot be used. Instead, adjoint lifting can be used in the following way.
Since κ acts as λ on C-components (see (12)), it is straightforward to check that ζκ acts as Σλ on the B-coalgebra components of ρ-algebras and their morphisms; formally, Π2 ◦ ζκ = (Σλ)op ◦ Π2 : ρ-alg → (B-coalg)op. This defines a lifting of Π2 to a functor from ζκ-coalg to (Σλ-alg)op as in (A.1); it is straightforward to check that this lifted functor coincides with Π2, which justifies its name. We can now apply Proposition A.1 to



(λ-bialg)op ¸Π2,
(UΣλ )op
κ-bialg
Uζbκ

(B	J  op ¸,  ρ J 

-coalg)
Π2
^-alg



and obtain a left adjoint a→ E Π2. Combined with (18) and (16), this completes a

lifting of the coalgebraic modal logic semantics (14) as in the diagram:


 a→		ρb

(λ-bialg)op  ⊥	 κ-bialg  U κ  ζ^- coalg
∼= (ζ^٨-alg)op

Π2
(UΣλ )op
Uζbκ
Uζb
(U ζcs )op
(20)

J	a→	z J	J	J 

(B-coalg)op ¸⊥,
Π2
ρ^-alg

U ρb
 (Ð ↓T )	∼=	(C↓S)op

Note that, by Corollary 4.4 and by the remark after Proposition A.1, the monad Π2 ◦ a→ is (naturally isomorphic to) identity. This, together with the evident com- muting square of forgetful and projection functors:


(UB
)op

(λ-bialg)op   λ	 (Σ -alg)op
,,	,,¸,¸¸¸ op


κ-bialg





U ρbκ

Π2
 ζ^- coalg
¸¸¸Π¸1
¸¸
∼= (ζ^٨-alg)op

means that the top row of (20) commutes with (the opposites of) forgetful functors from λ-bialg and ζ٨-alg to Σ-alg. Thus we arrive at the conclusion that for any λ-bialgebra ΣX  g  X  h  B X , the interpretation of logic ρ on h is a carrier of a ζ٨-algebra and a Σ-algebra morphism from g. Note that neither ζ nor χ is mentioned in this conclusion, so the most useful way to state this is:
Theorem 4.6 For any Sop E T, Σ, B, λ, L and ρ as above, if a Γ, ζ and κ = χ② λ

as above exist, then for any λ-bialgebra ΣX	g	 X 
h  B X , the interpretation

of logic ρ on h is a Σ-algebra morphism from g.	 
When applied to initial λ-bialgebras, Theorem 2 of [15] is obtained.

Logical distributive laws over Set
Theorem 4.6 can be used to prove that a logical equivalence (defined by syntax L and semantics ρ) on a transition system (B-coalgebra) induced by a structural operational specification (defined by λ) is a congruence (with respect to syntax Σ). To use the theorem, one needs to find three additional ingredients: an endofunctor Γ and natural transformations ζ and χ such that (17) commutes. So far we have provided no intuitive meaning of these ingredients. This is the purpose of this section, where we restrict attention to the dual adjunction C = Ð = Set, S = T = 2−.

Distributive laws and predicate liftings
The search for Γ and ζ for a given Σ is entirely analogous to the search for modal logics L and ρ for a given B, as described in Section 3. One may therefore restrict

attention to functors of the form

Γ =   Γn × (—)n,	(21)
n∈N

n
where Γn ⊆ 2Σ2 . Recall that we may safely assume that L is of a similar form (7).
This means that, once Γ with ζ were chosen, the last missing ingredient χ for Theorem 4.6 is a distributive law χ between polynomial functors. Such laws can be presented as systems of equations, as follows.
Suppose Γ and L are as in (21) and (7), presented by families of Σ- and B- modalities (Γn)n∈N and (Ln)n∈N respectively. Then a distributive law χ : LΓ =⇒ ΓL is equivalent to a family of equations of the form:
β(σ1(x11,..., x1m1 ),..., σn(xn1,..., xnmn ))
=	(22)
σ(β1(y11,..., y1l1 ),..., βk(yk1,..., yklk )),


where:
β ∈ Ln, σi ∈ Γmi , σ ∈ Γk and βi ∈ Lli ,
all variables xij are distinct,
every variable yij occurs on the left side.
The latter two conditions determine a function v : l → m, where m = Σn






mi and

k i=1
li are arities of both sides of the equation.

To define a distributive law χ, the family must contain exactly one equation for each combination β, σ1,..., σn of a B-modality (of arity, say, n) and a sequence of Σ-modalities (of length n).
We shall now formulate the condition (17), necessary for the application of Theorem 4.6, in terms of modalities and equations. To this end, first note that each β, σ1,..., σn as on the left hand side of (22), defines a BΣ-modality of arity m =

n i=1
mi, (where σi ∈ Γmi ), which, following [27], will be denoted β ◎ (σ1,..., σn) : 

BΣ(2m) → 2. Moreover, the composite polynomial endofunctor LΓ is represented
by the collection of all such composite modalities, and the connection ρΣop ◦ Lζ as in (17) (see also (10)) is obtained by copairing all the corresponding predicate liftings (β ◎ (σ1,..., σn))Y . Similarly one can define a lifting σ ◎ (β1,..., βk) : ΣB(2l) → 2, from the right hand side of (22).
Since LΓ is a polynomial functor, the condition (17) can be checked by cases, for each (left hand side of) equation (22). Each case amounts to checking that the following square of natural transformations commutes:
(2−)m	(β◎(σ1,...,σn))Y	z2 
(2−)v	2λ
cz	cz

(2−)l
(σ◎(β1,...,βk))
Y	z2Σ B−.

By Yoneda lemma, this amounts to checking the equality of two ΣB-modalities of arity m:
(β ◎ (σ1,..., σn)) ◦ λ2m = (σ ◎ (β1,..., βk)) ◦ ΣB(2v)	(23)
This condition can be intuitively explained as follows. For a fixed set X, if predicates on X are substituted for variables xi1,..., ximi , then the expression σ(xi1,..., ximi ) on the left hand side of (22) defines a predicate on ΣX; similarly, the entire left hand side defines a predicate on BΣX from a collection of m predicates on X. Further, the right hand side (together with the function v : l → m implicit in the equation) defines a predicate on ΣBX. Now the condition (23) means that the former predicate coincides with the latter when precomposed with λ.

A toy example
Consider Σ, B and λ as in (2) and (1) in Section 2. Consider also, as L and ρ, the trace equivalence defined in (6), represented by the collection of modalities given in (8). To apply Theorem 4.6 to infer the compositionality of trace equivalence for the language defined by (1), one needs to find a collection (Γn)n∈N of Σ-modalities, and an collection of equations (22), such that the condition (23) holds for each equation.
As a first attempt, one might try the empty collection (Γn = ∅ for n ∈ N), i.e., no Σ-modalities. There is only one left hand side of (22) to take care of: the 0-ary B-modality T. Unfortunately, however, there are no possible right hand sides of (22) at all, therefore no equation for T can be written.
To amend this, one can include an “always true” Σ-modality T : Σ1 → 2 to Γ0, formally defined by T(t) = tt always. Then one can write an equation for T:
T = T	(24)
and the condition (23) holds. Unfortunately now there are more left hand sides to take care of: no appropriate equation can be written for ⟨a⟩(T).
The latter expression denotes a 0-ary BΣ-modality that, intuitively, checks whether some a-successor of a process exists. To express a corresponding (along λ) ΣB-modality, one may add, for each a ∈ A, a new unary Σ-modality aV[⊗] : Σ2 → 2
to Γ2, formally defined by: a V [⊗](t) = tt ⇐⇒ t ∈ {a , tt ⊗ tt}, and write an
equation:
⟨a⟩T = a V [⊗](⟨a⟩T).	(25)
Intuitively, a process has an a-successor if and only if it is the process a or it is of the form p ⊗ q such that both p and q have a-successors. Formally, the condition (23) holds for this equation.
However, there is a slight problem here: formally, the right hand side of this equation is not of the form allowed in (22), as ⟨a⟩T is not a modality used in L. A principled solution to this problem would be to allow composite B-modalities on the right sides of equations; i.e., consider distributive laws χ : LΓ =⇒ ΓL∗, just as complex types of distributive laws are considered in the theory of SOS (see Section 2).  Another solution is to simply add the missing (0-ary) B-modalities

⟨a⟩T to L0 and proceed to find further equations. Changing a logic to prove its compositionality is an awkward step, but in this case it does not cause any serious harm, as the logical equivalence of the resulting logic is still trace equivalence. Formally, one then needs to provide suitable equations with 0-ary modalities ⟨a⟩T on the left hand side, but this is now straightforward:
⟨a⟩T = a V [⊗](⟨a⟩T).	(26)

To complete the picture, one still needs to come up with equations for left hand sides such as ⟨a⟩(b V [⊗]x). This is solved by adding yet another, unary modality [⊗] to Γ1, defined by [⊗](t) = tt ⇐⇒ t = tt ⊗ tt, with equations
⟨a⟩(b V [⊗]x)) = [⊗]⟨a⟩x,	⟨a⟩[⊗]x = [⊗]⟨a⟩x.

These, together with (24–26), form a complete family of equations for our chosen Σ-modalities:
Γ0 = {T}	Γ1 = {[⊗]}∪ {a V [⊗] | a ∈ A}	Γn = ∅ for n > 1
and the condition (23) holds for each equation, hence we can use Theorem 4.6 to conclude that trace equivalence is compositional for (1). The same result was used as an example in [15,17]; however, our crude understanding of Γ and χ there resulted in unnecessarily rich logical behaviours and complicated distributive laws.

Compositionality for expressive logics
An important question about the robustness of our approach to compositionality is whether Theorem 4.6 is a generalization of Proposition 2.1, i.e., whether it covers observational equivalence without any loss of generality. Under mild conditions (such as finitarity of B) studied in [16], observational equivalence on B-coalgebras is a logical equivalence for some logic (L, ρ) (such logic is called expressive). If this is the case, then the conclusion of Proposition 2.1 is a special case of the conclusion of Theorem 4.6. However, is there an expressive logic that satisfies the assumptions of Theorem 4.6?
We shall now give a partial positive answer to this question: we restrict attention to C = Ð = Set and S = T = 2−, polynomial process syntax functors Σ, and finitary B that preserve finite sets. In the general case the question is left open.
For our special case, observational equivalence for B-coalgebras is defined by the expressive logic (L, ρ) presented by the collection of all finitary B-modalities, i.e., by
L  = 2B2n for n ∈ N. We shall now show that this logic satisfies the assumptions of

Theorem 4.6 when one takes Γ and ζ presented by all Σ-modalities, i.e., Γn
= 2Σ2n

for n ∈ N.
To this end we need, for every B-modality β ∈ Ln and Σ-modalities σ1,..., σn, to present the ΣB-modality (β ◎ (σ1,..., σn)) ◦ λ2m (where m is the sum of arities of the σi) in the form
(σ ◎ (β1,..., βk)) ◦ ΣB2v	(27)

for some σ ∈ Γk and β1,..., βk B-modalities with sum of arities l, and v : l → m a function between arities. Under our assumptions this can be done without any analysis of β, σi or λ, by the following result:
Proposition 5.1 If Σ is polynomial and B preserves ﬁnite sets then every ΣB- modality of arity m can be decomposed as in (27).
Proof. Let Σ = i∈I(—)ni . Consider any γ : ΣB(2m) → 2. Put k = |B(2m)| (note that B(2m) is finite). For any b ∈ B(2m), define βb : B(2m) → 2 by βb(b') = tt ⇐⇒ b = b'. Then define σ : Σ(2k) → 2 by:
σ(ιi(p1,..., pni )) = tt
⇐⇒
∀b1,..., bni ∈ B2 . (∀j = 1..ni. pj(bj) = tt) =⇒ γ(ιi(b1,..., bn )) = tt ,
m
where ιi : (—)ni =⇒ Σ ranges over the coproduct injections into Σ. This gives a composite modality σ ◎ (βb)b∈B2m of arity m × k, and it turns out that
γ = (σ ◎ (βb)b∈B2m ) ◦ ΣB2π
where π : m × k → m is the evident projection.	 

Future work
Unfortunately, both deficiencies that this paper aims at removing, still persist to some extent in the present formulation. On the abstract level, there clearly is a 2-categorical treatment of coalgebraic modal logic waiting to be discovered and combined with the one developed in [24] for bialgebras. Connections ρ and ζ are simply morphisms of endofunctors, just as λ and χ are endomorphisms on them; also sliced distributive laws χ②λ are distributive law morphisms in the sense of [24]. There is clearly more structure in the story than currently explained.
On the concrete level, some more specific guidelines for finding suitable collec- tions of Σ-modalities are much needed. Last but not least, more examples of logical distributive laws, and their relation to other work on SOS compositionality such as [6], need to be shown.

References
L. Aceto, W. J. Fokkink, and C. Verhoef. Structural operational semantics. In J. A. Bergstra, A. Ponse, and S. Smolka, editors, Handbook of Process Algebra, pages 197–292. Elsevier, 2002.
F. Bartels. On Generalised Coinduction and Probabilistic Specification Formats. PhD dissertation, CWI, Amsterdam, 2004.
B. Bloom, S. Istrail, and A. Meyer. Bisimulation can’t be traced. Journal of the ACM, 42:232–268, 1995.
M. Bonsangue and A. Kurz. Duality for logics of transition systems. In Proc. FOSSACS’05, volume 3441 of LNCS, pages 455–469, 2005.


M. Bonsangue and A. Kurz. Presenting functors by operations and equations. In Proc. FOSSACS’06, volume 3921 of LNCS, pages 172–186, 2006.
W. J. Fokkink, R. J. van Glabbeek, and P. de Wind. Compositionality of Hennessy-Milner logic through structural operational semantics. In Proc. FCT’03, volume 2751 of LNCS, pages 412–422. Springer, 2003.
J. F. Groote, M. Mousavi, and M. A. Reniers. A hierarchy of SOS rule formats. In Proc. SOS’05, 2005, pages 3–25. Elsevier, 2005.
M. Hennessy and R. Milner. Algebraic laws for nondeterminism and concurrency. Journal of the ACM, 32:137–161, 1985.
C. Hermida and B. Jacobs. Structural induction and coinduction in a fibrational setting. Information and Computation, 145(2):107–152, 1998.

B. Jacobs. Towards a duality result in the modal logic for coalgebras. In Proc. CMCS 2000, volume 33 of ENTCS, pages 160–195. Elsevier, 2000.
B. Jacobs. Trace semantics for coalgebras. In Proc. CMCS 2004, volume 106 of ENTCS. Elsevier, 2004.
B. Jacobs and A. Sokolova. Exemplaric expressivity of modal logics. Journal of Logic and Computation, 2009.
P. T. Johnstone. Adjoint lifting theorems for categories of algebras. Bull. London Math. Soc., 7:294– 297, 1975.
G. M. Kelly and R. Stret. Review of the elements of 2-categories. Lecture Notes in Mathematics, 420:75–103, 1974.
B. Klin. Bialgebraic semantics and modal logic. In Proc. LiCS’07, pages 336–345. IEEE Computer Society Press, 2007.
B. Klin. Coalgebraic modal logic beyond sets. In Proc. MFPS 2007, volume 173 of ENTCS, pages 177–201, 2007.
B. Klin. Bialgebraic methods and modal logic in structural operational semantics. Information and Computation, 207:237–257, 2009.
A. Kurz. Coalgebras and their logics. ACM SIGACT News, 37, 2006.

A. Kurz and J. Rosicky´. The Goldblatt-Thomason theorem for coalgebras. In Procs. CALCO 2007, volume 4624 of LNCS, pages 342–355, 2007.
M. Lenisa, J. Power, and H. Watanabe. Category theory for operational semantics. Theoretical Computer Science, 327(1-2):135–154, 2004.
S. Mac Lane. Categories for the Working Mathematician. Springer, second edition, 1998.

D. Pattinson. Semantical principles in the modal logic of coalgebras. In Proc. STACS 2001, volume 2010 of LNCS. Springer, 2001.
D. Pavlovic, M. Mislove, and J. B. Worrell. Testing semantics: connecting processes and process logics. In Proc. AMAST’05, volume 4019 of LNCS, pages 308–322. Springer, 2005.
J. Power and H. Watanabe. Combining a monad and a comonad. Theor. Comput. Sci., 280:137–162, 2002.
V. R. Pratt. Chu spaces from the representational viewpoint. Ann. Pure Appl. Logic, 96:319–333, 1999.
J. J. M. M. Rutten. Universal coalgebra: a theory of systems. Theoretical Computer Science, 249:3–80, 2000.
L. Schr¨oder. Expressivity of coalgebraic modal logic: the limits and beyond. In Proc. FOSSACS’05, volume 3441 of LNCS, pages 470–484, 2005.
D. Turi and G. D. Plotkin. Towards a mathematical operational semantics. In Proc. LICS’97, pages 280–291. IEEE Computer Society Press, 1997.

Adjoint lifting
The following theorem is standard; a proof of it (more precisely, its dual) can be found in [9], see also [13].
Consider endofunctors B on C and B' on C', together with a functor R : C → C'. A natural transformation α : RB =⇒ B'R induces a functor R : B-coalg → B'-coalg defined by:

R( X   h  B X ) = RX  Rh  R BX  αX  B 'RX .	(A.1) Then, for the commuting diagram:

B'-coalg ¸R,  B-coalg
UB'	UB
J' ¸ ,	J 
C	R	C,

the following holds:
Proposition A.1 If α is a natural isomorphism than a left adjoint L E R induces a left adjoint L E R.

Moreover, the adjunction L E R lifts L E R along the respective functors. In particular, since UB' reflects isomorphisms, this implies that if the unit of L E R is a natural isomorphism then so is the unit of L E R.

Proofs
Section 4.1: Not every endofunctor on (Ð↓T ) is sliced.
One important counterexample is the biextensional collapse construction on Chu spaces [25], seen as an endofunctor on Chu(Set, 2) = (Set ↓ 2−). For a simpler counterexample, consider C = Setop, Ð = Set and T = Id. Then (Ð ↓ T ) = Ar(Set), the arrow category of Set. Now consider an endofunctor Q : Ar(Set) → Ar(Set) defined by:
on objects, Q(s : X → Y ) = m : Z → Y , where X   e	 Z , ˛m Y is the epi-
mono factorization of s,
on arrows, a pair ⟨f : X → X',g : Y → Y '⟩ such that

X   s	 Y 
f	g
J' 	 J ' 
X	s'	Y

commutes, is mapped to ⟨z, g⟩ as in the diagram:
X   e	 Z , ˛m Y 

f
J	
z	g
 J  	   J 

˛m'	',
X'	e'  Z ',	 Y 
where z exists uniquely by the epi-mono factorization system of Set.
Functoriality of Q is ensured by the factorization system as well.
However, Q does not lift any functor on Set along Π2, since it might give different results for different functions (objects in Ar(Set)) even if they have the same domain.

Section 4.1: Proof of Prop. 4.2.
For any object X ∈ C, consider the object ⟨TX, X, idX ⟩∈ (Ð↓T ) and define
ρX = π3(K ⟨TX, X, idX ⟩).

Then ρ : LT =⇒ TBop is natural. Indeed, take any f : X → Y in C. The square

TY  TY 
Tf	Tf 
J		J 


trivially commutes, hence
TX	TX 


⟨Tf, f⟩ : ⟨TY, Y, idY ⟩→ ⟨T X, X, idX ⟩

is a valid morphism in (Ð↓T ). But then also

K ⟨Tf, f⟩ : K ⟨TY, Y, idY ⟩→ K ⟨TX, X, idX ⟩

must be a valid morphism. Since K lifts L and Bop, there is K ⟨Tf, f⟩ = ⟨LTf, Bf⟩
and by (9) the naturality square
LTY   ρY  T B  Y
LT f	TBf
J	  J 


commutes.
LTX ρX
TBX

Moreover, K = ρ. To see this, it is enough to show, for any object ⟨Φ, X, s⟩, that
π3K ⟨Φ, X, s⟩ = π3K ⟨TX, X, idX ⟩◦ Ls.

To this end, notice that the square

Φ  	s     T X 
s	T idX
J	



obviously commutes, hence
TX idTX TX 


⟨s, idX ⟩ : ⟨Φ, X, s⟩→ ⟨T X, X, idX ⟩

is a valid morphism in (Ð↓T ). But then also

K ⟨s, idX ⟩ : K ⟨Φ, X, s⟩→ K ⟨TX, X, idX ⟩
must be a valid morphism. Since K lifts L and Bop, there is K ⟨s, idX ⟩ = ⟨Ls, idBX ⟩
and by definition of morphisms in (Ð↓T ), the square

LΦ   π3K⟨Φ,X,s⟩  T B  X
Ls
J	
LT Xπ3K⟨T X,X,idXT⟩ BX

commutes; but this is exactly the required equation.	 

Section 4.1: Not every natural transformation between sliced endofunctors is sliced.
For a counterexample, take C = 1, Ð = Set and T = C2 (the constant functor at a two-element set). Then (Ð↓T ) = Set/2 is the category of sets over a two-element
set 2. Now consider endofunctors K = Id (the identity functor) and K' = Cid (the
constant functor at id2) on (Ð↓T ). It is easy to see that both functors are sliced.
Define κ : K =⇒ K' by κs:X→2 = s. It is easy to see that this is well-defined as a morphism in (Ð↓ T ); to show naturality, assume any s : X → 2 and r : Y → 2 and some f : X → Y such that r ◦ f = s. The naturality square of κ at f is:

s 	f	 r 

κs=s
J 
κr =r
J 

id2 id
 id 2

and this commutes immediately by the assumption on f .
However, the above κ is not sliced. To see this, take any two distinct functions s, r : X → 2 for some set X.  Then obviously κs /= κr, therefore a purported α : Id =⇒ 2 in Set cannot be defined on X.

Section 4.2: Proof of Proposition 4.5.
(12) shows how to define κ from α and β. For the other direction, for any κ : ρ =⇒
ρ^', define
αΦ = Π1κ⟨Φ,SΦ,ηΦ⟩	βX = Π2κ⟨T X,X,idTX ⟩
for any X ∈C and Φ ∈ Ð, where η : Id → TSop is the unit of Sop E T .
To check the naturality of α, for any f : Φ → Ψ in Ð consider the first component of the naturality square of κ at ⟨f, Sopf⟩ : ⟨Φ, SΦ, ηΦ⟩ → ⟨Ψ, SΨ, ηΨ⟩, which is a well-defined morphism in (Ð↓ T ) by naturality of η. For the naturality of β, for any g : X → Y in C consider the second component of the naturality square of κ at
⟨Tg, g⟩ : ⟨TY, Y, idTY ⟩→ ⟨T X, X, idTX ⟩, which is trivially a well-defined morphism in (Ð↓T ). The equation Tβop ◦ ρ = ρ' ◦ αT follows, for any given X ∈ C, from the fact that the component of κ at ⟨TX, X, idTX ⟩ is a well-defined morphism. Finally, it is straightforward to check that the construction of α and β from κ is mutually inverse with (12).
