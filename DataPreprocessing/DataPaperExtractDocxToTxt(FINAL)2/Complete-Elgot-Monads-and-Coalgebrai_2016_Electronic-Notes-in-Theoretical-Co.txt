Available online at www.sciencedirect.com


Electronic Notes in Theoretical Computer Science 325 (2016) 147–168
www.elsevier.com/locate/entcs

Complete Elgot Monads and Coalgebraic Resumptions†
Sergey Goncharov1,?  Stefan Milius2 Christoph Rauch3,?
Lehrstuhl fu¨r Theoretische Informatik, Friedrich-Alexander Universit¨at Erlangen-Nu¨rnberg, Germany

Abstract
Monads are used to abstractly model a wide range of computational effects such as nondeterminism, state- fulness, and exceptions. Complete Elgot monads are monads that are equipped with a (uniform) iteration operator satisfying a set of natural axioms, which allows to model iterative computations just as abstractly. It has been shown recently that extending complete Elgot monads with free effects (e.g. operations of sending/receiving messages over channels) canonically leads to generalized coalgebraic resumption monads,
which were previously used as semantic domains for non-wellfounded guarded processes. In this paper, we continue the study of complete Elgot monads and their relationship with generalized coalgebraic resumption monads. We give a characterization of the Eilenberg-Moore algebras of the latter. In fact, we work more generally with Uustalu’s parametrized monads; we introduce complete Elgot algebras for a parametrized monad and we prove that they form an Eilenberg-Moore category. This is further used for establishing a characterization of complete Elgot monads as those monads whose algebras are coherently equipped with the structure of complete Elgot algebras for the parametrized monads obtained from generalized coalgebraic resumption monads.
Keywords: Complete Elgot monad, complete Elgot algebra, resumption monad, uniform iteration


Introduction
One traditional use of monads in computer science, stemming from the seminal thesis of Lawvere [20], is as a tool for algebraic semantics where monads arise as a high-level metaphor for (clones of) equational theories. More recently, Moggi proposed to associate monads with computational effects and use them as a generic tool for denotational semantics [22], which later had a considerable impact on the design of functional programming languages, most prominently Haskell [1]. Finally, in the first decade of the new millennium, Plotkin and Power reestablished the

† Full version is available at http://arxiv.org/abs/1603.02148
s Supported by Deutsche Forschungsgemeinschaft (DFG) under project SCHR 1118/8-1
1 Email: Sergey.Goncharov@fau.de
2 Email: mail@stefan-milius.eu Supported by Deutsche Forschungsgemeinschaft (DFG) under project MI 717/5-1
3 Email: Christoph.Rauch@fau.de

http://dx.doi.org/10.1016/j.entcs.2016.09.036
1571-0661/© 2016 The Author(s). Published by Elsevier B.V.
This is an open access article under the CC BY-NC-ND license (http://creativecommons.org/licenses/by-nc-nd/4.0/).

connection between computational monads and algebraic theories in their theory of
algebraic effects [23, 24].
We use the outlined view to study the notion of iteration as a concept that has a well-established algebraic meaning and which is very relevant in the context of computational effects. On the technical level our present work can be viewed as a continuation of the previous extensive work on monads with iteration [2,5,7] having
its roots in the work of Elgot [12] and Bloom and E´sik [10] on iteration theories.
More specifically, we are concerned with a particular construction on monads: given a monad T and a functor Σ, we assume the existence of the coalgebra
TΣX = νγ. T (X + Σγ)	(★)
for each object X (these final coalgebras exist under mild assumptions on T , Σ, and the base category). It is known [28] that TΣ extends to a monad TΣ and we call the latter the generalized coalgebraic resumption monad.
Intuitively, (★) is a generic semantic domain for systems combining extensional (via T) and intensional (via Σ) features with iteration. To make this intuition more precise, consider the following simplistic
Example 1.1 Let A = {a, b} be an alphabet of actions. Then the following system of equations specifies processes x1, x2, x3 of basic process algebra (BPA):
x1 = a · (x2 + x3)	x2 = a · x1 + b · x3	x3 = a · x1 + C
We can think of this specification as a map P  → T ({C} + ΣP ) where P  =
{x1, x2, x3}, Σ = A × - and T = Pω is the finite powerset monad. Using the stan- dard approach [26] we can solve this specification by finding a map P → TΣ{C} that assigns to every xi the corresponding semantics over the domain of possibly non-wellfounded trees TΣ{C} = νγ.Pω({C} + A × γ). The crucial fact here is that the original system is guarded, i.e. every recursive call of a variable xi is preceded by an action. This implies that the given recursive system has a unique solution.
If the guardedness assumption is dropped, solutions may fail to be unique, but it is possible to introduce a notion of canonical solution if the Kleisli category of the monad T is enriched in the category of complete partial orders, or more generally, if T is a complete Elgot monad. A monad T is a complete Elgot monad if it is equipped with an iteration operator that assigns to every morphism of the form f : X → T (Y + X) a solution f† : X → TY satisfying a certain well-established set of equational axioms of iteration and also uniformity [27] (e.g. Pω is not a complete Elgot monad, but the countable powerset monad Pω1 is). The central result of the recent work [14] is that whenever T is a complete Elgot monad then so is the transformed monad (★). In particular, this allows for canonical solutions of recursive equations over processes (in the sense of Example 1.1) whenever recursive equations over T are solvable.
In the present paper we investigate the relationship between guarded and un- guarded iteration, which are implemented via generalized coalgebraic resumption

monads and complete Elgot monads, respectively. As an auxiliary abstraction de- vice, we use the notion of a parametrized monad introduced by Uustalu [28], i.e. a bifunctor # : C×C → C such that for every object X, the functor - #X is a monad. For example, the bifunctor X #Y = T (X +ΣY ) in (★) yields a parametrized monad. Following [5], we introduce complete Elgot algebras for a parametrized monad #, which are algebras for # equipped with an iteration operator satisfying simplified
versions of the axioms of complete Elgot monads. However, in contrast to the latter complete Elgot #-algebras omit any form of the Beki´c law that states how mutu- ally recursive definitions are solved. We then prove that for every object X the final coalgebra νγ. X # γ is equivalently a free complete Elgot #-algebra on X and that the category of Eilenberg-Moore algebras for the ensuing monad νγ. -- #γ is isomorphic to the category of complete Elgot #-algebras.
Furthermore, we show that for every complete Elgot monad T, every free T- algebra TZ canonically extends to a complete Elgot #-algebra for X # Y = T (X + Y ). This situation can be roughly summarized as follows:
(νγ. -- #γ)-algebras	∼=	complete Elgot #-algebras	⊇	free T-algebras
From the perspective of Example 1.1 this connection can be regarded as follows. Since Σ = Id, the set of guards consists of only one action, which can be understood as delaying. Now, the inclusion of T-algebras into (νγ. -- #γ)-algebras essentially means that complete Elgot monads interpret staged, possibly infinite, guarded pro- cesses over T by forgetting the guards.
Suppose that, conversely, we have any monad T such that the above inclusion holds in the sense that T-algebras are coherently equipped with structures of com- plete Elgot #-algebras. Then T is equipped with an iteration operator satisfying a set of axioms that are weaker than the axioms of complete Elgot monads; the ensuing notion is that of a weak complete Elgot monad.
The paper is organized as follows. After categorical preliminaries (Section 2) we present and discuss complete Elgot monads in Section 3. In Section 4 we intro- duce algebras and complete Elgot algebras for a parametrized monad #; next, in Section 5, we show that the category of complete Elgot #-algebras is isomorphic to the Eilenberg-Moore category of the monad νγ. -- #γ (Theorem 5.7); further- more, we show that a free complete Elgot #-algebra on X is equivalent to the final coalgebra νγ. X # γ (Theorem 5.9). Finally, in Section 6 we apply the developed re- sults to characterize complete Elgot monads as those whose algebras are coherently equipped with complete Elgot algebra structures (Theorem 6.4 and 6.6).
Further Related Work. Algebras for parametrized monads were introduced in [4, 6] albeit for the special case of a base, i.e. a finitary parametrized monad on a locally finitely presentable category. Loc. cit. also introduces iterative base algebras which are algebras for a base having unique solutions of finitary recursive equations. Complete Elgot algebras for an endofunctor H were introduced in [5], and it was proved that they form the Eilenberg-Moore category of the monad T ob- tained by taking the final coalgebras TX = νγ.(X + Hγ); this is the free completely iterative monad on H (see [2]). Since X # Y = X + HY is a parametrized monad,

our notion of complete Elgot algebras generalizes the previous notion to the level of parametrized monads and it extends iterative algebras by considering an iteration operation subject to certain axioms in lieu of unique solutions. Our Theorem 5.7 generalizes [5, Theorem 5.8].
The study of monads with an iteration operator is inspired by Bloom and E´sik’s
iteration theories [10]. Extending this from Lawvere theories (i.e. finitary monads on Set) to monads on more general categories has led to the notion of Elgot monad introduced in [7]. While iteration theories and Elgot monads study an iteration operator for recursive equations with finitely many recursion variables, complete Elgot monads [14] are equipped with an iteration operator for all (finitary and infinitary) recursive equations.
Preliminaries
We assume that readers are familiar with basic category theory [21]; we write |C| for the class of objects of a category C and f : X → Y for morphisms in C. We often omit indexes, e.g. on natural transformations, if they are clear from the context.
In this paper we work with an ambient category C with finite coproducts. We denote by inl and inr the left- and right-hand coproduct injections from X and Y to X + Y , and [f, g]: X + Y → Z the is the copair of f : X → Z and g : Y → Z,
i.e. the unique morphism with [f, g] inl = f and [f, g] inr = g. The codiagonal is
denoted by ∇ = [id, id]: X + X → X as usual.
We consider monads on C given in the form of Kleisli triples T = (T, η, --٨) where T is an endomap on |C|, η, called monad unit, is a family of morphisms ηX : X → TX indexed over |C|, and (Kleisli) lifting assigns to each f : X → TY a morphism f ٨ : TX → TY such that the following laws hold:
η٨ = id,	f ٨ η = f,	(f ٨ g)٨ = f ٨ g٨.
This is equivalent to the definition of a monad as a triple (T, η, μ) that consists of a functor T and two natural transformations, the monad unit η : Id → T and the monad multiplication μ : TT → T [21]. In particular, given a Kleisli triple, μ = id٨ yields the monad multiplication, η extends to a natural transformation, and T to an endofunctor with morphism mapping Tf = (η f )٨. The Kleisli category CT of T is formed by Kleisli morphisms X → TY , i.e. CT(X, Y )= C(X, TY ) with ηX as identity morphism on X and Kleisli composition: given Kleisli morphisms f : X → TY and g : Y → TZ we have
f	gs

We write f : X−⬦→Y for a Kleisli morphism f : X → TY .
The forgetful functor from CT to C has a left adjoint sending any f : X → Y to f = ηf : X → TY . Like any left adjoint, this functor preserves colimits, and in particular coproducts. Since |C| = |CT|, this implies that coproducts in CT exist and are lifted from C. Explicitly, inl = η inl : X−⬦→X + Y , inr = η inr : Y −⬦→X + Y

Fixpoint:
=

Naturality:

Z
=


Codiagonal:

=


Uniformity:

=
X

⇓
=



Fig. 1. Axioms of complete Elgot monads.

are the coproduct injections in CT and [f, g] : A + B−⬦→C (formed in C) is the copair of f : A−⬦→C and g : B−⬦→C in TT. We denote by f ⊕ g : A + B−⬦→Aj + Bj the coproduct of morphisms f : A−⬦→Aj and g : B−⬦→Bj in CT. Besides CT, we consider the category CT of (Eilenberg-Moore) algebras for T, whose objects are pairs (A, a : TA → A), satisfying two laws: aη = id and a (Ta)= a μ; a T-algebra morphism f from (A, a) to (A, b) is a morphism f : A → B such that f a = bTf . See [21] for more details.
We will make use of standard facts on coalgebras for an endofunctor [25]. Given an endofunctor F : C → C, an F -coalgebra is a pair (X, c) where X is an object of C called the carrier of the coalgebra and c : X → FX is a morphism called the (transition) structure. A coalgebra morphism f from (X, c) to (Y, d) is a morphism f : X → Y such that df = (Ff ) c. Coalgebras and their morphisms form a category. The final F -coalgebra, if it exists, is the terminal object in that category and is denoted by
out
νF −−−→ F (νF ).
By Lambek’s lemma, out is an isomorphism, whose inverse out-1 : F (νF ) → νF can be obtained as coit(F out), where for any coalgebra (X, f : X → FX) we denote by coit f the unique coalgebra morphism X → νF from X to the final coalgebra νF .

Complete Elgot Monads for Iteration
Complete Elgot monads are a slight generalization of Elgot monads from [7,8], which in turn, for the base category being Set, correspond precisely to those iteration theories of Bloom and E´sik [10] that satisfy the functorial dagger implication for base morphisms. In the following definition cited from [14] (for simplicity, we do
not consider strong monads here because the possible presence of a strength has no bearing on our results), we follow the terminology of [9, 27] where the same axioms were considered in the dual setting of generic parametrized recursion.
Definition 3.1 (Complete Elgot monads) A complete Elgot monad is a monad T equipped with an operator --†, called iteration, that assigns to each mor- phism f : X−⬦→Y + X a morphism f† : X−⬦→Y such that the following axioms hold:
 fixpoint: f† = [η, f†] ⬦ f, for any f : X−⬦→Y + X;
 naturality: g ⬦ f† = ((g ⊕ η) ⬦ f )† for any f : X−⬦→Y + X and g : Y −⬦→Z;
 codiagonal 4 :([η, inr] ⬦ g)† = g†† for any g : X−⬦→(Y + X)+ X;
 uniformity: f ⬦ h = (η ⊕ h) ⬦ g implies f† ⬦ h = g† for any f : X−⬦→Y + X, g : Z−⬦→Y + Z and h : Z → X.
The above axioms of iteration can be comprehensibly represented in a flowchart- style as in Fig. 1. Here the feedback loops correspond to iteration and the coloured frames indicate the scope of the constructs being iterated. We believe that this presentation is rather well in touch with the intuition. For example, the naturality axiom expresses the fact that the scope of the iteration can be stretched to embrace a function post-processing the output of the terminating branch.
There is an obvious similarity between the axioms in Fig. 1 and the axioms of traced monoidal categories [18]. In fact, Hasegawa [16] proved that there is an equivalent presentation of a dagger operation satisfying the above axioms in terms of a uniform trace operator w.r.t. coproducts (actually, Hasegawa worked in the dual setting with products). Note that the present axioms make use of coproduct injections and the codiagonal morphism, while the trace axioms can be formulated more generally for any monoidal product.
One standard source of examples for complete Elgot monads is a suitable en- richment of the Kleisli category CT over complete partial orders.
Example 3.2 (ω-continuous monads) An ω-continuous monad is a monad T such that the Kleisli category CT is enriched over the category Cppo of ω-complete partial orders with bottom ⊥ and (nonstrict) continuous maps; moreover, composi- tion in C is required to be left strict and composition in CT right strict: ⊥ f = ⊥, f ⬦ ⊥ = ⊥; equivalently, ⊥ is a constant of T. We also assume that coproducts
in C are Cppo-enriched; for this it suffices that copairing is monotone in both arguments. It then follows that it is also continuous; for .i[fi, g] is a morphism

4 The codiagonal axiom is often written as ((η ⊕ ∇) o g)† = g†† implicitly alluding to the canonical isomorphism Y + (X + X) ∼= (Y + X)+ X.

satisfying (.i[fi, g]) inl = .i fi and (.i[fi, g]) inr = g by continuity of composition, whence .i[fi, g] = [.i fi, g]. Similarly, one shows continuity in the second argu- ment. (Note that monotonicity is used only so that the [fi, g] form an ω-chain
provided that the fi do.)
It is shown in [14] that an ω-continuous monad is a complete Elgot monad with e† calculated as the least fixed point of the map f '→ [η, f ] ⬦ e. This yields the powerset monad P, the Maybe-monad (-- +1), or the nondeterministic state monad P(-- ×S)S as examples of complete Elgot monads on Set. The lifting monad (--)⊥ is a complete Elgot monad on the category of complete partial orders without bottom.
Another principal source of examples are free complete Elgot monads for which the iteration of guarded morphisms is uniquely defined.
Example 3.3 (Free complete Elgot monads) Suppose T is the initial complete Elgot monad. It is shown in [14] that whenever the functor TΣ defined by (★) exists, it yields the free complete Elgot monad on Σ (note that the original T is the free complete Elgot monad on the constant functor on the initial object of C). In Set (more generally, in any hyperextensive category [3]) the initial complete Elgot monad T is the Maybe-monad - +1.
Example 3.4 (Capretta’s partiality monad) One instructive example, not cov- ered by the above cases is the coalgebraic resumption monad νγ. -- +γ, studied by Capretta for modeling partiality in the intensional type theory [11]. Note that this example is not covered by Example 3.3, for that only states that νγ. T (X + γ) is a complete Elgot monad, provided T is one (e.g. it follows that νγ. X +1+ γ is a complete Elgot monad on Set), but T = Id is not a complete Elgot monad in any of the relevant examples.
We conjecture that T = νγ. -- +γ can be shown to be a complete Elgot monad over any sufficiently rich (type-theoretic) universe; in particular, this can be easily seen in Set: Here TX explicitly evaluates to X × N + {⊥}, hence every TX can be ordered as a flat domain, i.e. x ± y iff x = ⊥ or x = y; this easily extends to a Cppo- enrichment as required in Example 3.2 and hence gives rise to a complete Elgot monad structure on T. Intuitively, every function f : X → T (Y + X) either diverges or delivers a result together with the number of steps needed to compute it. The iteration f† sums the numbers occurring across the loop and in case of convergence delivers the sum together with the result value. Note that the number of unfoldings of f† in this process does not contribute to the result, which explains why the fixpoint identity indeed holds for T.
In comparison to the previous work [14], Definition 3.1 remarkably drops the axiom of dinaturality (see Fig. 2). The reason is that this axiom turns out to be derivable, which is a fact that was recently discovered and formalized on the level of iteration theories [13]. Corollary 6 from op. cit. can be couched in present terms as follows (modulo the terminological change: parameter identity instead of naturality, double dagger instead of codiagonal and dagger implication for base morphisms instead of uniformity ):



=



Fig. 2. Dinaturality axiom.

Proposition 3.5 (Dinaturality) Given g : X−⬦→Y + Z and h : Z−⬦→Y + X, then
([inl, h] ⬦ g)† = [η, ([inl, g] ⬦ h)†] ⬦ g.

The codiagonal axiom in Definition 3.1 can equivalently be replaced by a form of the well-known Beki´c identity, see [10].
Proposition 3.6 (Beki´c identity) A complete Elgot monad T is, equivalently, a monad satisfying the fixpoint, naturality and uniformity axioms (as in Deﬁni- tion 3.1), and the Beki´c identity
(Tα [f, g])† = [η, h†] ⬦ [inr, g†],

where g : X−⬦→(Z + Y )+ X, f : Y −⬦→(Z + Y )+ X, h = [η, g†] ⬦ f : Y −⬦→Z + Y , with α : (A + B)+ C → A + (B + C) being the obvious associativity isomorphism.

Parametrized Monads for Complete Elgot Algebras
In order to study complete Elgot monads and their algebras it is helpful to make a further abstraction step and generalize from monads to parametrized monads [28] (finitary parametrized monads are also called bases [4]), which are of independent interest.
Definition 4.1 (Parametrized monad) A parametrized monad over C is a func- tor from C to the category of monads over C and monad morphisms. More explic- itly, a parametrized monad is a bifunctor # : C ×C → C such that for any X ∈ |C|,
-- #X : C → C is a monad, and for any f : X → Y , id # f : Z # X → Z # Y is the
Z-component of a monad morphism from - #X to - #Y .
Remark 4.2 The order of arguments in X # Y is in agreement with [28] and differs from [4] where the notation Y 2X equivalent to the present X #Y is used. We chose the order of arguments to ensure agreement with the type profile of the iteration operator -†, which is in turn in agreement with the expression (★).
Following [4] we will from now on denote the unit and multiplication of the monads
-- #X by uX : A → A # X and mX : (A # X) # X → A # X, respectively.
A	A
Example 4.3 (Parametrized monads) We recall some standard examples of parametrized monads from [28]; further examples can be found e.g. in [6].

Whenever T = (T, η, --٨) is a monad and Σ is a functor, A # X = T (A + ΣX) is a parametrized monad with the unit given by


uX	inl
ηA+ΣX


and the multiplication by
X	[id,ηA+ΣX inr]s

Specifically, if Σ is the constant functor on an object E then X # Y is the exception monad transformer with exceptions from E [22]. Another interesting special case is when T is the identity monad (cf. Remark 4.8).
A # X = A × X٨ is a parametrized monad with the unit and multiplication given by
uX : a '→ (a, ε)	and	mX : (a, w, v) '→ (a, wv),
A	A
where ε denotes the empty word and wv concatenation of words.
Given a contravariant endofunctor H, A # X = AHX is a parametrized monad with the unit and multiplication given by
uX : a '→ λx. a	and	mX : (f : HX → (HX → A)) '→ λx. f (x)(x).
A	A
This is a generalization of the well known reader monad, which can be recovered by instantiating H with a constant functor.
The following is a straightforward extension of the notion of an algebra for a base studied in [4] to arbitrary parametrized monads.
Definition 4.4 (#-algebras) Given a parametrized monad # : C × C → C, a #-algebra is a pair (A, a) consisting of an object A of C, and an algebra for the monad - #A, i.e. a morphism a : A # A → A satisfying


A
A	A	A # A
(A # A) # A	a#id	A # A

a	A	a
id	A
A	A # A	a	A

A morphism between #-algebras (A, a) and (B, b) isa C-morphism f : A → B such that
A # A	a	A
f #f	f
B # B	b	B
For our leading example X # Y = T (X + ΣY ) the category of #-algebras can be described explicitly. Recall that a T-Σ-bialgebra in the sense of Kelly [19] is a triple (A, a, f ) where a : TA → A is a T-algebra and f : ΣA → A is a Σ-algebra.

Proposition 4.5 Let X # Y = T (X + ΣY ) for a monad T and a functor Σ on C. Then #-algebras are precisely T-Σ-bialgebras.
Proof (Sketch). Given a #-algebra α : T (A + ΣA) → A one forms two algebra structures
T inl	α

inr	η	α

A straightforward calculation then shows that a is a T-algebra structure, whence (A, a, b) is a T-Σ-bialgebra.
Conversely, given any T-Σ-bialgebra a : TA → A → ΣA : b one forms
T [id,b]	a

Another straightforward computation establishes that this is the structure of a #- algebra.
Finally, it is easy to see that the above two constructions are mutually inverse and extend to an (identity on morphisms) isomorphism between the categories of #-algebras and T-Σ-bialgebras.	2
Corollary 4.6 Let X #Y = T (X +Y ) for a monad T on C. The category CT of T- algebras is isomorphic to the full subcategory of those #-algebras a : T (A + A) → A, which factor through T ∇ : T (A + A) → T A.
Analogously to complete Elgot monads, we introduce #-algebras with iteration. This generalizes the definition of a complete Elgot algebra for a functor from [5].
Definition 4.7 (Complete Elgot #-algebras) A complete Elgot #-algebra is a
#-algebra a : A # A → A equipped with an iteration operator
e : X → A # X
e† : X → A
satisfying the following axioms:
 solution: for every e : X → A # X we have

X
e
A # X

e†



A#e†

A
a
A # A

functoriality: for every e : X → A # X, f : Y → A # X and h : X → Y ,

X	e	A # X
h	A#h
Y  A # Y
f
X
implies	h	A Y

f h = (id # h) e implies f† h = e†;
compositionality: for every f : Y → A # Y and g : X → Y # X define
†	g	f †#id
f • g = (X −−→ Y # X −−−→ A # X)
and f □ g : Y + X → A # (Y + X) by

[uX ,g]	f #id

Y + X	Y
Y # X  (A # Y ) # X


A # (Y + X)


Y +X A
(id#inl)#inr
(A # (Y + X)) # (Y + X)

Compositionality states that (f □ g)† inr = (f† • g)† : X → A.
A morphism from a complete Elgot #-algebra (A, a, --†) to a complete Elgot #- algebra (B, b, --‡) is a C-morphism f : A → B, such that for all e : X → A # X we
have:

e†	f
e	f #id	 ‡

This defines the category of complete Elgot #-algebras CElg#(C).
Remark 4.8 Note that complete Elgot #-algebras for the parametrized monad A # X = A + ΣX (i.e. the parametrized monad of Example 4.3 (i) for T the identity monad) are precisely the complete Elgot algebras for the functor Σ introduced and studied in [5].
Like in the case of complete Elgot monads, a standard way to obtain complete Elgot #-algebras is by enforcing a suitable enrichment over complete partial orders with bottom.
Example 4.9 (Continuous algebras are complete Elgot algebras) Consider any category C that is enriched over Cppo such that composition is left strict, i.e.
⊥ f = ⊥, and a parametrized monad # : C × C → C that is locally continuous in both arguments, i.e.
.i (fi # gi)= .i fi # .i gi 
holds for any ω-chains (fi : X → Y )i<ω and (gi : Xj → Y j)i<ω. Then every #- algebra becomes a complete Elgot #-algebra when equipped with the operation -† assigning to every e : X → A # X its least solution. In more detail, let A be a #-algebra. To every e : X → A # X we assign e† : X → A given by

e† =
i
e†,

where e† = ⊥ : X → A and ei+1 = a (id # e†) e. That means that e† is the least
0	i
fixed point of the function s '→ a (id # s) e on C(X, A). The verification that this

satisfies the axioms of a complete Elgot #-algebra can be found in the full version of our paper.
Example 4.10 The previous example can easily be generalized as follows. Let # be a parametrized monad on an arbitrary category C. Suppose that a : A # A → A is a #-algebra such that
for every object X, C(X, A) is a cpo with ⊥,
for every morphism g : X → Y , the map C(g, A) : C(Y, A) → C(X, A) with
f '→ fg is continuous,
the map f '→ a (id # f ) is a continuous map on C(X, A).
Then clearly for every e : X → A # X the least solution e† exists; indeed, the map s '→ a (id # s)e is continuous on C(X, A). And the assignment e '→ e† of a least solution turns A into a complete Elgot #-algebra. The proof of this fact is identical to the proof for the previous example.
Note that if C = Set and A is a cpo with ⊥ then C(X, A) is equipped with the pointwise cpo structure and then conditions (i) and (ii) follow automatically.
For illustrative purposes we proceed to describe one concrete instance of this scenario. Let X #Y = X +Y ×Y on C = Set. Let S be a set and let Sj = S+{0, ⊥}. Then
(Sj, seq or : Sj + Sj × Sj → Sj) is a #-algebra under the following assignments:
seq or(x)= x   seq or(⊥, x)= ⊥   seq or(s, x)= s   seq or(0, x)= x where s ∈ S. Moreover, Sj is equipped with the flat cpo structure, i.e. x ± y iff
x = ⊥ or x = y, and seq or is continuous. Then all hom-sets C(X, Sj) are, of course,
cpos with ⊥ under the pointwise order, and it is then easy to see that our three conditions above are satisfied; for condition (iii) one uses that Sj + Sj × Sj is also a cpo (without bottom) and that seq or is clearly continuous. Thus Sj is a complete Elgot #-algebra.
Suppose we have a predicate p : S → 2 on S and a function f : X → S + X × X representing a graph over the set of nodes X (where every vertex has either two outgoing transitions or none and is labeled in S). Let p? : S → Sj be defined by p?(s)= s if p(s)=1 and p?(s) = 0 otherwise and consider the map

f	p?+id	j

Since g : X → Sj # X, we obtain the function g† : X → Sj, which performs the depth-ﬁrst search of the first element of S satisfying p starting for a given vertex. The results from Sj are to be interpreted as follows: s ∈ S is returned if the element is found, 0 if the element is not found, ⊥ indicates the divergence.
We revisit these definitions in Example 5.8 after giving a characterization of
complete Elgot algebras.

Note that we did not require a morphism of complete Elgot #-algebras to be a morphism of #-algebras. In fact, this follows automatically.
Proposition 4.11 Let f : A → B be a complete Elgot #-algebra morphism from
(A, a, --†) to (B, b, --‡). Then f is a morphism of #-algebras.
Proof (Sketch). The idea is to represent a as a loop terminating after the first iteration and then deduce preservation of a by f from preservation of iteration by f guaranteed by definition. More concretely, we take
e = (id # inr) [id, uA]: (A # A)+ A → A # ((A # A)+ A)
and show that e† = [a, id]. The remaining proof amounts to deriving b (f # f )= f a 
from f e† = ((f # id) e)‡.	2

Complete Elgot Algebras as Algebras for a Monad
In this section we show that complete Elgot #-algebras can be recognized as pre- cisely Eilenberg-Moore algebras of the monad of generalized coalgebraic resumptions on #, which we introduce below.
Recall that it was shown by Uustalu [28] that parametrized monads give rise to monads at least in two different ways:
Proposition 5.1 Suppose # is a parametrized monad on C such that the least ﬁxpoint μγ. X # γ (the greatest ﬁxpoint νγ. X # γ) exists for every X ∈ |C|. Then μγ. -- #γ (νγ. -- #γ) is the underlying functor of a monad.
Remark 5.2 For the parametrized monad X # Y = T (X + ΣY ) it is well-known that
T μX = μγ. T (X + Σγ)
is the object mapping of a monad Tμ (in fact, Tμ is the coproduct of the monad T
Σ	Σ
amd the free monad on Σ, see [17]). In the following we shall mostly be interested
in the case where μ is replaced by ν, i.e. the monad TΣ of (★).
It is known that the initial algebra μγ. X # γ carries the free #-algebra on X; conversely, the free #-algebra is an initial (X # --)-algebra (see [6, Theorem 2.18]). Here we are interested in the final coalgebras νγ. X # γ. One of the goals of this section is to establish that the final (X #--)-coalgebra carries the free complete Elgot #-algebra on X, and conversely, assuming a free complete Elgot #-algebra on X, its carrier is a final (X # --)-coalgebra (see Corollary 5.10).
From now on we assume that the final coalgebras νγ. X # γ exist and denote them z#X (standardly omitting the structure morphisms outX : z#X → X # z#X). Recall that coit f : X → z#Y is the unique final morphism induced by a coalgebra (X, f : X → Y # X). Following [28], in order to introduce and reason about the monad structure of z#, we use a more flexible primitive corecursion principle, derived from the standard coiteration principle embodied in coit.

Proposition 5.3 ([28]) For any endofunctor F with a ﬁnal coalgebra νF, and any f : X → F (νF + X), there is a unique morphism h : X → νF satisfying out h = F [id, h] f.
The morphism h in Proposition 5.3 is said to be defined by primitive corecursion. We use primitive corecursion to slightly generalize the coit construct in the special case of z#:
Lemma 5.4 For any e : X → B # X and f : B → A # z#A, there is a unique morphism h satisfying


X
h
z#A
e


out
B # X
m|#A (f #h)
A # z#A.

(1)

For any e : X → B # X and f : B → A # z#A we denote by
coit(e, f ): X −→ z#A
the unique h making diagram (1) commute. Using (1), the monad structure on z# can be given as follows:
ην = out-1 uz#X = coit uX
X	X	X
f ٨ = coit((f # id) out, out)	where f : X → z#Y
This also defines μν = id٨ = coit(out, out). Note that, by Lemma 5.4, f ٨ is the unique morphism satisfying the equation
out f ٨ = mz#Y (out f # f ٨) out .	(2)

Lemma 5.5 Let e : X → B # X and f : B → A # z#A. Then
coit(e, f )= (out-1 f )٨ (coit e).

As an easy corollary of Lemma 5.5 we obtain that coit e = coit(e, uz#X); indeed, we

have
coit(e, uz#X)= (out-1 uz#X)٨ (coit e)= (ην )٨ (coit e)= coit e.

X	X	X
We state another useful property in the following lemma:
Lemma 5.6 Let e : X → B # X and g : B → C. Then
z#g (coit e)= coit((g # id) e).

The following theorem is our first main result. It establishes an equivalence of complete Elgot #-algebras and z#-algebras.

Theorem 5.7 For any parametrized monad # : C × C → C, the Eilenberg-Moore algebras of z# = νγ. -- #γ are exactly the complete Elgot #-algebras. More pre- cisely, Cz# and CElg#(C) are isomorphic categories, witnessed by the following construction (in both directions, morphisms are mapped to themselves):
 Cz# → CElg#(C): for a z#-algebra (A, χ : z#A → A) we deﬁne a #-algebra (A, χ out-1 (id # ην) : A # A → A, --†) with e† = χ (coit e) : X → A for any e : X → A # X.
 CElg#(C) → Cz# : for a #-algebra (A, a : A # A → A, --†) we deﬁne an
z#-algebra (A, out† : z#A → A).
Proof (Sketch). For the direction from Cz# to CElg#(C) we have to verify the axioms of complete Elgot #-algebras. The hardest case is that of the composition- ality identity. We have on the one hand
(f† • g)† = χ coit(f† • g)
= χ coit ((χ (coit f ) # id) g)
= χ coit ((χ # id) ((coit f ) # id) g)
= χ (z#χ) coit(((coit f ) # id) g)	// Lemma 5.6
= χμν coit(((coit f ) # id) g)	// χ is an z#-algebra
= χ coit(((coit f ) # id) g, out),	// Lemma 5.5 and on the other hand, by definition,
†	Y +X	X
(f □ g) inr = χ coit(mA	(((id # inl) f ) # inr) [uY , g]) inr .
Let us denote mY +X (((id # inl) f ) # inr) [uX , g] by h. By Lemma 5.4, it suffices
A	Y
to show the identity out (coit h) inr = mz#A (out #((coit h) inr)) (coit f # id) g. The latter is easy to obtain from the auxiliary equation (coit h) inl = coit f whose proof is a routine.
For the direction from CElg#(C) to Cz# , we have to prove the two axioms of Eilenberg-Moore algebras. The harder one is out† z#(out†) = out† μν and it is obtained from the instance of compositionality (out □ out)† inr = (out† • out)† by establishing out† [id, μν] = (out □ out)† and out† z#(out†) = (out† • out)†. Further calculations ensure that the correspondence between CElg#(C) and Cz# is functo- rial and moreover an isomorphism.	2
Let us illustrate Theorem 5.7 by revisiting Example 4.10.
Example 5.8 Recall that we consider the parametrized monad X #Y = X +Y ×Y so that z#X is the set of finite and infinite binary trees whose leaves are labeled in X. The fact that (Sj, seq or : Sj + Sj × Sj → Sj, --†) is a #-algebra means, equivalently, that Sj is an z#-algebra. In particular, the z#-algebra structure is a function Seq or : z#Sj → Sj that transforms a given binary tree over Sj to a single element of Sj calculated by using the depth-first search strategy seeking the first leaf of the given tree that is labeled by S: In case of success, the answer is in S,

otherwise the answer is either 0 ∈ Sj meaning that no element from S was found and ⊥ in case of divergence (i.e. the procedure arrived in an infinite branch before any element from S was detected).
Note further that any function f : X → S + X × X = S # X represents a graph as explained in Example 4.10. The unique map coit f : X → z#S into the final coalgebra then computes for every node x ∈ X its tree unfolding. Now, starting with a predicate p : S → 2, the function g† : X → Sj defined in Example 4.10 is equal to the composition


coit f
z#(p?)
j	Seq or	j

X −−−−−−→ z#S −−−−−−→ z#S −−−−−−→ S .

Indeed, by Theorem 5.7, g† = Seq or (coit g)= Seq or coit((p?+ id) f ) and the rest follows by Lemma 5.6.
We proceed with the goal of showing that the final coalgebras νγ. X # γ are, equivalently, the free complete Elgot #-algebras. In fact, given a final (X # --)- coalgebra outX : z#X → X # z#X, it follows from (the proof of) Theorem 5.7 that z#X carries the free z#-algebra on X, and therefore it carries the free complete Elgot #-algebra on X (because the isomorphism of categories preserves freeness of algebras). It is not difficult to work out that the following morphisms


out
#id	m|#X
out-1

z#X # z#X	X
(X # z#X) # z#X	X
X # z#X
X  z#X



and

|#X
X	X

X # z#X

out-1

z#X

form the algebra structure and universal morphism of a free complete Elgot algebra for # on X. The iteration operator on z#Y is obtained as follows. Given e : X → z#Y # X one forms the following coalgebra c : z#Y + X → Y # (z#Y + X) for Y # --:


z#Y + X
X
|#Y
,e]
z#Y # X
out #id
(Y # z#Y ) # X


Y # (z#Y + X)

|#Y +X Y
(id#inl)#inr
(Y # (z#Y + X)) # (z#Y + X)

Then one puts e† = (coit c) inr.
Conversely, we have the following result.
Theorem 5.9 Suppose that ϕX : FX # FX → FX and ηX : X → FX form a free complete Elgot #-algebra on X. Then


X # FX 
ηX #id
ϕ
FX # FX  FX 

is an isomorphism, and its inverse is the structure of a ﬁnal (X # --)-coalgebra.

The proof of the above bijective correspondence between final (X #--)-coalgebras and free complete Elgot #-algebras is a non-trivial generalization of the proof of [5, Theorem 5.4] from complete Elgot algebras for endofunctors to those for parametrized monads; here we have seen one direction of the bijective correspon- dence as a consequence of Theorem 5.7 while we outline the proof of Theorem 5.9 in the full version of the paper.
Corollary 5.10 A free complete Elgot #-algebra on X is equivalently a ﬁnal coal- gebra for X # --.
To conclude the present section, we show that surprisingly, in any free complete Elgot #-algebra FY the iteration operator always assigns a unique solution to any morphism e : Y → FY # Y .
Proposition 5.11 Suppose that ϕY : FY # FY → FY and ηY : Y → FY form a free complete Elgot #-algebra on Y . Then for every e : X → FY # X, e† : X → FY is a unique solution, i.e. a unique morphism satisfying the solution axiom with e.

Proof. Recall first from Theorem 5.9 that FY is (equivalently) a final (Y # --)- coalgebra with the structure t : FY → Y # FY obtained as an inverse of


ηY #id	ϕY
Y # FY −−−−−−→ FY # FY −−−−→ FY.


Let e : X → FY # X and consider the following (Y # --)-coalgebra


e = (FY # X
t#e
(Y # FY ) # (FY # X)


(id#uX  )#(id#id)
mFY #X

(Y # (FY # X)) # (FY # X) Y
Y # (FY # X)).



Now let d : X → FY be any solution of e, i.e. we have d = ϕY (FY # d)e. We will prove below that ϕY (FY # d): FY # X → FY is a coalgebra homomorphism from e to t. Since e does not depend on the solution d we then conclude that

e† = ϕY (id # e†)e = ϕY (id # d)e = d


using finality of FY in the middle step.

To finish the proof consider the following diagram:


FY # X
id#d
ϕY
FY # FY  FY 


t#id


t#e
(Y # FY ) # FY	FY 





(Y # FY ) # (FY # X)


id#(id#d)
id#ϕY

(Y # FY ) # (FY # FY )	Y # FY 



(id#uX
)#id
(id#uFY )#id
(id#ϕY )#ϕY


(Y # (FY # X)) # (FY # X)  (Y # (FY # FY )) # (FY # FY )
(id#(id#d))#(id#d)

FY #X Y

FY #FY Y



Y # (FY # X)
id#(id#d)
Y # (FY # FY )
id#ϕY
Y # FY 

Note first that the left-hand edge is e. The upper left-hand square commutes since
d is a solution of e, for the part below it use that (id # d) uX	FY holds since
id # d is a monad morphism, and the lower left- and right-hand part commute by the laws of #. That the upper-right hand part commutes follows from the proof of Theorem 5.9, and the remaining little inner part commutes since ϕY uFY = idFY , which holds because ϕY is the structure of a #-algebra. Hence ϕY (id # d) is a coalgebra homomorphisms as desired, which completes the proof.	2
Algebras of Complete Elgot Monads
We are now in a position to apply the results on complete Elgot #-algebras de- veloped in the previous sections to explore the connection between complete Elgot monads and complete Elgot algebras.
Recall that given a monad T and an endofunctor Σ over C, X # Y = T (X +ΣY ) is a parametrized monad and therefore, by Proposition 5.1, TΣ given by (★) is a monad. We reserve notation Tν for the special case when Σ = Id:
TνX = νγ. T (X + γ).
From a computational point of view, TνX can be considered as a type of pro- cesses triggering a computational effect formalized by T at each step and eventually outputting values from X in case of successful termination. The unary operation captured by Σ = Id can be understood as delaying. This perspective was previ- ously pursued in [15]. Now, if T is a complete Elgot monad, or more generally, any

monad equipped with an iteration operator, we can define a collapsing morphism
δX : TνX → TX as follows:

δ	outX	 †

(3)

which intuitively flattens every possibly infinite sequence of computational steps of
TνX into a single step of TX. Let us illustrate this with the following toy example.

Example 6.1 Let TX = Pω (A٨ × X) where Pω is the countable powerset functor and A is some fixed alphabet of actions like in Example 1.1. We extend T to a monad T by putting
ηX(x)= {(ε, x)} and f ٨(s ⊆ A٨ × X)= {(wwj, y) | (w, x) ∈ s, (wj, y) ∈ f (x)},
where ε ∈ A٨ is the empty word and f : X → Pω (A٨ × Y ). It is easy to see that T is an ω-continuous monad (see Example 3.2) and hence a complete Elgot monad with the iteration operator defined using least fixed points. An element of TX is intuitively a countably branching process, with results in X, at each step capable of executing a finite series of actions. Now the collapsing morphism (3) for every process p ∈ Tν{C} calculates the set tr(p) ⊆ A٨ of all sucessful traces of p.
δTX	μX
Tν-algebra and hence, by Theorem 5.7, a complete Elgot #-algebra. Hence, for a complete Elgot monad T, its free algebras are complete Elgot #-algebras. Our next question concerns the converse: Is it possible to equip a given monad T with an iteration operator provided that free T-algebras are equipped with structures of complete Elgot #-algebras in a coherent way? It turns out that without any further assumptions on the category of complete Elgot #-algebras almost all laws of complete Elgot monads become derivable. More precisely, we introduce the following class of monads.
Definition 6.2 A monad T is called a weak complete Elgot monad if it is equipped with an iteration operator --† that satisﬁes fixpoint, naturality, and uniformity ax- ioms and the following identity: for any g : X−⬦→Y + X, f : Y −⬦→Z + Y we have

[inl,g]

f+id
 †	g†	f †


(See Fig. 3 for the pictorial form.)
It is relatively easy to deduce (4) from the codiagonal identity, hence we obtain
Proposition 6.3 Any complete Elgot monad is a weak complete Elgot monad.
We now can establish a tight connection between weak complete Elgot monads and complete Elgot #-algebras.
Theorem 6.4 Let T be a monad on C and let X # Y = T (X + Y ).


=



Fig. 3. The additional axiom for weak complete Elgot monads.

If T = (T, η, --٨, --†) is a weak complete Elgot monad then CT is isomorphic to the full subcategory of CElg#(C) formed by those complete Elgot #-algebras (A, a : T (A + A) → A, --‡) which factor through T ∇ : T (A + A) → TA and for which e‡ = a (T inl) e† for every e : X → T (A + X).
Conversely, any functor J : CT → CElg#(C) sending a T-algebra a : TA → A to a (T ∇): T (A+A) → A and identical on morphisms induces a weak complete Elgot monad structure on T as follows:
e : X → T (Y + X)
e† = (T (η + id) e)‡ : X → TY	(5)
where --‡ is the iteration operator on J(TY, μ) (by Clause (i), J is then full and faithful).
Remark 6.5 Note that Theorem 6.4(i) can be seen as an analogue of Corollary 4.6 for complete Elgot #-algebras.
If CElg#(C) additionally satisfies a variant of the codiagonal identity, the construc- tion from Clause (ii) of Theorem 6.4 produces precisely complete Elgot monads.
Theorem 6.6 Let T be a monad on C, let X # Y = T (X + Y ) and let J : CT → CElg#(C) be a functor as in Clause (ii) of Theorem 6.4. Then T is equipped with the structure of a weak complete Elgot monad given by (5), and moreover T is a complete Elgot monad iff every (A, a, --‡) in the image of J satisﬁes the equations


X A#X
e)‡ = (e‡)‡	(6)

for every e : X → (A # X) # X (this uses the fact that A # X = T (A + X) is a free
T-algebra and hence a complete Elgot #-algebra).
Conclusions and Further Work
We introduced the notion of complete Elgot algebra for a parametrized monad, based on the previous work [4, 28]. We showed that the category of complete Elgot algebras for a parametrized monad # is isomorphic to the category of Eilenberg- Moore algebras for the monad νγ. -- #γ whenever the latter exists. As the category of complete Elgot #-algebras is given axiomatically, this can be considered as a form of soundness and completeness result, specifically, it indicates that algebras for νγ. -- #γ are subject to a lightweight theory of (uniform) iteration.

We explored the connection between complete Elgot #-algebras for X # Y = T (X + Y ) and Eilenberg-Moore algebras of complete Elgot monads, i.e. monads from [14] supporting a uniform iteration operator satisfying standard axioms of iteration. Specifically, we showed that monads T whose algebras are coherently equipped with the structure of a complete Elgot #-algebra are precisely complete Elgot monads with the codiagonal axiom replaced by its weakened form (Theo- rem 6.4). Moreover, if the category of complete Elgot #-algebras satisfies a variant of the codiagonal law, such monads T are complete Elgot monads (Theorem 6.6).
As an open problem we leave the question whether assumption (6) on complete Elgot algebras in Theorem 6.6 can be lifted. If this was the case, then the notions of weak complete Elgot monads and complete Elgot monads would be equivalent.
We believe that the results we obtained are potentially useful for facilitating constructions over complete Elgot monads, in particular we seek a conceptual sim- plification for the sophisticated proofs underlying the main result of [14] stating that (★) is a complete Elgot monad whenever T is. Also we are interested in ap- plications of our results to semantics of abstract side-effecting processes in the style of [15] under equivalences coarser than the behavioral equivalence.

References
“Haskell 98 Language and Libraries — The Revised Report,” Cambridge University Press, 2003, also:
J. Funct. Prog. 13 (2003).
Aczel, P., J. Ad´amek, S. Milius and J. Velebil, Infinite trees and completely iterative theories: a coalgebraic view, Theoretical Computer Science 300 (2003), pp. 1–45.
Ad´amek, J., R. B¨orger, S. Milius and J. Velebil, Iterative algebras: How iterative are they?, Theory Appl. Cat. 19 (2008), pp. 61–92.
Ad´amek, J., S. Milius and J. Velebil, Iterative algebras for a base, Electr. Notes Theor. Comput. Sci.
122 (2005), pp. 147–170.
Ad´amek, J., S. Milius and J. Velebil, Elgot algebras, Log. Methods Comput. Sci. 2 (2006), pp. 1–31.
Ad´amek, J., S. Milius and J. Velebil, Bases for parametrized iterativity, Inform. and Comput. 206
(2008), pp. 966–1002.
Ad´amek, J., S. Milius and J. Velebil, Equational properties of iterative monads, Information and Computation 208 (2010), pp. 1306 – 1348.
Ad´amek, J., S. Milius and J. Velebil, Elgot theories: a new perspective of the equational properties of iteration, Math. Structures Comput. Sci. 21 (2011), pp. 417–480.
Benton, N. and M. Hyland, Traced premonoidal categories, ITA 37 (2003), pp. 273–299.
Bloom, S. L. and Z. E´sik, “Iteration theories: the equational logic of iterative processes,” Springer-Verlag New York, Inc., New York, NY, USA, 1993.
Capretta, V., General recursion via coinductive types, Logical Methods in Computer Science 1 (2005).
Elgot, C. C., Monadic computation and iterative algebraic theories*, in: H. Rose and J. Shepherdson, editors, Logic Colloquium ’73Proceedings of the Logic Colloquium, Studies in Logic and the Foundations of Mathematics 80, Elsevier, 1975 pp. 175–230.
E´sik, Z. and S. Goncharov, Some remarks on Conway and iteration theories (2016), arXiv preprint:
http://arxiv.org/abs/1603.00838.
Goncharov, S., C. Rauch and L. Schr¨oder, Unguarded recursion on coinductive resumptions, in: Proc. Mathematical Foundations of Programming Semantics XXXI, MFPS 2015, ENTCS, 2015.

Goncharov, S. and L. Schro¨der, A coinductive calculus for asynchronous side-effecting processes, Information and Computation 231 (2013), pp. 204 – 232.
Hasegawa, M., Recursion from cyclic sharing: Traced monoidal categories and models of cyclic lambda calculi, in: Proc. 3rd International Conference on Typed Lambda Calculi and Applications, Lecture Notes Comput. Sci. 1210 (1997), pp. 196–213.
Hyland, M., G. Plotkin and J. Power, Combining effects: Sum and tensor, Theoret. Comput. Sci. 357
(2006), pp. 70–99.
Joyal, A., R. Street and D. Verity, Traced monoidal categories, Mathematical Proceedings of the Cambridge Philosophical Society 119 (1996), pp. 447–468.
Kelly, G., A unified treatment of transfinite constructions for free algebras, free monoids, colimits, associated sheaves, and so on, Bulletin of the Australian Mathematical Society 22 (1980), pp. 1–83.
Lawvere, W., Functorial semantics of algebraic theories, Proc. Natl. Acad. Sci. USA 50 (1963), pp. 869– 872.
Mac Lane, S., “Categories for the Working Mathematician,” Springer, 1971.
Moggi, E., Notions of computation and monads, Inf. Comput. 93 (1991), pp. 55–92.
Plotkin, G. and J. Power, Adequacy for algebraic effects, in: FoSSaCS’01, LNCS 2030, 2001, pp. 1–24.
Plotkin, G. and J. Power, Notions of computation determine monads, in: FoSSaCS’02, LNCS 2303
(2002), pp. 342–356.
Rutten, J., Universal coalgebra: a theory of systems, Technical report, Amsterdam, The Netherlands, The Netherlands (1996).
Rutten, J. and D. Turi, Initial algebra and final coalgebra semantics for concurrency, Springer-Verlag, 1994 pp. 530–582.
Simpson, A. and G. Plotkin, Complete axioms for categorical fixed-point operators, in: In Proceedings of 15th Annual Symposium on Logic in Computer Science, 2000, pp. 30–41.
Uustalu, T., Generalizing substitution, ITA 37 (2003), pp. 315–336.
