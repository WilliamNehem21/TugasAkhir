

Electronic Notes in Theoretical Computer Science 256 (2009) 103–118
www.elsevier.com/locate/entcs
Product of Graphs and Hybrid Logic
Mario R. F. Benevides1
Computer Science Department and Systems and Computer Engineering Program Federal University of Rio de Janeiro
Brazil
L. Menasch´e Schechter2
Systems and Computer Engineering Program Federal University of Rio de Janeiro
Brazil

Abstract
Left and right commutativity and the Church-Rosser and reverse Church-Rosser properties are necessary conditions for a graph (frame) to be a (non-trivial) product of two other graphs, but their conjunction is not a sufficient condition. This work presents a fifth property, called H-V intransitivity, that, when added to the four previous properties, results in a necessary and sufficient condition for a finite and connected graph to be a product. Then, we show that although the first four properties can be defined in a modal logic (the reverse Church-Rosser property requires a converse modality), H-V intransitivity is not modally definable. We also show that no necessary and sufficient condition for a graph to be a product can be modally definable. Finally, we present a formula in a hybrid language that defines H-V intransitivity.
Keywords: Product of Graphs, H-V Intransitivity, Modal Languages, Modal Definability, Hybrid Languages


Introduction
The goal of this work is to find a necessary and sufficient condition for a graph (frame) to be isomorphic to a (cartesian) product 3 of two non-trivial graphs and to verify whether this condition can be expressed in a modal language or in some hybrid language.
In [7], three properties that are satisfied in graphs that are products are pre- sented: left commutativity, right commutativity and the Church-Rosser property.

1 Email: mario@cos.ufrj.br
2 Email: luis@cos.ufrj.br
3 In graph theoretical terminology, a product of two graphs would be called a bigraph, since it has two sets of edges. More generally, in graph theory, graph-like structures with multiple sets of edges are called multi-graphs. In the context of modal logics and Kripke semantics, this notational difference is often lost and all these structures are called simply labeled graphs.

1571-0661 © 2009 Elsevier B.V. Open access under CC BY-NC-ND license.
doi:10.1016/j.entcs.2009.11.008

However, although these properties, together with the reverse Church-Rosser prop- erty, are necessary for a graph to be a product, they are not sufficient (as illustrated by an example in [7]). There are graphs that satisfy left and right commutativity and the Church-Rosser and reverse Church-Rosser properties, but cannot be de- composed as a product of two other graphs.
In this work, we introduce a new property called H-V intransitivity that, together with the previous ones, form a necessary and sufficient condition for a finite and connected graph to be a product. The proof of the necessity of these properties is fairly simple and is done directly, without the need to assume that the graph is finite or connected. On the other hand, the proof of the sufficiency is done in two steps. First, we prove that if a finite and connected graph satisfies the five properties stated above, then its horizontal and vertical components must satisfy a particular isomorphism. Then, we show that if a finite and connected graph satisfies H-V intransitivity and its components satisfy this particular isomorphism, then the graph is a product.
The limits to the expressive power of basic modal languages are fairly well known. There are a series of standard results that state that frames that are “similar” in a number of ways must agree on the validity of formulas [3]. Using these techniques, we show that the property of H-V intransitivity is not modally definable. In fact, we also show that no condition that is necessary and sufficient for a graph to be a product can be modally definable.
Hybrid logics are extensions of modal logics that allow explicit references to in- dividual states of a model. Their goal is to extend the expressive power of ordinary modal logics. Besides proposition symbols, they have a second set of atomic formu-
las, called nominals, which have the property of being satisfied at exactly one state
[1,2]. Using a hybrid language, we are able to express H-V intransitivity.
Products of graphs and multi-graphs in general come up naturally as an exten- sion of ordinary Kripke semantics to multi-dimensional modal logics. [7] presents a good textbook discussion of multi-dimensional modal logics and provides many examples of products of modal logics, where the semantics is built using products of graphs. As an example of a concrete application of multi-dimensional modal logics with products of graphs, in [6] and [5], a multi-dimensional modal logic is used to express properties of distributed systems. This logic uses the transitive closure of a product of modal logics.
The paper is organized as follows. In section 2, we introduce the definition of a product of graphs and present four properties related to this definition: left and right commutativity and the Church-Rosser and reverse Church-Rosser properties. We also introduce a new property called H-V intransitivity. In section 3, we present the concept of graph decompositions and use it to prove that the five properties presented in the previous section form a necessary and sufficient condition for a finite and connected graph to be a product. Section 4 shows that the property of H-V intransitivity is not modally definable and that no necessary and sufficient condition for a graph to be a product can be modally definable. In section 5, we extend the modal language of the previous section to a hybrid language and show

that H-V intransitivity can be expressed by a hybrid formula. We summarize our results and present potential future works in section 6.
Product of Graphs
In this section, we define the product of two graphs, following [7]. The subscripts h and v refer to the geometrical intuition of the horizontal and vertical accessibility relations.
Definition 2.1 Given two directed graphs G1 = ⟨V1, E1⟩ and G2 = ⟨V2, E2⟩, we define their product G, notation G = G1 × G2, as the graph G = ⟨V1 × V2, Eh, Ev⟩, where for all x, u ∈ V1 and y, v ∈ V2
⟨x, y⟩Eh⟨u, v⟩ iff xE1u and y = v and
⟨x, y⟩Ev⟨u, v⟩ iff yE2v and x = u.
An example of a product graph is shown in figure 1.


1	(a,1)

a	b		(a,2) 2

3	(a,3)

(b,1)


(b,2)


(b,3)

G1	G2	G1 x G2
Fig. 1. Product of Graphs
In this work, we would like to identify a necessary and sufficient condition for a graph to be a product of two other graphs. In [7], three properties that are satisfied in graphs that are products are presented. These properties, together with the reverse Church-Rosser property, are necessary for a graph to be a product (figure 2):
Left Commutativity: ∀x∀y∀z(xEvy ∧ yEhz → ∃u(xEhu ∧ uEvz))
Right Commutativity: ∀x∀y∀z(xEhy ∧ yEvz → ∃u(xEvu ∧ uEhz))
Church-Rosser Property: ∀x∀y∀z(xEvy ∧ xEhz → ∃u(yEhu ∧ zEvu))
Reverse Church-Rosser Property: ∀x∀y∀z(yEvx ∧ zEhx → ∃u(uEhy ∧ uEvz))


y	z	u



x	u	x
z	y	u	z	x



y	x	z	u	y

Fig. 2. Left and Right Commutativity and Church-Rosser and Reverse Church-Rosser Properties
However, although these properties are necessary for a graph to be a product, they are not sufficient: there are graphs that satisfy left and right commutativity and the Church-Rosser and reverse Church-Rosser properties, but cannot be decomposed as a product of two other graphs, as shows an example from [7] in figure 3.

h
Fig. 3. Counterexample to the sufficiency of the basic properties
In order to obtain a necessary and sufficient condition we need to add a fifth property to the four stated before. We call it H-V intransitivity.
Definition 2.2 We say that a graph G satisfies H-V intransitivity if and only if every triple ⟨u, v, w⟩ of vertices of G such that u /= v, v /= w, there is an undirected path through edges of Ev from u to v and there is an undirected path through edges of Eh from v to w also satisfies the following three conditions:
u /= w;
⟨u, w⟩ /∈ Eh;
⟨u, w⟩ /∈ Ev.
Let xUhy and xUvy denote that there is an undirected path through edges of
Eh (Ev, respectively) from x to y. H-V intransitivity is illustrated in figure 4.
y	Uh	z

Uv

x
Fig. 4. H-V Intransitivity
Definition 2.2 lists the three conditions that we need for H-V intransitivity. However, it turns out that they can be simplified, as, under the hypotheses in definition 2.2, the first condition implies the other two. Suppose that all triples
⟨u, v, w⟩ that satisfy the hypotheses in definition 2.2 also satisfy the first condition (u /= w). Now, suppose that there is one such triple ⟨a, b, c⟩ such that ⟨a, c⟩ ∈ Eh (does not satisfy the second condition). Then, aUvb, bUhc and aEhc. This implies that bUha. But then, ⟨a, b, a⟩ is a triple that satisfies the hypotheses in definition
2.2 but does not satisfy the first condition (u /= w), which is a contradiction to our initial assumption. An analogous argument can be made for the third condition as well.
Thus, when we need to test whether a graph satisfies H-V intransitivity, we just need to verify the first condition in definition 2.2. On the other hand, when we know that a graph satisfies H-V intransitivity, we may use any one of the three conditions according to our needs.
Following the above simplification, H-V intransitivity can be described in the following way:
6x6y6z((xUvy Λ yUhz Λ x /= y Λ y /= z) → (x /= z)) 4 .

4 It is important to notice that H-V intransitivity cannot be expressed by a first order formula, since the

Graph Decomposition
The problem of graph decomposition consists of, given a graph, to determine wheth- er this graph can be decomposed in a product of two non-trivial graphs. A graph is said to be trivial if it has only one vertex and no edges. Every graph can be described as a product of itself with a trivial graph. In this work, we consider a restricted version of this problem.
Problem 3.1 Given a ﬁnite, directed and weakly connected 5 (called just connected from now on) graph G = ⟨V, Eh, Ev⟩, determine whether G is isomorphic to a product G' = G1 × G2, where G1 and G2 are both non-trivial.
In the general problem, the graph would not have to be necessarily finite or connected and the labelling of the edges into Eh and Ev would not necessarily be given a priori. In the case where the graph G = ⟨V, E⟩ is directed, finite and connected, but the labelling of the edges is not given, G is a product if and only if there is a suitable labelling of the edges into Eh and Ev such that G' = ⟨V, Eh, Ev⟩ is a product in the restricted case above.
Hypothesis 3.2 From now on, all the graphs G are considered to be directed, ﬁnite and connected and to be given in the form G = ⟨V, Eh, Ev⟩.
Remark 3.3 We denote by V(G) the set of vertices of a graph G.
In this section, we want to prove that a finite and connected graph G is a product if and only if it satisfies left and right commutativity, the Church-Rosser and reverse Church-Rosser properties and H-V intransitivity. We start with the simpler direction.
Theorem 3.4 If G is a product, then G satisﬁes left and right commutativity, the Church-Rosser and reverse Church-Rosser properties and H-V intransitivity.
Proof. We start with left commutativity. Let us take three vertices u, v and w of G such that uEvv and vEhw. As G is a product G1 × G2, u = (u1, u2), v = (v1, v2) and w = (w1, w2). Then, as uEvv, u1 = v1 and u2E2v2 and, as vEhw, v2 = w2 and v1E1w1. Now, take the vertex x = (x1, x2) = (w1, u2) (this vertex exists, since V(G) = V(G1) × V(G2)). Then, as u1 = v1, x1 = w1 and v1E1w1, then u1E1x1. This, together with u2 = x2, implies that uEhx. Now, as u2 = x2, v2 = w2 and u2E2v2, then x2E2w2. This, together with x1 = w1, implies that xEvw. Right commutativity and the Church-Rosser and reverse Church-Rosser properties follow by analogous arguments.
Now, suppose that G does not satisfy H-V intransitivity. Then, we have vertices x, y and z, such that x /= y, y /= z, there is an undirected Ev-path from x to y and an undirected Eh-path from y to z and x = z. As G is a product, x = (x1, x2), y = (y1, y2) and z = (z1, z2). Then, as there is an undirected Ev-path from x to

definitions of Uh and Uv depend on transitive closures. Nevertheless, this property is still elementary, as it can be defined by a set of first order formulas.
5 A graph G is weakly connected if, for any pair of vertices u and v of G, there is an undirected path from
u to v in G.

y, then x1 = y1. Also, as there is an undirected Eh-path from y to z, y2 = z2. As x = z, then z1 = x1 = y1 and x2 = z2 = y2, which implies that the three vertices are the same, contradicting the fact that x /= y and y /= z.	 
Notice that, in this direction of the proof, we make no use of hypothesis 3.2. This means that theorem 3.4 holds for any graph G. Now, we proceed to prove the other direction.
Definition 3.5 Let G be a graph G = ⟨V, Eh, Ev⟩ and let Gh = ⟨V, Eh⟩ and Gv = ⟨V, Ev⟩ be subgraphs of G. The horizontal components are the maximal connected subgraphs of Gh, {G1 , ..., Gm}.  Analogously, the vertical components
h	h
are the maximal connected subgraphs of Gv, {G1, ..., Gn}. When it is not relevant
v	v
whether the component or edge is horizontal or vertical, we use x to stand for either
h or v and x to stand for the other direction.
Remark 3.6 From now on, every time that we need to consider a pair of x- components Gi and Gj , they do not need to be distinct, unless explicitly mentioned.
x	x
Definition 3.7 We say that a x-component Gi is a neighbor to the x-component

j if there is an edge ⟨u, w⟩∈ Ex
such that u ∈ Gi
and w ∈ Gj . Notice that it is

possible for a component to be a neighbor to itself.
Definition 3.8 Let fij be the (possibly partial and multi-valued) map that asso-

ciates to each vertex u ∈ Gi the set of vertices w such that ⟨u, w⟩∈ Ex
and w ∈ Gj .

We say that fij is the induced map from Gi to Gj .
x	x	x
Proposition 3.9 If a graph satisﬁes left and right commutativity and the Church- Rosser and reverse Church-Rosser properties, it also satisﬁes the following proper- ties:
Extended Left Commutativity: 6x6y6z(xUl y Λ yUkz → ∃u(xU ku Λ uUl z));
v	h	h	v
Extended Right Commutativity: 6x6y6z(xUky Λ yUl z → ∃u(xU l u Λ uUkz)).
h	v	v	h
where uUkv and uUl v denote that there is an undirected path through edges of Eh
h	v
(Ev, respectively) of length k (l) from u to v.
Proof. These properties follow by an straightforward induction on the length of the paths, using one of the four hypotheses for each of the four possible cases of edge incidences in the “corner” vertices: horizontal and vertical inward (reverse Church- Rosser), horizontal inward and vertical outward (right commutativity), horizontal outward and vertical inward (left commutativity) and horizontal and vertical out- ward (Church-Rosser).	 
Proposition 3.10 Let G be a graph that satisﬁes left and right commutativity, the Church-Rosser and reverse Church-Rosser properties and H-V intransitivity and Gi

be a neighbor to Gj . Then, the induced map fij from Gi to Gj
is an isomorphism.

x	x	x	x
Proof. We show the proof for the case of fij.
fij is a function: Suppose that there are vertices u, v and w, such that v /= w,

u ∈ Gi , v, w ∈ Gj and fij(u) = {v, w} (⟨u, v⟩, ⟨u, w⟩ ∈ E
). If u /= v, then

v	v	v	h

we have an undirected Eh-path from u to v, an undirected Ev-path from v to w (since they are in the same vertical component) and an edge from u to w, contradicting H-V intransitivity. If u = v, then we have an undirected Eh path from v to w and an undirected Ev-path from w to v, also contradicting H-V intransitivity.
fij is injective: Analogous to the previous item.
Im(fij) = V(Gj ) (fij is surjective): Let v in Gj . We need to find a vertex u
v	v	v	v

in Gi such that ⟨u, v⟩∈ Eh
. As Gi is a neighbor to Gj , there are vertices x in

i and y in Gj such that ⟨x, y⟩∈ Eh. We may assume that y /= v, otherwise
the proof is over. Now, v and y are in Gj , so yU v. Then, by extended right
v	v
commutativity, there is u such that xUvu, which means that u ∈ Gi , and uEhv.
Dom(fij) = V(Gi ) (fij is total): Analogous to the previous item, using ex-
v	v	v
tended left commutativity instead.
uE w if and only if fij(u)E fij(w): First of all, uE fij(u) and wE fij(w).
v	v	v v	h v	h v
If uE w, we can use left commutativity to conclude that fij(u)E fij(w). On
v	v	v v
the other hand, if fij(u)E fij(w), we can use right commutativity to conclude

that uEvw.
v	v v

The case of fij is entirely analogous.	 

Definition 3.11 If Gi
is a neighbor to Gj
and the induced map fij is an isomor-

phism between Gi and Gj , we call fij a primitive isomorphism.
x	x	x
Now, in a case such as the one in the above proposition, where the induced maps are isomorphisms, we can easily extend them beyond neighbor components.
Remark 3.12 If fij is an isomorphism, then its inverse is also an isomorphism and
is denoted by fji.
Remark 3.13 If all the elements in the set {fi,i+1,fi+1,i+2,...,fj−1,j} are isomor-

phisms, then
x	x	x

fij = fj−1,j ◦ ··· fi+1,i+2 ◦ fi,i+1
x	x	x	x
is also an isomorphism.
Definition 3.14 If fij is a primitive isomorphism or is obtained from primitive
isomorphisms using composition and inverse, we call fij an orthogonal isomorphism
or O-isomorphism. By this definition, if fij is an O-isomorphism and w = fij(u),
x	x
then there is an undirected Ex-path from u to w.
Lemma 3.15 Let G be a graph that satisﬁes left and right Commutativity, the Church-Rosser and reverse Church-Rosser properties and H-V intransitivity. Then,

for all pairs Gi
and Gj
of x-components, there is an O-isomorphism fij
between

them.
Proof. The proof follows from proposition 3.10, remarks 3.12 and 3.13 and the fact that G is finite and connected.	 

Proposition 3.16 Let G be a graph with k horizontal components and l vertical

components. If G satisﬁes H-V intransitivity and, for every pair Gi
and Gj
of x-

components such that Gi is a neighbor to Gj , the induced map fij is an isomorphism
x	x	x
between them, then
All horizontal components are isomorphic between themselves and contain l
vertices each and
All vertical components are isomorphic between themselves and contain k ver- tices each.
Proof. First, as G is connected, for every x-component Gi there must be a compo-

nent Gj
such that either Gi
is a neighbor to Gj
or Gj
is a neighbor to Gi . Then,

since the induced maps are isomorphisms, it is straightforward to conclude that all
components are isomorphic between themselves.
Now, to show that each horizontal component contains l vertices, where l is the number of vertical components, and each vertical component contains k vertices, where k is the number of horizontal components, we proceed by a double induction on k and l. Start with k = l = 1. Every graph in this case must have only one vertex. Since we have only one component of each kind, if we had two distinct vertices u and w in the graph, we would have to have both an undirected Eh-path and an undirected Ev-path between u and w, contradicting H-V intransitivity. The only edges that this graph may have are horizontal and vertical loops. It is important to notice that the addition or deletion of loops does not change the number of components. In this basic case, the proposition is true.
Now, suppose that the proposition is true for k = 1 and l < n. Consider a graph with 1 horizontal component and n vertical components that satisfies the hypotheses. If we take the subgraph generated by the vertices in the n − 1 first vertical components, the proposition holds in it. Then, the horizontal component contains n − 1 vertices and the vertical components contain 1 vertex each. Now, consider the n-th vertical component Gn. As G is connected, there must be a vertical
component Gi such that either Gi is a neighbor to Gn or Gn is a neighbor to Gi .
v	v	v	v	v
Besides that, we have an isomorphism between these components. This means that this vertical component also contains 1 vertex and this vertex is contained in the horizontal component. Thus, the proposition is true.
Finally, suppose that the proposition is true for k < m and l = n. Consider a graph with m horizontal components and n vertical components that satisfies the hypotheses. If we take the subgraph generated by the vertices in the m − 1 first horizontal components, the proposition holds in it. Then, the horizontal components contain n vertices each and the vertical components contain m − 1 vertices each. Now, consider the m-th horizontal component Gm. As G is connected, there must
be an horizontal component Gi such that either Gi is a neighbor to Gm or Gm is a
h	h	h	h
neighbor to Gi . Besides that, we have an isomorphism between these components. This means that this horizontal component also contains n vertices and each one of these vertices is contained in a distinct vertical component. Thus, the proposition is true.	 

Lemma 3.17 Let G be a graph. If G satisﬁes H-V intransitivity and, for all pairs
i  and Gj of x-components, there is an O-isomorphism fij between them, then G
is (isomorphic to) a product.
Proof. Using proposition 3.16, let G∗ = ⟨Vh, Eh⟩ be an arbitrary horizontal com-
ponent (among a total of k) and G∗ = ⟨Vv, Ev⟩ be an arbitrary vertical compo-
nent (among a total of l), with Vh = {h1,..., hl} and Vv = {v1,..., vk}.  Let
P = G∗ × G∗ = ⟨Vh × Vv, EP , EP ⟩. We want to prove that there is an isomorphism
h	v	h	v
between G and P .
Let us consider the function L(u) = (h ,v ), if u ∈ Gi and u ∈ Gj .
j	i	h	v
L is injective: Suppose that there are two distinct vertices u and w in G such that L(u) = L(w) = (hj, vi). Then, they are in the same horizontal component
i and in the same vertical component Gj . This means that we have both an
undirected Eh-path and an undirected Ev-path between u and w, contradicting H-V intransitivity.
L is surjective: Suppose that there is no u in G such that L(u) = (hj, vi). Let

x ∈ Gi
and y ∈ Gj . Now, y must belong to a horizontal component, let us say

Gk. Because of the existence of an O-isomorphism between Gk and Gi , there
h	h	h
is w ∈ Gi such that there is an undirected Ev-path from y to w. This implies
that w is in the same vertical component of y. Then, w ∈ Gi and w ∈ Gj ,
which is a contradiction.

uE
w if and only if L(u)EP L(w): Suppose that u ∈ Gi and u ∈ Gj . Then,

h	h	h	v
L(u) = (u1, u2) = (hj, vi).  Now, w must also be in Gi .  Then, L(w) =
(w1, w2) = (hl, vi) for some l. Notice that the vertices u and w of Gi are,
respectively, on the same vertical components in G as the vertices hj and hl
of G∗ . Using the O-isomorphism between Gi and G∗ , as uEhw in Gi , then
h	h	h	h
u1Ehw1 in G∗ . This, together with u2 = w2 implies that L(u)EP L(w). Now,
h	h
suppose that L(u) = (u1, u2), L(w) = (w1, w2) and (u1, u2)EP (w1, w2). Then,
u2 = w2 = vi, which means that u, w ∈ Gi .  Besides that, u1Ehw1 in G∗ .

Thus, using the O-isomorphism between Gi
h	h
and G∗ , we get that uEhw.

uEvw if and only if L(u)EP L(w): Analogous to the previous item.


Theorem 3.18 If G satisﬁes left and right commutativity, the Church-Rosser and reverse Church-Rosser properties and H-V intransitivity, then G is a product.

Proof. Straightforward from lemmas 3.15 and 3.17.	 

Theorem 3.19 Let G be a graph. G is a product if and only if G satisﬁes left and right commutativity, the Church-Rosser and reverse Church-Rosser properties and H-V intransitivity.

Proof. Straightforward from theorems 3.4 and 3.18.	 

Modal Definability
In this section, we show that the property of H-V intransitivity is not modally definable. In fact, we also show that no condition that is necessary and sufficient for a graph to be a product can be modally definable. Even tough we restricted ourselves to finite and connected graphs in the previous section, this restriction is not necessary for the undefinability results presented in this section.

A Basic Modal Language
In this section, we define a modal language with a family of modal operators:  h,
  v,  −1,  −1, ◆h and ◆v.
h	v
Definition 4.1 Let us consider a modal language consisting of a set Φ of countably many proposition symbols (the elements of Φ are denoted by p, q, .. .), the boolean connectives ч and Λ and the modal operators  h,  v,  −1,  −1, ◆h and ◆v. The
h	v
formulas are defined as follows:
ϕ ::= p |T| чϕ | ϕ1 Λ ϕ2 |  hϕ |  vϕ |  −1ϕ |  −1ϕ | ◆hϕ | ◆vϕ.
h	v
We freely use the standard boolean abbreviations V, →, — and ⊥ and also the

abbreviation ˜xϕ = ч ˜xчϕ, where ˜
∈ { ,  −1, ◆}, ˜
is the correspondent 

with appropriate labels and color and x ∈ {h, v}.
We now define the structures in which we evaluate our formulas: frames and
models.
Definition 4.2 A frame is a tuple J = (V, Rh, Rv, Uh, Uv), where V is a set (finite or not) of vertices, Rh and Rv are binary relations over V, i.e., Rx ⊆ V × V , where x ∈ {h, v}, and Uh and Uv are the transitive closures of the relations Rh ∪ R−1 and
Rv ∪ R−1, respectively.
As we can see, a frame is essentially a graph with the two distinct sets of edges
Eh and Ev.
Definition 4.3 A model is a pair ł = (J, V), where J is a frame and V is a valuation function mapping proposition symbols into subsets of V , i.e., V : Φ '→ У(V ).
The notion of satisfaction is defined as follows:
Definition 4.4 Let ł = (J, V) be a model. The notion of satisfaction of a formula ϕ in a model ł at a vertex v, notation ł,v H ϕ, can be inductively defined as follows:
ł,v H p iff v ∈ V(p);
ł,v H T always;
ł,v H чϕ iff ł,v /H ϕ;
ł,v H ϕ1 Λ ϕ2 iff ł,v H ϕ1 and ł,v H ϕ2;

ł,v H xϕ iff there is a w ∈ V such that vRxw and ł,w H ϕ;
ł,v H −1ϕ iff there is a w ∈ V such that wRxv and ł,w H ϕ;
ł,v H ◆xϕ iff there is a w ∈ V such that vUxw and ł,w H ϕ. Here, x ∈ {h, v}.
If ł,v H ϕ for every vertex v in a model ł, we say that ϕ is globally satisﬁed in ł, notation ł H ϕ. And if ϕ is globally satisfied in all models ł of a frame J, we say that ϕ is valid in J, notation J H ϕ.
When we say that a formula φ defines or describes some graph property, this means that a graph G has the desired property if and only if J H φ, where J is the frame that represents G.
As shown in [7], left commutativity, right commutativity and the Church-Rosser property can be defined in the present logic by the following formulas:
φ1 =  v  hϕ —  h  vϕ (left and right commutativity);
φ2 =  h vϕ →  v hϕ (Church-Rosser property).
The reverse Church-Rosser property can then be defined by the following formula, analogous to φ2:
φ3 =  −1 −1ϕ →  −1  −1ϕ.
h	v	v	h

A Limitative Result
The limits to the expressive power of basic modal languages are fairly well known. There are a series of standard results that state that frames that are “similar” in a number of ways must agree on the validity of formulas. We can then use these results to prove that a certain property cannot be expressed by any modal formula. To do this, we take two frames that are “similar” and show that in one the desired property holds, while in the other it does not. We present one of these “similarity” results (more details about it and other related results may be found in [3]), and then we prove two results for graph products using it.
Definition 4.5 Let ł = (W, Rh, Rv, Uh, Uv, V) and ł' = (W', R' , R' ,U' ,U' ,
h	v	h	v
V') be two models. A function f : W → W' is a bounded morphism from ł to ł'
if it satisfies the following conditions:
w and f (w) satisfy the same proposition symbols;
f is a homomorphism with respect to Rx, x ∈ {h, v} (if wRxv, then f (w)R'
f (v));
if f (w)R' v', x ∈ {h, v}, then there is a v such that wRxv and f (v) = v';
if w'R' f (v), x ∈ {h, v}, then there is a w such that wRxv and f (w) = w'.
A similar definition can be given for a bounded morphism of frames, just removing the part of the above definition that deals with valuations (item (i)). If there is a bounded morphism from a model (frame) ł (J) to a model (frame) ł' (J'), we use the notation ł → ł' (J → J'). If there is a surjective bounded morphism,

then we say that ł' (J') isa bounded morphic image of ł (J) and use the notation
ł⇒ ł' (J ⇒ J').
The last item of the previous definition is usually not necessary. However, as the modalities −1 and ◆x deal with the inverses of the relations Rx, we have to enforce it to get the preservation result that we want. It may seem like conditions such as “if wUxv, then f (w)U' f (v)”, which is analogous to condition (ii), and others analogous to conditions (iii) and (iv) should also be added. However, this is not necessary, as the definition of Ux, with its use of transitive closure, and conditions (ii), (iii) and (iv) already imply such conditions.
Below is a basic theorem about modal definability that is going to be used to prove our results. Its proof for a language that contains only one modality can be found at [3]. It is not difficult to extend that proof to a language that contains a family of modalities, each with its accessibility relation.
Theorem 4.6 Let ł and ł' be two models such that ł→ ł'. Then, ł,w H φ
if and only if ł',f (w) H φ.
Corollary 4.7 Let J and J' be two frames such that J ⇒ J'. If J H φ, then
J' H φ.
Theorem 4.8 Neither H-V intransitivity nor its negation are modally deﬁnable.
Proof. In figure 5, let f = {(1, a), (2, b), (3, a), (4, b)} and g = {(a, A), (b, A)}. It is straightforward to prove that f and g are surjective bounded morphisms. It is also not difficult to see that the first and third graphs respect H-V intransitivity, while the second does not. By corollary 4.7, since neither H-V intransitivity nor its negation are preserved under bounded morphic images, they are not modally definable.	 


h,v
h
1
v	v
2
h
h,v

4

3


h,v	h,v


h,v

A

h,v	h,v
I	II	III

Fig. 5. Graph III is a bounded morphic image of graph II, which is a bounded morphic image of graph I (each undirected edge represents a pair of symmetric edges)

Theorem 4.9 No necessary and sufficient condition for a graph to be a product or for a graph not to be a product can be modally deﬁnable.
Proof. We take again the same bounded morphisms between the graphs in figure
5. It is not difficult to see that the first and third graphs are products while the second is not. By corollary 4.7, since neither the property of being a product nor the property of not being a product are preserved under bounded morphic images, they are not modally definable.	 

This is not the only possible proof of theorem 4.9. Readers familiar with products of logics may view the above theorem as a natural consequence of the completeness proof of the axiomatization for the logic K × K. However, as products of logics in general and their axiomatizations in particular are not thoroughly presented in this work, as the proof presented above for theorem 4.8 could not be substituted in a similar way and as the counter-example used in theorem 4.8 could also be used in theorem 4.9 without any change, it was our choice to prove both theorems through the use of bounded morphic images.

A Hybrid Extension
As was shown in the previous section, a basic modal language does not have enough expressive power to describe the properties that we want. In order to achieve our goal, we need a language that is more expressive. In this section we describe a simple hybrid language and then use it to define H-V intransitivity.

Language
A good way to improve the expressive power of a modal logic is to consider hybrid extensions of it. The fundamental resource that allows a logic to be called “hybrid” is a set of nominals. Nominals are a new kind of atomic symbol and they behave similarly to proposition symbols. The key difference between a nominal and a proposition symbol is related to their valuation in a model. While the set V(p) for a proposition symbol p can be any element of У(V ), the set V(i) for a nominal i has to be a singleton set. This way, each nominal is true at exactly one state of the model, and thus, can be used to refer to this unique state. This is why these logics are called “hybrid”: they are still modal logics, but they have the capacity to refer to specific states of the model, like in first-order logic.
The expressive power and computational complexity of a hybrid extension of a given modal logic usually lie between the ones of the original modal logic and the ones of first-order logic. This, however, depends on which operators, besides the nominals, are added to build the hybrid logic. With the addition of state-variables and quantifiers, it is possible to achieve full first-order expressivity and complexity (undecidability). For a general introduction to hybrid logics, [1] and [2] can be consulted.
Here, we consider the smallest hybrid extension of the modal logic presented in the previous section. We add only nominals and nothing else to the language.
Definition 5.1 Let us consider a hybrid language consisting of a set Φ of countably many proposition symbols (the elements of Φ are denoted by p, q, . . .), a set Ω of countably many nominals (the elements of Ω are denoted by i, j,.. .), such that Φ ∩ Ω = ∅, the boolean connectives ч and Λ and the modal operators  h,  v,  −1,
  −1, ◆h and ◆v. The formulas are defined as follows:
ϕ ::= p | i |T| чϕ | ϕ1 Λ ϕ2 |  hϕ |  vϕ |  −1ϕ |  −1ϕ | ◆hϕ | ◆vϕ.
h	v

The definition of a frame for this language is the same as definition 4.2, but the definition of a model is slightly different from definition 4.3.
Definition 5.2 A hybrid model is a pair ł = (J, V), where J is a frame and
V is a valuation function mapping proposition symbols into subsets of V , i.e., V : Φ '→ У(V ) and mapping nominals into singleton subsets of V , i.e, if i is a nominal then V(i) = {v} for some v ∈ V . We call this unique state that belongs to V(i) the denotation of i under V. We can also say that i denotes the single state belonging to V(i).
The notion of satisfaction is defined as follows:
Definition 5.3 The notion of satisfaction is defined adding the following extra clause to definition 4.4: ł,v H i iff v ∈ V(i).

Hybrid Deﬁnability
Using this hybrid language, we can now express H-V intransitivity.
Theorem 5.4 A graph G respects H-V intransitivity if and only if J H φ, where
J is the frame that represents G and φ is the formula
φ = (i л чj л ◆v(j л чk л ◆hk)) → чk.

Proof. (⇐) Suppose that J H φ but G does not respect H-V intransitivity. Then, there are at least three vertices x, y, z, x /= y and y /= z, in G such that xUvy, yUhz and x = z. We evaluate φ in a model with a valuation V such that V(i) = {x}, V(j) = {y} and V(k) = {z}. Then, it is straightforward to see that (J, V),x /H φ, which contradicts the fact that φ is valid in J.
(⇒) Suppose that G respects H-V intransitivity but J /H φ. Then, there is a valuation V and a vertex u such that (J, V),u /H φ. Let V(i) = {x}, V(j) = {y} and V(k) = {z}. Then, we must have that u = x, x /= y, y /= z, xUvy, yUhz and (J, V),u H k, which means that u = x = z. This contradicts the fact that G respects H-V intransitivity.	 

Conclusion
It is known that left and right commutativity and the Church-Rosser and reverse Church-Rosser properties are necessary conditions for a graph (frame) to be a non- trivial (cartesian) product of two other graphs, but their conjunction is not a suf- ficient condition. We introduce a new property called H-V intransitivity, that, together with the former ones, form a necessary and sufficient condition for a finite and connected graph to be a product. The proof of the necessity of these properties is fairly simple and is done directly, without the need to assume that the graph is finite or connected. On the other hand, the proof of the sufficiency is done in two steps. First, we prove that if a finite and connected graph satisfies the five properties stated above, then its horizontal and vertical components must satisfy a

particular isomorphism. Then, we show that if a finite and connected graph satisfies H-V intransitivity and its components satisfy this particular isomorphism, then the graph is a product.
The limits to the expressive power of basic modal languages are well known. We show that the property of H-V intransitivity is not modally definable. We also show that no condition that is necessary and sufficient for a graph to be a product can be modally definable. Extending our language to a hybrid language, we are then able to express H-V intransitivity.
A natural continuation of the present work would be to carefully study the proofs of the theorems in section 3 and analyze whether it is possible to weaken or even to drop the hypotheses of connectivity and finiteness that we currently enforce.
As another future work, we would like to investigate hybrid axiomatizations of products of logics. There are sound and complete axiomatizations for products of logics in the literature, but their completeness proofs are very specific and usu- ally cannot be easily generalized to products of other logics. As an example, the completeness proof for S5 × S5 (the set of formulas that are valid in the class of frames that are products of two reflexive, transitive and symmetric frames) is not a direct and straightforward generalization of the proof for K×K (the set of formulas that are valid in the class of frames that are products of two frames). This is very different from the standard case, where the completeness proof for K (the set of formulas that are valid in the class of all frames) easily generalizes to S5 (the set of formulas that are valid in the class of reflexive, transitive and symmetric frames) using the fact that the extra axioms of S5 force the frames to be reflexive, transitive and symmetric. We hope that, by including the H-V intransitivity in the axiomatic systems, we may be able to obtain axiomatizations with more well-behaved com- pleteness proofs, based on the standard technique of canonical models ([3]), so that they may be easier to generalize.
It is known that in hybrid logics with satisfaction operators (@i, for each nom- inal i), a completeness proof for an axiomatic system A is easily generalized to a completeness proof for any axiomatic system A + L, where L is a set of pure ax- ioms, that is, axioms that contain only nominals and no proposition symbols (for details on satisfaction operators and the technique for hybrid completeness proofs,
[4] and [3] can be consulted). Since many graph properties, such as reflexivity, ir- reflexivity, transitivity, intransitivity, symmetry, asymmetry and antisymmetry ([3] presents other examples), can be expressed by pure formulas, if we can extend this result on hybrid completeness proofs to products of logics, then we would be able to automatically prove completeness for a large number of products of logics through a single completeness proof. Some preliminary work on hybrid axiomatization of products of logics is presented in the last chapter of [8].

Acknowledgement
The authors wish to thank Ricardo Ribeiro, for his help during preliminary discus- sions for this work, and the anonymous referees, for providing valuable ideas on how

to improve the work presented in the paper. The authors received financial support from the research agencies CNPq, FAPERJ and CAPES.

References
Areces, C. and B. ten Cate, Hybrid logics, in: P. Blackburn, J. van Benthem and F. Wolter, editors,
Handbook of Modal Logics, Elsevier, 2006 pp. 821–868.
Blackburn, P., Representation, reasoning, and relational structures: a hybrid logic manifesto, Logic Journal of the IGPL 8 (2000), pp. 339–365.
Blackburn, P., M. de Rijke and Y. Venema, “Modal Logic”, Theoretical Tracts in Computer Science, Cambridge University Press, 2001.
Blackburn, P. and B. ten Cate, Pure extensions, proof rules, and hybrid axiomatics, Studia Logica 84
(2006), pp. 277–322.
Costa, V. and M. Benevides, Formalizing concurrent common knowledge as product of modal logics, Logic Journal of the IGPL 13 (2005), pp. 665–684.
Costa, V. and M. Benevides, Reasoning about knowledge in asynchronous distributed systems, Logic Journal of the IGPL 13 (2005), pp. 5–28.
Gabbay, D., A. Kurucz, F. Wolter and M. Zakharyaschev, “Many-dimensional modal logics: theory and applications”, Elsevier Science, 2003.
Sarenac, D., “Products of Topological Modal Logics”, Ph.D. thesis, Stanford University (2006).
