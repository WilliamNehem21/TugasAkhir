Electronic Notes in Theoretical Computer Science 48 (2001)
URL: http://www.elsevier.nl/locate/entcs/volume48.html pp. 1 – 28


Layered map reasoning:
An experimental approach put to trial on sets 1

Andrea Formisano 2
Dipartimento di Matematica e Informatica, Universit`a di Perugia

Eugenio G. Omodeo 3
Dipartimento di Matematica Pura ed Applicata, Universit`a di L’Aquila

Marco Temperini 4
Dipartimento di Informatica e Sistemistica, Universit`a ‘La Sapienza’ di Roma


Abstract
New successes in dealing with set-theories by means of state-of-the-art theorem- provers may ensue from terse and concise axiomatic systems, such as can be moulded in the framework of the (fully equational) Tarski-Givant formalism of dyadic rela- tions, here named ‘maps’. This paper sets the ground for systematic experimenta- tion based on such axiomatic systems. On top of a kernel axiomatization of map algebra, we develop a layered formalization of basic set-theoretic concepts. A num- ber of concrete experiments have been carried out in this framework, as the paper reports, with the assistance of a first-order theorem-prover. The aim is to assess the potential usefulness of the proposed layered architecture and, to the extent it reveals promising, to best tune it.
Key words: Set Theory, relation algebras, first-order theorem-proving, algebraic logic.



1 This research was partially funded by the Italian IASI-CNR (coordinated project log(SETA)) and by MURST (PGR-2000—Automazione del ragionamento in teorie insie- mistiche).
2 Email:formis@dipmat.unipg.it
3 Email:omodeo@univaq.it
4 Email:marte@dis.uniroma1.it
◯c 2001 Published by Elsevier Science B. V. Open access under CC BY-NC-ND license.

Introduction

In view of its pervasiveness in exact sciences, Set Theory deserves sustained efforts that bring to light richer and richer decidable fragments of it [7], general inference rules for reasoning in it [36,2], effective proof strategies based on its domain-knowledge [3], and so forth. While this specialized area of automated reasoning progresses and attains autonomous results and a larger horizon (cf. [9]), many experiments with set-theories have been carried out by means of standard theorem-proving systems. Still today such experiments pose consid- erable stress on state-of-the-art theorem provers, or demand the user to give much guidance to proof assistants; theytherefore constitute ideal benchmarks. Even for those who are striving to develop something entirely ad hoc in the challenging arena of set-theories, it is important to assess what can today be achieved by unspecialized proof methods and where the context-specific bottlenecks of Set Theorypreciselyreside.
In its most popular first-order version, namelythe Zermelo-Skolem-Fraenkel axiomatic system ZF, set theory (very much like Peano arithmetic) presents an immediate obstacle: it does not admit a finite axiomatization. This is why the von Neumann-Bernays-G¨odel theory GB of sets and classes is some- times preferred to it as a basis for experimentation [5,35,30]. Various authors (e.g., [24,28,29]) have been able to retain the traits of ZF, by resorting to higher-order features of specific theorem-provers such as Isabelle.
In this paper —which continues a series inaugurated with [17]— we pur- sue a minimalist approach, relying on purely equational and most concise formulations of both ZF and the theory (first proposed in [33]) of finite sets. Such formulations are based on the logical system L× deeply investigated in
[34]: we designed them with the aim of offering a good starting point for experimentation—with Otter [23], say, or with a more markedly equational theorem-prover. Guidelines for our axiomatization task were drawn from [34] too: the outcome is equational and devoid of variables, and accordinglysome- what out of standards. Luckily, a theory stated in L× can easilybe emulated through a first-order system, simplybytreating the meta-variables present in the schematic formulation of its axioms (both the logical axioms and the ones endowed with a genuinely set-theoretic content) as if they were first-order variables. In practice, this means treating ZF as if it were an extension of the theory of relation algebras [20,22,12,32,26,14,18], whose variables are not supposed to range over sets but over the dyadic (i.e. binary) relations on the universe of sets. Anyway, the exact relationship of our own formulation of ZF with ZF proper on the one hand, and with GB on the other, is a delicate theoretical issue which we intend to address in another paper of this series.
This paper consists of two parts:
Sections 2–3 brieflyrecall —and, to a little extent, ameliorate w.r.t. [15], [17, Sec. 7.2]— our equational formulation of set-theoretic axioms. Taken in its

entirety, Set Theory offers a panorama of alternatives (cf. [31, p. x]); that is, it consists of axiomatic systems not equivalent (and sometimes antithetic, cf. [25]) to one another. This is why, rather than producing the axioms of just one theory, we indicate various options. Future work will expand the material of these sections into a toolkit for assembling class- and set-theories of all kinds—after we have singled out, through experiments, formulations of the axioms that work decidedlybetter than others.
Sections 4–6 mainlyreport on experimental results based on the above for- mulation of the set-axioms.
Comparison with analogous results based on more traditional specifications of the set-axioms, which exploit in full the expressive means of first-order predicate languages, are deferred to another paper of this series.

Syntax, semantics, and logical axioms of L×
L× is a ground equational language where one can state properties of dyadic relations —maps, as we will call them— over an unspecified, yet fixed, domain U of discourse. The map whose properties we intend to specify is the mem- bership relation ∈ over the class U of all sets. The language L× consists of map equalities Q = R, where Q and R are map expressions:
Definition 1 Map expressions are all terms of the signature shown at the top
of Fig. 1—of whose symbols, ∩, Δ, ○, \, ∪, † will be used as left-associative infix operators, −1 as a postfix operator, and  as a line topping its argument.
✷
For an interpretation of L×, one must fix, along with a nonempty U , a subset ∈= of U 2 =Def U × U . Then each map expression P comes to desig- nate a specific map P= (and, accordingly, any equality Q = R between map expressions turns out to be either true or false), on the basis of the following evaluation rules:
Ø= =Def ∅,	1l= =Def U 2,	ι= =Def {[a, a] : a in U}; (Q∩R)= =Def { [a, b] ∈ Q= : [a, b] ∈ R= };
(QΔR)= =Def { [a, b] ∈ U 2 : [a, b] ∈ Q= if and only if [a, b] ∈/ R= }; (Q○R)= =Def { [a, b] ∈ U 2 : for some c in U , one has [a, c] ∈ Q= and [c, b] ∈ R= };
(Q−1)= =Def { [b, a] : [a, b] ∈ Q= } .

Of the operators and constants in the signature of L×, only a few deserve being regarded as primitive constructs; indeed, we choose to regard as derived constructs the ones for which we gave no evaluation rule, as well as others that we will tacitlyadd to the signature—see central part of Fig. 1.

The interpretation of L× obviouslyextends to the new constructs; e.g.,

(P †Q)= =Def { [a, b] ∈ U 2 : for all c in U , either [a, c] ∈ P= or [c, b] ∈ Q= },
funcPart( P )= =Def {[a, b] ∈ P= : [a, c] ∈/ P= for any c /= b},

so that funcPart( P ) = P will mean “P is a partial function”, verymuch like to be seen below.
Notice that we are also allowing ourselves to define, through abbreviating definitions, alternative notation for map equalities that follow certain patterns. This is, e.g., the case of the notation Func( P ), which means the same as funcPart( P ) = P ; or the case of Total( P ), which states that for all a in U there is at least one pair [a, b] in P=.
The logical axioms characterizing the derivability notion ▶× for L× are shown in the third frame of Fig. 1. These will be supplemented with proper axioms reflecting one’s conception of U as being a hierarchyof nested sets over which ∈ behaves as membership.
It must be said that there is no representation theorem that plays for map algebras a role analogous to the Stone theorem for Boolean algebras (cf. [4]). In other words, there exist equalities that are true in all algebras of dyadic relations over a fixed U but which are false in some structure which, though fulfilling the axioms of map algebra, does not consist of relations. This defect will presumablypropagate to anyset theoryformulated as an extension of the map algebra; but anyway, even in first-order logic, a set theory never reflects the intended semantics univocally, and hence the map-algebraic formulation and the logical one can, with their limitations, be on a par. The results reported in [10], which we will brieflyreview in Sec. 5, constitute a verification of this fact.

Specifying set theories in L×
One often strives to specifythe class C of interpretations that are of interest in some application through a collection of equalities that must be true in every
= of C. In [15] (cf. also [17, Sec. 7.2]) we undertook a task of this nature: our aim, there, was to capture through simple map equalities the interpretations of ∈ complying with
standard Zermelo-Fraenkel theory, on the one hand;
a theoryof finite sets ultimatelybased on individuals, on the other hand.
In this section we briefly recall the main points of [15], leaving momentarily individuals out of consideration.
In part, the game consists in expressing in L× common set-theoretic no- tions. To start with something obvious,




Fig. 1. Operators, derived constructs, and axioms of map algebra



/∈ ≡Def ∈,	$ ≡Def ∈−1,	/$ ≡Def $;
ε0ε1 ··· εn ≡Def ε0○ε1○ ··· ○εn,
where each εi stands for one of ∈, /∈, $, /$, 1l, ι. To see something slightly more sophisticated:
Example 1 With respect to an interpretation =, one says that a intersects b if a and b have some element in common, i.e., there is a c for which c∈=a and c∈=b. A map expression P such that P= = { [a, b] ∈ U 2 : a intersects b } is
$∈.
Likewise, one can define in L× the relation a includes b (i.e., “no element of b fails to belong to a”), bythe map expression /$∈. The expression $/∈∪ι translates the relation a is strictly included in b, and so on.
The property of a set a being transitive in the sense that every element of any element of a belongs to a can be designated by the following map

expression trans:
trans ≡Def ι \ /$∈∈.
Here, by requiring trans= to be contained in ι=, we have made it represent a collection of sets; then, the further requirement that trans= be disjoint from ( /$∈∈ )= amounts to the condition that c∈=a holds when a, c, and d are such that a trans= a, d∈=c, and c∈=a hold.	✷
Secondly, the reconstruction of a set-theory within L× consists in restating ordinaryaxioms (and, subsequently, theorems), through map equalities.
Example 2 The sum-set axiom and the power-set axiom respectively state, for every set a, that there is a set comprising as elements all elements of elements of a and that there is a set comprising as elements all sets included in a. The former can be formulated in the map language as
(Un)	$$/∈ ○ 1l = 1l
(or, more succinctly, as Total( $$†∈ )); the latter as
(Pow)	Total( /$∈†∈ ).
A customarystrengthening of the sum-set axiom is the transitive embed- ding axiom, which states that every b belongs to a set a which is transitively closed w.r.t. membership:
(T)	Total( ∈○trans ).
The foundation (or ‘regularity’) axiom ensures that the membership rela- tion ∈= is cycle-free—more generally, under infinity and replacement axioms (see below), it can be used to prove that ∈= is well-founded on U (cf. [13, Ch.2, Sec.5]). Regularityis usuallystated bysaying that when some b belongs to a, there is a c also belonging to a that does not intersect a:
(R)	1l∈ = 1l ○ ( ∈\$∈ ).	✷
In the third place, we are to prove theorems about sets by equational reasoning, moving from the equational specification of the set-axioms. In this phase we must refer to the inferential apparatus of L×, consisting of the logical axioms displayed in Fig. 1 and of the ordinary rules of equational reasoning.
Example 3 From the above-stated regularity axiom (R), one can deduce that any transitive non-void set has a void set among its elements:
1l∈∩ trans ⊆ 1l∈○ ∈.
✷

Extensionality and subset axioms
As was observed in [15], two derived constructs can be of great help in stating the properties of membership simply; they are the following ∂ and F:
∂( P ) ≡Def P ○ /∈,	F( P ) ≡Def ∂( P ) \ P ○ ∈.


Plainly, a∂( Q )=b and aF( R )=b will hold in an interpretation = if and only if, respectively,
all cs in U for which aQ=c holds are ‘elements’ of b (in the sense that c∈=b);
the elements of b are preciselythose c in U for which aR=c holds.
First in the list of axioms postulated byZermelo (cf. [37]), extensionality, states that sets whose elements are the same are identical :
F( $ ) = ι.
A useful variant of this axiom is the scheme Func( F( P ) ), where P ranges over all map expressions.
The subset axioms enable one to extract from any given a the set b con- sisting of those elements of a that meet a condition specified by means of a map expression P . A more general form of this axiom scheme depends on a second map expression Q too: To every set a, there corresponds a set b which is null unless there is exactly one d fulﬁlling aQ=d, and which in the latter case consists of all elements c of d for which aP=c holds. Formally:
(S)	Total F( funcPart( Q )○$∩P ) .
Example 4 By taking Q ≡ ι and P ≡ 1l○( ι\∈ ) in (S), we obtain that to every set a there corresponds a b consisting of exactly those elements c of a for which c∈=c is false. This subset b of a does not belong to a. Notice, in fact, that b cannot belong to itself (else a contradiction would ensue from the very characterization of the elements of b); then, since b/∈=b, we have that b/∈=a (the opposite assumption would in fact yield b∈=b). In view of the genericityof a in the above argument, we conclude that everyset has a subset not belonging to it: Total( /$∈\$ ).
(When (R) is postulated, the same conclusion can be reached far more easily.)	✷


Pairing and ﬁniteness axioms
Two maps λ, Q are said to be conjugated quasi-projections if theyare (partial) functions and for any pair a0, a1 of entities in U there is a b in U such that λ(b)= a0, Q(b)= a1. We assume in what follows that λ, ρ are map expressions designating two conjugated quasi-projections. It is immaterial whether they are added as primitive constants to L×, or theyare map expressions suitably chosen so as to reflect one of the various notions of ordered pair available around, and subject to axioms that are adequate to ensure that the desired conditions, namely
(Pair)	λ−1 ○ ρ = 1l,	Func( λ ),	Func( ρ ),	∈$ = 1l, hold (cf. [34, pp. 127–135]).
Under the set-axioms (E), (Pow), (S), (Pair) introduced so far, it is

reasonable to characterize a set a as being ﬁnite if and only if every set b of which a is an element has an element which is minimal w.r.t. inclusion (cf. [33, p. 49]). Accordingly, in forming a theory concerned exclusively with finite sets, one can adopt the following finiteness axiom:
finite = ι,  where finite ≡Def ι∩ 1l○( ∈∩(( ι∪/$∈ )†/∈ ) )†/$ .
On the one hand, this means that a finite= a holds for everyset a; on the other hand, the requirement that finite= be contained in
 1l○( ∈∩(( ι∪/$∈ )†/∈ ) )†/$ =
amounts to the condition that when both a finite= a and b$=a hold, there is a
c∈=b such that no d∈=b other than c itself is included in c.
Single-element addition and removal
This section is a digression on techniques for forming pairs with sets.
One of the axioms in [37] states that “there exists a set ··· that contains no elements at all. If a is any object of the domain, there exists a set {a} containing a and only a as element; if a and b are any two objects of the domain, there always exists a set {a, b} containing as elements a and b but no object x distinct from both.” As one easily sees, the axioms (E), (S), (Un), and (Pair) make the null set and the adjunction operation available; therefore theyalso enable singleton- and doubleton-formation, and hence they make the above Zermelo’s axiom of elementary sets unnecessary.
Sometimes, though, one likes to work within a veryweak membership the- ory, e.g. a theorywhose onlypostulates are (E) and the axiom of elementary sets. These axioms have (Pair) as a consequence, because they enable the formation of {{ a, b }, { a }} from given sets a, b, which is Kuratowski’s classi- cal encoding of the ordered pair with left component a and right component
b. The components of such an entitycan be retrieved bymeans of
λ ≡ funcPart( $○funcPart( $ ) ),
and
ρ ≡ $$∩(( $$∪λ )†ι )∩( /$†$1l ),
respectively, and it can indeed be shown that λ and ρ, so defined, fulfill
(Pair)2,3,4.
An ordered pair can, alternatively, be conceived of as a set of the form
{{ b } \ { a }, { b } ∪ { a } }. The ongoing is based on this idea. Instead of directlypostulating doubleton formation (as Zermelo did), we postulate (E), null-set existence
(N)	1l∈○ 1l = 1l,
and single-element addition and removal, intended as the possibilityof forming
c∪ {a} and c\{a} out of given sets c, a. Stating that these two operations can

be performed singularlyis almost certainlyimpossible (cf. [21]), and hence we resort to an axiom directlystating that {{ b }\{ a }, { b }∪{ a }} can always be constructed:
(WL)	( /∈∈ ∩ valve(∈∈, /∈∈)) ○$ = 1l, where
valve(P, Q) ≡Def P \ ι ○ ( P \ Q ).
This means: If c and a are any two objects in the domain, there always exists a sets d containing c as element, for which a is the sole object x fulﬁlling both x∈∈=d and x/∈∈=d.
Conjugated quasi-projections associated with the pair
{{ b }\{ a }, { b }∪{ a }} 


are

where


λ ≡Def

ν−1	and	ρ ≡Def

valve−1(∈∈, ν),

ν ≡Def /∈∈ ∩ valve(∈∈, /∈∈).
As we will discuss later on, (Pair) is derivable from (E), (N), and (WL).

An inﬁnity axiom, and the replacement axioms
We have collected in Fig. 2 all the axioms introduced so far, along with an additional clause of (Pair), a version (Repl) of the classical replacement axiom, and an axiom (I) which, presupposing (R), states the existence of infinite sets (cf. [27]). Of course this infinity axiom is antithetic to the axiom (F) seen earlier: one can adopt either one, but onlyone of the two.
The new axioms (Pair)5, (Repl), and (I) are not discussed here: the interested reader can find in [15] detailed comments.

Layers of experiments set up on Otter
To follow [34] orthodoxly, we should treat L× as an autonomous formalism, on a par with first-order predicate calculus. This, however, would pose us two problems: we should develop from scratch a theorem-prover for L×, and we should cope with the infinitelymanyinstances of (S) and of (Repl). Luckily, this is unnecessary if we treat as first-order variables the meta-variables that occur in the logical axioms or in (S), (Repl) (as well as in induction schemes, should any enter into play either as additional axioms or as theses to be proved). Within the framework of first-order logic, the logical axioms lose their status and become just axioms on relation algebras, conceptually forming a chapter of axiomatic set theoryinteresting per se, richer than Boolean algebra and more fundamental and stable than the rest of the axiomatic system.



where	∂( P ) ≡Def P ○ /∈,	F( P )  ≡Def ∂( P ) \ P ○∈ 
Fig. 2. Toolkit for axiomatizing set theories within map calculus

Any standard theorem-prover, e.g. Otter, can be exploited to experiment with axioms like the ones on relation algebras (cf. Fig. 1) and the ones on sets we have examined so far (condensed in Fig. 2).
Otter (Organized Techniques for Theorem-proving and Effective Research) is a resolution-style theorem prover developed at the Argonne National Labo- ratory(refer to [23] for a detailed description). It can manipulate statements written in full first-order logic with equality. The inference rules available in Otter are: binary resolution, (ordered) hyperresolution, UR-resolution, and binaryparamodulation. Otter’s main features are:
the input maybe in conjunctive normal form, or in full first-order logic;
forward demodulation rewrites and simplifies anynewlyinferred clause with a set of equalities, and back demodulation uses newlyinferred equalities to rewrite all existing clauses;
forward subsumption deletes an inferred clause if it is subsumed by any existing clause, and back subsumption deletes all clauses subsumed by an inferred one;
a variant of the Knuth-Bendix Method can search for a complete set of reductions;
weight functions and lexical ordering decide the ‘goodness’ of clauses and terms;

a set-of-support strategyis employed.
Otter offers a large number of parameters and options to help the user in guiding the inference process. In what follows we briefly illustrate those we found more useful in our experimentation. This will be done by giving the reader a description of the basic strategywe adopted in proving theorems with Otter. As we will see, in most cases this strategy worked well, whereas we needed some kind of tuning in order to successfullycope with a few theorems. Since we are dealing with equality, we selected the Knuth-Bendix comple- tion procedure; whenever non-unit clauses or non-equational predicates en- tered into play, we enabled hyperresolution and binary resolution. Paramodu- lation was employed. We usually exploited the default strategies for ordering, demodulation of clauses, and weighting. On the other hand, we made sys- tematic use of the parameters devoted to limit the search space. To get into details, all theorems were proved imposing bounds on the maximum number of literals in a derived clause, and on the maximum number of distinct variables occurring in a derived clause. Moreover, we often imposed a threshold on the weight of derived clauses: the ones ‘heavier’ than this value were discarded. We also adopted Otter’s default weighting strategy (cf. [23]); in some cases we found it useful to give extra weight to certain terms or literals in order to reduce the time spent for finding a proof. Here are the Otter settings we used in proving almost all theorems of map calculus (for the parameters and flags not mentioned here, we kept the values adopted by Otter’s autonomous
mode):

Notice that the value assigned to max weight was usually‘guessed’ bytaking into account the syntactical structural complexity of the theorem to be proved.
Initial experimentation in map reasoning with Otter has been described in [1,17]; in [15] an equational re-engineering of set theories is presented. Au- tomated set reasoning based on this equational formulation of ZF set the- ory was explored in [10,16]. In particular, in [10] the authors obtained a (semi-)automated proof of a fundamental result: under veryweak set-axioms, namely (E), (N), and (WL), it was possible to derive the existence of a pair

of projections satisfying the pairing axiom (cf. Sec. 5, to be seen). This result, to be brieflysurveyed in Sec. 5, guarantees the equipollence in means of proof of the equational formulation of ZF with its first-order version (cf. [34]).
The experimentation activity reported in [10] was carried out by rely- ing completely on the autonomous mode supplied by Otter, and by always adopting the default settings. The explicit tuning of parameters and flags was avoided in order to obtain a higher independence of the approach from the specific theorem-prover. Since the syntactic complexity of the theorems tackled in [10] was quite low, this approach represented a viable choice.
The activity we are going to describe here is aimed at proving theorems that involve set-theoretical concepts whose syntactical and semantic complex- itykeep growing as experimentation proceeds. This fact can easilybe grasped by considering the higher level of abstraction of notions such as totality or functionality w.r.t. the basic map constructs. To reflect this growth in com- plexity, we will develop a layered hierarchy of lemmas. Starting with a ‘kernel’ consisting of the constructs and axioms of Fig. 1, we will proceed systemati- cally by defining new set-theoretical concepts and by proving groups of laws that characterize the new set-constructs. Each one of these extension steps will be a (potential) part of the basis for the next extension. Moreover, in proving a generic theorem, it will be possible to select a subset of the avail- able constructs, together with their laws. This, actually, will help the search for the proof in two orthogonal ways: firstly, Otter will deal only with the part of the global environment that the user judges to be relevant and related to the theorem to be proved; and secondly, the inference activity will be better focused at the most suitable level of abstraction. For instance, in proving a law that infers the totalityof the composition of maps from the totalityof the components (cf. Fig. 11), a deep treatment of ‘low level’ concepts such as the intrinsic properties of symmetric difference should not be needed.
The first step in the development of our layers consists in proving a series of auxiliary laws for the kernel constructs (namely, Δ, ∩, ○,−1). From the theoretical point of view, these laws are not necessaryto prove any(provable) theorem of map calculus. Nevertheless, experimentation revealed that Otter was unable to prove several simple theorems in a reasonable amount of time, unless by employing these auxiliary laws. A conspicuous part of the laws regarding Δ and ∩ are shown in Fig. 3, while the laws on map composition (group C1) and map inversion (group G1) are listed in Fig. 4.
The laws are divided into groups because each group usuallycorresponds to an input file that could be loaded into Otter; moreover, the laws in the same group were usually proved by adopting similar settings for parameters and search controls, and often byusing the same groups of premises as hypotheses.
For each law in the tables, we indicated:
the groups of formulas given to Otter as input;
the length of the proof found byOtter;


Fig. 3. Laws on ∩ and Δ

Fig. 4. Laws on −1 and ○

the time spent (if not differently specified, it is expressed in hundredth of seconds);
the number of clauses generated during the inference process:
the number of clauses being kept (i.e., the generated clauses that fulfill all restrictions on weight, number of variables, number of literals, etc.).
In our experimentation we used Otter 3.0.6 running under Linux on a PC (Pentium III-450, with 128Mbyte of RAM).
Notice that sometimes there are more kept clauses than generated clauses. This is because the former include all clauses obtained byprocessing the input set of formulas. The writing ‘Ax’ reported for most of the laws, does not necessarily mean that all of the axioms of Fig. 1 have been fed into Otter; usually this is the case only when no other group of laws is employed in the







Fig. 5. Laws on map complementation

proof; otherwise, just (part of) the axioms regarding the constructs occurring in the theorem have been given in input. For instance, to prove the law
(1)	(( P ○ P−1 ) ∩ ι ) ○ P = P
of group C1, we exploited the laws of G1 and those of C1 (meaning with this that Otter was allowed to use the laws listed before (1) in C1); moreover, we loaded the portion of Ax relative to ○ and to −1.
Figures 5 and 6 list the laws on map complementation and map union, respectively. The definitions of these constructs in terms of the primitive ones are listed in Fig. 1, together with the map formalization of other notions that will come into playin the sequel.
Other laws on map composition and expressing properties of ι are listed in Fig. 8. In order to prove these laws, Otter needed to employ the defined map constructs of complementation and union, together with their laws. It should be noticed that Otter was not able to prove, in a reasonable amount of time, several of the laws of Fig. 8 without using the laws in I1, C1, G1, U1,2,3,4.
Next come the laws on map inclusion and left-absoluteness. This extension of the signature can be considered as preparatoryfor the studyon totalityand functionalityof maps. In turn, the laws on totalityand functionalitywill play a crucial role in proving the set-theoretical theses we will report on in later sections.
A few remarks on the behavior of Otter confronted with map calculus are due. Firstly, experimentation revealed that, in general, proving a theorem/law


Fig. 6. Laws on map union

Fig. 7. Cycle law and some consequences of simplicity

seems to be more challenging (with our inference machinery) when the map ι or some of its properties are involved. Consider, for instance, the penultimate law in Fig. 3, and the laws involving ι in C1 or C2. The same can be said for those laws that correspond to deep intrinsic characteristics of ι, such as the


Fig. 8. More laws on map composition and ι


property: (2)

for each P ⊆ ι, it holds that P−1 = P.

This phenomenon could be intuitively explained by observing that state- ments such as (2) assert properties that do not concern the map as a single object, but predicate on a relationship holding between the components of each pair belonging to the map. In a sense, this kind of statements can be thought of as having a ‘deeper character’, or, in other words, to model a sort of deep knowledge on the domain(s) of discourse.
Secondly, simple syntactical changes (preserving the semantics) in the the- sis to be proved sometimes badlyaffect Otter’s performances.
Consider, for instance, the law
P Δ Q = P ∩ Q ∩ P ∩ Q
in Fig. 5. Its proof was relativelyeasyfor Otter, if compared with the one of
P Δ Q = P ∩ Q ∩ P ∩ Q
which is obtainable from (3) byjust applying the rule

P = Q  ▶× P = Q
and byexploiting the double-negation law P = P .
To find a possible justification of this ‘unstable’ behavior, we have to con- sider that Otter adopts a default lexicographic ordering of terms (whenever the user does not supply his own criterion), in order to orient the rewriting rules (recall that Knuth-Bendix completion is employed), and to handle de- modulation and weighting. In the above-mentioned case, the default ordering is the same for both theses, but it works better with the former of them. Changing the criterion for lexicographic ordering (in proving (4)) would have determined a better performance.
As a last remark on this phenomenon, notice that, as one expects, the proof of (4) turns out to be extremely easy (cf. Fig. 5) when (3) is included


Fig. 9. Laws on map inclusion

among hypotheses.
There are also cases of laws whose proofs become easier if some additional lemmas are given in input (cf., for instance, U3 or lAbs1). This is a motivation for our choice of splitting in several groups the laws regarding a particular map construct.

Otter exhibited different behaviors even in proving the same thesis when formulated at different levels of our ‘layered architecture’. For example, con- sider the two laws
1l ○ P ∩ P = Ø and	P ⊆ 1l ○ P


Fig. 10. Laws on left absoluteness of maps
listed in Fig. 9, or the following two:
1l ○ P = P → (R ○ Q) ∩ P = R ○ (Q ∩ P )
and
lAbs( P ) → (R ○ Q) ∩ P = R ○ (Q ∩ P ),
taken from Fig. 10. Experimentation revealed that, in general, the proof turns out to be easier when the thesis is expressed by employing the constructs of the higher layer (e.g. ⊆ instead of  and ∩, or lAbs( · ) instead of ‘1l ○·’). Clearly, this is because the higher the layer, the greater is the expressiveness of the constructs/operators involved and, obviously, the larger is the set of previ- ously proved laws that can be usefully exploited by Otter. This fact strongly supports our choice of developing experimentation in a ‘layered’ fashion.

It is sometimes convenient to add to the axioms of Fig. 1 one further axiom:
(Simpl)	R =/	Ø → 1l ○ R ○ 1l = 1l.
It can be shown that any theorem that is proved under this ‘simplicity’ as- sumption is also provable without it. Fig. 7 lists some of the consequences of simplicity, proved by Otter.

Set-reasoning in map calculus (case studies)
An alternative formulation of extensionality.
A useful variant of the extensionalityaxiom we stated in Sec. 3, is the scheme
Func( F( P ) ),	where P ranges over all map expressions.


Fig. 11. Totality and functionality of maps
Our first task in automated set-reasoning consists in proving the equiva- lence of the two formulations of (E), i.e., that:
F( $ ) = ι	E▶×	Func( F( P )) .
Otter was unable to prove this theorem in a single shot. Hence we had to

split the theorem into two. First, we got a proof of
Func( F( P ))	▶×	F( $ ) = ι,
via the sequence of intermediate results listed in Fig. 12.

Fig. 12. Automated proof of (5)




The converse, i.e.

F( $ ) = ι	▶×	Func( F( P ) ),

was proved as shown in Fig. 13.

Fig. 13. Automated proof of (6)


Designing pairs of conjugated projections.
In [10] it was shown that the axioms of a weak theory of sets —namely, the extensionality, null set , single-element addition, and single-element removal axioms recapitulated in Fig. 14— 5 suffice to enable Otter to prove that two specific maps λ, ρ satisfy (Pair)1,2,3. In that context, the approach to experi- mentation was aimed at ‘miniaturizing’ the obtained proofs, i.e., at developing the proofs by starting with the raw axiomatization of Fig. 1, without the ex-
plicit introduction of defined constructs, and by strictly interacting with and guiding Otter, to make it perform onlythe essential inference steps.
The main result of [10] consisted in proving within map algebra (under minimal assumptions on membership), that λ and ρ designate conjugated

5 A first-order statement of the binomial (WL) is
(WL)	∃ d Y ∈d ∧∀ u u = X↔∃ v ∃ w ( u∈v∈d ∧ u/∈w∈d )
(where it goes without saying that X, Y are universally quantified). It turns out that in first-order logic this sentence yields —with the determinant contribution of (E), too— (N) as a derivable consequence.


 
Fig. 14. Specification of a weak set theory in first-order logic and in map algebra

projections. As already mentioned, the important consequence is that the equational specification of our assumptions on membership has the same de- ductive power as its counterpart formulated in quantified first-order logic; this follows from results in [34].
The experimentation reported in [10] proceeded through a number of inter- mediate lemmas ultimately yielding the desired result. Most crucial, among them, is the following:
Lemma 1 (Functionality)
Q ○ Q−1 ⊆ ι	entails	valve(P, Q) ○ valve−1(P, Q) ⊆ ι.

✷
This lemma mainly relies on various elementary Boolean identities, and on some obvious consequences of the Peircean axioms (i.e., the logical axioms regarding ○,−1, and ι). The only non-obvious laws on maps needed are the so-called cycle law (cf. Fig. 7) and Dedekind law (cf. [32]):
P ○ Q ∩ R ⊆ ( P ∩ R ○ Q−1 ) ○ ( Q ∩ P−1○ R ).

A ‘miniaturized’ derivation of the Dedekind law was obtained from the bare axioms in Fig. 1. It consists in 25 verifications of the average CPU-time cost of 6 to 8 seconds (depending on the machine). 6 It is worth stressing that these 25 steps included the proofs of basic facts such as some of the laws on symmetric difference, intersection, and composition already seen in Figures 3 and 4.
While the functionality lemma easily allowed Otter to prove (Pair)2,3, in order to prove (Pair)1 it was necessary to proceed as follows. First, the temporary assumption was added to (WL) that a singleton set {a} can be formed out of any given a. This assumption can be stated formallyas follows:
(Sng)	sng ○ 1l = 1l,   where sng ≡Def ∈\ι∈.
Then the following lemma was obtained:
Lemma 2 Assume (Sng) and (WL). It follows that ν ○ ρ = 1l.	✷

6 These verifications were run on a G3 Macintosh and under Linux.


It turned out that in order to prove this result Otter had to make extensive use of map-inclusion laws drawn from the ones listed in Fig. 9.
The next step consisted in proving that it is actuallypossible to do without a postulate of singleton formation. Verifying this claim amounted to getting an automated proof of the derivabilityof (Sng) from (WL) and (N). In this case, an analysis of Otter’s proof showed that the most useful intermediate results (implicitlyproved in the main proof) were the laws on totality.

Totality of some elementary relations on sets.
By using the laws of Sec. 4, Otter was able to prove the totality of a number of relations on sets. We give below an excerpt of the results we obtained. The laws of Fig. 11 intervene in these proofs crucially.
Total(∈$). Thanks to (Pair), this thesis reduces to proving that Total(1l) holds. It was immediatelyderived from the laws on totality.
Total(∈1l) follows from the previous result and from the laws in Fig. 11. It was proved in 0.02 seconds; the proof-length is 3.
Total(∈) follows from the previous results and from the laws in Fig. 11. It was proved in 0.02 seconds; the proof-length is 1.

A general technique for proving totality of set constructors.
The next task consists in obtaining the proof of a general law for deriving the totalityof expressions of the form Total(F( R )). This law will give us the capabilityof defining a number of set-constructs (cf. [11, Sec. 5]). Let us start with two useful lemmas.
Lemma 3 For any P, Q such that



it holds that:
P−1 ○ Q ⊆ $	and	Func( ρ )

( P ○ λ−1 ∩ ρ−1 ) ○ F( λ ○$∩ ρ ○ Q ) ⊆ F( Q ).
✷
In the following we describe Otter’s proof. The thesis (8) can be rewritten as
(9)	( P ○ λ−1 ∩ ρ−1 ) ○ F( λ ○$∩ ρ ○ Q ) ⊆ Q ○ /∈∩ Q ○∈ 
By assuming the hypothesis (7).1, Otter was able to prove the following
intermediate result:  (λ ○ P−1 ∩ ρ ○ Q ) ⊆ λ ○$∩ ρ ○ Q. Otter proved this result in 0.31 seconds; it generated 4162 clauses (the number of kept clauses was 915). The proof-length was 4. The proof was easily obtained by extensive use of the map-inclusion laws (cf. Fig. 9). The main settings used to drive Otter imposed anygenerated clause consisting of more than two literals, or having more than two distinct variables, to be discarded. From (9), by

exploiting the cycle law and the laws on inclusion, Otter easily proved that:

(10)	( P ○ λ−1 ∩ ρ−1 ) ○ F( λ ○$∩ ρ ○ Q ) ⊆ Q ○ /∈
The proof was found in 1.30 seconds (its length was 9), bygenerating 13729 unit clauses (max literals=1 and max distinct vars=3) and keeping 2652 clauses.
On the other hand, the following map inclusion was proved by assuming the functionalityof ρ (cf. hypothesis (7).2), in 0.81 seconds. The proof-length was 13, the numbers of generated and the kept clauses were 9848 and 2097, respectively:
( P ○ λ−1 ∩ ρ−1 ) ○ F( λ ○$∩ ρ ○ Q ) ⊆ Q ○∈ 
Putting together the two results (10) and (11), in order to obtain the thesis (8), took 0.08 seconds (two inference steps, byhyper-resolution).
Lemma 4 Assume (Pair)1,2 and (S). Then for any P, Q
Total( P ) ▶× Total(( P ○λ−1∩ρ−1 ) ○ F( λ○$∩ρ○Q ) ).
✷
Otter proved this lemma (byproving two intermediate results) in a total time of 0.24 seconds. On this ground, the following proposition was proved.
Proposition 1 Assume (Pair)1,2,3 and (S). Then for any P, Q,
Total( P ), P−1○Q ⊆ $ ▶× Total( F( Q ) ).
✷
This proposition was proved in two stages. We first drew from the hypotheses a series of intermediate lemmas yielding
( P ○λ−1∩ρ−1 ) ○ F( λ○$∩ρ○Q ) ⊆ F( Q ).
The thesis then readily followed, with the help of the laws on totality. The overall time of this proof was 3.57 seconds.
By using this general tactic, Otter proved the totality of several map ex- pressions, certifying in this way that these expressions characterize legal op- erations on sets:
Total(F(ι)). The expression F(ι) defines the singleton operation a '→ {a}. Its totality was proved in 0.05 seconds (length:7, generated:768, kept:108), byusing the result previouslyobtained: Total(∈) (Otter instantiated P ≡ ∈ and Q ≡ ι in proposition (12)).
Total(F(Ø)). The expression F(Ø) characterizes the nullset construction: a '→ { }. As in the previous case, its totality was proved in 0.04 seconds (length:3, generated:335, kept:52). Notice that this thesis was proved also

without resorting to the above proposition, but in this case Otter’s task was more difficult: the proof was produced in much more time: 1.15 seconds. Otter used the laws in C1, I1,2, G1, N1,2 and in particular those in Tot1; it generated 21521 clauses, keeping 343 of them.

Consider the two axioms Total( ∂( /$∈ ) ) and Total( ∂( $$ ) ) in Fig. 2. Otter was able to prove their strengthened versions Total( F( /$∈ ) ) and Total( F( $$ ) ) by using, among others, the law (12) and the cycle law. The first proof was generated in 0.11 seconds (length:4, generated:2616, kept:265). The strong version of the second axiom was proved in 17.88 seconds (length:6, generated:386130, kept:5070).
A more general result was also proved. Namely, under the axioms (Pair)
and (S), Otter proved this propertyof totality:
Total( ∂( P )) ▶× Total( F( P ) ).
The proof was found in 0.12 seconds (length:4, generated:2616, kept:265) byusing the above proposition, the cycle law, and the laws of Fig. 11.

A lemma on transitive sets
The basic fact, stated in Example 3, that there is a void set in any non-void transitive set, ensues from the law
R ⊆ P → 1l ○ R \ Q ○ P ⊆ Q ○ R, 
which Otter was able to derive in 2 steps and 21.63 seconds from the two laws

R ⊆ P → Q ○ P ⊆ Q ○ R, 

R ⊆ P → 1l ○ R \ Q ○ P ⊆ 1l ○ R \ Q ○ R. 
In turn, proving these required 19 steps and 15.44 seconds, and 5 steps and
4.94 seconds, respectively.
In consequence of (13), and since by virtue of the general law T \ S ⊆ T
and of the monotonicityof ○ the inclusion
∈○ ( ∈\ $∈ ) ⊆ ∈∈
holds (Otter proved it in 2 steps and 0.98 seconds), we get
1l∈○ ( ∈\ ∈$ ) \ /$∈∈ ⊆ $∈ ○ ( ∈\ $∈ ) (1 step, 0.05 seconds); therefore
( 1l∈○ ( ∈\ $∈ ) \ /$∈∈ ) ∩ ι ⊆ $∈ ○ ( ∈\ $∈ ) ∩ ι

⊆ $∈ ○ $∈ ∩ ι = Ø .


These intermediate lemmas have been obtained in different runs, in an overall time of 5.08 seconds.
On the basis of the definition of trans, of the law R∩( S\T ) = ( R\T )∩S, and of (14), we then have
1l∈○ ( ∈\ $∈ ) ∩ trans = 1l∈○ ( ∈\ $∈ ) ∩ ( ι \ /$∈∈ )

= ( 1l∈○ ( ∈\ $∈ ) \ /$∈∈ ) ∩ ι = Ø .
The proof that the first member of this chain equals the null map Ø was obtained directly, in 1.43 seconds; it consists of 2 steps.
At this point we can easily obtain the desired thesis by means of the following chain of equalities and inclusions (making use of (R) to get the first equality, and exploiting (15) subsequently):
1l∈∩ trans = 1l ○ ( ∈\ $∈ ) ∩ trans
= ( 1l∈∪ 1l∈ ) ○ ( ∈\ $∈ ) ∩ trans
= ( 1l∈○ ( ∈\ $∈ ) ∪ 1l∈○ ( ∈\ $∈ )) ∩ trans
= 1l∈○ ( ∈\ $∈ ) ∩ trans ∪ 1l∈○ ( ∈\ $∈ ) ∩ trans
= Ø ∪ 1l∈○ ( ∈\ $∈ ) ∩ trans
= 1l∈○ ( ∈\ $∈ ) ∩ trans
⊆ 1l∈○ ( ∈\ $∈ )
⊆ 1l∈○∈ ,
These eight equalities and inclusions were proved byOtter with the following respective proof-lengths and times: 8 steps, 0.07 seconds; 4 steps, 0.09 seconds;
4 steps, 0.01 seconds; 24 steps, 3.57 seconds; 4 steps, 0.16 seconds; 3 steps,
0.04 seconds; 3 steps, 4.97 seconds; 3 steps, 9.03 seconds.
Conclusions
The language L× may look distasteful to reading, but it ought to be clear that techniques for moving back and forth between first-order logic and map logic exist and are partly implemented (cf. [34,19,6,17,8]); moreover they can be ameliorated, and can easily be extended to meet the specific needs of set- theories. Thanks to these, the automatic crunching of set-axioms of the kind discussed in this paper can be hidden inside the back-end of an automated reasoner.
Anyhow, we think that it is worthwhile to riddle through experiments our expectation that a few basic machine reasoning layers designed on top of L× may significantly raise the degree of automatizability of set-theoretic proofs. This expectation relies on the merely equational character of L× and on the

good properties of the map constructs; moreover, when the calculus of L× gets emulated by means of first-order predicate calculus, we see an advantage in the finiteness of the axiomatization of the set-theoretic framework.
Acknowledgements
Annalisa Chiacchiaretta, and four students of an Artificial Intelligence class, contributed to the first phase of the experimentation with Otter reported above.

References
Aureli, F., A. Formisano, E. G. Omodeo and M. Temperini, Map calculus: Initial application scenarios and experiments based on Otter, Technical Report 466, IASI-CNR (1998).
Bailin, S. C. and D. Barker-Plummer, Z-match: An Inference Rule for Incrementally Elaborating Set Instantiations, Journal of Automated Reasoning 11 (1993), pp. 391–428, (Errata in 12(3):411–412 1994).
Belinfante, J. G. F., On a modification of G¨odel’s algorithm for class formation, AAR Newsletter 34 (1996), pp. 10–15.
Bell, J. L. and A. B. Slomson, “Models and Ultraproducts: An Introduction (third revised printing),” North-Holland/American Elsevier, Amsterdam/New York, 1974.
Boyer, R., E. Lusk, W. McCune, R. Overbeek, M. Stickel and L. Wos, Set theory in first-order logic: Clauses for Go¨del’s axioms, Journal of Automated Reasoning 2 (1986), pp. 287–327.
Cantone, D., A. Cavarra and E. G. Omodeo, On existentially quantified conjunctions of atomic formulae of L+, in: M. P. Bonacina and U. Furbach, editors, Proceedings of the FTP97 International workshop on first-order theorem proving, 1997, pp. 45–52, RISC-Linz Report Series No. 97-50.
Cantone, D., A. Ferro and E. G. Omodeo, “Computable Set Theory. Vol. 1,” Oxford University Press, 1989, Int. Series of Monographs on Computer Science.
Cantone, D., A. Formisano, E. G. Omodeo and C. G. Zarba, Compiling dyadic first-order specifications into map algebra, in: Proceedings, of the 16th Twente Workshop on Language Technology—2nd AMAST Workshop Algebraic Methods in Language Processing (AMILP 2000), TWLT 16, University of Twente, 2000,
pp. 35–54.
Cantone, D., E. G. Omodeo and A. Policriti, “Set Theory for Computing — From decision procedures to declarative programming with sets,” Springer- Verlag, 2001, Texts and Monographs in Computer Science.


Chiacchiaretta, A., A. Formisano and E. G. Omodeo, Benchmark #1 for equational set theory, in: Giornata “Analisi Sperimentale di Algoritmi per l’Intelligenza Artificiale”, Roma, 1999.
URL http://www.dis.uniroma1.it/~rcra/roma99
Chiacchiaretta, A., A. Formisano and E. G. Omodeo, Map reasoning through existential multigraphs, Technical Report 05/00, Dipartimento di Matematica Pura ed Applicata, Universita` di L’Aquila (2000).
Chin, L. H. and A. Tarski, Distributive and modular laws in relation algebras, University of California Publications in Mathematics 1 (1951), pp. 341–384.
Cohen, P. J., “Set Theory and the Continuum Hypothesis,” Benjamin, New York, 1966.
Du¨ntsch, I., Rough relation algebras, Fundamenta Informaticae 21 (1994).
Formisano, A. and E. G. Omodeo, An equational re-engineering of set theories, in: R. Caferra and G. Salzer, editors, Automated Deduction in Classical and Non-Classical Logics, LNCS 1761 (LNAI) (2000), pp. 175–190.
Formisano, A. and E. G. Omodeo, Equational set-reasoning by automated map calculus, Technical Report 16/00, Dipartimento di Matematica Pura ed Applicata, Universita` di L’Aquila (2000).
Formisano, A., E. G. Omodeo and M. Temperini, Goals and benchmarks for automated map reasoning, Journal of Symbolic Computation 29 (2000).
Frias, M. F., A. M. Haeberer and P. A. S. Veloso, A finite axiomatization for fork algebras, Journal of the IGPL 5 (1997), pp. 311–319.
Haeberer., A. M., G. A. Baum and G. Schmidt, On the smooth calculation of relational recursive expressions out of first-order non-constructive specifications involving quantifiers, in: D. Bjørner, M. Broy and I. Pottosin, editors, Formal Methods in Programming and Their Applications, LNCS 735 (1993), pp. 281– 298.
J´onsson, B. and A. Tarski, Representation problems for relation algebras, Bull. Amer. Math. Soc. 54 (1948), pp. 80,1192.
Kwatinetz, M. K., “Problems of expressibility in finite languages,” Ph.D. thesis, University of California, Berkeley (1981).
Lyndon, R. C., The representation of relational algebras, Ann. of Math., Ser 2
51 (1950), pp. 707–729.
McCune, W. W., “OTTER 3.0 Reference Manual and Guide,” Argonne National Laboratory/IL, USA (1994).
No¨el, P. A. J., Experimenting with Isabelle in ZF set theory, Journal of Automated Reasoning 10 (1993), pp. 15–58.


Omodeo, E. G. and A. Policriti, Solvable set/hyperset contexts: I. Some decision procedures for the pure, finite case, Comm. Pure App. Math. 48 (1995),
pp. 1123–1155, Special Issue in honor of J.T. Schwartz.
Orlowska, E., Relational semantics for nonclassical logics: Formulas are relations, in: J. Wolenski, editor, Philosophical Logic in Polland, 1994 pp. 167– 186.
Parlamento, F. and A. Policriti, Expressing Infinity without Foundation, Journal of Symbolic Logic 56 (1991), pp. 1230–1235.
Paulson, L. C., Set Theory for Verification: I. From Foundations to Functions, Journal of Automated Reasoning 11 (1993), pp. 353–389.
Paulson, L. C., Set Theory for Verification. II: Induction and Recursion, Journal of Automated Reasoning 15 (1995), pp. 167–215.
Quaife, A., “Automates development of fundamental mathematical theories,” Kluwer Academic Publishers, 1992.
Quine, W. V., “Set theory and its logic.” The Belknap Press of Harvard University Press, Cambridge, Massachussetts, 1971, revised edition, 3rd printing.
Schmidt, G. and T. Stro¨hlein, Relation algebras: Concept of points and representability, Discrete Mathematics 54 (1985), pp. 83–92.
Tarski, A., Sur les ensembles fini, Fundamenta Mathematicae VI (1924),
pp. 45–95.
Tarski, A. and S. Givant, “A formalization of Set Theory without variables,” Colloquium Publications 41, American Mathematical Society, 1987.
Wos, L., “Automated Reasoning. 33 basic research problems,” Prentice Hall, 1988.
Wos, L., The problem of finding an inference rule for set theory, Journal of Automated Reasoning 5 (1989), pp. 93–95.
Zermelo, E., Untersuchungen u¨ber die Grundlagen der Mengenlehre I, in: From Frege to G¨odel - A source book in Mathematical Logic, 1879-1931, Harvard University Press, 1977 pp. 199–215, 3rd printing.
