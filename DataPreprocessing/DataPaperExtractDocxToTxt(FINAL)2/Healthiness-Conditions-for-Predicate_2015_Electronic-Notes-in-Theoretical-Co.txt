Available online at www.sciencedirect.com


Electronic Notes in Theoretical Computer Science 319 (2015) 255–270
www.elsevier.com/locate/entcs

Healthiness Conditions for Predicate Transformers
Klaus Keimel 1,2
Fachbereich Mathematik Technische Universit¨at Darmstadt 64289 Darmstadt, Germany

Abstract
The behavior of a program can be modeled by describing how it transforms input states to output states, the state transformer semantics. Alternatively, for verification purposes one is interested in a ’predicate transformer semantics’ which, for every condition on the output, yields the weakest precondition on the input that guarantees the desired property for the output.
In the presence of computational effects like nondeterministic or probabilistic choice, a computation will be modeled by a map t: X → T Y , where T is an appropriate computational monad. The corresponding predicate transformer assigns predicates on Y to predicates on X. One looks for necessary and, if possible, sufficient conditions (healthiness conditions) on predicate transformers that correspond to state transformers t: X → T Y .
In this paper we propose a framework for establishing healthiness conditions for predicate transformers. As far as the author knows, it fits to almost all situations in which healthiness conditions for predicate transformers have been worked out. It may serve as a guideline for finding new results; but it also shows quite narrow limitations.
Keywords: predicate transformers, healthiness conditions, continuation monad, commuting operations, entropic algebras


Introduction: An example
In denotational semantics we distinguish two complementary approaches that we shortly call state transformer semantics and predicate transformer semantics. Let us begin with the well-known example of angelic nondeterminism to explain our intentions. As semantic domains we will use directed complete partially ordered sets (dcpos), maps will be Scott-continuous, that is, they preserve the order and suprema of directed subsets.
In the presence of nondeterministic choice, running a program for an input x
belonging toa domain X will lead to a set t(x) of possible outputs in a domain Y . In

1 Supported by Deutsche Forschungsgemeinschaft
2 Email: keimel@mathematik.tu-darmstadt.de

http://dx.doi.org/10.1016/j.entcs.2015.12.016
1571-0661/© 2015 The Author. Published by Elsevier B.V.
This is an open access article under the CC BY-NC-ND license (http://creativecommons.org/licenses/by-nc-nd/4.0/).

the angelic interpretation of nondeterminism, t(x) will be a non-empty Scott-closed subset of the dcpo Y and t will be a Scott-continuous map from the dcpo X to the Hoare powerdomain HY of all nonempty Scott-closed subsets of Y . The binary choice operator is interpreted by union on the Hoare powerdomain. Thus, a program will be interpreted by a state transformer, a Scott-continuous map t: X → HY .
Observable predicates on Y are Scott-open subsets U of Y (see, e.g., [25]). Thus, the complete lattice OY of all Scott-open subsets of Y represents the dcpo of predicates on Y . A Scott-continuous map p: OY → OX transforming predicates on Y to predicates on X will be a predicate transformer.
To a state transformer t: X → HY we associate the predicate transformer
p: OY → OX defined by:
p(U )= {x ∈ X | t(x) ∩ U /= ∅}
the set of all points in X that lead to at least one output with the desired property U (the angelic point of view). The state transformer t can be recovered from the associated predicate transformer p by
t(x)= \{Y \ U | x /∈ p(U )}
We are concerned with the problem to find properties (healthiness conditions) that characterize those predicate transformers p: OY → OX that correspond to state transformers t: X → HY . The answer in this case is:
The predicate transformers p: OY → OX that correspond to state transformers
t: X → HY are characterized by the properties:
p(∅)= ∅, p(U ∪ Uj)= p(U ) ∪ p(Uj)
Equivalently, these are the maps p preserving arbitrary unions.
The above considerations become more elegant, but less intuitive, by passing to a functional setting. We use that the category DCPO of dcpos and Scott-continuous maps is Cartesian closed. The exponential of two dcpos X and Y ,
denoted by Y X and equally by [X → Y ]
is the dcpo of all Scott-continuous maps u: X → Y with the pointwise defined order (one may consult [3] for background on dcpos).
We endow the two element domain 2 = {0 < 1} with the structure of a unital semilattice with x ∨ y = max(x, y) and the constant (unit) 0. A predicate (a Scott- open subset U) of a dcpo Y is identified with the Scott-continuous map fU : Y → 2 with value 1 iff x ∈ U . Thus the dcpo OY of predicates is identified with the function space 2Y . This function space is also a unital semilattice when equipped with the pointwise defined operation ∨ and the constant function 0. The Scott-
continuous unital semilattice homomorphisms ϕ: 2Y → 2 form a dcpo [2Y V,0 2]
which is also a unital semilattice for the pointwise defined semilattice operations. We will use that it is isomorphic to the Hoare powerdomain HY ; indeed, these homomorphisms ϕ correspond to the Scott-closed subsets of Y by assigning to ϕ the Scott-closed set C = Y \  {U ∈ OY | ϕ(fU )= 0}.
Now a state transformer will be a Scott-continuous map t: X → [2Y V,0 2] anda 

predicate transformer a Scott-continuous map p: 2Y → 2X . For a state transformer
t the corresponding predicate transformer p is given by

p(g)(x)= t(x)(g) for all g ∈ [2Y V,0
2],x ∈ X

We can recover t from p by reading this equation from right to left. For a state

transformer t: X → [2Y V,0
2] the corresponding predicate transformer p is a unital

∨-homomorphism. Indeed, using that t(x) is a unital ∨-homomorphism for every
x ∈ X, we have p(0)(x) = t(x)(0) = 0 and p(g ∨ gj)(x) = t(x)(g ∨ gj) = t(x)(g) ∨
t(x)(gj)= p(g)(x) ∨ p(gj)(x)= (p(g) ∨ p(gj))(x) for all x ∈ X, whence p(0) = 0 and p(g ∨ gj) = p(g) ∨ p(gj). Conversely, a similar calculation shows that, for a Scott- continuous unital ∨-semilattice homomorphism p: 2Y → 2X , the map t(x) defined by

t(x)(g)= p(g)(x) for all g ∈ 2Y
is indeed a unital ∨-homomorphism for every x ∈ X and t: X → [2Y V,0

2] is a 

state transformer. Thus:
The predicate transformers p: 2Y  → 2X corresponding to state transformers

t: X → [2Y V,0
2] are characterized by the properties
p(0) = 0,  p(g ∨ gj)= p(g) ∨ p(gj)

This functional approach is easily generalized to other situations. As above, in most applications an essential step will be the translation of the given situation into a functional setting.
The problem
We work in the category DCPO of dcpos and Scott-continuous functions, a category which is commonly used in semantics. We agree on some assumptions that will be tacitly assumed throughout the paper.
Convention 2.1 All maps between dcpos will tacitly supposed to be Scott-continuous. All deﬁnitions of functions are expressible in the language of typed λ-calculus so that these functions are automatically Scott-continuous, since we are in a Cartesian closed category (see, for example, [19, Part I]). For this reason, we will never verify continuity of functions explicitly.
R will be a ﬁxed dcpo, called the dcpo of observations;
X and Y denote arbitrary dcpos;
x, y and r denote elements of X, Y and R, respectively;
u denotes Scott-continuous maps u: X → Y ;
f and g denote Scott-continuous maps f : X → R and g: Y → R; ϕ denotes Scott-continuous maps ϕ: RX → R.
Predicates on a dcpo Y will be R-valued 3 , that is, Scott-continuous functions g: Y →

3 Since R can be very different from the two-element set of truth values, this notion of a predicate is very wide, and one instead uses terms like ’prevision’ [4], ’expectation’ [21], ’random variable’ [18] instead, depending on the concrete situation.

R. The function space (exponential) for which we will use two notations in parallel,
RY = [Y → R], will be the domain of predicates on Y .
The contravariant functor R(−) assigns to every dcpo X the exponential RX and to every map u: X → Y of dcpos the map Ru: RY → RX defined by Ru(g)= g ◦ u for all g ∈ RY . Applying the contravariant functor R(−) twice yields a covariant functor RR(−) = [R(−) → R], the continuation monad 4 over R. The unit of the monad represents X as a sub-dcpo of RRX and is given by the map δ: X → RRX that assigns to every x ∈ X the projection or evaluation map δx: RX → R defined by
δx(f )= f (x)
For a map t: X → [RY → R] its Kleisli lifting t†: [RX → R] → [RY → R] is given by
t†(ϕ)(g)= ϕ(λx. t(x)(g)).
According to our setting, a program will be interpreted by a state transformer,
a Scott continuous map t: X → RRY . A predicate transformer will be a Scott- continuous map p: RY → RX . To every state transformer corresponds a predicate transformer that assigns the weakest precondition to every postcondition:
Lemma 2.2 The dcpos of state and predicate transformers are canonically isomor- phic:
[RY → R]X ∼= [RY → RX ]
A state transformer t: X → [RY → R] and a predicate transformer p: RY → RX
correspond to one another under this isomorphism if and only if
t(x)(g)= p(g)(x)	for x ∈ X, g ∈ RY .
Proof. For a state transformer t: X → [RY → R] let p = P (t): RY → RX be defined by P (t) = λg. λx. t(x)(g). As we are in a Cartesian closed category and P (t) is defined by a λ-calculus term, P (t) is Scott-continuous. Similarly if, for a predicate transformer p: RY → RX , we define t = T (p) = λx. λg. p(g)(x), then T (p)(x): RY → R is in fact Scott-continuous for every x ∈ X and T (p) is a Scott- continuous map from X to [RY → R]. Moreover, P (T (p)) = p for every predicate transformer p, since P (T (p))(g)(x) = T (p)(x)(g) = p(g)(x) for every x ∈ X and every g ∈ RY . Similarly, T (P (t)= t for every state transformer t. One may notice that equation (3) is an isomorphism of dcpos, since P and T are λ-definable hence Scott-continuous mutually inverse maps.	2
Our domain R of observations will carry additional structure, it will be a d- Ω-algebra: a dcpo with an algebraic structure of signature Ω which interprets the constructors in the programming language (see Section 3). The exponentials RX and RRX become d-Ω-algebras, too, with pointwise defined operations. A program will be interpreted by a state transformer t: X → FRY , where FRY is the d-Ω- subalgebra of RRY generated by the projections δ , y ∈ Y .
4 See [20], for example, for background on monads.

The assignment X '→ FRX gives rise to a monad that we call subordinate to the continuation monad. This paper deals with the
Problem 2.3 Find conditions (healthiness conditions) that characterize the pred- icate transformers p: RY → RX that correspond to the state transformers t: X → FRY .
We cannot offer a complete answer to this question. But we exhibit a frame- work which always yields necessary conditions that the predicate transformers cor- responding to state transformers t: X → FRY must satisfy. And we give a criterion for these necessary conditions to be also sufficient. This criterion has to be checked separately in each special situation.
Let us make precise what we mean by a monad F subordinate to the continuation monad : Suppose that F assigns to every dcpo X a sub-dcpo FX of [RX → R] in such a way that the following properties are satisfied:
δx ∈ FX for all x ∈ X;
t†(FX) ⊆ FY  for every t: X → [RY → R].
Then RRu maps FX into FY for every map u: X → Y ; indeed, RRu is the Kleisli lifting of δ ◦ u: X → [RY → R]. Thus RRu induces a map Fu: FX → FY in such a way that F becomes a functor, and even a monad with (the corestriction of) δ as unit and the (restriction-corestriction of the) Kleisli lifting t†|FX : FX → FY for t: X → FY .
Our methods can be applied to quite some examples in the literature, in par- ticular for nondeterminism and probability [4,5,9,13,14,15,16,18,21,25]. There, the monads are usually presented in the form of powerdomains. For applying our results one has to find functional representations for these powerdomains of the type FRX, as we have seen in the Introduction. This paper is based on previous work by the author [11]. There, several examples are worked out explicitly which is not possible in this paper because of space restrictions. The reader is invited to consult that source for examples.
Acknowledgments
The author would like to thank Gordon Plotkin for many insights. Thomas Stre- icher has listened to many questions and patiently discussed possible answers. The referees’ suggestions were quite helpful.
Algebraic structure
We recall a few concepts from universal algebra adapted to the category DCPO.
An operation of arity n ∈ N on a dcpo A is a map ω: An → A. If A and B both carry an n-ary operation ω,a map h: A → B is an ω-homomorphism if, for all (a1,..., an) ∈ An, we have:
h(ω(a1,..., an)) = ω(h(a1),..., h(an))

Definition 3.1 A d-signature Ω is a sequence of dcpos Ωn,n ∈ N. The elements
ω ∈ Ωn are the operation symbols of arity n.
Definition 3.2 A d-algebra of d-signature Ω (a d-Ω-algebra, for short) consists of a dcpo A together with operations ωA: An → A, one for each ω ∈ Ωn, such that
(ω, a1,..., an) '→ ωA(a1,..., an): Ωn × An → A
is Scott-continuous for every n.  A map u: A → B of d-Ω-algebras is an Ω-homomorphism, if it is an ω-homomorphism for every ω ∈ Ω.
We stress that the value ωA(a1,..., an) depends continuously not only on the arguments ai but also on ω ∈ Ωn. By choosing the Ωn to be (unordered) sets we recover the usual notion of a signature Ω in universal algebra.
Convention 3.3 We will omit the superscript when denoting operations ωA on a d-Ω-algebra A and simply write ω instead of ωA.
In proofs, we will use a binary operation, denoted by +, instead of an arbitrary n-ary operation ω. In this way, proofs become easier to read. Of course, we will not use any special property like commutativity that one usually associates with an operation +. This does not affect the general validity of our proofs; one just has to replace x1 + x2 by ω(x1,..., xn) in order to obtain the general proof.
We fix a d-signature Ω and a d-Ω-algebra R. For every dcpo X, the function space RX also becomes a d-Ω-algebra. For ω ∈ Ωn the operation ω on the function space RX is defined pointwise: For all f1,..., fn ∈ RX and all x ∈ X,
ω(f1,..., fn)(x)= ω(f1(x),..., fn(x)).
For every map u: X → Y , the map Ru: RY → RX is an Ω-homomorphism. Thus, we may view R(−) to be contravariant functor from the category DCPO to the category of d-Ω-algebras and Ω-homomorphisms.
In the same way, the operations ω can be extended to the function space RRX = [RX → R] so that the latter becomes a d-Ω-algebra, too, and the maps RRu are Ω-homomorphisms.
Lemma 3.4 The Kleisli lifting t†: [RX → R] → [RY → R] is an Ω-homomorphism for every t: X → [RY → R].
Proof. We check that, for every binary operation + in Ω2 and all ϕ1, ϕ2, we have t†(ϕ1 + ϕ2)= t†(ϕ1)+ t†(ϕ2). For every g ∈ RY we have indeed: t†(ϕ1 + ϕ2)(g)= (ϕ1 + ϕ2)(λx. t(x)(g)) = ϕ1(λx. t(x)(g)) + ϕ2(λx. t(x)(g)) = t†(ϕ1)(g)+ t†(ϕ2)(g)= (t†(ϕ1)+ t†(ϕ2))(g).	2
R-Free algebras
We are interested in the monad that represents the free objects over a dcpo X relative to our d-Ω-algebra R of observations that we keep fixed throughout this section.

A subalgebra of a d-Ω-algebra A which is a sub-dcpo, too, is called a d-Ω- subalgebra. The intersection of any family of d-Ω-subalgebras is again a d-Ω- subalgebra. Thus every subset of A generates a d-Ω-subalgebra, the intersection of all d-Ω-subalgebras containing the subset.
Definition 4.1 The d-Ω-subalgebra FRX of [RX → R] generated by the projec- tions δx, x ∈ X, is called the free d-Ω-algebra over X with respect to R or simply the R-free d-Ω-algebra over X.
For a map t: X → FRY , the Kleisli lifting t†: [RX → R] → [RY → R] maps
FRX into FRY , since t† is an Ω-homomorphism by Lemma 3.4. This shows:
Proposition 4.2 (FR, δ, †) is a monad over the category DCPO subordinate to the continuation monad in the sense made precise at the end of Section 2, the Kleisli lifting of a map t: X → FRY being the restriction and corestriction of the Kleisli lifting t† for the continuation monad RR(−) .
Since we have a monad, the d-Ω-algebras FRX are free for the class of its Eilenberg-Moore algebras. It is a challenge to determine these Eilenberg-Moore algebras concretely. A natural conjecture would be that FRX is free over X for the class of d-Ω-algebras determined by the (in)equational theory of the d-Ω-algebra R. This conjecture is supported by a theorem due to G. Birkhoff (see [2]) which tells us that, in the category SET, FRX is free over the set X in the class of all Ω-algebras that satisfy the equational laws that hold in R. Such a strong statement will not hold in the dcpo-setting, in general, although it holds in many examples.
The following proposition (that we state without proof) shows that FRX is free in the class of d-Ω-algebras that are embeddable in some power of R. This class is sometimes called the quasi-variety generated by R. The algebras in this class satisfy not only all equational and inequational laws that hold in R, but also all implications between two such laws (Horn formulas) that hold in R.
Proposition 4.3 Let u be a map from a dcpo X to a d-Ω-algebra A that is embed- dable in some RY as a d-Ω-subalgebra. Then there is a unique Ω-homomorphism u^: FRX → A extending u along δ.

Homomorphism monads
We continue with a fixed d-Ω-algebra R of d-signature Ω. In order to find properties characterizing the predicate transformers p: RY → RX that correspond to the state transformers t: X → FRY , we need a second monad subordinate to the continuation monad.
For two d-Ω-algebras A and B, we denote by
[A −Ω→ B]
the set of all Ω-homomorphisms u: A → B. The pointwise supremum of a directed family of Ω-homomorphisms is again an Ω-homomorphism. Thus, [A −Ω→ B] be-

comes a dcpo, a sub-dcpo of the dcpo [A → B] of all Scott-continuous maps from
A to B.
Proposition 5.1 For a d-Ω-algebra R, the assignment
X '→ [RX −Ω→ R]
yields a monad subordinate to the continuation monad. The unit is (the corestric-

tion of) δ and the Kleisli lifting of a map t: X → [RY
−Ω→ R] is (the restriction-

corestriction) t†: [RX −Ω→ R] → [RY −Ω→ R].
Proof. We show that we are in a situation as described at the end of Section 2.
Clearly, the projections δx: RX → R are Ω-homomorphisms for every x ∈ X.
For every state transformer t: X → [RY −Ω→ R], the Kleisli lifting t† maps
[RX −Ω→ R] to [RY −Ω→ R] . Indeed, let ϕ: RX → R be an Ω-homomorphism. For a
binary operation + in Ω and g1, g2 ∈ RY , we have:
t†(ϕ)(g1 + g2)
= ϕ(λx. t(x)(g1 + g2))	by the definition of t†
= ϕ(λx.(t(x)(g1)+ t(x)(g2)))	since t(x) is a homomorphism
= ϕ(λx. t(x)(g1)+ λx. t(x)(gn))	since + is defined pointwise
= ϕ(λx. t(x)(g1)) + ϕ(λx. t(x)(gn)) since ϕ is a homomorphism
= t†(ϕ(g1)) + t†(ϕ(gn))	by the definition of t†.
2
The ’homomorphism monad’ ([R(−) −Ω→ R], δ, †) exhibited in the previous propo- sition behaves well with respect to the one-to-one correspondence between state and predicate transformers:
Proposition 5.2 Let R be d-Ω-algebra. Under the one-to-one correspondence be- tween state transformers and predicate transformers in Lemma 2.2 the predicate transformers  p: RY   →  RX  corresponding  to  the  state  transformers

t: X	→	[RY
−Ω→	R]	are	characterized	by	the	property	of	being

Ω-homomorphisms: [RY −Ω→ R]X ∼= [RY −Ω→ RX ]
Proof. Let t: X → [RY → R] be a state transformer and p: RY → RX the cor- responding predicate transformer according to Lemma 2.2. We show that, for a binary operation + in Ω, t(x) is a +-homomorphism for every x ∈ X if, and only if, p is a +-homomorphism.
If t(x) is a +-homomorphism for every x ∈ X then, for all g1, g2 ∈ RY , p(g1 + g2)(x)= t(x)(g1 + g2)= t(x)(g1)+ t(x)(g2)= p(g1)(x)+ p(g2)(x)= (p(g1)+ p(g2))(x),  whence  p(g1 + g2)  =  p(g1) + p(g2),  that  is,  p  is  a
+-homomorphism. If conversely p is a +-homomorphism, then t(x)(g1 + g2) = p(g1 + g2)(x)= (p(g1)+ p(g2))(x)= p(g1)(x)+ p(g2)(x)= t(x)(g1)+ t(x)(gn) which shows that t(x) is a +-homomorphism for all x ∈ X.	2

One may notice that the proof above is identical to the only proof that we gave in the Introduction for that special situation.
Commuting operations
We come back the monad FR of section 4 for a given d-Ω-algebra R. We want to consider state transformers t: X → FRY and the corresponding predicate trans- formers p: RY → RX according to Lemma 2.2. In order to apply the results obtained in the previous section with the homomorphism monad we have to introduce a new framework.
Definition 6.1 Given two operations σ of arity m and ω of arity n on a dcpo A, we say that σ and ω commute if for all ’matrices’ (xij)i=1,...,m, j=1,...,n of elements in A, we have:
ω(σ(x11,..., xm1), . . . , σ(x1n,..., xmn))
= σ(ω(x11,..., x1n), . . . , ω(xm1,..., xmn))
This is equivalent to the statement that σ: Am → A is an ω-homomorphism, equiv- alently, that ω: An → A is a σ-homomorphism.
Example 6.2 A constant c commutes with an n-ary operation ω if and only if ω(c,..., c)= c. Two commuting constants have to agree. Two unary operations ρ and σ commute if they commute as functions: ρ ◦ σ = σ ◦ ρ. A unary operation ρ commutes with a binary operation + if and only if
ρ(x + y)= ρ(x)+ ρ(y)
Two binary operation + and ∗ commute if
(x1 ∗ x2)+ (x3 ∗ x4)= (x1 + x3) ∗ (x2 + x4)
In particular, a binary relation ∗ commutes with itself if
(x1 ∗ x2) ∗ (x3 ∗ x4)= (x1 ∗ x3) ∗ (x2 ∗ x4)
Thus, every commutative, associative binary operation commutes with itself.
Now let Ω be a d-signature and R a d-Ω-algebra. Let
Σn = [Rn −Ω→ R]
be the dcpo of all Ω-homomorphisms σ: Rn → R, that is, Σn consists of all op- erations of arity n on R that commute with all ω ∈ Ω. The Σn form a second d-signature Σ and R is a d-Σ-algebra, too. The fact that, on R, the operations in Σ commute with those in Ω is given by equational laws of the form in Definition
These equational laws are inherited by exponentials RX and RRX considered as d-(Ω ∪ Σ)-algebras (with pointwise defined operations) so that the operations ω ∈ Ω commute with all the operations σ ∈ Σ on all exponentials of R .
At this point it becomes clear, why we wanted to choose signatures which are dcpos and not simply (unordered) sets; indeed, our signature Σ is a dcpo in a natural way.

The homomorphisms between two Ω-algebras do not form an Ω-algebra, in gen- eral. The following observation was a surprise to me. But if you think about it, you might find that you always have known it:
Lemma 6.3 Suppose that R is a d-Ω-algebra and Σ a d-signature of operations σ on R that commute with all ω ∈ Ω. Then the set [RX −Σ→ R] of all Σ-homomorphisms ϕ: RX → R is a d-Ω-subalgebra of [RX → R] containing the R-free algebra FRX.
Proof. If ϕ1,..., ϕn: RX → R are Σ-homomorphisms, then ω(ϕ1,..., ϕn) is alsoa Σ-homomorphism for every ω ∈ Ωn. Indeed, if ω is a binary operation + then, for every binary operation ∗ in Σ2, hence commuting with +, we have:
(ϕ1 + ϕ2)(f1 ∗ f2) = ϕ1(f1 ∗ f2)+ ϕ2(f1 ∗ f2)
= ϕ1(f1) ∗ ϕ1(f2)) + ϕ2(f1) ∗ ϕ2(f2)))
= (ϕ1(f1)+ ϕ2(f1)) ∗ (ϕ1(f2)+ ϕ2(f2))
= (ϕ1 + ϕ2)(f1) ∗ (ϕ1 + ϕ2)(f2)
Thus the Σ-homomorphisms ϕ: RX → R form an Ω-subalgebra [RX −Σ→ R]. Clearly

all the projections δx are Σ-homomorphisms. Hence, [RX
−Σ→ R] contains FRX,

the d-Ω-subalgebra of [RX → R] generated by the projections.	2
From the previous lemma and Proposition 5.2 we immediately deduce our main result on healthiness conditions:
Theorem 6.4 Suppose that R is a d-Ω-algebra and Σ a d-signature of operations on R that commute with all ω ∈ Ω. Then the predicate transformers p: RY → RX corre- sponding to the state transformers t: X → FRY are necessarily Σ-homomorphisms.
If FRY = [RY −Σ→ R], then the Σ-homomorphisms p: RY → RX are are precisely the predicate transformers corresponding to state transformers t: X → FRY :
(FRY )X ∼= [RY −Σ→ RX ].
For applying this Theorem, the challenge is to find operations on R that commute with those in Ω. This then yields necessary healthiness conditions for the predicate transformers. It depends very much on the special situation whether these healthi- ness conditions are also sufficient: one has to show that the d-Ω-algebra [RY −Σ→ R] is indeed generated by the projections δy, hence equal to the R-free d-Ω-algebra FRY . The classical example of observable predicates can be treated in this way, and also the example of convex sets and effect modules as viewed by B. Jacobs [8]. In the first case role of R is taken by the two element dcpo 2 = {0 < 1} without any algebraic structure, in the second case by the unit interval.
We now look at the special situation where the operations of the d-Ω-algebra commute with one another (see also [23]) :
Definition 6.5 A d-Ω-algebra is called entropic if any two operations σ, ω ∈ Ω commute.

We note that the entropic d-Ω-algebras are the algebras ofa commutative monad over the category DCPO in the sense of A. Kock [17].
As a particular case of Lemma 6.3 and Theorem 6.4 with Ω = Σ we have:
Corollary 6.6 If R  is an entropic d-Ω-algebra, the Ω-homomorphisms ϕ: RX → R form a d-Ω-algebra [RX −Ω→ R] containing the R-free algebra FRX as a d-Ω-subalgebra.
The predicate transformers p: RY → RX corresponding to state transformers t: X → FRY are Ω-homomorphisms. If FRY = [RX −Ω→ R] these predicate trans- formers are precisely the Ω-homomorphisms.
Entropicity is quite a special property. Using Example 6.2 we obtain examples of entropic algebras: commutative semigroups, commutative monoids, commutative groups, modules over commutative rings, semimodules over commutative semirings, semilattices and unital semilattices.
Corollary 6.6 can be used for deriving the healthiness criteria for angelic nonde- terminism in the Introduction (Section 1). The only specific property to be proved is that every unital semilattice homomorphism ϕ: 2Y → 2 is the supremum of the projections δx with δx ≤ ϕ which is equivalent to the property that every nonempty Scott-closed subset of a dcpo is the union of the principal ideals ↓x, x ∈ X. In the same way this Corollary can be used for deriving healthiness criteria for predi- cate transformers in the case of demonic and erratic (the combination of angelic and demonic) nondeterminism as well as for probabilistic nondeterminism as in [9,10,25]. But the known results for predicate transformers in the presence of both nonde- terministic and probabilistic choice do not fit into the framework developed above. The reason is that, for example, on the nonnegative reals, the operation of addition and the semilattice operation max and min do not commute. We therefore propose
a relaxed framework.
Relaxed morphisms and relaxed entropic algebras
We relax the previous framework by replacing equalities by inequalities (compare Definition 6.1):
Definition 7.1 Let ω be an operation of arity n defined on dcpos A and B. A map
h: A → B is called an ω-submorphism 5 if
h(ω(x1,..., xn)) ≤ ω(h(x1),..., h(xn)) for all x1,..., xn ∈ A.
An ω-supermorphism is defined in the same way replacing the inequality ≤ by its opposite ≥.
For d-algebras of d-signature Ω, we want to distinguish some operations ω ∈ Ω for which we would like to consider relaxed morphisms. For this, we suppose that

5 For the terminology we have been guided by a common terminology in analysis. A function on a vector space is subadditive if h(x + y) ≤ h(x)+ h(y) and superadditive if the reverse inequality holds.

the d-signature Ω is the union of two d-sub-signatures Ω≤ and Ω≥ which need not be disjoint.
Definition 7.2 A map h: A → B between d-algebras of d-signature Ω = Ω≤ ∪ Ω≥ is said to be a relaxed Ω-morphism if h is an ω-submorphism for all ω ∈ Ω≤, but an ω- supermorphism  for  ω  ∈  Ω≥.   (For  ω  in  both  Ω≤  and  Ω≥, h will be an ω-homomorphism.)
The pointwise supremum of a directed family of relaxed Ω-morphisms is again

a relaxed Ω-morphism. Thus the set [A −r→Ω
of relaxed Ω-morphisms from A to

B is a sub-dcpo of the function space [A → B]. As in Proposition 5.1 and 5.2 we have:
Proposition 7.3 Let R be a d-Ω-algebra of d-signature Ω= Ω≤ ∪ Ω≥.

For every state transformer t: X → [RY
−r→Ω
R] , the Kleisli lifting t†: [RX →

R]	→	[RY	→	R]	maps	relaxed	Ω-morphisms	to	relaxed
Ω-morphisms, so that our continuation monad ([R− → R], δ, †) restricts to a monad

([R(−) −r→Ω
R], δ, †).

Under the bijective correspondence of Lemma 2.2, the predicate transformers

p: RY → RX corresponding to state transformers t: X → [RY Ω-morphisms:
−r→Ω
R] are the relaxed

[RY
−r→Ω
R]X ∼= [RY
−r→Ω
RX ]

The proofs are the same as for the corresponding claims in 5.1 and 5.2. We just have to replace the equality sign by the appropriate inequality (≤ in case ω ∈ Ω≤ and ≥ in case ω ∈ Ω≥) every time that we have used the homomorphism property there.
We now turn to the question under what circumstances the relaxed Ω-morphisms form a subalgebra of [RX → R].
Definition 7.4 We will say that an operation σ of arity m on a dcpo R subcom- mutes with an operation ω of arity n (equivalently, ω supercommutes with σ) if, for all xij ∈ R, i = 1,..., m, j = 1,..., n:
σ(ω(x11,..., x1n),..., ω(xm1,..., xmn))
≤ ω(σ(x11,..., xm1),..., σ(x1n,..., xmn))
This is equivalent to the statement that σ: Rm → R is an ω-submorphism, and also equivalent to the statement that ω: Rn → R is σ-supermorphism. Whenever this inequational law holds in R, it also holds in RX and in RRX .
We now let R be a d-Ω-algebra. For every natural number m, we denote by Σ≥ and Σ≤ the dcpos of all operations σ: Rm → R that subcommute, resp., supercom- mute, with all ω ∈ Ω. These give rise to d-signatures Σ≤, Σ≥, and Σ = Σ≤ ∪ Σ≥. As in Lemma 6.3 we have:
Lemma 7.5 The relaxed Σ-morphisms ϕ: RX → R form a d-Ω-subalgebra [RX −r→Σ
R] of [RX → R].

We now are ready for our main theorem corresponding to Theorem 6.4:
Theorem 7.6 Consider a d-signature Ω = Ω≤ ∪ Ω≥ and a d-Ω-algebra R. Let Σ= Σ≤ ∪ Σ≥ be a d-signature of operations that subcommute, resp. supercommute with all ω ∈ Ω. Then the d-Ω-algebra FRY generated by the projections is a d-Ω-

subalgebra of [RY −r→Σ
R].

The predicate transformers p: RY → RX corresponding to state transformers

t: X → FRY are relaxed Σ-morphisms. If FRY = [RY −r→Σ
transformers are precisely the relaxed Σ-morphisms.
R], then these predicate

We are mainly interested in the following situation where we can choose Ω = Σ:
Definition 7.7 A d-Ω-algebra R is said to be relaxed entropic, if every σ ∈ Ω either subcommutes with every ω ∈ Ω or supercommutes with every ω ∈ Ω.


From the preceding Theorem we deduce:
Corollary 7.8 Let R be a relaxed entropic d-Ω-algebra. The set [RX −r→Ω
relaxed Ω-morphisms ϕ: RX → R is a d-Ω-subalgebra of [RX → R].

R] of all

The d-Ω-subalgebra FΩX of [RX → R] generated by the projections δx, x ∈ X,

is a d-Ω-subalgebra of [RX −r→Ω
R].

The predicate transformers p: RY → RX corresponding to state transformers

t: X → FΩY are relaxed Ω-morphisms. If FΩY = [RY −r→Ω
transformers are precisely the relaxed Ω-morphisms.
R], then these predicate

Whether we have equality FRY = [RY −r→Ω each special case.
R], has to be decided separately in

On the nonnegative real line addition subcommutes with the semilattice oper- ation x ∨ y = max(x, y) and it supercommutes with x ∧ y = min(x, y). One has indeed for arbitrary nonnegative real numbers:
(x1 + x2) ∨ (x3 + x4) ≤ (x1 ∨ x3)+ (x2 ∨ x4)
(x1 + x2) ∧ (x3 + x4) ≥ (x1 ∧ x3)+ (x2 ∧ x4)
These simple facts allow us to use our relaxed setting for deriving healthiness con- ditions for predicate transformers in the presence of mixed nondeterministic and probabilistic choice as in [4,5,13,14,15,16,21].
Concluding remarks
The framework for deriving healthiness conditions for predicate transformers devel- oped in this paper looks quite narrow, although it applies to almost all situations known to the author. (An exception is [7], where one meets a quite different notion of predicate.) There is some evidence that it may not be possible to characterize predicate transformers in situations that do not fit under this framework.
Nevertheless, our methods allow quite some extensions. We have not carried them out in this paper in order to keep it at a technically simple level.

Firstly we may allow infinite arities for signatures and consider operations ω: RI → R for infinite sets I. We may also allow arities to be dcpos; that is, a signature may contain operation symbols ω of arity P , where P is a dcpo; then ω will be interpreted as a map ω: RP → R. For example, we may choose P to be the two element dcpo 2 = {0 < 1}; an operation ω: R2 → R of arity 2 will be defined on the graph of the order of R and not on all of R × R.
We have worked in the category DCPO of directed complete partially ordered sets and Scott-continuous functions. The results apply in particular to the sub- category SET of sets. One can use the same arguments in other Cartesian closed categories as, for example, the category of qcb-spaces (quotients of countably based topological spaces [1]) and the category POSET of partially ordered sets and order preserving functions. The relaxed setting will need poset enriched categories, of course.
I. Hasuo [5] deals with predicate transformers for monads enriched with order in a very general way. The results in his main examples on weakest precondition semantics for two player games [5, Sections 4 and 6] can be recovered by our methods if one transfers them to the category POSET which of course contains the category SET.
We can apply our methods also in situations where the ambient category is no longer Cartesian closed. Since we are working with exponentials of a fixed object R and certain subobjects thereof, we have to ensure that these exponentials exist and yield a model of simply typed λ-calculus. For this, an appropriate setting is provided by Hofmann and Streicher [6]. A category C they call category with continuations if C has finite products and a subclass T of objects with a distinguished object R ∈ T of responses such that every A ∈ T has an exponential RA ∈ T, with the property that RA × B ∈ T for any B ∈ T. A simple example for this situation is the category of continuous dcpos and Scott-continuous maps provided that R is a continuous lattice. Another example is the category of topological spaces and continuous maps: For T one may take the class of exponentiable spaces and for R a continuous lattice with the Scott topology .
For an equationally defined class of entropic algebras, the monad given by the free algebras is commutative in the sense of A. Kock [17]. Thus, there should be a category theoretical extension our results.
The referees would have liked to see a new striking example, where our methods can be applied. But our Theorems 6.4 and 7.6 clearly indicate quite narrow limita- tions to the use of predicate transformer semantics. It is quite a rare phenomenon that operations commute or subcommute. One may not be able to go far beyond the known examples. And if the operations do not commute, one has to find a manageable collection of operations that commute with or subcommute with the given ones, a task that I have no idea how to be attacked except for some very simple cases.

References
I. Battenfeld, M. Schr¨oder and A. Simpson, A convenient category of domains. Electronic Notes in Theoretical Computer Science 172 (2007), pp. 69–99.
G. Birkhoff, Lattice Theory. American Mathematical Society Colloquium Publications vol. XXV, 3rd edition, (1967).
G. Gierz, K. H. Hofmann, K. Keimel, J. D. Lawson, M. Mislove and D. S. Scott, Continuous Lattices and Domains. Encyclopedia of Mathematics and its Applications, Vol. 93, Cambridge University Press, 2003.
J. Goubault-Larrecq, Prevision Domains and Convex Powercones. In: FoSSaCS’08, Lecture Notes in Computer Science 4962 (2008), pp. 318–333. Springer-Verlag.
I. Hasuo, Generic weakest precondition semantics from monads enriched with order. Theoretical Computer Science (2015) (In Press) http://dx.doi.org/10.1016/j.tcs.2015.03.047

M. Hofmann and Th. Streicher, Completeness of continuation models for λμ-calculus. Information and Computation 179 (2002), pp. 332-355.
E. D’Hondt and P. Panangaden, Quantum weakest preconditions. Mathematical Structures in Computer Science 16(3) (2006), pp. 429–451.
B. Jacobs, New directions in categorical logic, for classical, probabilistic and quantum logic. Logical Methods in Computer Science (to appear), arXiv:1205.3940v3 (2014).
C. Jones, Probabilistic non-determinism. Ph.D. Thesis, University of Edinburgh, Report ECS-LFCS- 90-105, 1990.
C. Jones and G. D. Plotkin, A probabilistic powerdomain of evaluations. Proc. LICS ’89, pp. 186–195, IEEE Press, 1989.
K. Keimel, On the equivalence of state transformer semantics and predicate transformer semantics. Proceedings of the Workshop Informatics and Information Technologies in Education: Theory, Practice, Didactics, Novosibirsk, vol. 1 (2012), pp. 78–104. (See also arXive:1410.7930.)
K. Keimel and J. D. Lawson, Extending algebraic operations to D-completions. Theoretical Computer Science 430 (2012), pp. 73–87.
K. Keimel and G. D. Plotkin, Predicate transformers for extended probability and non-determinism.
Mathematical Structures in Computer Science 19 (2009), pp. 501–539.
K. Keimel and G. D. Plotkin, Mixed powerdomains for probability and nondeterminism. Submitted.
K. Keimel, A. Rosenbusch and Th. Streicher, A Minkowski type duality mediating between state and predicate transformer semantics for a probabilistic nondeterministic language. Annals of Pure and Applied Logic 159 (2009), pp. 307–317.
K. Keimel, A. Rosenbusch and Th. Streicher, Relating direct and predicate transformer partial correctness semantics for an imperative probabilistic-nondeterministic language. Theoretical Computer Science 412 (2011), pp. 2701–2713.
A. Kock, Commutative monads as a theory of distributions. Theory Appl. Categ. 26(4) (2012), pp. 97-131.
D. Kozen, Semantics of probabilistic programs. Journal of Computation and System Sciences, 22
(1981), pp. 328–350.
J. Lambek and P. J. Scott, Introduction to higher order categorical logic. Cambridge Studies in Advanced Mathematics 7, Cambridge University Press, 1986.
S. Mac Lane, Categories for the Working Mathematician. Graduate Texts in Mathematics, 2nd ed., Springer Verlag, 1998.
A. McIver and C. Morgan, Abstraction, Refinement and Proof for Probabilistic Systems. Springer Verlag, 2005.
E. Moggi,(1991) Notions of computation and monads. Information and Computation 93(1) (1991),
pp. 55–92.
A. B. Romanowska and J. D. H. Smith, Modes. World Scientific, 2002.

M. Schr¨oder and A. Simpson, Probabilistic observations and valuations (extended abstract). Electronic Notes in Theoretical Computer Science 155 (2006), pp. 605–615.
M. B. Smyth, Power domains and predicate transformers: A topological point of view. In: Automata, Languages and Programming, Lecture Notes in Computer Science 154 (1983), pp. 662–675.
R. Tix, K. Keimel and G. Plotkin, Semantic domains for combining probability and non-determinism.
Electronic Notes in Theoretical Computer Science 222 (2009), pp. 1–99.
