Electronic Notes in Theoretical Computer Science 44 No. 1 (2001)
URL: http://www.elsevier.nl/locate/entcs/volume44.html 17 pages


Invariants of monadic coalgebras

Dragan Maˇsulovi´c1
Institute of Mathematics University of Novi Sad
Trg D. Obradovi´ca 4, 21000 Novi Sad, Yugoslavia


Abstract
In this paper we consider invariants of computations described by monadic coal- gebras, that is, coalgebras for a functor endowed with the structure of a monad. Following the idea of Po¨schel and R¨oßiger [8], we propose another concept of invari- ants of such coalgebras, namely, the one based on co-relations. We introduce the clone-theoretic apparatus for monadic coalgebras and show that co-relations can be taken for a general representation of their invariants. We then demonstrate that not only subuniverses, but arbitrary λ-simulations can be thought of as invariants of monadic coalgebras, and that the approach to invariants via λ-simulations is in- ferior in comparison to the one via co-relations. In some cases invariant co-relations uniquely determine the monadic coalgebra. Since the same does not hold in general, to every monadic coalgebra we associate a coalgebra for the same monad which em- ulates the original one, and has the pleasant property of being uniquely determined by its invariant co-relations.
Key Words and Phrases: coalgebras, monads, invariants, co-relations, clone theory
AMS Subj. Classification (1991): 68Q05


Introduction
Coalgebras provide an elegant and unified apparatus for investigation of vari- ous models of both computation and data structures. A particularly intriguing approach to modeling computer programs formally was offered by E. Moggi in [5,6]. The idea is to represent programs by coalgebras X → T (X), where T is a functor endowed with the structure of a monad, with the intuition that programs are to be thought of as mappings from data (elements of X) to com- putations (elements of T (X)). The requirement that T be equipped with the

1 Email: masul@unsim.im.ns.ac.yu
◯c 2001 Published by Elsevier Science B. V. Open access under CC BY-NC-ND license.


structure of a monad is a way of coping with the need to compose simpler pro- grams into larger ones. Note that the carrier of a coalgebra is usually thought of as a set of internal states of the computation model under investigation. Following the idea of E. Moggi, in this paper we accept the other approach and think of it as the set of data.
Treating programs as monads has been widely accepted by the functional programming community, where it has led to elegant solutions to many prac- tical problems. The use of monads in functional programs makes easier both implementation and formal description of some key concepts such as purely functional input/output, destructive arrays, lazy evaluation and modular- ity [10,11].
The formal investigation of invariant properties of computations has started long time ago and has played an important role in the development of com- puter science ever since. In this paper, we consider invariants of computations described by monadic coalgebras. Invariants of arbitrary coalgebras were in- troduced in [4,3] as subsets of the carrier closed with respect to the coalgebraic structure. Inspired by the research presented in [8], we propose another con- cept: invariant co-relations.
We first show that co-relations and monadic coalgebras can be bound to- gether by means of a pair of standard clone-theoretic operators. The Galois connection which emerges from this construction shows that co-relations can be taken for a general representation of invariants of monadic coalgebras. We then demonstrate that not only subuniverses, but arbitrary λ-simulations can be thought of as invariants of such coalgebras, and that the approach to in- variants via λ-simulations is inferior in comparison to the one via co-relations. As its main tool, this paper introduces clone-theoretic apparatus for mo- nadic coalgebras. The “classical” clone theory [7] can be understood as a general theory of invariants of sets of operations. We say that an operation f
preserves a relation Q if

 a1 
 a2 	 an 
 f (a1,..., an) 

,	,...,	∈ Q	implies

 f (b1,..., bn) 



By the fact that f preserves Q we actually mean that f has the property “encoded” by Q. We also say that Q is an invariant of f . For example, “f preserves Q0 := {0}” means that f (0,..., 0) = 0, while “f preserves ≤”, where
≤ is a partial order, means that f is monotone.
To every set of operations F we can associate the set Inv F of all invariants common to all the elements of F . Dually, to every set of relations Q we can associate the set Pol Q of all the operations having each of the properties encoded by relations from Q. The pair ⟨Pol, Inv⟩ forms a Galois connection between sets of operations and sets of relations. Galois closed sets of operations


are called clones of operations. Clones of operations can be thought of as maximal sets of operations with the given set of properties. It turns out that there is another, equivalent, characterization: clones of operations are composition closed sets of operations containing all trivial operations. Let us note that the emphasis in clone-theoretic investigations is not on properties of one operation, but on sets of operations having certain sets of properties.
This paper is motivated by [8] and relies on notions and results presented there. In [8], a coalgebra is taken to be a pair ⟨X, F⟩ where X is a set and F a set of co-operations on X. In that context (first proposed by K. Drbohlav in 1971, [2]) an n-ary co-operation is a mapping f : X → X + ... + X (n times). Clones of co-operations understood in this way were introduced in [1], while the notion of co-relation (which is crucial for our purposes) and the standard clone-theoretic apparatus were introduced in [8]. The authors of [8] had a strong intuition that their results should somehow carry over to T -coalgebras. They expressed this opinion in the form of a problem posed in Remark 6.10. In this paper, we solve the problem for the class of monadic coalgebras.

Preliminaries
Co-operations and coalgebras.
Let X be a set and T : Set → Set a functor. A T-co-operation is any mapping α : X → T (X). A T-coalgebra on X is any pair ⟨X, α⟩ where α is a T -co-operation. To keep the terminology simple, we shall omit the prefix “T -” and we shall not distinguish between coalgebras and co-operations – in the sequel, the term coalgebra will refer to both.
If T is the identity functor, then T -coalgebras are just mappings X → X. For a set X let TX denote the set of all mappings X → X. For f, g ∈ TX and x ∈ X let (f · g)(x) := (g ◦ f )(x) := g(f (x)).

Let ⟨X, α⟩ and ⟨Y, β⟩ be coalgebras.	A mapping
h : X → Y is a homomorphism between ⟨X, α⟩ and
⟨Y, β⟩, in symbols h : ⟨X, α⟩ → ⟨Y, β⟩, if the adjacent diagram commutes. A bijective homomorphism is called
X	h✲	Y
α	β
❄	❄

isomorphism. We write ⟨X, α⟩ ∼= ⟨Y, β⟩ to denote that
the two coalgebras are isomorphic.
T (X)
T (h✲) T (Y ).

We say that ⟨X, α⟩ is a subcoalgebra of ⟨Y, β⟩ if X ⊆ Y and the inclusion mapping iX : X → Y : x '→ x is a homomorphism. In that case we say that X is a subuniverse of ⟨Y, β⟩.
Let ⟨X, α⟩ be a coalgebra, λ > 0 an ordinal and Q ⊆ Xλ a relation on
X.  We say that Q is a λ-simulation of ⟨X, α⟩ if there exists a coalgebra

γ : Q → T (Q) such that πλ
is a homomorphism between ⟨Q, γ⟩ and ⟨X, α⟩

for every ν < λ. Here, πλ is the projection mapping πλ(⟨xξ : ξ < λ⟩) = xν.
ν	ν
In case of λ = 2, we write π1 and π2 instead of (more correct) π2 and π2,
respectively.


Note that 1-simulations are precisely the subuniverses of the coalgebra, while 2-simulations are generally referred to as bisimulations on ⟨X, α⟩.
A relation Q ⊆ X × Y is called a bisimulation between coalgebras ⟨X, α⟩ and ⟨Y, β⟩ if there exists a coalgebra γ : Q → T (Q) such that π1 : Q → X and π2 : Q → Y are homomorphisms.
SetT denotes the category whose objects are T -coalgebras, and whose mor- phisms are homomorphisms between T -coalgebras.



Monads.
Let C be a category and let T : C → C an endofunctor. A C-monad is a triple ⟨T, µ, η⟩ where µ : T 2 → T and η : id → T are natural transformations such that:

T 3	T µ) T 2
T	ηT) T 2 (Tη	T


µT	µ
v
and
❅
id❅
/
µ /id

v
T 2	µ) T
❅❘ v/s
T

Recall that for every coalgebra α : X → T (X) we have µX ◦ T (α) ◦ ηX = α.



Monadic coalgebras.
Let M := ⟨T, µ, η⟩ be a Set-monad. To emphasise that T carries the structure of a monad, coalgebras for functor T will be referred to as M- coalgebras. Also, the category SetT will be denoted by SetM. For a set X, the pair ⟨M, X⟩ will be abbreviated to MX.
For a set X, let cAMX denote the set of all M-coalgebras on X. Note that for every f ∈ TX, the monounary algebra ⟨X, f⟩ is a coalgebra for the identity monad ⟨id, id, id⟩.
For α ∈ cAMX, let α∗ := µX ◦ T (α) ∈ TT (X) (the Kleisli star ). Let TMX := {f ∈ TT (X) | (f ◦ ηX)∗ = f}. The superposition of M-coalgebras α and β, in symbols α·β, is defined in the usual way: α·β := µX◦T (β)◦α = β∗◦α. It is clear that ⟨cAMX, ·, ηX⟩ is a monoid isomorphic to ⟨TMX, ·, idT (X)⟩ under the isomorphism α '→ α∗.
For α ∈ cAMX and a nonnegative integer k, we define αk by: α0 := ηX and αk := α · ... · α (k times). A coalgebra α is called idempotent if α2 = α. Let Setidp denote the full subcategory of SetM whose objects are idempotent coalgebras.
Submonoids of ⟨cAMX, ·, ηX⟩ will be referred to as monoids of coalgebras. For F ⊆ cAMX let MonMX F denote the least monoid of coalgebras contain- ing F .


Co-relations.
For a set Y let [Y | denote the least infinite cardinal exceeding |Y |:

[Y | :=	ℵ0,	|Y | < ℵ0
ℵξ+1,	|Y | = ℵξ,ξ ≥ 0.

Let Y be a set and let λ > 0 be an ordinal. A λ-ary co-vector on Y is any mapping r : Y → λ. A λ-ary co-relation on Y [8] is any set of λ-ary
co-vectors. If σ is a λ-ary co-relation, we write ar(σ) = λ. Let cR(λ) denote

the set of all λ-ary co-relations on Y and let cRY = 

0<λ<[Y |
cR(λ).

We say that f ∈ TY preserves Q ∈ cRY [8] if r ◦ f ∈ Q for all r ∈ Q. For
F ⊆ TY , let cInvY F := {Q ∈ cRY | every f ∈ F preserves Q} (see [8]). For
Q ⊆ cRY let cEndY Q := {f ∈ TX | f preserves every Q ∈ Q}.



Clones of co-relations.
Let ξ, λ and λi (i ∈ I) be ordinals such that ξ > 0 and 0 < λ, λi < [Y |,
i ∈ I. Further, let Qi ∈ cR(λi), i ∈ I, and let ϕ : ξ → λ and ϕi : ξ → λi, i ∈ I,
be arbitrary mappings. The generalised superposition of ⟨Qi : i ∈ I⟩ [8] is the
λ-ary co-relation defined by  ϕ Qi := {ϕ◦ r | r : Y → ξ and (∀i ∈ I) ϕi ◦ r ∈

Qi}.
i∈I

For a nonempty subset B ⊆ λ we define the λ-ary B-co-diagonal [8] by
λ := {r | r : Y → λ and r[Y ] ⊆ B}. We say that Q ⊆ cRY is a clone of
co-relations [8] if
Q contains all δλ , where 0 < λ < [Y | and ∅ /= B ⊆ λ, and
Q is closed with respect to all generalised superpositions.
We say that a clone Q of co-relations is complete if  S ∈ Q for every
that every clone of co-relations is closed with respect to arbitrary intersections; hence the name. What we here call complete clones of co-relations are referred to as 1-locally closed clones of co-relations in [8].)
The next proposition is a slight modification of [8, Theorems 5.1 and 5.2]. Although the paper considers finitary co-relations only, the proofs of the two theorems easily generalise to cardinals less than [Y |. Thus, we have:
Proposition 2.1 Let Y be a nonempty set.
M ⊆ TY is a transformation monoid if and only if M = cEndY cInvY M.
Q	⊆	cRY	is a complete clone of co-relations if and only if
Q = cInvY cEndY Q.

Monoids of coalgebras and clones of co-relations
In this section we extend the notions of co-relation, preservation, cEnd and cInv to coalgebras for a given monad. We characterise closed sets for the Galois connection ⟨cEnd, cInv⟩, and give a clone-theoretic description of λ- simulations. We pay additional attention to 1-simulations.

The clone-theoretic toolbox.
For a set X and a Set-monad M := ⟨T, µ, η⟩ let |MX| := |T (X)| and

[MX| :=	ℵ0,	|MX| < ℵ0
ℵα+1,	|MX| = ℵα,α ≥ 0.


A λ-ary co-relation on MX is any λ-ary co-relation on T (X). Let cR(λ)
de-

note the set of all λ-ary co-relations on MX and let cRMX = 

0<λ<[MX|
(λ)
MX

Let α ∈ cAMX be a coalgebra and let r : T (X) → λ be a co-vector. The
action of α on r is the λ-ary co-vector α · r defined by α · r := r ◦ µX ◦ T (α) = r ◦ α∗. We say that a coalgebra α ∈ cAMX preserves a co-relation σ and that the co-relation σ is an invariant of α if α · r ∈ σ whenever r ∈ σ.
For F ⊆ cAMX, let cInvMX F := {Q ∈ cRMX | every α ∈ F preserves Q}.
For Q ⊆ cRMX let cEndMX Q := {α ∈ cAMX | α preserves every Q ∈ Q}.

Characterisations.
The pair ⟨cEnd, cInv⟩ forms a Galois connection between the lattices P(cAMX) and P(cRMX). Our intention is to characterize the correspond- ing Galois closed sets of coalgebras and co-relations.
Lemma 3.1 Let α, β ∈ cAMX and F ⊆ cAMX. Further, let r be a co-vector,
Q ∈ cRMX and Q ⊆ cRMX. Then
(α · β) · r = α · (β · r).
α preserves Q if and only if α∗ preserves Q.
cInvT (X)(F∗) = cInvMX F.
If F∗ = cEndT (X) Q then F = cEndMX Q.
Proof. (i) follows by an easy calculation: (α · β) · r = r ◦ µX ◦ T (α · β) = r ◦µX ◦T (µX ◦T (β) ◦α) = r ◦µX ◦T (µX) ◦T 2(β) ◦T (α) = r ◦µX ◦T (β) ◦µX ◦ T (α) = α· (r ◦µX ◦T (β)) = α· (β · r), while (ii), (iii) and (iv) are immediate.✷
Proposition 3.2 Let F ⊆ cAMX. The following statements are equivalent:
F is a monoid of coalgebras, i.e. F = MonMX F,
F = cEndMX cInvMX F, and
F = cEndMX Q for some Q ⊆ cRMX.

Proof. (ii) ⇒ (iii) is trivial. (iii) ⇒ (i) is an easy consequence of the Lemma
(i). As for (i) ⇒ (ii), note that F∗ is a transformation monoid, so F∗ = cEndT (X) cInvT (X)(F∗) (Proposition 2.1). According to Lemma 3.1 (iii) and (iv), we have F = cEndMX cInvMX F , as required.	✷

The description of Galois closed sets of co-relations requires several tech- nical prerequisits. Let λ := |T (X)|. For arbitrary bijection ϕ : T (X) → λ,

define a λ-ary co-relation δϕ
by δϕ
:= {α · ϕ | α ∈ cAMX}, and let

c∆MX := {δϕ
| ϕ is a bijection from T (X) to λ}.

Lemma 3.3	(i) cEndT (X) c∆MX = TMX.
c∆MX ⊆ cInvT (X) TM.
Proof. It is clear that (ii) follows immediately from (i). So let us show (i).
⊆: Take any f ∈ cEndT (X) c∆MX and let δϕ	∈ c∆MX be arbitrary.
Then f preserves δϕ	. Since ϕ = ηX · ϕ ∈ δϕ	, we have that ϕ ◦ f ∈ δϕ	.
So, ϕ ◦ f = α · ϕ = ϕ ◦ α∗ for some α ∈ cAMX. But then f = α∗ ∈ TMX
(since ϕ is bijective, and (cAMX)∗ = TMX).
⊇: Take any α∗ ∈ TMX and any δϕ	∈ c∆MX.  Let β · ϕ ∈ δϕ	be
arbitrary. Then α · (β · ϕ) = (α · β) · ϕ ∈ δϕ	.	✷
Proposition 3.4 Let Q ⊆ cRMX. The following are equivalent:
Q is a complete clone of co-relations containing c∆MX,
Q = cInvMX cEndMX Q, and
Q = cInvMX F for some F ⊆ cAMX.
Proof. (ii) ⇒ (iii) is trivial.
⇒ (i): Let Q = cInvMX F for some F ⊆ cAMX. According to Lemma 3.1 (iii), Q = cInvT (X)(F∗). From F∗ ⊆ TMX it follows that Q = cInvT (X)(F∗) ⊇ cInvT (X) TMX ⊇ c∆MX. Therefore, Q contains c∆MX.
Let us now show that Q is a complete clone of co-relations. In view of Proposition 2.1, it suffices to show that Q = cInvT (X) cEndT (X) Q. As we have already  seen,  Q  =  cInvT (X)(F∗).   So,  Q  =  cInvT (X)(F∗)  = cInvT (X) cEndT (X) cInvT (X)(F∗) = cInvT (X) cEndT (X) Q. Here, we used the fact that ⟨cInv, cEnd⟩ is a Galois connection, whence cInv cEnd cInv = cInv.
(i) ⇒ (ii): Since Q is a complete clone of co-relations, according to Propo- sition 2.1, we conclude that Q = cInvT (X) cEndT (X) Q. Let G := cEndT (X) Q. Since Q ⊇ c∆MX, we have cEndT (X) Q ⊆ cEndT (X) c∆MX = TMX (Lemma 3.3). Now, let F := {f ◦ηX | f ∈ G}. From G ⊆ TMX it follows that G = F∗. So, Q = cInvT (X)(F∗), whence Q = cInvMX F (Lemma 3.1). On the other hand F∗ = G = cEndT (X) Q, whence F = cEndMX Q (the same lemma). Therefore, Q = cInvMX cEndMX Q.	✷

Thus, Galois closed sets of coalgebras and co-relations are, respectively, the monoids of coalgebras and certain complete clones of co-relations. We



Q	ηq)
T (Q)
Q	γ )
T (Q)
Q	δ )
T (Q)



πλ	T (πλ)	πλ
T (πλ)	πλ
T (πλ)

ν v	v ν

X	ηX) T (X)
ν v	v ν

X	α) T (X)
ν v	v ν

β) T (X).

(b)	(c)


Q	γ )
T (Q)
T (δ)) T 2(Q)
µq)
T (Q)



πλ	T (πλ)
T 2(πλ)
T (πλ)

ν v	v
X	α) T (X)
ν	v

T (β)) T 2(X)
(d)
ν	v ν

µX) T (X)

Fig. 1. The four diagrams from the proof of Proposition 3.5
see here a nice parallel with invariants in the sense of [4]. It is a well known fact that the set of subuniverses of a coalgebra for a sufficiently nice functor is closed with respect to arbitrary unions and intersections. The same holds for co-relations: the set of all invariant co-relations of a monadic coalgebra is a complete clone of co-relations, and hence, closed with respect to arbitrary unions and intersections of co-relations of the same arity. As an immediate consequence of this observation we have that, given α ∈ cAMX, for every
Q ∈ cR(λ)	there exists the least λ-ary invariant of α containing Q, and the
greatest λ-ary invariant of α contained in Q. If we denote the former by ⟨Q⟩α and the latter by [Q]α, then ⟨Q⟩α = {β · r | β ∈ MonMX{α}, r ∈ Q} and [Q]α = {r ∈ Q | ⟨r⟩α ⊆ Q}.
Note also that the closure operator ⟨·⟩α resembles the operator ΓF (·) which plays the analogous role in [8] (see Definition 2.1 and Proposition 3.8 in case n = 1).

Co-relations and λ-simulations.
¿From the clone-theoretic point of view, certain property is considered to be invariant if the set of all the objects having that property is composition closed and contains the trivial objects. The reason for this is simple. Com- position closed sets of objects can be described by means of relations – the standardised invariants. Thus, the property under consideration can also be represented by the standardised invariants, and, therefore, is an invariant it- self. In view of that, we shall now show that arbitrary λ-simulations can also be considered as invariants of monadic coalgebras.
Proposition 3.5 Let λ > 0 be an ordinal and Q ⊆ Xλ a relation on X. The set of all coalgebras α ∈ cAMX with the property that Q is a λ-simulation of
⟨X, α⟩ forms a monoid of coalgebras.

Proof. Let F = {α ∈ cAMX | Q is a λ-simulation of ⟨X, α⟩}. Since η : id → T is natural, the diagram (a) in Fig. 1 commutes i.e., ηX ∈ F . Now, let α, β ∈ F . There exist γ, δ : Q → T (Q) such that diagrams (b) and (c) in Fig. 1 commute. Then diagram (d) in Fig. 1 commutes whence α · β ∈ F , µę ◦ T (δ) ◦ γ being the corresponding coalgebra structure Q → T (Q).	✷

Corollary 3.6 Let λ > 0 be an ordinal and Q ⊆ Xλ a relation on X. There exists a set of co-relations Qę ⊆ cRMX such that Q is a λ-simulation of ⟨X, α⟩ if and only if Qę ⊆ cInvMX{α}.

Proof. Let F := {α ∈ cAMX | Q is a λ-simulation of ⟨X, α⟩}. Then F is a monoid of coalgebras, whence F = cEndMX cInvMX F . Now, put Qę := cInvMX F .	✷

The corollary says that, at least in principle, one can describe λ-simulations by co-relations. Thus, when speaking of properties of coalgebras, co-relations suffice and there is no need to consider λ-simulations. However, λ-simulations are much easier to work with, and we shall use them whenever appropriate. As an illustration, we now present a constructive description of 1-simulations (that is, invariants in the sense of [4]) by co-relations.




For S ⊆ X we define a binary co-relation ΘS as follows: r ∈ ΘS if and only if r is a mapping T (X) → {0, 1} which makes the adjacent dia- gram commute. Here, c0 is the constant map- ping c0(x) = 0, and iS : S → X is the inclusion mapping.
T (S)
c0
v
{0}
F (iS)) T (X)

r
v
i{0)} {0, 1}


(∗)


Proposition 3.7 Let ⟨X, α⟩ be a coalgebra and S ⊆ X. S is a subuniverse of ⟨X, α⟩ if and only if ΘS ∈ cInvMX{α}.

Proof. ⇒: Suppose S is a subuniverse of ⟨X, α⟩. There exists a mapping α' : S → T (S) such that ⟨S, α'⟩ is a subcoalgebra of ⟨X, α⟩. By applying T to the corresponding diagram we obtain


T (S)
F (α')
v
F (iS)) T (X)

F (α)
v


(1)

T 2(S) F 2(i)S ) T 2(X)



The naturality of µ yields

T 2(S) F 2(i)S ) T 2(X)



µS
v
T (S)
µX
v
F (iS)) T (X)
(2)

Take any r ∈ ΘS. Then r makes the diagram (∗) commute. By pasting (1),
(2) and (∗) we obtain

T (S)
F (iS)) T (X)



c0 ◦ µS ◦ F (α')
v
r ◦ µX ◦ F (α)
v

{0}
i{0)} {0, 1}

Since c0 ◦ µS ◦ T (α') = c0 and r ◦ µX ◦ T (α) = α · r, we have that α · r ∈ ΘS. This proves that α preserves ΘS.
⇐: Now suppose that ΘS ∈ cInvMX{α}. We have to find β : S → T (S) such that α◦iS = T (iS) ◦β. To do so, it suffices to show that α[S] ⊆ jS[T (S)], where jS := T (iS). (Note that if this inclusion holds, then β : S → T (S) : s '→ j−1(α(s)) will do.)
Suppose to the contrary that there exists an s ∈ S such that α(s) ∈/ jS[T (S)]. Define r : T (X) → {0, 1} by

r(x) =	1,	x = α(s),
0,	otherwise.
Obviously, r ∈ ΘS. Let us show that α · r ∈/ ΘS. Since η : id → T is natural and since ⟨T, µ, η⟩ is a monad, we have


S	iS)	X
η	η
α) T (X)
η



❅ idT (X)

S
v
T (S)
X
v
F (iS)) T (X)
T (X)
v
F (α)) T 2(X)
❅❅❘
µX) T (X)

i.e. µX ◦ T (α) ◦ T (iS) ◦ ηS = α ◦ iS. Now ((α · r) ◦ T (iS) ◦ ηS)(s) = (r ◦ µX ◦
T (α) ◦ T (iS) ◦ ηS)(s) = (r ◦ α ◦ iS)(s) = r(α(s)) = 1.

On the other hand, for all r ∈ ΘS and all s ∈ S we have (r ◦ T (iS) ◦ ηS)(s) = 0. Indeed, since r ∈ ΘS and ηS : S → T (S), the adjacent diagram commutes, whence (r ◦T (iS) ◦ηS)(s) = (i{0}◦c0◦ηS)(s) = 0. Therefore, α·r ∈/ ΘS, which
contradicts the assumption ΘS ∈ cInvMX{α}.
S	ηS) T (S)
c0
v
{0}
F (iS)) T (X)

r
v
i{0)} {0, 1}


This concludes the proof of α[S] ⊆ jS[T (S)].	✷

Example 3.8 Let us take a look at an example concerning Turing machines. Let Σ be an alphabet and let Tapes(Σ) be the set of all mapings t : Z →
{ } +Σ with the property that the set {m ∈ Z | t(m) /= } is finite. Further, let X := Z × Tapes(Σ) be the set of configurations, where ⟨k, t⟩ represents the tape t with the head scanning the k-th cell. Then a Turing machine can be modelled by a coalgebra α : X → T (X), where T (X) = X+ + Xω (recall that X+ is the set of all nonempty finite sequences of elements of X). So, α(x) is the sequence of configurations representing the behavour of the machine on input x. This sequence is either finite or infinite, depending on whether the machine stops on the input or not.
Let us now describe the monad for T where α · β will mean “start β on the outcome of α”. Let ηX(x) = ⟨x⟩, a 1-element sequence. As for µ, let us first note that it operates on sequences of sequences which we shall depict as column vectors. For finite sequences of (finite or infinite) sequences we set


 ⟨


, a12,.. .⟩ 
, a22,.. .⟩
= ⟨a



,a  ,...,a 



,a  ,.. .⟩,

X	.
 ⟨
⟩ 
11	21
n1	n2


while for infinite sequences we just collect the first coordinates:


 ⟨


, a12,.. .⟩ 
, a22,.. .⟩
.	

µX	.

= ⟨a11, a21,..., an1,.. .⟩.


, a  ,.. .⟩
	.

Then ⟨T, µ, η⟩ is a monad. For T -coalgebras α and β, α·β(x) has the following meaning: if α(x) terminates with the outcome y, apply β on y; if not, β is never applied (since α goes on for ever).
Let σ be the set of all co-vectors r : T (X) → {0, 1} with the property that r[X+] = {0}. Then it is not hard to see that σ is an invariant of a T -coalgebra α if and only if α terminates on all inputs.

Characterising coalgebras by invariant co-relations

Invariants are often used to show that two systems are not equal or not iso- morphic. In this section we are going to show that the concept of co-relation as a tool for encoding properties of monadic coalgebras is finer than that of a λ-simulation. Namely, it may happen that two coalgebras cannot be distin- guished by means of λ-simulations, but can easily be distinguished by means of invariant co-relations.
We start with two examples. In the first example, we present a pair of isomorphic coalgebras which have the same λ-simulations and distinct invari- ant co-relations. The second example shows that the same can happen with coalgebras that are not even bisimilar. After the examples, we investigate to what extent the knowledge of invariants of a monadic coalgebra determines the coalgebra. In some cases invariant co-relations uniquely determine the coalgebra, but this does not hold in general.


Example 4.1 Let X = {a, b, c, d, e, f} and consider the monad ⟨T, µ, η⟩ given by: T (X) = X + X (which we understand as {0, 1}× X), ηX(x) = ⟨0, x⟩ and


µ  (⟨p, ⟨q, x⟩⟩) =	⟨0, x⟩,	⟨p, q⟩∈ {⟨0, 0⟩, ⟨1, 1⟩}
⟨1, x⟩,	⟨p, q⟩∈ {⟨0, 1⟩, ⟨1, 0⟩}.


Consider coalgebras ⟨X, α⟩ and ⟨X, β⟩ given by




α :=	a  b	c	d	e	f
0b 0c 0a 1e 1f 1d

and	β :=	a  b	c	d	e  f
0b 0c 0a 1f 1d 1e
 ,



where 0a abbreviates ⟨0, a⟩, etc. The mapping ϕ =  a b c d e f  is an

isomorphism between the two coalgebras.
It is easy to check that for every ordinal λ > 0 and every Q ⊆ Xλ, Q is a λ-simulation of ⟨X, α⟩ if and only if Q is a λ-simulation of ⟨X, β⟩. Therefore, these two coalgebras cannot be distinguished by means of λ-simulations.
Now, consider the 6-ary co-relation Q := {r1, r2, r3} where




r :=  0a 0b 0c 0d 0e 0f r :=  0a 0b 0c 0d 0e 0f r :=  0a 0b 0c 0d 0e 0f
 ,
 , and
 .


An easy computation shows that α· r1 = r2, α· r2 = r3 and α· r3 = r1, whence
Q ∈ cInvMX{α}. However Q ∈/ cInvMX{β} since


β · r1
:=	0a 0b 0c 0d 0e 0f 1a 1b 1c 1d 1e 1f	∈/ Q
1  2  0  5  3	4	1  2  0  5  3	4

Example 4.2 Let X = {a, b} and consider the monad ⟨T, µ, η⟩ from Example
4.1. Let α and β be the following coalgebras:


α := ηX

a  b
 0a 0b 
and	β :=  a  b  .


Since ∅ is the only bisimulation between ⟨X, α⟩ and ⟨X, β⟩, the two coalgebras are “coalgebraically unrelated”. However, it is easy to see that Q ⊆ Xλ is a λ-simulation of ⟨X, α⟩ if and only if it is a λ-simulation of ⟨X, β⟩.
Now consider the binary co-relation σ := {r} where r is the following co-vector:




It is easy to see that
r :=	0a 0b 1a 1b	.
0  0  1  1


β · r =	0a 0b 1a 1b	∈/ σ,
1  1  0  0


whence σ ∈/ cInvMX{β}. On the other hand, ηX preserves any co-relation, so
σ ∈ cInvMX{α}.

We say that α ∈ cAMX is singular if α /= ηX and αk = α for some integer k > 1. Otherwise, α is called regular. For a singular α ∈ cAMX, the least integer k > 1 for which αk = α will be called the singularity index of α. If s is


the singularity index of a singular coalgebra α, then s − 1 is called the period
of α and will be denoted by ω(α).
Let f ∈ TУ be a mapping. A nonempty subset C ⊆ Y is called a cycle of f of length l if C = {y0,..., yL−1} where yi /= yj for i /= j, and f (yi) = yi+1 (addition modulo l). Note that if f is singular and C is a cycle of f , then |C| divides the period of f .
Proposition 4.3 Let α and β be coalgebras such that cInvMX{α}	= cInvMX{β}.
If at least one of α, β is regular, then α = β.
If at least one of α, β is idempotent, then α = β.
Proof. (i) Suppose that α is a regular coalgebra. From cInvMX{α} = cInvMX{β} it follows that cEndMX cInvMX{α} = cEndMX cInvMX{β}, and hence, by Proposition 3.2, MonMX{α} = MonMX{β}. If α = ηX, then MonMX{α} = {ηX} so β = ηX, too. Now, suppose α /= ηX and β /= ηX. Then α = βk and β = αL for some positive integers k and l, whence α = αkL. Since α is regular, kl = 1. Therefore, k = 1 and α = β.
(ii) Suppose α is idempotent, and α /= ηX and β /= ηX. As in (i), MonMX{α} = MonMX{β}. But MonMX{α} = {ηX, α} and thus β = α.  ✷
The situation concerning non-idempotent singular coalgebras is not so clear. In only a few cases we can show that invariant co-relations determine the coalgebra uniquely. We present one such case.
Lemma 4.4 Let f, g ∈ TУ be singular mappings such that cInvУ {f} = cInvУ {g}.
Let Q ⊆ Xλ for some λ > 0. Then: Q is a λ-simulation of ⟨Y, f⟩ if and only if Q is a λ-simulation of ⟨Y, g⟩.
For ∅ /= C ⊆ X we have: C is a cycle of f if and only if C is a cycle of
g.
ω(f ) = ω(g).
ker f = ker g.
If ω(f ) = 2 or ω(g) = 2, then f = g.
Proof. (i) Let Q ⊆ Xλ be a λ-simulation of ⟨Y, f⟩. According to Corollary 3.6, there exists a set Qę of co-relations such that for every h ∈ TУ we have: Q is a λ-simulation of h if and only if Qę ⊆ cInvУ {h}. Therefore, Qę ⊆ cInvУ {f} = cInvУ {g}, and so Q is a λ-simulation of g.
Follows from (i) and the following simple observation: Let f be a singular mapping. Then C /= ∅ is a cycle of f if and only if C is a subuniverse of ⟨Y, f⟩ and no proper subset of C has this property.
Note that ω(f ) = max{|C| | C is a cycle of f}. The statement now follows from (ii).
Let x /= y. It is easy to see that ⟨x, y⟩ ∈ ker f if and only if Qxy :=
{⟨x, y⟩} ∪{⟨z, z⟩| z ∈ Y } is a bisimulation of ⟨Y, f⟩ and at most one of {x},


{y} is a cycle of f . The statement now follows from (i) and (ii).
The statement follows from (ii) and (iv).	✷

Proposition 4.5 Let α and β be singular coalgebras such that cInvMX{α} = cInvMX{β} and α = α3 or β = β3. Then α = β.
Proof. Suppose α = α3. Then α∗ = (α∗)3. From Lemma 3.1 (iii) it follows that cInvF (X){α∗} = cInvF (X){β∗}. So, α∗ = β∗ by Lemma 4.4 (v), whence α = β.	✷

Example 4.6 We can easily provide an example of two distinct coalgebras having the same invariant co-relations. Let X = {a, b, c}, let f : X → X be the mapping a '→ b '→ c '→ a and g = f−1. Then id-coalgebras ⟨X, f⟩ and
⟨X, g⟩ have the same invariant co-relations.


Emulating coalgebras by idempotent coalgebras
We have seen in Section 4 that invariant co-relations need not characterise the coalgebra uniquely, and that they fail to do so in some rather irregular cases. We would, therefore, like to single out certain well-behaved representatives and show that every coalgebra can be somehow reduced to one of them. In our case, the well-behaved representatives are idempotent coalgebras.
In this section we first introduce the notion of emulation, and then show that for every monadic coalgebra there exists an idempotent coalgebra for the same monad which emulates the former one. Intuitively, to a coalgebra α : X → T (X) we shall associate a coalgebra α : Y → T (Y ) in such a way that α(some suitable representation of x) = some suitable representation of
⟨x, α(x)⟩. For example, if α were a model of a Turing machine, say M , then α would correspond to a Turing machine with two tapes which first copies the input data from tape 0 to tape 1, and then proceeds as machine M would have, operating on tape 1 only.
Coalgebras of the form ⟨Y, α⟩ can be thought of as models of computations that follow a simple discipline of not destroying the input data. It is intuitively acceptable that, at a fairly low cost, every computation can be emulated by such a computation. Coalgebras corresponding to such computations are obvi- ously idempotent and, therefore, have the pleasant property of being uniquely determined by their invariant co-relations.
Formally, we shall show that the mapping ⟨X, α⟩ → ⟨Y, α⟩ is functorial, and, more over, that this is an embedding of the category SetM into its full subcategory spanned by idempotent coalgebras.

Definition 5.1 Let X and Y be arbitrary sets.



We say that a coalgebra ⟨Y, β⟩ emulates a coalgebra
⟨X, α⟩ if there exist two mappings, an encoding mapping e : X → Y and a decoding mapping d : T (Y ) → T (X), such that d ◦ T (e) = idF (X) and α = d ◦ β ◦ e. We also say
β)
✻
e
T (Y )
d
v

that ⟨Y, β⟩ is an ⟨e, d⟩-emulation of ⟨X, α⟩.
X	α) T (X).


For a set X, let X⊗F := X × T (X), let ∂X : X → X⊗F : x '→ ⟨x, ηX(x)⟩
and define pX : T (X⊗F ) → T (X) by pX = µX ◦ T (π2).
Finally, for a coalgebra α : X → T (X) let α : X⊗F → T (X⊗F ) be the coal- gebra defined by α := ηX⊗T ◦⟨π1, α◦π1⟩. Note that α(⟨x, t⟩) = ηX⊗T (⟨x, α(x)⟩), that is, the first component always contains the input data, while the second component contains the outcome of the computation.
Proposition 5.2 For every coalgebra ⟨X, α⟩, α is a ⟨∂X, pX⟩-emulaton of α. Moreover, α is idempotent.
Proof. Let us first show that ⟨∂X, pX⟩ is indeed a pair of encoding-decoding mappings, i.e. that pX ◦ T (∂X) = idF (X): pX ◦ T (∂X) = µX ◦ T (π2) ◦ T (∂X) = µX ◦ T (π2 ◦ ∂X) = µX ◦ T (ηX) = idF (X).

Next, let us show that α is a ⟨∂X, pX⟩-emulaton of α: pX ◦ α ◦ ∂X(x) = pX ◦ α(⟨x, ηX(x)⟩) = pX ◦ ηX⊗T (⟨x, α(x)⟩) = µX⊗T ◦ T (π2) ◦ ηX⊗T (⟨x, α(x)⟩) = π2(⟨x, α(x)⟩) = α(x).
Finally, let us show that α· α = α: α· α(⟨x, t⟩) = µX⊗T ◦ T (α) ◦ α(⟨x, t⟩) = 
µX⊗T ◦ T (α) ◦ ηX⊗T (⟨x, α(x)⟩) = α(⟨x, α(x)⟩) = ηX⊗T (⟨x, α(x)⟩) = α(⟨x, t⟩).✷
Proposition 5.3 Functor G : SetM → Setidp given by G(⟨X, α⟩) = ⟨X⊗F , α⟩
and G(f ) = f ×T (f ) is an embedding of SetM into Setidp (i.e. G is one-to-one
and faithful).
Proof. Let us show that for every homomorphism f : ⟨X, α⟩→ ⟨Y, β⟩, G(f ) is a homomorphism between ⟨X⊗F , α⟩ and ⟨Y ⊗F , β⟩, i.e. that β ◦ G(f ) = T (G(f )) ◦ α. Take any ⟨x, t⟩∈ X⊗F . Then
β ◦ (f × T (f ))(⟨x, t⟩) = ηУ ⊗T ◦ ⟨π1,β ◦ π1⟩(⟨f (x),T (f )(t)⟩)
= ηУ ⊗T (⟨f (x),β ◦ f (x)⟩)
= ηУ ⊗T (⟨f (x),T (f ) ◦ α(x)⟩) (since f is a homomorphism)
= ηУ ⊗T ◦ (f × T (f ))(⟨x, α(x)⟩)
= T (f × T (f )) ◦ ηX⊗T (⟨x, α(x)⟩) (since η is natural)
= T (f × T (f )) ◦ ηX⊗T ◦ ⟨π1,α ◦ π1⟩(⟨x, t⟩)
= T (f × T (f )) ◦ α(⟨x, t⟩).

Now, it is easy to see that G is indeed a functor, that it is one-to-one and faithful. It is well-defined since coalgebras of the form α are idempotent. This


concludes the proof that G is an embedding of SetM into Setidp.	✷

References
Cs´ak´any, B.: Completness in coalgebras, Acta Sci. Math. 48(1985), 75–84
Drbohlav, K.: On quasicovarieties, Acta Fac. Rerum Natur. Univ. Comenian.
Math. Mimoriadne Cˇislo (1971), 17–20
Jacobs, B.: Mongruences and cofree coalgebras, in “Algebraic Methods and Software Technology”, Alagar, V. S. and Nivat. M., eds, Lect. Notes Comp.
Sci. 936, Springer, Berlin 1995, 245–260
Jacobs, B.: Invariants, bisimulations and the correctness of coalgebraic refinements, Tech. Rep. CSI-R9704, Comput. Sci. Inst., Univ. of Nijmegen, 1997
Moggi, E.: A category-theoretic account of program modules, Proc. Conf. Category Theory and Computer Science, Manchester, UK, Sept. 1989, Vol. 389 of Lecture Notes in Computer Science, Springer Verlag, 1989
Moggi, E.: Computational lambda-calculus and monads, IEEE Symposium on Logic in Computer Science, Asilomar, California, June 1989
Po¨schel, R., Kaluˇznin, L. A.: Funktionen- und Relationenalgebren, Ein Kapitel der Diskreten Mathematik, Deutscher Verlag der Wissenschaften, Berlin 1979
Po¨schel, R., R¨oßiger, M.: A general Galois theory for cofunctions and corelations, Algebra Universalis 43 (2000), 331–345
Rutten, J. J. M. M.: Universal coalgebra: A theory of systems, Theoretical Computer Science, 249(1), 3–80 (October 2000)
Wadler, P.: Comprehending Monads, Mathematical Structures in Computer Science, Vol. 2, pp. 461–493, Cambridge University Press, 1992
Wadler, P.: The essence of functional programming, Proc. XIX ACM Symposium on Principles of Programming Languages, Santa Fe, New Mexico, 1992 (invited talk)
