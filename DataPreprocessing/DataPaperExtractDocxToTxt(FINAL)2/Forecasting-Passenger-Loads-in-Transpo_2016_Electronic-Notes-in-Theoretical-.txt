Available online at www.sciencedirect.com


Electronic Notes in Theoretical Computer Science 327 (2016) 49–69
www.elsevier.com/locate/entcs

Forecasting Passenger Loads in Transportation Networks
Stefan Haar and Simon Theissing
MExICo team, INRIA and LSV, CNRS & ENS de Cachan Cachan, France

Abstract
This work is part of an ongoing effort to understand the dynamics of passenger loads in modern, multimodal transportation networks (TNs) and to mitigate the impact of perturbations. The challenge is that the percentage of passengers at any given point of the TN that have a certain destination, i.e. their distribution over different trip profiles, is unknown. We introduce a stochastic hybrid automaton model for multimodal TNs that allows to compute how such probabilistic load vectors are propagated through the TN, and develop a computation strategy for forecasting the network’s load a certain time into the future.
Keywords: Stochastic hybrid automata, Transportation networks, Fokker-Planck Equation

Introduction
We continue here the work begun in [6] for capturing both the discrete vehicle movements and continuous passenger transfers in a multimodal public transporta- tion network (TN). In [6], a deterministic hybrid automaton (DHA) model was used, so as to overcome via fluidification the state space explosion that makes fully discrete models intractable. For the specification, we used both discrete and con- tinuous Petri nets (PNs) as basic modelling blocks [4], where the marking of the continuous places and the flows between them were vectorial instead of scalar. In fact, we integrated the numbers of passengers belonging to different trip profiles,
i.e. having different destinations, as components of vector markings and -flows, with routing matrices relating them.
Now - and this is the starting point of the present work - a real TN is everything but deterministic. On the one hand, there are highly unpredictable asynchronous events for which statistical data is hard to obtain. It is thus difficult to include them in the daily network operation [11], e.g. by means of minute-by-minute or hourly forecasts. Typical examples are passenger incidents. Now, note that - apart from few exceptions - such incidents originate locally, in one mode or line, and

http://dx.doi.org/10.1016/j.entcs.2016.09.023
1571-0661/© 2016 The Author(s). Published by Elsevier B.V.
This is an open access article under the CC BY-NC-ND license (http://creativecommons.org/licenses/by-nc-nd/4.0/).

then propagate to other modes or lines by passenger transfers. These transfers are predictable, not necesseraly deterministic, if one knows the destination or trip profile of the passengers; but in general, this can only be known through probabilistic estimates. Finally, there are the “continuous” passenger arrival processes for which statistical data is easier to obtain: How many passenger will arrive at a station at what time? According to which route, including which vehicle missions, will they travel?
Here, we will extend the DHA model from [6] in that we will replace all deter- ministic passenger arrival processes by their stochastic counterparts, and, in doing so, introduce a stochastic hybrid automaton (SHA) model with jumps between its discrete modes, at a priori equidistantly-spaced discrete points in time, defined a priori. The literature reveals many predecessors of our SHA model, notably in the past two decades, with every approach introducing the uncertainty at a different point in the model dynamics. For instance, the authors of [12] extended the dy- namics underlying a PN-DHA model in that the jumps between the discrete modes are either exponentially distributed or immediate; with a weighting function as a means to resolve conflicts among simultaneously enabled immediate transitions [1]. However, in this modelling approach the discrete jumps are decoupled from the continuous states, and the latter evolve according (acc.) to deterministic differen- tial balance equations; the authors of [7] bridge the gap between the continuous states and the mode jumps by means of a guard function. Finally, the deterministic balance equations were replaced by normally distributed balance equations in [13]. Outside the framework of PNs, the authors of [8] introduced an SHA model that exhibits state-driven (forced) jumps between the discrete modes subjected to sets of stochastic differential equations (SDEs), one such set per mode. This approach was extended in [3] in that the mode transitions are no longer limited to forced jumps, but can be initiated by spontaneous jumps with state-dependent transition rates as well. The author of [2], then showed how the SHA model from [3] can be formulated in an equivalent system of integro-differential equations together with boundary conditions. Also notice that the authors of [10] presented a grid-based asymptotic approximation method for a backward reachability problem subjected to the dynamics of an SHA model that encounters spontaneous jumps between its discrete modes; with a system of SDEs assigned to every mode. That system is ap- proximated by a Markov chain following a space and subsequent time discretization; whereas in our approach the discretization of the time precedes the discretization of the space, and the latter comes along with a numerical integration of the continuous states in a discrete mode.
In the rest of this paper, we will discuss the specification of TN’s infrastructure
in our vectorial SHA model, and the vehicle operation as well as the routing of

all passenger flows thereon (Sec. 2 on p.
51) . We will then elaborate the SHA

model’s time-continuous dynamics, before pinpointing all mode transition times to an equidistantly-spaced mesh, which can be regarded as a first major step to render forecasts of the model’s hybrid state feasible (Sec. 3 on p. 56). Next, we will integrate the SHA model’s discrete-time approximation into a computation strategy which

can be used to forecast TN’s passenger loads (Sec. 4 on p.
64). Finally, we will

provide a short summary and an outlook on future work (Sec. 5 on p. 68).


Capturing the Transportation Network at Hand
TN’s Infrastructure
We capture TN’s infrastructure in our automaton model by a finite set of trans- portation grids that accommodate TN’s different lines and transportation modes (Sec. 2.1.1), another finite set S of stations (Sec. 2.1.2 on p. 52), and an interface that defines all passenger transfer possibilities between the vehicles operated in the transportation grids and the stations (Sec. 2.1.3 on p. 53).

A Transportation Grid
Every transportation grid accommodates the lines of a particular transportation mode such as the rail grid of a metro system: It is made up of a finite set of discrete waypoints that are connected by tracks. In particular, a track that connects the waypoint w1 to another waypoint w2 indicates the possibility of a vehicle movement from w1 to w2; no more (such as a length, a curvature, or a slope) and no less. Thus, every pair of a waypoint is connected by at maximum two tracks, namely one track in each direction. Since by convention every waypoint moreover is either empty or occupied by at maximum one vehicle at a time, then also note that conflicting vehicle movements can occur iff two or more vehicles try to access the same waypoint at the same time.
We specify a particular transportation grid, say g, in form of a Petri net model (with the ’token flow’ left out), in which all waypoints (= places) in g are represented as simple circles and all tracks (= transitions) as simple boxes. One edge then connects w1 to the track t and another edge t to w2 iff t shall implement the possibility of a vehicle movement from w1 to w2. Moreover, we enumerate every track in order to specify the resolution of all possible conflicting vehicle movements in a deterministic manner.
As an example, consider Fig. 1.
It schematically depicts the transportation grid for the orbital line of a people mover: A vehicle at w1 can go to w2 via t1,2, from w2 to w3 via t2,3, and from w3 back to w1 via t3,1, respectively. Alternatively, a vehicle at w1 can take t1,3, and thus directly move from w1 to w3 without the necessity to pass by w2. Then note that a conflict between two vehicle movements might occur iff one vehicle, say a1, wants to access w3 from w2 via t2,3, and at the same time another vehicle, say a2, wants to access w3 from w1 via t1,3. Assuming this to be true, we privilege a2 over a1 due to the fact that a vehicle movement taking t1,3 has a higher priority (lower integer number inscribed to t1,3) than another vehicle movement taking t2,3.



Wayp. w1	Track t1,2	Wayp. w2
Track t2,3	Wayp. w3


Track t3,1
Fig. 1. Orbital transportation grid composed of three waypoints (simple circles) and four tracks (simple boxes): conflicting vehicle movements that might run together at w1 are resolved in a deterministic manner by means of the unique integer numbers inscribed to t2,3 and t1,3 if necessary
A Station
Every station s ∈ S is made up of a finite set of capacity-limited gathering points (GPs) that accommodate the transferring and waiting passengers, and another fi- nite set of elements, called corridors 1 , with each corridor in s implementing the possibility of a passenger movement away from/to a GP in s w.r.t. another GP or the outdoor area of s. Once again, we use a Petri net model (with the ’token flow’ left out) to capture the connection between all GPs and all corridors in s. In particular, every GP (= place) in s is represented as a double circle, and every corridor (= transition) is represented as a double box; so as to distinguish it from a transportation grid.
As an example, look at the simple station from Fig. 2.



Step down stairs
Cross turnstiles

Entrance area [50]


Platform [200]

Board vehicle


Fig. 2. Sample station with two capacity-limited gathering points (double circles) and three corridors (double boxes): the entrance area can hold up to 50 passengers and the platform up to 200 passengers

The station has two GPs and three corridors: Among the two GPs there is one entrance area that can accommodate up to 50 passengers (written in brackets next to it), and one platform that can accommodate up to 200 passengers. Moreover we can say that a passenger at the entrance area can transfer to the platform since a corridor connects both in the right direction. The unambiguous interpretation of the remaining two corridors depends on the context of the station, though; i.e., on the interface specification between this station and all transportation grids of TN; see below. Nevertheless, from the labels written next to all corridors we can anticipate

1 We can associate with a corridor a limited throughput for a directed flow of passengers that is conserved between two discrete points; and this metaphor perfectly fits into our gas dynamic approach for all passenger flows

that the entrance area accommodates all passengers who enter TN through this station, and that all passengers who leave the platform do so in order to board a vehicle.

Connecting the Transportation Grids and the Stations
The interface between the transportation grids and the stations defines which cor- ridor in a station is connected to which waypoint in a transportation grid. In doing so, it defines all passenger transfer possibilities between the GPs of the stations and the vehicles that are stopped at particular waypoints in the transportation grids in TN.
As an example, look at Fig. 3.

Fig. 3. Every dashed edge specifies the possibility of a passenger transfer from a GP in a station to a vehicle stopped at a waypoint in a transportation grid (through a corridor), or vice versa

It depicts the interface between a simple station, say s, and an extract of a trans- portation grid: If a vehicle a is stopped at the waypoint wi, then all passengers on-board a can alight from it to the single platform p in s through ca. Similarly, the passengers can board a from p through cb.
In general, the interface between all stations and transportation grids is specified in form of a set of edges that connects the corresponding graphs, in which every edge either connects a corridor c in a station to a waypoint w in a transportation grid indicating the possibility of a passenger transfer from the single parent GP of c to a vehicle that is stopped at w, or vice versa.
We refer to this combined graph (of all stations, transportation grids, and the interface between both) as the infrastructure of TN, and demand that the passengers can access a vehicle a that is stopped at a particular waypoint only from one GP of a particular station, say s, if at all. Accordingly, all passengers on-board a can alight from it to one (not necessarily the same) GP of s if at all.

TN’s Vehicle Operation
At any time every vehicle (out of a finite set of vehicles) is either in the driving condition parked, stopped, or driving. Now every vehicle in operation, i.e., stopped or driving, executes a mission (Sec. 2.2.3 on p. 54) in a run (Sec. 2.2.2 on p. 54) acc. to a dispatch plan (Sec. 2.2.1).

The Dispatch Plan
The central element of the vehicle operation in our SHA model is a dispatch plan that defines at what time which vehicle is supposed to process which run in form of an ordered list. It can cover part of a day, a complete day, or even more. Moreover, note that in practice different dispatch plans might have been specified for different operational modes (nominal operation, perturbed mode of operation, etc.). How- ever, in our model there is only one dispatch plan, which requires us to merge two or more real-world dispatch plans if necessary; or to compute for every different dispatch plan a separate forecast.
A Vehicle Run
Every vehicle run specifies a sequence of vehicle missions that have to be executed in the given order by a vehicle that processes the run; which should result in a coherent driving cycle of fixed-route dead headings and transportation services.
A Vehicle Mission
The fixed route that underlies every vehicle mission is specified as a path in a transportation grid. An indication of stops at the waypoints along that path, min- imum and maximum dwell times for these stops, and deterministic driving times in between the waypoints then complement the specification of a particular vehicle mission.
As an example, look at Fig. 4.


Track
t1,2 [52]
Track
t2,3 [72]
Track
t3,1 [41]



Wayp.
w1 [10, ∞]
Wayp.
w2
Wayp.
w3 [10, 60]
Wayp.
w1 [10, 0]


Fig. 4. Vehicle mission for the orbital transportation grid from Fig. 1 on p. 52: the single number written in brackets next to every track defines a constant driving time, and the pair of two comma-separated numbers and written in brackets next to every waypoint define minimum and maximum dwell times at that waypoint in the respective order

It depicts the graphical specification of a sample vehicle mission, say xj, for the orbital transportation grid from Fig. 1 on p. 52: A vehicle a that executes xj is supposed to pass trhough the orbital grid starting from and ending at w1. Moreover, note that a is supposed to stop at w1 and w3 since a separate pair of a minimum and a maximum dwell time is assigned to both (comma-separated values written in brackets next to w1 and w3). In particular, a cannot depart from w3 before its dwell time at w3 has exceeded 10 seconds. Assuming that passengers can board a/alight from a at w3, then a departs from w3 before its dwell time at w3 has exceeded the maximum dwell time of 60 seconds iff no more passengers want to board/alight from it. On the contrary, a departs from w3 after the maximum dwell time of 60 seconds has elapsed iff some passengers still want to alight from it or its next waypoint is blocked by another vehicle. In this way, the minimum dwell times impose hard constraints on the vehicle operation, whereas the maximum dwell times have to be

respected iff possible.
The Routing of All Passenger Flows in TN
Look at Fig. 5 which depicts an extract of a sample infrastructure for TN together with the specification of three different trip profiles 1, 2, and 3: All passengers who travel acc. to the first trip profile enter TN through the station S1, and arrive at its platform next. From this platform, they then would like to board a vehicle that executes the mission x1, which passes through and stops at all three waypoints w1, w2, and w3. On-board such a vehicle stopped at w2, these passengers would like to alight from it to a GP in the station S2 (not depicted). In contrast to the first trip profile, all passengers who travel acc. to the second or third trip profile would like to alight from a vehicle that is stopped at w3 to a GP in the station S3 (not depicted). Then note that, in principle, both vehicle missions x1 and x2 provide a transportation service from S1 to S3. However in contrast to x1, a vehicle that executes x2 is supposed to skip w2 and thus provides an express service from S1 to S3. Now the difference between the passengers who travel acc. to the second trip profile from the passengers who travel acc. to the third trip profile is that the latter show a preference for x2; whereas all passengers of the second trip profile are indifferent to both vehicle missions and thus board from the platform of S1 whatever vehicle mission is available.

Fig. 5. Sample infrastructure for TN together with the specification of three different trip profiles 1, 2, and 3; in which all passengers of the third trip profile prefer to board a vehicle that executes the mission x2 in order to travel from S1 to S3 over a vehicle that executes x1

In general, every passenger travels acc. to a particular trip profile out of a finite set of different trip profiles Y. More specifically, every trip profile y ∈Y specifies a path in TN’s infrastructure together with labels assigned to every corridor that is dedicated to the boarding of a vehicle so as to account for the passengers’ different mission preferences. Then note that with the goal to ease the graphical specification of all trip profiles, we can inscribe the infrastructure graph with the paths and the

stops specified for the different vehicle missions. So in the example above, the fact that x1 is inscribed to the corridor “Alight” tells us that a vehicle that executes x1 stops at w2; which in turn implies that all passengers on-board that vehicle can alight from it in the given direction (or the GP this corridor points to; not depicted). From the graphical specification of all trip profiles, we deduce routing matrices; for every corridor in every station one. Refer to Tab. 1 for an overview of some shorthands pertaining to matrix/vector operations used here and throughout the rest of the paper: Initially, every routing matrix R (·) is a diagonal matrix with zeros and ones only. More precisely, the element R (c) [i, j], with i, j ∈ Y, of the routing matrix R (c) assigned to the corridor c is one iff i = j and the trip profile i ∈Y covers c; in which we assume that all trip profiles are enumerated from 1 to
|Y|, i.e., Y := {1, 2,..., α} for some α ∈ N>0. We next might rewrite the columns of some routing matrices to account for the re-routing of some passenger flows. As a result, these (constant) routing matrices are not diagonal any more, in which their interpretation/specification goes as follows: R (c) [i, j] is the relative amount of passengers who enter c acc. to the trip profile j and who leave it acc. to the trip profile i. We then demand that every column R (c) [·, j], with j ∈ Y, of R (c) either sums up to one or to zero, which will ensure the conservation of all passenger flows in the set up of the balance equations at a later point.
Table 1
An overview of some shorthands pertaining to matrix/vector operations used throughout the paper
Shorthand	Meaning
a[i]	Element in the i-th row of a column vector a AT	Transpose of a matrix A
A[i, j]	Element in the i-th row and the j-th column of a matrix A A[i, ·]	i-th row of a matrix A
A[·, j]	j-th column of a matrix A


Capturing the Probability Flow
Our automaton model belongs to the class of continuous-time hybrid-state automata with deterministic-timed and probabilistic passenger load-driven jumps among a finite set of discrete modes. In general, every mode in such a model refers to a discrete state to which is assigned to a continuous domain with a continuous differential dynamics 2 . An edge-labelled graph - here and in the following referred to as a mode graph (cf. Fig. 6.a below) - captures all jump conditions between the different modes that might have been defined in terms of the continuous states that have to enter particular target sets or time-thresholds that have to elapse.

2 System of differential equations



3

2	2

1	1

0
(a) Mode graph	(b) Vehicle load tree
Fig. 6. Comparison of a mode graph and a vehicle load tree, in which X denotes the complete passenger load space, X1 ⊂ X, X2 ⊂ X, and Δτ > 0 is the time step for the equidistant discretization

Now in our use case, we limit every mode to a discrete state in TN’s vehicle operation that tells us
the driving condition of every vehicle (parked, stopped, or driving),
the position of every vehicle, in which, by convention, the position of a driving vehicle is identical to the waypoint it moves towards, and
the dispatch, the run, and the mission of every stopped and every driving vehicle.
Then note that for every mode we can define a set of balance equations that capture the SHA model’s continuous passenger flow dynamics in this particular mode in that they relate the passenger loads of the GPs and of the stopped vehicles, to all passenger flows joining and leaving them (Sec. 3.1 on p. 57). We can next use these balance equations to numerically integrate estimations for all passenger loads so as to evaluate the probability of occurrence of every passenger load-driven jump to

another mode (Sec. 3.2 on p.
59). However at the latest, we then notice that we

have to confine all mode transition times to finite sets (Sec. 3.3 on p. feasible computation (Sec. 3.4 on p. 63).
60) for any


The Balance Equations for a Particular Mode
Remember that we impose a very crucial constraint on the specification of the interface for the passenger transfers between the GPs in the stations and the vehicles stopped at the waypoints of the transportation grids (cf. Sec. 2.1.3 on p. 53): If a vehicle a is stopped at a waypoint, then a passenger transfer to/from a is possible from/to one and the same station only; which does not imply that the GP that accommodates all passengers who alight from a must be identical to the GP that accommodates all passengers who board a, though. In this context, we say that a vehicle a is docked to a station s ∈S iff (i) a is stopped at a waypoint that can be accessed from a GP in s acc. to the specification of the infrastructure’s interface, and (ii) some passengers want to alight from or board a acc. to the specification of the passenger (re-)routing. For a particular mode of our automaton, we can thus decompose the set of all balance equations for all passenger loads - which define the automaton’s continuous passenger flow dynamics as long as no jump to another

mode occurs - w.r.t. the different stations: For every station s ∈ S we set up a
decoupled Itoˆ process, which groups n := n1 + n2 systems of stochastic differential
balance equations for the |Y|-dimensional passenger load vectors 3 of all n1 ∈ N>0 GPs in s and all n2 ∈ N≥0 vehicles docked to s. For time τ > 0, this Itˆo process can be written down in the form of
dXs(τ )= As (Xs(τ )) dτ + Bs dWs(τ ),	(1)
with the (n |Y|)-dimensional state vector Xs that groups all n1 + n2 passenger load vectors; the (n |Y|)-dimensional drift vector As; the |Y|-dimensional Wiener pro- cess 4 ; and the (n |Y| × |Y|)-dimensional diffusion matrix Bs: We assume that the uncertainty inherent to the continuous passenger flow dynamics comes along with
(i) estimations for all passenger load vectors at τ = 0, and (ii) the passengers who enter TN through its stations (= probabilistic passenger arrival flows). However, all passenger flows that originate within TN such as a flow between two GPs, a flow between a GP and a stopped vehicle, or a passenger flow that leaves TN from one of its stations, are supposed to be specified in a deterministic manner given the respective passenger loads. Thus, Bs[i, ·] /= 0 for some i ∈ Y iff passengers might enter s acc. to i.
With that said, we now look at the exemplary specification of the balance equa- tions for the station s from Fig. 3 on p. 53 in a particular mode of the SHA model, in which we assume that one vehicle, say a, is stopped at the waypoint wi, and some passengers want to alight from/board a to/from the platform p: First of all, note that every corridor c ∈ Cs := {ca, cb, ce, cA} in s must have a maximum throughput φmax (c), with φmax : Cs → R≥0 that limits the number of passengers per second who can pass through it. This maximum throughput thus limits the (scalar) mag- nitude φm (c, τ ), with φm : Cs × R≥0 → R≥0, of the passenger flow (vector) φ (c, τ ),

with φ : Cs × R≥0 → R|Y|, through c at time τ ≥ 0 s.t. φm (c, τ )= Σ

i∈Y
φ (c, τ ) [i]

and φm (c, τ ) ≤ φmax (c) for every c ∈ Cs, and every τ ≥ 0; in which φ (c, τ ) [i] gives
the flow of all passengers who enter c at τ acc. to the trip profile i ∈Y 5 . It then follows that 6 the product R (c) [j, ·] φ (c, τ ) of the j-th row of the routing matrix R (c) assigned to c with φ (c, τ ), gives the flow of all passengers who leave c at τ acc. to the trip profile j ∈ Y. As balance equation for the passenger load M (a, τ ), with M : {a, p}× R≥0 → R|Y|, of a at τ ≥ 0 we thus write down 7
dM (a, τ ) := R (cb) φ (cb,τ ) dτ − φ (ca,τ ) dτ.	(2)
Note that the passenger load of a must neither be negative nor exceed a’s capacity limit κ > 0. For any τ ≥ 0 and any i ∈ Y, we thus have to require that M (a, τ ) [i] →
0 imply φ (ca,τ ) [i] → 0, and Σj∈Y M (a, τ ) [j] → κa implies φm (cb,τ ) → 0; in which
3 Y is the finite set of different trip profiles (cf. Sec. 2.3 on p. 55), and |Y| is the cardinality thereof
4 A continuous-time stochastic process with independent and stationary increments Wt − Ws whose law is Gaussian with parameter t − s
5 Refer to Tab. 1 on p. 56 for an overview of some matrix/vector operations employed here
6 From the specification of the passenger routing, which is not specified for this example here
7 In integral form since this balance equation is supposed to be integrated into (1)

case we say that φ (ca,τ ) is demand-sensitive, and φ (cb,τ ) is capacity-sensitive. Moreover, we need the passenger flow assigned to every corridor to be routing-proper, i.e., for any c ∈ Cs, j ∈ Y, and τ ≥ 0, it holds that i∈Y R (c) [i, j] = 0 implies φ (c, τ ) [i] = 0. Now the specification of the balance equation for the passenger load of the platform p is a little bit more complex, though, due to the fact that we have to integrate into it the uncertainty that comes along with the passenger flow φ (cA,τ ) through cA (= arrival process). This is captured by adding to the impact that φ (cA,τ ) has on M (p, τ ) - as expressed by the product R (cA) φ (cA,τ ) - another product term R (cA) D (cA). This latter term connects the multidimensional Wiener process Ws with M (p, τ ) through the product of R (cA) with the diffusion matrix D (cA) 8 , with D : cA → R|Y|×|Y|:


Drift- and diffusion term for the spec. of the arrival flow through cA
dM (p, τ ) := R¸ (cA) φ (cA,τ ) xd`τ + D (cA) dW˛s +R (ca) φ (ca,τ ) dτ−
φ (ce,τ ) dτ − φ (cb,τ ) dτ

(3)

In (3), we assume that all passenger flows are routing-proper as well as - iff appli- cable - capacity- and demand-sensitive, in a way that is similar to the specification of the passenger flows in the balance equation (2) for the passenger load of a above. However, note that this requirement taking alone cannot ensure the non-negativity and the capacity limit of p any more. Instead, we have to explicitly enforce both dur- ing the numerical integration of (1), by defining appropriate boundary conditions. Similarly, we have to explicitly enforce the maximum throughput of cA.

Numerical Integration of Balance Equations
In practice, there are two dominant approaches to computing the time evolution of an initial distribution 9 subjected to (1). On the one hand, there is the Monte Carlo method [9]: From the pool of all possible solution paths, some paths are selected “randomly”. The second approach is the one we use here: Integrate the balance equations from (1) into systems of deterministic linear parabolic partial differential equations (one for every station s ∈ S):


 ∂
pdf (Xs
∂τ
N
(τ )) = −	∂	 A
i=1 ∂Xs,i

(Xs

(τ ) ,τ ) [i] pdf (Xs

(τ )) 


(4)

N	N	2

+ 1 Σ Σ Ψ [i, j] 	∂	 pdf (X
(τ )) .

2	s
i=1 j=1
∂Xs,iXs,j	s

with As, Bs from (1) and the abbreviation Ψs := Bs BT . This system is also known as the (multidimensional) Fokker-Planck equation (FPE) or the Kolmogorov forward
8 Tuning parameter from estimation; in general not time-invariant
9 Estimation for the passenger loads of all GPs in a particular station and of all vehicles which are docked to this station in our use case

equation; it describes the time evolution of the probability density function (pdf) for Xs.
Eqn. (4) defines a continuity equation: By introducing the probability flux



f (X



s(τ )) := As



(Xs



(τ )) pdf (Xs



(τ )) −
⎡

1
2 Ψs

  ∂   pdf (Xs (τ ))
  ∂   pdf (Xs (τ ))
.
⎤

⎥ ,	(5)
⎥


∂

∂Xs,n |Y|
pdf (Xs (τ ))⎥⎦

we can rewrite (4) acc. to
∂
pdf (Xs (τ )) + div (f (Xs(τ ))) = 0,	(6)
∂τ
in which div (·) denotes the divergence operator.
Now for this continuity equation we can derive reflecting boundary conditions for the numerical integration of (4) that confine all passenger load vectors to a closed convex polytope Ks 10 . Here, we sketch only the major steps in their derivation in an informal manner, and refer to the literature [5, chapter 5] for more details. The starting point is the insight that the cumulative probability of Xs adopting a value in Ks at any time instant τ ≥ 0 must be one. Thus, the time derivative of this cumulative probability must be zero. Then, after some transformations employing the divergence theorem, we obtain the reflecting boundary conditions
n (Xs(τ )) · f (Xs(τ )) = 0, ∀ Xs(τ ) ∈ ∂Ks and τ ≥ 0,	(7) in which n (Xs (τ )) denotes a unit vector in the outward orthogonal direction of Ks
w.r.t. the boundary ∂Ks of Ks at Xs (τ ) ∈ ∂Ks. For Cartesian coordinates the
scalar product of f (Xs (τ )) with n (Xs (τ )) simplifies to n (Xs (τ ))T f (Xs (τ )).
From this, it is possible to include (4) and (7) subjected to (1) in form of an initial value problem in a numerical integration scheme that preserves the conservation of the probability flux. Finally, note that we can enforce the maximum throughput of every corridor that implements a passenger arrival process, in adjusting the barriers for some reflecting boundary conditions in our time-discrete computation strategy; more on this later.
Discretization of Time
Remember that we resolve conflicting vehicle movements in a deterministic manner if necessary. Thus, two different types of mode transitions can occur in our au- tomaton model in principle: deterministic-timed- and probabilistic passenger load- dependent mode transitions.

10 Cartesian product of |Y|-dimensional real vector spaces: for the passenger load vector of every GP in s and of every vehicle docked to s one; in which Y is the set of different trip profiles and |Y| the cardinality thereof; lower- and upper bounded by all non-negativity- and capacity constraints

Deterministic-timed Mode Transitions. They involve vehicle dispatches, vehicle arrivals, and vehicle departures assuming that the latter are not tied to any pas- senger loads. They are thus completely conditioned on (time) constraints that are imposed on the vehicles’ dispatch times, as well as their elapsed driving- and dwell times (the driving time of vehicle a1 must equal τ1 seconds, the dwell of vehicle a2 must exceed τ2 seconds, and so forth).
Passenger Load-Dependent Mode Transitions. They involve departures of vehi- cles that are docked to a station because less than one passenger wants to alight from/board a vehicle, or less than one passenger can board a vehicle (because of the vehicle’s limited capacity), and so on. They are thus conditioned on constraints that are imposed on some passenger loads (= passenger load constraints) in form of closed convex polytopes; although they might involve time constraints as well. Moreover, note that the departure events of two vehicles, which are docked to two different stations, are mutually exclusive due to the set up of our balance equations (for every station one separate and decoupled system).
Vehicle Load Tree. The possible departure times of vehicles docked to a station form an uncountable set, which renders the computation of our continuous-time automaton model intractable. In order to overcome this burden, we thus discretize the time in the computation of the model’s hybrid state. More specifically, we compute the time evolution of the model’s vehicle load starting recursively from some initial one from one equidistantly-spaced discrete point in time to the next; in which a particular vehicle load refines a mode of our automaton model in that it also defines (discrete) elapsed dwell times for all stopped vehicles, and elapsed driving times for all driving vehicles. Thus, several vehicle loads can belong to one and the same mode. We then a) assume that the SHA model can change its vehicle load only at equidistantly-spaced discrete points in time. In addition, we b) replace every equality constraint for a vehicle arrival to be true by an inequality constraint
s.t. the elapsed driving time of a vehicle has to exceed a certain time threshold
τ > 0; and does not have to equal τ . Finally, we c) ceil every dispatch time (from the dispatch plan) to the next closest discrete point in time. As a result, we obtain a vehicle load tree G; an edge- and vertex-labelled directed rooted tree (cf. Fig. 6.b from p. 57): Every vertex captures a particular vehicle load L of TN. This L is stored as a tuple (Lj, n), in which Lj is a vehicle load itself, and n ∈ N>0 is a non-negative integer. We then obtain L from (Lj, n) in that we increment every elapsed driving- and dwell time in Lj by n. The vertex label assigned to L gives the discrete time step that elapses before our automaton model - if at all - is in L starting from the vehicle load in the root of G at τ = 0; it equals the height of (Lj, n) in G. On the other hand, every edge label, say from the vehicle load L1 to L2, gives a convex polytope for TN’s passenger load that equals the complete passenger load space 11 iff the transition of the automaton’s vehicle load from L1 to L2 is not conditioned on a probabilistic passenger load-dependent mode transition, and a subset of the passenger load space otherwise; in which (latter) case this subset is adopted from

11 Cartesian product of a finite set of closed intervals on the real number axis; for every GP in every station and for every vehicle one interval that is lower bounded by zero and upper bounded by the capacity limit of the respective GP or vehicle

the specification of the passenger load constraint for the respective mode transition. It then follows that branches in the vehicle load tree arise from probabilistic mode transitions only.
Computation of the Vehicle Load Tree. The iterative computation of a vehicle load tree from one time layer to the next, with a fixed time step of Δτ > 0 seconds, is straightforward; and we thus describe the major steps of every (iterative) run only in an informal manner here: Starting point is the tree G0 = (V 0, E0, fe,0, fv,0) with a single vertex v0 s.t. V 0 = {v0} and E0 = ∅. This vertex captures the automaton’s vehicle load L0 at time τ = 0 s.t. v0 = (L0, 0) and fv (v0) = 0 with marginal probability one. For a summary of the shorthands V i, Ei, fv,i, and fe,i pertaining to the specification of the vehicle load tree Gi, with i ∈ N≥0, refer to Tab.

2 on p.
The run i > 0 then computes Gi from Gi—1 in that it first adopts the

specification of Gi—1 s.t. Gi := Gi—1, and then processes for every vertex v ∈ V i—1
s.t. fv (L, n) = i − 1, v := (L, n), and M is the mode that is contained in L the following 5 steps:
Compute the set F of all enabled mode transitions from M to any other mode Mj, in which a mode transition from M to Mj is enabled iff all time constraints (independently of the passenger load constraints) are met until time step i
Define Fd ⊆ F as the subset of all deterministic-timed mode transitions, and Fp ⊆ F as the subset of all probabilistic mode transitions s.t. F = Fd ∪Fp and Fd ∩ Fp = ∅
If F is empty:
Define vj := (L, n + 1), and X as the complete passenger load space
Append vj as a child of v to Gi
Define fe,i (v, vj) := X, and fv,i (v) := i
If Fd /= ∅:
Define X as the complete passenger load space
Identify the mode transition f ∈ Fd with the biggest impact on L in terms of the number of vehicles that change their operational states 12 (position, mission, etc.)
W.r.t. M , let Mj be the mode following f , and A be the set of all vehicles that change their operational states due to f
Compute the vehicle load Lj:
Adopt Mj for the mode that is contained in Lj
Set the elapsed driving/dwell time of every driving/stopped vehicle a ∈A 
in Lj to zero
For the elapsed driving/dwell time of every other driving/stopped vehicle
aj /∈A in Lj, take the corresponding time from L and increment it by one
Define vj := (Lj, 0)
Continue with step iii.b
If F = Fp, then do for every f ∈ F :

12 This mode transition is unique

Define X as the convex polytope that captures the passenger load constraint imposed on f
Continue with step iv.c
Table 2
Shorthands pertaining to the computation of a vehicle load tree G assuming that V is the vertex set of G, and E is its edge set
Shorthand	Meaning
fv (v)	Height of v ∈ V in G
Subset of the complete passenger load space that has to be entered

fe (v, vj)
by the automaton’s passenger load so as to induce a jump from v
to vj, with (v, vj) ∈ E

v	Set •v := {vj ∈ V : (vj, v) ∈ E} of all parents of v ∈ V v•	Set v• := {vj ∈ V : (v, vj) ∈ E} of all children of v ∈ V

Computing Transition Probabilities
So far we have described how estimations for the passenger loads of all GPs in a station, and of all vehicles docked to that station, can be propagated in time in a particular mode of our automaton model by the numerical integration of determin- istic partial differential equations. We then introduced the vehicle load of TN, and described how - starting from some initial vehicle load L0 at time τ = 0 - all possible solution paths of that vehicle load can be computed in a time-discrete manner, in which all mode transition times are confined to an equidistantly-spaced time-layered mesh. The next step is thus to connect both; the continuous-time propagations of all passenger load estimations in the different modes on the one hand, and all pos- sible solution paths for the vehicle load on the other hand. In doing so, we describe how a discrete-time approximation for the hybrid state (= particular vehicle load of TN + all passenger load vectors) of our (continuous-time) automaton can be com- puted 13 . Note first that a missing edge from v ∈ V to vj ∈ V in the automaton’s vehicle load tree G = (V, E, fe, fv) implies that the corresponding transition of the automaton’s vehicle load cannot occur, given the choice of the discrete time step Δτ > 0. On the other hand, the existence of this edge individually only implies that the corresponding transition may occur, but does not necessarily have to do so. In this context focussing on the SHA model’s discrete state first, note that

P vj :=
v ∈ •v′
P vj|v P (v)	(8)

must hold for every vj ∈ V , in which P (vj) is the marginal probability that the vehicle load of the automaton at time step fv (vj) is vj, and P (vj|v) is the (marginal)

13 Approximation that should asymptotically converge to the exact (analytical) solution by reducing the discretization time step for the discrete mode graph and by increasing the granularity of all numerical integrations

conditional probability that the automaton’s vehicle load at fv (vj) is vj, given that it is v at fv (v) = fv (vj) − 1. This conditional probability of course depends on the automaton’s passenger load; see below. Next note that at any time step, our automaton model must be in some vehicle load, which is identical to saying that



v ∈ fv	(i)
P (v)= 1, ∀i ∈ N≥0.	(9)

Now coming to the integration of the SHA’s continuous state into the discrete framework for its vehicle load defined by (8) and (9) and thus to the computation of the SHA’s complete hybrid state, note that at any time step i ∈ N≥0, the automa- ton’s passenger load must be in a non-empty subset from the complete passenger load space with a positive probability that we store in the density pdf (i). Starting from the automaton’s initial hybrid state in form of pdf (0) for its passenger load and v0 := (L0, 0) for its vehicle load, with P (v0)= 1, v0 := (L0, 0), and fv (v0)= 0; the automaton’s hybrid state at i ∈ N>0 computes from the preceding one at i − 1 as follows:
The density for the automaton’s passenger load at i computes acc. to

pdf (i)=	Σ
v
pdfo (v) P (v) .	(10)

Therein, pdfo (v), with v ∈ V , is the result of the numerical integration of (4) from p. 59 from time step fv (v) to fv (v) + 1; with pdf (fv (v)) as initial density;
(4) subjected to (7) from p. 60; and (4) set up for all stochastic balance equations (for every station s ∈ S one) acc. to (1) from p. 58 for the mode that is contained in v.
The probability that the automaton is in the vehicle load vj ∈ V , with fv (vj)= i, can be computed from the probability P (v) that the automaton is in v ∈ •vj at fv (v) = i − 1 and the conditional probability P (vj|v) acc. to (8). Therein, P (vj|v) captures the extend acc. to which the automaton’s passenger load enters the target set fe (v, vj) at i assuming that the automaton’s vehicle load is v. We compute it acc. to
P vj|v  :=	∫	pdfo (v) dV.	(11)
fe(v,v′)
Forecasting Passenger Loads
The Problem Statement
We start from an observation of TN’s (network) state at time τ = 0 and a question about its passenger load (= objective of the forecast). The former is captured by an exact knowledge of its vehicle load L0 at τ = 0 and an estimation of its passenger load (= passenger load of every GP in every station, and of every vehicle operated in the infrastructure at hand) for τ = 0 in form of the density pdf (0). From the

latter, we can deduce a prediction horizon τ∗, a target set for TN’s passenger load X∗, and a threshold α∗ for the probability that TN’s passenger load adopts a value from X∗. For instance, a particular question might read as follows:
“Will the passenger load of the platform p in the station s ∈ S exceed 200 passengers (→ X∗) with a probability greater than 0.7 (→ α∗) within the next 20 minutes (→ τ∗)?”
The General Solution
We compute α(0) := X∗ pdf (0) dV , i.e., the probability of TN’s passenger loads to take on a value from X∗ at τ = 0. Then, proceed as follows: If α(0) > α∗, we have already obtained an affirmative answer to our question and we can stop here. Otherwise, we make use of our time-discrete automaton model in that we provide
α(0), the time index i = 0, and the vehicle load tree G0 := (V 0, E0, fe,0, fv,0) as input to the following iteration that terminates iff α(j) > α∗ or (j + 1) Δτ > τ∗, with j ∈ N≥0; here V 0 := {v0}, with v0 := (L0, 0), E0 := ∅, and fv,0 (v0) := 0:
Compute the vehicle load tree Gi+1 from Gi as described in Sec. 3.3
Compute pdf (i + 1) acc. to (10) on p. 64
Compute α(i + 1) := ∫X∗ pdf (i + 1) dV

If α(i + 1) ≤ α∗, then compute P (v) acc. to (8) on p.
s.t. fv,i+1 = i +1 
Set i := i +1 
63 for every v ∈ V i+1

Thus by construction, we know the binary true/false answer to our initial question upon termination of this iterative computation. So the next question then is whether or not the iterative computation itself is feasible in a reasonable amount of time (number of trivial computation steps) with reasonable memory constraints, which is probably not the case unless some further simplifications are made. This will lead us to a more efficient implementation of the iterative computation of the forecast above (Sec. 4.3) together with a re-definition of all balance equations for the numerical integration of the passenger flows (Sec. 4.4 on p. 66).
The Efficient Implementation of the Iterative Forecasting Algorithm
First of all, note that in order to compute pdf (i + 1), with i ∈ H∗ and H∗ :=
 1, 2,..., τ∗ ,, acc. to (10) from p. 64, we only need to know the set of all leaf
nodes of the vehicle load tree Gi, say V¯ i, together with the density pdf (i − 1) and P (v) for every v ∈ V¯ i. So, instead of computing a vehicle load tree in the iterative computation of the forecast, as described above, anew every time, it makes sense to propagate only this reduced piece of information from one iteration to the next. However, taking this measure alone, we still end up with a potentially huge set V¯ i given even only very few passenger ride possibilities on-board concurrently moving vehicles; and this is a big problem since we do not only have to compute the set V¯ i itself, but for every v ∈ V¯ i we also have to numerically solve partial differential

equations in the form of (1) from p. 58 (so far, one for every station). What we have to do thus is to identify all vehicle movements that do not affect the forecast and to ignore them. In this context, note that - starting from the time step (i− 1) Δτ until the end of the prediction horizon at time τ∗ - we can compute how far the operational state (including the position) of every vehicle can evolve from the constant driving times for the individual tracks and the minimum dwell times for the waypoints in the specification of the different vehicle missions. Combining this knowledge with the specification of the complete passenger re-routing and the definition of the target set X∗ - from which we can deduce a target zone in form of a set of GPs in the stations and vehicles, - we can thus compute whether or not a passenger outside this target zone can penetrate it within the prediction horizon, given the passenger’s current position. In this way, we can compute at every iterative step i ∈ H∗ not
only the set of all vehicle movements that we have to take into consideration in the computation of V¯ j , but also for every v ∈ V¯ j the set of all stations that we have to include in the numerical integration of the passenger loads; that is, excluding those stations that are outside the target zone and from which passengers cannot
penetrate the target zone within the remaining prediction horizon.

Redeﬁning all Balance Equations for the Numerical Integration
In the worst case, the system of balance equations derived for a station s ∈ S in

a particular mode of the automaton acc. to (1) from p.
58 has the dimension

(n1 + n2) |Y|, in which n1 is the number of GPs in s, n2 is the number of vehicles docked to s, and Y is the finite set of different trip profiles introduced during the specification of the passenger routing. Then note that in practice (1) with even very few dimensions renders the numerical integration of the initial value problem

in form of (4) from p.
59 subjected to (7) from p.
60 intractable given reasonable

computation constraints.
Now one approach to overcome this computational burden is to decouple all passenger flows during the numerical integration of all passenger loads associated with s, and to merge trip profiles with common last miles: First of all, we assume that all n := n1 + n2 passenger load vectors associated with s were estimated for the forecast at hand in isolation in form of separate and uncorrelated probability densities. Moreover, we assume that these estimations do not violate any additional constraints (non-existent in the original setting of the balance equations) w.r.t. the maximum number of passengers who can be located at a particular GP or on-board a vehicle as a function of their trip profile; see below. Assuming this to be true, we then integrate these estimations into a finite set of decoupled one- and two- dimensional systems of balance equations for the passenger loads associated with s, which we classify either as arrival processes, passenger transfers, or outflows:
Arrival Process. For every corridor in s that implements a passenger arrival process, say c, to one of its GPs, say p, set up a one-dimensional balance equation acc. to (1) for the free capacity of p. This free capacity can be computed from p’s (constant) total capacity minus its cumulative passenger load. Then note that we can ensure the maximum throughput φmax (c) assigned to c during the numerical

integration of this one-dimensional balance equation by reducing the total capacity of p s.t. it equals the product of φmax (c) with Δτ > 0 if necessary; in which Δτ is the discrete time step that underlies the computation of the vehicle load tree, and thus defines the horizon of the numerical integration (from one vehicle load to the next) 14 .
Passenger Transfer. For every passenger transfer between two discrete points associated with s (a GP in s or a vehicle docked to s), say from p1 to p2, set up two one-dimensional balance equations acc. to (1); one for the cumulative passenger load of p1 and the other for the free capacity of p2. Ensure that the corresponding passenger flow assigned to the corridor which connects p1 to p2 is capacity- and demand-sensitive (cf. Sec. 3.1 on p. 57). Recall that, by assumption, neither of the two balance equations can have any diffusion terms since every modelled uncertainty is captured by a passenger arrival process or the estimations for all initial passenger loads.
Outflow. For every corridor in s that implements a flow of passengers leaving
s from one of its GPs, say p, set up a one-dimensional balance equation acc. to
(1) (no diffusion term) for the cumulative passenger load of p. Ensure that the specification of the passenger flow assigned to c is demand-sensitive.
Now that we have replaced the system of SDEs for the station s in a particular mode by a finite set of decoupled systems of one- and two dimensional SDEs, we have to specify their proper initialization including the passenger loads and the capacity constraints: Imagine that two corridors, say c1 and c2, discharge into the same GP in s, say p; further, that two corridors, say c3 and c4, originate in p; and that all four corridors implement a passenger transfer to/from p from/to two other GPs in s. If we set up four decoupled balance equations for all four passenger transfer possibilities as described above, we then have to i) distribute the initial estimation for p’s passenger load among the four balance equations, ii) numerically integrate the four balance equations, and then iii) join the integrated estimations into one single density that captures the passenger load of p at the end of the integration horizon. We achieve this by breaking down p’s total capacity into distinct parts; one part, say κ1, that defines the total capacity of p in the balance equation set up for the passenger transfer associated with c1 and the remaining part κ2 that gives the total capacity of p in the balance equation set up for c2, respectively. In particular, set κi :=   φmax(ci)   , where i ∈ {1, 2} and φmax (ci) is the maximum throughput of ci. Thus, the part of p’s total capacity that is attributed to the balance equation set up for ci is proportional to the maximum throughput of ci and inversely proportional to the sum of the throughputs of all corridors that discharge into p. This means that we have to extend the denominator in the definition of κi if further corridors (implementing passenger transfers or arrival processes) discharge into p. In this context assuming that one such additional corridor implements a passenger arrival process, we might have to further reduce p’s total capacity in the set up of the respective balance equation as so as to ensure the maximum throughput

14 The reflecting boundary condition from (7) still ensures the non-negativity of p’s (cumulative) passenger load and p’s total capacity

as described above. We next use the specification of the passenger (re-)routing to distribute the estimation of p’s initial passenger load among the two (decoupled) balance equations set up for the passenger transfers associated with c3 and c4. In fact, we know from the specification of the passenger (re-)routing which group of passengers (which trip profile) wants to take which of the two corridors c3 or c4 if at all. We thus extract from the initial estimation the number of all those passengers who want to take c3 and assign it as the initial (cumulative) passenger load to p in the balance equation set up for c3. We do likewise for c4. Upon completion of the numerical integration of the balance equations for c3 and c4, we then recover the individual trip profile from the computed density of the cumulative passenger loads by extrapolation; more on this will be described in a paper in preparation.


Summary & Outlook
In this paper we have introduced a continuous-time stochastic hybrid automaton model and showed how its discrete time approximation can be used to forecast pas- senger loads in multimodal transportation networks: All passengers are grouped into a finite set of trip profiles that route the respective (continuous) passenger flows. All vehicles on the other hand are either parked, or executing missions with deterministic driving times between all pairs of two consecutive waypoints (whereas docking times at stations vary according to the passenger load). Uncertainty explic- itly enters the model in form of the passengers who start their trips in the network and the estimations for the initial passenger loads of all stations and vehicles.
Two bottlenecks have to be tackled in the iterative computation (from one time- layer to the next) of every forecast: First, there is the vehicle load tree that cap- tures all possible solution paths of the automaton’s discrete state. Every concurrent service run (= vehicle movement with the possibility of passengers on-board) intro- duces some extra branches which tremendously increase the number of numerical integrations that have to be performed in every time-layer. Secondly, there are the many numerical integrations themselves; derived from high-dimensional stochastic differential balance equations.
Now for both bottlenecks we have proposed two workarounds that we plan to elaborate in the future. Moreover, we intend to develop algorithms to efficiently compute forecasts not only for particular passenger loads but also more complex circumstances, such as the travel times between origin- and destination pairs.


Acknowledgement
This research work has been carried out under the leadership of the Technological Research Institute SystemX, and therefore granted with public funds within the scope of the French Program “Investissements d’Avenir”.

References
Balbo, G., Introduction to generalized stochastic petri nets, in: Formal Methods for Performance Evaluation, 2007 .
Bect, J., A unifying formulation of the fokker-planck-kolmogorov equation for general stochastic hybrid systems, ArXiv e-prints (2008).
Bujorianu, M. L., J. Lygeros and C. B. Bujorianu, Toward a general theory of stochastic hybrid systems, in: Stochastic Hybrid Systems, Springer Berlin Heidelberg, 2006 .
David, R. and H. Alla, “Discrete, Continuous, and Hybrid Petri Nets,” Springer Publishing Company, 2010.
Gardiner, C. W., “Handbook of Stochastic Methods: for Physics, Chemistry and the Natural Sciences,” Springer Publishing, 2004, 3 edition.
Haar, S. and S. Theissing, A hybrid-dynamical model for passenger-flow in transportation systems, in:
5th IFAC Conference on Analysis and Design of Hybrid Systems, 2015.
Horton, G., V. G. Kulkarni, D. M. Nicol and K. S. Trivedi, Fluid stochastic petri nets: Theory, applications, and solution techniques, European Journal of Operational Research (1998).
Hu, J., J. Lygeros and S. Sastry, Towards a theory of stochastic hybrid systems, in: Hybrid Systems: Computation and Control, Springer Berlin Heidelberg, 2000 .
MacKay, D. J. C., Introduction to monte carlo methods, in: Proceedings of the NATO Advanced Study Institute on Learning in Graphical Models, 1998.
Prandini, M. and J. Hu, A numerical approximation scheme for reachability analysis of stochastic hybrid systems with state-dependent switchings, in: Proceedings of the 46th IEEE Conference on Decision and Control, 2007.
Schmoecker, J. D. and W. Adeney, Metro service delay recovery: comparison of strategies and constraints across systems, Journal of the Transportation Research Board (2005).
Trivedi, K. S. and V. G. Kulkarni, Fspns: Fluid stochastic petri nets, in: Proceedings of the 14th International Conference on the Application and Theory of Petri nets, 1993.
Wolter, K., Modelling hybrid systems with fluid stochastic petri nets, in: Proceedings of the 4th International Conference on Automation of Mixed Processes: Hybrid Dynamic Systems, 2000.
