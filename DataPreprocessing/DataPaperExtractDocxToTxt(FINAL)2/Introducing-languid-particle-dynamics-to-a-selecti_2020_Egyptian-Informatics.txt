Egyptian Informatics Journal 21 (2020) 119–129











Introducing languid particle dynamics to a selection of PSO variants
Siniša Druzˇeta, Stefan Ivic´ ⇑, Luka Grbcˇic´, Ivana Lucˇin
Faculty of Engineering University of Rijeka, Vukovarska 58, Rijeka, Croatia



a r t i c l e  i n f o 

Article history:
Received 18 April 2019
Revised 19 July 2019
Accepted 18 November 2019
Available online 29 November 2019

Keywords:
Particle swarm optimization Inertia weight
Fitness based inertia Swarm intelligence
Pipe network optimization
a b s t r a c t 

Previous research showed that conditioning a PSO agent’s movement based on its personal fitness improvement enhances the standard PSO method. In this article, Languid Particle Dynamics (LPD) tech- nique is used on five adequate and widely used PSO variants. Five unmodified PSO variants were tested against their LPD-enabled counterparts on three search space dimensionalities (10, 20, and 50 dimen- sions) and 30 test functions of the CEC 2014 benchmark test. In the preliminary phase of the testing four of the five tested PSO variants showed improvement in accuracy. The worst and best-achieving variants from preliminary test went through detailed investigation on 220 and 770 combinations of method parameters, where both variants showed overall gains in accuracy when enhanced with LPD. The results obtained with best achieving PSO parameters were subject to statistical analysis which showed that the two variants give statistically significant improvements in accuracy for 13–50% of the test functions. Lastly, an engineering application test-case of water distribution system optimization was used, in which 151 pipe diameters were optimized with the tested PSO variants. Two of the five PSO variants manifested significantly improved accuracy when enhanced with LPD, with a LPD-enabled variant producing the overall best results, as being the only variant capable of finding the optimal pipe network configuration.
© 2019 Production and hosting by Elsevier B.V. on behalf of Faculty of Computers and Information, Cairo
University. This is an open access article under the CC BY-NC-ND license (http://creativecommons.org/
licenses/by-nc-nd/4.0/).





Introduction

Particle Swarm Optimization (PSO) is an optimization method originally inspired by the movement of bird flocks and fish schools [1,2]. The method tracks a group of agents (particles) moving through the search space, each agent adapting its movement on the basis of its own findings as well as the findings of other agents. To this day, a great number of modifications and improvements have been proposed for PSO [3], as both elegance and capability of the method keep motivating researchers to further investigate its features and advance its performance.
The efficiency of PSO is even more intriguing if one notices that the method does not take into account the gradient of the PSO agent path. In layman’s terms, PSO particles have no idea if they are moving uphill of downhill. Starting with an intuition that

* Corresponding author.
E-mail address: stefan.ivic@riteh.hr (S. Ivic´).
Peer review under responsibility of Faculty of Computers and Information, Cairo University.
enabling the particles with some ‘awareness’ of their own improvement could possibly enhance the capabilities of PSO, we have previously proposed a novel enhancement of PSO method called Personal Fitness Improvement Dependent Inertia (PFIDI), which makes each particle’s movement conditioned by its fitness improvement [4]. Although this being a fairly fundamental modifi- cation of the PSO particle movement logic, it neither undermines the elegance of PSO nor it betrays its bio-inspired origins. The pro- posed PFIDI method, as implemented in its most basic version called Languid PSO (LPSO), was shown to yield predominantly bet- ter accuracy than standard PSO, across a spectrum of various goal functions and method parameter configurations.
The results presented in [4], however encouraging, partially remain inconclusive due to the fact that PFIDI-enabled LPSO was tested only against standard PSO. Therefore, stronger evidence of the PFIDI/LPSO capabilities would be obtained if these effects were tested on advanced PSO variants. Hence the contribution of this article is the examination of the performance of a selection of PSO variants enhanced with LPSO inertia handling technique.
The remainder of the article is structured as follows. The second section of the article provides an overview of previous research related to the proposed LPSO technique. In the third section an implementation of a version of LPSO in standard PSO is presented. The proposed technique is tested on five selected PSO variants,



https://doi.org/10.1016/j.eij.2019.11.005
1110-8665/© 2019 Production and hosting by Elsevier B.V. on behalf of Faculty of Computers and Information, Cairo University. This is an open access article under the CC BY-NC-ND license (http://creativecommons.org/licenses/by-nc-nd/4.0/).



which are described in the fourth section of the article. The fifth section comprises the explanation of the two-phase benchmark testing methodology and the analysis of the obtained results. An additional engineering application test-case is used for a separate test, which is explained and discussed in the sixth section. Finally, closing remarks are given in the Conclusion section.


Overview of PFIDI-related research

Although numerous advanced PSO variants exist which utilize some additional information on particle fitness and/or a kind of adaptive inertia technique, only those in which an individual par- ticle’s movement logic is directly influenced by its fitness and those which handle inertia in a particle-wise manner are understood as closely related to the technique explored in this article.
There are many PSO variants which track particles’ fitness in order to use that information for local social attraction. One of these is the method proposed in [5], which combines fitness infor- mation with Euclidean distance so as to establish a neighborhood and find its best particle for lbest PSO. However, for this only a par- ticle’s neighbors’ fitness is considered, while the particle’s own fit- ness is not used for its own self-assessment. A similar approach is the ‘‘Fitness-Distance-Ratio” method [6] which finds a ‘‘neighbor- hood best” particle among a particle’s spatially nearest neighbors, using a criterion of fitness-distance ratio. However, techniques like these institute a certain departure from the original bio-inspired idea of PSO of using simply behaving, dominantly autonomous par- ticles, as well as often come with a significant computational cost. As for the adaptation of inertia, various methods have been pro- posed, most of which understand inertia weight factor w as a swarm-wise parameter, i.e. constant across the entire swarm [7]. In the rare cases where particle-wise inertia weight adaptation is employed, inertia weight w is usually calculated on the basis of rel-
ative difference between the fitness of an individual particle and
the inertia weight values are constant across each swarm, but dif- ferrent between the swarms as they are dynamically updated, depending on the number of particles in the swarm with improv- ing fitness. In effect, when the particles mostly improve, the inertia of the entire swarm is amplified and vice versa, making this a de facto swarm-wise version of fitness improvement dependent inertia.
The inertia weight adaptation in [18] appears to be particularly interesting for the research of PFIDI. This technique employs fit- ness based inertia control both on a global level and on a local level (i.e. per-particle). In the local version (called Locally Adaptive Iner- tia Weight) the inertia weight of each particle is obtained as a dif- ference between the fitness of its current personal best position and the fitness of the personal best position of the previous itera- tion. Although the straightforwardness of the technique makes it rather attractive, it also raises questions of sensitivity to fitness value magnitude, which is certainly not desirable, at least for general-purpose optimization methods.

Languid particle dynamics in standard PSO

Standard PSO

In standard PSO the particles move with a certain amount of inertia through the search space, while being attracted to the best position that they individually have found, and to the best position found by any particle of their neighborhood.
its position in the D-dimensional search space x = (x1, x2, x3, ... xD), For each individual particle of the PSO swarm, we keep track of its historically best position p, its current velocity v and histori-
cally best position of its neighboring particles g. After random ini- tialization of positions x and velocities v, a k-th particle moves by updating its velocity and position at iteration t [19]:
v(t) = v t + c1 · r1 ◦ p(t—1) — x(t—1) + c2 · r2 ◦ g(t—1) — x(t—1) ,

some characteristic fitness of its neighborhood, such as the neigh- borhood best, average or worst fitness value [8–11]. The adaptation
is conducted so that more inertia is provided to particles with rel-
k	()	k	k
k
k	k
(1)

atively bad positions and less inertia to particles with relatively
x(t) = x(t—1) + v(t),	(2)

k	k	k

good positions. A different approach, yielding similar effect, is pro- posed in [12], where the calculation of w is based on a fitness- based particle ranking. The principal idea behind all these inertia weight adaptation methods is that speeding up low-performing particles and slowing down high-performing particles should improve the search effectiveness of the entire swarm.
A different idea, partly related to the fitness improvement based
inertia adaptation, is implemented in the Inertia-Adaptive PSO
where vI is inertial velocity, c1 and c2 are cognitive and social PSO coefficients, respectively, while r1 and r2 are D-dimensional vectors
of random numbers in the range [0, 1]. Note that vector multiplica-
tion in (1) is a Hadamard product.
In standard PSO, inertial velocity vI is defined as the particle’s velocity of the previous iteration, scaled with a weight factor:
v(t) = w(t) · v(t—1),	(3)

[13], where inertia factor w is adapted separately for each particle,	Ik	k

according to the distance between the particle in question and its neighborhood’s historically best position. This technique ensures that the ‘‘diverging” particles are even more strongly attracted towards neighborhood best and personal best positions. A some- what similar method is used also in [14]. Here a particle’s inertia weight factor value depends on its velocity vector and resultant attraction vector towards both personal best and neighborhood best positions, with both directions and magnitudes of the vectors taken into account. Effectively, inertia weight factor of each parti- cle depends on its velocity and position, with respect to personal best and neighborhood best positions.
The rate of personal fitness improvement has also been pro- posed as a criterion for particle-wise adaptive inertia [15,16]. In this technique, personal ‘‘evolution speed” is assessed, together with fitness-based ‘‘swarm aggregation degree”, so as to be used to dynamically calculate inertia weight factor value.
Another approach, rather closely related to the idea of PFIDI, is the inertia handling for multi-swarm PSO proposed in [17]. Here
with the purpose of the inertia weight w being to serve as a control mechanism for swarm convergence. Since different optimization problems require different convergence dynamics, many various methods have been proposed for dynamically changing or adapting
and then it is generally recommended to use w = 0.7 0.05 [20,21]. Coefficients c1 and c2 are traditionally used as c1 = c2 = 2.0, but inertia weight [7]. Still, inertia weight is often used as a constant
better understanding of their influence encourages the use of lower
values and problem-specific calibration [20,21], as well as chang- ing them over iterations [22].
The version of PSO with each particle being informed by the entire swarm is called ‘gbest PSO’, while the version with each par- ticle communicating only with a subset of the swarm is called ‘lbest PSO’ [2]. In other words, a swarm may be entirely connected in a single neighborhood or divided in many smaller neighborhoods, with neighborhood topologies being purely index-based, i.e. not related to search space locality. Many different options have been proposed for the neighborhood topology of the lbest PSO and no



specific topology has been universally adopted as most beneficial in terms of overall PSO performance. Standard PSO implementa- tions mostly imply the use of simple circular (‘ring’) topology
[21] or random topology [23].
Note that, since standard PSO particles do not track their fitness progress, they have no information on the fitness change along their path. In the course of PSO research, a number of techniques for using fitness improvement information for improving the effi- ciency of the swarming process have been developed, albeit only a few of those consider particle’s own fitness improvement in each particle’s movement logic. On the other hand, although some authors have proposed particle-wise inertia control, in standard PSO as well as in most other PSO variants inertia is considered to be global (i.e. constant across the entire swarm). Based on utilizing particle-wise inertia control for resolving personal fitness improve- ment dependent particle movement, the PFIDI approach and the LPSO method [4] were proposed.

Languid particle dynamics

In an attempt to enhance PSO performance a PFIDI technique is proposed in which each particle tracks its fitness evolution and then uses this information in its movement decision-making pro- cess. One possible technique for this is using fitness improvement as a prerequisite for particle inertia. As probably the simplest method for this, a basic switch-like condition on inertia term 3 of each individual particle [4] is used:
Behaving in this manner, a particle disregards its previous direction if it failed to take it to a better location. Since such parti- cle behavior implies a certain lack of enthusiasm, the adjective ‘languid’ was adopted as a designator of this type of particle move- ment dynamics. Respectively, standard PSO enabled with Languid Particle Dynamics (LPD) is named Languid PSO (LPSO).
Note that (4) employs a correction of +0.05 for inertia weight when inertia is not disabled. This represents a modification of the original inertia handling technique of Languid PSO [4], which used no such correction. Since the originally proposed inertia switching technique reduces the overall velocity of the swarm, it would be reasonable to expect that the method would benefit from compensation in the form of increased inertia weight. This was also indicated by the results of the benchmark testing given in pre- vious research [4], thus the aforementioned amplification coeffi- cient was introduced in order to address this issue.
The pseudo-code of standard PSO enhanced with Languid Parti- cle Dynamics is given in Algorithm 1. Additionally, LPD-enabled PSO is conceptually presented by a flow chart given in Fig. 1.

1:  for  particle  k  =  1  to  n  do Algorithm 1 Standard PSO with Languid Particle Dynamics
2:	number of evaluations eval = 0
3:	iteration t = 0
4:	initialize particle position x(t) and velocity v(t) 
5:	initialize neighborhood topology

v(t) =
( w(t) + 0.05 
· v(t—1)
when  f x(t—1) 
< f x(t—2) 
,	(4)
6:	evaluate fitness f x(t) , eval = eval + 1
7:	find personal and neighborhood best p(t), g(t) 

Ik
0	otherwise
where f is the fitness function. This means that the k-th particle has inertia only as long as it keeps advancing in a direction of better fit- ness (the formulation (4) assumes a minimization problem).
k	k
8: end for
9: while eval < evalmax do
10:	iteration t = t + 1
11:	for particle k = 1 to n do
12:	if f x(t—1) < f x(t—2) or t < 2 then  dEq. (4)

Ik	k
14:	else
15:	v(t) = 0
16:	end if

17:	calculate new velocity v(t) 
18:	calculate new position x(t) 
dEq. (1)
dEq. (2)

19:	evaluate fitness f x(t) , eval = eval + 1
20:	find personal and neighborhood best p(t), g(t) 
k	k
21:	end for
22:	if f (t) > f (t+1) and lbest then
best	best
23:		reinitialize neighborhood topology 24:	end if
25: end while




Selected PSO variants

In order to thoroughly test the effects of LPD (i.e. LPSO inertia switching technique), a selection of PSO variants was used. For each variant a sub-variant enabled with LPD was implemented and then had its performance compared with the pure variant. The PSO variants used are:






Fig. 1. Flow chart of LPD-enabled PSO.
Linearly Decreasing Inertia Weight PSO (LDIW-PSO)
Time Varying Acceleration Coefficients PSO (TVAC-PSO)
Chaotic PSO (C-PSO)



Dynamic Multiswarm PSO (DMS-PSO)
Comprehensive Learning PSO (CL-PSO).
The above variants not only are some of the most popular in PSO
research and applications, but also employ various interesting PSO advancement techniques. As such, these variants make a good assortment of PSO modifications for testing the compatibility of LPD with other PSO enhancement techniques.

Linearly Decreasing Inertia Weight PSO (LDIW-PSO)

Linearly Decreasing Inertia Weight PSO (LDIW-PSO) was intro-
weight factor values (Tables 1 and 3). Varying of wmax in this man- ner allows for fine-tuning of the upper limit of the linearly decreas- ing inertia.


Time Varying Acceleration Coefficients PSO (TVAC-PSO)

Time varying acceleration coefficients PSO (TVAC-PSO) [22] is a PSO variant which uses linearly changing PSO coefficients c1 and c2, contrary to the standard PSO where coefficients c1 and c2 are used as constant values. Coefficients c1 and c2 calculated by:

duced in [24] as an improvement over standard PSO which uses	c(t) = c1 + c1 — c1  t 
(6)

1	i
constant inertia weight factor. In LDIW-PSO intertia weight factor
w is linearly decreasing with every iteration from its maximum
f	i  tmax

value to its minimum value, which are both defined at the begin-
c(t) = c2 + c2 — c2  t 
(7)

ning of the optimization. This way the method gradually transi-	2	i
tions from global to local search.
f	i  tmax

Due to its beneficient effects on PSO accuracy and convergence, LDIW technique has become widely used, both in PSO research and application.
Particle positions and velocities at iteration t are updated as given in (1) and (2), with inertia weight factor used in (3) being updated at every iteration as follows:
where c1i , c1f , c2i and c2f represent initial and final values of coeffi-
cients c1 and c2 which are linearly increasing/decreasing over itera- tions of the PSO swarming process.
decreasing from c1i = 2.5 to c1f = 0.5 while c2 is increasing from In the TVAC-PSO implementation used for this research c1 is c2i = 0.5 to c2f = 2.5, as recommended by the authors of the

w(t) = wmin + (wmax — wmin ) t
t
max
(5)
method. This approach encourages a wide global search in the early part of optimization and a detailed local search in the later phase of the optimization process, facilitating an efficient conver-

where wmin is the minimum value of interia weight factor, wmax is
the maximum value of intertia weight factor, t is the current itera- tion for which w is calculated, and tmax is the maximum number of allowed iterations (corresponding to maximum allowed function evaluations evalmax).
In this research wmin = 0.4 and wmax = w0 + 0.2 were used, with
w0 values for calculating wmax being taken from a range of inertia
gence to a global optimum.
TVAC-PSO also features linearly decreasing inertia weight fac- tor, as given in (5), coupled with standard PSO velocity (1) and position updating (2).
The efficiency of TVAC-PSO, coupled with the reduced number of method parameters it provides, makes it a very attractive PSO variant and as such it was included in this research.



Table 1
Best performing PSO parameters [4].




Chaotic PSO (C-PSO)

Chaotic PSO (C-PSO) was introduced in [9] and it has become one of the most popular PSO variants, used on a variety of opti- mization problems.
In contrast to the standard PSO, C-PSO employs an additional secondary search called chaotic local search (CLS). So as to further
4.5. Comprehensive learning PSO (CL-PSO)

CL-PSO [26] improves the efficiency of PSO by removing the need for using globally best position g in the velocity update Eq.
(1). This is acheived by performing the velocity update as:
v(t) = v(t) + c · rk ◦ q(t—1) — x(t—1)	(11)

vicinity after each PSO iteration.
In the C-PSO implementation used in this study, linearly decreasing inertia weight factor mechanism (5) was used, together with standard PSO velocity (1) and position updating (2).
After each PSO iteration, the C-PSO algorithm reserves the top
n/5 of all particles sorted by fitness, where n is the total number
where c is the method coefficient, and q denotes the k-th particle’s ‘‘exemplar” position.
The ‘‘exemplar” positions qk = qk,1, qk,2, .. . , qk,D  are obtained
as an assortment of own and other particles’ personal best values
p, as:
( pl d	for r < Pk

of particles. CLS is performed on the best particle of the entire swarm (g), while the other 4n/5 particles are randomly generated
qk,d =
,
pk,d  otherwise
, for d = 1, 2, .. . , D.	(12)

(reinitialized).
In order to use the chaotic logistic map needed for CLS, opti- mization variables must be mapped to chaotic variables since they
must be in a predefined range. Hence for each x ∈ g the optimiza- tion variables x ∈ (xmin, xmax) (with xmin and xmax being their lower and upper bounds) are converted to chaotic variables n(0) ∈ ⟨0, 1⟩ by:


n(0) =  x — xmin  .	(8)
xmax — xmin
After this conversion, CLS is performed by iterating on the logistic
map defined as:
n(i+1) = l · n(i) 1 — n(i)	(9)
where i ∈ {0, 1, ... , 9} is the iteration number of the CLS. Starting value n(0) R {0.25, 0.5, 0.75} and the choice of l = 4 ensure chaotic behavior of the equation. After each CLS iteration, a newly discov-
ered position needs to be mapped back to the original search space:
Here r is a randomly generated number r ∈ [0, 1] and Pk is the learn- ing probability for the k-th particle, calculated by use of the follow-
ing formula:
10(k—1)
n—1  —
k	e10 — 1
Each ‘‘exemplar” particle, denoted by l in (12), is selected by tourna-
ment selection with tournament size being equal to two.
qk = pk), a variable d is chosen randomly from {1, 2, ... , D} and the qk,d = pl,d is applied with l determined by size-2 tournament If it happens that all ‘‘exemplars” of a particle are its own (i.e.
selection.
Regarding inertia handling, CL-PSO also uses linearly decreasing inertia weight, as per (5).

Benchmark testing

For each of the selected PSO variants the performance of a pure variant was compared with the performance of the languid version

x = x

min
+ n(i+1)(x

max
— xmin
)	(10)
of the variant. This was executed by use of an extensive benchmark testing program, based on the CEC 2014 test. CEC 2014 test was

and the new solution gCLS = (x1, x2, x3, .. . xD) is evaluated. If f gCLS < f (g), the gCLS position is adopted as new g, otherwise the CLS loop (9) is continued until the maximum number of CLS itera-
tions has been reached (i < 10).
Implemented in this manner, chaotic local search serves as an effective enhancement of the PSO method.

4.4. Dynamic Multiswarm PSO (DMS-PSO)

Dynamic multiswarm PSO (DMS-PSO) [25] represents a certain radicalization of the lbest PSO idea. In DMS-PSO the swarm is divided into several subswarms, i.e. neighborhoods of fully con- nected particles with no connections between the neighborhoods. During the optimization process the subswarms are dynamically reorganized so as to avoid premature convergence.
subswarm consists of max(5, n/10) randomly chosen particles, so In the DMS-PSO implementation used for this research, each as to avoid miniscule subswarms, while allowing for linear sub-
swarm division for larger swarm size n. Furthermore, the used DMS-PSO implementation does not use fixed or random regroup- ing periods as originally proposed in [25], but regroups the sub- swarms at every iteration at which the entire swarm failed to improve its best position.
DMS-PSO employs a very logical technique for handling PSO topology, which in turn shows good performance, while still allow- ing for possible improvements via advanced inertia handling such as PFIDI.
designed for benchmarking of real-parameter single objective opti- mization algorithms and comprises 30 test functions, most of which have randomly shifted global optima, while all are randomly rotated (see [27] for details). The test consists of:
unimodal functions (F1, F2, and F3)
shifted multimodal functions (F4, F5, .. ., F16)
hybrid functions based on unimodal functions and shifted mul- timodal functions (F17, F18, .. ., F22)
composition functions based on unimodal functions, shifted multimodal functions and hybrid functions (F23, F24, .. ., F30).

There are sufficient arguments for using CEC 2014 test for the testing of the effects of LPD on PSO. Firstly, CEC 2014 test was not designed specifically for the purpose of testing the effects of LPD, PFIDI, nor PSO in general, hence no inherent bias towards the tested methods and techniques is to be expected. Secondly, the extent of CEC 2014 test should provide strong evidence on the existence of any benefits of LPD for PSO accuracy.
dimensionalities,   namely   D   ∈  {10,  20,  50}. The experimental tests were conducted on three search space
In order to minimize any risks of software bugs, the selected
PSO variants were implemented as modifications of the ‘standard PSO’ code [23,28], which was modified only as much as was neces- sary for implementing the used variants.
was applied and neighborhood radius K = 3 was used (meaning In the variants which allow for a lbest version, random topology that each particle has a neighborhood of K other randomly chosen



particles). Furthermore, in all variants which allowed for this, best- of-swarm fitness value was checked at every iteration and neigh- borhood randomization was triggered whenever best-of-swarm fitness value failes to improve (as implemented in [23]).

Preliminary testing of LPD effects on selected PSO variants

As a first phase of the benchmark testing, the overall effects of the implementation of Languid Particle Dynamics on the used PSO variants were assessed.
c = c1 = c2), as well as the choice between gbest and lbest PSO real- Considering that swarm size n, PSO coefficients w0 and c (where istically need to be treated as problem-specific, it was decided to
use the best performing method parameters for standard PSO on CEC 2014 test functions, as they were determined in previous research [4]. Table 1 gives these parameters for the three search space dimensionalities. It should be noted that these parameters were used as the tested PSO variants allowed, i.e. w0 values were used for linearly decreasing inertia weight as explained in Section 4.1, listed c values were not used for TVAC-PSO and gbest/lbest versions were not used for CL-PSO and DMS-PSO.
Although the parameters given in Table 1 are optimal for stan- dard PSO and not necessarily also for the PSO variants used in this article, it is reasonable to believe that they are at least near- optimal for the used PSO variants. In light of this, it was only sen- sible to use them in this research, while admitting that the usage of best performing parameters is not fundamental for testing the effects of LPD.
For comparing the accuracy of the selected PSO variants with the accuracy of their respective sub-variants enabled with LPD, best-of-swarm fitness errors e were used, computed with 104D function evaluations (as proposed by the CEC 2014 test [27]):
with eXL = eX yielding a = 0. Note that the definition of (15) is extended so that a = 0 also for eX = eXL =0.
selected PSO variants for D ∈ {10, 20, 50} are given in Table 2. Here The results of the preliminary testing of the effects of LPD on functions f ∈ {F1, F2, ... , F30} for a selected PSO variant X and NL aavg represents the average a-value, obtained across all test represents the number of test functions with a > 0, i.e. the number
of functions on which the languid variant XL outperformed the corresponding pure variant X.
Additionally, statistical analysis of the differences between the results of variant X and the results of the corresponding variant XL  was  conducted  for  each  test  function,  on  every
D ∈ {10, 20, 50}. The differences of each of the two corresponding
pairs of samples comprising 1000 computational runs were
checked for statistical significance. If normality of both samples’ distribution was confirmed (via Shapiro-Wilk test), the p-values were obtained by use of one-sided two-sample t-test, otherwise Wilcoxon rank-sum test was used for test functions with non- normal distributions. The number of functions on which the X vari- ant  significantly  outperforms  the  XL  variant  (hypothesis
H1 : eXL < eX , p < 0.05) is given in Table 2 as NL.
A more comprehensive overview of the obtained results is given separately in the Supplementary Material of this article, which contains additional tables with a breakdown of a-values and p-
values across all 30 test functions.
The results given in Table 2 allow for several points. First of all, positive values of aavg for all variants except TVAC-PSO indicate that, in principle, PSO generally benefits from the implementation
of LPD (this also corroborates previous research [4]). Moreover, for some of the variants (LDIW-PSO and CL-PSO) the improvement in method accuracy is quite consistent and strong. On the other hand, even for the variants whose overall accuracy experienced smaller improvement (C-PSO and DMS-PSO) or even a deterioration

e = f
best
— f .	(14)
(TVAC-PSO), a benefit is still visible for a considerable number of test functions. Specifically, note in Table 2 that generally NL P 14

Here f
best
stands for final best-of-swarm fitness value, averaged
and Nb L P 11, with the exception of TVAC-PSO (NL P 8, Nb L P 5)

across 1000 computational runs, while f I stands for known global minimum of goal function f.
Furthermore, so as to provide a relative comparison of the selected methods’ performance, a dimensionless rating a is used [4]:
and C-PSO on D = 10 (NL = 8). This means that there exists a rather wide class of optimization problems for which it is reasonable to
expect that the employement of LPD will produce an improvement in PSO accuracy.
It may be also interesting to note that the usefulness of LPD

a	 eX — eXL 
15)
mostly increases with the rising of search space dimensionality,

= 1 e + e  ,	(
indicating that PFIDI techniques may especially be useful for opti-



where eX and eXL represent e values for a specific pure PSO variant
X ∈ { LDIW-PSO, TVAC-PSO, C-PSO, DMS-PSO, CL-PSO} and its
corresponding languid variant XL ∈ {L-LDIW-PSO, L-TVAC-PSO, L-C-PSO, L-DMS-PSO, L-CL-PSO}. A measure of this kind is easy to perceive (a > 0 means that languid variant performed better than
pure variant and vice versa) and may reasonably be averaged across
method score, while its values stay confined to the interval [—2, 2] test functions and then used as a bulk value representing overall

Detailed testing of TVAC-PSO and CL-PSO

Keeping in mind that PSO parameters should best be under- stood as problem-related, in order to conduct a comprehensive analysis of the effects of LPD a PSO parameter space exploration procedure was conducted. However, due to substantial computing resources needed for such procedure, only a subselection of the


Table 2
Preliminary results of testing Languid Particle Dynamics.
Variant	D = 10	D = 20	D = 50

aavg	NL
Nb L
aavg	NL
Nb L
aavg	NL
Nb L





NL number of functions where XL variant performs better than pure X variant.
Nb L number of functions where XL variant performs significantly better than pure X variant.



variants used in the preliminary test was included in the detailed testing. In an attempt to ‘encompass’ the preliminary test results (Table 2), TVAC-PSO and CL-PSO were chosen because they have shown to gain the least (in the former case) and the most (in the latter case) from introducing LPD.
In the detailed testing, the chosen variants’ performance was tested again on the previously used test functions, although now on a range of PSO parameter combinations. By removing the possi- bly crucial problem of PSO parameter tuning, it is possible to assess the performance of each variant in a more rigorous manner. Detailed testing was performed on all combinations of parameters defined by discrete values of swarm size n, inertia weight w0 and
PSO coefficient c (where c = c1 = c2), on both gbest and lbest ver-
sions of the PSO method (Table 3). Note that c is varied only for
CL-PSO and PSO version (topology) is only varied for TVAC-PSO. Given values of method parameters produce a total of 220 and
770 combinations for TVAC-PSO and CL-PSO respectively, all of which were tested on the 30 CEC 2014 test functions, and for the
three search space dimensionalities D ∈ {10, 20, 50}. For each com-
bination of given parameter values, the optimization result was
obtained across 100 computational runs, for both pure TVAC-PSO and CL-PSO variants and the corresponding L-TVAC-PSO and L- CL-PSO variants. (Although CEC 2014 test [27] proposes using 51 computational runs, authors believe that using 100 computational runs considerably stabilizes the results and makes them signifi- cantly more reliable.) On the whole a total of 5.94 million


Table 3
Method parameters for detailed benchmark testing.
n	10, 15, 20, 25, 30, 40, 50, 60, 80, 100(for D = 10)
20, 25, 30, 40, 50, 60, 80, 100, 120, 140(for D = 20)
30, 40, 50, 60, 80, 100, 120, 140, 170, 200(for D = 50)
w0	0.50, 0.55, 0.60, .. . , 0.95, 1.00
c (CL-PSO)	0.50, 0.75, 1.00, 1.25, 1.50, 1.75, 2.00
version (TVAC-PSO) gbest, lbest

optimization runs per search space dimensionality were executed, making the detailed testing phase of the benchmark testing a con- siderably large computational effort.
So as to provide some initial statistical overview of the effects of LPD on the accuracy of the tested PSO variants, histograms of final a-values (i.e. a-values obtained after the last iteration of the opti-
mization process) are given in Fig. 2. These histograms are a repre- sentation of the aggregated results of the computations obtained with all used parameter combinations and all test functions.
The histograms in Fig. 2 clearly show that implementing LPD in TVAC-PSO and CL-PSO produces measurable improvements in overall method accuracy. As expected on the basis of the prelimi- nary phase of benchmark testing (Section 5.1), L-CL-PSO yields much stronger improvements over pure CL-PSO than does L- TVAC-PSO over pure TVAC-PSO. Nevertheless, considering the neg- ative preliminary results of TVAC-PSO, it is particulary important that it also demonstrated some improvement in accuracy in the detailed testing. Furthermore, the benefits for accuracy due to LPD consistently increase with rising search space dimensionality, for both variants.
It may be also interesting to note that for some of the method parameter configurations LPD produced dramatic improvements in method accuracy, which is evident by the manifestation of upticks in rightmost bin of the histograms in Fig. 2. Most probably this means that for both PSO variants some specific parameter con- figurations exist which would normally produce very weak results, and the implementation of LPD serves as a ‘fix’ for some of these situations. Considering that fine-tuning optimization methods in real-world optimization problems is rarely feasible, any modifica- tion that reduces the optimization method’s sensitivity to its parameters is generally useful.
As a next step in the testing procedure, from the 220 and 770 method parameter combinations used for the detailed benchmark testing of TVAC-PSO and CL-PSO, for each of the used test functions and dimensionalities the best-performing method setups of the pure variant and the corresponding languid variant were extracted



	



Fig. 2. Histograms of final a-values for the detailed testing of TVAC-PSO and CL-PSO.



and their results compared. In other words, the selected PSO vari- ants and their LPD modifications were fine-tuned in order to com- pare their performance, eliminating the question of used method parameters adequacy for each test function or dimensionality.
A comprehensive overview of the obtained results, together with the statistical analysis, is given separately in the Supplemen- tary Material of this article, which includes a breakdown of best- performing method parameters, method accuracy, and p-values across the 30 test functions.
The results of these tests may provide some insight into the type of fitness functions which are particularly suitable or not suit- able for LPD. With only statistically significant cases taken into account, it may be noted that L-TVAC-PSO seems to be especially successful on test functions F8-F13 and F16. As for L-CL-PSO, it appears to produce best results on a wider range of test functions, namely: F1, F4, F8, F10-F12, F15, F16, F18, F19, F22, F25, F27 and
F29. This indicates that LPD may be most favorable for shifted mul- timodal functions (F4-F16). When implemented in CL-PSO it may also be well-suited for various hybrid or composite types of func- tions, as well as some simple unimodal functions (e.g. F1, which is an elliptic paraboloid).
A summary of the results of the detailed testing of TVAC-PSO versus L-TVAC-PSO and CL-PSO versus L-CL-PSO is given in Table 4, which allows for several observations. Firstly, although aavg does mostly increase with D, when comparing fine-tuned PSO variants there are no clear indications that the advantages of languid vari-
ants remain equally strong after fine-tuning the method parame- ters. However, the implementation of LPD provides significant improvements in method accuracy for up to 50% of the CEC 2014 test functions, showing that there is a wide class of optimization problems which are well-suited for languid PSO methods. More- over, LPD significantly deteriorated TVAC-PSO and CL-PSO accu-
a topological optimization problem, albeit ‘hidden’ in the continuous-variable optimization of pipe diameters. The topologi- cal layer of the problem is especially difficult for PSO, unlike for some other approaches, such as [32].

6.1. Optimization problem definition

The object of the optimization was Cˇepic´ polje (Croatia) irrigation field which consists of 10 consumer nodes with different flow requirements (1200 to 3600 l/min) and minimum pressure of 60 mH2O and a pump with a flow requirement of 22450 l/min.
problem space size D = 151). The goal is to find the optimal pipe The initial network consists of 89 nodes and 151 pipes (i.e. network layout which yields minimal construction and operation
costs by optimizing diameters of pipe network segments.
with the bounds constraint di ∈ [0, 850] mm. It is important to note The problem design vector consists of each segment diameter di tive, i.e. it is removed from the network. The goal function C(d) is that any pipe with diameter less than 10 mm is considered ineffec- defined as the total cost of the pipe network, comprising the sum of
the  installation  cost  CI  and  exploitation  cost  CE,  i.e.
C(d) = CI(d) + CE(d).
The cost of exploitation is based on the operating hydraulic
characteristics of a pressurized pipe network. Hydraulic analysis is performed with EPANET (water distribution system modeling software package developed by the USA Environmental Protection Agency), in order to compute the required pump pressure head. The exploitation cost represents the cost of electricity in the exploitation period. Calculation of electrical power used by the pump is defined as:
Q · q · g · h

racy for never more than 33% of the test functions, making LPD a	P =
technique with low liability for possible impairment of PSO
g	(16)

performance.

Engineering application test-case

Since PSO optimizers are often used in engineering optimization (e.g. [29,30]), an engineering application test-case was also used for comparison of pure and LPD-enabled PSO variants, in order to test the proposed LPD technique on a practical engineering problem.
The test-case is a water distribution system design optimization problem [31] where network segment pipe diameters are dimen- sioned with respect to installation and exploitation cost. This is a fairly hard optimization problem, due to the fact that it is partly
where Q is volume flow rate, q is water density, g is the gravita- tional acceleration constant, h is the pump pressure head and g is the pump efficiency. The pump pressure head h is calculated so as
to guarantee the needed pressure at all consumer nodes. Finally, the cost of exploitation is then defined as:
CE = 103 · P · T · cE	(17)
with T = 175200 h being the period of exploitation and cE = 0.1 €/ (kWh) representing the price of electricity.
Cost of installation is defined by the price of pipes and network construction. It is assumed that the price of construction is propor- tional to that of pipes. The total cost of network construction is the sum of the costs of each network segment:



Table 4
Summary of the detailed testing results.


Variant	D	aavg	NL
TVAC-PSO






Nb L




When comparing fine-tuned methods
NX






Nb X






Nb 0





CL-PSO
10	0.048	13	4	16	7	19
20	0.135	10	9	17	10	11
50	0.216	18	12	11	9	9


10	0.230	21	15	8	6	9
20	0.341	18	13	10	5	12
50	0.242	15	13	14	10	7



NL number of functions where XL variant performs better than pure X variant.
NL number of functions where XL variant performs significantly better than pure X variant.
NX number of functions where pure X variant performs better than XL variant.
NX number of functions where pure X variant performs significantly better than XL variant.
Nb 0 number of functions with no significant difference in performance of XL and pure X variant.


Table 5
Results of the engineering application test-case.


* t-test
† Wilcoxon rank-sum test
CI = kC ·	ci · li	(18)
i
where ci is the unit price of the i-th segment in €/m defined as
( 0.0003 · d2 + 0.0169 · di + 12.708 if di P 10mm,



50 optimization runs were conducted, each with 2 · 105 function used: n = 200, w0 = 0.8, c = 1.00, lbest version. evaluations. As for the PSO parameters, the following setup was



kC is the construction cost coefficient (which is defined as kC = 2 in this case), and li is the length of i-th segment in m.
The optimization process was performed with the 10 tested PSO variants (five X variants and five XL variants). For each PSO variant


Fig. 3. One of the solutions in the engineering application test-case featuring the optimal pipe network configuration (pipe diameters given in mm).
The results of the conducted optimization on the five selected PSO variants are given in Table 5. These include p-values obtained by a statistical analysis performed with the same methods as in the previous tests, with the p-values for which the H1 hypothesis have
been proven (p < 0.05) printed in boldface.
These results show that two XL variants have significantly out- performed their X counterparts (L-TVAC-PSO and L-CL-PSO) and also two X variants have achieved the same over their XL counter- parts (LDIW-PSO and DMS-PSO), with C-PSO achieving a statisti- cally non-significant win over L-C-PSO.
Fig. 3. The cost (fitness) of this solution is C = 8.768 · 106 € and the The best result obtained across the 10 PSO variants is shown in optimal pipe diameters are given in the figure. This network layout
has been found only five times (out of 500 optimization runs total), which illustrates the severe difficulty of this test-case. It may be interesting to note that, although TVAC-PSO was the only variant which manifested net negative effects of LPD in the preliminary testing (Table 2), it is exactly L-TVAC-PSO which is the most accu- rate variant in this test (see Table 5) and the only variant which managed to reach the optimum pipe network configuration (Fig. 3).
The results of the engineering application test case allow for the conclusion that the benefits of LPD are not limited only to aca- demic benchmark testing of PSO. Real-world optimization prob- lems solved by PSO could benefit from LPD as well, although it remains to be investigated exactly what kind of optimization prob- lems are typically suited for LPD-enabled PSO.

Conclusion

As a continuation of previous research, the effects of enhanced particle ‘self-awareness’ in terms of Personal Fitness Improvement Dependent Inertia (PFIDI) on the accuracy of a selection of PSO variants were explored. The PFIDI method used for this was Lan- guid Particle Dynamics (LPD), which makes inertia a conditional term in PSO velocity update, enabled only for particles which man- aged to improve their position in the previous iteration.
Five PSO variants were selected for testing the effects of LPD: standard PSO with linearly decreasing inertia weight (LDIW-PSO), time varying acceleration coefficients PSO (TVAC-PSO), Chaotic PSO (C-PSO), Dynamic multiswarm PSO (DM-PSO) and Compre- hensive learning PSO (CL-PSO). Each of the selected variants was tested in preliminary benchmark testing on 30 test functions
(CEC 2014) and three dimensionalities D ∈ {10, 20, 50} by compar-
ing their accuracy with the accuracy of the corresponding languid



variant, where all but one have responded positively. The best and worst performing variants (namely, CL-PSO and TVAC-PSO) were additionally scrutinized in the detailed testing phase, which included testing across a spectrum of method parameter configu- rations, as well as the comparison of fine-tuned methods and their languid counterparts. Finally, the obtained results were statisti- cally validated against the significance level of 0.05.
The results have shown that both TVAC-PSO and CL-PSO, and by extension probably all five selected PSO variants, gain visible advances in accuracy when enhanced with LPD. The tested languid PSO variants produce better accuracy over the corresponding pure PSO variants in 33–70% of test functions, with statistically signifi- cant improvements in accuracy demonstrated for 13–50% of test functions. With the rising of problem dimensionality, the benefits on accuracy mostly rise as well, indicating that PFIDI techniques may be particularly useful for high-dimension problems. The benchmark testing procedure included 30 test functions, of which multimodal functions of relatively modest complexity have shown to be most suitable for LPD.
The implementation of LPD also somewhat stabilizes the method performance with regards to method parameters, making it more robust and reliable, which is especially useful in real-world optimization. Furthermore, considering that at any time not more a third of test functions have shown to yield poorer performance after implementation of LPD means that it would be possibly rea- sonable for many PSO variants to have LPD implemented by default, at least when used in general-purpose optimization codes. In order to provide a more realistic challenge for the LPD- enabled PSO variants, an engineering application test-case was also used for testing. In this test two of the PSO variants showed statis- tically significant better performance when used with LPD, and two other variants showed the opposite. Although somewhat inconclusive, these results do corroborate that positive effects of LPD are real and achievable. It is also important to point out that the best result of all was consistently achieved by LPD-enabled
TVAC-PSO.
Although the effects of Languid Particle Dynamics are predom- inantly positive, some limitations to the benefits of using it in PSO still do exist. Specifically, LPD seems to facilitate convergence which may be harmful for problems which demand persistent glo- bal search. Secondly, the conducted extensive testing indicates the existence of a class of optimization problems for which PSO cannot profit from LPD. The properties of the fitness function which would define this class of problems remain to be discovered.
There remain potentially even more interesting lines of research on PFIDI waiting to be explored. Fundamentally, these would include more efficient methods of particle-wise fitness- based inertia handling, which would probably be based on a more sophisticated inertia weight calculation. The next step in this research would be the generalization of PFIDI in a way which would allow for continuous dynamic inertia adaptation based on personal fitness improvement. Preliminary research in this direc- tion has shown that some formulations of inertia weight defined as a function of both personal (particle-wise) and global (swarm- wise) fitness improvement enhance PSO efficiency even more than basic LPD. Finally, as it has been shown that the benefits of LPD fairly consistently increase with the rising number of variables, future research will include testing a PFIDI technique on large- scale optimization problems (D P 1000).


Acknowledgments

This research is supported in part by the University of Rijeka, Croatia under the projects number uniri-tehnic-18-195 and 17.10.2.1.04.
Appendix A. Supplementary data

Supplementary data associated with this article can be found, in the online version, at https://doi.org/10.1016/j.eij.2019.11.005.


References

Kennedy J, Eberhart R. Particle swarm optimisation. Proceedings IEEE International Conference on Neural Networks, vol. IV. Piscataway, NJ: IEEE Service Center; 1995. p. 1942–8.
Eberhart R, Kennedy J. A new optimizer using particle swarm theory. In: Micro Machine and Human Science, 1995. MHS’95. Proceedings of the Sixth International Symposium on, IEEE; 1995. p. 39–43..
Imran M, Hashim R, Khalid NEA. An overview of particle swarm optimization variants. Proc Eng 2013;53:491–6.
Druzˇeta S, Ivic´ S. Examination of benefits of personal fitness improvement dependent inertia for particle swarm optimization. Soft Comput 2016:1–14. doi: https://doi.org/10.1007/s00500-015-2016-7.
Braendler D, Hendtlass T. The suitability of particle swarm optimisation for training neural hardware. In: Hendtlass T, Ali M, editors. Developments in Applied Artificial Intelligence. Lect Notes Comput Sci., vol. 2358. Berlin Heidelberg: Springer; 2002. p. 190–9. doi: https://doi.org/10.1007/3-540- 48035-8_19.
Veeramachaneni K, Peram T, Mohan C, Osadciw LA. Optimization using particle swarms with near neighbor interactions. In: Proceedings of the 2003 international conference on Genetic and evolutionary computation: PartI, GECCO’03. Berlin, Heidelberg: Springer-Verlag; 2003. p. 110–21. URL: http:// dl.acm.org/citation.cfm?id=1761233.1761244.
Bansal J, Singh P, Saraswat M, Verma A, Jadon SS, Abraham A. Inertia weight strategies in particle swarm optimization. In: Nature and Biologically Inspired Computing (NaBIC), 2011 Third World Congress on. IEEE; 2011. p. 633–40.
Clerc M. Think locally, act locally: the way of life of cheap-pso, an adaptive pso, Tech. rep., Technical Report; 2001.http://clerc.maurice.free.fr/pso..
Liu B, Wang L, Jin Y-H, Tang F, Huang D-X. Improved particle swarm optimization combined with chaos. Chaos Solitons Fractals 2005;25 (5):1261–71.
Raghavendra R, Dorizzi B. A novel adaptive inertia particle swarm optimization (aipso) algorithm for improving multimodal biometric recognition. In: Hand-Based Biometrics (ICHB), 2011 International Conference on. p. 1–6. doi: https://doi.org/10.1109/ICHB.2011.6094299.
Cai X, Cui Z, Zeng J, Tan Y. Performance-dependent adaptive particle swarm optimization. Int J Innovative Comput Inf Control 2007;3(6 B):1697–706.
Dong C, Wang G, Chen Z, Yu Z. A method of self-adaptive inertia weight for PSO. In: Computer Science and Software Engineering, 2008 International Conference on, vol. 1; 2008. p. 1195–1198.https://doi.org/10.1109/CSSE.2008. 295..
Suresh K, Ghosh S, Kundu D, Sen A, Das S, Abraham A. Inertia-adaptive particle swarm optimizer for improved global search. In: Intelligent Systems Design and Applications, 2008. ISDA’08. Eighth International Conference on, vol. 2, IEEE; 2008. p. 253–58..
Feng C, Cong S, Feng X. A new adaptive inertia weight strategy in particle swarm optimization. In: Evolutionary Computation, 2007. CEC 2007. IEEE Congress on, IEEE; 2007. p. 4186–190..
Zhang X, Du Y, Qin G. Adaptive particle swarm algorithm with dynamically changing inertia weight. J Xian Jiaotong Univ 2005;39:1039–42.
Yang X, Yuan J, Yuan J, Mao H. A modified particle swarm optimizer with dynamic adaptation. Appl Math Comput 2007;189(2):1205–13.
Rezazadeh I, Meybodi MR, Naebi A. Adaptive particle swarm optimization algorithm for dynamic environments. In: Advances in swarm intelligence. Springer; 2011. p. 120–9.
Deep K, Arya M, Bansal JC. A non-deterministic adaptive inertia weight in pso. In: Proceedings of the 13th annual conference on Genetic and evolutionary computation, GECCO ’11. New York, NY, USA: ACM; 2011. p. 1155–62. doi: https://doi.org/10.1145/2001576.2001732.
Shi Y, Eberhart R. A modified particle swarm optimizer. In: Evolutionary Computation Proceedings, 1998. IEEE World Congress on Computational Intelligence., The 1998 IEEE International Conference on, IEEE; 1998. p. 69–73..
van den Bergh F. An analysis of particle swarm optimizers. Pretoria: University of Pretoria; 2001 (Ph.D. thesis) submitted.
Bratton D, Kennedy J. Defining a standard for particle swarm optimization. In: Swarm Intelligence Symposium, 2007. SIS 2007. IEEE, IEEE; 2007. p. 120–27..
Ratnaweera A, Halgamuge SK, Watson HC. Self-organizing hierarchical particle swarm optimizer with time-varying acceleration coefficients. IEEE Trans Evolut Computat 2004;8(3):240–55.
PSC. Particle swarm central, standard PSO 2006; 2006.http:// www.particleswarm.info/Standard_PSO_2006.c..
Shi Y, Eberhart RC. Empirical study of particle swarm optimization. In: Proceedings of the 1999 Congress on Evolutionary Computation-CEC99 (Cat. No. 99TH8406), vol. 3, 1999, p. 1950.https://doi.org/10.1109/CEC.1999. 785511..
Liang J-J, Suganthan PN. Dynamic multi-swarm particle swarm optimizer with local search. In: 2005 IEEE Congress on Evolutionary Computation, vol. 1, IEEE; 2005. p. 522–28..



Liang JJ, Qin AK, Suganthan PN, Baskar S. Comprehensive learning particle swarm optimizer for global optimization of multimodal functions. IEEE Trans Evolut Comput 2006;10(3):281–95.
Liang J, Qu B, Suganthan P. Problem definitions and evaluation criteria for the CEC, special session and competition on single objective real-parameter numerical optimization. Singapore: Computational Intelligence Laboratory, Zhengzhou University, Nanyang Technological University; 2014. Zhengzhou China and Technical Report.
Clerc M. Standard particle swarm optimisation from 2006 to 2011; 2012. http://clerc.maurice.free.fr/pso/SPSO_descriptions.pdf..
Chatterjee S, Sarkar S, Hore S, Dey N, Ashour AS, Balas VE. Particle swarm optimization trained neural network for structural failure prediction of
multistoried RC buildings. Neural Comput Appl 2017;28(8):2005–16. doi: https://doi.org/10.1007/s00521-016-2190-2.
Jagatheesan K, Anand B, Samanta S, Dey N, Ashour AS, Balas VE. Particle swarm optimisation-based parameters optimisation of PID controller for load frequency control of multi-area reheat thermal power systems. Int J Adv Intell Paradigms 2017;9(5–6):464–89.
Ivic´ S, Staver I, Kranjcˇevic´ L. PSO optimizacija mrezˇe cjevovoda s obzirom na troškove instalacije i eksploatacije. In: Zbornik radova Šestoga susreta Hrvatskoga društva za mehaniku; 2014. p. 85–90..
Ivic´ S, Grbcˇic´ L, Druzˇeta S. Cooperative random walk for pipe network layout optimization. Int J Appl Eng Res 2016;11(4):2839–47.
