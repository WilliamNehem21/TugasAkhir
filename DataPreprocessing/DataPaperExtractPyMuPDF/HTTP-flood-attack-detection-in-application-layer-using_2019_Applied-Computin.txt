Original Article
HTTP ﬂood attack detection in application layer using machine learning
metrics and bio inspired bat algorithm
Indraneel Sreeram ⇑, Venkata Praveen Kumar Vuppala
Department of CSE, St. Ann’s College of Engineering & Technology, Chirala, India
a r t i c l e
i n f o
Article history:
Received 13 May 2017
Revised 9 October 2017
Accepted 14 October 2017
Available online 18 October 2017
Keywords:
Denial of Service (DoS) attacks
Distributed DoS (DDoS) attacks
Application Layer DDoS (APP-DDoS)
Bio inspired approaches
a b s t r a c t
The internet network is mostly victimized to the Distributed Denial of Service (DDOS) attack, which is one
that intentionally occupies the computing resources and bandwidth in order to deny that services to
potential users. The attack scenario is to ﬂood the packets immensely. If the attack source is single, then
the attack is referred as denial of service (DOS) and if attack is sourced from divergent servers, then it is
referred as DDOS. Over a decade many of the researchers considered the detection and prevention of
DDOS attack as research objective and succeeded to deliver few signiﬁcant DDOS detection and preven-
tion strategies. How fast and early detection of DDOS attack is done in streaming network transactions is
still a signiﬁcant research objective in present level of internet usage. Unfortunately the current bench-
marking DDOS attack detection strategies are failing to justify the objective called ‘‘fast and early detec-
tion of DDOS attack”. In order to this, in this paper we devised a Bio-Inspired Anomaly based application
layer DDoS attack (App-DDOS Attack) detection that is in the aim of achieving fast and early detection.
The proposed model is a bio-inspired bat algorithm that used to achieve the fast and early detection of
the App-DDOS by HTTP ﬂood. The experiments were carried out on bench marking CAIDA dataset and
the results delivered are boosting the signiﬁcance of the proposed model to achieve the objective of
the paper.
� 2017 The Authors. Production and hosting by Elsevier B.V. on behalf of King Saud University. This is an
open access article under the CC BY-NC-ND license (http://creativecommons.org/licenses/by-nc-nd/4.0/).
1. Introduction
Global network of computers interconnected through different
media using a standard protocol is called internet. Modern human
beings rely on the Internet for their education, trade, socialization
and entertainment, among many other important aspects of
human life. Information sharing, E-commerce and entertainment
have taken a new dimension. Evidently, the Internet is the biggest
revolution in the computing and communications world. Web
threats pose a broad range of risks, including ﬁnancial damages,
identity theft, loss of conﬁdential information or data, theft of net-
work resources, damaged brand/personal reputation, and erosion
of consumer conﬁdence in e-commerce and online banking.
DoS attack is an intentional attempt by malicious users to com-
pletely disrupt or degrade the availability of services/resources to
legitimate users. Distributed denial of service (DDoS) attack is a
form of DoS attack which slowdowns the server in responding to
the client/refuses the client request. Now-a-days, the impact of
DDoS attacks on internet security is growing excessively. In
general, this type of attack is launched explicitly from a collection
of compromised systems known as botnet by an attacker. The main
goal of such attack is to exhaust server resources such as CPU,
I/O bandwidth, sockets and memory etc. As the result, the
resources available to other normal users/clients get limited or
sometimes may not be available. The recent familiar victims of
DDOS attack are explored in [1,2] and strategies for successful
attack mitigating are explored in [3].
The DDoS attacks are classiﬁed based on [4,5] into different fac-
tors. On the basis of network protocol stack, DDoS can be further
classiﬁed as Network/transport level and Application level DDOS
attacks.
Network/transport level DDoS attack: These attacks are launched
at half opened connections by using TCP, UDP, ICMP and DNS
protocols. Application level DDoS attack: These attacks typically
consume less bandwidth and are stealthier in nature in comparison
https://doi.org/10.1016/j.aci.2017.10.003
2210-8327/� 2017 The Authors. Production and hosting by Elsevier B.V. on behalf of King Saud University.
This is an open access article under the CC BY-NC-ND license (http://creativecommons.org/licenses/by-nc-nd/4.0/).
⇑ Corresponding author.
E-mail
addresses:
indraneels123@gmail.com,
sreeram.indraneel@gmail.com
(I. Sreeram).
Peer review under responsibility of King Saud University.
Production and hosting by Elsevier
Applied Computing and Informatics 15 (2019) 59–66
Contents lists available at ScienceDirect
Applied Computing and Informatics
journal homepage: www.sciencedirect.com
to volumetric attacks. However, they will have an identical impact
to service as they aim speciﬁc characteristics of well-known appli-
cations like HTTP, DNS, VoIP or simple Mail Transfer Protocol
(SMTP). These attacks are specialize in disrupting legitimate users
services by exhausting the resources. An Application layer DDoS
attack overloads an application server by creating excessive login,
information search or search requests. Application DDoS attacks
are tougher to detect than other forms of DDoS attacks. As the con-
nections are already established, the requests could seem to be
from legitimate users. However, once identiﬁed, these attacks will
be stopped and back-traced to source more simply than the other
varieties of DDoS attacks.
Application Layer DDoS attack is a DDoS attack that sends out
requests
following
the
communication
protocol,
thus
these
requests are indistinguishable from legitimate requests in the net-
work layer .Consequently, traditional defense systems become less
or even not applicable for application layer DDoS attacks which
make use of the asymmetric computation between client and ser-
ver, as they are proper-looking requests from the protocol and
trafﬁc.
Flooding attacks: Flooding attacks are launched in following
ways [5,6,41,42]:
In Reﬂection/Ampliﬁcation based ﬂooding attacks, the attacker
initiates small DNS queries with forged source IP addresses which
provoke a large extent of network trafﬁc. And the DNS response
messages are signiﬁcantly larger than DNS query messages. As
the result, this large extent of network trafﬁc is directed towards
the targeted system to incapacitate it.
HTTP based ﬂooding attacks are classiﬁed into four types: In
Session ﬂooding attack, the Session connection request rates initi-
ated from the attackers are higher the requests generated from
legitimate users. Thus the server resources are exhausted and lead
to ﬂooding.
In Request ﬂooding attack, the attacker send sessions that con-
tains more number of requests than the normal users, which leads
to ﬂooding.
In Asymmetric attack, the attacker sends sessions that contains
larger amount of high workload requests. The ultimate aim of
the attacker is to devour resources like CPU, memory of the server
and degrade it.
In Slow request/response attack, the attacker sends HTTP request
in pieces slowly (one at a time) and the request is not complete ini-
tially. As the result, the server keeps the indulged resources in
waiting stage until it receives the entire data. This attack is catego-
rized into slowloris attack, HTTP fragmentation attack, slow post
attack and slow reading attack.
The major focus of an HTTP ﬂood DDoS attack is toward gener-
ating attack trafﬁc that closely simulates legitimacy of a human
user. Thereby it becomes harder for a victim to differentiate
between legitimate and attack trafﬁc. Because of this type of
attacks, the server becomes unavailable to legitimate users. The
main impact of application layer DDoS attacks are :unusually slow
network performance (opening ﬁles or accessing web sites),
unavailability of a particular web site, inability to access any web
site, dramatic increase in the number of spam emails received.
2. Related work
The recent escalation of application layer DoS attacks have
attracted a signiﬁcant interest of a research community. Since
application layer attacks usually do not manifest themselves at
the network level, they avoid traditional network based detection
mechanisms. As such, security community focused on specialized
application-layer
DoS
attacks
detection
mechanisms.
These
research efforts can be broadly divided into several groups:
application-based, puzzle-based approaches and network trafﬁc
characteristics based.
Application-based techniques are generally geared toward legiti-
mate and thus expected characteristics of an application behavior.
These approaches include detection of deviations from normal
behavior of users browsing web pages [7–10], monitoring charac-
teristics of HTTP sessions [11,12], monitoring a number of clients
requests [13], and analyzing popularity of certain websites [14].
In many of these approaches, rate-limiting serves as a primary
defense mechanism.
Puzzle-based methods are similar to these approaches. However,
instead of monitoring characteristics of particular applications,
puzzle-based methods, as the name suggests, offer a puzzle to
solve and detect potential DoS attack by the ability of the client
at the IP addresses to solve it or by their reaction to the offered
puzzle. One of these techniques is the detection of attacks using
CAPTCHA puzzle [14]. Although this technique may offer a simple
approach to attack detection and mitigation, a number of studies
showed its ineffectiveness [15,16].
Monitoring characteristics of network trafﬁc for application-layer
DoS detection is deﬁned and has been employed for differentiation
of ﬂash crowd and true DoS attacks as per the suggestions made in
[17]. The approach has also found its application in several studies
in a form of IP address monitoring [18,19]. Most of these studies
deal with general type application-layer denial-of-service attacks.
With the introduction of low-rate application-layer DoS attack, a
number of research efforts were focused on various detection
and mitigation techniques [20,21,30,23]. Most of these techniques
focus speciﬁcally on characteristics of incoming network trafﬁc
aiming to reveal/prevent patterns speciﬁc to low-rate DoS attacks.
As such Tang [20] developed a CUSUM-based approach that mon-
itors packet arrival rate. Macia-Fernandez et al. proposed to modify
the implementation of application servers in terms of their pro-
cessing of incoming requests [21].
Fadir Salmen et al. [22] created digital signature of network
phase for ﬂow analysis by using two meta-heuristic approaches.
To investigate the behavior of planned approaches they injected
abnormal trafﬁc and showed improved accuracy in detection DDoS
attacks however the primary model is incapable for detection the
DoS attacks.
In [23,24] the authors proposed a model where the conversa-
tions between server and its client and The practical cyber sur-
roundings that generated realistic trafﬁc patterns of end users
are used to check the proposed approach.
Vijayalakshmi et al. [25] proposed IP Traceback defense mecha-
nism used to detect both network layer and application layer
attacks. The hybrid IP traceback function comprised of Packet
marking (IP address is fragmented and marked), Reconstruction
procedure (two phases: address identiﬁcation and address recov-
ery) and Attacker’s source identiﬁcation using entropy (Entropy
variation is calculated). In mitigation component, when attack is
detected an alert ﬁle generated.
Yu et al. [26] proposed TMH (Trust Management Helmet) which
is light weight mechanism uses trust management to differentiate
normal (legitimate) user and attackers. The DDoS resilient sched-
uler determines which session is granted to forward requests and
when, relying on the scheduling policy and scheduler service rate.
Wen et al. [27] proposed CALD is a defense mechanism to protect
web servers against application layer DDoS attacks that pretend as
ﬂash crowds. The anomalous source IP (identiﬁed based on thresh-
old of entropy) is sent to ﬁlter so that it can defend the attack.
Liu et al. [28] proposed DAT (Defending Systems Against Tilt
DDoS Attacks) is built with two coordinated defenders namely
In/egress ﬁlter (IF) and Behavior Analyzer (BA). The counter-
attack mechanism offers different services to each user depending
on their degree of deviation. Yu et al. [29] proposed DOW (Defense
60
I. Sreeram, V.P.K. Vuppala / Applied Computing and Informatics 15 (2019) 59–66
and Offense Wall) defense mechanism is integration of detection
technology and currency technology . The encouragement model
encourages the session expelled by anomaly detection method if
it is legitimate. That is encourages the users to resend the session
connection requests.
Yang et al. [30] proposed a generalized entropy metrics and
information distance metrics to detect low rate application layer
ddos attack. This is a router based solution and requires control
of all routers in the network. Ying et al. [31] proposed a Group-
Testing based approach. Prasad et al. [32] deﬁned machine learning
strategy called Anomaly based Real Time Prevention (ARTP) of
under rated App-DDoS attacks. The complexity of the process
reduced and attained maximum detection accuracy compared to
other existing machine learning approaches. The results are good
but still it can be improved further.
Senthilnath et al. [33,34] explored the use of ﬁreﬂy algorithm
for clustering. Local Minima is obtained by using the k-means clus-
tering and this drawback was overcome by the ﬁreﬂy algorithm.
The authors used k-means and ﬁreﬂy algorithm for clustering pur-
pose which increases the time complexity and this is not applica-
ble for detecting application layer DDoS attacks in real time
analysis.
In [35,36], the model of Intelligent IDS proposed that based on
ontology. The proposed system thwarts ontology based on encod-
ing scheme, port number, system component, policies, and attack
type and the model is vulnerable to DDOS attacks. In [37] deploy-
ment of wireless sensor networks and mobile ad-hoc networks in
applications poses the threat of various cyber hazards, intrusions
and attacks as a consequence of these networks’ openness.
In [43] the authors investigated the effect of signaling attacks
and storms in mobile networks, focusing on signaling anomalies
that exploit the radio resource control (RRC) protocol in UMTS net-
works. As mobile devices and apps increasingly access the Cloud in
order
to
ofﬂoad
computationally
intensive
or
energy-costly
activities, signaling storms can create heavy overloads that can sig-
niﬁcantly impair system performance and offer very poor quality
of service to users. In [44] authors deﬁned the detection and miti-
gation technique for storms that uses a software counter for each
mobile user, within mobile devices or in signaling system.
From the review of many of the recently proposed models, it is
imperative that there are many constraints in the existing models
that are to be addressed for improving the effective solution for
countering DDoS attacks, categorically the HTTP ﬂood attacks
and more speciﬁcally majority of them are assessing on the session
based. However, in real-time scenario, a user can adapt different
sessions for performing set of requests to ensure order of sequence
or parallel. Considering such limitations, in this paper the proposed
solution is about a bio-inspired strategy for preventing HTTP ﬂood
based DDoS attacks. The objective of the proposed model is to
assess the HTTP transaction is ﬂood or not, which carried out using
multiple metrics extracted based on absolute time interval rather
session. To intensify the search towards the deﬁned metrics, the
bio-inspired strategy of Bat algorithm is adopted.
The
proposed
solution
assesses
the
similarities
of
HTTP
transactions with fair and ﬂood data chosen for training. The
proposed
model
extracts
the
features
from
request
stream
observed during an absolute time interval rather than based on
user sessions and packet patterns. Unique set of features pro-
posed (see Section 3.1). The fast and scalable evolutionary search
technique called Bat algorithm used to perform search to assess
the compatibility during test phase. The cosine metric is used to
identify the signatures of given transactions is used in training
phase. The cosine similarities identify attribute set that imposes
a discernibility relation. The signatures set that imposes the dis-
cernibility is critical since, the signatures having similar context
in both records of normal and ﬂood formats are obsolete to
differentiate,
hence
such
signatures
minimizes
the
process
complexity.
3. HTTP ﬂood attack detection using machine learning metrics
and bio inspired bat algorithm
3.1. The exploration of the metrics considered to train and test the
model
The need of metrics should explore in contrast to packet pat-
terns. The detailed exploration of the constraints observed in exist-
ing contemporary models, which are stated in related work (see
Section 2), it is obvious to state that, in distributed environment,
diversiﬁed packet ﬂow is easy to achieve through minimal time
frames and session time. The arrival rate based on human users,
including a proxy server seems to constitute the non-pattern (ran-
dom) cases. Hence, to challenge this constraint, this manuscript
devised a novel set of metrics, which are derived from absolute
time interval rather than the session time and packet patterns.
3.1.1. Discovering time frame length
Let CS be the cached user sessions CS ¼ fs1; s2; . . . ; sjCjg and each
session is set of transactions given for Training, such that each
request is said to be transaction ft9t 2 si ^ si 2 CSg labeled as N
(normal) or D (DDOS attack). The cached transactions CS is segre-
gated into CSN andCSD, those contains requests labeled as N (nor-
mal) and labeled as D (DDOS attack) respectively.
For each dataset CS (which is the aggregation of CSN and CSD),
order the sessions in ascending order of their initiated time.
Let
SB ¼ fsbðs19s1 2 SCÞ; sbðs29s2 2 SCÞ; . . . ; sbðsjSCj9sjSCj 2 SCÞg
as the set that represents the session begin time of all sessions
belongs toSC.
Let
SE ¼ fseðs19s1 2 SCÞ; seðs29s2 2 SCÞ; . . . ; seðsjSCj9sjSCj 2 SCÞg
as the set that represents the session end time of all sessions
belongs toSC.
Let
SL ¼ fslðs19s1 2 SCÞ; slðs29s2 2 SCÞ; . . . ; slðsjSCj9sjSCj 2 SCÞg
as the set that represents the session life time of all sessions
belongs toSC.
Session life time of a session fsi9si 2 CSg is calculated as follows:
slðsi9si 2 CSÞ ¼ seðsi9si 2 CSÞ � sbðsi9si 2 CSÞ
Find session begin time absolute deviation (Leys, 2013) of SB
sbtAD ¼
ﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃ
PjSBj
i¼1ðhSBi � sbðsi9si 2 SBÞÞ
2
q
jSBj
Here in the above equation, jSBj is the size of SB and hSBi is the aver-
age of SB.
Find session end time absolute deviation of SE
setAD ¼
ﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃ
PjSENj
i¼1 ðhSEi � seðsi9si 2 si 2 SEÞÞ2
q
jSEj
Here in the above equation, jSEj is the size of SE and hSEi is the aver-
age of SE.
Then the absolute time frame atf can be measured as follows
atf ¼ ðhSEi þ seADÞ � ðhSBi þ sbADÞ
Cluster the sessions by rmsdðSBNÞ and rmsdðSENÞ distance
Finding K (count of centroids) value as follows:
I. Sreeram, V.P.K. Vuppala / Applied Computing and Informatics 15 (2019) 59–66
61
Let K be the set of centroids and move session with least session
begin time to the K.
For each session fsi9si 2 SBN ^ i ¼ 2; 3; . . . ; jSBNjg Begin
flag ¼ true
For each session fsj9sj 2 Kg Begin
If
ﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃ
ðsbðsiÞ � sbðsjÞÞ2
q
< sbtADjj
ﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃ
ðseðsiÞ � seðsjÞÞ2
q
< setAD
�
�
then Begin
flag ¼ false
End
End
if ðflagÞ then Begin
K  si
End
End
Then apply K-Means to ﬁnd number clusters with sessions in
approximately similar time frames.
Let C ¼ fc1; c2; . . . ; cKg be the set of clusters of size K.
Then for each cluster fci9ci 2 C ^ i ¼ 1; 2; 3; . . . ; Kg, ﬁnd the time
frame as the elapsed time between least session begin time and
max session end time as follows:
For each fci9ci 2 C ^ i ¼ 1; 2; 3; . . . ; Kg Begin
Let SBNðciÞ ¼ fsb1; sb2; . . . ; sbjcijg be the ascending ordered set of
session begin times of the sessions belongs to cluster ci.
Let SENðciÞ ¼ fse1; se2; . . . ; sejcijg be the descending ordered set of
session end times of the sessions belongs to cluster ci.
Then the time frame tfðciÞ of the cluster ci is measured as
follows:
tfðciÞ ¼
ﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃ
ðse1 � sb1Þ
2
q
Then ﬁnd the average of time frames length observed from all
the clusters as follows
htfðCÞi ¼
PK
i¼1tfðciÞ
K
Further ﬁnd Time Frame Absolute Deviation tfAD observed from
all the clusters as follows
tfAD ¼
ﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃ
PK
i¼1ðhtfðCÞi � tfðciÞÞ
2
q
K
Then ﬁx the time frame tf as the sum of average of time frames
length and Time Frame Absolute Deviation as follows.
tf ¼ htfðCÞi þ tfAD
3.1.2. Session time observed for each absolute time interval
For a given normal or ﬂood transactions set, the total observa-
tion time T will be partitioned into sub intervals of size ati and
measures average session time observed as follows:
Let bT, eT are the respective begin time and end time of the
transaction set observation time T
(a) idx ¼ 0 // absolute time intervals counter set to 0 initially
(b) If ðbT þ atiÞ 6 eT begin
(c) idx ¼ idx þ 1
(d) tsi ¼ 0 // the sum of all possible session intervals is set to 0
initially
(e) ctr ¼ 0 // a counter ﬂag initialized with 0
(f) For each session fsi9si 2 S ^ i ¼ 1; 2; . . . ; jSjg begin
(g) If ðtB 6 bðsiÞ 6 ðtB þ atiÞÞ&&ðtB 6 eðsiÞ 6 ðtB þ atiÞÞ Begin
(h) ctr ¼ ctr þ 1
(i) tsi ¼ tsi þ ðeðsiÞ � bðsiÞÞ
(j) End (of step g)
(k) End (of step f)
(l) asiðtidxÞ ¼ tsi
ctr// absolute session interval asiðtidxÞ of absolute
time interval tidx represented by counter idx
(m) End (of step b)
(n) bT  bT þ ati
(o) If ðbT þ atiÞ < eTÞ Continue the process from step b
3.1.3. Maximum number of Sessions (ms)
All transactions are formed into sessions that can be either ran-
dom or variable timings. Their exists different number of sessions
for each time interval. Count of number of sessions observed in one
time interval gives maximum number of sessions of that time
interval which helps in observing the user sessions to detect appli-
cation layer DDoS attacks.
3.1.4. Page access count (pac)
User will access multiple pages in different sessions of time
interval. How many pages are accessed in one time interval helps
in observing whether the environment in network is malicious or
normal. Page access count of absolute time interval is the number
of web pages accessed in that time interval.
3.1.5. Minimum time interval between two pages (mti)
This feature is calculated for two page requests which are in
sequence of absolute time interval. How frequently the web pages
are accessed by the user and the least amount of time gap that is
required between two pages is measured that will help in observ-
ing the user behavior. Average of unique time gaps between two
page requests which are in sequence of absolute time interval gives
its minimum time interval. Let the unique time gap set of interval
be tg ¼ ftg1; tg2; . . .g
Minimum Time IntervalðmtiÞ ¼
Pjtgj
i¼1tgi
jtgj
3.1.6. Packets observed per each type of packet (PC)
Request can be sent through any of the packets like HTTP, FTP,
SMTP etc., . Each time interval contains different type of packets for
which count of each packet is measured. The deviation in count of
packets from one time interval to another time interval signiﬁes
the attack packet presence in the trafﬁc. p ¼ fp1; p2; p3; . . .g be
the packets observed in that interval and pc ¼ fp1c;p2c;p3c; . . .g
be the number of packets observed for each type of packet.
3.2. The dataset preparation
For given Flood and normal transaction sets CSN and CSD the
record sets absolute time interval (ati) is formed as follows:
Each absolute time interval is considered as one record that
contains the values of attributes in order of session time observed
(see Section 3.1.2), Max number of sessions (Section 3.1.3), page
access count (Section 3.1.4), Minimum Time interval (Section 3.1.5)
and packet observed for each type (sec Section 3.1.6). These attri-
butes will be referred as a set al in further draft of the article.
The number of attributes in each record will be 5 which is the size
of al that can be referred as jalj.
Absolute
time
interval
id
Session
time
observed
Max
number
of
sessions
Page
access
count
Minimum
Time
interval
Packet
observed
for each
type
62
I. Sreeram, V.P.K. Vuppala / Applied Computing and Informatics 15 (2019) 59–66
3.3. Bat approach
Many bio-inspired algorithms exist; bat algorithm belongs to
this class which is based on swarm intelligence. The bat algorithm
uses the echo based location determining behavior of bats to solve
both single objective and multi-objective optimization problems.
In proposed approach bat algorithm is used for classiﬁcation (clas-
sify the attack trafﬁc and normal trafﬁc).
3.3.1. Nature of bats
Bats can ﬁnd their prey and discriminate different types of
insects even in complete darkness. The BAT algorithm is a popula-
tion based evolutionary algorithm where each bat represents a
solution. It is designed according to the echolocation behavior of
the virtual bats. This property enables them to detect the position
of their prey. Frequency modulated signals are used for echoloca-
tion. Bats listen to the sound pulse emitted by them when it
bounces back from the prey or the surrounding objects. As the
bat approaches near its prey, it reduces the loudness of their echo
and increases the rate of the sound pulse.
The three generalized rules for bat algorithms:
(1) All bats use echolocation to sense distance, and they also
guess the difference between food/prey and back-ground
barriers in some magical way.
(2) Bats ﬂy randomly with velocity vi at position xi with a ﬁxed
frequency fmin, varying wavelength and loudness A0 to
search for prey. They can automatically adjust the wave-
length (or frequency) of their emitted pulses and adjust
the rate of pulse emission r depending on the proximity of
their target.
(3) Although the loudness can vary in many ways, it is assumed
that the loudness varies from a large (positive) A0 to a min-
imum constant value Amin.
3.3.2. Classiﬁcation using bat algorithm
An initial population of bats is generated. After initialization
modify the parameters needed for ﬁtness, and subsequently the ﬁt-
ness is evaluated for each bat in population.
Step1: for i = 1:Number Of Iteration
delwt = wt
Step2: for j = 1: n
read Dj
Step3:compute each batj frequency as fj
fj = c1 ⁄ Mean(Dj)
Step4: compute class (object) distance from batj as S object j
Sobject j = fj ⁄ Dj ⁄ delwt
Step5: compute for each class
Ej = Sobject j – 1, update wt = wt-2⁄l⁄Ej
Step6: compute the new position Pj and change pulse rate
controller c1 of Batj
if Ej < Ej-1
Pj = Pj + Ej
c1 = fj + c2 ⁄ Pj ⁄ Ej
end
Step7: end
Step8: calculate the error and update wt
err(i) = Mean(E), wt = wt- delwt
Step9:end
Step10: Plot the error as sigmoid (err)
Step11:Use the above wt and f with testing data
Step12: Print confusion matrix from Sobject j
Step13: Compute percentage of accuracy
Process for generating the classiﬁers is as follows
Step 1 and 2: Initialize the bat population has to be produced.
One record is treated as one bat for which it has any number
of features. Deﬁne the random number between m, T. Where
m is the number of features, and T is the number of classes.
Step 3: Calculate the frequency ﬁ of each bat
fj = c1 ⁄ Mean(Dj)
Where, c1 is the pulse rate controller initially taken as 0.6, it can
change for every iteration.
Step 4: calculate the class (object) distance from each bat.
Step 5: calculate the Ej of each class and update the random
number wt.
Update wt = wt-2⁄l⁄Ej
where, l is the constant number 0.2.
Step 6: now, consider the class of one bat and compare with the
previous class of the bat, if it is less than the other, then calcu-
late the new position Pj and pulse rate controller C1 of that bat.
Now the process has to be repeated with remaining bats.
Step 7: Above process has to be done for remaining all bats.
Step 8: calculate the error and update the random number.
Step 9: Do the next iteration by using the above process until it
reaches the maximum number of iterations.
Prepared dataset of both normal and attack is given as input for
the Bat algorithm individually. For normal dataset, each record is
considered as one bat and compare with the remaining bats to
know how much distance it has to move towards the remaining
bats. This has to be done for all the remaining bats. Updated
records are carried over to next iteration or generation. Maximum
number of iterations has to be performed for getting the accurate
classiﬁers. Once all the iterations are completed, the normal classi-
ﬁer is extracted and marked as normal signature. The same process
is carried for attack training records to get the attack signature.
3.4. Application layer DDoS attack detection
Testing dataset has to be preprocessed by using the dataset pre-
processing process. Prepare the dataset with ﬁve attributes as like
in the dataset preparation. Calculate the total weight (light inten-
sity) of the testing records individually. Calculate the cosine simi-
larity of testing record with both normal and attack signatures and
declare whether the testing record is attack or normal by using the
rules deﬁned in Section 4.2.
4. Experimental results
4.1. CAIDA dataset
The proposed technique is tested against CAIDA [38] (Center for
Applied Internet Data Analysis) dataset 2007. Core Objectives of
this dataset are collection and sharing of data for research or scien-
tiﬁc analysis of internet trafﬁc, topology, routing, performance and
security related events. Dataset contains the parameters like server
IP address, Timestamp, Time Zone, Object ID/URL of the web page,
Response code/status, Number of bytes sent.
Table 1
data set details.
Number of transactions considered for both training and testing
213,066
Number of Normal transactions
94,164
Number of Attack transactions
118,902
Number of transactions for training
127,839
Number of transactions for testing
85,227
I. Sreeram, V.P.K. Vuppala / Applied Computing and Informatics 15 (2019) 59–66
63
4.2. Training & testing records
The total number of transactions considered for experiments
were 213,066 which includes N (normal-94164) and D (DDoS
attack-118902). The total transactions are partitioned for training
and testing into 60%(127,839) and 40%(85,227) respectively. Each
metric is calculated on the dataset CS which includes N (normal)
as CSN and D (DDoS attack) as CSD and its detection accuracy is
assessed. Number of intervals are 401. The number of intervals in
normal dataset DSN is 178 in which 60% of transactions i.e., 108
are considered for the training process and 40% of transactions
i.e., 69 for the testing process. The total number of intervals in
attack dataset DSD is 224 in which 60% of transactions i.e., 135
are considered for the training process and 40% of transactions
i.e., 89 for the testing process. The details are given in Table 1.
Training dataset of CSN is formed into sessions that are of either
random or same timings. Then K-Means algorithm is applied on
the training set of normal to prepare clusters. Clusters have to be
grouped to ﬁnd the time interval value as explained in machine
learning metrics. Now divide the sessions with respective of
absolute time interval value. Each time interval is considered as
one record that contains the value of attributes deﬁned in metrics.
Now the records are given to bat algorithm to generate single nor-
mal signature. The same process is repeated for attack training
dataset to generate attack signature. Testing dataset is mixture of
both normal and attack trafﬁc. Calculate all the attributes for each
Table 2
Rules deﬁned for attack detection.
Rule1
Weight of the testing time interval is less than the normal classiﬁer weight and greater than the attack
weight
AðwÞ < TðwÞ 6 NðwÞ
Normal
Rule2
2.1 similarity of testing record with the normal classiﬁer is more than 98 percent
similarityðtest; normalÞ P 98%
Normal
2.2 similarity of testing record with the attack classiﬁer is more than 98 percent
similarityðtest; attackÞ P 98%
Attack
Rule3
Similarity of testing record with normal classiﬁer is more than the similarity of testing record with
attack classiﬁer
similarityðtest; normalÞ >similarityðtest; attackÞ
Normal
Rule4
All the above conditions are failed
Suspicious
Table 3
Performance parameter calculations.
Total Number of records consider for training and testing
213,066
Total Number of intervals consider for training and testing
401
Number of intervals used for training (Normal + Attack)
243 (108 + 135)
Number of intervals used for testing (Normal + Attack)
158 (69 + 89)
True Positive (tp)
The number of transactions identiﬁed as intruded, which are actually intruded
91
False Positive (fp)
The number of transactions identiﬁed as normal, which are actually intruded
3
True Negative (tn)
The number of transactions identiﬁed as normal, which are actually normal
69
False Negative (fn)
The number of transactions identiﬁed as intruded, which are actually normal.
5
Precision
tp
tpþfp
0.945
Recall/sensitivity
tp
tpþfn
0.94
Speciﬁcity
tn
tnþfp
0.936
Accuracy
tnþtp
tpþtnþfpþfn
0.948
F-Measure
2 �
recall�precision
recallþprecision
�
�
0.9457
Table 4
Comparison of Bat algorithm with ARTP and FCAAIS.
Bat algorithm
ARTP
FCAAIS
Precision
0.945
0.895
0.869
Recall
0.94
0.985
0.942
Speciﬁcity
0.936
0.914
0.894
Accuracy
0.948
0.944
0.917
F-measure
0.9457
0.938
0.855
Fig. 1. Comparison of Bat algorithm with ARTP and FCAAIS.
64
I. Sreeram, V.P.K. Vuppala / Applied Computing and Informatics 15 (2019) 59–66
interval. Testing time interval Cosine similarity is calculated with
both attack and normal signatures and at last classiﬁes the testing
time interval according to proposed rules in Table 2.
4.3. Performance evaluation
The performance of proposed approach is evaluated based on
the following parameters [22]. The calculations are shown in
Table 3.
� Precision shows the class agreement of the data labels with the
positive labels given by the classiﬁer.
� Recall shows the effectiveness of a classiﬁer to identify the pos-
itive labels.
� Speciﬁcity shows how effectively a classiﬁer identiﬁes the neg-
ative labels.
� Accuracy shows the overall effectiveness of a classiﬁer.
� F-measure shows the relation between data’s positive labels
and those given by a classiﬁer.
Munivara Prasad proposed ARTP [31] for Detecting Application
layer DDoS attacks by using the Machine learning approach. Jyoth-
sna and Prasad proposed FAIS [39] and FCAAIS [40] for detecting
DDoS attacks. The experiments in above papers are conducted on
the same dataset and results are indicating that these models are
also scalable and robust towards forecasting the DDoS attacks
scope of a network transaction (observed detection accuracy is
approx. 91%), but the major obstacle observed these models are
that compared to the proposed model is process complexity, which
inﬂuence the statistical metrics deﬁned for measuring the perfor-
mance. As per these results, the accuracy of our proposed model
was improved when compared to FCAAIS, ARTP and also attained
maximum prediction accuracy which is shown in Table 4 and the
performance comparisons are given in Figs. 1–3.
5. Conclusion
Bio-Inspired
Anomaly
based
HTTP-Flood
Attack
Detection
(BIFAD) devised in this article. In this, we adopted the Bat algo-
rithm, which is a bio-inspired approach with magniﬁed speed in
search. First we deﬁned feature metrics to identify the request
stream
behavior
is
of
attack
or
normal.
Unlike
traditional
approaches, the assessment of feature metrics done on the stream
of requests observed in an absolute time interval rather in a ses-
sion. The Second contribution is to customize the Bat algorithm
to train and test. The devised Bat algorithm ampliﬁed the detection
accuracy with minimal process complexity. The experiments were
conducted using CAIDA dataset . Hence the model devised here in
this paper is signiﬁcantly accurate and retains the maximal predic-
tion accuracy.
Fig. 2. Comparison of Detection rate observed in Bat algorithm with ARTP and FCAAIS.
Fig. 3. Comparison of Processing time observed in Bat algorithm with ARTP and FCAAIS.
I. Sreeram, V.P.K. Vuppala / Applied Computing and Informatics 15 (2019) 59–66
65
References
[1] J. Udhayan, R. Anitha, Demystifying and rate limiting ICMP hosted DoS/DDOS
ﬂooding attacks with attack productivity analysis, in: IEEE International
Conference on Advance Computing, 2009, pp:558–564.
[2] Xia Chun-Tao, D. Xue-Hui, C. Li-Feng, An algorithm of detecting and defending
CC attack in real time, in: International Conference on Industrial Control and
Electronics Engineering, 2012, pp. 1804–1806.
[3] S.M. Lee, Distributed denial of service: taxonomies of attacks, tools, and
countermeasures, in: Proceedings of the International Workshop on Security in
Parallel and Distributed Systems, San Francisco, 2004, pp. 543–550.
[4] Raj
kumar,
Manisha
Jitendra
Nene,
A
survey
on
latest
DoS
attacks:
classiﬁcation and defense mechanisms, Proc. Int. J. Innov. Res. Comput.
Commun. Eng. 1 (8) (2013).
[5] Erol Gelenbe, Michael Gellman, George Loukas, An autonomic approach to
denial of service defence, in: Sixth IEEE International Symposium on a World of
Wireless Mobile and Multimedia Networks, 2005. WoWMoM 2005, June 2005,
pp. 537–541.
[6] Yadong Wang, Lianzhong Liu, et al., A survey of defense mechanisms against
application layer distributed denial of service (DDoS) attacks, IEEE Commun.
Surv. Tut. (2015).
[7] Y. Xie, S. Zheng Yu. A novel model for detecting application layer DDoS attacks,
in: First International Multi-Symposiums on Computer and Computational
Sciences, 2006. IMSCCS ’06, vol. 2, 2006, pp. 56–63.
[8] J. Yu, Z. Li, H. Chen, X. Chen. A detection and offense mechanism to defend
against application layer DDoS attacks, in: Third International Conference on
Networking and Services, 2007. ICNS, 2007, pp. 54–54.
[9] C. Ye, K. Zheng, Detection of application layer distributed denial of service, in:
2011 International Conference on Computer Science and Network Technology
(ICCSNT), vol. 1, 2011, pp. 310–314.
[10] S. Ranjan, et al., DDoS-resilient scheduling to counter application layer attacks
under imperfect detection, in: Proceedings of IEEE INFOCOM, 2006, pp. 23–29.
[11] S. Ranjan, R. Swaminathan, M. Uysal, A. Nucci, E. Knightly, DDoS-shield: DDoS-
resilient scheduling to counter application layer attacks, IEEE/ACM Trans.
Netw. 17 (1) (2009) 26–39.
[12] Y. Xuan, I. Shin, M. Thai, T. Znati, Detecting application denial of-service
attacks: A group-testing-based approach, IEEE Trans. Parallel Distrib. Syst. 21
(8) (2010) 1203–1216.
[13] Y. Xie, S. Zheng Yu, Monitoring the application-layer DDoS attacks for popular
websites, IEEE/ACM Trans. Netw. 17 (1) (2009) 15–25.
[14] M. Mehra, M. Agarwal, R. Pawar, D. Shah, Mitigating denial of service attack
using captcha mechanism, in: Proceedings of the International Conference
&#38; Workshop on Emerging Trends in Technology, ICWET ’11, ACM, New
York, NY, USA, 2011, pp. 284–287.
[15] J. Jung, B. Krishnamurthy, M. Rabinovich, Flash crowds and denial of service
attacks: characterization and implications for cdns and web sites, in:
Proceedings of the 11th International Conference on World Wide Web,
WWW ’02, ACM, New York, NY, USA, 2002, pp. 293–304.
[16] S.Y. Nam, T. Lee, Memory-efﬁcient IP ﬁltering for countering DDoS attacks, in:
Proceedings of the 12th Asia-Paciﬁc Network Operations and Management
Conference on Management Enabling the Future Internet for Changing
Business and New Computing Services, APNOMS’09, Springer-Verlag, Berlin,
Heidelberg, 2009, pp. 301–310.
[17] S. Bhatia, D. Schmidt, G. Mohay, Ensemble-based DDoS detection and
mitigation model, in: Proceedings of the Fifth International Conference on
Security of Information and Networks, ACM, 2012, pp. 79–86.
[18] Y. Tang, Countermeasures on application level low-rate denialof-service
attack, in: Proceedings of the 14th International Conference on Information
and Communications Security, ICICS’12, Springer-Verlag, Berlin, Heidelberg,
2012, pp. 70–80.
[19] G.
Maciá-Fernández,
R.A.
Rodríguez-Gómez,
J.E.
Díaz-Verdejo,
Defense
techniques for low-rate dos attacks against application servers, Comput.
Netw. 54 (15) (2010) 2711–2727.
[20] G. Maciá-Fernández, J.E. Díaz-Verdejo, P. García-Teodoro, Evaluation of a low-
rate dos attack against iterative servers, Comput. Netw. 51 (4) (2007) 1013–
1030.
[21] G. Macia-Fernandez, J. Diaz-Verdejo, P. Garcia-Teodoro, Mathematical model
for low-rate dos attacks against application servers, IEEE Trans. Inf. Forensics
Secur. 4 (3) (2009) 519–529.
[22] Fadir Salmen, Paulo R. Galego Hernandes Jr, et al., Using ﬁreﬂy and genetic
meta heuristics for anomaly detection based on network ﬂows”, in: AICT : The
Eleventh Advanced International Conference on Telecommunications, 2015.
[23] Mikhail
Zolotukhin,
Timo
Hamalainen,
et
al.,
Increasing
web
service
availability by detecting application-layer DDoS attacks in encrypted trafﬁc,
in: IEEE, 23rd International Conference on Telecommunications (ICT).
[24] Georgios
Kambouakis,
Tassos
Moschos,
Dimitris
Geneiatakis,
Stefanos
Gritzalis, A fair solution to DNS ampliﬁcation attacks. Second International
Workshop on Digital Forensics and Incident Analysis, 2007, WDFIA 2007.
[25] M. Vijayalakshmi, S. Mercy Shalinie, IP traceback system for network and
application layer attacks, 2012 International Conference on Recent Trends In
Information Technology (ICRTIT), IEEE, 2012.
[26] J. Yu, C. Fang, L. Lu, Z. Li, Mitigating application layer distributed denial of
service attacks via effective trust management, IET Commun. 4 (16) (2010)
1952–1962.
[27] S. Wen, W. Jia, W. Zhou, W. Zhou, C. Xu, Cald: Surviving various application-
layer DDoS attacks that mimic ﬂash crowd, 2010 4th International Conference
on Network and System Security (NSS), IEEE, 2010.
[28] Huey-Ing Liu, Kuo-Chao Chang, Defending systems against tilt DDoS attacks,
2011 6th International Conference on Telecommunication Systems, Services,
and Applications (TSSA), IEEE, 2011.
[29] Jie Yu, Zhoujun Li, Huowang Chen, Xiaoming Chen, A detection and offense
mechanism to defend against application layer DDoS attacks, 2007. ICNS. Third
International Conference on Networking and Services, IEEE, 2007.
[30] Yang Xiang, Ke Li, Wanlei Zhou, Low-rate DDoS attacks detection and
traceback by using new information metrics, IEEE Trans. Inf. Forensics Secur.
6 (2) (June 2011) 426–437.
[31] Ying Xuan, Incheol Shin, My T. Thai, Taieb Znati, Detecting application denial-
of-service attacks: a group-testing-based approach, IEEE Trans. Parallel Distrib.
Syst. 21 (8) (2010) 1203–1216.
[32] K. Munivara Prasad, A. Rama Mohan Reddy, K. Venugopal Rao, Anomaly based
real time prevention of under rated App-DDoS attacks on web: an experiential
metrics based machine learning metrics, Indian J. Sci. Technol. 9 (27) (2016),
https://doi.org/10.17485/ijst/2016/v9i27/87872.
[33] J. Senthilnath, S.N. Omkar, V. Mani, Clustering using ﬁreﬂy algorithm:
performance study, ELSEVIER, Swarm Evol. Comput. 1 (2011) 164–171.
[34] Suﬁan Hameed, Usman Ali, On the Efﬁcacy of Live DDoS Detection with
Hadoop, arXiv preprint arXiv:1506.08953, 2015.
[35] A. Razzaq et al., Foundation of semantic rule engine to protect web application
attacks,
in:
2011
Tenth
International
Symposium
on
Autonomous
Decentralized Systems, IEEE, 2011, p. 2011.
[36] Saeed Javan Mardi, Mohammad Shojafar, Shahdad Shariat Madari, et al.,
PGSW-OS: a novel approach for resource management in a semantic web
operating system based on a P2P grid architecture, J. Supercomput. 69 (2)
(2014) 955–975.
[37] Shahaboddin Shamshirband, Nor Badrul Anuar, Miss Laiha Mat Kiah, Ahmed
Patel, An appraisal and design of a multi-agent system based cooperative
wireless intrusion detection computational intelligence technique, Eng. Appl.
Artif. Intell. 26 (9) (2013).
[38] MIT, M. I. . DARPA INTRUSION DETECTION EVALUATION. Retrieved from
Lincoln Laboratory: <https://www.ll.mit.edu/ideval/data/1998data.html>.
[39] V. Jyothsna, V.V. Rama Prasad, Anomaly based network intrusion detection
through assessing Feature Association Impact Scale (FAIS); Inderscience, Int. J.
Inform. Comput. Secur. (IJICS), 2016, in press.
[40] V. Jyothsna, V.V. Rama Prasad, FCAAIS: Anomaly based network intrusion
detection through feature correlation analysis and association impact scale, in:
ICT Express, The Korean Institute of Communications Information Sciences,
Elsevier, August 2016, in press.
[41] E. Gelenbe, G. Loukas, A self-aware approach to denial of service defence,
Comput. Netw. 51 (5) (2007) 1299–1314.
[42] Daniele Gianni, Georgios Loukas, Erol Gelenbe, A simulation framework for the
investigation of adaptive behaviours in largely populated building evacuation
scenarios, in: Organised Adaptation in Multi-Agent Systems workshop at the
7th International Conference on Autonomous Agents and Multiagent Systems,
May 2008.
[43] Gokce Gerbil, Omer H. Abdelrahman, Mihajlo Pavloski, Erol Gelenbe, Modeling
and analysis of RRC-based signalling storms in 3G networks, IEEE Trans.
Emerging Topics Comput. 4 (1) (2016) 113–127.
[44] Erol Gelenbe, Omer H. Abdelrahman, Gokce Gorbil, Detection and mitigation of
signaling storms in mobile networks, in: IEEE ICNC, 2016, pp. 1–5.
66
I. Sreeram, V.P.K. Vuppala / Applied Computing and Informatics 15 (2019) 59–66
