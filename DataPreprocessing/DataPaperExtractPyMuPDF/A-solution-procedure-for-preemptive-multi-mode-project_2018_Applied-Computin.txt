ORIGINAL ARTICLE
A solution procedure for preemptive multi-mode
project scheduling problem with mode changeability
to resumption
Behrouz Afshar-Nadjaﬁ *
Faculty of Industrial and Mechanical Engineering, Qazvin Branch, Islamic Azad University, P.O. Box: 34185-1416, Qazvin, Iran
Received 21 February 2013; revised 8 February 2014; accepted 25 February 2014
Available online 6 March 2014
KEYWORDS
Project scheduling;
Mode change;
Simulated Annealing;
Preemption;
Resumption
Abstract
Extensive research has been devoted to the multi-mode resource constrained project
scheduling problem (MRCPSP). However, little attention has been paid to problems where preemp-
tion is allowed. This paper involves the preemptive multi-mode resource constrained project
scheduling problem (P-MRCPSP) to minimize the project makespan subject to mode changeability
after preemption. This problem is a more realistic model and extended case of multi-mode resource
constrained project scheduling problem. A binary integer programing formulation is proposed for
the problem. The problem formed in this way is an NP-hard one forcing us to use the Simulated
Annealing (SA) algorithm to obtain a global optimum solution or at least a satisfying one. The per-
formance of the proposed algorithm is evaluated on 480 test problems by statistically comparing in
term of the objective function and computational times. The obtained computational results indi-
cate that the proposed algorithm is efﬁcient and effective. Also, it is concluded from the results that
mode change is very effective to improve the optimal makespan of the project.
� 2014 King Saud University. Production and hosting by Elsevier B.V. All rights reserved.
1. Introduction
Resource constrained project scheduling problem (RCPSP) is
one of the most important problems in the context of project
scheduling which is an NP-hard problem [7]. The decision vari-
ables for the RCPSP are the starting times of activities while
the resources availabilities are considered given. The objective
is then to minimize the completion time of the project. In the
literature there are several algorithms that solve the RCPSP;
recent reviews about exact methods and heuristics can be
found in Kolisch and Hartmann [30], Hartmann and Kolisch
[19], Hartmann and Kolisch [20], Zhang et al. [48], Zhang
et al. [49], Jairo et al. [23], Hartmann and Briskorn [17], Agar-
wal et al. [3], Fang and Wang [15], Kone´ [31], Paraskevopoulos
et al. [38].
In RCPSP it is assumed that activities could only be per-
formed in one possible execution mode. In practice, however,
it often happens that multiple execution modes can be deﬁned
for the project activities. Each activity may be executed in one
or more execution modes, each requiring a speciﬁc amount of
* Tel.: +98 9125817105; fax: +98 2813670051.
E-mail address: afsharnb@alum.sharif.edu.
Peer review under responsibility of King Saud University.
Production and hosting by Elsevier
Applied Computing and Informatics (2018) 14, 192–201
Saudi Computer Society, King Saud University
Applied Computing and Informatics
(http://computer.org.sa)
www.ksu.edu.sa
www.sciencedirect.com
http://dx.doi.org/10.1016/j.aci.2014.02.003
2210-8327 � 2014 King Saud University. Production and hosting by Elsevier B.V. All rights reserved.
resources consumption and resulting in different durations for
an activity completion. More exactly, each execution mode
deﬁnes
as
a
trade-off
between
time/cost,
time/resource,
speed/resource etc. The multi-mode problem (MRCPSP) is a
generalized version of the RCPSP, where each activity can
be performed in one out of a set of modes, with a speciﬁc activ-
ity duration and resource requirements. The standard multi-
mode
resource
constrained
project
scheduling
problem
involves the selection of an execution mode for each activity
and the determination of the activity start or ﬁnish times such
that the precedence and resource constraints are met and the
project duration is minimized. As this problem is a generaliza-
tion of the RCPSP, the MRCPSP is also NP-hard. Several
algorithms that solve the MRCPSP have been proposed in
recent years: Hartmann and Drexl [18], Sprecher and Drexl
[43], Knotts et al. [28], Nonobe and Ibaraki [37], Jozefowska
et al. [25], Alcaraz et al. [4], Bouleimen and Lecocq [8], Heil-
mann [22], Zhu et al. [50], Zhang et al. [48], Zhang et al.
[49], Lova et al. [32], Jarboui et al. [24], Ranjbar et al. [42],
Lova et al. [33], Coelho and Vanhoucke [10], Ranjbar [41],
Barrios et al. [6], Afshar-Nadjaﬁ et al. [2], Nabipoor Afruzi
et al. [36].
The basic RCPSP and MRCPSP assume that each activity,
once started, will be executed until its completion. This
assumption can be justiﬁed only for activities in which their
interruption essentially is inapplicable. For example, in order
to integrity of foundation, concrete placement cannot be pre-
empted. However, for activities in which their interruption is
applicable, the optimal makespan can be improved by allowing
preemption, because the solution space is extended as a result
of the constraint relaxation. Welding can be mentioned as a
preemptive activity. Preemptive multi-mode resource con-
strained project scheduling problem (P-MRCPSP) refers to a
generalization of the multi-mode resource constrained project
scheduling problem (MRCPSP) which allows activities to be
preempted at any time instance and restarted later on at no
additional cost. The literature on solution methods for the pre-
emptive resource constrained project scheduling problem is rel-
atively scant. For the single-mode case, one can refer to
Kaplan [26], Demeulemeester and Herroelen [13], Ballestin
et al. [5], Vanhoucke and Debels [46], Damay et al. [11]. For
the multi-mode case, Buddhakulsomsiri and Kim [9] proved
that preemption is very effective to improve the optimal pro-
ject makespan in the presence of resource vacations and tem-
porary
resource
unavailability
and
that
the
makespan
improvement is dependent on the parameters that impact
resource utilization. Van Peteghem and Vanhoucke [47] have
proposed a genetic algorithm for the multi-mode resource-
constrained project scheduling problem and its extension to
the preempted case.
The basic MRCPSP and P-MRCPSP assume that activities
assigned modes cannot change during the execution of the pro-
ject. This assumption is one of the classical MRCPSP and P-
MRCPSP shortcomings. This common assumption can be jus-
tiﬁed as long as essence and materials of modes are different
and mode change is inapplicable. However, if execution modes
of an activity have the same essence and materials, the optimal
makespan can be improved by allowing mode change. This is
probable especially in the presence of resource vacations and
temporary resource unavailability. However, it is likely that
in reality, execution mode of an activity is changed, especially
when an activity is preempted and it will be restarted at a later
time. In these cases, modeling and solving such a problem as a
classical MRCPSP, especially in the preemptive case may lead
to poor solutions. To the best of our knowledge, no research
has been performed on the P-MRCPSP with permitted mode
change.
Therefore, the contribution of this paper is fourfold: ﬁrst, a
binary integer programing formulation is developed for the
preemptive multi-mode project scheduling problem of mini-
mizing the project makespan subject to resource constraints
and precedence relations, where execution mode of each activ-
ity can be changed after being preempted. This problem is
called P-MRCPSP-MC. This model is not considered in the
past literature. Second, an efﬁcient meta-heuristic solution
procedure based on SA is developed for the problem due to
NP-hardness of the problem. In proposed SA, the activity list
representation is used to encode a project schedule and the
serial schedule generation scheme (SSGS) embedded with a
new dynamic heuristic to translate the schedule representation
to a schedule. Third, the effectiveness of proposed SA for the
P-MRCPSP-MC will be analyzed. Finally, the effect of mode
changeability on project makespan is analyzed.
The remainder of this paper is organized as follows: Sec-
tion 2 is devoted to the presentation of the problem. In Sec-
tion 3 the steps of our algorithm to solve the problem is
explained. Computational results are represented in Section 4.
Finally, Section 5 contains the conclusions.
2. Problem description
In continuation the project is represented by an activity on the
node (AON) network G(N, A) where the set of nodes, N, rep-
resents activities and the set of arcs, A, represents ﬁnish-start
precedence constraints with a time-lag of zero. The preempt-
able activities are numbered from the dummy start activity 1
to the dummy end activity n and are topologically ordered,
i.e., each successor of an activity has a larger activity number
than the activity itself. The set of activities is to be scheduled
on a set Rq of renewable and Rm of nonrenewable resource
types. For each activity i e N, instead of a ﬁxed duration and
known resource requirements, a ﬁxed work content Wi is given
which essentially indicates how much work has to be per-
formed. This work content can be performed in a mode mi,
which is chosen out of a set of Mi different execution modes,
i.e., with different speeds and resource requirements as long
as the required work content is met. The accomplishing of
an activity can be temporarily interrupted at discrete time
instants, and restarted at a later time with a same or different
mode. The progress of activity i during each time unit of its
execution in mode mi , is wimi (measured by same unit of
Wi). Each activity i in mode mi requires rq
imik renewable
resource units (k e Rq) during each time unit of its execution.
For each renewable resourcek e Rq, the availability aq
k is con-
stant throughout the project horizon. Activity i, executed in
mode mi, will also use rm
imil nonrenewable resource units (l e Rm)
of the total available nonrenewable resource am
l . Logically, it is
assumed that mode mi with higher wimi requires more renew-
able rq
imik and nonrenewable resources rm
imil.
The objective of the P-MRCPSP-MC is to ﬁnd a feasible
schedule in order to minimize the makespan of the project.
However, changeable execution modes mi for activities and
preemption plan for activities have to be determined. A sched-
Solution to multi-mode project scheduling problem
193
ule is deﬁned as a sequence of start (ﬁnish) times for the pro-
ject’s activities. A schedule which satisﬁes the speciﬁed prece-
dence and resource constraints is called feasible schedule.
Also, a feasible schedule which meets as much as possible
the objectives set forward by project management is called
optimal. The following notation is used for P-MRCPSP-MC:
A
Set of arcs of acyclic digraph representing the project
N
Set of nodes of acyclic digraph representing the project,
|N| = n
n
Number of activities, index by i
Rq
Set of renewable resource(s), |Rq| = K
K
Number of renewable resource(s), index by k
Rm
Set of nonrenewable resource(s), |Rm| = L
L
Number of nonrenewable resource(s), index by l
Mi
Number of execution modes for activity i , index by mi
Wi
Total work content of activity i, i e N
wimi
Progress of activity i during each time unit of its execution
in mode mi , i e N, mi = 1,. . .,Mi
rq
imik
Renewable resource type k requirement of activity i in mode
mi , i e N, k e Rq, mi = 1,. . .,Mi
rm
imil
Nonrenewable resource type l requirement of activity i in
mode mi, i e N, l e Rm, mi = 1,. . .,Mi
aq
k
Constant availability of renewable resource type k
throughout the project horizon, k e Rq
am
l
Total availability of nonrenewable resource type l, l e Rm
ESTi
Earliest start time of activity i
LFTi
Latest ﬁnish time of activity i
sn
Deadline of the project
Z
Objective function (project makespan)
ximit
1, if activity i in mode mi is in progress in period t, 0,
otherwise (binary decision variable)
In our formulation, 0–1 variables ximit are deﬁned, which
specify whether an activity i in mode mi is in progress in period
t or not. These variables can only be deﬁned over the time
interval of the activity in question t e [ESTi + 1, LFTi]. These
limits are determined using the traditional forward and back-
ward pass calculations considering duration of activity i based
on high speed mode as follows:
di ¼
Wi
max
mi
wimi
2
4
3
5
ð1Þ
The backward pass calculation is started from a ﬁxed pro-
ject deadline sn. In this paper, earliest ﬁnish time of dummy
end activity, EFTn, is considered as project deadline. EFTn is
computed using the traditional forward calculations consider-
ing duration of activity i based on low speed mode as follows:
di ¼
Wi
min
mi wimi
2
666
3
777
ð2Þ
It is clear that an activity with work content of 0 is never in
progress and thus does not have a corresponding decision vari-
able which is set to 1. This problem, however, can be easily
overcome: the dummy start and end activity are assigned a
dummy mode with work content of 1. Also, the parameters
rm
imil, rq
imik and wimi for dummy modes are assumed as 1. All
other activities with zero work content can be eliminated, pro-
vided that the corresponding precedence relations are adjusted
appropriately. The resulting schedule may be transferred into a
schedule for the original problem by removing the dummy
start and end activity, and one time unit left shifting.
Using the above notation, P-MRCPSP-MC can be mathe-
matically formulated as follows:
min Z ¼
X
LFTn
t¼ESTnþ1
t:xnmnt
ð3Þ
Subject to:
X
LFTi
t¼ESTiþ1
X
Mi
mi¼1
wimi:ximit � Wi
8i 2 N
ð4Þ
X
Mi
mi¼1
ximit � 1
8i 2 N; 8t 2 ½ESTi þ 1; LFTi�
ð5Þ
ximit þ xim0
iðtþ1Þ � 1
8i 2 N;
8t 2 ½ESTi þ 1; LFTi � 1�; 8mi–m0
i
ð6Þ
X
t
s¼1
X
Mi
mi¼1
wimi:ximis � Wi
X
Mj
mj¼1
xjmjðtþ1Þ
8ði; jÞ 2 A;
8t 2 ½ESTi þ 1; LFTj � 1� ð7Þ
X
n
i¼1
X
Mi
mi¼1
rq
imik:ximit � aq
k
8k 2 Rq; t ¼ 1; . . . ; sn
ð8Þ
X
n
i¼1
X
Mi
mi¼1
X
EFTi
t¼ESTiþ1
rm
imil:ximit � am
l
8l 2 Rm
ð9Þ
ximit ¼ 0; 1
8i 2 N; 8t 2 ½ESTi þ 1; LFTi�;
mi ¼ 1; . . . ; Mi
ð10Þ
The objective function in Eq. (3) minimizes the project
duration. Remember, however, that this value exceeds the
optimal project length because of the unit duration of both
the dummy start and dummy end activity. The constraints in
inequality (4) assure that work content of each activity is
met. The constraints in Eq. (5) assure that each activity is
not assigned more than one mode for each time period. The
assumption that mode change is not allowed without preemp-
tion is modeled in Eq. (6). Eq. (7) denotes the precedence
relations-constraints. Constraints (8) and (9) take care of the
renewable and nonrenewable resource limitations, respectively.
Finally, Eq. (10) imposes binary values on the decision vari-
ables. This formulation requires the deﬁnition of at most n*
max(Mi)* sn binary decision variables. Also, the number of
constraints of the formulation amounts to at most n + n sn
[1 + max(Mi)(max(Mi)-1)/2]+ sn (|A|+K)+L.
Fig. 1 shows an example of P-MRCPSP-MC with 7 activi-
ties where 1 and 7 are dummy activities.
Each activity has two execution modes. For each mode, 1
renewable resource and 1 nonrenewable resource is indicated.
The availability for the renewable (nonrenewable) resource is
5 (132). Problem instance parameters are given in Table 1.
Fig. 2(a) depicts a schedule with a makespan of 8 days. This
schedule is feasible because it uses exactly 130 nonrenewable
resource units. Also, precedence relations are met and renew-
able resource availability (5) is not violated. Fig. 2(b) shows
194
B. Afshar-Nadjaﬁ
a feasible schedule with a makespan of 7 days, in which pre-
emption is allowed. If the problem is relaxed to the P-
MRCPSP-MC, a feasible schedule as shown in Fig. 2(c) can
be generated.
3. Proposed SA to solve P-MRCPSP-MC
Simulated Annealing (SA) algorithm has been successfully
applied to a noticeable number of project scheduling problems
[1,8,21,25,35,40]. In this section an SA algorithm is proposed
to solve P-MRCPSP-MC. In order to increase quality of the
proposed SA, an efﬁcient dynamic heuristic algorithm is imple-
mented to construct a schedule. Also exact solutions obtained
from Lingo 11 are considered to provide comparable computa-
tional efforts for SA.
3.1. Basic Simulated Annealing
Simulated Annealing (SA) which has been successfully applied
to various difﬁcult combinatorial optimization problems is a
random search method that is based on Monte Carlo iterative
strategy. The origins of SA are in statistical mechanics (Metro-
polis algorithm) and it initially was presented as a search algo-
rithm for combinatorial optimization by Kirkpatrick et al.
[27]. SA is useful for problems with a very large discrete search
space, which is too large for an enumeration search method.
SA algorithm starts by generating an initial solution and by
initializing the so-called temperature parameter T. Then, at
each iteration a solution s0 is randomly created in the neighbor-
hood of the current solution and if it is better than the current
solution, it replaces the current solution. If the new solution is
not an improvement upon the current solution, it replaces the
current solution with a probability generally computed follow-
ing the Boltzmann distribution expð� fðs0Þ�fðsÞ
T
Þ where T is the
current temperature and f(s0) - f(s) is the change in objective
function value obtained by moving from previous solution to
new solution. The temperature T is decreased during the search
process, thus at the beginning of the search the probability of
accepting uphill moves is high and it gradually decreases, con-
verging to a simple iterative improvement algorithm. Regard-
ing the search process, this means that the algorithm is the
result of two combined strategies: random walk and iterative
improvement. In the ﬁrst phase of the search, the bias toward
improvements is low and it permits the exploration of the
search space; this erratic component is slowly decreased thus
Table 1
Problem instance information.
Activity i
Wi
Mode mi
wimi
rq
imik
rm
imil
1
1
1
1
0
0
2
14
1
6
5
10
2
4
4
7
3
8
1
5
2
13
2
3
1
6
4
11
1
8
4
23
2
5
2
10
5
14
1
7
3
7
2
5
2
5
6
6
1
6
2
22
2
3
1
11
7
1
1
1
0
0
Fig. 2
Schedules for problem instance.
1
2
4
5
3
6
7
Fig. 1
An example network.
Solution to multi-mode project scheduling problem
195
leading the search to converge to a (local) minimum. The prob-
ability of accepting uphill moves is controlled by two factors:
the difference of the objective functions f(s0) - f(s) and the tem-
perature T. On the one hand, at ﬁxed temperature, the higher
the difference f(s0) - f(s), the lower the probability to accept a
move from s to s0. Whereas, the higher T, the higher the prob-
ability of uphill moves.
The choice of an appropriate cooling schedule is crucial for
the performance of the algorithm. One of the most used ones
follows a geometric law Tk+1 = aTk where a e (0, 1) which
corresponds to an exponential decay of the temperature. The
cooling rule may vary during the search, with the aim of tuning
the balance between diversiﬁcation and intensiﬁcation. For
example, at the beginning of the search, T might be constant
or linearly decreasing, in order to sample the search space;
then, T might follow a rule such as the geometric one, to con-
verge to a local minimum at the end of the search. The cooling
schedule and the initial temperature should be adapted to the
particular problem instance, since the cost of escaping from
local minima depends on the structure of the search landscape.
The description of SA indicates that a basic SA does not use
the history of the search process. This is one of the reasons
why SA is often outperformed by other meta-heuristics. How-
ever, due to its simplicity, it is generally very fast and it can be
successfully integrated into other search techniques.
3.2. Preprocessing
In order to reduce the search space, preprocessing is used
before the execution of SA. The data reduction procedure
has originally been proposed by Sprecher et al. [44] to increase
the speed of their branch and bound algorithm for the
MRCPSP. The idea behind this procedure is to omit all non-
executable and inefﬁcient modes from the project data without
affecting the optimal makespan. An execution mode mj is
called non-executable if its execution would violate the renew-
able resource constraints in any schedule. Also, a mode is
called inefﬁcient if there is another mode of the same activity
with the same or higher speed and no more requirements for
all resources. Hence, non-executable and inefﬁcient modes
may be excluded from the project data without losing
optimality.
3.3. Solution representation
In the previous researches, various representations for sched-
ules in the construction of heuristics for the RCPSP are devel-
oped (Kolisch and Hartmann [30]). The two most important
ones are
the
random-key
(RK)
representation
and
the
activity-list (AL) representation. Hartmann and Kolisch [19]
deduced from experimental tests that procedures based on
AL representations outperform the other procedures. The
AL representation is used to encode a project schedule and
the serial schedule generation scheme (SSGS) to translate the
schedule representation to a schedule. Since the minimum pro-
ject makespan criterion is a regular performance measure, i.e.,
a measure which is non-decreasing in activity completion
times, one may use the serial SGS rule to construct the sched-
ule. As a result, there is no danger of omitting an optimal
schedule by using the serial SGS here. The serial SGS sequen-
tially adds activities to the schedule until a feasible complete
schedule is obtained. In each run, the ﬁrst un-scheduled activ-
ity in the activity list is chosen and the ﬁrst possible starting
time is assigned for that activity such that precedence or
resource constraints are preserved.
A feasible solution is represented by a vector which is a
precedence-feasible permutation of activities:
I ¼ ðjI
i; jI
2; . . . ; jI
nÞ
ð11Þ
Fig. 3 shows an example of solution representation related
to the mentioned instance in Fig. 1.
Having got a feasible solution represented by the vector
described above, the starting times of all activities (sub-
activities) are then deﬁned by using the serial SGS. The SGS
determines how a feasible schedule is constructed by assigning
starting times to the activities. It sequentially adds activities in
the activity list to the schedule until a feasible complete sched-
ule is obtained such that no precedence or resource constraint
is violated. In this paper however, execution modes are deter-
mined using a dynamic heuristic embedded into serial SGS.
Our proposed heuristic is derived from part period lot sizing
heuristic (DeMatteis [12]); algorithm chooses the number of
periods covered by the replenishment order such that the total
holding costs are made as close as possible to the setup cost.
To solve P-MRCPSP-MC, an initial feasible activity list is
generated. Then, ratio of work to resource (RWR) is computed
as follows:
RWR ¼
Pn
i¼1Wi
PL
l¼1am
l þ TPK
k¼1aq
k
ð12Þ
RWR is a representation of work-resource balancing. In
our proposed SA, mode assignment is done by comparing real-
ized ratio of work to resources so far with RWR. For selected
activity i, mode mi with realized ratio of total completed work
content to the spent resources so far as close as to RWR is
assigned.
After obtaining an initial activity list I, the corresponding
schedule is computed by the following procedure:
Starting from time period 1, for each time period t, set of
activities that are executable at a certain time period t (i.e.,
all their predecessors have completed), is identiﬁed. This set
of activities is denoted by Ia which should consist of at least
one activity. Activities in Ia are arranged according their
sequence in I. In each iteration, ﬁrst activity j is selected from
Ia and deleted from it. If activity j was in progress at period t-1,
same execution mode should be assigned to it if possible. Else,
procedure is continued by selecting ﬁrst activity j from Ia
again.
If activity j was in progress at period t-1, all impossible and
dominated modes of activity j are considered inactive. A mode
mj is called impossible if its renewable resource requirement
exceeds remaining availability for at least one renewable
resource type. Also, A mode mj is dominated by another mode
m0
j if remaining work of activity j is less than or equal to wjm0
j
whereas wjmj > wjm0
j. Then, for remaining modes (if exist) of
Activity list
j1
j2
j3
j4
j5
j6
j7
1
2
4
3
5
6
7
Fig. 3
Solution representation.
196
B. Afshar-Nadjaﬁ
activity j, Pjmj is computed as follows which is a representation
of realized ratio of work to resources, so far.
Pjmj ¼
P
i
P
mi
Pt
s¼1wimi:ximis
P
i
P
mi
P
l
Pt
s¼1rm
imilximis þ tPK
k¼1aq
k
ð13Þ
Finally, the mode mj for which Pjmj most nearly equals to
RWR is assigned to activity j and activity j set to be in progress
at period t . If there are no remaining modes for activity j, pro-
cedure continues by selecting ﬁrst activity j is from Ia. Also, if
Ia is empty, algorithm restarts by setting t = t + 1. Above
procedure is continued until dummy activity n be a scheduled
activity. The time complexity of this procedure is the same as
the basic serial SGS, O(n2K) (Pinson et al. [39]). The pseudo-
code for decoding a solution to a schedule is shown in Table 2.
For example, in Fig. 1 consider the following activity list:
Decoding this schedule as follows results in the feasible sched-
ule shown in Fig. 2(c):
t = 1 activity 2 in mode m1
t = 2 activity 4 in mode m1
t = 2 activity 3 in mode m2
t = 3 activity 2 in mode m2
(activity 2 is preempted at time point t = 1)
t = 3 activity 3 in mode m2
t = 4 activity 2 in mode m2
t = 4 activity 3 in mode m2
t = 5 activity 4 in mode m1
(activity 4 is preempted at time point t = 2)
t = 5 activity 5 in mode m1
t = 6 activity 5 in mode m1
t = 6 activity 6 in mode m1
The number of requested nonrenewable resource units that
exceeds the capacity am
l ; l 2 Rs, is deﬁned as the excess of
resource request ERR(l) (Van Peteghem and Vanhoucke
[47]). An ERR(l) = 0 means that the solution is feasible. If
ERR(l) is larger than 0, the solution is infeasible with respect
to nonrenewable resources. The formula of the ERR(l) can be
adjusted in our problem as follows:
ERRðlÞ ¼
X
L
l¼1
max
0;
X
n
j¼1
X
sn
t¼1
X
Mj
mj¼1
ðrm
jmjl:xjmjtÞ � am
l
 
!
 
!
ð14Þ
For an infeasible generated schedule (ERR(l) > 0) the
local search procedure of Hartmann [16] is applied to trans-
form infeasible solutions into feasible ones. The procedure
chooses an activity randomly and for that activity, a different
mode is chosen. If the ERR(l) remains the same or decreases,
the mode for that activity is changed. This step is repeated
until the mode assignment is feasible (ERR(l) = 0) or until J
consecutive unsuccessful trials to improve the mode assign-
ment have been made. In this paper, J equals to four times
the number of activities in the project. This procedure acts only
on mode assignment and do not change the activity list. Also,
this procedure stops as soon as it reaches to a feasible solution;
i.e., resulting solution is close to the inner border of nonrenew-
able feasibility. So this procedure may not generate a feasible
solution that is very different from the original unfeasible one.
3.4. Starting solution
In the proposed SA an initial solution is created by setting all
activities on the activity list based on the latest ﬁnish time
(LFT) which is an efﬁcient priority rule (Kolisch [29]). Then,
the procedure described in Section 4.2 is used to determine exe-
cution modes and execution time of activities.
3.5. Neighborhood generation structure
In order to generate a neighborhood of current solution the
following method is used. Let I ¼ ðjI
i; jI
2; . . . ; jI
nÞ be the current
solution. Neighborhood generation mechanism is applied to
the activity list of the solution. For activity list of I, neighbor-
hood generation mechanism operates as follows: A random
activity jI
a, is selected from the activity list with position a. Last
predecessor and ﬁrst successor’s position of jI
a is identiﬁed in
the activity list. Subsequently, a random position x between
the last predecessor and ﬁrst successor’s position of jI
a is
selected, and jI
a is moved to position x. Finally, all activities
between position of jI
a and position x are shifted to the left
or right depending on relative position of jI
a and position x.
3.6. Cooling scheme
The cooling scheme is the main factor that needs to be orga-
nized when designing the Simulated Annealing algorithm.
The temperature is initially set at a large value and then grad-
ually decreased under the cooling schedule function until it
reaches the thermal equilibrium. After each move (neighbor-
hood generation), the temperature is reduced according to
Table 2
Pseudo-code for decoding a solution to a schedule.
1) Let t = 1, compute RWR from Eq. (12)
2) Determine the list of uncompleted activities which are admissible to be in progress at period t with respect to the precedence constraints,
(Ia). Arrange activities in Ia according their sequence in I
3) If Ia is empty set t = t + 1 and go to step 2, else, select ﬁrst activity j from Ia , Delete j from Ia , If j = n go to step 8
4) If activity j was in progress at period t-1, assign the same execution mode to it if possible and go step 7 else, go to step 3
5) Delete all impossible and dominated modes of activity j. If the remaining mode list of activity j is empty go to step 3
6) For remaining modes of activity j compute Pjmj from Eq. (13), assign the mode mj to activity for which Pjmj is most nearly equal to RWR
7) Set activity j in assigned mode to be in progress at period t, go to step 2
8) Stop
j1
j2
j3
j4
j5
j6
j7
1
2
4
3
5
6
7
Solution to multi-mode project scheduling problem
197
the cooling schedule suggested by Lundy and Mees [34] as fol-
lows where a is chosen close to zero.
Tkþ1 ¼
Tk
1 þ aTk
ð15Þ
3.7. Stopping criterion
In theory the SA procedure should be continued until the ﬁnal
temperature Tf is zero, but in practice other stopping criteria
are used. In this paper, the procedure is continued until a pre-
determined CPU time is reached.
4. Performance evaluation
4.1. The test problems
A set of 480 problems was generated by the project generator
ProGen/px developed by Drexl et al. [14] in order to validate
the proposed SA algorithm for the P-MRCPSP-MC. To do
this the parameters given in Table 3 are used. The indication
[x,y] means that the value is randomly generated on the inter-
val [x,y]. Renewable resource availability is constant over time.
For each combination of the parameter values, 4 instances
were generated. The resource factor RF reﬂects the average
portion of resource required per activity. The resource strength
RS reﬂects the scarceness of the resource. The problem set was
extended by generating project deadline sn in the same way as
described in Section 2.
4.2. Parameters setting
The values of parameters used in Simulated Annealing (SA)
algorithms must be carefully selected since parameter values
may have a signiﬁcant inﬂuence on the performance of the
algorithm. In this paper, the Taguchi experimental design is
used to tune the parameters of SA. CPU-time limit was speci-
ﬁed as a stopping criterion which is selected through the com-
putational experiments. We obtained good results by indexing
the CPU-time limit to the size of the problem, i.e., use of the
low CPU-time for small problems and high CPU-time for lar-
ger problems. Taguchi [45] divides factors into controllable
and noise factors and offer a set of orthogonal arrays for
designing experiments of quality improvement. Although there
is no direct control of noise factors, the Taguchi method deter-
mines the optimal level of controllable factors and minimizes
the effect of noise. In the proposed SA, the factors that should
be tuned are temperature control parameter a, initial tempera-
ture and number of milliseconds per activity CPU. A set of 27
randomly generated problems with 40 non-dummy activities
are used for parameter tuning. Using MINITAB software ver-
sion 16, based on a L27 orthogonal array design the optimal
levels (in Bold) of the parameters are reported in Table 4.
4.3. Experimental results
The procedure has been programed in Borland C++ 5.02 and
executed on a personal computer with an Intel Core2Dou,
2.5 GHz processor and 3 GB memory. Since we could not ﬁnd
any algorithm for P-MRCPSP-MC, the proposed SA is com-
pared with the optimal solution obtained by Lingo 11. Table 5
presents the computational results of the proposed algorithm
where it is compared with the optimal solution obtained by
Lingo 11 (or the best obtained solution by SA if Lingo is
not able to solve the problem). Proposed SA executed 10 times
for each problem to obtain more reliable data. The experimen-
tal results demonstrate that control parameter calibration pro-
vides high quality solutions. Following notations are used in
Table 5:
NPO: Number of problems for which Lingo was able to
ﬁnd optimum solution in 1000 s.
NPM: Number of runs of problems for which SA was able
to ﬁnd optimum solution.
ACNT-L:
Average
convergence
time
for
Lingo
(in
seconds).
ACNT-SA: Average convergence time for SA (in seconds).
ARD: Average relative deviation percentages.
Relative deviation (RD) percentage for each problem is
obtained by following formula:
RD ¼ Z � Z�
Z�
ð16Þ
where Z is the value of objective function obtained by SA and
Z* is the optimal solution obtained by Lingo or the best
obtained solution by SA.
From Table 5 it can be observed that when the number of
activities is less than or equal to 30, all 192 problems can be
solved to optimality by Lingo within the allowed time limit.
Also, Table 5 shows that when number of activities is greater
Table 3
The parameter settings for the problem set.
Control parameter
Value
Number of activities (non-dummy) (n)
20, 30, 40, 60,
90
Number of execution modes
2, 3
Activity work contents
[10,20]
Progress of activities (per period)
[1,10]
Number of initial and terminal activities
3
Maximal number of predecessors and successors
3
Coeﬃcient of network complexity (CNC)
1.5
Resource factor (RF)
0.5, 1
Renewable and nonrenewable resource strength
(RS)
0.25, 0.5
Number of renewable and nonrenewable resource
types
1, 2, 3
Constant availability of renewable resources
n
Total availability of nonrenewable resource
25n
Activity renewable resource (per period) demand
Integer[1,10]
Activity nonrenewable resource (per period)
demand
Integer[1,10]
Table 4
Factors levels and the tuned values for a, T0 and
CPU.
Factor
Number of Levels
Level 1
Level 2
Level 3
CPU
3
50
70
100
a
3
0.0045
0.0055
0.0065
T0
3
12
17
25
198
B. Afshar-Nadjaﬁ
than 30, while there are many instances that the Lingo is
unable to solve, there is a solution by SA. However, Lingo
obtained optimum solutions for 229 out of 480 problems in
1000 s and SA algorithm solved all problems with low relative
deviation and in a very short time (70 ms per activity). Average
CPU-time for Lingo indicates that when the number of execu-
tion modes is increased the complexity of the problem is
increased. ARD for the algorithm shows that proposed SA
gives robust solutions. Also, NPM for the algorithm indicates
that too many executions of problems reach the optimum
solution.
To observe the statistical comparison of the differences
between the results of the Lingo and SA, a paired t-test is used
for 229 problems to which Lingo obtained optimum solutions
and the corresponding 95% conﬁdence interval is calculated as
[�9.36, 7.82]. Since the lower conﬁdence level is negative and
the upper level is positive, then the null hypothesis cannot be
rejected as the population mean of the differences could be
zero. This implies that the differences between the quality of
solutions obtained by Lingo and SA are not statistically
signiﬁcant.
In order to evaluate the effect of changeability assumption,
for 229 problems which Lingo obtained optimum solutions,
each problem has been solved without mode changeability
assumption. Table 6 presents the computational results. From
Table 6 it can be observed that mode changeability obviously
leads to an overall average makespan improvement. Table 6
also reveals that mode changeability usually leads to better
solutions. Average Improvement (%) column shows that the
percent loss due to using the P-MRCPSP model instead of
the P-MRCPSP-MC is straightly relevant to number of activ-
ities and execution modes.
5. Summary and conclusions
The preemptive multi-mode resource constrained project
scheduling
problem
with
permitted
mode
change
(P-
MPRCPSP-MC), is investigated in this paper. The objective
of P-MPRCPSP-MC is to schedule the activities in order to
minimize the project makespan subject to the precedence con-
straints and resource constraints. In this problem setting, work
content concept is used instead of duration. This problem has
not been studied ever before. The problem described with an
integer programing model, and then the parameters tuned Sim-
ulated Annealing (SA) proposed to solve it. The performance
of the proposed algorithm on 480 test problems was compared
with the results of the Lingo 11. From the computation results,
one could clearly see that the SA algorithm could efﬁciently
solve the project scheduling problem. Also, one could ﬁnd
out that mode changeability obviously leads to an average
makespan improvement. For further research, we recommend
the adapting mode change concept for other extensions of
multi-mode project scheduling problems.
References
[1] B.
Abbasi,
S.
Shadrokh,
J.
Arkat,
Bi-objective
resource
constrained project scheduling with robustness and makespan
criteria, Appl. Math. Comput. 180 (2006) 146–152.
[2] B. Afshar-Nadjaﬁ, A. Rahimi, H. Karimi, A genetic algorithm
for
mode
identity
and
the
resource
constrained
project
scheduling problem, Sci. Iran. 20 (3) (2013) 824–831.
[3] A. Agarwal, S. Colak, S. Erenguc, A neurogenetic approach for
the resource constrained project scheduling problem, Comput.
Oper. Res. 38 (1) (2011) 44–50.
Table 5
Computational results of the SA and Lingo.
#Activities
#Modes
#Problems
SA
Lingo
NPM
ARD (%)
ACNT-SA
NPO
ACNT-L
20
2
48
480
0.00
0.014
48
3.96
20
3
48
480
0.00
0.023
48
5.62
30
2
48
480
0.00
0.079
48
37.19
30
3
48
392
0.34
0.053
48
68.27
40
2
48
480
0.00
0.069
16
107.30
40
3
48
381
0.39
0.074
10
132.61
60
2
48
354
0.42
0.189
9
265.78
60
3
48
335
0.56
0.274
2
324.43
90
2
48
351
0.50
0.190
0
–
90
3
48
321
0.55
0.329
0
–
Table 6
Computational results of the Lingo with and without mode change.
#Activities
#Modes
#Problems
P-MRCPSP-MC vs. P-MRCPSP
Average improvement (%)
Better
Equal
20
2
48
4.32
46
2
20
3
48
5.76
48
0
30
2
48
5.11
45
3
30
3
48
6.85
47
1
40
2
16
7.64
15
1
40
3
10
9.46
10
0
60
2
9
8.39
9
0
60
3
2
9.82
2
0
Solution to multi-mode project scheduling problem
199
[4] J. Alcaraz, C. Maroto, R. Ruiz, Solving the multi-mode resource
constrained project scheduling problem with genetic algorithms,
J. Oper. Res. Soc. 54 (2003) 614–626.
[5] F. Ballestin, V. Valls, S. Quintanilla, Pre-emption in resource
constrained project scheduling, Eur. J. Oper. Res. 189 (2008)
1136–1152.
[6] A. Barrios, F. Ballestin, V. Valls, A double genetic algorithm for
the MRCPSP/max, Comput. Oper. Res. 38 (1) (2011) 33–43.
[7] J. Blazewicz, J. Lenstra, A. Rinnooy Kan, Scheduling subject to
resource constraints: classiﬁcation and complexity, Discrete.
Appl. Math. 5 (1983) 11–24.
[8] K. Bouleimen, H. Lecocq, A new efﬁcient simulated annealing
algorithm
for
the
resource-constrained
project
scheduling
problem and its multiple mode version, Eur. J. Oper. Res. 149
(2003) 268–281.
[9] J.
Buddhakulsomsiri,
D.
Kim,
Properties
of
multi-mode
resource
constrained
project
scheduling
problems
with
resource vacations and activity splitting, Eur. J. Oper. Res.
175 (2006) 279–295.
[10] J. Coelho, M. Vanhoucke, Multi-mode resource constrained
project scheduling using RCPSP and SAT solvers, Eur. J. Oper.
Res. 213 (1) (2011) 73–82.
[11] J. Damay, A. Quilliot, E. Sanlaville, Linear programming based
algorithms for preemptive and non-preemptive RCPSP, Eur. J.
Oper. Res. 182 (2007) 1012–1022.
[12] J.J. DeMatteis, The part-period algorithm, IBM Syst. J. 7 (1)
(1968) 30–38.
[13] E.
Demeulemeester,
W.
Herroelen,
An
efﬁcient
optimal
procedure for the preemptive resource-constrained project
scheduling problem, Eur. J. Oper. Res. 90 (1996) 334–348.
[14] A. Drexl, R. Nissen, J.H. Patterson, F. Salewski, ProGen/px –
An
instance
generator
for
resource
constrained
project
scheduling problems with partially renewable resources and
further extensions, Eur. J. Oper. Res. 125 (2000) 59–72.
[15] C. Fang, L. Wang, An effective shufﬂed frog-leaping algorithm
for resource constrained project scheduling problem, Comput.
Oper. Res. 39 (5) (2012) 890–901.
[16] S. Hartmann, Project scheduling with multiple modes: a genetic
algorithm, Ann. Oper. Res. 102 (2001) 111–135.
[17] S. Hartmann, D.A. Briskorn, Survey of variants and extensions
of the resource constrained project scheduling problem, Eur. J.
Oper. Res. 207 (1) (2010) 1–14.
[18] S. Hartmann, A. Drexl, Project scheduling with multiple modes:
a comparison of exact algorithms, Networks 32 (1998) 283–297.
[19] S. Hartmann, R. Kolisch, Experimental evaluation of state-of-
the-art heuristics for the resource constrained project scheduling
problem, Eur. J. Oper. Res. 127 (2000) 394–407.
[20] S.
Hartmann,
R.
Kolisch,
Experimental
investigation
of
heuristics
for
resource-constrained
project
scheduling:
an
update, Eur. J. Oper. Res. 17 (2006) 23–37.
[21] Z. He, N. Wang, T. Jia, Y. Xu, Simulated annealing and tabu
search for multimode project payment scheduling, Eur. J. Oper.
Res. 198 (2009) 688–696.
[22] R. Heilmann, A branch-and-bound procedure for the multi-
mode resource constrained project scheduling problem with
minimum and maximum time lags, Eur. J. Oper. Res. 144 (2)
(2003) 348–365.
[23] R. Jairo, M. Torres, G.F. Edgar, C. Pirachica´ n-Mayorga,
Project scheduling with limited resources using a genetic
algorithm, Int. J. Project Manage. 28 (6) (2010) 619–628.
[24] B. Jarboui, N. Damak, P. Siarry, A. Rebai, A combinatorial
particle swarm optimization for solving multi-mode resource-
constrained project scheduling problems, Appl. Math. Comput.
195 (2008) 299–308.
[25] J. Jozefowska, M. Mika, R. Rozycki, G. Waligora, J. Weglarz,
Simulated
annealing
for
multi-mode
resource
constrained
project scheduling, Ann. Oper. Res. 102 (2001) 137–155.
[26] L. Kaplan, Resource-Constrained Project Scheduling with
Preemption of Jobs (Ph.D. Thesis), University of Michigan,
1988.
[27] S. Kirkpatrick, C. Gelatt, M. Vecchi, Optimization by simulated
annealing, Science 220 (1983) 671–680.
[28] G.
Knotts,
M.
Dror,
B.
Hartman,
Agent-based
project
scheduling, IIE Trans. 32 (5) (2000) 387–401.
[29] R. Kolisch, Serial and parallel resource constrained project
scheduling methods revisited: theory and computation, Eur. J.
Oper. Res. 90 (1996) 320–333.
[30] R. Kolisch, S. Hartmann, Heuristic algorithms for solving the
resource constrained project scheduling problem: classiﬁcation
and computational analysis, in: J. Weglarz (Ed.), Project
Scheduling: Recent Models, Algorithms and Applications,
Kluwer Academic Publishers, Boston, 1999, pp. 147–178.
[31] O. Kone´ , New approaches for solving the resource constrained
project scheduling problem, 4OR 10 (1) (2012) 105–106.
[32] A.
Lova,
P.
Tormos,
F.
Barber,
Multi-mode
resource
constrained project scheduling: scheduling schemes, priority
rules and mode selection rules, Intell. Artif. 30 (2006) 69–86.
[33] A. Lova, P. Tormos, M. Cervantes, F. Barber, An efﬁcient
hybrid genetic algorithm for scheduling projects with resource
constraints and multiple execution modes, Int. J. Prod. Econ.
117 (2) (2009) 302–316.
[34] M. Lundy, A. Mees, Convergence of an annealing algorithm,
Math. Program. 34 (1986) 111–124.
[35] M. Mika, G. Waligo´ ra, J. Weglarz, Simulated annealing and
tabu
search
for
multi-mode
resource
constrained
project
scheduling with positive discounted cash ﬂows and different
payment models, Eur. J. Oper. Res. 164 (2005) 639–668.
[36] E. Nabipoor Afruzi, E. Roghanian, A.A. Najaﬁ, M. Mazinani,
A multi-mode resource-constrained discrete time–cost tradeoff
problem solving using an adjusted fuzzy dominance genetic
algorithm, Sci. Iran. 20 (3) (2013) 931–944.
[37] K.
Nonobe,
T.
Ibaraki,
Formulation
and
Tabu
Search
Algorithm for the Resource Constrained Project Scheduling
Problem (RCPSP), Technical Report, Kyoto University, 2001.
[38] D.C. Paraskevopoulos, C.D. Tarantilis, G. Ioannou, Solving
project scheduling problems with resource constraints via an
event list-based evolutionary algorithm, Expert Syst. Appl. 39
(4) (2012) 3983–3994.
[39] E. Pinson, C. Prins, F. Rullier, Using tabu search for solving the
resource constrained project scheduling problem, in: Proceeding
of the 4th International Workshop of Project Management and
Scheduling, Leuven, 1994, pp. 102–106.
[40] A. Rahimi, H. Karimi, B. Afshar-Nadjaﬁ, Using meta-heuristics
for project scheduling under mode identity constraints, Appl.
Soft. Comput. 13 (4) (2013) 2124–2135.
[41] M. Ranjbar, An optimal NPV project scheduling with ﬁxed
work content and payment on milestones, Int. J. Ind. Eng. Prod.
Res. 22 (3) (2011) 181–186.
[42] M. Ranjbar, B. De Reyck, F. Kianfar, A hybrid scatter-search
for the discrete time/resource trade-off problem in project
scheduling, Eur. J. Oper. Res. 193 (1) (2008) 35–48.
[43] A. Sprecher, A. Drexl, Solving multi-mode resource constrained
project scheduling problems by a simple, general and powerful
sequencing algorithm, Eur. J. Oper. Res. 107 (1998) 431–450.
[44] A. Sprecher, S. Hartmann, A. Drexl, An exact algorithm for the
project scheduling with multiple modes, OR Spektrum 19 (1997)
195–203.
[45] G.
Taguchi,
Introduction
to
Quality
Engineering,
Asian
Productivity Organization, Tokyo, 1986.
[46] M. Vanhoucke, D. Debels, The impact of various activity
assumptions on the lead time and resource utilization of
resource constrained projects, Comput. Ind. Eng. 54 (2008)
140–154.
[47] V. Van Peteghem, M. Vanhoucke, A genetic algorithm for the
preemptive
and
non-preemptive
multi-mode
resource
200
B. Afshar-Nadjaﬁ
constrained project scheduling problem, Eur. J. Oper. Res. 201
(2) (2010) 409–418.
[48] H. Zhang, C. Tam, H. Li, Multi-mode project scheduling based
on
particle
swarm
optimization,
Comput.
Aided
Civ.
Infrastruct. Eng. 21 (2006) 93–103.
[49] H. Zhang, H. Li, C.M. Tam, Particle swarm optimization for
resource constrained project scheduling, Int. J. Project Manage.
24 (1) (2006) 83–92.
[50] G. Zhu, J. Bard, G. Tu, A branch-and-cut procedure for the
multimode resource constrained project scheduling problem, J.
Comput. 18 (3) (2006) 377–390.
Solution to multi-mode project scheduling problem
201
